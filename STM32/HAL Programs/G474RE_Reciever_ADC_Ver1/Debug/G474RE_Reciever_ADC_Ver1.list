
G474RE_Reciever_ADC_Ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006ea0  08006ea0  00007ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b8  080070b8  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070b8  080070b8  000080b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070c0  080070c0  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070c4  080070c4  000080c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080070c8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000000c  080070d4  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  080070d4  00009500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168a0  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1e  00000000  00000000  0001f8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00022300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffe  00000000  00000000  00023778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286e0  00000000  00000000  00024776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d70  00000000  00000000  0004ce56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112c1a  00000000  00000000  00063bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001767e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc8  00000000  00000000  00176824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0017c4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006e88 	.word	0x08006e88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006e88 	.word	0x08006e88

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b988 	b.w	8000e3c <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	468e      	mov	lr, r1
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	4688      	mov	r8, r1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d14a      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b54:	428a      	cmp	r2, r1
 8000b56:	4617      	mov	r7, r2
 8000b58:	d962      	bls.n	8000c20 <__udivmoddi4+0xdc>
 8000b5a:	fab2 f682 	clz	r6, r2
 8000b5e:	b14e      	cbz	r6, 8000b74 <__udivmoddi4+0x30>
 8000b60:	f1c6 0320 	rsb	r3, r6, #32
 8000b64:	fa01 f806 	lsl.w	r8, r1, r6
 8000b68:	fa20 f303 	lsr.w	r3, r0, r3
 8000b6c:	40b7      	lsls	r7, r6
 8000b6e:	ea43 0808 	orr.w	r8, r3, r8
 8000b72:	40b4      	lsls	r4, r6
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	fa1f fc87 	uxth.w	ip, r7
 8000b7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b80:	0c23      	lsrs	r3, r4, #16
 8000b82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d909      	bls.n	8000ba6 <__udivmoddi4+0x62>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b98:	f080 80ea 	bcs.w	8000d70 <__udivmoddi4+0x22c>
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	f240 80e7 	bls.w	8000d70 <__udivmoddi4+0x22c>
 8000ba2:	3902      	subs	r1, #2
 8000ba4:	443b      	add	r3, r7
 8000ba6:	1a9a      	subs	r2, r3, r2
 8000ba8:	b2a3      	uxth	r3, r4
 8000baa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bba:	459c      	cmp	ip, r3
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0x8e>
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc4:	f080 80d6 	bcs.w	8000d74 <__udivmoddi4+0x230>
 8000bc8:	459c      	cmp	ip, r3
 8000bca:	f240 80d3 	bls.w	8000d74 <__udivmoddi4+0x230>
 8000bce:	443b      	add	r3, r7
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd6:	eba3 030c 	sub.w	r3, r3, ip
 8000bda:	2100      	movs	r1, #0
 8000bdc:	b11d      	cbz	r5, 8000be6 <__udivmoddi4+0xa2>
 8000bde:	40f3      	lsrs	r3, r6
 8000be0:	2200      	movs	r2, #0
 8000be2:	e9c5 3200 	strd	r3, r2, [r5]
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d905      	bls.n	8000bfa <__udivmoddi4+0xb6>
 8000bee:	b10d      	cbz	r5, 8000bf4 <__udivmoddi4+0xb0>
 8000bf0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e7f5      	b.n	8000be6 <__udivmoddi4+0xa2>
 8000bfa:	fab3 f183 	clz	r1, r3
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d146      	bne.n	8000c90 <__udivmoddi4+0x14c>
 8000c02:	4573      	cmp	r3, lr
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xc8>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 8105 	bhi.w	8000e16 <__udivmoddi4+0x2d2>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4690      	mov	r8, r2
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0e5      	beq.n	8000be6 <__udivmoddi4+0xa2>
 8000c1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c1e:	e7e2      	b.n	8000be6 <__udivmoddi4+0xa2>
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	f000 8090 	beq.w	8000d46 <__udivmoddi4+0x202>
 8000c26:	fab2 f682 	clz	r6, r2
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f040 80a4 	bne.w	8000d78 <__udivmoddi4+0x234>
 8000c30:	1a8a      	subs	r2, r1, r2
 8000c32:	0c03      	lsrs	r3, r0, #16
 8000c34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c38:	b280      	uxth	r0, r0
 8000c3a:	b2bc      	uxth	r4, r7
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x11e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x11c>
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	f200 80e0 	bhi.w	8000e20 <__udivmoddi4+0x2dc>
 8000c60:	46c4      	mov	ip, r8
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c70:	fb02 f404 	mul.w	r4, r2, r4
 8000c74:	429c      	cmp	r4, r3
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x144>
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x142>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f200 80ca 	bhi.w	8000e1a <__udivmoddi4+0x2d6>
 8000c86:	4602      	mov	r2, r0
 8000c88:	1b1b      	subs	r3, r3, r4
 8000c8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c8e:	e7a5      	b.n	8000bdc <__udivmoddi4+0x98>
 8000c90:	f1c1 0620 	rsb	r6, r1, #32
 8000c94:	408b      	lsls	r3, r1
 8000c96:	fa22 f706 	lsr.w	r7, r2, r6
 8000c9a:	431f      	orrs	r7, r3
 8000c9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ca0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ca4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ca8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cac:	4323      	orrs	r3, r4
 8000cae:	fa00 f801 	lsl.w	r8, r0, r1
 8000cb2:	fa1f fc87 	uxth.w	ip, r7
 8000cb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000cba:	0c1c      	lsrs	r4, r3, #16
 8000cbc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cc0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cc4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x1a0>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cd6:	f080 809c 	bcs.w	8000e12 <__udivmoddi4+0x2ce>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8099 	bls.w	8000e12 <__udivmoddi4+0x2ce>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	eba4 040e 	sub.w	r4, r4, lr
 8000ce8:	fa1f fe83 	uxth.w	lr, r3
 8000cec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cf8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x1ce>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d06:	f080 8082 	bcs.w	8000e0e <__udivmoddi4+0x2ca>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	d97f      	bls.n	8000e0e <__udivmoddi4+0x2ca>
 8000d0e:	3b02      	subs	r3, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d1e:	4564      	cmp	r4, ip
 8000d20:	4673      	mov	r3, lr
 8000d22:	46e1      	mov	r9, ip
 8000d24:	d362      	bcc.n	8000dec <__udivmoddi4+0x2a8>
 8000d26:	d05f      	beq.n	8000de8 <__udivmoddi4+0x2a4>
 8000d28:	b15d      	cbz	r5, 8000d42 <__udivmoddi4+0x1fe>
 8000d2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d32:	fa04 f606 	lsl.w	r6, r4, r6
 8000d36:	fa22 f301 	lsr.w	r3, r2, r1
 8000d3a:	431e      	orrs	r6, r3
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d42:	2100      	movs	r1, #0
 8000d44:	e74f      	b.n	8000be6 <__udivmoddi4+0xa2>
 8000d46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d4a:	0c01      	lsrs	r1, r0, #16
 8000d4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d50:	b280      	uxth	r0, r0
 8000d52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d56:	463b      	mov	r3, r7
 8000d58:	4638      	mov	r0, r7
 8000d5a:	463c      	mov	r4, r7
 8000d5c:	46b8      	mov	r8, r7
 8000d5e:	46be      	mov	lr, r7
 8000d60:	2620      	movs	r6, #32
 8000d62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d66:	eba2 0208 	sub.w	r2, r2, r8
 8000d6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d6e:	e766      	b.n	8000c3e <__udivmoddi4+0xfa>
 8000d70:	4601      	mov	r1, r0
 8000d72:	e718      	b.n	8000ba6 <__udivmoddi4+0x62>
 8000d74:	4610      	mov	r0, r2
 8000d76:	e72c      	b.n	8000bd2 <__udivmoddi4+0x8e>
 8000d78:	f1c6 0220 	rsb	r2, r6, #32
 8000d7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d80:	40b7      	lsls	r7, r6
 8000d82:	40b1      	lsls	r1, r6
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d92:	b2bc      	uxth	r4, r7
 8000d94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d98:	0c11      	lsrs	r1, r2, #16
 8000d9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9e:	fb08 f904 	mul.w	r9, r8, r4
 8000da2:	40b0      	lsls	r0, r6
 8000da4:	4589      	cmp	r9, r1
 8000da6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000daa:	b280      	uxth	r0, r0
 8000dac:	d93e      	bls.n	8000e2c <__udivmoddi4+0x2e8>
 8000dae:	1879      	adds	r1, r7, r1
 8000db0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000db4:	d201      	bcs.n	8000dba <__udivmoddi4+0x276>
 8000db6:	4589      	cmp	r9, r1
 8000db8:	d81f      	bhi.n	8000dfa <__udivmoddi4+0x2b6>
 8000dba:	eba1 0109 	sub.w	r1, r1, r9
 8000dbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc2:	fb09 f804 	mul.w	r8, r9, r4
 8000dc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd0:	4542      	cmp	r2, r8
 8000dd2:	d229      	bcs.n	8000e28 <__udivmoddi4+0x2e4>
 8000dd4:	18ba      	adds	r2, r7, r2
 8000dd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dda:	d2c4      	bcs.n	8000d66 <__udivmoddi4+0x222>
 8000ddc:	4542      	cmp	r2, r8
 8000dde:	d2c2      	bcs.n	8000d66 <__udivmoddi4+0x222>
 8000de0:	f1a9 0102 	sub.w	r1, r9, #2
 8000de4:	443a      	add	r2, r7
 8000de6:	e7be      	b.n	8000d66 <__udivmoddi4+0x222>
 8000de8:	45f0      	cmp	r8, lr
 8000dea:	d29d      	bcs.n	8000d28 <__udivmoddi4+0x1e4>
 8000dec:	ebbe 0302 	subs.w	r3, lr, r2
 8000df0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000df4:	3801      	subs	r0, #1
 8000df6:	46e1      	mov	r9, ip
 8000df8:	e796      	b.n	8000d28 <__udivmoddi4+0x1e4>
 8000dfa:	eba7 0909 	sub.w	r9, r7, r9
 8000dfe:	4449      	add	r1, r9
 8000e00:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e04:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e08:	fb09 f804 	mul.w	r8, r9, r4
 8000e0c:	e7db      	b.n	8000dc6 <__udivmoddi4+0x282>
 8000e0e:	4673      	mov	r3, lr
 8000e10:	e77f      	b.n	8000d12 <__udivmoddi4+0x1ce>
 8000e12:	4650      	mov	r0, sl
 8000e14:	e766      	b.n	8000ce4 <__udivmoddi4+0x1a0>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e6fd      	b.n	8000c16 <__udivmoddi4+0xd2>
 8000e1a:	443b      	add	r3, r7
 8000e1c:	3a02      	subs	r2, #2
 8000e1e:	e733      	b.n	8000c88 <__udivmoddi4+0x144>
 8000e20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e24:	443b      	add	r3, r7
 8000e26:	e71c      	b.n	8000c62 <__udivmoddi4+0x11e>
 8000e28:	4649      	mov	r1, r9
 8000e2a:	e79c      	b.n	8000d66 <__udivmoddi4+0x222>
 8000e2c:	eba1 0109 	sub.w	r1, r1, r9
 8000e30:	46c4      	mov	ip, r8
 8000e32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e36:	fb09 f804 	mul.w	r8, r9, r4
 8000e3a:	e7c4      	b.n	8000dc6 <__udivmoddi4+0x282>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <Goertzel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double Goertzel(uint16_t *samples, int N, int target_freq) {
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b090      	sub	sp, #64	@ 0x40
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	double s_prev = 0, s_prev2 = 0;
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double normalizedfreq = 2.0 * M_PI * target_freq / SAMPLE_RATE;
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fb29 	bl	80004bc <__aeabi_i2d>
 8000e6a:	a347      	add	r3, pc, #284	@ (adr r3, 8000f88 <Goertzel+0x148>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff fb8e 	bl	8000590 <__aeabi_dmul>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	a344      	add	r3, pc, #272	@ (adr r3, 8000f90 <Goertzel+0x150>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff fcaf 	bl	80007e4 <__aeabi_ddiv>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double coeff = 2 * cos(normalizedfreq);
 8000e8e:	ed97 0b08 	vldr	d0, [r7, #32]
 8000e92:	f004 ffd5 	bl	8005e40 <cos>
 8000e96:	ec51 0b10 	vmov	r0, r1, d0
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	f7ff f9c1 	bl	8000224 <__adddf3>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < N; i++) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eae:	e02c      	b.n	8000f0a <Goertzel+0xca>
		double s = samples[i] + coeff * s_prev - s_prev2;
 8000eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fafe 	bl	80004bc <__aeabi_i2d>
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	460d      	mov	r5, r1
 8000ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000ec8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ecc:	f7ff fb60 	bl	8000590 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	f7ff f9a4 	bl	8000224 <__adddf3>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ee8:	f7ff f99a 	bl	8000220 <__aeabi_dsub>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		s_prev2 = s_prev;
 8000ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000ef8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		s_prev = s;
 8000efc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f00:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	for (int i = 0; i < N; i++) {
 8000f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f06:	3301      	adds	r3, #1
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbce      	blt.n	8000eb0 <Goertzel+0x70>
	}
	return s_prev2 * s_prev2 + s_prev * s_prev - coeff * s_prev * s_prev2;
 8000f12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000f16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000f1a:	f7ff fb39 	bl	8000590 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4614      	mov	r4, r2
 8000f24:	461d      	mov	r5, r3
 8000f26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000f2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000f2e:	f7ff fb2f 	bl	8000590 <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4620      	mov	r0, r4
 8000f38:	4629      	mov	r1, r5
 8000f3a:	f7ff f973 	bl	8000224 <__adddf3>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4614      	mov	r4, r2
 8000f44:	461d      	mov	r5, r3
 8000f46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000f4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f4e:	f7ff fb1f 	bl	8000590 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000f5e:	f7ff fb17 	bl	8000590 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4620      	mov	r0, r4
 8000f68:	4629      	mov	r1, r5
 8000f6a:	f7ff f959 	bl	8000220 <__aeabi_dsub>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f76:	eeb0 0a47 	vmov.f32	s0, s14
 8000f7a:	eef0 0a67 	vmov.f32	s1, s15
 8000f7e:	3740      	adds	r7, #64	@ 0x40
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bdb0      	pop	{r4, r5, r7, pc}
 8000f84:	f3af 8000 	nop.w
 8000f88:	54442d18 	.word	0x54442d18
 8000f8c:	401921fb 	.word	0x401921fb
 8000f90:	00000000 	.word	0x00000000
 8000f94:	40e38800 	.word	0x40e38800

08000f98 <DecodeBuffer>:

void DecodeBuffer(uint16_t *buffer) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	double mag1 = Goertzel(buffer, BUFFER_LEN, GOERTZ_FREQ1);
 8000fa0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fa4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff49 	bl	8000e40 <Goertzel>
 8000fae:	ed87 0b06 	vstr	d0, [r7, #24]
	double mag2 = Goertzel(buffer, BUFFER_LEN, GOERTZ_FREQ2);
 8000fb2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000fb6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff40 	bl	8000e40 <Goertzel>
 8000fc0:	ed87 0b04 	vstr	d0, [r7, #16]
	uint8_t bit = (mag1 > mag2) ? 1 : 0;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	461c      	mov	r4, r3
 8000fc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fcc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fd0:	f7ff fd6e 	bl	8000ab0 <__aeabi_dcmpgt>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <DecodeBuffer+0x46>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	461c      	mov	r4, r3
 8000fde:	b2e3      	uxtb	r3, r4
 8000fe0:	73fb      	strb	r3, [r7, #15]

	// Store decoded bits in byte
	static uint8_t byte = 0;
	static int bit_count = 0;
	byte |= (bit << bit_count);
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <DecodeBuffer+0xa0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <DecodeBuffer+0xa4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <DecodeBuffer+0xa4>)
 8000ffc:	701a      	strb	r2, [r3, #0]
	bit_count++;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <DecodeBuffer+0xa0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <DecodeBuffer+0xa0>)
 8001006:	6013      	str	r3, [r2, #0]
	if (bit_count >= 8) {
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <DecodeBuffer+0xa0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b07      	cmp	r3, #7
 800100e:	dd0f      	ble.n	8001030 <DecodeBuffer+0x98>
		char c = byte;
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <DecodeBuffer+0xa4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, (uint8_t*) &c, 1, 10);
 8001016:	f107 010e 	add.w	r1, r7, #14
 800101a:	230a      	movs	r3, #10
 800101c:	2201      	movs	r2, #1
 800101e:	4808      	ldr	r0, [pc, #32]	@ (8001040 <DecodeBuffer+0xa8>)
 8001020:	f004 f834 	bl	800508c <HAL_UART_Transmit>
		byte = 0;
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <DecodeBuffer+0xa4>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
		bit_count = 0;
 800102a:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <DecodeBuffer+0xa0>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	}
}
 8001030:	bf00      	nop
 8001032:	3724      	adds	r7, #36	@ 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	200004f4 	.word	0x200004f4
 800103c:	200004f8 	.word	0x200004f8
 8001040:	20000460 	.word	0x20000460

08001044 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	DecodeBuffer(adc_buffer);  // first half of buffer
 800104c:	4803      	ldr	r0, [pc, #12]	@ (800105c <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800104e:	f7ff ffa3 	bl	8000f98 <DecodeBuffer>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000028 	.word	0x20000028

08001060 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	DecodeBuffer(adc_buffer + BUFFER_LEN / 2);  // second half
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_ADC_ConvCpltCallback+0x18>)
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff94 	bl	8000f98 <DecodeBuffer>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200001b8 	.word	0x200001b8

0800107c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001080:	f000 fb6b 	bl	800175a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001084:	f000 f816 	bl	80010b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001088:	f000 f99c 	bl	80013c4 <MX_GPIO_Init>
	MX_DMA_Init();
 800108c:	f000 f970 	bl	8001370 <MX_DMA_Init>
	MX_ADC1_Init();
 8001090:	f000 f85c 	bl	800114c <MX_ADC1_Init>
	MX_TIM3_Init();
 8001094:	f000 f8d2 	bl	800123c <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8001098:	f000 f91e 	bl	80012d8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BUFFER_LEN);
 800109c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80010a0:	4902      	ldr	r1, [pc, #8]	@ (80010ac <main+0x30>)
 80010a2:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <main+0x34>)
 80010a4:	f000 ffa4 	bl	8001ff0 <HAL_ADC_Start_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <main+0x2c>
 80010ac:	20000028 	.word	0x20000028
 80010b0:	20000348 	.word	0x20000348

080010b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	@ 0x50
 80010b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	2238      	movs	r2, #56	@ 0x38
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 fe8e 	bl	8005de4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f002 fc04 	bl	80038e4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e6:	2340      	movs	r3, #64	@ 0x40
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80010f6:	2355      	movs	r3, #85	@ 0x55
 80010f8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010fe:	2302      	movs	r3, #2
 8001100:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001102:	2302      	movs	r3, #2
 8001104:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fc9e 	bl	8003a4c <HAL_RCC_OscConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x66>
		Error_Handler();
 8001116:	f000 f985 	bl	8001424 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800111a:	230f      	movs	r3, #15
 800111c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111e:	2303      	movs	r3, #3
 8001120:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2104      	movs	r1, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f002 ff9c 	bl	8004070 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x8e>
		Error_Handler();
 800113e:	f000 f971 	bl	8001424 <Error_Handler>
	}
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	@ 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	@ 0x30
 8001150:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2220      	movs	r2, #32
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f004 fe3d 	bl	8005de4 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800116a:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <MX_ADC1_Init+0xe8>)
 800116c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001170:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001172:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <MX_ADC1_Init+0xe8>)
 8001174:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001178:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117a:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <MX_ADC1_Init+0xe8>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001180:	4b2c      	ldr	r3, [pc, #176]	@ (8001234 <MX_ADC1_Init+0xe8>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001186:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <MX_ADC1_Init+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <MX_ADC1_Init+0xe8>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <MX_ADC1_Init+0xe8>)
 8001194:	2204      	movs	r2, #4
 8001196:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001198:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <MX_ADC1_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011d4:	4817      	ldr	r0, [pc, #92]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011d6:	f000 fd4f 	bl	8001c78 <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x98>
		Error_Handler();
 80011e0:	f000 f920 	bl	8001424 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80011e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4811      	ldr	r0, [pc, #68]	@ (8001234 <MX_ADC1_Init+0xe8>)
 80011f0:	f001 fd6c 	bl	8002ccc <HAL_ADCEx_MultiModeConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xb2>
		Error_Handler();
 80011fa:	f000 f913 	bl	8001424 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_ADC1_Init+0xec>)
 8001200:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001202:	2306      	movs	r3, #6
 8001204:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001206:	2304      	movs	r3, #4
 8001208:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120a:	237f      	movs	r3, #127	@ 0x7f
 800120c:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800120e:	2304      	movs	r3, #4
 8001210:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	@ (8001234 <MX_ADC1_Init+0xe8>)
 800121c:	f000 ffc6 	bl	80021ac <HAL_ADC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC1_Init+0xde>
		Error_Handler();
 8001226:	f000 f8fd 	bl	8001424 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	@ 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000348 	.word	0x20000348
 8001238:	04300002 	.word	0x04300002

0800123c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_TIM3_Init+0x94>)
 800125c:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <MX_TIM3_Init+0x98>)
 800125e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 169;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_TIM3_Init+0x94>)
 8001262:	22a9      	movs	r2, #169	@ 0xa9
 8001264:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_TIM3_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 24;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM3_Init+0x94>)
 800126e:	2218      	movs	r2, #24
 8001270:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_TIM3_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_TIM3_Init+0x94>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800127e:	4814      	ldr	r0, [pc, #80]	@ (80012d0 <MX_TIM3_Init+0x94>)
 8001280:	f003 fb60 	bl	8004944 <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM3_Init+0x52>
		Error_Handler();
 800128a:	f000 f8cb 	bl	8001424 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001292:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <MX_TIM3_Init+0x94>)
 800129c:	f003 fbaa 	bl	80049f4 <HAL_TIM_ConfigClockSource>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x6e>
		Error_Handler();
 80012a6:	f000 f8bd 	bl	8001424 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012aa:	2320      	movs	r3, #32
 80012ac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <MX_TIM3_Init+0x94>)
 80012b8:	f003 fe02 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80012c2:	f000 f8af 	bl	8001424 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000414 	.word	0x20000414
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 80012de:	4a23      	ldr	r2, [pc, #140]	@ (800136c <MX_USART2_UART_Init+0x94>)
 80012e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001320:	4811      	ldr	r0, [pc, #68]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 8001322:	f003 fe63 	bl	8004fec <HAL_UART_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 800132c:	f000 f87a 	bl	8001424 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001330:	2100      	movs	r1, #0
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 8001334:	f004 fc8c 	bl	8005c50 <HAL_UARTEx_SetTxFifoThreshold>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800133e:	f000 f871 	bl	8001424 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001342:	2100      	movs	r1, #0
 8001344:	4808      	ldr	r0, [pc, #32]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 8001346:	f004 fcc1 	bl	8005ccc <HAL_UARTEx_SetRxFifoThreshold>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001350:	f000 f868 	bl	8001424 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_USART2_UART_Init+0x90>)
 8001356:	f004 fc42 	bl	8005bde <HAL_UARTEx_DisableFifoMode>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8001360:	f000 f860 	bl	8001424 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000460 	.word	0x20000460
 800136c:	40004400 	.word	0x40004400

08001370 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_DMA_Init+0x50>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800137a:	4a11      	ldr	r2, [pc, #68]	@ (80013c0 <MX_DMA_Init+0x50>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6493      	str	r3, [r2, #72]	@ 0x48
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_DMA_Init+0x50>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_DMA_Init+0x50>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001392:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <MX_DMA_Init+0x50>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6493      	str	r3, [r2, #72]	@ 0x48
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_DMA_Init+0x50>)
 800139c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200b      	movs	r0, #11
 80013ac:	f001 fe71 	bl	8003092 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b0:	200b      	movs	r0, #11
 80013b2:	f001 fe88 	bl	80030c6 <HAL_NVIC_EnableIRQ>

}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <MX_GPIO_Init+0x5c>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <MX_GPIO_Init+0x5c>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_GPIO_Init+0x5c>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <MX_GPIO_Init+0x5c>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <MX_GPIO_Init+0x5c>)
 80013e8:	f043 0320 	orr.w	r3, r3, #32
 80013ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <MX_GPIO_Init+0x5c>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <MX_GPIO_Init+0x5c>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <MX_GPIO_Init+0x5c>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <MX_GPIO_Init+0x5c>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000

08001424 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_MspInit+0x44>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143a:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6613      	str	r3, [r2, #96]	@ 0x60
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_MspInit+0x44>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_MspInit+0x44>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001452:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <HAL_MspInit+0x44>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001458:	6593      	str	r3, [r2, #88]	@ 0x58
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_MspInit+0x44>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001466:	f002 fae1 	bl	8003a2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b09e      	sub	sp, #120	@ 0x78
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2254      	movs	r2, #84	@ 0x54
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f004 fca3 	bl	8005de4 <memset>
  if(hadc->Instance==ADC1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014a6:	d160      	bne.n	800156a <HAL_ADC_MspInit+0xf2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014ae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014b2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fff5 	bl	80044a8 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014c4:	f7ff ffae 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <HAL_ADC_MspInit+0xfc>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014cc:	4a29      	ldr	r2, [pc, #164]	@ (8001574 <HAL_ADC_MspInit+0xfc>)
 80014ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d4:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <HAL_ADC_MspInit+0xfc>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <HAL_ADC_MspInit+0xfc>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e4:	4a23      	ldr	r2, [pc, #140]	@ (8001574 <HAL_ADC_MspInit+0xfc>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <HAL_ADC_MspInit+0xfc>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f8:	2301      	movs	r3, #1
 80014fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fc:	2303      	movs	r3, #3
 80014fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150e:	f002 f867 	bl	80035e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 8001514:	4a19      	ldr	r2, [pc, #100]	@ (800157c <HAL_ADC_MspInit+0x104>)
 8001516:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 800151a:	2205      	movs	r2, #5
 800151c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 8001532:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001536:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 800153a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001540:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 8001542:	2220      	movs	r2, #32
 8001544:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 8001548:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800154c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800154e:	480a      	ldr	r0, [pc, #40]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 8001550:	f001 fdd4 	bl	80030fc <HAL_DMA_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800155a:	f7ff ff63 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 8001562:	655a      	str	r2, [r3, #84]	@ 0x54
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_ADC_MspInit+0x100>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800156a:	bf00      	nop
 800156c:	3778      	adds	r7, #120	@ 0x78
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	200003b4 	.word	0x200003b4
 800157c:	40020008 	.word	0x40020008

08001580 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_TIM_Base_MspInit+0x38>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10b      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001596:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6593      	str	r3, [r2, #88]	@ 0x58
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40000400 	.word	0x40000400
 80015bc:	40021000 	.word	0x40021000

080015c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09e      	sub	sp, #120	@ 0x78
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2254      	movs	r2, #84	@ 0x54
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 fbff 	bl	8005de4 <memset>
  if(huart->Instance==USART2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <HAL_UART_MspInit+0xa8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d136      	bne.n	800165e <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 ff53 	bl	80044a8 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001608:	f7ff ff0c 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <HAL_UART_MspInit+0xac>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001610:	4a16      	ldr	r2, [pc, #88]	@ (800166c <HAL_UART_MspInit+0xac>)
 8001612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001616:	6593      	str	r3, [r2, #88]	@ 0x58
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <HAL_UART_MspInit+0xac>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_UART_MspInit+0xac>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001628:	4a10      	ldr	r2, [pc, #64]	@ (800166c <HAL_UART_MspInit+0xac>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_UART_MspInit+0xac>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800163c:	230c      	movs	r3, #12
 800163e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164c:	2307      	movs	r3, #7
 800164e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165a:	f001 ffc1 	bl	80035e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800165e:	bf00      	nop
 8001660:	3778      	adds	r7, #120	@ 0x78
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40004400 	.word	0x40004400
 800166c:	40021000 	.word	0x40021000

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <NMI_Handler+0x4>

08001678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <MemManage_Handler+0x4>

08001688 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <UsageFault_Handler+0x4>

08001698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c6:	f000 f89b 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <DMA1_Channel1_IRQHandler+0x10>)
 80016d6:	f001 fe34 	bl	8003342 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200003b4 	.word	0x200003b4

080016e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001708:	480d      	ldr	r0, [pc, #52]	@ (8001740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800170a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800170c:	f7ff ffea 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopForever+0x6>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopForever+0xe>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopForever+0x16>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001736:	f004 fb5d 	bl	8005df4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173a:	f7ff fc9f 	bl	800107c <main>

0800173e <LoopForever>:

LoopForever:
    b LoopForever
 800173e:	e7fe      	b.n	800173e <LoopForever>
  ldr   r0, =_estack
 8001740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800174c:	080070c8 	.word	0x080070c8
  ldr r2, =_sbss
 8001750:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001754:	20000500 	.word	0x20000500

08001758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC1_2_IRQHandler>

0800175a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f001 fc89 	bl	800307c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176a:	200f      	movs	r0, #15
 800176c:	f000 f80e 	bl	800178c <HAL_InitTick>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	71fb      	strb	r3, [r7, #7]
 800177a:	e001      	b.n	8001780 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800177c:	f7ff fe58 	bl	8001430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001780:	79fb      	ldrb	r3, [r7, #7]

}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001798:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <HAL_InitTick+0x68>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d022      	beq.n	80017e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_InitTick+0x6c>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <HAL_InitTick+0x68>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 fc94 	bl	80030e2 <HAL_SYSTICK_Config>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10f      	bne.n	80017e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	d809      	bhi.n	80017da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c6:	2200      	movs	r2, #0
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	f04f 30ff 	mov.w	r0, #4294967295
 80017ce:	f001 fc60 	bl	8003092 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <HAL_InitTick+0x70>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e007      	b.n	80017ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	e004      	b.n	80017ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e001      	b.n	80017ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_IncTick+0x1c>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_IncTick+0x20>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4413      	add	r3, r2
 800180e:	4a03      	ldr	r2, [pc, #12]	@ (800181c <HAL_IncTick+0x1c>)
 8001810:	6013      	str	r3, [r2, #0]
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	200004fc 	.word	0x200004fc
 8001820:	20000008 	.word	0x20000008

08001824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_GetTick+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200004fc 	.word	0x200004fc

0800183c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	609a      	str	r2, [r3, #8]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	609a      	str	r2, [r3, #8]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3360      	adds	r3, #96	@ 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <LL_ADC_SetOffset+0x44>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	4313      	orrs	r3, r2
 80018d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018dc:	bf00      	nop
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	03fff000 	.word	0x03fff000

080018ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3360      	adds	r3, #96	@ 0x60
 80018fa:	461a      	mov	r2, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3360      	adds	r3, #96	@ 0x60
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800194e:	b480      	push	{r7}
 8001950:	b087      	sub	sp, #28
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3360      	adds	r3, #96	@ 0x60
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	431a      	orrs	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001978:	bf00      	nop
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3360      	adds	r3, #96	@ 0x60
 8001994:	461a      	mov	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	615a      	str	r2, [r3, #20]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3330      	adds	r3, #48	@ 0x30
 8001a16:	461a      	mov	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	211f      	movs	r1, #31
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	401a      	ands	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	f003 011f 	and.w	r1, r3, #31
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b087      	sub	sp, #28
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3314      	adds	r3, #20
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	0e5b      	lsrs	r3, r3, #25
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	4413      	add	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	0d1b      	lsrs	r3, r3, #20
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2107      	movs	r1, #7
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	401a      	ands	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	0d1b      	lsrs	r3, r3, #20
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001acc:	43db      	mvns	r3, r3
 8001ace:	401a      	ands	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0318 	and.w	r3, r3, #24
 8001ad6:	4908      	ldr	r1, [pc, #32]	@ (8001af8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ad8:	40d9      	lsrs	r1, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	400b      	ands	r3, r1
 8001ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	0007ffff 	.word	0x0007ffff

08001afc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 031f 	and.w	r3, r3, #31
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6093      	str	r3, [r2, #8]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b50:	d101      	bne.n	8001b56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <LL_ADC_IsEnabled+0x18>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <LL_ADC_IsEnabled+0x1a>
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c16:	f043 0204 	orr.w	r2, r3, #4
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d101      	bne.n	8001c68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e1a9      	b.n	8001fe6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fbe9 	bl	8001478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff3f 	bl	8001b3c <LL_ADC_IsDeepPowerDownEnabled>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff25 	bl	8001b18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff5a 	bl	8001b8c <LL_ADC_IsInternalRegulatorEnabled>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d115      	bne.n	8001d0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff3e 	bl	8001b64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ce8:	4b9c      	ldr	r3, [pc, #624]	@ (8001f5c <HAL_ADC_Init+0x2e4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	4a9c      	ldr	r2, [pc, #624]	@ (8001f60 <HAL_ADC_Init+0x2e8>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff3c 	bl	8001b8c <LL_ADC_IsInternalRegulatorEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff75 	bl	8001c2a <LL_ADC_REG_IsConversionOngoing>
 8001d40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 8142 	bne.w	8001fd4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 813e 	bne.w	8001fd4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d60:	f043 0202 	orr.w	r2, r3, #2
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff35 	bl	8001bdc <LL_ADC_IsEnabled>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d141      	bne.n	8001dfc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d80:	d004      	beq.n	8001d8c <HAL_ADC_Init+0x114>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a77      	ldr	r2, [pc, #476]	@ (8001f64 <HAL_ADC_Init+0x2ec>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d10f      	bne.n	8001dac <HAL_ADC_Init+0x134>
 8001d8c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d90:	f7ff ff24 	bl	8001bdc <LL_ADC_IsEnabled>
 8001d94:	4604      	mov	r4, r0
 8001d96:	4873      	ldr	r0, [pc, #460]	@ (8001f64 <HAL_ADC_Init+0x2ec>)
 8001d98:	f7ff ff20 	bl	8001bdc <LL_ADC_IsEnabled>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4323      	orrs	r3, r4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e012      	b.n	8001dd2 <HAL_ADC_Init+0x15a>
 8001dac:	486e      	ldr	r0, [pc, #440]	@ (8001f68 <HAL_ADC_Init+0x2f0>)
 8001dae:	f7ff ff15 	bl	8001bdc <LL_ADC_IsEnabled>
 8001db2:	4604      	mov	r4, r0
 8001db4:	486d      	ldr	r0, [pc, #436]	@ (8001f6c <HAL_ADC_Init+0x2f4>)
 8001db6:	f7ff ff11 	bl	8001bdc <LL_ADC_IsEnabled>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	431c      	orrs	r4, r3
 8001dbe:	486c      	ldr	r0, [pc, #432]	@ (8001f70 <HAL_ADC_Init+0x2f8>)
 8001dc0:	f7ff ff0c 	bl	8001bdc <LL_ADC_IsEnabled>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4323      	orrs	r3, r4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d012      	beq.n	8001dfc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dde:	d004      	beq.n	8001dea <HAL_ADC_Init+0x172>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a5f      	ldr	r2, [pc, #380]	@ (8001f64 <HAL_ADC_Init+0x2ec>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Init+0x176>
 8001dea:	4a62      	ldr	r2, [pc, #392]	@ (8001f74 <HAL_ADC_Init+0x2fc>)
 8001dec:	e000      	b.n	8001df0 <HAL_ADC_Init+0x178>
 8001dee:	4a62      	ldr	r2, [pc, #392]	@ (8001f78 <HAL_ADC_Init+0x300>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f7ff fd20 	bl	800183c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7f5b      	ldrb	r3, [r3, #29]
 8001e00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d106      	bne.n	8001e38 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	045b      	lsls	r3, r3, #17
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e44:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	4b48      	ldr	r3, [pc, #288]	@ (8001f7c <HAL_ADC_Init+0x304>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fee4 	bl	8001c50 <LL_ADC_INJ_IsConversionOngoing>
 8001e88:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d17f      	bne.n	8001f90 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d17c      	bne.n	8001f90 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e9a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ea2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eb2:	f023 0302 	bic.w	r3, r3, #2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ed6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ee0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ee4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6911      	ldr	r1, [r2, #16]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001ef6:	e013      	b.n	8001f20 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f1c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d12a      	bne.n	8001f80 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f40:	4311      	orrs	r1, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f46:	4311      	orrs	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	e019      	b.n	8001f90 <HAL_ADC_Init+0x318>
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	053e2d63 	.word	0x053e2d63
 8001f64:	50000100 	.word	0x50000100
 8001f68:	50000400 	.word	0x50000400
 8001f6c:	50000500 	.word	0x50000500
 8001f70:	50000600 	.word	0x50000600
 8001f74:	50000300 	.word	0x50000300
 8001f78:	50000700 	.word	0x50000700
 8001f7c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d10c      	bne.n	8001fb2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f023 010f 	bic.w	r1, r3, #15
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	1e5a      	subs	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fb0:	e007      	b.n	8001fc2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 020f 	bic.w	r2, r2, #15
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fd2:	e007      	b.n	8001fe4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	f043 0210 	orr.w	r2, r3, #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}
 8001fee:	bf00      	nop

08001ff0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002004:	d004      	beq.n	8002010 <HAL_ADC_Start_DMA+0x20>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a5a      	ldr	r2, [pc, #360]	@ (8002174 <HAL_ADC_Start_DMA+0x184>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_ADC_Start_DMA+0x24>
 8002010:	4b59      	ldr	r3, [pc, #356]	@ (8002178 <HAL_ADC_Start_DMA+0x188>)
 8002012:	e000      	b.n	8002016 <HAL_ADC_Start_DMA+0x26>
 8002014:	4b59      	ldr	r3, [pc, #356]	@ (800217c <HAL_ADC_Start_DMA+0x18c>)
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fd70 	bl	8001afc <LL_ADC_GetMultimode>
 800201c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fe01 	bl	8001c2a <LL_ADC_REG_IsConversionOngoing>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 809b 	bne.w	8002166 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ADC_Start_DMA+0x4e>
 800203a:	2302      	movs	r3, #2
 800203c:	e096      	b.n	800216c <HAL_ADC_Start_DMA+0x17c>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a4d      	ldr	r2, [pc, #308]	@ (8002180 <HAL_ADC_Start_DMA+0x190>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d008      	beq.n	8002062 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b05      	cmp	r3, #5
 800205a:	d002      	beq.n	8002062 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b09      	cmp	r3, #9
 8002060:	d17a      	bne.n	8002158 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fce2 	bl	8002a2c <ADC_Enable>
 8002068:	4603      	mov	r3, r0
 800206a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d16d      	bne.n	800214e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a3a      	ldr	r2, [pc, #232]	@ (8002174 <HAL_ADC_Start_DMA+0x184>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_ADC_Start_DMA+0xb4>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3b      	ldr	r2, [pc, #236]	@ (8002184 <HAL_ADC_Start_DMA+0x194>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d002      	beq.n	80020a0 <HAL_ADC_Start_DMA+0xb0>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e003      	b.n	80020a8 <HAL_ADC_Start_DMA+0xb8>
 80020a0:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <HAL_ADC_Start_DMA+0x198>)
 80020a2:	e001      	b.n	80020a8 <HAL_ADC_Start_DMA+0xb8>
 80020a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d002      	beq.n	80020b6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d2:	f023 0206 	bic.w	r2, r3, #6
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80020da:	e002      	b.n	80020e2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e6:	4a29      	ldr	r2, [pc, #164]	@ (800218c <HAL_ADC_Start_DMA+0x19c>)
 80020e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	4a28      	ldr	r2, [pc, #160]	@ (8002190 <HAL_ADC_Start_DMA+0x1a0>)
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f6:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <HAL_ADC_Start_DMA+0x1a4>)
 80020f8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	221c      	movs	r2, #28
 8002100:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0210 	orr.w	r2, r2, #16
 8002118:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3340      	adds	r3, #64	@ 0x40
 8002134:	4619      	mov	r1, r3
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f001 f887 	bl	800324c <HAL_DMA_Start_IT>
 800213e:	4603      	mov	r3, r0
 8002140:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fd5b 	bl	8001c02 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800214c:	e00d      	b.n	800216a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002156:	e008      	b.n	800216a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002164:	e001      	b.n	800216a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	50000100 	.word	0x50000100
 8002178:	50000300 	.word	0x50000300
 800217c:	50000700 	.word	0x50000700
 8002180:	50000600 	.word	0x50000600
 8002184:	50000500 	.word	0x50000500
 8002188:	50000400 	.word	0x50000400
 800218c:	08002b59 	.word	0x08002b59
 8002190:	08002c31 	.word	0x08002c31
 8002194:	08002c4d 	.word	0x08002c4d

08002198 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0b6      	sub	sp, #216	@ 0xd8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x24>
 80021ca:	2302      	movs	r3, #2
 80021cc:	f000 bc13 	b.w	80029f6 <HAL_ADC_ConfigChannel+0x84a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fd24 	bl	8001c2a <LL_ADC_REG_IsConversionOngoing>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 83f3 	bne.w	80029d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6859      	ldr	r1, [r3, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f7ff fc05 	bl	8001a06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fd12 	bl	8001c2a <LL_ADC_REG_IsConversionOngoing>
 8002206:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fd1e 	bl	8001c50 <LL_ADC_INJ_IsConversionOngoing>
 8002214:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002218:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 81d9 	bne.w	80025d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 81d4 	bne.w	80025d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002234:	d10f      	bne.n	8002256 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	4619      	mov	r1, r3
 8002242:	f7ff fc0c 	bl	8001a5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fbb3 	bl	80019ba <LL_ADC_SetSamplingTimeCommonConfig>
 8002254:	e00e      	b.n	8002274 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	461a      	mov	r2, r3
 8002264:	f7ff fbfb 	bl	8001a5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fba3 	bl	80019ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	08db      	lsrs	r3, r3, #3
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d022      	beq.n	80022dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6919      	ldr	r1, [r3, #16]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022a6:	f7ff fafd 	bl	80018a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6919      	ldr	r1, [r3, #16]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f7ff fb49 	bl	800194e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x126>
 80022cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022d0:	e000      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x128>
 80022d2:	2300      	movs	r3, #0
 80022d4:	461a      	mov	r2, r3
 80022d6:	f7ff fb55 	bl	8001984 <LL_ADC_SetOffsetSaturation>
 80022da:	e17b      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fb02 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x15c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff faf7 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	f003 021f 	and.w	r2, r3, #31
 8002306:	e01e      	b.n	8002346 <HAL_ADC_ConfigChannel+0x19a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff faec 	bl	80018ec <LL_ADC_GetOffsetChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800232a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800232e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e004      	b.n	8002344 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800233a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <HAL_ADC_ConfigChannel+0x1b2>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	e018      	b.n	8002390 <HAL_ADC_ConfigChannel+0x1e4>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002376:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800237a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002382:	2320      	movs	r3, #32
 8002384:	e004      	b.n	8002390 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fabb 	bl	8001918 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fa9f 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x222>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fa94 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	0e9b      	lsrs	r3, r3, #26
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	e01e      	b.n	800240c <HAL_ADC_ConfigChannel+0x260>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fa89 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80023ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80023f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e004      	b.n	800240a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x278>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	e018      	b.n	8002456 <HAL_ADC_ConfigChannel+0x2aa>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002438:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800243c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	e004      	b.n	8002456 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800244c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002456:	429a      	cmp	r2, r3
 8002458:	d106      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	2101      	movs	r1, #1
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fa58 	bl	8001918 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2102      	movs	r1, #2
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fa3c 	bl	80018ec <LL_ADC_GetOffsetChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x2e8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fa31 	bl	80018ec <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	f003 021f 	and.w	r2, r3, #31
 8002492:	e01e      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x326>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2102      	movs	r1, #2
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fa26 	bl	80018ec <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80024b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80024ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e004      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80024c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x33e>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	e016      	b.n	8002518 <HAL_ADC_ConfigChannel+0x36c>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80024fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002502:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e004      	b.n	8002518 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800250e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002518:	429a      	cmp	r2, r3
 800251a:	d106      	bne.n	800252a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2200      	movs	r2, #0
 8002522:	2102      	movs	r1, #2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff f9f7 	bl	8001918 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2103      	movs	r1, #3
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff f9db 	bl	80018ec <LL_ADC_GetOffsetChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x3aa>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2103      	movs	r1, #3
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f9d0 	bl	80018ec <LL_ADC_GetOffsetChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	0e9b      	lsrs	r3, r3, #26
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	e017      	b.n	8002586 <HAL_ADC_ConfigChannel+0x3da>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2103      	movs	r1, #3
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f9c5 	bl	80018ec <LL_ADC_GetOffsetChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800256e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002570:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002578:	2320      	movs	r3, #32
 800257a:	e003      	b.n	8002584 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800257c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <HAL_ADC_ConfigChannel+0x3f2>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	e011      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x416>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80025ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80025b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e003      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80025ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d106      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	2103      	movs	r1, #3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f9a2 	bl	8001918 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff faff 	bl	8001bdc <LL_ADC_IsEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 813d 	bne.w	8002860 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f7ff fa5e 	bl	8001ab4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4aa2      	ldr	r2, [pc, #648]	@ (8002888 <HAL_ADC_ConfigChannel+0x6dc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	f040 812e 	bne.w	8002860 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <HAL_ADC_ConfigChannel+0x480>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	3301      	adds	r3, #1
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2b09      	cmp	r3, #9
 8002622:	bf94      	ite	ls
 8002624:	2301      	movls	r3, #1
 8002626:	2300      	movhi	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e019      	b.n	8002660 <HAL_ADC_ConfigChannel+0x4b4>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800263a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800263c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800263e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002648:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2b09      	cmp	r3, #9
 8002658:	bf94      	ite	ls
 800265a:	2301      	movls	r3, #1
 800265c:	2300      	movhi	r3, #0
 800265e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002660:	2b00      	cmp	r3, #0
 8002662:	d079      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x4d4>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	3301      	adds	r3, #1
 8002678:	069b      	lsls	r3, r3, #26
 800267a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800267e:	e015      	b.n	80026ac <HAL_ADC_ConfigChannel+0x500>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800268e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002690:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e003      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800269c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	069b      	lsls	r3, r3, #26
 80026a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d109      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x520>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	e017      	b.n	80026fc <HAL_ADC_ConfigChannel+0x550>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80026da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80026de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80026e4:	2320      	movs	r3, #32
 80026e6:	e003      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80026e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2101      	movs	r1, #1
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	ea42 0103 	orr.w	r1, r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x576>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	3301      	adds	r3, #1
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	051b      	lsls	r3, r3, #20
 8002720:	e018      	b.n	8002754 <HAL_ADC_ConfigChannel+0x5a8>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e003      	b.n	8002746 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800273e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002754:	430b      	orrs	r3, r1
 8002756:	e07e      	b.n	8002856 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x5c8>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	3301      	adds	r3, #1
 800276c:	069b      	lsls	r3, r3, #26
 800276e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002772:	e015      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x5f4>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e003      	b.n	8002798 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3301      	adds	r3, #1
 800279a:	069b      	lsls	r3, r3, #26
 800279c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x614>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	3301      	adds	r3, #1
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	e017      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x644>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	61fb      	str	r3, [r7, #28]
  return result;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e003      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10d      	bne.n	800281c <HAL_ADC_ConfigChannel+0x670>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	3301      	adds	r3, #1
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	3b1e      	subs	r3, #30
 8002814:	051b      	lsls	r3, r3, #20
 8002816:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800281a:	e01b      	b.n	8002854 <HAL_ADC_ConfigChannel+0x6a8>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	613b      	str	r3, [r7, #16]
  return result;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f003 021f 	and.w	r2, r3, #31
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	3b1e      	subs	r3, #30
 800284e:	051b      	lsls	r3, r3, #20
 8002850:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002854:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800285a:	4619      	mov	r1, r3
 800285c:	f7ff f8ff 	bl	8001a5e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_ADC_ConfigChannel+0x6e0>)
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80be 	beq.w	80029ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002876:	d004      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x6d6>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <HAL_ADC_ConfigChannel+0x6e4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10a      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x6ec>
 8002882:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <HAL_ADC_ConfigChannel+0x6e8>)
 8002884:	e009      	b.n	800289a <HAL_ADC_ConfigChannel+0x6ee>
 8002886:	bf00      	nop
 8002888:	407f0000 	.word	0x407f0000
 800288c:	80080000 	.word	0x80080000
 8002890:	50000100 	.word	0x50000100
 8002894:	50000300 	.word	0x50000300
 8002898:	4b59      	ldr	r3, [pc, #356]	@ (8002a00 <HAL_ADC_ConfigChannel+0x854>)
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fff4 	bl	8001888 <LL_ADC_GetCommonPathInternalCh>
 80028a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a56      	ldr	r2, [pc, #344]	@ (8002a04 <HAL_ADC_ConfigChannel+0x858>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x70c>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a55      	ldr	r2, [pc, #340]	@ (8002a08 <HAL_ADC_ConfigChannel+0x85c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d13a      	bne.n	800292e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d134      	bne.n	800292e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028cc:	d005      	beq.n	80028da <HAL_ADC_ConfigChannel+0x72e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a4e      	ldr	r2, [pc, #312]	@ (8002a0c <HAL_ADC_ConfigChannel+0x860>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	f040 8085 	bne.w	80029e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028e2:	d004      	beq.n	80028ee <HAL_ADC_ConfigChannel+0x742>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a49      	ldr	r2, [pc, #292]	@ (8002a10 <HAL_ADC_ConfigChannel+0x864>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x746>
 80028ee:	4a49      	ldr	r2, [pc, #292]	@ (8002a14 <HAL_ADC_ConfigChannel+0x868>)
 80028f0:	e000      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x748>
 80028f2:	4a43      	ldr	r2, [pc, #268]	@ (8002a00 <HAL_ADC_ConfigChannel+0x854>)
 80028f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f7fe ffaf 	bl	8001862 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002904:	4b44      	ldr	r3, [pc, #272]	@ (8002a18 <HAL_ADC_ConfigChannel+0x86c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	4a44      	ldr	r2, [pc, #272]	@ (8002a1c <HAL_ADC_ConfigChannel+0x870>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800291e:	e002      	b.n	8002926 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3b01      	subs	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f9      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800292c:	e05a      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a3b      	ldr	r2, [pc, #236]	@ (8002a20 <HAL_ADC_ConfigChannel+0x874>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d125      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800293c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11f      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a31      	ldr	r2, [pc, #196]	@ (8002a10 <HAL_ADC_ConfigChannel+0x864>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d104      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x7ac>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a34      	ldr	r2, [pc, #208]	@ (8002a24 <HAL_ADC_ConfigChannel+0x878>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d047      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002960:	d004      	beq.n	800296c <HAL_ADC_ConfigChannel+0x7c0>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a2a      	ldr	r2, [pc, #168]	@ (8002a10 <HAL_ADC_ConfigChannel+0x864>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x7c4>
 800296c:	4a29      	ldr	r2, [pc, #164]	@ (8002a14 <HAL_ADC_ConfigChannel+0x868>)
 800296e:	e000      	b.n	8002972 <HAL_ADC_ConfigChannel+0x7c6>
 8002970:	4a23      	ldr	r2, [pc, #140]	@ (8002a00 <HAL_ADC_ConfigChannel+0x854>)
 8002972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f7fe ff70 	bl	8001862 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002982:	e031      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a27      	ldr	r2, [pc, #156]	@ (8002a28 <HAL_ADC_ConfigChannel+0x87c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d12d      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800298e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d127      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a10 <HAL_ADC_ConfigChannel+0x864>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ac:	d004      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x80c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <HAL_ADC_ConfigChannel+0x864>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x810>
 80029b8:	4a16      	ldr	r2, [pc, #88]	@ (8002a14 <HAL_ADC_ConfigChannel+0x868>)
 80029ba:	e000      	b.n	80029be <HAL_ADC_ConfigChannel+0x812>
 80029bc:	4a10      	ldr	r2, [pc, #64]	@ (8002a00 <HAL_ADC_ConfigChannel+0x854>)
 80029be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f7fe ff4a 	bl	8001862 <LL_ADC_SetCommonPathInternalCh>
 80029ce:	e00c      	b.n	80029ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d4:	f043 0220 	orr.w	r2, r3, #32
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80029e2:	e002      	b.n	80029ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80029f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	37d8      	adds	r7, #216	@ 0xd8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	50000700 	.word	0x50000700
 8002a04:	c3210000 	.word	0xc3210000
 8002a08:	90c00010 	.word	0x90c00010
 8002a0c:	50000600 	.word	0x50000600
 8002a10:	50000100 	.word	0x50000100
 8002a14:	50000300 	.word	0x50000300
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	053e2d63 	.word	0x053e2d63
 8002a20:	c7520000 	.word	0xc7520000
 8002a24:	50000500 	.word	0x50000500
 8002a28:	cb840000 	.word	0xcb840000

08002a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff f8cd 	bl	8001bdc <LL_ADC_IsEnabled>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d176      	bne.n	8002b36 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b40 <ADC_Enable+0x114>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e062      	b.n	8002b38 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff f89c 	bl	8001bb4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a84:	d004      	beq.n	8002a90 <ADC_Enable+0x64>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b44 <ADC_Enable+0x118>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <ADC_Enable+0x68>
 8002a90:	4b2d      	ldr	r3, [pc, #180]	@ (8002b48 <ADC_Enable+0x11c>)
 8002a92:	e000      	b.n	8002a96 <ADC_Enable+0x6a>
 8002a94:	4b2d      	ldr	r3, [pc, #180]	@ (8002b4c <ADC_Enable+0x120>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fef6 	bl	8001888 <LL_ADC_GetCommonPathInternalCh>
 8002a9c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d013      	beq.n	8002ace <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b50 <ADC_Enable+0x124>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	4a29      	ldr	r2, [pc, #164]	@ (8002b54 <ADC_Enable+0x128>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	099b      	lsrs	r3, r3, #6
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ac0:	e002      	b.n	8002ac8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f9      	bne.n	8002ac2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fea9 	bl	8001824 <HAL_GetTick>
 8002ad2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad4:	e028      	b.n	8002b28 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f87e 	bl	8001bdc <LL_ADC_IsEnabled>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f862 	bl	8001bb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002af0:	f7fe fe98 	bl	8001824 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d914      	bls.n	8002b28 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d00d      	beq.n	8002b28 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	f043 0210 	orr.w	r2, r3, #16
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e007      	b.n	8002b38 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d1cf      	bne.n	8002ad6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	8000003f 	.word	0x8000003f
 8002b44:	50000100 	.word	0x50000100
 8002b48:	50000300 	.word	0x50000300
 8002b4c:	50000700 	.word	0x50000700
 8002b50:	20000000 	.word	0x20000000
 8002b54:	053e2d63 	.word	0x053e2d63

08002b58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d14b      	bne.n	8002c0a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d021      	beq.n	8002bd0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe ff25 	bl	80019e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d032      	beq.n	8002c02 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d12b      	bne.n	8002c02 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d11f      	bne.n	8002c02 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bce:	e018      	b.n	8002c02 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d111      	bne.n	8002c02 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7fe fa2c 	bl	8001060 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c08:	e00e      	b.n	8002c28 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff fabe 	bl	8002198 <HAL_ADC_ErrorCallback>
}
 8002c1c:	e004      	b.n	8002c28 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7fe fa00 	bl	8001044 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f7ff fa90 	bl	8002198 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <LL_ADC_IsEnabled>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <LL_ADC_IsEnabled+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_ADC_IsEnabled+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d101      	bne.n	8002cbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b0a1      	sub	sp, #132	@ 0x84
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e0e7      	b.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d02:	d102      	bne.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d04:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	e009      	b.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002d14:	4b6d      	ldr	r3, [pc, #436]	@ (8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	e001      	b.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0be      	b.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ffb1 	bl	8002ca6 <LL_ADC_REG_IsConversionOngoing>
 8002d44:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ffab 	bl	8002ca6 <LL_ADC_REG_IsConversionOngoing>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 80a0 	bne.w	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 809c 	bne.w	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d68:	d004      	beq.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a55      	ldr	r2, [pc, #340]	@ (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002d74:	4b56      	ldr	r3, [pc, #344]	@ (8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002d76:	e000      	b.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002d78:	4b56      	ldr	r3, [pc, #344]	@ (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002d7a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d04b      	beq.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d96:	035b      	lsls	r3, r3, #13
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002da8:	d004      	beq.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a45      	ldr	r2, [pc, #276]	@ (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10f      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002db4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002db8:	f7ff ff62 	bl	8002c80 <LL_ADC_IsEnabled>
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	4841      	ldr	r0, [pc, #260]	@ (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dc0:	f7ff ff5e 	bl	8002c80 <LL_ADC_IsEnabled>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4323      	orrs	r3, r4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e012      	b.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002dd4:	483c      	ldr	r0, [pc, #240]	@ (8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002dd6:	f7ff ff53 	bl	8002c80 <LL_ADC_IsEnabled>
 8002dda:	4604      	mov	r4, r0
 8002ddc:	483b      	ldr	r0, [pc, #236]	@ (8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002dde:	f7ff ff4f 	bl	8002c80 <LL_ADC_IsEnabled>
 8002de2:	4603      	mov	r3, r0
 8002de4:	431c      	orrs	r4, r3
 8002de6:	483c      	ldr	r0, [pc, #240]	@ (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002de8:	f7ff ff4a 	bl	8002c80 <LL_ADC_IsEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4323      	orrs	r3, r4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d056      	beq.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e06:	f023 030f 	bic.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	6811      	ldr	r1, [r2, #0]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	6892      	ldr	r2, [r2, #8]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e18:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e1a:	e047      	b.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e26:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e30:	d004      	beq.n	8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a23      	ldr	r2, [pc, #140]	@ (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10f      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002e3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e40:	f7ff ff1e 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e44:	4604      	mov	r4, r0
 8002e46:	481f      	ldr	r0, [pc, #124]	@ (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e48:	f7ff ff1a 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4323      	orrs	r3, r4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e012      	b.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002e5c:	481a      	ldr	r0, [pc, #104]	@ (8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e5e:	f7ff ff0f 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e62:	4604      	mov	r4, r0
 8002e64:	4819      	ldr	r0, [pc, #100]	@ (8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e66:	f7ff ff0b 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	431c      	orrs	r4, r3
 8002e6e:	481a      	ldr	r0, [pc, #104]	@ (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e70:	f7ff ff06 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4323      	orrs	r3, r4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d012      	beq.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e8e:	f023 030f 	bic.w	r3, r3, #15
 8002e92:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e96:	e009      	b.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002eaa:	e000      	b.n	8002eae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002eb6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3784      	adds	r7, #132	@ 0x84
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	50000100 	.word	0x50000100
 8002ec8:	50000400 	.word	0x50000400
 8002ecc:	50000500 	.word	0x50000500
 8002ed0:	50000300 	.word	0x50000300
 8002ed4:	50000700 	.word	0x50000700
 8002ed8:	50000600 	.word	0x50000600

08002edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f28:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <__NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0307 	and.w	r3, r3, #7
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db0b      	blt.n	8002f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4907      	ldr	r1, [pc, #28]	@ (8002f78 <__NVIC_EnableIRQ+0x38>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2001      	movs	r0, #1
 8002f62:	fa00 f202 	lsl.w	r2, r0, r2
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0a      	blt.n	8002fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	490c      	ldr	r1, [pc, #48]	@ (8002fc8 <__NVIC_SetPriority+0x4c>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa4:	e00a      	b.n	8002fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4908      	ldr	r1, [pc, #32]	@ (8002fcc <__NVIC_SetPriority+0x50>)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	761a      	strb	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf28      	it	cs
 8002fee:	2304      	movcs	r3, #4
 8002ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d902      	bls.n	8003000 <NVIC_EncodePriority+0x30>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b03      	subs	r3, #3
 8002ffe:	e000      	b.n	8003002 <NVIC_EncodePriority+0x32>
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003018:	f04f 31ff 	mov.w	r1, #4294967295
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43d9      	mvns	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	4313      	orrs	r3, r2
         );
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	@ 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003048:	d301      	bcc.n	800304e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304a:	2301      	movs	r3, #1
 800304c:	e00f      	b.n	800306e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304e:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <SysTick_Config+0x40>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003056:	210f      	movs	r1, #15
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f7ff ff8e 	bl	8002f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <SysTick_Config+0x40>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003066:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <SysTick_Config+0x40>)
 8003068:	2207      	movs	r2, #7
 800306a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	e000e010 	.word	0xe000e010

0800307c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff29 	bl	8002edc <__NVIC_SetPriorityGrouping>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030a0:	f7ff ff40 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80030a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff ff90 	bl	8002fd0 <NVIC_EncodePriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff5f 	bl	8002f7c <__NVIC_SetPriority>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff33 	bl	8002f40 <__NVIC_EnableIRQ>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ffa4 	bl	8003038 <SysTick_Config>
 80030f0:	4603      	mov	r3, r0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e08d      	b.n	800322a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <HAL_DMA_Init+0x138>)
 8003116:	429a      	cmp	r2, r3
 8003118:	d80f      	bhi.n	800313a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	4b45      	ldr	r3, [pc, #276]	@ (8003238 <HAL_DMA_Init+0x13c>)
 8003122:	4413      	add	r3, r2
 8003124:	4a45      	ldr	r2, [pc, #276]	@ (800323c <HAL_DMA_Init+0x140>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	009a      	lsls	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a42      	ldr	r2, [pc, #264]	@ (8003240 <HAL_DMA_Init+0x144>)
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40
 8003138:	e00e      	b.n	8003158 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	4b40      	ldr	r3, [pc, #256]	@ (8003244 <HAL_DMA_Init+0x148>)
 8003142:	4413      	add	r3, r2
 8003144:	4a3d      	ldr	r2, [pc, #244]	@ (800323c <HAL_DMA_Init+0x140>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	009a      	lsls	r2, r3, #2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a3c      	ldr	r2, [pc, #240]	@ (8003248 <HAL_DMA_Init+0x14c>)
 8003156:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800316e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003172:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800317c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f9b6 	bl	800351c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031b8:	d102      	bne.n	80031c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031d4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_DMA_Init+0x104>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d80c      	bhi.n	8003200 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9d6 	bl	8003598 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	e008      	b.n	8003212 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40020407 	.word	0x40020407
 8003238:	bffdfff8 	.word	0xbffdfff8
 800323c:	cccccccd 	.word	0xcccccccd
 8003240:	40020000 	.word	0x40020000
 8003244:	bffdfbf8 	.word	0xbffdfbf8
 8003248:	40020400 	.word	0x40020400

0800324c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_DMA_Start_IT+0x20>
 8003268:	2302      	movs	r3, #2
 800326a:	e066      	b.n	800333a <HAL_DMA_Start_IT+0xee>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d155      	bne.n	800332c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f8fb 	bl	80034a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 020e 	orr.w	r2, r2, #14
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e00f      	b.n	80032e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 020a 	orr.w	r2, r2, #10
 80032e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003300:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003318:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e005      	b.n	8003338 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003334:	2302      	movs	r3, #2
 8003336:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2204      	movs	r2, #4
 8003364:	409a      	lsls	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d026      	beq.n	80033bc <HAL_DMA_IRQHandler+0x7a>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d021      	beq.n	80033bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0204 	bic.w	r2, r2, #4
 8003394:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f003 021f 	and.w	r2, r3, #31
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	2104      	movs	r1, #4
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d071      	beq.n	8003496 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033ba:	e06c      	b.n	8003496 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2202      	movs	r2, #2
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02e      	beq.n	800342e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d029      	beq.n	800342e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 020a 	bic.w	r2, r2, #10
 80033f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	2102      	movs	r1, #2
 800340e:	fa01 f202 	lsl.w	r2, r1, r2
 8003412:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d038      	beq.n	8003496 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800342c:	e033      	b.n	8003496 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2208      	movs	r2, #8
 8003438:	409a      	lsls	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d02a      	beq.n	8003498 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d025      	beq.n	8003498 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 020e 	bic.w	r2, r2, #14
 800345a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003496:	bf00      	nop
 8003498:	bf00      	nop
}
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	f003 021f 	and.w	r2, r3, #31
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	2101      	movs	r1, #1
 80034d8:	fa01 f202 	lsl.w	r2, r1, r2
 80034dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d108      	bne.n	8003500 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034fe:	e007      	b.n	8003510 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b16      	ldr	r3, [pc, #88]	@ (8003584 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800352c:	429a      	cmp	r2, r3
 800352e:	d802      	bhi.n	8003536 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003530:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	e001      	b.n	800353a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003538:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3b08      	subs	r3, #8
 8003546:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	089b      	lsrs	r3, r3, #2
 8003556:	009a      	lsls	r2, r3, #2
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4413      	add	r3, r2
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a0b      	ldr	r2, [pc, #44]	@ (8003594 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003566:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	2201      	movs	r2, #1
 8003570:	409a      	lsls	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40020407 	.word	0x40020407
 8003588:	40020800 	.word	0x40020800
 800358c:	40020820 	.word	0x40020820
 8003590:	cccccccd 	.word	0xcccccccd
 8003594:	40020880 	.word	0x40020880

08003598 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a08      	ldr	r2, [pc, #32]	@ (80035dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035ba:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3b01      	subs	r3, #1
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2201      	movs	r2, #1
 80035c6:	409a      	lsls	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	1000823f 	.word	0x1000823f
 80035dc:	40020940 	.word	0x40020940

080035e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035ee:	e15a      	b.n	80038a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	4013      	ands	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 814c 	beq.w	80038a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d005      	beq.n	8003620 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800361c:	2b02      	cmp	r3, #2
 800361e:	d130      	bne.n	8003682 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003656:	2201      	movs	r2, #1
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 0201 	and.w	r2, r3, #1
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b03      	cmp	r3, #3
 800368c:	d017      	beq.n	80036be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	2203      	movs	r2, #3
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d123      	bne.n	8003712 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	08da      	lsrs	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	220f      	movs	r2, #15
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	08da      	lsrs	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3208      	adds	r2, #8
 800370c:	6939      	ldr	r1, [r7, #16]
 800370e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2203      	movs	r2, #3
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4013      	ands	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0203 	and.w	r2, r3, #3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80a6 	beq.w	80038a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003754:	4b5b      	ldr	r3, [pc, #364]	@ (80038c4 <HAL_GPIO_Init+0x2e4>)
 8003756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003758:	4a5a      	ldr	r2, [pc, #360]	@ (80038c4 <HAL_GPIO_Init+0x2e4>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003760:	4b58      	ldr	r3, [pc, #352]	@ (80038c4 <HAL_GPIO_Init+0x2e4>)
 8003762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800376c:	4a56      	ldr	r2, [pc, #344]	@ (80038c8 <HAL_GPIO_Init+0x2e8>)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3302      	adds	r3, #2
 8003774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	220f      	movs	r2, #15
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003796:	d01f      	beq.n	80037d8 <HAL_GPIO_Init+0x1f8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a4c      	ldr	r2, [pc, #304]	@ (80038cc <HAL_GPIO_Init+0x2ec>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d019      	beq.n	80037d4 <HAL_GPIO_Init+0x1f4>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a4b      	ldr	r2, [pc, #300]	@ (80038d0 <HAL_GPIO_Init+0x2f0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_GPIO_Init+0x1f0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a4a      	ldr	r2, [pc, #296]	@ (80038d4 <HAL_GPIO_Init+0x2f4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00d      	beq.n	80037cc <HAL_GPIO_Init+0x1ec>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a49      	ldr	r2, [pc, #292]	@ (80038d8 <HAL_GPIO_Init+0x2f8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <HAL_GPIO_Init+0x1e8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a48      	ldr	r2, [pc, #288]	@ (80038dc <HAL_GPIO_Init+0x2fc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_GPIO_Init+0x1e4>
 80037c0:	2305      	movs	r3, #5
 80037c2:	e00a      	b.n	80037da <HAL_GPIO_Init+0x1fa>
 80037c4:	2306      	movs	r3, #6
 80037c6:	e008      	b.n	80037da <HAL_GPIO_Init+0x1fa>
 80037c8:	2304      	movs	r3, #4
 80037ca:	e006      	b.n	80037da <HAL_GPIO_Init+0x1fa>
 80037cc:	2303      	movs	r3, #3
 80037ce:	e004      	b.n	80037da <HAL_GPIO_Init+0x1fa>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e002      	b.n	80037da <HAL_GPIO_Init+0x1fa>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_GPIO_Init+0x1fa>
 80037d8:	2300      	movs	r3, #0
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	f002 0203 	and.w	r2, r2, #3
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	4093      	lsls	r3, r2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ea:	4937      	ldr	r1, [pc, #220]	@ (80038c8 <HAL_GPIO_Init+0x2e8>)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037f8:	4b39      	ldr	r3, [pc, #228]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800381c:	4a30      	ldr	r2, [pc, #192]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003822:	4b2f      	ldr	r3, [pc, #188]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003846:	4a26      	ldr	r2, [pc, #152]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800384c:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003870:	4a1b      	ldr	r2, [pc, #108]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003876:	4b1a      	ldr	r3, [pc, #104]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800389a:	4a11      	ldr	r2, [pc, #68]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3301      	adds	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f ae9d 	bne.w	80035f0 <HAL_GPIO_Init+0x10>
  }
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010000 	.word	0x40010000
 80038cc:	48000400 	.word	0x48000400
 80038d0:	48000800 	.word	0x48000800
 80038d4:	48000c00 	.word	0x48000c00
 80038d8:	48001000 	.word	0x48001000
 80038dc:	48001400 	.word	0x48001400
 80038e0:	40010400 	.word	0x40010400

080038e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d141      	bne.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fe:	d131      	bne.n	8003964 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003900:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003906:	4a46      	ldr	r2, [pc, #280]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800390c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003910:	4b43      	ldr	r3, [pc, #268]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003918:	4a41      	ldr	r2, [pc, #260]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800391e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003920:	4b40      	ldr	r3, [pc, #256]	@ (8003a24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2232      	movs	r2, #50	@ 0x32
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	0c9b      	lsrs	r3, r3, #18
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003936:	e002      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3b01      	subs	r3, #1
 800393c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800393e:	4b38      	ldr	r3, [pc, #224]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394a:	d102      	bne.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f2      	bne.n	8003938 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003952:	4b33      	ldr	r3, [pc, #204]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800395e:	d158      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e057      	b.n	8003a14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003964:	4b2e      	ldr	r3, [pc, #184]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800396a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003970:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003974:	e04d      	b.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800397c:	d141      	bne.n	8003a02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800397e:	4b28      	ldr	r3, [pc, #160]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398a:	d131      	bne.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800398c:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003992:	4a23      	ldr	r2, [pc, #140]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003998:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800399c:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003a24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2232      	movs	r2, #50	@ 0x32
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c2:	e002      	b.n	80039ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ca:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d6:	d102      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f2      	bne.n	80039c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ea:	d112      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e011      	b.n	8003a14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a00:	e007      	b.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a02:	4b07      	ldr	r3, [pc, #28]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a0a:	4a05      	ldr	r2, [pc, #20]	@ (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40007000 	.word	0x40007000
 8003a24:	20000000 	.word	0x20000000
 8003a28:	431bde83 	.word	0x431bde83

08003a2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a04      	ldr	r2, [pc, #16]	@ (8003a48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a3a:	6093      	str	r3, [r2, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000

08003a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e2fe      	b.n	800405c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d075      	beq.n	8003b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6a:	4b97      	ldr	r3, [pc, #604]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a74:	4b94      	ldr	r3, [pc, #592]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	d102      	bne.n	8003a8a <HAL_RCC_OscConfig+0x3e>
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d002      	beq.n	8003a90 <HAL_RCC_OscConfig+0x44>
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d05b      	beq.n	8003b54 <HAL_RCC_OscConfig+0x108>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d157      	bne.n	8003b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e2d9      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x74>
 8003ab2:	4b85      	ldr	r3, [pc, #532]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a84      	ldr	r2, [pc, #528]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e01d      	b.n	8003afc <HAL_RCC_OscConfig+0xb0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x98>
 8003aca:	4b7f      	ldr	r3, [pc, #508]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7e      	ldr	r2, [pc, #504]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b7c      	ldr	r3, [pc, #496]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7b      	ldr	r2, [pc, #492]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0xb0>
 8003ae4:	4b78      	ldr	r3, [pc, #480]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a77      	ldr	r2, [pc, #476]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b75      	ldr	r3, [pc, #468]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a74      	ldr	r2, [pc, #464]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fe8e 	bl	8001824 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd fe8a 	bl	8001824 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	@ 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e29e      	b.n	800405c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0xc0>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fe7a 	bl	8001824 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fd fe76 	bl	8001824 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	@ 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e28a      	b.n	800405c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b46:	4b60      	ldr	r3, [pc, #384]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0xe8>
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d075      	beq.n	8003c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b62:	4b59      	ldr	r3, [pc, #356]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b6c:	4b56      	ldr	r3, [pc, #344]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCC_OscConfig+0x136>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_OscConfig+0x13c>
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d11f      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b88:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x154>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e25d      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	4b49      	ldr	r3, [pc, #292]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	4946      	ldr	r1, [pc, #280]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bb4:	4b45      	ldr	r3, [pc, #276]	@ (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fd fde7 	bl	800178c <HAL_InitTick>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d043      	beq.n	8003c4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e249      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d023      	beq.n	8003c18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fd fe22 	bl	8001824 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be4:	f7fd fe1e 	bl	8001824 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e232      	b.n	800405c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf6:	4b34      	ldr	r3, [pc, #208]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c02:	4b31      	ldr	r3, [pc, #196]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	492d      	ldr	r1, [pc, #180]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
 8003c16:	e01a      	b.n	8003c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c18:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fd fdfe 	bl	8001824 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2c:	f7fd fdfa 	bl	8001824 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e20e      	b.n	800405c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c3e:	4b22      	ldr	r3, [pc, #136]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x1e0>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d041      	beq.n	8003cde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01c      	beq.n	8003c9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c62:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c68:	4a17      	ldr	r2, [pc, #92]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fd fdd7 	bl	8001824 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7a:	f7fd fdd3 	bl	8001824 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1e7      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ef      	beq.n	8003c7a <HAL_RCC_OscConfig+0x22e>
 8003c9a:	e020      	b.n	8003cde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca2:	4a09      	ldr	r2, [pc, #36]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fd fdba 	bl	8001824 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb2:	e00d      	b.n	8003cd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb4:	f7fd fdb6 	bl	8001824 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d906      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1ca      	b.n	800405c <HAL_RCC_OscConfig+0x610>
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1ea      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80a6 	beq.w	8003e38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cec:	2300      	movs	r3, #0
 8003cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cf0:	4b84      	ldr	r3, [pc, #528]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2b4>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x2b6>
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	4b7f      	ldr	r3, [pc, #508]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d12:	4b7c      	ldr	r3, [pc, #496]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d22:	4b79      	ldr	r3, [pc, #484]	@ (8003f08 <HAL_RCC_OscConfig+0x4bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d118      	bne.n	8003d60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d2e:	4b76      	ldr	r3, [pc, #472]	@ (8003f08 <HAL_RCC_OscConfig+0x4bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a75      	ldr	r2, [pc, #468]	@ (8003f08 <HAL_RCC_OscConfig+0x4bc>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fd73 	bl	8001824 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fd fd6f 	bl	8001824 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e183      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d54:	4b6c      	ldr	r3, [pc, #432]	@ (8003f08 <HAL_RCC_OscConfig+0x4bc>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d108      	bne.n	8003d7a <HAL_RCC_OscConfig+0x32e>
 8003d68:	4b66      	ldr	r3, [pc, #408]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6e:	4a65      	ldr	r2, [pc, #404]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d78:	e024      	b.n	8003dc4 <HAL_RCC_OscConfig+0x378>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d110      	bne.n	8003da4 <HAL_RCC_OscConfig+0x358>
 8003d82:	4b60      	ldr	r3, [pc, #384]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d88:	4a5e      	ldr	r2, [pc, #376]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d92:	4b5c      	ldr	r3, [pc, #368]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d98:	4a5a      	ldr	r2, [pc, #360]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003da2:	e00f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x378>
 8003da4:	4b57      	ldr	r3, [pc, #348]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003daa:	4a56      	ldr	r2, [pc, #344]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003db4:	4b53      	ldr	r3, [pc, #332]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	4a52      	ldr	r2, [pc, #328]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d016      	beq.n	8003dfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fd fd2a 	bl	8001824 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd4:	f7fd fd26 	bl	8001824 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e138      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dea:	4b46      	ldr	r3, [pc, #280]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ed      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x388>
 8003df8:	e015      	b.n	8003e26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfa:	f7fd fd13 	bl	8001824 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fd fd0f 	bl	8001824 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e121      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e18:	4b3a      	ldr	r3, [pc, #232]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ed      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e26:	7ffb      	ldrb	r3, [r7, #31]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2c:	4b35      	ldr	r3, [pc, #212]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e30:	4a34      	ldr	r2, [pc, #208]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d03c      	beq.n	8003ebe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01c      	beq.n	8003e86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e52:	4a2c      	ldr	r2, [pc, #176]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fd fce2 	bl	8001824 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e64:	f7fd fcde 	bl	8001824 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0f2      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e76:	4b23      	ldr	r3, [pc, #140]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ef      	beq.n	8003e64 <HAL_RCC_OscConfig+0x418>
 8003e84:	e01b      	b.n	8003ebe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e86:	4b1f      	ldr	r3, [pc, #124]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7fd fcc5 	bl	8001824 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e9e:	f7fd fcc1 	bl	8001824 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0d5      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003eb0:	4b14      	ldr	r3, [pc, #80]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ef      	bne.n	8003e9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80c9 	beq.w	800405a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b0c      	cmp	r3, #12
 8003ed2:	f000 8083 	beq.w	8003fdc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d15e      	bne.n	8003f9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ede:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a08      	ldr	r2, [pc, #32]	@ (8003f04 <HAL_RCC_OscConfig+0x4b8>)
 8003ee4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7fd fc9b 	bl	8001824 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef0:	e00c      	b.n	8003f0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef2:	f7fd fc97 	bl	8001824 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d905      	bls.n	8003f0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0ab      	b.n	800405c <HAL_RCC_OscConfig+0x610>
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0c:	4b55      	ldr	r3, [pc, #340]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ec      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f18:	4b52      	ldr	r3, [pc, #328]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	4b52      	ldr	r3, [pc, #328]	@ (8004068 <HAL_RCC_OscConfig+0x61c>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6a11      	ldr	r1, [r2, #32]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0112      	lsls	r2, r2, #4
 8003f2c:	4311      	orrs	r1, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f32:	0212      	lsls	r2, r2, #8
 8003f34:	4311      	orrs	r1, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f3a:	0852      	lsrs	r2, r2, #1
 8003f3c:	3a01      	subs	r2, #1
 8003f3e:	0552      	lsls	r2, r2, #21
 8003f40:	4311      	orrs	r1, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f46:	0852      	lsrs	r2, r2, #1
 8003f48:	3a01      	subs	r2, #1
 8003f4a:	0652      	lsls	r2, r2, #25
 8003f4c:	4311      	orrs	r1, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f52:	06d2      	lsls	r2, r2, #27
 8003f54:	430a      	orrs	r2, r1
 8003f56:	4943      	ldr	r1, [pc, #268]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f5c:	4b41      	ldr	r3, [pc, #260]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a40      	ldr	r2, [pc, #256]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f68:	4b3e      	ldr	r3, [pc, #248]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd fc56 	bl	8001824 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd fc52 	bl	8001824 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e066      	b.n	800405c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f8e:	4b35      	ldr	r3, [pc, #212]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x530>
 8003f9a:	e05e      	b.n	800405a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b31      	ldr	r3, [pc, #196]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a30      	ldr	r2, [pc, #192]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fc3c 	bl	8001824 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd fc38 	bl	8001824 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e04c      	b.n	800405c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc2:	4b28      	ldr	r3, [pc, #160]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003fce:	4b25      	ldr	r3, [pc, #148]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	4924      	ldr	r1, [pc, #144]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003fd4:	4b25      	ldr	r3, [pc, #148]	@ (800406c <HAL_RCC_OscConfig+0x620>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	60cb      	str	r3, [r1, #12]
 8003fda:	e03e      	b.n	800405a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e039      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8004064 <HAL_RCC_OscConfig+0x618>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 0203 	and.w	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d12c      	bne.n	8004056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	3b01      	subs	r3, #1
 8004008:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d123      	bne.n	8004056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d11b      	bne.n	8004056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d113      	bne.n	8004056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	3b01      	subs	r3, #1
 800403c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d109      	bne.n	8004056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	3b01      	subs	r3, #1
 8004050:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	019f800c 	.word	0x019f800c
 800406c:	feeefffc 	.word	0xfeeefffc

08004070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e11e      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b91      	ldr	r3, [pc, #580]	@ (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d910      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b8e      	ldr	r3, [pc, #568]	@ (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	498c      	ldr	r1, [pc, #560]	@ (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b8a      	ldr	r3, [pc, #552]	@ (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e106      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d073      	beq.n	80041ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d129      	bne.n	8004120 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040cc:	4b81      	ldr	r3, [pc, #516]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0f4      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040dc:	f000 f99e 	bl	800441c <RCC_GetSysClockFreqFromPLLSource>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4a7c      	ldr	r2, [pc, #496]	@ (80042d8 <HAL_RCC_ClockConfig+0x268>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d93f      	bls.n	800416a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040ea:	4b7a      	ldr	r3, [pc, #488]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d033      	beq.n	800416a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d12f      	bne.n	800416a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800410a:	4b72      	ldr	r3, [pc, #456]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004112:	4a70      	ldr	r2, [pc, #448]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004118:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e024      	b.n	800416a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d107      	bne.n	8004138 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004128:	4b6a      	ldr	r3, [pc, #424]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0c6      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004138:	4b66      	ldr	r3, [pc, #408]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0be      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004148:	f000 f8ce 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 800414c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4a61      	ldr	r2, [pc, #388]	@ (80042d8 <HAL_RCC_ClockConfig+0x268>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d909      	bls.n	800416a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004156:	4b5f      	ldr	r3, [pc, #380]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800415e:	4a5d      	ldr	r2, [pc, #372]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004164:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004166:	2380      	movs	r3, #128	@ 0x80
 8004168:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b5a      	ldr	r3, [pc, #360]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4957      	ldr	r1, [pc, #348]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417c:	f7fd fb52 	bl	8001824 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fd fb4e 	bl	8001824 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e095      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b4e      	ldr	r3, [pc, #312]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d023      	beq.n	8004200 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c4:	4b43      	ldr	r3, [pc, #268]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4a42      	ldr	r2, [pc, #264]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041dc:	4b3d      	ldr	r3, [pc, #244]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80041e4:	4a3b      	ldr	r2, [pc, #236]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b39      	ldr	r3, [pc, #228]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4936      	ldr	r1, [pc, #216]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
 80041fe:	e008      	b.n	8004212 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b80      	cmp	r3, #128	@ 0x80
 8004204:	d105      	bne.n	8004212 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004206:	4b33      	ldr	r3, [pc, #204]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	4a32      	ldr	r2, [pc, #200]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800420c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004210:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004212:	4b2f      	ldr	r3, [pc, #188]	@ (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d21d      	bcs.n	800425c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004220:	4b2b      	ldr	r3, [pc, #172]	@ (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 020f 	bic.w	r2, r3, #15
 8004228:	4929      	ldr	r1, [pc, #164]	@ (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004230:	f7fd faf8 	bl	8001824 <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	e00a      	b.n	800424e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004238:	f7fd faf4 	bl	8001824 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e03b      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b20      	ldr	r3, [pc, #128]	@ (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d1ed      	bne.n	8004238 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004268:	4b1a      	ldr	r3, [pc, #104]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4917      	ldr	r1, [pc, #92]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004286:	4b13      	ldr	r3, [pc, #76]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	490f      	ldr	r1, [pc, #60]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429a:	f000 f825 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 800429e:	4602      	mov	r2, r0
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	490c      	ldr	r1, [pc, #48]	@ (80042dc <HAL_RCC_ClockConfig+0x26c>)
 80042ac:	5ccb      	ldrb	r3, [r1, r3]
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	fa22 f303 	lsr.w	r3, r2, r3
 80042b6:	4a0a      	ldr	r2, [pc, #40]	@ (80042e0 <HAL_RCC_ClockConfig+0x270>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042ba:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <HAL_RCC_ClockConfig+0x274>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd fa64 	bl	800178c <HAL_InitTick>
 80042c4:	4603      	mov	r3, r0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40022000 	.word	0x40022000
 80042d4:	40021000 	.word	0x40021000
 80042d8:	04c4b400 	.word	0x04c4b400
 80042dc:	08006ea0 	.word	0x08006ea0
 80042e0:	20000000 	.word	0x20000000
 80042e4:	20000004 	.word	0x20000004

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042ee:	4b2c      	ldr	r3, [pc, #176]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d102      	bne.n	8004300 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042fa:	4b2a      	ldr	r3, [pc, #168]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e047      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004300:	4b27      	ldr	r3, [pc, #156]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b08      	cmp	r3, #8
 800430a:	d102      	bne.n	8004312 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800430c:	4b26      	ldr	r3, [pc, #152]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	e03e      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004312:	4b23      	ldr	r3, [pc, #140]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d136      	bne.n	800438c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800431e:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004328:	4b1d      	ldr	r3, [pc, #116]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	3301      	adds	r3, #1
 8004334:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d10c      	bne.n	8004356 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800433c:	4a1a      	ldr	r2, [pc, #104]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	4a16      	ldr	r2, [pc, #88]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004346:	68d2      	ldr	r2, [r2, #12]
 8004348:	0a12      	lsrs	r2, r2, #8
 800434a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	617b      	str	r3, [r7, #20]
      break;
 8004354:	e00c      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004356:	4a13      	ldr	r2, [pc, #76]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	4a10      	ldr	r2, [pc, #64]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004360:	68d2      	ldr	r2, [r2, #12]
 8004362:	0a12      	lsrs	r2, r2, #8
 8004364:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004368:	fb02 f303 	mul.w	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
      break;
 800436e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004370:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	0e5b      	lsrs	r3, r3, #25
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	3301      	adds	r3, #1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	e001      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004390:	693b      	ldr	r3, [r7, #16]
}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	007a1200 	.word	0x007a1200

080043ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b0:	4b03      	ldr	r3, [pc, #12]	@ (80043c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000000 	.word	0x20000000

080043c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043c8:	f7ff fff0 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4904      	ldr	r1, [pc, #16]	@ (80043ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	08006eb0 	.word	0x08006eb0

080043f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f4:	f7ff ffda 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	0adb      	lsrs	r3, r3, #11
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	4904      	ldr	r1, [pc, #16]	@ (8004418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	08006eb0 	.word	0x08006eb0

0800441c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004422:	4b1e      	ldr	r3, [pc, #120]	@ (800449c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800442c:	4b1b      	ldr	r3, [pc, #108]	@ (800449c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b03      	cmp	r3, #3
 800443e:	d10c      	bne.n	800445a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004440:	4a17      	ldr	r2, [pc, #92]	@ (80044a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	4a14      	ldr	r2, [pc, #80]	@ (800449c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800444a:	68d2      	ldr	r2, [r2, #12]
 800444c:	0a12      	lsrs	r2, r2, #8
 800444e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	617b      	str	r3, [r7, #20]
    break;
 8004458:	e00c      	b.n	8004474 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800445a:	4a12      	ldr	r2, [pc, #72]	@ (80044a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	4a0e      	ldr	r2, [pc, #56]	@ (800449c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004464:	68d2      	ldr	r2, [r2, #12]
 8004466:	0a12      	lsrs	r2, r2, #8
 8004468:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]
    break;
 8004472:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004474:	4b09      	ldr	r3, [pc, #36]	@ (800449c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	0e5b      	lsrs	r3, r3, #25
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	3301      	adds	r3, #1
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800448e:	687b      	ldr	r3, [r7, #4]
}
 8004490:	4618      	mov	r0, r3
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40021000 	.word	0x40021000
 80044a0:	007a1200 	.word	0x007a1200
 80044a4:	00f42400 	.word	0x00f42400

080044a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044b0:	2300      	movs	r3, #0
 80044b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044b4:	2300      	movs	r3, #0
 80044b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8098 	beq.w	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c6:	2300      	movs	r3, #0
 80044c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ca:	4b43      	ldr	r3, [pc, #268]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10d      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d6:	4b40      	ldr	r3, [pc, #256]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044da:	4a3f      	ldr	r2, [pc, #252]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044e2:	4b3d      	ldr	r3, [pc, #244]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ee:	2301      	movs	r3, #1
 80044f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f2:	4b3a      	ldr	r3, [pc, #232]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a39      	ldr	r2, [pc, #228]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044fe:	f7fd f991 	bl	8001824 <HAL_GetTick>
 8004502:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004504:	e009      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004506:	f7fd f98d 	bl	8001824 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d902      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	74fb      	strb	r3, [r7, #19]
        break;
 8004518:	e005      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451a:	4b30      	ldr	r3, [pc, #192]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0ef      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004526:	7cfb      	ldrb	r3, [r7, #19]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d159      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800452c:	4b2a      	ldr	r3, [pc, #168]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004536:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01e      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	429a      	cmp	r2, r3
 8004546:	d019      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004548:	4b23      	ldr	r3, [pc, #140]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004552:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004554:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455a:	4a1f      	ldr	r2, [pc, #124]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004564:	4b1c      	ldr	r3, [pc, #112]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456a:	4a1b      	ldr	r2, [pc, #108]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800456c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004574:	4a18      	ldr	r2, [pc, #96]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fd f94d 	bl	8001824 <HAL_GetTick>
 800458a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800458c:	e00b      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458e:	f7fd f949 	bl	8001824 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459c:	4293      	cmp	r3, r2
 800459e:	d902      	bls.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	74fb      	strb	r3, [r7, #19]
            break;
 80045a4:	e006      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a6:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ec      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ba:	4b07      	ldr	r3, [pc, #28]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c8:	4903      	ldr	r1, [pc, #12]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045d2:	7cfb      	ldrb	r3, [r7, #19]
 80045d4:	74bb      	strb	r3, [r7, #18]
 80045d6:	e005      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045e4:	7c7b      	ldrb	r3, [r7, #17]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d105      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ea:	4ba7      	ldr	r3, [pc, #668]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ee:	4aa6      	ldr	r2, [pc, #664]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004602:	4ba1      	ldr	r3, [pc, #644]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004608:	f023 0203 	bic.w	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	499d      	ldr	r1, [pc, #628]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004624:	4b98      	ldr	r3, [pc, #608]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	f023 020c 	bic.w	r2, r3, #12
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	4995      	ldr	r1, [pc, #596]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004646:	4b90      	ldr	r3, [pc, #576]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	498c      	ldr	r1, [pc, #560]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004668:	4b87      	ldr	r3, [pc, #540]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	4984      	ldr	r1, [pc, #528]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800468a:	4b7f      	ldr	r3, [pc, #508]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	497b      	ldr	r1, [pc, #492]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ac:	4b76      	ldr	r3, [pc, #472]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	4973      	ldr	r1, [pc, #460]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	496a      	ldr	r1, [pc, #424]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046f0:	4b65      	ldr	r3, [pc, #404]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	4962      	ldr	r1, [pc, #392]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004712:	4b5d      	ldr	r3, [pc, #372]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004718:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	4959      	ldr	r1, [pc, #356]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004734:	4b54      	ldr	r3, [pc, #336]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800473a:	f023 0203 	bic.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	4951      	ldr	r1, [pc, #324]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004756:	4b4c      	ldr	r3, [pc, #304]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	4948      	ldr	r1, [pc, #288]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d015      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004778:	4b43      	ldr	r3, [pc, #268]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	4940      	ldr	r1, [pc, #256]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004796:	d105      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004798:	4b3b      	ldr	r3, [pc, #236]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a3a      	ldr	r2, [pc, #232]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047a2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d015      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047b0:	4b35      	ldr	r3, [pc, #212]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047be:	4932      	ldr	r1, [pc, #200]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ce:	d105      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047da:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d015      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047e8:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f6:	4924      	ldr	r1, [pc, #144]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004802:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004806:	d105      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004808:	4b1f      	ldr	r3, [pc, #124]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a1e      	ldr	r2, [pc, #120]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004812:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d015      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004820:	4b19      	ldr	r3, [pc, #100]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004826:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482e:	4916      	ldr	r1, [pc, #88]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483e:	d105      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a10      	ldr	r2, [pc, #64]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800484a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d019      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	4908      	ldr	r1, [pc, #32]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004878:	4b03      	ldr	r3, [pc, #12]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a02      	ldr	r2, [pc, #8]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004882:	60d3      	str	r3, [r2, #12]
 8004884:	e002      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d015      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004898:	4b29      	ldr	r3, [pc, #164]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	4926      	ldr	r1, [pc, #152]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048b6:	d105      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048b8:	4b21      	ldr	r3, [pc, #132]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a20      	ldr	r2, [pc, #128]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80048d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048de:	4918      	ldr	r1, [pc, #96]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048f0:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a12      	ldr	r2, [pc, #72]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d015      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004908:	4b0d      	ldr	r3, [pc, #52]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800490a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800490e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004916:	490a      	ldr	r1, [pc, #40]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004922:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004926:	d105      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a04      	ldr	r2, [pc, #16]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004932:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004934:	7cbb      	ldrb	r3, [r7, #18]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000

08004944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e049      	b.n	80049ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fe08 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f000 f94c 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIM_ConfigClockSource+0x1c>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e0f6      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0x20a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004a2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6f      	ldr	r2, [pc, #444]	@ (8004c08 <HAL_TIM_ConfigClockSource+0x214>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	f000 80c1 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004a50:	4a6d      	ldr	r2, [pc, #436]	@ (8004c08 <HAL_TIM_ConfigClockSource+0x214>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	f200 80c6 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a58:	4a6c      	ldr	r2, [pc, #432]	@ (8004c0c <HAL_TIM_ConfigClockSource+0x218>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	f000 80b9 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004a60:	4a6a      	ldr	r2, [pc, #424]	@ (8004c0c <HAL_TIM_ConfigClockSource+0x218>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	f200 80be 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a68:	4a69      	ldr	r2, [pc, #420]	@ (8004c10 <HAL_TIM_ConfigClockSource+0x21c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	f000 80b1 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004a70:	4a67      	ldr	r2, [pc, #412]	@ (8004c10 <HAL_TIM_ConfigClockSource+0x21c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	f200 80b6 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a78:	4a66      	ldr	r2, [pc, #408]	@ (8004c14 <HAL_TIM_ConfigClockSource+0x220>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	f000 80a9 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004a80:	4a64      	ldr	r2, [pc, #400]	@ (8004c14 <HAL_TIM_ConfigClockSource+0x220>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	f200 80ae 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a88:	4a63      	ldr	r2, [pc, #396]	@ (8004c18 <HAL_TIM_ConfigClockSource+0x224>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	f000 80a1 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004a90:	4a61      	ldr	r2, [pc, #388]	@ (8004c18 <HAL_TIM_ConfigClockSource+0x224>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	f200 80a6 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a98:	4a60      	ldr	r2, [pc, #384]	@ (8004c1c <HAL_TIM_ConfigClockSource+0x228>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	f000 8099 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004aa0:	4a5e      	ldr	r2, [pc, #376]	@ (8004c1c <HAL_TIM_ConfigClockSource+0x228>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	f200 809e 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004aa8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004aac:	f000 8091 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004ab0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ab4:	f200 8096 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004abc:	f000 8089 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004ac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ac4:	f200 808e 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004acc:	d03e      	beq.n	8004b4c <HAL_TIM_ConfigClockSource+0x158>
 8004ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad2:	f200 8087 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ada:	f000 8086 	beq.w	8004bea <HAL_TIM_ConfigClockSource+0x1f6>
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae2:	d87f      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ae4:	2b70      	cmp	r3, #112	@ 0x70
 8004ae6:	d01a      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x12a>
 8004ae8:	2b70      	cmp	r3, #112	@ 0x70
 8004aea:	d87b      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004aec:	2b60      	cmp	r3, #96	@ 0x60
 8004aee:	d050      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x19e>
 8004af0:	2b60      	cmp	r3, #96	@ 0x60
 8004af2:	d877      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004af4:	2b50      	cmp	r3, #80	@ 0x50
 8004af6:	d03c      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x17e>
 8004af8:	2b50      	cmp	r3, #80	@ 0x50
 8004afa:	d873      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004afc:	2b40      	cmp	r3, #64	@ 0x40
 8004afe:	d058      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0x1be>
 8004b00:	2b40      	cmp	r3, #64	@ 0x40
 8004b02:	d86f      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b04:	2b30      	cmp	r3, #48	@ 0x30
 8004b06:	d064      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004b08:	2b30      	cmp	r3, #48	@ 0x30
 8004b0a:	d86b      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d060      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d867      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d05c      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d05a      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x1de>
 8004b1c:	e062      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b2e:	f000 f9a7 	bl	8004e80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	609a      	str	r2, [r3, #8]
      break;
 8004b4a:	e04f      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b5c:	f000 f990 	bl	8004e80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b6e:	609a      	str	r2, [r3, #8]
      break;
 8004b70:	e03c      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f000 f902 	bl	8004d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2150      	movs	r1, #80	@ 0x50
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f95b 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004b90:	e02c      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f000 f921 	bl	8004de6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2160      	movs	r1, #96	@ 0x60
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f94b 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004bb0:	e01c      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f000 f8e2 	bl	8004d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2140      	movs	r1, #64	@ 0x40
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f93b 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004bd0:	e00c      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f000 f932 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004be2:	e003      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	73fb      	strb	r3, [r7, #15]
      break;
 8004be8:	e000      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	00100070 	.word	0x00100070
 8004c0c:	00100060 	.word	0x00100060
 8004c10:	00100050 	.word	0x00100050
 8004c14:	00100040 	.word	0x00100040
 8004c18:	00100030 	.word	0x00100030
 8004c1c:	00100020 	.word	0x00100020

08004c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a4c      	ldr	r2, [pc, #304]	@ (8004d64 <TIM_Base_SetConfig+0x144>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d017      	beq.n	8004c68 <TIM_Base_SetConfig+0x48>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3e:	d013      	beq.n	8004c68 <TIM_Base_SetConfig+0x48>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a49      	ldr	r2, [pc, #292]	@ (8004d68 <TIM_Base_SetConfig+0x148>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00f      	beq.n	8004c68 <TIM_Base_SetConfig+0x48>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a48      	ldr	r2, [pc, #288]	@ (8004d6c <TIM_Base_SetConfig+0x14c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <TIM_Base_SetConfig+0x48>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a47      	ldr	r2, [pc, #284]	@ (8004d70 <TIM_Base_SetConfig+0x150>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d007      	beq.n	8004c68 <TIM_Base_SetConfig+0x48>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a46      	ldr	r2, [pc, #280]	@ (8004d74 <TIM_Base_SetConfig+0x154>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_Base_SetConfig+0x48>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a45      	ldr	r2, [pc, #276]	@ (8004d78 <TIM_Base_SetConfig+0x158>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d108      	bne.n	8004c7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a39      	ldr	r2, [pc, #228]	@ (8004d64 <TIM_Base_SetConfig+0x144>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d023      	beq.n	8004cca <TIM_Base_SetConfig+0xaa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c88:	d01f      	beq.n	8004cca <TIM_Base_SetConfig+0xaa>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a36      	ldr	r2, [pc, #216]	@ (8004d68 <TIM_Base_SetConfig+0x148>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01b      	beq.n	8004cca <TIM_Base_SetConfig+0xaa>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a35      	ldr	r2, [pc, #212]	@ (8004d6c <TIM_Base_SetConfig+0x14c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d017      	beq.n	8004cca <TIM_Base_SetConfig+0xaa>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a34      	ldr	r2, [pc, #208]	@ (8004d70 <TIM_Base_SetConfig+0x150>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <TIM_Base_SetConfig+0xaa>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a33      	ldr	r2, [pc, #204]	@ (8004d74 <TIM_Base_SetConfig+0x154>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00f      	beq.n	8004cca <TIM_Base_SetConfig+0xaa>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a33      	ldr	r2, [pc, #204]	@ (8004d7c <TIM_Base_SetConfig+0x15c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <TIM_Base_SetConfig+0xaa>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a32      	ldr	r2, [pc, #200]	@ (8004d80 <TIM_Base_SetConfig+0x160>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d007      	beq.n	8004cca <TIM_Base_SetConfig+0xaa>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a31      	ldr	r2, [pc, #196]	@ (8004d84 <TIM_Base_SetConfig+0x164>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <TIM_Base_SetConfig+0xaa>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8004d78 <TIM_Base_SetConfig+0x158>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d108      	bne.n	8004cdc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <TIM_Base_SetConfig+0x144>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d013      	beq.n	8004d30 <TIM_Base_SetConfig+0x110>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004d74 <TIM_Base_SetConfig+0x154>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00f      	beq.n	8004d30 <TIM_Base_SetConfig+0x110>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a1a      	ldr	r2, [pc, #104]	@ (8004d7c <TIM_Base_SetConfig+0x15c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00b      	beq.n	8004d30 <TIM_Base_SetConfig+0x110>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a19      	ldr	r2, [pc, #100]	@ (8004d80 <TIM_Base_SetConfig+0x160>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <TIM_Base_SetConfig+0x110>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a18      	ldr	r2, [pc, #96]	@ (8004d84 <TIM_Base_SetConfig+0x164>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_Base_SetConfig+0x110>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a13      	ldr	r2, [pc, #76]	@ (8004d78 <TIM_Base_SetConfig+0x158>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d103      	bne.n	8004d38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d105      	bne.n	8004d56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f023 0201 	bic.w	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	611a      	str	r2, [r3, #16]
  }
}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40000c00 	.word	0x40000c00
 8004d74:	40013400 	.word	0x40013400
 8004d78:	40015000 	.word	0x40015000
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40014400 	.word	0x40014400
 8004d84:	40014800 	.word	0x40014800

08004d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0201 	bic.w	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 030a 	bic.w	r3, r3, #10
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f023 0210 	bic.w	r2, r3, #16
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f043 0307 	orr.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e074      	b.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a34      	ldr	r2, [pc, #208]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a33      	ldr	r2, [pc, #204]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a31      	ldr	r2, [pc, #196]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d108      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a21      	ldr	r2, [pc, #132]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f58:	d01d      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a11      	ldr	r2, [pc, #68]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10c      	bne.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40013400 	.word	0x40013400
 8004fd8:	40015000 	.word	0x40015000
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40014000 	.word	0x40014000

08004fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e042      	b.n	8005084 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fc fad5 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2224      	movs	r2, #36	@ 0x24
 800501a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0201 	bic.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fbb2 	bl	80057a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f8b3 	bl	80051a8 <UART_SetConfig>
 8005042:	4603      	mov	r3, r0
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e01b      	b.n	8005084 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800505a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800506a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fc31 	bl	80058e4 <UART_CheckIdleState>
 8005082:	4603      	mov	r3, r0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	@ 0x28
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	4613      	mov	r3, r2
 800509a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d17b      	bne.n	800519e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_UART_Transmit+0x26>
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e074      	b.n	80051a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2221      	movs	r2, #33	@ 0x21
 80050c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050c6:	f7fc fbad 	bl	8001824 <HAL_GetTick>
 80050ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	88fa      	ldrh	r2, [r7, #6]
 80050d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e4:	d108      	bne.n	80050f8 <HAL_UART_Transmit+0x6c>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d104      	bne.n	80050f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	e003      	b.n	8005100 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005100:	e030      	b.n	8005164 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2200      	movs	r2, #0
 800510a:	2180      	movs	r1, #128	@ 0x80
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fc93 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e03d      	b.n	80051a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005138:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	3302      	adds	r3, #2
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	e007      	b.n	8005152 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	3301      	adds	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1c8      	bne.n	8005102 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2200      	movs	r2, #0
 8005178:	2140      	movs	r1, #64	@ 0x40
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fc5c 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e006      	b.n	80051a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e000      	b.n	80051a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051ac:	b08c      	sub	sp, #48	@ 0x30
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4baa      	ldr	r3, [pc, #680]	@ (8005480 <UART_SetConfig+0x2d8>)
 80051d8:	4013      	ands	r3, r2
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e0:	430b      	orrs	r3, r1
 80051e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a9f      	ldr	r2, [pc, #636]	@ (8005484 <UART_SetConfig+0x2dc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005210:	4313      	orrs	r3, r2
 8005212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800521e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005228:	430b      	orrs	r3, r1
 800522a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	f023 010f 	bic.w	r1, r3, #15
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a90      	ldr	r2, [pc, #576]	@ (8005488 <UART_SetConfig+0x2e0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d125      	bne.n	8005298 <UART_SetConfig+0xf0>
 800524c:	4b8f      	ldr	r3, [pc, #572]	@ (800548c <UART_SetConfig+0x2e4>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b03      	cmp	r3, #3
 8005258:	d81a      	bhi.n	8005290 <UART_SetConfig+0xe8>
 800525a:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0xb8>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005271 	.word	0x08005271
 8005264:	08005281 	.word	0x08005281
 8005268:	08005279 	.word	0x08005279
 800526c:	08005289 	.word	0x08005289
 8005270:	2301      	movs	r3, #1
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005276:	e116      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005278:	2302      	movs	r3, #2
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527e:	e112      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005280:	2304      	movs	r3, #4
 8005282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005286:	e10e      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005288:	2308      	movs	r3, #8
 800528a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528e:	e10a      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005290:	2310      	movs	r3, #16
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005296:	e106      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a7c      	ldr	r2, [pc, #496]	@ (8005490 <UART_SetConfig+0x2e8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d138      	bne.n	8005314 <UART_SetConfig+0x16c>
 80052a2:	4b7a      	ldr	r3, [pc, #488]	@ (800548c <UART_SetConfig+0x2e4>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	f003 030c 	and.w	r3, r3, #12
 80052ac:	2b0c      	cmp	r3, #12
 80052ae:	d82d      	bhi.n	800530c <UART_SetConfig+0x164>
 80052b0:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <UART_SetConfig+0x110>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052ed 	.word	0x080052ed
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	0800530d 	.word	0x0800530d
 80052c4:	0800530d 	.word	0x0800530d
 80052c8:	080052fd 	.word	0x080052fd
 80052cc:	0800530d 	.word	0x0800530d
 80052d0:	0800530d 	.word	0x0800530d
 80052d4:	0800530d 	.word	0x0800530d
 80052d8:	080052f5 	.word	0x080052f5
 80052dc:	0800530d 	.word	0x0800530d
 80052e0:	0800530d 	.word	0x0800530d
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005305 	.word	0x08005305
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f2:	e0d8      	b.n	80054a6 <UART_SetConfig+0x2fe>
 80052f4:	2302      	movs	r3, #2
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fa:	e0d4      	b.n	80054a6 <UART_SetConfig+0x2fe>
 80052fc:	2304      	movs	r3, #4
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005302:	e0d0      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005304:	2308      	movs	r3, #8
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530a:	e0cc      	b.n	80054a6 <UART_SetConfig+0x2fe>
 800530c:	2310      	movs	r3, #16
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005312:	e0c8      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5e      	ldr	r2, [pc, #376]	@ (8005494 <UART_SetConfig+0x2ec>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d125      	bne.n	800536a <UART_SetConfig+0x1c2>
 800531e:	4b5b      	ldr	r3, [pc, #364]	@ (800548c <UART_SetConfig+0x2e4>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005324:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005328:	2b30      	cmp	r3, #48	@ 0x30
 800532a:	d016      	beq.n	800535a <UART_SetConfig+0x1b2>
 800532c:	2b30      	cmp	r3, #48	@ 0x30
 800532e:	d818      	bhi.n	8005362 <UART_SetConfig+0x1ba>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d00a      	beq.n	800534a <UART_SetConfig+0x1a2>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d814      	bhi.n	8005362 <UART_SetConfig+0x1ba>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <UART_SetConfig+0x19a>
 800533c:	2b10      	cmp	r3, #16
 800533e:	d008      	beq.n	8005352 <UART_SetConfig+0x1aa>
 8005340:	e00f      	b.n	8005362 <UART_SetConfig+0x1ba>
 8005342:	2300      	movs	r3, #0
 8005344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005348:	e0ad      	b.n	80054a6 <UART_SetConfig+0x2fe>
 800534a:	2302      	movs	r3, #2
 800534c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005350:	e0a9      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005352:	2304      	movs	r3, #4
 8005354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005358:	e0a5      	b.n	80054a6 <UART_SetConfig+0x2fe>
 800535a:	2308      	movs	r3, #8
 800535c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005360:	e0a1      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005362:	2310      	movs	r3, #16
 8005364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005368:	e09d      	b.n	80054a6 <UART_SetConfig+0x2fe>
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a4a      	ldr	r2, [pc, #296]	@ (8005498 <UART_SetConfig+0x2f0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d125      	bne.n	80053c0 <UART_SetConfig+0x218>
 8005374:	4b45      	ldr	r3, [pc, #276]	@ (800548c <UART_SetConfig+0x2e4>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800537e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005380:	d016      	beq.n	80053b0 <UART_SetConfig+0x208>
 8005382:	2bc0      	cmp	r3, #192	@ 0xc0
 8005384:	d818      	bhi.n	80053b8 <UART_SetConfig+0x210>
 8005386:	2b80      	cmp	r3, #128	@ 0x80
 8005388:	d00a      	beq.n	80053a0 <UART_SetConfig+0x1f8>
 800538a:	2b80      	cmp	r3, #128	@ 0x80
 800538c:	d814      	bhi.n	80053b8 <UART_SetConfig+0x210>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <UART_SetConfig+0x1f0>
 8005392:	2b40      	cmp	r3, #64	@ 0x40
 8005394:	d008      	beq.n	80053a8 <UART_SetConfig+0x200>
 8005396:	e00f      	b.n	80053b8 <UART_SetConfig+0x210>
 8005398:	2300      	movs	r3, #0
 800539a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800539e:	e082      	b.n	80054a6 <UART_SetConfig+0x2fe>
 80053a0:	2302      	movs	r3, #2
 80053a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a6:	e07e      	b.n	80054a6 <UART_SetConfig+0x2fe>
 80053a8:	2304      	movs	r3, #4
 80053aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ae:	e07a      	b.n	80054a6 <UART_SetConfig+0x2fe>
 80053b0:	2308      	movs	r3, #8
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b6:	e076      	b.n	80054a6 <UART_SetConfig+0x2fe>
 80053b8:	2310      	movs	r3, #16
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053be:	e072      	b.n	80054a6 <UART_SetConfig+0x2fe>
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a35      	ldr	r2, [pc, #212]	@ (800549c <UART_SetConfig+0x2f4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d12a      	bne.n	8005420 <UART_SetConfig+0x278>
 80053ca:	4b30      	ldr	r3, [pc, #192]	@ (800548c <UART_SetConfig+0x2e4>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053d8:	d01a      	beq.n	8005410 <UART_SetConfig+0x268>
 80053da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053de:	d81b      	bhi.n	8005418 <UART_SetConfig+0x270>
 80053e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e4:	d00c      	beq.n	8005400 <UART_SetConfig+0x258>
 80053e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ea:	d815      	bhi.n	8005418 <UART_SetConfig+0x270>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <UART_SetConfig+0x250>
 80053f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f4:	d008      	beq.n	8005408 <UART_SetConfig+0x260>
 80053f6:	e00f      	b.n	8005418 <UART_SetConfig+0x270>
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fe:	e052      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005400:	2302      	movs	r3, #2
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005406:	e04e      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005408:	2304      	movs	r3, #4
 800540a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540e:	e04a      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005410:	2308      	movs	r3, #8
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005416:	e046      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005418:	2310      	movs	r3, #16
 800541a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800541e:	e042      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a17      	ldr	r2, [pc, #92]	@ (8005484 <UART_SetConfig+0x2dc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d13a      	bne.n	80054a0 <UART_SetConfig+0x2f8>
 800542a:	4b18      	ldr	r3, [pc, #96]	@ (800548c <UART_SetConfig+0x2e4>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005430:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005434:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005438:	d01a      	beq.n	8005470 <UART_SetConfig+0x2c8>
 800543a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800543e:	d81b      	bhi.n	8005478 <UART_SetConfig+0x2d0>
 8005440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005444:	d00c      	beq.n	8005460 <UART_SetConfig+0x2b8>
 8005446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800544a:	d815      	bhi.n	8005478 <UART_SetConfig+0x2d0>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <UART_SetConfig+0x2b0>
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005454:	d008      	beq.n	8005468 <UART_SetConfig+0x2c0>
 8005456:	e00f      	b.n	8005478 <UART_SetConfig+0x2d0>
 8005458:	2300      	movs	r3, #0
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545e:	e022      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005460:	2302      	movs	r3, #2
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005466:	e01e      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005468:	2304      	movs	r3, #4
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546e:	e01a      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005470:	2308      	movs	r3, #8
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005476:	e016      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547e:	e012      	b.n	80054a6 <UART_SetConfig+0x2fe>
 8005480:	cfff69f3 	.word	0xcfff69f3
 8005484:	40008000 	.word	0x40008000
 8005488:	40013800 	.word	0x40013800
 800548c:	40021000 	.word	0x40021000
 8005490:	40004400 	.word	0x40004400
 8005494:	40004800 	.word	0x40004800
 8005498:	40004c00 	.word	0x40004c00
 800549c:	40005000 	.word	0x40005000
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4aae      	ldr	r2, [pc, #696]	@ (8005764 <UART_SetConfig+0x5bc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	f040 8097 	bne.w	80055e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d823      	bhi.n	8005502 <UART_SetConfig+0x35a>
 80054ba:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <UART_SetConfig+0x318>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	08005503 	.word	0x08005503
 80054c8:	080054ed 	.word	0x080054ed
 80054cc:	08005503 	.word	0x08005503
 80054d0:	080054f3 	.word	0x080054f3
 80054d4:	08005503 	.word	0x08005503
 80054d8:	08005503 	.word	0x08005503
 80054dc:	08005503 	.word	0x08005503
 80054e0:	080054fb 	.word	0x080054fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e4:	f7fe ff6e 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 80054e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054ea:	e010      	b.n	800550e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ec:	4b9e      	ldr	r3, [pc, #632]	@ (8005768 <UART_SetConfig+0x5c0>)
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054f0:	e00d      	b.n	800550e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f2:	f7fe fef9 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80054f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054f8:	e009      	b.n	800550e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005500:	e005      	b.n	800550e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800550c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8130 	beq.w	8005776 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	4a94      	ldr	r2, [pc, #592]	@ (800576c <UART_SetConfig+0x5c4>)
 800551c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005520:	461a      	mov	r2, r3
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	fbb3 f3f2 	udiv	r3, r3, r2
 8005528:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	4413      	add	r3, r2
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	429a      	cmp	r2, r3
 8005538:	d305      	bcc.n	8005546 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	429a      	cmp	r2, r3
 8005544:	d903      	bls.n	800554e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800554c:	e113      	b.n	8005776 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	2200      	movs	r2, #0
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	60fa      	str	r2, [r7, #12]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	4a84      	ldr	r2, [pc, #528]	@ (800576c <UART_SetConfig+0x5c4>)
 800555c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005560:	b29b      	uxth	r3, r3
 8005562:	2200      	movs	r2, #0
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005570:	f7fb fad0 	bl	8000b14 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4610      	mov	r0, r2
 800557a:	4619      	mov	r1, r3
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	020b      	lsls	r3, r1, #8
 8005586:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800558a:	0202      	lsls	r2, r0, #8
 800558c:	6979      	ldr	r1, [r7, #20]
 800558e:	6849      	ldr	r1, [r1, #4]
 8005590:	0849      	lsrs	r1, r1, #1
 8005592:	2000      	movs	r0, #0
 8005594:	460c      	mov	r4, r1
 8005596:	4605      	mov	r5, r0
 8005598:	eb12 0804 	adds.w	r8, r2, r4
 800559c:	eb43 0905 	adc.w	r9, r3, r5
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	469a      	mov	sl, r3
 80055a8:	4693      	mov	fp, r2
 80055aa:	4652      	mov	r2, sl
 80055ac:	465b      	mov	r3, fp
 80055ae:	4640      	mov	r0, r8
 80055b0:	4649      	mov	r1, r9
 80055b2:	f7fb faaf 	bl	8000b14 <__aeabi_uldivmod>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4613      	mov	r3, r2
 80055bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055c4:	d308      	bcc.n	80055d8 <UART_SetConfig+0x430>
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055cc:	d204      	bcs.n	80055d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a3a      	ldr	r2, [r7, #32]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	e0ce      	b.n	8005776 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055de:	e0ca      	b.n	8005776 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e8:	d166      	bne.n	80056b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80055ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d827      	bhi.n	8005642 <UART_SetConfig+0x49a>
 80055f2:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <UART_SetConfig+0x450>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	0800561d 	.word	0x0800561d
 80055fc:	08005625 	.word	0x08005625
 8005600:	0800562d 	.word	0x0800562d
 8005604:	08005643 	.word	0x08005643
 8005608:	08005633 	.word	0x08005633
 800560c:	08005643 	.word	0x08005643
 8005610:	08005643 	.word	0x08005643
 8005614:	08005643 	.word	0x08005643
 8005618:	0800563b 	.word	0x0800563b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800561c:	f7fe fed2 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 8005620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005622:	e014      	b.n	800564e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005624:	f7fe fee4 	bl	80043f0 <HAL_RCC_GetPCLK2Freq>
 8005628:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800562a:	e010      	b.n	800564e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800562c:	4b4e      	ldr	r3, [pc, #312]	@ (8005768 <UART_SetConfig+0x5c0>)
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005630:	e00d      	b.n	800564e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005632:	f7fe fe59 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8005636:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005638:	e009      	b.n	800564e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800563e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005640:	e005      	b.n	800564e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800564c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8090 	beq.w	8005776 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	4a44      	ldr	r2, [pc, #272]	@ (800576c <UART_SetConfig+0x5c4>)
 800565c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005660:	461a      	mov	r2, r3
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	fbb3 f3f2 	udiv	r3, r3, r2
 8005668:	005a      	lsls	r2, r3, #1
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	441a      	add	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	fbb2 f3f3 	udiv	r3, r2, r3
 800567a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	d916      	bls.n	80056b0 <UART_SetConfig+0x508>
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005688:	d212      	bcs.n	80056b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	b29b      	uxth	r3, r3
 800568e:	f023 030f 	bic.w	r3, r3, #15
 8005692:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	b29b      	uxth	r3, r3
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	b29a      	uxth	r2, r3
 80056a0:	8bfb      	ldrh	r3, [r7, #30]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	8bfa      	ldrh	r2, [r7, #30]
 80056ac:	60da      	str	r2, [r3, #12]
 80056ae:	e062      	b.n	8005776 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056b6:	e05e      	b.n	8005776 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d828      	bhi.n	8005712 <UART_SetConfig+0x56a>
 80056c0:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <UART_SetConfig+0x520>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	080056f5 	.word	0x080056f5
 80056d0:	080056fd 	.word	0x080056fd
 80056d4:	08005713 	.word	0x08005713
 80056d8:	08005703 	.word	0x08005703
 80056dc:	08005713 	.word	0x08005713
 80056e0:	08005713 	.word	0x08005713
 80056e4:	08005713 	.word	0x08005713
 80056e8:	0800570b 	.word	0x0800570b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ec:	f7fe fe6a 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 80056f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056f2:	e014      	b.n	800571e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f4:	f7fe fe7c 	bl	80043f0 <HAL_RCC_GetPCLK2Freq>
 80056f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056fa:	e010      	b.n	800571e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005768 <UART_SetConfig+0x5c0>)
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005700:	e00d      	b.n	800571e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005702:	f7fe fdf1 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8005706:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005708:	e009      	b.n	800571e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800570a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005710:	e005      	b.n	800571e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800571c:	bf00      	nop
    }

    if (pclk != 0U)
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d028      	beq.n	8005776 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	4a10      	ldr	r2, [pc, #64]	@ (800576c <UART_SetConfig+0x5c4>)
 800572a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800572e:	461a      	mov	r2, r3
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	fbb3 f2f2 	udiv	r2, r3, r2
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	441a      	add	r2, r3
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	fbb2 f3f3 	udiv	r3, r2, r3
 8005746:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b0f      	cmp	r3, #15
 800574c:	d910      	bls.n	8005770 <UART_SetConfig+0x5c8>
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005754:	d20c      	bcs.n	8005770 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	b29a      	uxth	r2, r3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60da      	str	r2, [r3, #12]
 8005760:	e009      	b.n	8005776 <UART_SetConfig+0x5ce>
 8005762:	bf00      	nop
 8005764:	40008000 	.word	0x40008000
 8005768:	00f42400 	.word	0x00f42400
 800576c:	08006eb8 	.word	0x08006eb8
      }
      else
      {
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2201      	movs	r2, #1
 800577a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2201      	movs	r2, #1
 8005782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2200      	movs	r2, #0
 800578a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2200      	movs	r2, #0
 8005790:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005792:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005796:	4618      	mov	r0, r3
 8005798:	3730      	adds	r7, #48	@ 0x30
 800579a:	46bd      	mov	sp, r7
 800579c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01a      	beq.n	80058b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800589e:	d10a      	bne.n	80058b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b098      	sub	sp, #96	@ 0x60
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f4:	f7fb ff96 	bl	8001824 <HAL_GetTick>
 80058f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b08      	cmp	r3, #8
 8005906:	d12f      	bne.n	8005968 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005910:	2200      	movs	r2, #0
 8005912:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f88e 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d022      	beq.n	8005968 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005936:	653b      	str	r3, [r7, #80]	@ 0x50
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005940:	647b      	str	r3, [r7, #68]	@ 0x44
 8005942:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800594e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e6      	bne.n	8005922 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e063      	b.n	8005a30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b04      	cmp	r3, #4
 8005974:	d149      	bne.n	8005a0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005976:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597e:	2200      	movs	r2, #0
 8005980:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f857 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d03c      	beq.n	8005a0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	623b      	str	r3, [r7, #32]
   return(result);
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80059b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e6      	bne.n	8005990 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059e2:	61fa      	str	r2, [r7, #28]
 80059e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	69b9      	ldr	r1, [r7, #24]
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	617b      	str	r3, [r7, #20]
   return(result);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e5      	bne.n	80059c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e012      	b.n	8005a30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3758      	adds	r7, #88	@ 0x58
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a48:	e04f      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d04b      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a52:	f7fb fee7 	bl	8001824 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e04e      	b.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d037      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b80      	cmp	r3, #128	@ 0x80
 8005a7e:	d034      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b40      	cmp	r3, #64	@ 0x40
 8005a84:	d031      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d110      	bne.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f838 	bl	8005b12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2208      	movs	r2, #8
 8005aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e029      	b.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ac4:	d111      	bne.n	8005aea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f81e 	bl	8005b12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e00f      	b.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4013      	ands	r3, r2
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	bf0c      	ite	eq
 8005afa:	2301      	moveq	r3, #1
 8005afc:	2300      	movne	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d0a0      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b095      	sub	sp, #84	@ 0x54
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e6      	bne.n	8005b1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3308      	adds	r3, #8
 8005b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e3      	bne.n	8005b4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d118      	bne.n	8005bbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f023 0310 	bic.w	r3, r3, #16
 8005ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6979      	ldr	r1, [r7, #20]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e6      	bne.n	8005b8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005bd2:	bf00      	nop
 8005bd4:	3754      	adds	r7, #84	@ 0x54
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b085      	sub	sp, #20
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e027      	b.n	8005c44 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	@ 0x24
 8005c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0201 	bic.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e02d      	b.n	8005cc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2224      	movs	r2, #36	@ 0x24
 8005c74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f84f 	bl	8005d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e02d      	b.n	8005d40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2224      	movs	r2, #36	@ 0x24
 8005cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0201 	bic.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f811 	bl	8005d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d108      	bne.n	8005d6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d68:	e031      	b.n	8005dce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d6e:	2308      	movs	r3, #8
 8005d70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	0e5b      	lsrs	r3, r3, #25
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	0f5b      	lsrs	r3, r3, #29
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
 8005d94:	7b3a      	ldrb	r2, [r7, #12]
 8005d96:	4911      	ldr	r1, [pc, #68]	@ (8005ddc <UARTEx_SetNbDataToProcess+0x94>)
 8005d98:	5c8a      	ldrb	r2, [r1, r2]
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d9e:	7b3a      	ldrb	r2, [r7, #12]
 8005da0:	490f      	ldr	r1, [pc, #60]	@ (8005de0 <UARTEx_SetNbDataToProcess+0x98>)
 8005da2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	7b7a      	ldrb	r2, [r7, #13]
 8005db4:	4909      	ldr	r1, [pc, #36]	@ (8005ddc <UARTEx_SetNbDataToProcess+0x94>)
 8005db6:	5c8a      	ldrb	r2, [r1, r2]
 8005db8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dbc:	7b7a      	ldrb	r2, [r7, #13]
 8005dbe:	4908      	ldr	r1, [pc, #32]	@ (8005de0 <UARTEx_SetNbDataToProcess+0x98>)
 8005dc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005dce:	bf00      	nop
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	08006ed0 	.word	0x08006ed0
 8005de0:	08006ed8 	.word	0x08006ed8

08005de4 <memset>:
 8005de4:	4402      	add	r2, r0
 8005de6:	4603      	mov	r3, r0
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d100      	bne.n	8005dee <memset+0xa>
 8005dec:	4770      	bx	lr
 8005dee:	f803 1b01 	strb.w	r1, [r3], #1
 8005df2:	e7f9      	b.n	8005de8 <memset+0x4>

08005df4 <__libc_init_array>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	4d0d      	ldr	r5, [pc, #52]	@ (8005e2c <__libc_init_array+0x38>)
 8005df8:	4c0d      	ldr	r4, [pc, #52]	@ (8005e30 <__libc_init_array+0x3c>)
 8005dfa:	1b64      	subs	r4, r4, r5
 8005dfc:	10a4      	asrs	r4, r4, #2
 8005dfe:	2600      	movs	r6, #0
 8005e00:	42a6      	cmp	r6, r4
 8005e02:	d109      	bne.n	8005e18 <__libc_init_array+0x24>
 8005e04:	4d0b      	ldr	r5, [pc, #44]	@ (8005e34 <__libc_init_array+0x40>)
 8005e06:	4c0c      	ldr	r4, [pc, #48]	@ (8005e38 <__libc_init_array+0x44>)
 8005e08:	f001 f83e 	bl	8006e88 <_init>
 8005e0c:	1b64      	subs	r4, r4, r5
 8005e0e:	10a4      	asrs	r4, r4, #2
 8005e10:	2600      	movs	r6, #0
 8005e12:	42a6      	cmp	r6, r4
 8005e14:	d105      	bne.n	8005e22 <__libc_init_array+0x2e>
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
 8005e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1c:	4798      	blx	r3
 8005e1e:	3601      	adds	r6, #1
 8005e20:	e7ee      	b.n	8005e00 <__libc_init_array+0xc>
 8005e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e26:	4798      	blx	r3
 8005e28:	3601      	adds	r6, #1
 8005e2a:	e7f2      	b.n	8005e12 <__libc_init_array+0x1e>
 8005e2c:	080070c0 	.word	0x080070c0
 8005e30:	080070c0 	.word	0x080070c0
 8005e34:	080070c0 	.word	0x080070c0
 8005e38:	080070c4 	.word	0x080070c4
 8005e3c:	00000000 	.word	0x00000000

08005e40 <cos>:
 8005e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e42:	ec53 2b10 	vmov	r2, r3, d0
 8005e46:	4826      	ldr	r0, [pc, #152]	@ (8005ee0 <cos+0xa0>)
 8005e48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005e4c:	4281      	cmp	r1, r0
 8005e4e:	d806      	bhi.n	8005e5e <cos+0x1e>
 8005e50:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005ed8 <cos+0x98>
 8005e54:	b005      	add	sp, #20
 8005e56:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e5a:	f000 b845 	b.w	8005ee8 <__kernel_cos>
 8005e5e:	4821      	ldr	r0, [pc, #132]	@ (8005ee4 <cos+0xa4>)
 8005e60:	4281      	cmp	r1, r0
 8005e62:	d908      	bls.n	8005e76 <cos+0x36>
 8005e64:	4610      	mov	r0, r2
 8005e66:	4619      	mov	r1, r3
 8005e68:	f7fa f9da 	bl	8000220 <__aeabi_dsub>
 8005e6c:	ec41 0b10 	vmov	d0, r0, r1
 8005e70:	b005      	add	sp, #20
 8005e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e76:	4668      	mov	r0, sp
 8005e78:	f000 f9ba 	bl	80061f0 <__ieee754_rem_pio2>
 8005e7c:	f000 0003 	and.w	r0, r0, #3
 8005e80:	2801      	cmp	r0, #1
 8005e82:	d00b      	beq.n	8005e9c <cos+0x5c>
 8005e84:	2802      	cmp	r0, #2
 8005e86:	d015      	beq.n	8005eb4 <cos+0x74>
 8005e88:	b9d8      	cbnz	r0, 8005ec2 <cos+0x82>
 8005e8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e8e:	ed9d 0b00 	vldr	d0, [sp]
 8005e92:	f000 f829 	bl	8005ee8 <__kernel_cos>
 8005e96:	ec51 0b10 	vmov	r0, r1, d0
 8005e9a:	e7e7      	b.n	8005e6c <cos+0x2c>
 8005e9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ea0:	ed9d 0b00 	vldr	d0, [sp]
 8005ea4:	f000 f8e8 	bl	8006078 <__kernel_sin>
 8005ea8:	ec53 2b10 	vmov	r2, r3, d0
 8005eac:	4610      	mov	r0, r2
 8005eae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005eb2:	e7db      	b.n	8005e6c <cos+0x2c>
 8005eb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005eb8:	ed9d 0b00 	vldr	d0, [sp]
 8005ebc:	f000 f814 	bl	8005ee8 <__kernel_cos>
 8005ec0:	e7f2      	b.n	8005ea8 <cos+0x68>
 8005ec2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ec6:	ed9d 0b00 	vldr	d0, [sp]
 8005eca:	2001      	movs	r0, #1
 8005ecc:	f000 f8d4 	bl	8006078 <__kernel_sin>
 8005ed0:	e7e1      	b.n	8005e96 <cos+0x56>
 8005ed2:	bf00      	nop
 8005ed4:	f3af 8000 	nop.w
	...
 8005ee0:	3fe921fb 	.word	0x3fe921fb
 8005ee4:	7fefffff 	.word	0x7fefffff

08005ee8 <__kernel_cos>:
 8005ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	ec57 6b10 	vmov	r6, r7, d0
 8005ef0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005ef4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005ef8:	ed8d 1b00 	vstr	d1, [sp]
 8005efc:	d206      	bcs.n	8005f0c <__kernel_cos+0x24>
 8005efe:	4630      	mov	r0, r6
 8005f00:	4639      	mov	r1, r7
 8005f02:	f7fa fddf 	bl	8000ac4 <__aeabi_d2iz>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	f000 8088 	beq.w	800601c <__kernel_cos+0x134>
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	463b      	mov	r3, r7
 8005f10:	4630      	mov	r0, r6
 8005f12:	4639      	mov	r1, r7
 8005f14:	f7fa fb3c 	bl	8000590 <__aeabi_dmul>
 8005f18:	4b51      	ldr	r3, [pc, #324]	@ (8006060 <__kernel_cos+0x178>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	460d      	mov	r5, r1
 8005f20:	f7fa fb36 	bl	8000590 <__aeabi_dmul>
 8005f24:	a340      	add	r3, pc, #256	@ (adr r3, 8006028 <__kernel_cos+0x140>)
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	4682      	mov	sl, r0
 8005f2c:	468b      	mov	fp, r1
 8005f2e:	4620      	mov	r0, r4
 8005f30:	4629      	mov	r1, r5
 8005f32:	f7fa fb2d 	bl	8000590 <__aeabi_dmul>
 8005f36:	a33e      	add	r3, pc, #248	@ (adr r3, 8006030 <__kernel_cos+0x148>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f7fa f972 	bl	8000224 <__adddf3>
 8005f40:	4622      	mov	r2, r4
 8005f42:	462b      	mov	r3, r5
 8005f44:	f7fa fb24 	bl	8000590 <__aeabi_dmul>
 8005f48:	a33b      	add	r3, pc, #236	@ (adr r3, 8006038 <__kernel_cos+0x150>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa f967 	bl	8000220 <__aeabi_dsub>
 8005f52:	4622      	mov	r2, r4
 8005f54:	462b      	mov	r3, r5
 8005f56:	f7fa fb1b 	bl	8000590 <__aeabi_dmul>
 8005f5a:	a339      	add	r3, pc, #228	@ (adr r3, 8006040 <__kernel_cos+0x158>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa f960 	bl	8000224 <__adddf3>
 8005f64:	4622      	mov	r2, r4
 8005f66:	462b      	mov	r3, r5
 8005f68:	f7fa fb12 	bl	8000590 <__aeabi_dmul>
 8005f6c:	a336      	add	r3, pc, #216	@ (adr r3, 8006048 <__kernel_cos+0x160>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f955 	bl	8000220 <__aeabi_dsub>
 8005f76:	4622      	mov	r2, r4
 8005f78:	462b      	mov	r3, r5
 8005f7a:	f7fa fb09 	bl	8000590 <__aeabi_dmul>
 8005f7e:	a334      	add	r3, pc, #208	@ (adr r3, 8006050 <__kernel_cos+0x168>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa f94e 	bl	8000224 <__adddf3>
 8005f88:	4622      	mov	r2, r4
 8005f8a:	462b      	mov	r3, r5
 8005f8c:	f7fa fb00 	bl	8000590 <__aeabi_dmul>
 8005f90:	4622      	mov	r2, r4
 8005f92:	462b      	mov	r3, r5
 8005f94:	f7fa fafc 	bl	8000590 <__aeabi_dmul>
 8005f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	460d      	mov	r5, r1
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa faf4 	bl	8000590 <__aeabi_dmul>
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4602      	mov	r2, r0
 8005fac:	4629      	mov	r1, r5
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f7fa f936 	bl	8000220 <__aeabi_dsub>
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006064 <__kernel_cos+0x17c>)
 8005fb6:	4598      	cmp	r8, r3
 8005fb8:	4606      	mov	r6, r0
 8005fba:	460f      	mov	r7, r1
 8005fbc:	d810      	bhi.n	8005fe0 <__kernel_cos+0xf8>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	f7fa f92b 	bl	8000220 <__aeabi_dsub>
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4926      	ldr	r1, [pc, #152]	@ (8006068 <__kernel_cos+0x180>)
 8005fce:	4602      	mov	r2, r0
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	f7fa f925 	bl	8000220 <__aeabi_dsub>
 8005fd6:	ec41 0b10 	vmov	d0, r0, r1
 8005fda:	b003      	add	sp, #12
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe0:	4b22      	ldr	r3, [pc, #136]	@ (800606c <__kernel_cos+0x184>)
 8005fe2:	4921      	ldr	r1, [pc, #132]	@ (8006068 <__kernel_cos+0x180>)
 8005fe4:	4598      	cmp	r8, r3
 8005fe6:	bf8c      	ite	hi
 8005fe8:	4d21      	ldrhi	r5, [pc, #132]	@ (8006070 <__kernel_cos+0x188>)
 8005fea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005fee:	2400      	movs	r4, #0
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f7fa f913 	bl	8000220 <__aeabi_dsub>
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	4680      	mov	r8, r0
 8005ffe:	4689      	mov	r9, r1
 8006000:	462b      	mov	r3, r5
 8006002:	4650      	mov	r0, sl
 8006004:	4659      	mov	r1, fp
 8006006:	f7fa f90b 	bl	8000220 <__aeabi_dsub>
 800600a:	4632      	mov	r2, r6
 800600c:	463b      	mov	r3, r7
 800600e:	f7fa f907 	bl	8000220 <__aeabi_dsub>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4640      	mov	r0, r8
 8006018:	4649      	mov	r1, r9
 800601a:	e7da      	b.n	8005fd2 <__kernel_cos+0xea>
 800601c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006058 <__kernel_cos+0x170>
 8006020:	e7db      	b.n	8005fda <__kernel_cos+0xf2>
 8006022:	bf00      	nop
 8006024:	f3af 8000 	nop.w
 8006028:	be8838d4 	.word	0xbe8838d4
 800602c:	bda8fae9 	.word	0xbda8fae9
 8006030:	bdb4b1c4 	.word	0xbdb4b1c4
 8006034:	3e21ee9e 	.word	0x3e21ee9e
 8006038:	809c52ad 	.word	0x809c52ad
 800603c:	3e927e4f 	.word	0x3e927e4f
 8006040:	19cb1590 	.word	0x19cb1590
 8006044:	3efa01a0 	.word	0x3efa01a0
 8006048:	16c15177 	.word	0x16c15177
 800604c:	3f56c16c 	.word	0x3f56c16c
 8006050:	5555554c 	.word	0x5555554c
 8006054:	3fa55555 	.word	0x3fa55555
 8006058:	00000000 	.word	0x00000000
 800605c:	3ff00000 	.word	0x3ff00000
 8006060:	3fe00000 	.word	0x3fe00000
 8006064:	3fd33332 	.word	0x3fd33332
 8006068:	3ff00000 	.word	0x3ff00000
 800606c:	3fe90000 	.word	0x3fe90000
 8006070:	3fd20000 	.word	0x3fd20000
 8006074:	00000000 	.word	0x00000000

08006078 <__kernel_sin>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	ec55 4b10 	vmov	r4, r5, d0
 8006080:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006084:	b085      	sub	sp, #20
 8006086:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800608a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800608e:	4680      	mov	r8, r0
 8006090:	d205      	bcs.n	800609e <__kernel_sin+0x26>
 8006092:	4620      	mov	r0, r4
 8006094:	4629      	mov	r1, r5
 8006096:	f7fa fd15 	bl	8000ac4 <__aeabi_d2iz>
 800609a:	2800      	cmp	r0, #0
 800609c:	d052      	beq.n	8006144 <__kernel_sin+0xcc>
 800609e:	4622      	mov	r2, r4
 80060a0:	462b      	mov	r3, r5
 80060a2:	4620      	mov	r0, r4
 80060a4:	4629      	mov	r1, r5
 80060a6:	f7fa fa73 	bl	8000590 <__aeabi_dmul>
 80060aa:	4682      	mov	sl, r0
 80060ac:	468b      	mov	fp, r1
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4620      	mov	r0, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	f7fa fa6b 	bl	8000590 <__aeabi_dmul>
 80060ba:	a342      	add	r3, pc, #264	@ (adr r3, 80061c4 <__kernel_sin+0x14c>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	e9cd 0100 	strd	r0, r1, [sp]
 80060c4:	4650      	mov	r0, sl
 80060c6:	4659      	mov	r1, fp
 80060c8:	f7fa fa62 	bl	8000590 <__aeabi_dmul>
 80060cc:	a33f      	add	r3, pc, #252	@ (adr r3, 80061cc <__kernel_sin+0x154>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f7fa f8a5 	bl	8000220 <__aeabi_dsub>
 80060d6:	4652      	mov	r2, sl
 80060d8:	465b      	mov	r3, fp
 80060da:	f7fa fa59 	bl	8000590 <__aeabi_dmul>
 80060de:	a33d      	add	r3, pc, #244	@ (adr r3, 80061d4 <__kernel_sin+0x15c>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f7fa f89e 	bl	8000224 <__adddf3>
 80060e8:	4652      	mov	r2, sl
 80060ea:	465b      	mov	r3, fp
 80060ec:	f7fa fa50 	bl	8000590 <__aeabi_dmul>
 80060f0:	a33a      	add	r3, pc, #232	@ (adr r3, 80061dc <__kernel_sin+0x164>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa f893 	bl	8000220 <__aeabi_dsub>
 80060fa:	4652      	mov	r2, sl
 80060fc:	465b      	mov	r3, fp
 80060fe:	f7fa fa47 	bl	8000590 <__aeabi_dmul>
 8006102:	a338      	add	r3, pc, #224	@ (adr r3, 80061e4 <__kernel_sin+0x16c>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa f88c 	bl	8000224 <__adddf3>
 800610c:	4606      	mov	r6, r0
 800610e:	460f      	mov	r7, r1
 8006110:	f1b8 0f00 	cmp.w	r8, #0
 8006114:	d11b      	bne.n	800614e <__kernel_sin+0xd6>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4650      	mov	r0, sl
 800611c:	4659      	mov	r1, fp
 800611e:	f7fa fa37 	bl	8000590 <__aeabi_dmul>
 8006122:	a325      	add	r3, pc, #148	@ (adr r3, 80061b8 <__kernel_sin+0x140>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa f87a 	bl	8000220 <__aeabi_dsub>
 800612c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006130:	f7fa fa2e 	bl	8000590 <__aeabi_dmul>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4620      	mov	r0, r4
 800613a:	4629      	mov	r1, r5
 800613c:	f7fa f872 	bl	8000224 <__adddf3>
 8006140:	4604      	mov	r4, r0
 8006142:	460d      	mov	r5, r1
 8006144:	ec45 4b10 	vmov	d0, r4, r5
 8006148:	b005      	add	sp, #20
 800614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006152:	4b1b      	ldr	r3, [pc, #108]	@ (80061c0 <__kernel_sin+0x148>)
 8006154:	2200      	movs	r2, #0
 8006156:	f7fa fa1b 	bl	8000590 <__aeabi_dmul>
 800615a:	4632      	mov	r2, r6
 800615c:	4680      	mov	r8, r0
 800615e:	4689      	mov	r9, r1
 8006160:	463b      	mov	r3, r7
 8006162:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006166:	f7fa fa13 	bl	8000590 <__aeabi_dmul>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4640      	mov	r0, r8
 8006170:	4649      	mov	r1, r9
 8006172:	f7fa f855 	bl	8000220 <__aeabi_dsub>
 8006176:	4652      	mov	r2, sl
 8006178:	465b      	mov	r3, fp
 800617a:	f7fa fa09 	bl	8000590 <__aeabi_dmul>
 800617e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006182:	f7fa f84d 	bl	8000220 <__aeabi_dsub>
 8006186:	a30c      	add	r3, pc, #48	@ (adr r3, 80061b8 <__kernel_sin+0x140>)
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	4606      	mov	r6, r0
 800618e:	460f      	mov	r7, r1
 8006190:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006194:	f7fa f9fc 	bl	8000590 <__aeabi_dmul>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4630      	mov	r0, r6
 800619e:	4639      	mov	r1, r7
 80061a0:	f7fa f840 	bl	8000224 <__adddf3>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4620      	mov	r0, r4
 80061aa:	4629      	mov	r1, r5
 80061ac:	f7fa f838 	bl	8000220 <__aeabi_dsub>
 80061b0:	e7c6      	b.n	8006140 <__kernel_sin+0xc8>
 80061b2:	bf00      	nop
 80061b4:	f3af 8000 	nop.w
 80061b8:	55555549 	.word	0x55555549
 80061bc:	3fc55555 	.word	0x3fc55555
 80061c0:	3fe00000 	.word	0x3fe00000
 80061c4:	5acfd57c 	.word	0x5acfd57c
 80061c8:	3de5d93a 	.word	0x3de5d93a
 80061cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80061d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80061d4:	57b1fe7d 	.word	0x57b1fe7d
 80061d8:	3ec71de3 	.word	0x3ec71de3
 80061dc:	19c161d5 	.word	0x19c161d5
 80061e0:	3f2a01a0 	.word	0x3f2a01a0
 80061e4:	1110f8a6 	.word	0x1110f8a6
 80061e8:	3f811111 	.word	0x3f811111
 80061ec:	00000000 	.word	0x00000000

080061f0 <__ieee754_rem_pio2>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	ec57 6b10 	vmov	r6, r7, d0
 80061f8:	4bc5      	ldr	r3, [pc, #788]	@ (8006510 <__ieee754_rem_pio2+0x320>)
 80061fa:	b08d      	sub	sp, #52	@ 0x34
 80061fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006200:	4598      	cmp	r8, r3
 8006202:	4604      	mov	r4, r0
 8006204:	9704      	str	r7, [sp, #16]
 8006206:	d807      	bhi.n	8006218 <__ieee754_rem_pio2+0x28>
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	ed80 0b00 	vstr	d0, [r0]
 8006210:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006214:	2500      	movs	r5, #0
 8006216:	e028      	b.n	800626a <__ieee754_rem_pio2+0x7a>
 8006218:	4bbe      	ldr	r3, [pc, #760]	@ (8006514 <__ieee754_rem_pio2+0x324>)
 800621a:	4598      	cmp	r8, r3
 800621c:	d878      	bhi.n	8006310 <__ieee754_rem_pio2+0x120>
 800621e:	9b04      	ldr	r3, [sp, #16]
 8006220:	4dbd      	ldr	r5, [pc, #756]	@ (8006518 <__ieee754_rem_pio2+0x328>)
 8006222:	2b00      	cmp	r3, #0
 8006224:	4630      	mov	r0, r6
 8006226:	a3ac      	add	r3, pc, #688	@ (adr r3, 80064d8 <__ieee754_rem_pio2+0x2e8>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	4639      	mov	r1, r7
 800622e:	dd38      	ble.n	80062a2 <__ieee754_rem_pio2+0xb2>
 8006230:	f7f9 fff6 	bl	8000220 <__aeabi_dsub>
 8006234:	45a8      	cmp	r8, r5
 8006236:	4606      	mov	r6, r0
 8006238:	460f      	mov	r7, r1
 800623a:	d01a      	beq.n	8006272 <__ieee754_rem_pio2+0x82>
 800623c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2f0>)
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	f7f9 ffed 	bl	8000220 <__aeabi_dsub>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4680      	mov	r8, r0
 800624c:	4689      	mov	r9, r1
 800624e:	4630      	mov	r0, r6
 8006250:	4639      	mov	r1, r7
 8006252:	f7f9 ffe5 	bl	8000220 <__aeabi_dsub>
 8006256:	a3a2      	add	r3, pc, #648	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2f0>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7f9 ffe0 	bl	8000220 <__aeabi_dsub>
 8006260:	e9c4 8900 	strd	r8, r9, [r4]
 8006264:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006268:	2501      	movs	r5, #1
 800626a:	4628      	mov	r0, r5
 800626c:	b00d      	add	sp, #52	@ 0x34
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006272:	a39d      	add	r3, pc, #628	@ (adr r3, 80064e8 <__ieee754_rem_pio2+0x2f8>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7f9 ffd2 	bl	8000220 <__aeabi_dsub>
 800627c:	a39c      	add	r3, pc, #624	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x300>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	4606      	mov	r6, r0
 8006284:	460f      	mov	r7, r1
 8006286:	f7f9 ffcb 	bl	8000220 <__aeabi_dsub>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4680      	mov	r8, r0
 8006290:	4689      	mov	r9, r1
 8006292:	4630      	mov	r0, r6
 8006294:	4639      	mov	r1, r7
 8006296:	f7f9 ffc3 	bl	8000220 <__aeabi_dsub>
 800629a:	a395      	add	r3, pc, #596	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x300>)
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	e7dc      	b.n	800625c <__ieee754_rem_pio2+0x6c>
 80062a2:	f7f9 ffbf 	bl	8000224 <__adddf3>
 80062a6:	45a8      	cmp	r8, r5
 80062a8:	4606      	mov	r6, r0
 80062aa:	460f      	mov	r7, r1
 80062ac:	d018      	beq.n	80062e0 <__ieee754_rem_pio2+0xf0>
 80062ae:	a38c      	add	r3, pc, #560	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2f0>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f7f9 ffb6 	bl	8000224 <__adddf3>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4680      	mov	r8, r0
 80062be:	4689      	mov	r9, r1
 80062c0:	4630      	mov	r0, r6
 80062c2:	4639      	mov	r1, r7
 80062c4:	f7f9 ffac 	bl	8000220 <__aeabi_dsub>
 80062c8:	a385      	add	r3, pc, #532	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2f0>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f7f9 ffa9 	bl	8000224 <__adddf3>
 80062d2:	f04f 35ff 	mov.w	r5, #4294967295
 80062d6:	e9c4 8900 	strd	r8, r9, [r4]
 80062da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80062de:	e7c4      	b.n	800626a <__ieee754_rem_pio2+0x7a>
 80062e0:	a381      	add	r3, pc, #516	@ (adr r3, 80064e8 <__ieee754_rem_pio2+0x2f8>)
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f7f9 ff9d 	bl	8000224 <__adddf3>
 80062ea:	a381      	add	r3, pc, #516	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x300>)
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	4606      	mov	r6, r0
 80062f2:	460f      	mov	r7, r1
 80062f4:	f7f9 ff96 	bl	8000224 <__adddf3>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4680      	mov	r8, r0
 80062fe:	4689      	mov	r9, r1
 8006300:	4630      	mov	r0, r6
 8006302:	4639      	mov	r1, r7
 8006304:	f7f9 ff8c 	bl	8000220 <__aeabi_dsub>
 8006308:	a379      	add	r3, pc, #484	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x300>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	e7de      	b.n	80062ce <__ieee754_rem_pio2+0xde>
 8006310:	4b82      	ldr	r3, [pc, #520]	@ (800651c <__ieee754_rem_pio2+0x32c>)
 8006312:	4598      	cmp	r8, r3
 8006314:	f200 80d1 	bhi.w	80064ba <__ieee754_rem_pio2+0x2ca>
 8006318:	f000 f966 	bl	80065e8 <fabs>
 800631c:	ec57 6b10 	vmov	r6, r7, d0
 8006320:	a375      	add	r3, pc, #468	@ (adr r3, 80064f8 <__ieee754_rem_pio2+0x308>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	4630      	mov	r0, r6
 8006328:	4639      	mov	r1, r7
 800632a:	f7fa f931 	bl	8000590 <__aeabi_dmul>
 800632e:	4b7c      	ldr	r3, [pc, #496]	@ (8006520 <__ieee754_rem_pio2+0x330>)
 8006330:	2200      	movs	r2, #0
 8006332:	f7f9 ff77 	bl	8000224 <__adddf3>
 8006336:	f7fa fbc5 	bl	8000ac4 <__aeabi_d2iz>
 800633a:	4605      	mov	r5, r0
 800633c:	f7fa f8be 	bl	80004bc <__aeabi_i2d>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006348:	a363      	add	r3, pc, #396	@ (adr r3, 80064d8 <__ieee754_rem_pio2+0x2e8>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f7fa f91f 	bl	8000590 <__aeabi_dmul>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	f7f9 ff61 	bl	8000220 <__aeabi_dsub>
 800635e:	a360      	add	r3, pc, #384	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2f0>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	4682      	mov	sl, r0
 8006366:	468b      	mov	fp, r1
 8006368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636c:	f7fa f910 	bl	8000590 <__aeabi_dmul>
 8006370:	2d1f      	cmp	r5, #31
 8006372:	4606      	mov	r6, r0
 8006374:	460f      	mov	r7, r1
 8006376:	dc0c      	bgt.n	8006392 <__ieee754_rem_pio2+0x1a2>
 8006378:	4b6a      	ldr	r3, [pc, #424]	@ (8006524 <__ieee754_rem_pio2+0x334>)
 800637a:	1e6a      	subs	r2, r5, #1
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	4543      	cmp	r3, r8
 8006382:	d006      	beq.n	8006392 <__ieee754_rem_pio2+0x1a2>
 8006384:	4632      	mov	r2, r6
 8006386:	463b      	mov	r3, r7
 8006388:	4650      	mov	r0, sl
 800638a:	4659      	mov	r1, fp
 800638c:	f7f9 ff48 	bl	8000220 <__aeabi_dsub>
 8006390:	e00e      	b.n	80063b0 <__ieee754_rem_pio2+0x1c0>
 8006392:	463b      	mov	r3, r7
 8006394:	4632      	mov	r2, r6
 8006396:	4650      	mov	r0, sl
 8006398:	4659      	mov	r1, fp
 800639a:	f7f9 ff41 	bl	8000220 <__aeabi_dsub>
 800639e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80063a2:	9305      	str	r3, [sp, #20]
 80063a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	dc02      	bgt.n	80063b6 <__ieee754_rem_pio2+0x1c6>
 80063b0:	e9c4 0100 	strd	r0, r1, [r4]
 80063b4:	e039      	b.n	800642a <__ieee754_rem_pio2+0x23a>
 80063b6:	a34c      	add	r3, pc, #304	@ (adr r3, 80064e8 <__ieee754_rem_pio2+0x2f8>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063c0:	f7fa f8e6 	bl	8000590 <__aeabi_dmul>
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4650      	mov	r0, sl
 80063ce:	4659      	mov	r1, fp
 80063d0:	f7f9 ff26 	bl	8000220 <__aeabi_dsub>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4680      	mov	r8, r0
 80063da:	4689      	mov	r9, r1
 80063dc:	4650      	mov	r0, sl
 80063de:	4659      	mov	r1, fp
 80063e0:	f7f9 ff1e 	bl	8000220 <__aeabi_dsub>
 80063e4:	4632      	mov	r2, r6
 80063e6:	463b      	mov	r3, r7
 80063e8:	f7f9 ff1a 	bl	8000220 <__aeabi_dsub>
 80063ec:	a340      	add	r3, pc, #256	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x300>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	4606      	mov	r6, r0
 80063f4:	460f      	mov	r7, r1
 80063f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063fa:	f7fa f8c9 	bl	8000590 <__aeabi_dmul>
 80063fe:	4632      	mov	r2, r6
 8006400:	463b      	mov	r3, r7
 8006402:	f7f9 ff0d 	bl	8000220 <__aeabi_dsub>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4606      	mov	r6, r0
 800640c:	460f      	mov	r7, r1
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7f9 ff05 	bl	8000220 <__aeabi_dsub>
 8006416:	9a05      	ldr	r2, [sp, #20]
 8006418:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b31      	cmp	r3, #49	@ 0x31
 8006420:	dc20      	bgt.n	8006464 <__ieee754_rem_pio2+0x274>
 8006422:	e9c4 0100 	strd	r0, r1, [r4]
 8006426:	46c2      	mov	sl, r8
 8006428:	46cb      	mov	fp, r9
 800642a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800642e:	4650      	mov	r0, sl
 8006430:	4642      	mov	r2, r8
 8006432:	464b      	mov	r3, r9
 8006434:	4659      	mov	r1, fp
 8006436:	f7f9 fef3 	bl	8000220 <__aeabi_dsub>
 800643a:	463b      	mov	r3, r7
 800643c:	4632      	mov	r2, r6
 800643e:	f7f9 feef 	bl	8000220 <__aeabi_dsub>
 8006442:	9b04      	ldr	r3, [sp, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800644a:	f6bf af0e 	bge.w	800626a <__ieee754_rem_pio2+0x7a>
 800644e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006452:	6063      	str	r3, [r4, #4]
 8006454:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006458:	f8c4 8000 	str.w	r8, [r4]
 800645c:	60a0      	str	r0, [r4, #8]
 800645e:	60e3      	str	r3, [r4, #12]
 8006460:	426d      	negs	r5, r5
 8006462:	e702      	b.n	800626a <__ieee754_rem_pio2+0x7a>
 8006464:	a326      	add	r3, pc, #152	@ (adr r3, 8006500 <__ieee754_rem_pio2+0x310>)
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800646e:	f7fa f88f 	bl	8000590 <__aeabi_dmul>
 8006472:	4606      	mov	r6, r0
 8006474:	460f      	mov	r7, r1
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	f7f9 fecf 	bl	8000220 <__aeabi_dsub>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4682      	mov	sl, r0
 8006488:	468b      	mov	fp, r1
 800648a:	4640      	mov	r0, r8
 800648c:	4649      	mov	r1, r9
 800648e:	f7f9 fec7 	bl	8000220 <__aeabi_dsub>
 8006492:	4632      	mov	r2, r6
 8006494:	463b      	mov	r3, r7
 8006496:	f7f9 fec3 	bl	8000220 <__aeabi_dsub>
 800649a:	a31b      	add	r3, pc, #108	@ (adr r3, 8006508 <__ieee754_rem_pio2+0x318>)
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	4606      	mov	r6, r0
 80064a2:	460f      	mov	r7, r1
 80064a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a8:	f7fa f872 	bl	8000590 <__aeabi_dmul>
 80064ac:	4632      	mov	r2, r6
 80064ae:	463b      	mov	r3, r7
 80064b0:	f7f9 feb6 	bl	8000220 <__aeabi_dsub>
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	e764      	b.n	8006384 <__ieee754_rem_pio2+0x194>
 80064ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <__ieee754_rem_pio2+0x338>)
 80064bc:	4598      	cmp	r8, r3
 80064be:	d935      	bls.n	800652c <__ieee754_rem_pio2+0x33c>
 80064c0:	4632      	mov	r2, r6
 80064c2:	463b      	mov	r3, r7
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7f9 feaa 	bl	8000220 <__aeabi_dsub>
 80064cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064d0:	e9c4 0100 	strd	r0, r1, [r4]
 80064d4:	e69e      	b.n	8006214 <__ieee754_rem_pio2+0x24>
 80064d6:	bf00      	nop
 80064d8:	54400000 	.word	0x54400000
 80064dc:	3ff921fb 	.word	0x3ff921fb
 80064e0:	1a626331 	.word	0x1a626331
 80064e4:	3dd0b461 	.word	0x3dd0b461
 80064e8:	1a600000 	.word	0x1a600000
 80064ec:	3dd0b461 	.word	0x3dd0b461
 80064f0:	2e037073 	.word	0x2e037073
 80064f4:	3ba3198a 	.word	0x3ba3198a
 80064f8:	6dc9c883 	.word	0x6dc9c883
 80064fc:	3fe45f30 	.word	0x3fe45f30
 8006500:	2e000000 	.word	0x2e000000
 8006504:	3ba3198a 	.word	0x3ba3198a
 8006508:	252049c1 	.word	0x252049c1
 800650c:	397b839a 	.word	0x397b839a
 8006510:	3fe921fb 	.word	0x3fe921fb
 8006514:	4002d97b 	.word	0x4002d97b
 8006518:	3ff921fb 	.word	0x3ff921fb
 800651c:	413921fb 	.word	0x413921fb
 8006520:	3fe00000 	.word	0x3fe00000
 8006524:	08006ee0 	.word	0x08006ee0
 8006528:	7fefffff 	.word	0x7fefffff
 800652c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006530:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006534:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006538:	4630      	mov	r0, r6
 800653a:	460f      	mov	r7, r1
 800653c:	f7fa fac2 	bl	8000ac4 <__aeabi_d2iz>
 8006540:	f7f9 ffbc 	bl	80004bc <__aeabi_i2d>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4630      	mov	r0, r6
 800654a:	4639      	mov	r1, r7
 800654c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006550:	f7f9 fe66 	bl	8000220 <__aeabi_dsub>
 8006554:	4b22      	ldr	r3, [pc, #136]	@ (80065e0 <__ieee754_rem_pio2+0x3f0>)
 8006556:	2200      	movs	r2, #0
 8006558:	f7fa f81a 	bl	8000590 <__aeabi_dmul>
 800655c:	460f      	mov	r7, r1
 800655e:	4606      	mov	r6, r0
 8006560:	f7fa fab0 	bl	8000ac4 <__aeabi_d2iz>
 8006564:	f7f9 ffaa 	bl	80004bc <__aeabi_i2d>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4630      	mov	r0, r6
 800656e:	4639      	mov	r1, r7
 8006570:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006574:	f7f9 fe54 	bl	8000220 <__aeabi_dsub>
 8006578:	4b19      	ldr	r3, [pc, #100]	@ (80065e0 <__ieee754_rem_pio2+0x3f0>)
 800657a:	2200      	movs	r2, #0
 800657c:	f7fa f808 	bl	8000590 <__aeabi_dmul>
 8006580:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006584:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006588:	f04f 0803 	mov.w	r8, #3
 800658c:	2600      	movs	r6, #0
 800658e:	2700      	movs	r7, #0
 8006590:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006594:	4632      	mov	r2, r6
 8006596:	463b      	mov	r3, r7
 8006598:	46c2      	mov	sl, r8
 800659a:	f108 38ff 	add.w	r8, r8, #4294967295
 800659e:	f7fa fa5f 	bl	8000a60 <__aeabi_dcmpeq>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d1f4      	bne.n	8006590 <__ieee754_rem_pio2+0x3a0>
 80065a6:	4b0f      	ldr	r3, [pc, #60]	@ (80065e4 <__ieee754_rem_pio2+0x3f4>)
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	2302      	movs	r3, #2
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	462a      	mov	r2, r5
 80065b0:	4653      	mov	r3, sl
 80065b2:	4621      	mov	r1, r4
 80065b4:	a806      	add	r0, sp, #24
 80065b6:	f000 f81f 	bl	80065f8 <__kernel_rem_pio2>
 80065ba:	9b04      	ldr	r3, [sp, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	4605      	mov	r5, r0
 80065c0:	f6bf ae53 	bge.w	800626a <__ieee754_rem_pio2+0x7a>
 80065c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80065c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065cc:	e9c4 2300 	strd	r2, r3, [r4]
 80065d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80065d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80065dc:	e740      	b.n	8006460 <__ieee754_rem_pio2+0x270>
 80065de:	bf00      	nop
 80065e0:	41700000 	.word	0x41700000
 80065e4:	08006f60 	.word	0x08006f60

080065e8 <fabs>:
 80065e8:	ec51 0b10 	vmov	r0, r1, d0
 80065ec:	4602      	mov	r2, r0
 80065ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80065f2:	ec43 2b10 	vmov	d0, r2, r3
 80065f6:	4770      	bx	lr

080065f8 <__kernel_rem_pio2>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	ed2d 8b02 	vpush	{d8}
 8006600:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006604:	f112 0f14 	cmn.w	r2, #20
 8006608:	9306      	str	r3, [sp, #24]
 800660a:	9104      	str	r1, [sp, #16]
 800660c:	4bc2      	ldr	r3, [pc, #776]	@ (8006918 <__kernel_rem_pio2+0x320>)
 800660e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006610:	9008      	str	r0, [sp, #32]
 8006612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	9b06      	ldr	r3, [sp, #24]
 800661a:	f103 33ff 	add.w	r3, r3, #4294967295
 800661e:	bfa8      	it	ge
 8006620:	1ed4      	subge	r4, r2, #3
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	bfb2      	itee	lt
 8006626:	2400      	movlt	r4, #0
 8006628:	2318      	movge	r3, #24
 800662a:	fb94 f4f3 	sdivge	r4, r4, r3
 800662e:	f06f 0317 	mvn.w	r3, #23
 8006632:	fb04 3303 	mla	r3, r4, r3, r3
 8006636:	eb03 0b02 	add.w	fp, r3, r2
 800663a:	9b00      	ldr	r3, [sp, #0]
 800663c:	9a05      	ldr	r2, [sp, #20]
 800663e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8006908 <__kernel_rem_pio2+0x310>
 8006642:	eb03 0802 	add.w	r8, r3, r2
 8006646:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006648:	1aa7      	subs	r7, r4, r2
 800664a:	ae20      	add	r6, sp, #128	@ 0x80
 800664c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006650:	2500      	movs	r5, #0
 8006652:	4545      	cmp	r5, r8
 8006654:	dd12      	ble.n	800667c <__kernel_rem_pio2+0x84>
 8006656:	9b06      	ldr	r3, [sp, #24]
 8006658:	aa20      	add	r2, sp, #128	@ 0x80
 800665a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800665e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006662:	2700      	movs	r7, #0
 8006664:	9b00      	ldr	r3, [sp, #0]
 8006666:	429f      	cmp	r7, r3
 8006668:	dc2e      	bgt.n	80066c8 <__kernel_rem_pio2+0xd0>
 800666a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8006908 <__kernel_rem_pio2+0x310>
 800666e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006672:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006676:	46a8      	mov	r8, r5
 8006678:	2600      	movs	r6, #0
 800667a:	e01b      	b.n	80066b4 <__kernel_rem_pio2+0xbc>
 800667c:	42ef      	cmn	r7, r5
 800667e:	d407      	bmi.n	8006690 <__kernel_rem_pio2+0x98>
 8006680:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006684:	f7f9 ff1a 	bl	80004bc <__aeabi_i2d>
 8006688:	e8e6 0102 	strd	r0, r1, [r6], #8
 800668c:	3501      	adds	r5, #1
 800668e:	e7e0      	b.n	8006652 <__kernel_rem_pio2+0x5a>
 8006690:	ec51 0b18 	vmov	r0, r1, d8
 8006694:	e7f8      	b.n	8006688 <__kernel_rem_pio2+0x90>
 8006696:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800669a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800669e:	f7f9 ff77 	bl	8000590 <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066aa:	f7f9 fdbb 	bl	8000224 <__adddf3>
 80066ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b2:	3601      	adds	r6, #1
 80066b4:	9b05      	ldr	r3, [sp, #20]
 80066b6:	429e      	cmp	r6, r3
 80066b8:	dded      	ble.n	8006696 <__kernel_rem_pio2+0x9e>
 80066ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066be:	3701      	adds	r7, #1
 80066c0:	ecaa 7b02 	vstmia	sl!, {d7}
 80066c4:	3508      	adds	r5, #8
 80066c6:	e7cd      	b.n	8006664 <__kernel_rem_pio2+0x6c>
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	f8dd 8000 	ldr.w	r8, [sp]
 80066ce:	aa0c      	add	r2, sp, #48	@ 0x30
 80066d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80066d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80066d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80066dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066de:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80066e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066e4:	ab98      	add	r3, sp, #608	@ 0x260
 80066e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80066ea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80066ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80066f2:	ac0c      	add	r4, sp, #48	@ 0x30
 80066f4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80066f6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80066fa:	46a1      	mov	r9, r4
 80066fc:	46c2      	mov	sl, r8
 80066fe:	f1ba 0f00 	cmp.w	sl, #0
 8006702:	dc77      	bgt.n	80067f4 <__kernel_rem_pio2+0x1fc>
 8006704:	4658      	mov	r0, fp
 8006706:	ed9d 0b02 	vldr	d0, [sp, #8]
 800670a:	f000 fac5 	bl	8006c98 <scalbn>
 800670e:	ec57 6b10 	vmov	r6, r7, d0
 8006712:	2200      	movs	r2, #0
 8006714:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7f9 ff38 	bl	8000590 <__aeabi_dmul>
 8006720:	ec41 0b10 	vmov	d0, r0, r1
 8006724:	f000 fb34 	bl	8006d90 <floor>
 8006728:	4b7c      	ldr	r3, [pc, #496]	@ (800691c <__kernel_rem_pio2+0x324>)
 800672a:	ec51 0b10 	vmov	r0, r1, d0
 800672e:	2200      	movs	r2, #0
 8006730:	f7f9 ff2e 	bl	8000590 <__aeabi_dmul>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4630      	mov	r0, r6
 800673a:	4639      	mov	r1, r7
 800673c:	f7f9 fd70 	bl	8000220 <__aeabi_dsub>
 8006740:	460f      	mov	r7, r1
 8006742:	4606      	mov	r6, r0
 8006744:	f7fa f9be 	bl	8000ac4 <__aeabi_d2iz>
 8006748:	9002      	str	r0, [sp, #8]
 800674a:	f7f9 feb7 	bl	80004bc <__aeabi_i2d>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4630      	mov	r0, r6
 8006754:	4639      	mov	r1, r7
 8006756:	f7f9 fd63 	bl	8000220 <__aeabi_dsub>
 800675a:	f1bb 0f00 	cmp.w	fp, #0
 800675e:	4606      	mov	r6, r0
 8006760:	460f      	mov	r7, r1
 8006762:	dd6c      	ble.n	800683e <__kernel_rem_pio2+0x246>
 8006764:	f108 31ff 	add.w	r1, r8, #4294967295
 8006768:	ab0c      	add	r3, sp, #48	@ 0x30
 800676a:	9d02      	ldr	r5, [sp, #8]
 800676c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006770:	f1cb 0018 	rsb	r0, fp, #24
 8006774:	fa43 f200 	asr.w	r2, r3, r0
 8006778:	4415      	add	r5, r2
 800677a:	4082      	lsls	r2, r0
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006780:	9502      	str	r5, [sp, #8]
 8006782:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006786:	f1cb 0217 	rsb	r2, fp, #23
 800678a:	fa43 f902 	asr.w	r9, r3, r2
 800678e:	f1b9 0f00 	cmp.w	r9, #0
 8006792:	dd64      	ble.n	800685e <__kernel_rem_pio2+0x266>
 8006794:	9b02      	ldr	r3, [sp, #8]
 8006796:	2200      	movs	r2, #0
 8006798:	3301      	adds	r3, #1
 800679a:	9302      	str	r3, [sp, #8]
 800679c:	4615      	mov	r5, r2
 800679e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80067a2:	4590      	cmp	r8, r2
 80067a4:	f300 80a1 	bgt.w	80068ea <__kernel_rem_pio2+0x2f2>
 80067a8:	f1bb 0f00 	cmp.w	fp, #0
 80067ac:	dd07      	ble.n	80067be <__kernel_rem_pio2+0x1c6>
 80067ae:	f1bb 0f01 	cmp.w	fp, #1
 80067b2:	f000 80c1 	beq.w	8006938 <__kernel_rem_pio2+0x340>
 80067b6:	f1bb 0f02 	cmp.w	fp, #2
 80067ba:	f000 80c8 	beq.w	800694e <__kernel_rem_pio2+0x356>
 80067be:	f1b9 0f02 	cmp.w	r9, #2
 80067c2:	d14c      	bne.n	800685e <__kernel_rem_pio2+0x266>
 80067c4:	4632      	mov	r2, r6
 80067c6:	463b      	mov	r3, r7
 80067c8:	4955      	ldr	r1, [pc, #340]	@ (8006920 <__kernel_rem_pio2+0x328>)
 80067ca:	2000      	movs	r0, #0
 80067cc:	f7f9 fd28 	bl	8000220 <__aeabi_dsub>
 80067d0:	4606      	mov	r6, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	2d00      	cmp	r5, #0
 80067d6:	d042      	beq.n	800685e <__kernel_rem_pio2+0x266>
 80067d8:	4658      	mov	r0, fp
 80067da:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8006910 <__kernel_rem_pio2+0x318>
 80067de:	f000 fa5b 	bl	8006c98 <scalbn>
 80067e2:	4630      	mov	r0, r6
 80067e4:	4639      	mov	r1, r7
 80067e6:	ec53 2b10 	vmov	r2, r3, d0
 80067ea:	f7f9 fd19 	bl	8000220 <__aeabi_dsub>
 80067ee:	4606      	mov	r6, r0
 80067f0:	460f      	mov	r7, r1
 80067f2:	e034      	b.n	800685e <__kernel_rem_pio2+0x266>
 80067f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006924 <__kernel_rem_pio2+0x32c>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067fc:	f7f9 fec8 	bl	8000590 <__aeabi_dmul>
 8006800:	f7fa f960 	bl	8000ac4 <__aeabi_d2iz>
 8006804:	f7f9 fe5a 	bl	80004bc <__aeabi_i2d>
 8006808:	4b47      	ldr	r3, [pc, #284]	@ (8006928 <__kernel_rem_pio2+0x330>)
 800680a:	2200      	movs	r2, #0
 800680c:	4606      	mov	r6, r0
 800680e:	460f      	mov	r7, r1
 8006810:	f7f9 febe 	bl	8000590 <__aeabi_dmul>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800681c:	f7f9 fd00 	bl	8000220 <__aeabi_dsub>
 8006820:	f7fa f950 	bl	8000ac4 <__aeabi_d2iz>
 8006824:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006828:	f849 0b04 	str.w	r0, [r9], #4
 800682c:	4639      	mov	r1, r7
 800682e:	4630      	mov	r0, r6
 8006830:	f7f9 fcf8 	bl	8000224 <__adddf3>
 8006834:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800683c:	e75f      	b.n	80066fe <__kernel_rem_pio2+0x106>
 800683e:	d107      	bne.n	8006850 <__kernel_rem_pio2+0x258>
 8006840:	f108 33ff 	add.w	r3, r8, #4294967295
 8006844:	aa0c      	add	r2, sp, #48	@ 0x30
 8006846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800684a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800684e:	e79e      	b.n	800678e <__kernel_rem_pio2+0x196>
 8006850:	4b36      	ldr	r3, [pc, #216]	@ (800692c <__kernel_rem_pio2+0x334>)
 8006852:	2200      	movs	r2, #0
 8006854:	f7fa f922 	bl	8000a9c <__aeabi_dcmpge>
 8006858:	2800      	cmp	r0, #0
 800685a:	d143      	bne.n	80068e4 <__kernel_rem_pio2+0x2ec>
 800685c:	4681      	mov	r9, r0
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7fa f8fb 	bl	8000a60 <__aeabi_dcmpeq>
 800686a:	2800      	cmp	r0, #0
 800686c:	f000 80c1 	beq.w	80069f2 <__kernel_rem_pio2+0x3fa>
 8006870:	f108 33ff 	add.w	r3, r8, #4294967295
 8006874:	2200      	movs	r2, #0
 8006876:	9900      	ldr	r1, [sp, #0]
 8006878:	428b      	cmp	r3, r1
 800687a:	da70      	bge.n	800695e <__kernel_rem_pio2+0x366>
 800687c:	2a00      	cmp	r2, #0
 800687e:	f000 808b 	beq.w	8006998 <__kernel_rem_pio2+0x3a0>
 8006882:	f108 38ff 	add.w	r8, r8, #4294967295
 8006886:	ab0c      	add	r3, sp, #48	@ 0x30
 8006888:	f1ab 0b18 	sub.w	fp, fp, #24
 800688c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0f6      	beq.n	8006882 <__kernel_rem_pio2+0x28a>
 8006894:	4658      	mov	r0, fp
 8006896:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8006910 <__kernel_rem_pio2+0x318>
 800689a:	f000 f9fd 	bl	8006c98 <scalbn>
 800689e:	f108 0301 	add.w	r3, r8, #1
 80068a2:	00da      	lsls	r2, r3, #3
 80068a4:	9205      	str	r2, [sp, #20]
 80068a6:	ec55 4b10 	vmov	r4, r5, d0
 80068aa:	aa70      	add	r2, sp, #448	@ 0x1c0
 80068ac:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8006924 <__kernel_rem_pio2+0x32c>
 80068b0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80068b4:	4646      	mov	r6, r8
 80068b6:	f04f 0a00 	mov.w	sl, #0
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	f280 80d1 	bge.w	8006a62 <__kernel_rem_pio2+0x46a>
 80068c0:	4644      	mov	r4, r8
 80068c2:	2c00      	cmp	r4, #0
 80068c4:	f2c0 80ff 	blt.w	8006ac6 <__kernel_rem_pio2+0x4ce>
 80068c8:	4b19      	ldr	r3, [pc, #100]	@ (8006930 <__kernel_rem_pio2+0x338>)
 80068ca:	461f      	mov	r7, r3
 80068cc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80068ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068d2:	9306      	str	r3, [sp, #24]
 80068d4:	f04f 0a00 	mov.w	sl, #0
 80068d8:	f04f 0b00 	mov.w	fp, #0
 80068dc:	2600      	movs	r6, #0
 80068de:	eba8 0504 	sub.w	r5, r8, r4
 80068e2:	e0e4      	b.n	8006aae <__kernel_rem_pio2+0x4b6>
 80068e4:	f04f 0902 	mov.w	r9, #2
 80068e8:	e754      	b.n	8006794 <__kernel_rem_pio2+0x19c>
 80068ea:	f854 3b04 	ldr.w	r3, [r4], #4
 80068ee:	bb0d      	cbnz	r5, 8006934 <__kernel_rem_pio2+0x33c>
 80068f0:	b123      	cbz	r3, 80068fc <__kernel_rem_pio2+0x304>
 80068f2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80068f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80068fa:	2301      	movs	r3, #1
 80068fc:	3201      	adds	r2, #1
 80068fe:	461d      	mov	r5, r3
 8006900:	e74f      	b.n	80067a2 <__kernel_rem_pio2+0x1aa>
 8006902:	bf00      	nop
 8006904:	f3af 8000 	nop.w
	...
 8006914:	3ff00000 	.word	0x3ff00000
 8006918:	080070a8 	.word	0x080070a8
 800691c:	40200000 	.word	0x40200000
 8006920:	3ff00000 	.word	0x3ff00000
 8006924:	3e700000 	.word	0x3e700000
 8006928:	41700000 	.word	0x41700000
 800692c:	3fe00000 	.word	0x3fe00000
 8006930:	08007068 	.word	0x08007068
 8006934:	1acb      	subs	r3, r1, r3
 8006936:	e7de      	b.n	80068f6 <__kernel_rem_pio2+0x2fe>
 8006938:	f108 32ff 	add.w	r2, r8, #4294967295
 800693c:	ab0c      	add	r3, sp, #48	@ 0x30
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006946:	a90c      	add	r1, sp, #48	@ 0x30
 8006948:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800694c:	e737      	b.n	80067be <__kernel_rem_pio2+0x1c6>
 800694e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006952:	ab0c      	add	r3, sp, #48	@ 0x30
 8006954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006958:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800695c:	e7f3      	b.n	8006946 <__kernel_rem_pio2+0x34e>
 800695e:	a90c      	add	r1, sp, #48	@ 0x30
 8006960:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006964:	3b01      	subs	r3, #1
 8006966:	430a      	orrs	r2, r1
 8006968:	e785      	b.n	8006876 <__kernel_rem_pio2+0x27e>
 800696a:	3401      	adds	r4, #1
 800696c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006970:	2a00      	cmp	r2, #0
 8006972:	d0fa      	beq.n	800696a <__kernel_rem_pio2+0x372>
 8006974:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006976:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800697a:	eb0d 0503 	add.w	r5, sp, r3
 800697e:	9b06      	ldr	r3, [sp, #24]
 8006980:	aa20      	add	r2, sp, #128	@ 0x80
 8006982:	4443      	add	r3, r8
 8006984:	f108 0701 	add.w	r7, r8, #1
 8006988:	3d98      	subs	r5, #152	@ 0x98
 800698a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800698e:	4444      	add	r4, r8
 8006990:	42bc      	cmp	r4, r7
 8006992:	da04      	bge.n	800699e <__kernel_rem_pio2+0x3a6>
 8006994:	46a0      	mov	r8, r4
 8006996:	e6a2      	b.n	80066de <__kernel_rem_pio2+0xe6>
 8006998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800699a:	2401      	movs	r4, #1
 800699c:	e7e6      	b.n	800696c <__kernel_rem_pio2+0x374>
 800699e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80069a4:	f7f9 fd8a 	bl	80004bc <__aeabi_i2d>
 80069a8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8006c68 <__kernel_rem_pio2+0x670>
 80069ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 80069b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069b8:	46b2      	mov	sl, r6
 80069ba:	f04f 0800 	mov.w	r8, #0
 80069be:	9b05      	ldr	r3, [sp, #20]
 80069c0:	4598      	cmp	r8, r3
 80069c2:	dd05      	ble.n	80069d0 <__kernel_rem_pio2+0x3d8>
 80069c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069c8:	3701      	adds	r7, #1
 80069ca:	eca5 7b02 	vstmia	r5!, {d7}
 80069ce:	e7df      	b.n	8006990 <__kernel_rem_pio2+0x398>
 80069d0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80069d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80069d8:	f7f9 fdda 	bl	8000590 <__aeabi_dmul>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e4:	f7f9 fc1e 	bl	8000224 <__adddf3>
 80069e8:	f108 0801 	add.w	r8, r8, #1
 80069ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f0:	e7e5      	b.n	80069be <__kernel_rem_pio2+0x3c6>
 80069f2:	f1cb 0000 	rsb	r0, fp, #0
 80069f6:	ec47 6b10 	vmov	d0, r6, r7
 80069fa:	f000 f94d 	bl	8006c98 <scalbn>
 80069fe:	ec55 4b10 	vmov	r4, r5, d0
 8006a02:	4b9b      	ldr	r3, [pc, #620]	@ (8006c70 <__kernel_rem_pio2+0x678>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7fa f847 	bl	8000a9c <__aeabi_dcmpge>
 8006a0e:	b300      	cbz	r0, 8006a52 <__kernel_rem_pio2+0x45a>
 8006a10:	4b98      	ldr	r3, [pc, #608]	@ (8006c74 <__kernel_rem_pio2+0x67c>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	4620      	mov	r0, r4
 8006a16:	4629      	mov	r1, r5
 8006a18:	f7f9 fdba 	bl	8000590 <__aeabi_dmul>
 8006a1c:	f7fa f852 	bl	8000ac4 <__aeabi_d2iz>
 8006a20:	4606      	mov	r6, r0
 8006a22:	f7f9 fd4b 	bl	80004bc <__aeabi_i2d>
 8006a26:	4b92      	ldr	r3, [pc, #584]	@ (8006c70 <__kernel_rem_pio2+0x678>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f7f9 fdb1 	bl	8000590 <__aeabi_dmul>
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4602      	mov	r2, r0
 8006a32:	4629      	mov	r1, r5
 8006a34:	4620      	mov	r0, r4
 8006a36:	f7f9 fbf3 	bl	8000220 <__aeabi_dsub>
 8006a3a:	f7fa f843 	bl	8000ac4 <__aeabi_d2iz>
 8006a3e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a40:	f10b 0b18 	add.w	fp, fp, #24
 8006a44:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006a48:	f108 0801 	add.w	r8, r8, #1
 8006a4c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006a50:	e720      	b.n	8006894 <__kernel_rem_pio2+0x29c>
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7fa f835 	bl	8000ac4 <__aeabi_d2iz>
 8006a5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a5c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006a60:	e718      	b.n	8006894 <__kernel_rem_pio2+0x29c>
 8006a62:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006a68:	f7f9 fd28 	bl	80004bc <__aeabi_i2d>
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	462b      	mov	r3, r5
 8006a70:	f7f9 fd8e 	bl	8000590 <__aeabi_dmul>
 8006a74:	4652      	mov	r2, sl
 8006a76:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006a7a:	465b      	mov	r3, fp
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f7f9 fd86 	bl	8000590 <__aeabi_dmul>
 8006a84:	3e01      	subs	r6, #1
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	e716      	b.n	80068ba <__kernel_rem_pio2+0x2c2>
 8006a8c:	9906      	ldr	r1, [sp, #24]
 8006a8e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006a92:	9106      	str	r1, [sp, #24]
 8006a94:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006a98:	f7f9 fd7a 	bl	8000590 <__aeabi_dmul>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4650      	mov	r0, sl
 8006aa2:	4659      	mov	r1, fp
 8006aa4:	f7f9 fbbe 	bl	8000224 <__adddf3>
 8006aa8:	3601      	adds	r6, #1
 8006aaa:	4682      	mov	sl, r0
 8006aac:	468b      	mov	fp, r1
 8006aae:	9b00      	ldr	r3, [sp, #0]
 8006ab0:	429e      	cmp	r6, r3
 8006ab2:	dc01      	bgt.n	8006ab8 <__kernel_rem_pio2+0x4c0>
 8006ab4:	42ae      	cmp	r6, r5
 8006ab6:	dde9      	ble.n	8006a8c <__kernel_rem_pio2+0x494>
 8006ab8:	ab48      	add	r3, sp, #288	@ 0x120
 8006aba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006abe:	e9c5 ab00 	strd	sl, fp, [r5]
 8006ac2:	3c01      	subs	r4, #1
 8006ac4:	e6fd      	b.n	80068c2 <__kernel_rem_pio2+0x2ca>
 8006ac6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	dc0b      	bgt.n	8006ae4 <__kernel_rem_pio2+0x4ec>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dc35      	bgt.n	8006b3c <__kernel_rem_pio2+0x544>
 8006ad0:	d059      	beq.n	8006b86 <__kernel_rem_pio2+0x58e>
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	f003 0007 	and.w	r0, r3, #7
 8006ad8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006adc:	ecbd 8b02 	vpop	{d8}
 8006ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d1f3      	bne.n	8006ad2 <__kernel_rem_pio2+0x4da>
 8006aea:	9b05      	ldr	r3, [sp, #20]
 8006aec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006af0:	eb0d 0403 	add.w	r4, sp, r3
 8006af4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006af8:	4625      	mov	r5, r4
 8006afa:	46c2      	mov	sl, r8
 8006afc:	f1ba 0f00 	cmp.w	sl, #0
 8006b00:	dc69      	bgt.n	8006bd6 <__kernel_rem_pio2+0x5de>
 8006b02:	4645      	mov	r5, r8
 8006b04:	2d01      	cmp	r5, #1
 8006b06:	f300 8087 	bgt.w	8006c18 <__kernel_rem_pio2+0x620>
 8006b0a:	9c05      	ldr	r4, [sp, #20]
 8006b0c:	ab48      	add	r3, sp, #288	@ 0x120
 8006b0e:	441c      	add	r4, r3
 8006b10:	2000      	movs	r0, #0
 8006b12:	2100      	movs	r1, #0
 8006b14:	f1b8 0f01 	cmp.w	r8, #1
 8006b18:	f300 809c 	bgt.w	8006c54 <__kernel_rem_pio2+0x65c>
 8006b1c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8006b20:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8006b24:	f1b9 0f00 	cmp.w	r9, #0
 8006b28:	f040 80a6 	bne.w	8006c78 <__kernel_rem_pio2+0x680>
 8006b2c:	9b04      	ldr	r3, [sp, #16]
 8006b2e:	e9c3 5600 	strd	r5, r6, [r3]
 8006b32:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006b36:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006b3a:	e7ca      	b.n	8006ad2 <__kernel_rem_pio2+0x4da>
 8006b3c:	9d05      	ldr	r5, [sp, #20]
 8006b3e:	ab48      	add	r3, sp, #288	@ 0x120
 8006b40:	441d      	add	r5, r3
 8006b42:	4644      	mov	r4, r8
 8006b44:	2000      	movs	r0, #0
 8006b46:	2100      	movs	r1, #0
 8006b48:	2c00      	cmp	r4, #0
 8006b4a:	da35      	bge.n	8006bb8 <__kernel_rem_pio2+0x5c0>
 8006b4c:	f1b9 0f00 	cmp.w	r9, #0
 8006b50:	d038      	beq.n	8006bc4 <__kernel_rem_pio2+0x5cc>
 8006b52:	4602      	mov	r2, r0
 8006b54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b58:	9c04      	ldr	r4, [sp, #16]
 8006b5a:	e9c4 2300 	strd	r2, r3, [r4]
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006b66:	f7f9 fb5b 	bl	8000220 <__aeabi_dsub>
 8006b6a:	ad4a      	add	r5, sp, #296	@ 0x128
 8006b6c:	2401      	movs	r4, #1
 8006b6e:	45a0      	cmp	r8, r4
 8006b70:	da2b      	bge.n	8006bca <__kernel_rem_pio2+0x5d2>
 8006b72:	f1b9 0f00 	cmp.w	r9, #0
 8006b76:	d002      	beq.n	8006b7e <__kernel_rem_pio2+0x586>
 8006b78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006b84:	e7a5      	b.n	8006ad2 <__kernel_rem_pio2+0x4da>
 8006b86:	9c05      	ldr	r4, [sp, #20]
 8006b88:	ab48      	add	r3, sp, #288	@ 0x120
 8006b8a:	441c      	add	r4, r3
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	2100      	movs	r1, #0
 8006b90:	f1b8 0f00 	cmp.w	r8, #0
 8006b94:	da09      	bge.n	8006baa <__kernel_rem_pio2+0x5b2>
 8006b96:	f1b9 0f00 	cmp.w	r9, #0
 8006b9a:	d002      	beq.n	8006ba2 <__kernel_rem_pio2+0x5aa>
 8006b9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	9b04      	ldr	r3, [sp, #16]
 8006ba4:	e9c3 0100 	strd	r0, r1, [r3]
 8006ba8:	e793      	b.n	8006ad2 <__kernel_rem_pio2+0x4da>
 8006baa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006bae:	f7f9 fb39 	bl	8000224 <__adddf3>
 8006bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bb6:	e7eb      	b.n	8006b90 <__kernel_rem_pio2+0x598>
 8006bb8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006bbc:	f7f9 fb32 	bl	8000224 <__adddf3>
 8006bc0:	3c01      	subs	r4, #1
 8006bc2:	e7c1      	b.n	8006b48 <__kernel_rem_pio2+0x550>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	e7c6      	b.n	8006b58 <__kernel_rem_pio2+0x560>
 8006bca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006bce:	f7f9 fb29 	bl	8000224 <__adddf3>
 8006bd2:	3401      	adds	r4, #1
 8006bd4:	e7cb      	b.n	8006b6e <__kernel_rem_pio2+0x576>
 8006bd6:	ed35 7b02 	vldmdb	r5!, {d7}
 8006bda:	ed8d 7b00 	vstr	d7, [sp]
 8006bde:	ed95 7b02 	vldr	d7, [r5, #8]
 8006be2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006be6:	ec53 2b17 	vmov	r2, r3, d7
 8006bea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006bee:	f7f9 fb19 	bl	8000224 <__adddf3>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bfe:	f7f9 fb0f 	bl	8000220 <__aeabi_dsub>
 8006c02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c06:	f7f9 fb0d 	bl	8000224 <__adddf3>
 8006c0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c0e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006c12:	e9c5 6700 	strd	r6, r7, [r5]
 8006c16:	e771      	b.n	8006afc <__kernel_rem_pio2+0x504>
 8006c18:	ed34 7b02 	vldmdb	r4!, {d7}
 8006c1c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006c20:	ec51 0b17 	vmov	r0, r1, d7
 8006c24:	4652      	mov	r2, sl
 8006c26:	465b      	mov	r3, fp
 8006c28:	ed8d 7b00 	vstr	d7, [sp]
 8006c2c:	f7f9 fafa 	bl	8000224 <__adddf3>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4606      	mov	r6, r0
 8006c36:	460f      	mov	r7, r1
 8006c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c3c:	f7f9 faf0 	bl	8000220 <__aeabi_dsub>
 8006c40:	4652      	mov	r2, sl
 8006c42:	465b      	mov	r3, fp
 8006c44:	f7f9 faee 	bl	8000224 <__adddf3>
 8006c48:	3d01      	subs	r5, #1
 8006c4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c4e:	e9c4 6700 	strd	r6, r7, [r4]
 8006c52:	e757      	b.n	8006b04 <__kernel_rem_pio2+0x50c>
 8006c54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c58:	f7f9 fae4 	bl	8000224 <__adddf3>
 8006c5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c60:	e758      	b.n	8006b14 <__kernel_rem_pio2+0x51c>
 8006c62:	bf00      	nop
 8006c64:	f3af 8000 	nop.w
	...
 8006c70:	41700000 	.word	0x41700000
 8006c74:	3e700000 	.word	0x3e700000
 8006c78:	9b04      	ldr	r3, [sp, #16]
 8006c7a:	9a04      	ldr	r2, [sp, #16]
 8006c7c:	601d      	str	r5, [r3, #0]
 8006c7e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8006c82:	605c      	str	r4, [r3, #4]
 8006c84:	609f      	str	r7, [r3, #8]
 8006c86:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8006c8a:	60d3      	str	r3, [r2, #12]
 8006c8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c90:	6110      	str	r0, [r2, #16]
 8006c92:	6153      	str	r3, [r2, #20]
 8006c94:	e71d      	b.n	8006ad2 <__kernel_rem_pio2+0x4da>
 8006c96:	bf00      	nop

08006c98 <scalbn>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	ec55 4b10 	vmov	r4, r5, d0
 8006c9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	b991      	cbnz	r1, 8006cce <scalbn+0x36>
 8006ca8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006cac:	4323      	orrs	r3, r4
 8006cae:	d03b      	beq.n	8006d28 <scalbn+0x90>
 8006cb0:	4b33      	ldr	r3, [pc, #204]	@ (8006d80 <scalbn+0xe8>)
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f7f9 fc6a 	bl	8000590 <__aeabi_dmul>
 8006cbc:	4b31      	ldr	r3, [pc, #196]	@ (8006d84 <scalbn+0xec>)
 8006cbe:	429e      	cmp	r6, r3
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	da0f      	bge.n	8006ce6 <scalbn+0x4e>
 8006cc6:	a326      	add	r3, pc, #152	@ (adr r3, 8006d60 <scalbn+0xc8>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	e01e      	b.n	8006d0c <scalbn+0x74>
 8006cce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006cd2:	4291      	cmp	r1, r2
 8006cd4:	d10b      	bne.n	8006cee <scalbn+0x56>
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 faa2 	bl	8000224 <__adddf3>
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	e020      	b.n	8006d28 <scalbn+0x90>
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006cec:	3936      	subs	r1, #54	@ 0x36
 8006cee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006cf2:	4296      	cmp	r6, r2
 8006cf4:	dd0d      	ble.n	8006d12 <scalbn+0x7a>
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	a11b      	add	r1, pc, #108	@ (adr r1, 8006d68 <scalbn+0xd0>)
 8006cfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cfe:	da02      	bge.n	8006d06 <scalbn+0x6e>
 8006d00:	a11b      	add	r1, pc, #108	@ (adr r1, 8006d70 <scalbn+0xd8>)
 8006d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d06:	a318      	add	r3, pc, #96	@ (adr r3, 8006d68 <scalbn+0xd0>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fc40 	bl	8000590 <__aeabi_dmul>
 8006d10:	e7e6      	b.n	8006ce0 <scalbn+0x48>
 8006d12:	1872      	adds	r2, r6, r1
 8006d14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006d18:	428a      	cmp	r2, r1
 8006d1a:	dcec      	bgt.n	8006cf6 <scalbn+0x5e>
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	dd06      	ble.n	8006d2e <scalbn+0x96>
 8006d20:	f36f 531e 	bfc	r3, #20, #11
 8006d24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d28:	ec45 4b10 	vmov	d0, r4, r5
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006d32:	da08      	bge.n	8006d46 <scalbn+0xae>
 8006d34:	2d00      	cmp	r5, #0
 8006d36:	a10a      	add	r1, pc, #40	@ (adr r1, 8006d60 <scalbn+0xc8>)
 8006d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d3c:	dac3      	bge.n	8006cc6 <scalbn+0x2e>
 8006d3e:	a10e      	add	r1, pc, #56	@ (adr r1, 8006d78 <scalbn+0xe0>)
 8006d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d44:	e7bf      	b.n	8006cc6 <scalbn+0x2e>
 8006d46:	3236      	adds	r2, #54	@ 0x36
 8006d48:	f36f 531e 	bfc	r3, #20, #11
 8006d4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d50:	4620      	mov	r0, r4
 8006d52:	4b0d      	ldr	r3, [pc, #52]	@ (8006d88 <scalbn+0xf0>)
 8006d54:	4629      	mov	r1, r5
 8006d56:	2200      	movs	r2, #0
 8006d58:	e7d8      	b.n	8006d0c <scalbn+0x74>
 8006d5a:	bf00      	nop
 8006d5c:	f3af 8000 	nop.w
 8006d60:	c2f8f359 	.word	0xc2f8f359
 8006d64:	01a56e1f 	.word	0x01a56e1f
 8006d68:	8800759c 	.word	0x8800759c
 8006d6c:	7e37e43c 	.word	0x7e37e43c
 8006d70:	8800759c 	.word	0x8800759c
 8006d74:	fe37e43c 	.word	0xfe37e43c
 8006d78:	c2f8f359 	.word	0xc2f8f359
 8006d7c:	81a56e1f 	.word	0x81a56e1f
 8006d80:	43500000 	.word	0x43500000
 8006d84:	ffff3cb0 	.word	0xffff3cb0
 8006d88:	3c900000 	.word	0x3c900000
 8006d8c:	00000000 	.word	0x00000000

08006d90 <floor>:
 8006d90:	ec51 0b10 	vmov	r0, r1, d0
 8006d94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006da0:	2e13      	cmp	r6, #19
 8006da2:	460c      	mov	r4, r1
 8006da4:	4605      	mov	r5, r0
 8006da6:	4680      	mov	r8, r0
 8006da8:	dc34      	bgt.n	8006e14 <floor+0x84>
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	da17      	bge.n	8006dde <floor+0x4e>
 8006dae:	a332      	add	r3, pc, #200	@ (adr r3, 8006e78 <floor+0xe8>)
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	f7f9 fa36 	bl	8000224 <__adddf3>
 8006db8:	2200      	movs	r2, #0
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f7f9 fe78 	bl	8000ab0 <__aeabi_dcmpgt>
 8006dc0:	b150      	cbz	r0, 8006dd8 <floor+0x48>
 8006dc2:	2c00      	cmp	r4, #0
 8006dc4:	da55      	bge.n	8006e72 <floor+0xe2>
 8006dc6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006dca:	432c      	orrs	r4, r5
 8006dcc:	2500      	movs	r5, #0
 8006dce:	42ac      	cmp	r4, r5
 8006dd0:	4c2b      	ldr	r4, [pc, #172]	@ (8006e80 <floor+0xf0>)
 8006dd2:	bf08      	it	eq
 8006dd4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4628      	mov	r0, r5
 8006ddc:	e023      	b.n	8006e26 <floor+0x96>
 8006dde:	4f29      	ldr	r7, [pc, #164]	@ (8006e84 <floor+0xf4>)
 8006de0:	4137      	asrs	r7, r6
 8006de2:	ea01 0307 	and.w	r3, r1, r7
 8006de6:	4303      	orrs	r3, r0
 8006de8:	d01d      	beq.n	8006e26 <floor+0x96>
 8006dea:	a323      	add	r3, pc, #140	@ (adr r3, 8006e78 <floor+0xe8>)
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 fa18 	bl	8000224 <__adddf3>
 8006df4:	2200      	movs	r2, #0
 8006df6:	2300      	movs	r3, #0
 8006df8:	f7f9 fe5a 	bl	8000ab0 <__aeabi_dcmpgt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d0eb      	beq.n	8006dd8 <floor+0x48>
 8006e00:	2c00      	cmp	r4, #0
 8006e02:	bfbe      	ittt	lt
 8006e04:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006e08:	4133      	asrlt	r3, r6
 8006e0a:	18e4      	addlt	r4, r4, r3
 8006e0c:	ea24 0407 	bic.w	r4, r4, r7
 8006e10:	2500      	movs	r5, #0
 8006e12:	e7e1      	b.n	8006dd8 <floor+0x48>
 8006e14:	2e33      	cmp	r6, #51	@ 0x33
 8006e16:	dd0a      	ble.n	8006e2e <floor+0x9e>
 8006e18:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006e1c:	d103      	bne.n	8006e26 <floor+0x96>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	f7f9 f9ff 	bl	8000224 <__adddf3>
 8006e26:	ec41 0b10 	vmov	d0, r0, r1
 8006e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006e32:	f04f 37ff 	mov.w	r7, #4294967295
 8006e36:	40df      	lsrs	r7, r3
 8006e38:	4207      	tst	r7, r0
 8006e3a:	d0f4      	beq.n	8006e26 <floor+0x96>
 8006e3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006e78 <floor+0xe8>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 f9ef 	bl	8000224 <__adddf3>
 8006e46:	2200      	movs	r2, #0
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f7f9 fe31 	bl	8000ab0 <__aeabi_dcmpgt>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d0c2      	beq.n	8006dd8 <floor+0x48>
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	da0a      	bge.n	8006e6c <floor+0xdc>
 8006e56:	2e14      	cmp	r6, #20
 8006e58:	d101      	bne.n	8006e5e <floor+0xce>
 8006e5a:	3401      	adds	r4, #1
 8006e5c:	e006      	b.n	8006e6c <floor+0xdc>
 8006e5e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006e62:	2301      	movs	r3, #1
 8006e64:	40b3      	lsls	r3, r6
 8006e66:	441d      	add	r5, r3
 8006e68:	4545      	cmp	r5, r8
 8006e6a:	d3f6      	bcc.n	8006e5a <floor+0xca>
 8006e6c:	ea25 0507 	bic.w	r5, r5, r7
 8006e70:	e7b2      	b.n	8006dd8 <floor+0x48>
 8006e72:	2500      	movs	r5, #0
 8006e74:	462c      	mov	r4, r5
 8006e76:	e7af      	b.n	8006dd8 <floor+0x48>
 8006e78:	8800759c 	.word	0x8800759c
 8006e7c:	7e37e43c 	.word	0x7e37e43c
 8006e80:	bff00000 	.word	0xbff00000
 8006e84:	000fffff 	.word	0x000fffff

08006e88 <_init>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr

08006e94 <_fini>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	bf00      	nop
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr
