
F103C8T6_LM35_Temperaturesensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08005c28  08005c28  00006c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fdc  08005fdc  00006fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe4  08005fe4  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe4  08005fe4  00006fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fe8  08005fe8  00006fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005fec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200001d4  080061c0  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  080061c0  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080b2  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001884  00000000  00000000  0000f2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00010b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000603  00000000  00000000  00011328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182b2  00000000  00000000  0001192b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a79  00000000  00000000  00029bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c5e  00000000  00000000  00033656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc2b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c0  00000000  00000000  000bc2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000bf3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c10 	.word	0x08005c10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005c10 	.word	0x08005c10

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f48:	f000 fb0c 	bl	8001564 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f4c:	f000 f856 	bl	8000ffc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f50:	f000 f90c 	bl	800116c <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f54:	f000 f8a2 	bl	800109c <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000f58:	f000 f8de 	bl	8001118 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc1);
 8000f5c:	481e      	ldr	r0, [pc, #120]	@ (8000fd8 <main+0x94>)
 8000f5e:	f000 fc5f 	bl	8001820 <HAL_ADC_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000f62:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <main+0x94>)
 8000f64:	f000 fd0a 	bl	800197c <HAL_ADC_GetValue>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <main+0x98>)
 8000f6e:	801a      	strh	r2, [r3, #0]

		// Convert ADC value to temperature (assuming 5V Vref)
		tempC = ((float) adc_value * 3.3f / 4095.0f) * 100.0f;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <main+0x98>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe3d 	bl	8000bf4 <__aeabi_ui2f>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4918      	ldr	r1, [pc, #96]	@ (8000fe0 <main+0x9c>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fe90 	bl	8000ca4 <__aeabi_fmul>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4917      	ldr	r1, [pc, #92]	@ (8000fe4 <main+0xa0>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff3f 	bl	8000e0c <__aeabi_fdiv>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4915      	ldr	r1, [pc, #84]	@ (8000fe8 <main+0xa4>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fe86 	bl	8000ca4 <__aeabi_fmul>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <main+0xa8>)
 8000f9e:	601a      	str	r2, [r3, #0]

		// Format and send temperature string
		sprintf(uart_buf, "Temperature: %.2f°C\r\n", tempC);
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <main+0xa8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa3f 	bl	8000428 <__aeabi_f2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4910      	ldr	r1, [pc, #64]	@ (8000ff0 <main+0xac>)
 8000fb0:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <main+0xb0>)
 8000fb2:	f002 fcf1 	bl	8003998 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) uart_buf, strlen(uart_buf),
 8000fb6:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <main+0xb0>)
 8000fb8:	f7ff f8ca 	bl	8000150 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	490b      	ldr	r1, [pc, #44]	@ (8000ff4 <main+0xb0>)
 8000fc6:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <main+0xb4>)
 8000fc8:	f001 fdf6 	bl	8002bb8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		HAL_Delay(1000);
 8000fcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fd0:	f000 fb2a 	bl	8001628 <HAL_Delay>
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000fd4:	bf00      	nop
 8000fd6:	e7c4      	b.n	8000f62 <main+0x1e>
 8000fd8:	200001f0 	.word	0x200001f0
 8000fdc:	2000029a 	.word	0x2000029a
 8000fe0:	40533333 	.word	0x40533333
 8000fe4:	457ff000 	.word	0x457ff000
 8000fe8:	42c80000 	.word	0x42c80000
 8000fec:	2000029c 	.word	0x2000029c
 8000ff0:	08005c28 	.word	0x08005c28
 8000ff4:	20000268 	.word	0x20000268
 8000ff8:	20000220 	.word	0x20000220

08000ffc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	@ 0x50
 8001000:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001002:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001006:	2228      	movs	r2, #40	@ 0x28
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fd29 	bl	8003a62 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001034:	2310      	movs	r3, #16
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800103c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001040:	4618      	mov	r0, r3
 8001042:	f001 f8a3 	bl	800218c <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x54>
		Error_Handler();
 800104c:	f000 f8b0 	bl	80011b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fb10 	bl	8002690 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x7e>
		Error_Handler();
 8001076:	f000 f89b 	bl	80011b0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800107a:	2302      	movs	r3, #2
 800107c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fc91 	bl	80029ac <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x98>
		Error_Handler();
 8001090:	f000 f88e 	bl	80011b0 <Error_Handler>
	}
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	@ 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80010ac:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <MX_ADC1_Init+0x74>)
 80010ae:	4a19      	ldr	r2, [pc, #100]	@ (8001114 <MX_ADC1_Init+0x78>)
 80010b0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <MX_ADC1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <MX_ADC1_Init+0x74>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_ADC1_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_ADC1_Init+0x74>)
 80010c6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010ca:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <MX_ADC1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_ADC1_Init+0x74>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <MX_ADC1_Init+0x74>)
 80010da:	f000 fac9 	bl	8001670 <HAL_ADC_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80010e4:	f000 f864 	bl	80011b0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 80010e8:	2307      	movs	r3, #7
 80010ea:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010f0:	2307      	movs	r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_ADC1_Init+0x74>)
 80010fa:	f000 fc4b 	bl	8001994 <HAL_ADC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001104:	f000 f854 	bl	80011b0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200001f0 	.word	0x200001f0
 8001114:	40012400 	.word	0x40012400

08001118 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_USART1_UART_Init+0x4c>)
 800111e:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <MX_USART1_UART_Init+0x50>)
 8001120:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <MX_USART1_UART_Init+0x4c>)
 8001124:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001128:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_USART1_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_USART1_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_USART1_UART_Init+0x4c>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_USART1_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_USART1_UART_Init+0x4c>)
 8001150:	f001 fce2 	bl	8002b18 <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800115a:	f000 f829 	bl	80011b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000220 	.word	0x20000220
 8001168:	40013800 	.word	0x40013800

0800116c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_GPIO_Init+0x40>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <MX_GPIO_Init+0x40>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <MX_GPIO_Init+0x40>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_GPIO_Init+0x40>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <MX_GPIO_Init+0x40>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <MX_GPIO_Init+0x40>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000

080011b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <Error_Handler+0x8>

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <HAL_MspInit+0x5c>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6193      	str	r3, [r2, #24]
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_MspInit+0x5c>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_MspInit+0x5c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <HAL_MspInit+0x5c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_MspInit+0x5c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_MspInit+0x60>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_MspInit+0x60>)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000

08001220 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a14      	ldr	r2, [pc, #80]	@ (800128c <HAL_ADC_MspInit+0x6c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d121      	bne.n	8001284 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <HAL_ADC_MspInit+0x70>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <HAL_ADC_MspInit+0x70>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <HAL_ADC_MspInit+0x70>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <HAL_ADC_MspInit+0x70>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a0c      	ldr	r2, [pc, #48]	@ (8001290 <HAL_ADC_MspInit+0x70>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <HAL_ADC_MspInit+0x70>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001274:	2303      	movs	r3, #3
 8001276:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <HAL_ADC_MspInit+0x74>)
 8001280:	f000 fe00 	bl	8001e84 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40012400 	.word	0x40012400
 8001290:	40021000 	.word	0x40021000
 8001294:	40010800 	.word	0x40010800

08001298 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001324 <HAL_UART_MspInit+0x8c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d131      	bne.n	800131c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_UART_MspInit+0x90>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <HAL_UART_MspInit+0x90>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <HAL_UART_MspInit+0x90>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_UART_MspInit+0x90>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a14      	ldr	r2, [pc, #80]	@ (8001328 <HAL_UART_MspInit+0x90>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_UART_MspInit+0x90>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	480b      	ldr	r0, [pc, #44]	@ (800132c <HAL_UART_MspInit+0x94>)
 80012fe:	f000 fdc1 	bl	8001e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	4805      	ldr	r0, [pc, #20]	@ (800132c <HAL_UART_MspInit+0x94>)
 8001318:	f000 fdb4 	bl	8001e84 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40013800 	.word	0x40013800
 8001328:	40021000 	.word	0x40021000
 800132c:	40010800 	.word	0x40010800

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <NMI_Handler+0x4>

08001338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <MemManage_Handler+0x4>

08001348 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <UsageFault_Handler+0x4>

08001358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f000 f936 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return 1;
 800138c:	2301      	movs	r3, #1
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <_kill>:

int _kill(int pid, int sig)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013a0:	f002 fbb2 	bl	8003b08 <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2216      	movs	r2, #22
 80013a8:	601a      	str	r2, [r3, #0]
  return -1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <_exit>:

void _exit (int status)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013be:	f04f 31ff 	mov.w	r1, #4294967295
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffe7 	bl	8001396 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <_exit+0x12>

080013cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e00a      	b.n	80013f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013de:	f3af 8000 	nop.w
 80013e2:	4601      	mov	r1, r0
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	60ba      	str	r2, [r7, #8]
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf0      	blt.n	80013de <_read+0x12>
  }

  return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e009      	b.n	800142c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	60ba      	str	r2, [r7, #8]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf1      	blt.n	8001418 <_write+0x12>
  }
  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_close>:

int _close(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001464:	605a      	str	r2, [r3, #4]
  return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <_isatty>:

int _isatty(int file)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
	...

080014a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a14      	ldr	r2, [pc, #80]	@ (80014fc <_sbrk+0x5c>)
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <_sbrk+0x60>)
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b4:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <_sbrk+0x64>)
 80014be:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <_sbrk+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d207      	bcs.n	80014e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d0:	f002 fb1a 	bl	8003b08 <__errno>
 80014d4:	4603      	mov	r3, r0
 80014d6:	220c      	movs	r2, #12
 80014d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e009      	b.n	80014f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e6:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <_sbrk+0x64>)
 80014f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20005000 	.word	0x20005000
 8001500:	00000400 	.word	0x00000400
 8001504:	200002a0 	.word	0x200002a0
 8001508:	200003f8 	.word	0x200003f8

0800150c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001518:	f7ff fff8 	bl	800150c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800151c:	480b      	ldr	r0, [pc, #44]	@ (800154c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800151e:	490c      	ldr	r1, [pc, #48]	@ (8001550 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001520:	4a0c      	ldr	r2, [pc, #48]	@ (8001554 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a09      	ldr	r2, [pc, #36]	@ (8001558 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001534:	4c09      	ldr	r4, [pc, #36]	@ (800155c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001542:	f002 fae7 	bl	8003b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001546:	f7ff fcfd 	bl	8000f44 <main>
  bx lr
 800154a:	4770      	bx	lr
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001554:	08005fec 	.word	0x08005fec
  ldr r2, =_sbss
 8001558:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800155c:	200003f4 	.word	0x200003f4

08001560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC1_2_IRQHandler>
	...

08001564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <HAL_Init+0x28>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	@ (800158c <HAL_Init+0x28>)
 800156e:	f043 0310 	orr.w	r3, r3, #16
 8001572:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 fc51 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	200f      	movs	r0, #15
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff fe1c 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fc5b 	bl	8001e6a <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 fc31 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_IncTick+0x1c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_IncTick+0x20>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a03      	ldr	r2, [pc, #12]	@ (8001610 <HAL_IncTick+0x20>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	20000008 	.word	0x20000008
 8001610:	200002a4 	.word	0x200002a4

08001614 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b02      	ldr	r3, [pc, #8]	@ (8001624 <HAL_GetTick+0x10>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	200002a4 	.word	0x200002a4

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff fff0 	bl	8001614 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffe0 	bl	8001614 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008

08001670 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0be      	b.n	8001810 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	2b00      	cmp	r3, #0
 800169e:	d109      	bne.n	80016b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fdb6 	bl	8001220 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fabf 	bl	8001c38 <ADC_ConversionStop_Disable>
 80016ba:	4603      	mov	r3, r0
 80016bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 8099 	bne.w	80017fe <HAL_ADC_Init+0x18e>
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 8095 	bne.w	80017fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016dc:	f023 0302 	bic.w	r3, r3, #2
 80016e0:	f043 0202 	orr.w	r2, r3, #2
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7b1b      	ldrb	r3, [r3, #12]
 80016f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001708:	d003      	beq.n	8001712 <HAL_ADC_Init+0xa2>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d102      	bne.n	8001718 <HAL_ADC_Init+0xa8>
 8001712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001716:	e000      	b.n	800171a <HAL_ADC_Init+0xaa>
 8001718:	2300      	movs	r3, #0
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7d1b      	ldrb	r3, [r3, #20]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d119      	bne.n	800175c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7b1b      	ldrb	r3, [r3, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d109      	bne.n	8001744 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	3b01      	subs	r3, #1
 8001736:	035a      	lsls	r2, r3, #13
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e00b      	b.n	800175c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	f043 0220 	orr.w	r2, r3, #32
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <HAL_ADC_Init+0x1a8>)
 8001778:	4013      	ands	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	68b9      	ldr	r1, [r7, #8]
 8001780:	430b      	orrs	r3, r1
 8001782:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800178c:	d003      	beq.n	8001796 <HAL_ADC_Init+0x126>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d104      	bne.n	80017a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	3b01      	subs	r3, #1
 800179c:	051b      	lsls	r3, r3, #20
 800179e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_ADC_Init+0x1ac>)
 80017bc:	4013      	ands	r3, r2
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d10b      	bne.n	80017dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017da:	e018      	b.n	800180e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e0:	f023 0312 	bic.w	r3, r3, #18
 80017e4:	f043 0210 	orr.w	r2, r3, #16
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017fc:	e007      	b.n	800180e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001802:	f043 0210 	orr.w	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800180e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	ffe1f7fd 	.word	0xffe1f7fd
 800181c:	ff1f0efe 	.word	0xff1f0efe

08001820 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_ADC_Start+0x1a>
 8001836:	2302      	movs	r3, #2
 8001838:	e098      	b.n	800196c <HAL_ADC_Start+0x14c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f99e 	bl	8001b84 <ADC_Enable>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 8087 	bne.w	8001962 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a41      	ldr	r2, [pc, #260]	@ (8001974 <HAL_ADC_Start+0x154>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d105      	bne.n	800187e <HAL_ADC_Start+0x5e>
 8001872:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <HAL_ADC_Start+0x158>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d026      	beq.n	80018e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a8:	e01d      	b.n	80018e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001978 <HAL_ADC_Start+0x158>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d004      	beq.n	80018ca <HAL_ADC_Start+0xaa>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001974 <HAL_ADC_Start+0x154>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10d      	bne.n	80018e6 <HAL_ADC_Start+0xc6>
 80018ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <HAL_ADC_Start+0x158>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	f023 0206 	bic.w	r2, r3, #6
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018fe:	e002      	b.n	8001906 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f06f 0202 	mvn.w	r2, #2
 8001916:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001922:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001926:	d113      	bne.n	8001950 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800192c:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <HAL_ADC_Start+0x154>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d105      	bne.n	800193e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_ADC_Start+0x158>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800193a:	2b00      	cmp	r3, #0
 800193c:	d108      	bne.n	8001950 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	e00c      	b.n	800196a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	e003      	b.n	800196a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40012800 	.word	0x40012800
 8001978:	40012400 	.word	0x40012400

0800197c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x20>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e0dc      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x1da>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b06      	cmp	r3, #6
 80019c2:	d81c      	bhi.n	80019fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	3b05      	subs	r3, #5
 80019d6:	221f      	movs	r2, #31
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	4019      	ands	r1, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	3b05      	subs	r3, #5
 80019f0:	fa00 f203 	lsl.w	r2, r0, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80019fc:	e03c      	b.n	8001a78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d81c      	bhi.n	8001a40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b23      	subs	r3, #35	@ 0x23
 8001a18:	221f      	movs	r2, #31
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	4019      	ands	r1, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b23      	subs	r3, #35	@ 0x23
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a3e:	e01b      	b.n	8001a78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b41      	subs	r3, #65	@ 0x41
 8001a52:	221f      	movs	r2, #31
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4019      	ands	r1, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b41      	subs	r3, #65	@ 0x41
 8001a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d91c      	bls.n	8001aba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68d9      	ldr	r1, [r3, #12]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b1e      	subs	r3, #30
 8001a92:	2207      	movs	r2, #7
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4019      	ands	r1, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6898      	ldr	r0, [r3, #8]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b1e      	subs	r3, #30
 8001aac:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	e019      	b.n	8001aee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6919      	ldr	r1, [r3, #16]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	2207      	movs	r2, #7
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4019      	ands	r1, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6898      	ldr	r0, [r3, #8]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d003      	beq.n	8001afe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001afa:	2b11      	cmp	r3, #17
 8001afc:	d132      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d125      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d126      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001b24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d11a      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b2e:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <HAL_ADC_ConfigChannel+0x1e8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	0c9a      	lsrs	r2, r3, #18
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f9      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x1b2>
 8001b52:	e007      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40012400 	.word	0x40012400
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	431bde83 	.word	0x431bde83

08001b84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d040      	beq.n	8001c24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0201 	orr.w	r2, r2, #1
 8001bb0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <ADC_Enable+0xac>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c34 <ADC_Enable+0xb0>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	0c9b      	lsrs	r3, r3, #18
 8001bbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bc0:	e002      	b.n	8001bc8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bce:	f7ff fd21 	bl	8001614 <HAL_GetTick>
 8001bd2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bd4:	e01f      	b.n	8001c16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bd6:	f7ff fd1d 	bl	8001614 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d918      	bls.n	8001c16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d011      	beq.n	8001c16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf6:	f043 0210 	orr.w	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e007      	b.n	8001c26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d1d8      	bne.n	8001bd6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000000 	.word	0x20000000
 8001c34:	431bde83 	.word	0x431bde83

08001c38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d12e      	bne.n	8001cb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c62:	f7ff fcd7 	bl	8001614 <HAL_GetTick>
 8001c66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c68:	e01b      	b.n	8001ca2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c6a:	f7ff fcd3 	bl	8001614 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d914      	bls.n	8001ca2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10d      	bne.n	8001ca2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8a:	f043 0210 	orr.w	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e007      	b.n	8001cb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d0dc      	beq.n	8001c6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	@ (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	@ (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	@ 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	@ 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff90 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff49 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff5e 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff90 	bl	8001d74 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5f 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffb0 	bl	8001dd8 <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b08b      	sub	sp, #44	@ 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e169      	b.n	800216c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8158 	bne.w	8002166 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4a9a      	ldr	r2, [pc, #616]	@ (8002124 <HAL_GPIO_Init+0x2a0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d05e      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ec0:	4a98      	ldr	r2, [pc, #608]	@ (8002124 <HAL_GPIO_Init+0x2a0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d875      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ec6:	4a98      	ldr	r2, [pc, #608]	@ (8002128 <HAL_GPIO_Init+0x2a4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d058      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ecc:	4a96      	ldr	r2, [pc, #600]	@ (8002128 <HAL_GPIO_Init+0x2a4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d86f      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ed2:	4a96      	ldr	r2, [pc, #600]	@ (800212c <HAL_GPIO_Init+0x2a8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d052      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ed8:	4a94      	ldr	r2, [pc, #592]	@ (800212c <HAL_GPIO_Init+0x2a8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d869      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ede:	4a94      	ldr	r2, [pc, #592]	@ (8002130 <HAL_GPIO_Init+0x2ac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04c      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ee4:	4a92      	ldr	r2, [pc, #584]	@ (8002130 <HAL_GPIO_Init+0x2ac>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d863      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001eea:	4a92      	ldr	r2, [pc, #584]	@ (8002134 <HAL_GPIO_Init+0x2b0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d046      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ef0:	4a90      	ldr	r2, [pc, #576]	@ (8002134 <HAL_GPIO_Init+0x2b0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d85d      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d82a      	bhi.n	8001f50 <HAL_GPIO_Init+0xcc>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d859      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001efe:	a201      	add	r2, pc, #4	@ (adr r2, 8001f04 <HAL_GPIO_Init+0x80>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f7f 	.word	0x08001f7f
 8001f08:	08001f59 	.word	0x08001f59
 8001f0c:	08001f6b 	.word	0x08001f6b
 8001f10:	08001fad 	.word	0x08001fad
 8001f14:	08001fb3 	.word	0x08001fb3
 8001f18:	08001fb3 	.word	0x08001fb3
 8001f1c:	08001fb3 	.word	0x08001fb3
 8001f20:	08001fb3 	.word	0x08001fb3
 8001f24:	08001fb3 	.word	0x08001fb3
 8001f28:	08001fb3 	.word	0x08001fb3
 8001f2c:	08001fb3 	.word	0x08001fb3
 8001f30:	08001fb3 	.word	0x08001fb3
 8001f34:	08001fb3 	.word	0x08001fb3
 8001f38:	08001fb3 	.word	0x08001fb3
 8001f3c:	08001fb3 	.word	0x08001fb3
 8001f40:	08001fb3 	.word	0x08001fb3
 8001f44:	08001fb3 	.word	0x08001fb3
 8001f48:	08001f61 	.word	0x08001f61
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	4a79      	ldr	r2, [pc, #484]	@ (8002138 <HAL_GPIO_Init+0x2b4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f56:	e02c      	b.n	8001fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	623b      	str	r3, [r7, #32]
          break;
 8001f5e:	e029      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	3304      	adds	r3, #4
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e024      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	3308      	adds	r3, #8
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e01f      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e01a      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f86:	2304      	movs	r3, #4
 8001f88:	623b      	str	r3, [r7, #32]
          break;
 8001f8a:	e013      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f94:	2308      	movs	r3, #8
 8001f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	611a      	str	r2, [r3, #16]
          break;
 8001f9e:	e009      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	615a      	str	r2, [r3, #20]
          break;
 8001faa:	e003      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e000      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          break;
 8001fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2bff      	cmp	r3, #255	@ 0xff
 8001fb8:	d801      	bhi.n	8001fbe <HAL_GPIO_Init+0x13a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_Init+0x13e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	@ 0xff
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_GPIO_Init+0x14c>
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x152>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	3b08      	subs	r3, #8
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	210f      	movs	r1, #15
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	6a39      	ldr	r1, [r7, #32]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80b1 	beq.w	8002166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002004:	4b4d      	ldr	r3, [pc, #308]	@ (800213c <HAL_GPIO_Init+0x2b8>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a4c      	ldr	r2, [pc, #304]	@ (800213c <HAL_GPIO_Init+0x2b8>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b4a      	ldr	r3, [pc, #296]	@ (800213c <HAL_GPIO_Init+0x2b8>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800201c:	4a48      	ldr	r2, [pc, #288]	@ (8002140 <HAL_GPIO_Init+0x2bc>)
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a40      	ldr	r2, [pc, #256]	@ (8002144 <HAL_GPIO_Init+0x2c0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_GPIO_Init+0x1ec>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3f      	ldr	r2, [pc, #252]	@ (8002148 <HAL_GPIO_Init+0x2c4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_GPIO_Init+0x1e8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3e      	ldr	r2, [pc, #248]	@ (800214c <HAL_GPIO_Init+0x2c8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x1e4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3d      	ldr	r2, [pc, #244]	@ (8002150 <HAL_GPIO_Init+0x2cc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_Init+0x1e0>
 8002060:	2303      	movs	r3, #3
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002064:	2304      	movs	r3, #4
 8002066:	e004      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002068:	2302      	movs	r3, #2
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002070:	2300      	movs	r3, #0
 8002072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002082:	492f      	ldr	r1, [pc, #188]	@ (8002140 <HAL_GPIO_Init+0x2bc>)
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800209c:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	492c      	ldr	r1, [pc, #176]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4928      	ldr	r1, [pc, #160]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c4:	4b23      	ldr	r3, [pc, #140]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4922      	ldr	r1, [pc, #136]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60cb      	str	r3, [r1, #12]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	491e      	ldr	r1, [pc, #120]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4918      	ldr	r1, [pc, #96]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020fa:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	43db      	mvns	r3, r3
 8002102:	4914      	ldr	r1, [pc, #80]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 8002104:	4013      	ands	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d021      	beq.n	8002158 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002114:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	490e      	ldr	r1, [pc, #56]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e021      	b.n	8002166 <HAL_GPIO_Init+0x2e2>
 8002122:	bf00      	nop
 8002124:	10320000 	.word	0x10320000
 8002128:	10310000 	.word	0x10310000
 800212c:	10220000 	.word	0x10220000
 8002130:	10210000 	.word	0x10210000
 8002134:	10120000 	.word	0x10120000
 8002138:	10110000 	.word	0x10110000
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000
 8002144:	40010800 	.word	0x40010800
 8002148:	40010c00 	.word	0x40010c00
 800214c:	40011000 	.word	0x40011000
 8002150:	40011400 	.word	0x40011400
 8002154:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002158:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <HAL_GPIO_Init+0x304>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	43db      	mvns	r3, r3
 8002160:	4909      	ldr	r1, [pc, #36]	@ (8002188 <HAL_GPIO_Init+0x304>)
 8002162:	4013      	ands	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	3301      	adds	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f47f ae8e 	bne.w	8001e98 <HAL_GPIO_Init+0x14>
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	372c      	adds	r7, #44	@ 0x2c
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40010400 	.word	0x40010400

0800218c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e272      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8087 	beq.w	80022ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ac:	4b92      	ldr	r3, [pc, #584]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d00c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b8:	4b8f      	ldr	r3, [pc, #572]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d112      	bne.n	80021ea <HAL_RCC_OscConfig+0x5e>
 80021c4:	4b8c      	ldr	r3, [pc, #560]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d0:	d10b      	bne.n	80021ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d2:	4b89      	ldr	r3, [pc, #548]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d06c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x12c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d168      	bne.n	80022b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e24c      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x76>
 80021f4:	4b80      	ldr	r3, [pc, #512]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a7f      	ldr	r2, [pc, #508]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e02e      	b.n	8002260 <HAL_RCC_OscConfig+0xd4>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x98>
 800220a:	4b7b      	ldr	r3, [pc, #492]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7a      	ldr	r2, [pc, #488]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b78      	ldr	r3, [pc, #480]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a77      	ldr	r2, [pc, #476]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800221c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e01d      	b.n	8002260 <HAL_RCC_OscConfig+0xd4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0xbc>
 800222e:	4b72      	ldr	r3, [pc, #456]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a71      	ldr	r2, [pc, #452]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b6f      	ldr	r3, [pc, #444]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6e      	ldr	r2, [pc, #440]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0xd4>
 8002248:	4b6b      	ldr	r3, [pc, #428]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a6a      	ldr	r2, [pc, #424]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b68      	ldr	r3, [pc, #416]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a67      	ldr	r2, [pc, #412]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800225e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7ff f9d4 	bl	8001614 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7ff f9d0 	bl	8001614 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	@ 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e200      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b5d      	ldr	r3, [pc, #372]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0xe4>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff f9c0 	bl	8001614 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff f9bc 	bl	8001614 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	@ 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1ec      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x10c>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d063      	beq.n	800238e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c6:	4b4c      	ldr	r3, [pc, #304]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022d2:	4b49      	ldr	r3, [pc, #292]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d11c      	bne.n	8002318 <HAL_RCC_OscConfig+0x18c>
 80022de:	4b46      	ldr	r3, [pc, #280]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d116      	bne.n	8002318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	4b43      	ldr	r3, [pc, #268]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_RCC_OscConfig+0x176>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e1c0      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4939      	ldr	r1, [pc, #228]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	e03a      	b.n	800238e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002320:	4b36      	ldr	r3, [pc, #216]	@ (80023fc <HAL_RCC_OscConfig+0x270>)
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7ff f975 	bl	8001614 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232e:	f7ff f971 	bl	8001614 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1a1      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234c:	4b2a      	ldr	r3, [pc, #168]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4927      	ldr	r1, [pc, #156]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002362:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <HAL_RCC_OscConfig+0x270>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff f954 	bl	8001614 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002370:	f7ff f950 	bl	8001614 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e180      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d03a      	beq.n	8002410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d019      	beq.n	80023d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a2:	4b17      	ldr	r3, [pc, #92]	@ (8002400 <HAL_RCC_OscConfig+0x274>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7ff f934 	bl	8001614 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b0:	f7ff f930 	bl	8001614 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e160      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f000 face 	bl	8002970 <RCC_Delay>
 80023d4:	e01c      	b.n	8002410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_RCC_OscConfig+0x274>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7ff f91a 	bl	8001614 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e2:	e00f      	b.n	8002404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e4:	f7ff f916 	bl	8001614 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d908      	bls.n	8002404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e146      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	42420000 	.word	0x42420000
 8002400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	4b92      	ldr	r3, [pc, #584]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e9      	bne.n	80023e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a6 	beq.w	800256a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002422:	4b8b      	ldr	r3, [pc, #556]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	4b88      	ldr	r3, [pc, #544]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a87      	ldr	r2, [pc, #540]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	61d3      	str	r3, [r2, #28]
 800243a:	4b85      	ldr	r3, [pc, #532]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b82      	ldr	r3, [pc, #520]	@ (8002654 <HAL_RCC_OscConfig+0x4c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d118      	bne.n	8002488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002456:	4b7f      	ldr	r3, [pc, #508]	@ (8002654 <HAL_RCC_OscConfig+0x4c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7e      	ldr	r2, [pc, #504]	@ (8002654 <HAL_RCC_OscConfig+0x4c8>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002462:	f7ff f8d7 	bl	8001614 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246a:	f7ff f8d3 	bl	8001614 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b64      	cmp	r3, #100	@ 0x64
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e103      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	4b75      	ldr	r3, [pc, #468]	@ (8002654 <HAL_RCC_OscConfig+0x4c8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x312>
 8002490:	4b6f      	ldr	r3, [pc, #444]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a6e      	ldr	r2, [pc, #440]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	e02d      	b.n	80024fa <HAL_RCC_OscConfig+0x36e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x334>
 80024a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a69      	ldr	r2, [pc, #420]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6213      	str	r3, [r2, #32]
 80024b2:	4b67      	ldr	r3, [pc, #412]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a66      	ldr	r2, [pc, #408]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	e01c      	b.n	80024fa <HAL_RCC_OscConfig+0x36e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d10c      	bne.n	80024e2 <HAL_RCC_OscConfig+0x356>
 80024c8:	4b61      	ldr	r3, [pc, #388]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a60      	ldr	r2, [pc, #384]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	f043 0304 	orr.w	r3, r3, #4
 80024d2:	6213      	str	r3, [r2, #32]
 80024d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6213      	str	r3, [r2, #32]
 80024e0:	e00b      	b.n	80024fa <HAL_RCC_OscConfig+0x36e>
 80024e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	4b58      	ldr	r3, [pc, #352]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4a57      	ldr	r2, [pc, #348]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d015      	beq.n	800252e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002502:	f7ff f887 	bl	8001614 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7ff f883 	bl	8001614 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0b1      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	4b4b      	ldr	r3, [pc, #300]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ee      	beq.n	800250a <HAL_RCC_OscConfig+0x37e>
 800252c:	e014      	b.n	8002558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7ff f871 	bl	8001614 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7ff f86d 	bl	8001614 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e09b      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	4b40      	ldr	r3, [pc, #256]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ee      	bne.n	8002536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4b3c      	ldr	r3, [pc, #240]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a3b      	ldr	r2, [pc, #236]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8087 	beq.w	8002682 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002574:	4b36      	ldr	r3, [pc, #216]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d061      	beq.n	8002644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d146      	bne.n	8002616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002588:	4b33      	ldr	r3, [pc, #204]	@ (8002658 <HAL_RCC_OscConfig+0x4cc>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7ff f841 	bl	8001614 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7ff f83d 	bl	8001614 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e06d      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a8:	4b29      	ldr	r3, [pc, #164]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025bc:	d108      	bne.n	80025d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025be:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4921      	ldr	r1, [pc, #132]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a19      	ldr	r1, [r3, #32]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	430b      	orrs	r3, r1
 80025e2:	491b      	ldr	r1, [pc, #108]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <HAL_RCC_OscConfig+0x4cc>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7ff f811 	bl	8001614 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7ff f80d 	bl	8001614 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e03d      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002608:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x46a>
 8002614:	e035      	b.n	8002682 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <HAL_RCC_OscConfig+0x4cc>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe fffa 	bl	8001614 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe fff6 	bl	8001614 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e026      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x498>
 8002642:	e01e      	b.n	8002682 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e019      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
 8002658:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_RCC_OscConfig+0x500>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	429a      	cmp	r2, r3
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0d0      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d910      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b67      	ldr	r3, [pc, #412]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4965      	ldr	r1, [pc, #404]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b63      	ldr	r3, [pc, #396]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b8      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ec:	4b59      	ldr	r3, [pc, #356]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a58      	ldr	r2, [pc, #352]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002704:	4b53      	ldr	r3, [pc, #332]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a52      	ldr	r2, [pc, #328]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800270e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b50      	ldr	r3, [pc, #320]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	494d      	ldr	r1, [pc, #308]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d040      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b47      	ldr	r3, [pc, #284]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d115      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07f      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b41      	ldr	r3, [pc, #260]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e073      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b3d      	ldr	r3, [pc, #244]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e06b      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b39      	ldr	r3, [pc, #228]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4936      	ldr	r1, [pc, #216]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe ff48 	bl	8001614 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe ff44 	bl	8001614 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e053      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b2d      	ldr	r3, [pc, #180]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d210      	bcs.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	4922      	ldr	r1, [pc, #136]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e032      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4916      	ldr	r1, [pc, #88]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	490e      	ldr	r1, [pc, #56]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800281e:	f000 f821 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8002822:	4602      	mov	r2, r0
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	490a      	ldr	r1, [pc, #40]	@ (8002858 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	5ccb      	ldrb	r3, [r1, r3]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	4a09      	ldr	r2, [pc, #36]	@ (800285c <HAL_RCC_ClockConfig+0x1cc>)
 8002838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800283a:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_ClockConfig+0x1d0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fea6 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40022000 	.word	0x40022000
 8002854:	40021000 	.word	0x40021000
 8002858:	08005c40 	.word	0x08005c40
 800285c:	20000000 	.word	0x20000000
 8002860:	20000004 	.word	0x20000004

08002864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800287e:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b04      	cmp	r3, #4
 800288c:	d002      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x30>
 800288e:	2b08      	cmp	r3, #8
 8002890:	d003      	beq.n	800289a <HAL_RCC_GetSysClockFreq+0x36>
 8002892:	e027      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002894:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002896:	613b      	str	r3, [r7, #16]
      break;
 8002898:	e027      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	0c9b      	lsrs	r3, r3, #18
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a17      	ldr	r2, [pc, #92]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0c5b      	lsrs	r3, r3, #17
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x98>)
 80028c6:	fb03 f202 	mul.w	r2, r3, r2
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e004      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002908 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	613b      	str	r3, [r7, #16]
      break;
 80028e2:	e002      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x98>)
 80028e6:	613b      	str	r3, [r7, #16]
      break;
 80028e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ea:	693b      	ldr	r3, [r7, #16]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	007a1200 	.word	0x007a1200
 8002900:	08005c58 	.word	0x08005c58
 8002904:	08005c68 	.word	0x08005c68
 8002908:	003d0900 	.word	0x003d0900

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b02      	ldr	r3, [pc, #8]	@ (800291c <HAL_RCC_GetHCLKFreq+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	20000000 	.word	0x20000000

08002920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002924:	f7ff fff2 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	@ (8002944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	08005c50 	.word	0x08005c50

08002948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800294c:	f7ff ffde 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0adb      	lsrs	r3, r3, #11
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4903      	ldr	r1, [pc, #12]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x24>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	08005c50 	.word	0x08005c50

08002970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002978:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <RCC_Delay+0x34>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <RCC_Delay+0x38>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0a5b      	lsrs	r3, r3, #9
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800298c:	bf00      	nop
  }
  while (Delay --);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	60fa      	str	r2, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f9      	bne.n	800298c <RCC_Delay+0x1c>
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	20000000 	.word	0x20000000
 80029a8:	10624dd3 	.word	0x10624dd3

080029ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d07d      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029cc:	4b4f      	ldr	r3, [pc, #316]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10d      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	61d3      	str	r3, [r2, #28]
 80029e4:	4b49      	ldr	r3, [pc, #292]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f0:	2301      	movs	r3, #1
 80029f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4b46      	ldr	r3, [pc, #280]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d118      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a00:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a42      	ldr	r2, [pc, #264]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fe02 	bl	8001614 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	e008      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fe fdfe 	bl	8001614 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e06d      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	4b3a      	ldr	r3, [pc, #232]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a32:	4b36      	ldr	r3, [pc, #216]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d02e      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d027      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a50:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a60:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a66:	4a29      	ldr	r2, [pc, #164]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d014      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe fdcd 	bl	8001614 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fdc9 	bl	8001614 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e036      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ee      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4917      	ldr	r1, [pc, #92]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab8:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	4a13      	ldr	r2, [pc, #76]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	490b      	ldr	r1, [pc, #44]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4904      	ldr	r1, [pc, #16]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40007000 	.word	0x40007000
 8002b14:	42420440 	.word	0x42420440

08002b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e042      	b.n	8002bb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fbaa 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2224      	movs	r2, #36	@ 0x24
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f971 	bl	8002e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d175      	bne.n	8002cc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_UART_Transmit+0x2c>
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e06e      	b.n	8002cc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2221      	movs	r2, #33	@ 0x21
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bf6:	f7fe fd0d 	bl	8001614 <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	88fa      	ldrh	r2, [r7, #6]
 8002c06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c10:	d108      	bne.n	8002c24 <HAL_UART_Transmit+0x6c>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d104      	bne.n	8002c24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	e003      	b.n	8002c2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c2c:	e02e      	b.n	8002c8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	2180      	movs	r1, #128	@ 0x80
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f848 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e03a      	b.n	8002cc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	3302      	adds	r3, #2
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	e007      	b.n	8002c7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1cb      	bne.n	8002c2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2140      	movs	r1, #64	@ 0x40
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f814 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e006      	b.n	8002cc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cde:	e03b      	b.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d037      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce8:	f7fe fc94 	bl	8001614 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	6a3a      	ldr	r2, [r7, #32]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d302      	bcc.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e03a      	b.n	8002d78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d023      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b80      	cmp	r3, #128	@ 0x80
 8002d14:	d020      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d01d      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d116      	bne.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f81d 	bl	8002d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2208      	movs	r2, #8
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e00f      	b.n	8002d78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d0b4      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b095      	sub	sp, #84	@ 0x54
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d119      	bne.n	8002e2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 0310 	bic.w	r3, r3, #16
 8002e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e18:	61ba      	str	r2, [r7, #24]
 8002e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6979      	ldr	r1, [r7, #20]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	613b      	str	r3, [r7, #16]
   return(result);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e3a:	bf00      	nop
 8002e3c:	3754      	adds	r7, #84	@ 0x54
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002e7e:	f023 030c 	bic.w	r3, r3, #12
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f58 <UART_SetConfig+0x114>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d103      	bne.n	8002eb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eac:	f7ff fd4c 	bl	8002948 <HAL_RCC_GetPCLK2Freq>
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	e002      	b.n	8002eba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002eb4:	f7ff fd34 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8002eb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009a      	lsls	r2, r3, #2
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	4a22      	ldr	r2, [pc, #136]	@ (8002f5c <UART_SetConfig+0x118>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	0119      	lsls	r1, r3, #4
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009a      	lsls	r2, r3, #2
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f5c <UART_SetConfig+0x118>)
 8002ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2064      	movs	r0, #100	@ 0x64
 8002efa:	fb00 f303 	mul.w	r3, r0, r3
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	3332      	adds	r3, #50	@ 0x32
 8002f04:	4a15      	ldr	r2, [pc, #84]	@ (8002f5c <UART_SetConfig+0x118>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f10:	4419      	add	r1, r3
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009a      	lsls	r2, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <UART_SetConfig+0x118>)
 8002f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2064      	movs	r0, #100	@ 0x64
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	3332      	adds	r3, #50	@ 0x32
 8002f3c:	4a07      	ldr	r2, [pc, #28]	@ (8002f5c <UART_SetConfig+0x118>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	f003 020f 	and.w	r2, r3, #15
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	440a      	add	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	51eb851f 	.word	0x51eb851f

08002f60 <__cvt>:
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f66:	461d      	mov	r5, r3
 8002f68:	bfbb      	ittet	lt
 8002f6a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002f6e:	461d      	movlt	r5, r3
 8002f70:	2300      	movge	r3, #0
 8002f72:	232d      	movlt	r3, #45	@ 0x2d
 8002f74:	b088      	sub	sp, #32
 8002f76:	4614      	mov	r4, r2
 8002f78:	bfb8      	it	lt
 8002f7a:	4614      	movlt	r4, r2
 8002f7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002f7e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002f80:	7013      	strb	r3, [r2, #0]
 8002f82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002f84:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002f88:	f023 0820 	bic.w	r8, r3, #32
 8002f8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002f90:	d005      	beq.n	8002f9e <__cvt+0x3e>
 8002f92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002f96:	d100      	bne.n	8002f9a <__cvt+0x3a>
 8002f98:	3601      	adds	r6, #1
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e000      	b.n	8002fa0 <__cvt+0x40>
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	aa07      	add	r2, sp, #28
 8002fa2:	9204      	str	r2, [sp, #16]
 8002fa4:	aa06      	add	r2, sp, #24
 8002fa6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002faa:	e9cd 3600 	strd	r3, r6, [sp]
 8002fae:	4622      	mov	r2, r4
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	f000 fe6d 	bl	8003c90 <_dtoa_r>
 8002fb6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002fba:	4607      	mov	r7, r0
 8002fbc:	d119      	bne.n	8002ff2 <__cvt+0x92>
 8002fbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002fc0:	07db      	lsls	r3, r3, #31
 8002fc2:	d50e      	bpl.n	8002fe2 <__cvt+0x82>
 8002fc4:	eb00 0906 	add.w	r9, r0, r6
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2300      	movs	r3, #0
 8002fcc:	4620      	mov	r0, r4
 8002fce:	4629      	mov	r1, r5
 8002fd0:	f7fd fcea 	bl	80009a8 <__aeabi_dcmpeq>
 8002fd4:	b108      	cbz	r0, 8002fda <__cvt+0x7a>
 8002fd6:	f8cd 901c 	str.w	r9, [sp, #28]
 8002fda:	2230      	movs	r2, #48	@ 0x30
 8002fdc:	9b07      	ldr	r3, [sp, #28]
 8002fde:	454b      	cmp	r3, r9
 8002fe0:	d31e      	bcc.n	8003020 <__cvt+0xc0>
 8002fe2:	4638      	mov	r0, r7
 8002fe4:	9b07      	ldr	r3, [sp, #28]
 8002fe6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002fe8:	1bdb      	subs	r3, r3, r7
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	b008      	add	sp, #32
 8002fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ff6:	eb00 0906 	add.w	r9, r0, r6
 8002ffa:	d1e5      	bne.n	8002fc8 <__cvt+0x68>
 8002ffc:	7803      	ldrb	r3, [r0, #0]
 8002ffe:	2b30      	cmp	r3, #48	@ 0x30
 8003000:	d10a      	bne.n	8003018 <__cvt+0xb8>
 8003002:	2200      	movs	r2, #0
 8003004:	2300      	movs	r3, #0
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	f7fd fccd 	bl	80009a8 <__aeabi_dcmpeq>
 800300e:	b918      	cbnz	r0, 8003018 <__cvt+0xb8>
 8003010:	f1c6 0601 	rsb	r6, r6, #1
 8003014:	f8ca 6000 	str.w	r6, [sl]
 8003018:	f8da 3000 	ldr.w	r3, [sl]
 800301c:	4499      	add	r9, r3
 800301e:	e7d3      	b.n	8002fc8 <__cvt+0x68>
 8003020:	1c59      	adds	r1, r3, #1
 8003022:	9107      	str	r1, [sp, #28]
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	e7d9      	b.n	8002fdc <__cvt+0x7c>

08003028 <__exponent>:
 8003028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800302a:	2900      	cmp	r1, #0
 800302c:	bfb6      	itet	lt
 800302e:	232d      	movlt	r3, #45	@ 0x2d
 8003030:	232b      	movge	r3, #43	@ 0x2b
 8003032:	4249      	neglt	r1, r1
 8003034:	2909      	cmp	r1, #9
 8003036:	7002      	strb	r2, [r0, #0]
 8003038:	7043      	strb	r3, [r0, #1]
 800303a:	dd29      	ble.n	8003090 <__exponent+0x68>
 800303c:	f10d 0307 	add.w	r3, sp, #7
 8003040:	461d      	mov	r5, r3
 8003042:	270a      	movs	r7, #10
 8003044:	fbb1 f6f7 	udiv	r6, r1, r7
 8003048:	461a      	mov	r2, r3
 800304a:	fb07 1416 	mls	r4, r7, r6, r1
 800304e:	3430      	adds	r4, #48	@ 0x30
 8003050:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003054:	460c      	mov	r4, r1
 8003056:	2c63      	cmp	r4, #99	@ 0x63
 8003058:	4631      	mov	r1, r6
 800305a:	f103 33ff 	add.w	r3, r3, #4294967295
 800305e:	dcf1      	bgt.n	8003044 <__exponent+0x1c>
 8003060:	3130      	adds	r1, #48	@ 0x30
 8003062:	1e94      	subs	r4, r2, #2
 8003064:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003068:	4623      	mov	r3, r4
 800306a:	1c41      	adds	r1, r0, #1
 800306c:	42ab      	cmp	r3, r5
 800306e:	d30a      	bcc.n	8003086 <__exponent+0x5e>
 8003070:	f10d 0309 	add.w	r3, sp, #9
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	42ac      	cmp	r4, r5
 8003078:	bf88      	it	hi
 800307a:	2300      	movhi	r3, #0
 800307c:	3302      	adds	r3, #2
 800307e:	4403      	add	r3, r0
 8003080:	1a18      	subs	r0, r3, r0
 8003082:	b003      	add	sp, #12
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003086:	f813 6b01 	ldrb.w	r6, [r3], #1
 800308a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800308e:	e7ed      	b.n	800306c <__exponent+0x44>
 8003090:	2330      	movs	r3, #48	@ 0x30
 8003092:	3130      	adds	r1, #48	@ 0x30
 8003094:	7083      	strb	r3, [r0, #2]
 8003096:	70c1      	strb	r1, [r0, #3]
 8003098:	1d03      	adds	r3, r0, #4
 800309a:	e7f1      	b.n	8003080 <__exponent+0x58>

0800309c <_printf_float>:
 800309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a0:	b091      	sub	sp, #68	@ 0x44
 80030a2:	460c      	mov	r4, r1
 80030a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80030a8:	4616      	mov	r6, r2
 80030aa:	461f      	mov	r7, r3
 80030ac:	4605      	mov	r5, r0
 80030ae:	f000 fce1 	bl	8003a74 <_localeconv_r>
 80030b2:	6803      	ldr	r3, [r0, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	9308      	str	r3, [sp, #32]
 80030b8:	f7fd f84a 	bl	8000150 <strlen>
 80030bc:	2300      	movs	r3, #0
 80030be:	930e      	str	r3, [sp, #56]	@ 0x38
 80030c0:	f8d8 3000 	ldr.w	r3, [r8]
 80030c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80030c6:	3307      	adds	r3, #7
 80030c8:	f023 0307 	bic.w	r3, r3, #7
 80030cc:	f103 0208 	add.w	r2, r3, #8
 80030d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80030d4:	f8d4 b000 	ldr.w	fp, [r4]
 80030d8:	f8c8 2000 	str.w	r2, [r8]
 80030dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80030e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80030e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030e6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80030ea:	f04f 32ff 	mov.w	r2, #4294967295
 80030ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80030f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80030f6:	4b9c      	ldr	r3, [pc, #624]	@ (8003368 <_printf_float+0x2cc>)
 80030f8:	f7fd fc88 	bl	8000a0c <__aeabi_dcmpun>
 80030fc:	bb70      	cbnz	r0, 800315c <_printf_float+0xc0>
 80030fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003102:	f04f 32ff 	mov.w	r2, #4294967295
 8003106:	4b98      	ldr	r3, [pc, #608]	@ (8003368 <_printf_float+0x2cc>)
 8003108:	f7fd fc62 	bl	80009d0 <__aeabi_dcmple>
 800310c:	bb30      	cbnz	r0, 800315c <_printf_float+0xc0>
 800310e:	2200      	movs	r2, #0
 8003110:	2300      	movs	r3, #0
 8003112:	4640      	mov	r0, r8
 8003114:	4649      	mov	r1, r9
 8003116:	f7fd fc51 	bl	80009bc <__aeabi_dcmplt>
 800311a:	b110      	cbz	r0, 8003122 <_printf_float+0x86>
 800311c:	232d      	movs	r3, #45	@ 0x2d
 800311e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003122:	4a92      	ldr	r2, [pc, #584]	@ (800336c <_printf_float+0x2d0>)
 8003124:	4b92      	ldr	r3, [pc, #584]	@ (8003370 <_printf_float+0x2d4>)
 8003126:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800312a:	bf8c      	ite	hi
 800312c:	4690      	movhi	r8, r2
 800312e:	4698      	movls	r8, r3
 8003130:	2303      	movs	r3, #3
 8003132:	f04f 0900 	mov.w	r9, #0
 8003136:	6123      	str	r3, [r4, #16]
 8003138:	f02b 0304 	bic.w	r3, fp, #4
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	4633      	mov	r3, r6
 8003140:	4621      	mov	r1, r4
 8003142:	4628      	mov	r0, r5
 8003144:	9700      	str	r7, [sp, #0]
 8003146:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003148:	f000 f9d4 	bl	80034f4 <_printf_common>
 800314c:	3001      	adds	r0, #1
 800314e:	f040 8090 	bne.w	8003272 <_printf_float+0x1d6>
 8003152:	f04f 30ff 	mov.w	r0, #4294967295
 8003156:	b011      	add	sp, #68	@ 0x44
 8003158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800315c:	4642      	mov	r2, r8
 800315e:	464b      	mov	r3, r9
 8003160:	4640      	mov	r0, r8
 8003162:	4649      	mov	r1, r9
 8003164:	f7fd fc52 	bl	8000a0c <__aeabi_dcmpun>
 8003168:	b148      	cbz	r0, 800317e <_printf_float+0xe2>
 800316a:	464b      	mov	r3, r9
 800316c:	2b00      	cmp	r3, #0
 800316e:	bfb8      	it	lt
 8003170:	232d      	movlt	r3, #45	@ 0x2d
 8003172:	4a80      	ldr	r2, [pc, #512]	@ (8003374 <_printf_float+0x2d8>)
 8003174:	bfb8      	it	lt
 8003176:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800317a:	4b7f      	ldr	r3, [pc, #508]	@ (8003378 <_printf_float+0x2dc>)
 800317c:	e7d3      	b.n	8003126 <_printf_float+0x8a>
 800317e:	6863      	ldr	r3, [r4, #4]
 8003180:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	d13f      	bne.n	8003208 <_printf_float+0x16c>
 8003188:	2306      	movs	r3, #6
 800318a:	6063      	str	r3, [r4, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003192:	6023      	str	r3, [r4, #0]
 8003194:	9206      	str	r2, [sp, #24]
 8003196:	aa0e      	add	r2, sp, #56	@ 0x38
 8003198:	e9cd a204 	strd	sl, r2, [sp, #16]
 800319c:	aa0d      	add	r2, sp, #52	@ 0x34
 800319e:	9203      	str	r2, [sp, #12]
 80031a0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80031a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80031a8:	6863      	ldr	r3, [r4, #4]
 80031aa:	4642      	mov	r2, r8
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	4628      	mov	r0, r5
 80031b0:	464b      	mov	r3, r9
 80031b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80031b4:	f7ff fed4 	bl	8002f60 <__cvt>
 80031b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80031ba:	4680      	mov	r8, r0
 80031bc:	2947      	cmp	r1, #71	@ 0x47
 80031be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80031c0:	d128      	bne.n	8003214 <_printf_float+0x178>
 80031c2:	1cc8      	adds	r0, r1, #3
 80031c4:	db02      	blt.n	80031cc <_printf_float+0x130>
 80031c6:	6863      	ldr	r3, [r4, #4]
 80031c8:	4299      	cmp	r1, r3
 80031ca:	dd40      	ble.n	800324e <_printf_float+0x1b2>
 80031cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80031d0:	fa5f fa8a 	uxtb.w	sl, sl
 80031d4:	4652      	mov	r2, sl
 80031d6:	3901      	subs	r1, #1
 80031d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80031dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80031de:	f7ff ff23 	bl	8003028 <__exponent>
 80031e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80031e4:	4681      	mov	r9, r0
 80031e6:	1813      	adds	r3, r2, r0
 80031e8:	2a01      	cmp	r2, #1
 80031ea:	6123      	str	r3, [r4, #16]
 80031ec:	dc02      	bgt.n	80031f4 <_printf_float+0x158>
 80031ee:	6822      	ldr	r2, [r4, #0]
 80031f0:	07d2      	lsls	r2, r2, #31
 80031f2:	d501      	bpl.n	80031f8 <_printf_float+0x15c>
 80031f4:	3301      	adds	r3, #1
 80031f6:	6123      	str	r3, [r4, #16]
 80031f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d09e      	beq.n	800313e <_printf_float+0xa2>
 8003200:	232d      	movs	r3, #45	@ 0x2d
 8003202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003206:	e79a      	b.n	800313e <_printf_float+0xa2>
 8003208:	2947      	cmp	r1, #71	@ 0x47
 800320a:	d1bf      	bne.n	800318c <_printf_float+0xf0>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1bd      	bne.n	800318c <_printf_float+0xf0>
 8003210:	2301      	movs	r3, #1
 8003212:	e7ba      	b.n	800318a <_printf_float+0xee>
 8003214:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003218:	d9dc      	bls.n	80031d4 <_printf_float+0x138>
 800321a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800321e:	d118      	bne.n	8003252 <_printf_float+0x1b6>
 8003220:	2900      	cmp	r1, #0
 8003222:	6863      	ldr	r3, [r4, #4]
 8003224:	dd0b      	ble.n	800323e <_printf_float+0x1a2>
 8003226:	6121      	str	r1, [r4, #16]
 8003228:	b913      	cbnz	r3, 8003230 <_printf_float+0x194>
 800322a:	6822      	ldr	r2, [r4, #0]
 800322c:	07d0      	lsls	r0, r2, #31
 800322e:	d502      	bpl.n	8003236 <_printf_float+0x19a>
 8003230:	3301      	adds	r3, #1
 8003232:	440b      	add	r3, r1
 8003234:	6123      	str	r3, [r4, #16]
 8003236:	f04f 0900 	mov.w	r9, #0
 800323a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800323c:	e7dc      	b.n	80031f8 <_printf_float+0x15c>
 800323e:	b913      	cbnz	r3, 8003246 <_printf_float+0x1aa>
 8003240:	6822      	ldr	r2, [r4, #0]
 8003242:	07d2      	lsls	r2, r2, #31
 8003244:	d501      	bpl.n	800324a <_printf_float+0x1ae>
 8003246:	3302      	adds	r3, #2
 8003248:	e7f4      	b.n	8003234 <_printf_float+0x198>
 800324a:	2301      	movs	r3, #1
 800324c:	e7f2      	b.n	8003234 <_printf_float+0x198>
 800324e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003254:	4299      	cmp	r1, r3
 8003256:	db05      	blt.n	8003264 <_printf_float+0x1c8>
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	6121      	str	r1, [r4, #16]
 800325c:	07d8      	lsls	r0, r3, #31
 800325e:	d5ea      	bpl.n	8003236 <_printf_float+0x19a>
 8003260:	1c4b      	adds	r3, r1, #1
 8003262:	e7e7      	b.n	8003234 <_printf_float+0x198>
 8003264:	2900      	cmp	r1, #0
 8003266:	bfcc      	ite	gt
 8003268:	2201      	movgt	r2, #1
 800326a:	f1c1 0202 	rsble	r2, r1, #2
 800326e:	4413      	add	r3, r2
 8003270:	e7e0      	b.n	8003234 <_printf_float+0x198>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	055a      	lsls	r2, r3, #21
 8003276:	d407      	bmi.n	8003288 <_printf_float+0x1ec>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	4642      	mov	r2, r8
 800327c:	4631      	mov	r1, r6
 800327e:	4628      	mov	r0, r5
 8003280:	47b8      	blx	r7
 8003282:	3001      	adds	r0, #1
 8003284:	d12b      	bne.n	80032de <_printf_float+0x242>
 8003286:	e764      	b.n	8003152 <_printf_float+0xb6>
 8003288:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800328c:	f240 80dc 	bls.w	8003448 <_printf_float+0x3ac>
 8003290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003294:	2200      	movs	r2, #0
 8003296:	2300      	movs	r3, #0
 8003298:	f7fd fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800329c:	2800      	cmp	r0, #0
 800329e:	d033      	beq.n	8003308 <_printf_float+0x26c>
 80032a0:	2301      	movs	r3, #1
 80032a2:	4631      	mov	r1, r6
 80032a4:	4628      	mov	r0, r5
 80032a6:	4a35      	ldr	r2, [pc, #212]	@ (800337c <_printf_float+0x2e0>)
 80032a8:	47b8      	blx	r7
 80032aa:	3001      	adds	r0, #1
 80032ac:	f43f af51 	beq.w	8003152 <_printf_float+0xb6>
 80032b0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80032b4:	4543      	cmp	r3, r8
 80032b6:	db02      	blt.n	80032be <_printf_float+0x222>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	07d8      	lsls	r0, r3, #31
 80032bc:	d50f      	bpl.n	80032de <_printf_float+0x242>
 80032be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032c2:	4631      	mov	r1, r6
 80032c4:	4628      	mov	r0, r5
 80032c6:	47b8      	blx	r7
 80032c8:	3001      	adds	r0, #1
 80032ca:	f43f af42 	beq.w	8003152 <_printf_float+0xb6>
 80032ce:	f04f 0900 	mov.w	r9, #0
 80032d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80032d6:	f104 0a1a 	add.w	sl, r4, #26
 80032da:	45c8      	cmp	r8, r9
 80032dc:	dc09      	bgt.n	80032f2 <_printf_float+0x256>
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	079b      	lsls	r3, r3, #30
 80032e2:	f100 8102 	bmi.w	80034ea <_printf_float+0x44e>
 80032e6:	68e0      	ldr	r0, [r4, #12]
 80032e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80032ea:	4298      	cmp	r0, r3
 80032ec:	bfb8      	it	lt
 80032ee:	4618      	movlt	r0, r3
 80032f0:	e731      	b.n	8003156 <_printf_float+0xba>
 80032f2:	2301      	movs	r3, #1
 80032f4:	4652      	mov	r2, sl
 80032f6:	4631      	mov	r1, r6
 80032f8:	4628      	mov	r0, r5
 80032fa:	47b8      	blx	r7
 80032fc:	3001      	adds	r0, #1
 80032fe:	f43f af28 	beq.w	8003152 <_printf_float+0xb6>
 8003302:	f109 0901 	add.w	r9, r9, #1
 8003306:	e7e8      	b.n	80032da <_printf_float+0x23e>
 8003308:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800330a:	2b00      	cmp	r3, #0
 800330c:	dc38      	bgt.n	8003380 <_printf_float+0x2e4>
 800330e:	2301      	movs	r3, #1
 8003310:	4631      	mov	r1, r6
 8003312:	4628      	mov	r0, r5
 8003314:	4a19      	ldr	r2, [pc, #100]	@ (800337c <_printf_float+0x2e0>)
 8003316:	47b8      	blx	r7
 8003318:	3001      	adds	r0, #1
 800331a:	f43f af1a 	beq.w	8003152 <_printf_float+0xb6>
 800331e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003322:	ea59 0303 	orrs.w	r3, r9, r3
 8003326:	d102      	bne.n	800332e <_printf_float+0x292>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	07d9      	lsls	r1, r3, #31
 800332c:	d5d7      	bpl.n	80032de <_printf_float+0x242>
 800332e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003332:	4631      	mov	r1, r6
 8003334:	4628      	mov	r0, r5
 8003336:	47b8      	blx	r7
 8003338:	3001      	adds	r0, #1
 800333a:	f43f af0a 	beq.w	8003152 <_printf_float+0xb6>
 800333e:	f04f 0a00 	mov.w	sl, #0
 8003342:	f104 0b1a 	add.w	fp, r4, #26
 8003346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003348:	425b      	negs	r3, r3
 800334a:	4553      	cmp	r3, sl
 800334c:	dc01      	bgt.n	8003352 <_printf_float+0x2b6>
 800334e:	464b      	mov	r3, r9
 8003350:	e793      	b.n	800327a <_printf_float+0x1de>
 8003352:	2301      	movs	r3, #1
 8003354:	465a      	mov	r2, fp
 8003356:	4631      	mov	r1, r6
 8003358:	4628      	mov	r0, r5
 800335a:	47b8      	blx	r7
 800335c:	3001      	adds	r0, #1
 800335e:	f43f aef8 	beq.w	8003152 <_printf_float+0xb6>
 8003362:	f10a 0a01 	add.w	sl, sl, #1
 8003366:	e7ee      	b.n	8003346 <_printf_float+0x2aa>
 8003368:	7fefffff 	.word	0x7fefffff
 800336c:	08005c6e 	.word	0x08005c6e
 8003370:	08005c6a 	.word	0x08005c6a
 8003374:	08005c76 	.word	0x08005c76
 8003378:	08005c72 	.word	0x08005c72
 800337c:	08005c7a 	.word	0x08005c7a
 8003380:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003382:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003386:	4553      	cmp	r3, sl
 8003388:	bfa8      	it	ge
 800338a:	4653      	movge	r3, sl
 800338c:	2b00      	cmp	r3, #0
 800338e:	4699      	mov	r9, r3
 8003390:	dc36      	bgt.n	8003400 <_printf_float+0x364>
 8003392:	f04f 0b00 	mov.w	fp, #0
 8003396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800339a:	f104 021a 	add.w	r2, r4, #26
 800339e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80033a2:	eba3 0309 	sub.w	r3, r3, r9
 80033a6:	455b      	cmp	r3, fp
 80033a8:	dc31      	bgt.n	800340e <_printf_float+0x372>
 80033aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033ac:	459a      	cmp	sl, r3
 80033ae:	dc3a      	bgt.n	8003426 <_printf_float+0x38a>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	07da      	lsls	r2, r3, #31
 80033b4:	d437      	bmi.n	8003426 <_printf_float+0x38a>
 80033b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033b8:	ebaa 0903 	sub.w	r9, sl, r3
 80033bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033be:	ebaa 0303 	sub.w	r3, sl, r3
 80033c2:	4599      	cmp	r9, r3
 80033c4:	bfa8      	it	ge
 80033c6:	4699      	movge	r9, r3
 80033c8:	f1b9 0f00 	cmp.w	r9, #0
 80033cc:	dc33      	bgt.n	8003436 <_printf_float+0x39a>
 80033ce:	f04f 0800 	mov.w	r8, #0
 80033d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033d6:	f104 0b1a 	add.w	fp, r4, #26
 80033da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033dc:	ebaa 0303 	sub.w	r3, sl, r3
 80033e0:	eba3 0309 	sub.w	r3, r3, r9
 80033e4:	4543      	cmp	r3, r8
 80033e6:	f77f af7a 	ble.w	80032de <_printf_float+0x242>
 80033ea:	2301      	movs	r3, #1
 80033ec:	465a      	mov	r2, fp
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	47b8      	blx	r7
 80033f4:	3001      	adds	r0, #1
 80033f6:	f43f aeac 	beq.w	8003152 <_printf_float+0xb6>
 80033fa:	f108 0801 	add.w	r8, r8, #1
 80033fe:	e7ec      	b.n	80033da <_printf_float+0x33e>
 8003400:	4642      	mov	r2, r8
 8003402:	4631      	mov	r1, r6
 8003404:	4628      	mov	r0, r5
 8003406:	47b8      	blx	r7
 8003408:	3001      	adds	r0, #1
 800340a:	d1c2      	bne.n	8003392 <_printf_float+0x2f6>
 800340c:	e6a1      	b.n	8003152 <_printf_float+0xb6>
 800340e:	2301      	movs	r3, #1
 8003410:	4631      	mov	r1, r6
 8003412:	4628      	mov	r0, r5
 8003414:	920a      	str	r2, [sp, #40]	@ 0x28
 8003416:	47b8      	blx	r7
 8003418:	3001      	adds	r0, #1
 800341a:	f43f ae9a 	beq.w	8003152 <_printf_float+0xb6>
 800341e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003420:	f10b 0b01 	add.w	fp, fp, #1
 8003424:	e7bb      	b.n	800339e <_printf_float+0x302>
 8003426:	4631      	mov	r1, r6
 8003428:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800342c:	4628      	mov	r0, r5
 800342e:	47b8      	blx	r7
 8003430:	3001      	adds	r0, #1
 8003432:	d1c0      	bne.n	80033b6 <_printf_float+0x31a>
 8003434:	e68d      	b.n	8003152 <_printf_float+0xb6>
 8003436:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003438:	464b      	mov	r3, r9
 800343a:	4631      	mov	r1, r6
 800343c:	4628      	mov	r0, r5
 800343e:	4442      	add	r2, r8
 8003440:	47b8      	blx	r7
 8003442:	3001      	adds	r0, #1
 8003444:	d1c3      	bne.n	80033ce <_printf_float+0x332>
 8003446:	e684      	b.n	8003152 <_printf_float+0xb6>
 8003448:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800344c:	f1ba 0f01 	cmp.w	sl, #1
 8003450:	dc01      	bgt.n	8003456 <_printf_float+0x3ba>
 8003452:	07db      	lsls	r3, r3, #31
 8003454:	d536      	bpl.n	80034c4 <_printf_float+0x428>
 8003456:	2301      	movs	r3, #1
 8003458:	4642      	mov	r2, r8
 800345a:	4631      	mov	r1, r6
 800345c:	4628      	mov	r0, r5
 800345e:	47b8      	blx	r7
 8003460:	3001      	adds	r0, #1
 8003462:	f43f ae76 	beq.w	8003152 <_printf_float+0xb6>
 8003466:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800346a:	4631      	mov	r1, r6
 800346c:	4628      	mov	r0, r5
 800346e:	47b8      	blx	r7
 8003470:	3001      	adds	r0, #1
 8003472:	f43f ae6e 	beq.w	8003152 <_printf_float+0xb6>
 8003476:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800347a:	2200      	movs	r2, #0
 800347c:	2300      	movs	r3, #0
 800347e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003482:	f7fd fa91 	bl	80009a8 <__aeabi_dcmpeq>
 8003486:	b9c0      	cbnz	r0, 80034ba <_printf_float+0x41e>
 8003488:	4653      	mov	r3, sl
 800348a:	f108 0201 	add.w	r2, r8, #1
 800348e:	4631      	mov	r1, r6
 8003490:	4628      	mov	r0, r5
 8003492:	47b8      	blx	r7
 8003494:	3001      	adds	r0, #1
 8003496:	d10c      	bne.n	80034b2 <_printf_float+0x416>
 8003498:	e65b      	b.n	8003152 <_printf_float+0xb6>
 800349a:	2301      	movs	r3, #1
 800349c:	465a      	mov	r2, fp
 800349e:	4631      	mov	r1, r6
 80034a0:	4628      	mov	r0, r5
 80034a2:	47b8      	blx	r7
 80034a4:	3001      	adds	r0, #1
 80034a6:	f43f ae54 	beq.w	8003152 <_printf_float+0xb6>
 80034aa:	f108 0801 	add.w	r8, r8, #1
 80034ae:	45d0      	cmp	r8, sl
 80034b0:	dbf3      	blt.n	800349a <_printf_float+0x3fe>
 80034b2:	464b      	mov	r3, r9
 80034b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80034b8:	e6e0      	b.n	800327c <_printf_float+0x1e0>
 80034ba:	f04f 0800 	mov.w	r8, #0
 80034be:	f104 0b1a 	add.w	fp, r4, #26
 80034c2:	e7f4      	b.n	80034ae <_printf_float+0x412>
 80034c4:	2301      	movs	r3, #1
 80034c6:	4642      	mov	r2, r8
 80034c8:	e7e1      	b.n	800348e <_printf_float+0x3f2>
 80034ca:	2301      	movs	r3, #1
 80034cc:	464a      	mov	r2, r9
 80034ce:	4631      	mov	r1, r6
 80034d0:	4628      	mov	r0, r5
 80034d2:	47b8      	blx	r7
 80034d4:	3001      	adds	r0, #1
 80034d6:	f43f ae3c 	beq.w	8003152 <_printf_float+0xb6>
 80034da:	f108 0801 	add.w	r8, r8, #1
 80034de:	68e3      	ldr	r3, [r4, #12]
 80034e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80034e2:	1a5b      	subs	r3, r3, r1
 80034e4:	4543      	cmp	r3, r8
 80034e6:	dcf0      	bgt.n	80034ca <_printf_float+0x42e>
 80034e8:	e6fd      	b.n	80032e6 <_printf_float+0x24a>
 80034ea:	f04f 0800 	mov.w	r8, #0
 80034ee:	f104 0919 	add.w	r9, r4, #25
 80034f2:	e7f4      	b.n	80034de <_printf_float+0x442>

080034f4 <_printf_common>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	4616      	mov	r6, r2
 80034fa:	4698      	mov	r8, r3
 80034fc:	688a      	ldr	r2, [r1, #8]
 80034fe:	690b      	ldr	r3, [r1, #16]
 8003500:	4607      	mov	r7, r0
 8003502:	4293      	cmp	r3, r2
 8003504:	bfb8      	it	lt
 8003506:	4613      	movlt	r3, r2
 8003508:	6033      	str	r3, [r6, #0]
 800350a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800350e:	460c      	mov	r4, r1
 8003510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003514:	b10a      	cbz	r2, 800351a <_printf_common+0x26>
 8003516:	3301      	adds	r3, #1
 8003518:	6033      	str	r3, [r6, #0]
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	0699      	lsls	r1, r3, #26
 800351e:	bf42      	ittt	mi
 8003520:	6833      	ldrmi	r3, [r6, #0]
 8003522:	3302      	addmi	r3, #2
 8003524:	6033      	strmi	r3, [r6, #0]
 8003526:	6825      	ldr	r5, [r4, #0]
 8003528:	f015 0506 	ands.w	r5, r5, #6
 800352c:	d106      	bne.n	800353c <_printf_common+0x48>
 800352e:	f104 0a19 	add.w	sl, r4, #25
 8003532:	68e3      	ldr	r3, [r4, #12]
 8003534:	6832      	ldr	r2, [r6, #0]
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	42ab      	cmp	r3, r5
 800353a:	dc2b      	bgt.n	8003594 <_printf_common+0xa0>
 800353c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003540:	6822      	ldr	r2, [r4, #0]
 8003542:	3b00      	subs	r3, #0
 8003544:	bf18      	it	ne
 8003546:	2301      	movne	r3, #1
 8003548:	0692      	lsls	r2, r2, #26
 800354a:	d430      	bmi.n	80035ae <_printf_common+0xba>
 800354c:	4641      	mov	r1, r8
 800354e:	4638      	mov	r0, r7
 8003550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003554:	47c8      	blx	r9
 8003556:	3001      	adds	r0, #1
 8003558:	d023      	beq.n	80035a2 <_printf_common+0xae>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	6922      	ldr	r2, [r4, #16]
 800355e:	f003 0306 	and.w	r3, r3, #6
 8003562:	2b04      	cmp	r3, #4
 8003564:	bf14      	ite	ne
 8003566:	2500      	movne	r5, #0
 8003568:	6833      	ldreq	r3, [r6, #0]
 800356a:	f04f 0600 	mov.w	r6, #0
 800356e:	bf08      	it	eq
 8003570:	68e5      	ldreq	r5, [r4, #12]
 8003572:	f104 041a 	add.w	r4, r4, #26
 8003576:	bf08      	it	eq
 8003578:	1aed      	subeq	r5, r5, r3
 800357a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800357e:	bf08      	it	eq
 8003580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003584:	4293      	cmp	r3, r2
 8003586:	bfc4      	itt	gt
 8003588:	1a9b      	subgt	r3, r3, r2
 800358a:	18ed      	addgt	r5, r5, r3
 800358c:	42b5      	cmp	r5, r6
 800358e:	d11a      	bne.n	80035c6 <_printf_common+0xd2>
 8003590:	2000      	movs	r0, #0
 8003592:	e008      	b.n	80035a6 <_printf_common+0xb2>
 8003594:	2301      	movs	r3, #1
 8003596:	4652      	mov	r2, sl
 8003598:	4641      	mov	r1, r8
 800359a:	4638      	mov	r0, r7
 800359c:	47c8      	blx	r9
 800359e:	3001      	adds	r0, #1
 80035a0:	d103      	bne.n	80035aa <_printf_common+0xb6>
 80035a2:	f04f 30ff 	mov.w	r0, #4294967295
 80035a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035aa:	3501      	adds	r5, #1
 80035ac:	e7c1      	b.n	8003532 <_printf_common+0x3e>
 80035ae:	2030      	movs	r0, #48	@ 0x30
 80035b0:	18e1      	adds	r1, r4, r3
 80035b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035bc:	4422      	add	r2, r4
 80035be:	3302      	adds	r3, #2
 80035c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035c4:	e7c2      	b.n	800354c <_printf_common+0x58>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4622      	mov	r2, r4
 80035ca:	4641      	mov	r1, r8
 80035cc:	4638      	mov	r0, r7
 80035ce:	47c8      	blx	r9
 80035d0:	3001      	adds	r0, #1
 80035d2:	d0e6      	beq.n	80035a2 <_printf_common+0xae>
 80035d4:	3601      	adds	r6, #1
 80035d6:	e7d9      	b.n	800358c <_printf_common+0x98>

080035d8 <_printf_i>:
 80035d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035dc:	7e0f      	ldrb	r7, [r1, #24]
 80035de:	4691      	mov	r9, r2
 80035e0:	2f78      	cmp	r7, #120	@ 0x78
 80035e2:	4680      	mov	r8, r0
 80035e4:	460c      	mov	r4, r1
 80035e6:	469a      	mov	sl, r3
 80035e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035ee:	d807      	bhi.n	8003600 <_printf_i+0x28>
 80035f0:	2f62      	cmp	r7, #98	@ 0x62
 80035f2:	d80a      	bhi.n	800360a <_printf_i+0x32>
 80035f4:	2f00      	cmp	r7, #0
 80035f6:	f000 80d1 	beq.w	800379c <_printf_i+0x1c4>
 80035fa:	2f58      	cmp	r7, #88	@ 0x58
 80035fc:	f000 80b8 	beq.w	8003770 <_printf_i+0x198>
 8003600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003608:	e03a      	b.n	8003680 <_printf_i+0xa8>
 800360a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800360e:	2b15      	cmp	r3, #21
 8003610:	d8f6      	bhi.n	8003600 <_printf_i+0x28>
 8003612:	a101      	add	r1, pc, #4	@ (adr r1, 8003618 <_printf_i+0x40>)
 8003614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003618:	08003671 	.word	0x08003671
 800361c:	08003685 	.word	0x08003685
 8003620:	08003601 	.word	0x08003601
 8003624:	08003601 	.word	0x08003601
 8003628:	08003601 	.word	0x08003601
 800362c:	08003601 	.word	0x08003601
 8003630:	08003685 	.word	0x08003685
 8003634:	08003601 	.word	0x08003601
 8003638:	08003601 	.word	0x08003601
 800363c:	08003601 	.word	0x08003601
 8003640:	08003601 	.word	0x08003601
 8003644:	08003783 	.word	0x08003783
 8003648:	080036af 	.word	0x080036af
 800364c:	0800373d 	.word	0x0800373d
 8003650:	08003601 	.word	0x08003601
 8003654:	08003601 	.word	0x08003601
 8003658:	080037a5 	.word	0x080037a5
 800365c:	08003601 	.word	0x08003601
 8003660:	080036af 	.word	0x080036af
 8003664:	08003601 	.word	0x08003601
 8003668:	08003601 	.word	0x08003601
 800366c:	08003745 	.word	0x08003745
 8003670:	6833      	ldr	r3, [r6, #0]
 8003672:	1d1a      	adds	r2, r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6032      	str	r2, [r6, #0]
 8003678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800367c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003680:	2301      	movs	r3, #1
 8003682:	e09c      	b.n	80037be <_printf_i+0x1e6>
 8003684:	6833      	ldr	r3, [r6, #0]
 8003686:	6820      	ldr	r0, [r4, #0]
 8003688:	1d19      	adds	r1, r3, #4
 800368a:	6031      	str	r1, [r6, #0]
 800368c:	0606      	lsls	r6, r0, #24
 800368e:	d501      	bpl.n	8003694 <_printf_i+0xbc>
 8003690:	681d      	ldr	r5, [r3, #0]
 8003692:	e003      	b.n	800369c <_printf_i+0xc4>
 8003694:	0645      	lsls	r5, r0, #25
 8003696:	d5fb      	bpl.n	8003690 <_printf_i+0xb8>
 8003698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800369c:	2d00      	cmp	r5, #0
 800369e:	da03      	bge.n	80036a8 <_printf_i+0xd0>
 80036a0:	232d      	movs	r3, #45	@ 0x2d
 80036a2:	426d      	negs	r5, r5
 80036a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036a8:	230a      	movs	r3, #10
 80036aa:	4858      	ldr	r0, [pc, #352]	@ (800380c <_printf_i+0x234>)
 80036ac:	e011      	b.n	80036d2 <_printf_i+0xfa>
 80036ae:	6821      	ldr	r1, [r4, #0]
 80036b0:	6833      	ldr	r3, [r6, #0]
 80036b2:	0608      	lsls	r0, r1, #24
 80036b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80036b8:	d402      	bmi.n	80036c0 <_printf_i+0xe8>
 80036ba:	0649      	lsls	r1, r1, #25
 80036bc:	bf48      	it	mi
 80036be:	b2ad      	uxthmi	r5, r5
 80036c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80036c2:	6033      	str	r3, [r6, #0]
 80036c4:	bf14      	ite	ne
 80036c6:	230a      	movne	r3, #10
 80036c8:	2308      	moveq	r3, #8
 80036ca:	4850      	ldr	r0, [pc, #320]	@ (800380c <_printf_i+0x234>)
 80036cc:	2100      	movs	r1, #0
 80036ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036d2:	6866      	ldr	r6, [r4, #4]
 80036d4:	2e00      	cmp	r6, #0
 80036d6:	60a6      	str	r6, [r4, #8]
 80036d8:	db05      	blt.n	80036e6 <_printf_i+0x10e>
 80036da:	6821      	ldr	r1, [r4, #0]
 80036dc:	432e      	orrs	r6, r5
 80036de:	f021 0104 	bic.w	r1, r1, #4
 80036e2:	6021      	str	r1, [r4, #0]
 80036e4:	d04b      	beq.n	800377e <_printf_i+0x1a6>
 80036e6:	4616      	mov	r6, r2
 80036e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80036ec:	fb03 5711 	mls	r7, r3, r1, r5
 80036f0:	5dc7      	ldrb	r7, [r0, r7]
 80036f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036f6:	462f      	mov	r7, r5
 80036f8:	42bb      	cmp	r3, r7
 80036fa:	460d      	mov	r5, r1
 80036fc:	d9f4      	bls.n	80036e8 <_printf_i+0x110>
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d10b      	bne.n	800371a <_printf_i+0x142>
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	07df      	lsls	r7, r3, #31
 8003706:	d508      	bpl.n	800371a <_printf_i+0x142>
 8003708:	6923      	ldr	r3, [r4, #16]
 800370a:	6861      	ldr	r1, [r4, #4]
 800370c:	4299      	cmp	r1, r3
 800370e:	bfde      	ittt	le
 8003710:	2330      	movle	r3, #48	@ 0x30
 8003712:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003716:	f106 36ff 	addle.w	r6, r6, #4294967295
 800371a:	1b92      	subs	r2, r2, r6
 800371c:	6122      	str	r2, [r4, #16]
 800371e:	464b      	mov	r3, r9
 8003720:	4621      	mov	r1, r4
 8003722:	4640      	mov	r0, r8
 8003724:	f8cd a000 	str.w	sl, [sp]
 8003728:	aa03      	add	r2, sp, #12
 800372a:	f7ff fee3 	bl	80034f4 <_printf_common>
 800372e:	3001      	adds	r0, #1
 8003730:	d14a      	bne.n	80037c8 <_printf_i+0x1f0>
 8003732:	f04f 30ff 	mov.w	r0, #4294967295
 8003736:	b004      	add	sp, #16
 8003738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	f043 0320 	orr.w	r3, r3, #32
 8003742:	6023      	str	r3, [r4, #0]
 8003744:	2778      	movs	r7, #120	@ 0x78
 8003746:	4832      	ldr	r0, [pc, #200]	@ (8003810 <_printf_i+0x238>)
 8003748:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	6831      	ldr	r1, [r6, #0]
 8003750:	061f      	lsls	r7, r3, #24
 8003752:	f851 5b04 	ldr.w	r5, [r1], #4
 8003756:	d402      	bmi.n	800375e <_printf_i+0x186>
 8003758:	065f      	lsls	r7, r3, #25
 800375a:	bf48      	it	mi
 800375c:	b2ad      	uxthmi	r5, r5
 800375e:	6031      	str	r1, [r6, #0]
 8003760:	07d9      	lsls	r1, r3, #31
 8003762:	bf44      	itt	mi
 8003764:	f043 0320 	orrmi.w	r3, r3, #32
 8003768:	6023      	strmi	r3, [r4, #0]
 800376a:	b11d      	cbz	r5, 8003774 <_printf_i+0x19c>
 800376c:	2310      	movs	r3, #16
 800376e:	e7ad      	b.n	80036cc <_printf_i+0xf4>
 8003770:	4826      	ldr	r0, [pc, #152]	@ (800380c <_printf_i+0x234>)
 8003772:	e7e9      	b.n	8003748 <_printf_i+0x170>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f023 0320 	bic.w	r3, r3, #32
 800377a:	6023      	str	r3, [r4, #0]
 800377c:	e7f6      	b.n	800376c <_printf_i+0x194>
 800377e:	4616      	mov	r6, r2
 8003780:	e7bd      	b.n	80036fe <_printf_i+0x126>
 8003782:	6833      	ldr	r3, [r6, #0]
 8003784:	6825      	ldr	r5, [r4, #0]
 8003786:	1d18      	adds	r0, r3, #4
 8003788:	6961      	ldr	r1, [r4, #20]
 800378a:	6030      	str	r0, [r6, #0]
 800378c:	062e      	lsls	r6, r5, #24
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	d501      	bpl.n	8003796 <_printf_i+0x1be>
 8003792:	6019      	str	r1, [r3, #0]
 8003794:	e002      	b.n	800379c <_printf_i+0x1c4>
 8003796:	0668      	lsls	r0, r5, #25
 8003798:	d5fb      	bpl.n	8003792 <_printf_i+0x1ba>
 800379a:	8019      	strh	r1, [r3, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	4616      	mov	r6, r2
 80037a0:	6123      	str	r3, [r4, #16]
 80037a2:	e7bc      	b.n	800371e <_printf_i+0x146>
 80037a4:	6833      	ldr	r3, [r6, #0]
 80037a6:	2100      	movs	r1, #0
 80037a8:	1d1a      	adds	r2, r3, #4
 80037aa:	6032      	str	r2, [r6, #0]
 80037ac:	681e      	ldr	r6, [r3, #0]
 80037ae:	6862      	ldr	r2, [r4, #4]
 80037b0:	4630      	mov	r0, r6
 80037b2:	f000 f9d6 	bl	8003b62 <memchr>
 80037b6:	b108      	cbz	r0, 80037bc <_printf_i+0x1e4>
 80037b8:	1b80      	subs	r0, r0, r6
 80037ba:	6060      	str	r0, [r4, #4]
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	2300      	movs	r3, #0
 80037c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037c6:	e7aa      	b.n	800371e <_printf_i+0x146>
 80037c8:	4632      	mov	r2, r6
 80037ca:	4649      	mov	r1, r9
 80037cc:	4640      	mov	r0, r8
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	47d0      	blx	sl
 80037d2:	3001      	adds	r0, #1
 80037d4:	d0ad      	beq.n	8003732 <_printf_i+0x15a>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	079b      	lsls	r3, r3, #30
 80037da:	d413      	bmi.n	8003804 <_printf_i+0x22c>
 80037dc:	68e0      	ldr	r0, [r4, #12]
 80037de:	9b03      	ldr	r3, [sp, #12]
 80037e0:	4298      	cmp	r0, r3
 80037e2:	bfb8      	it	lt
 80037e4:	4618      	movlt	r0, r3
 80037e6:	e7a6      	b.n	8003736 <_printf_i+0x15e>
 80037e8:	2301      	movs	r3, #1
 80037ea:	4632      	mov	r2, r6
 80037ec:	4649      	mov	r1, r9
 80037ee:	4640      	mov	r0, r8
 80037f0:	47d0      	blx	sl
 80037f2:	3001      	adds	r0, #1
 80037f4:	d09d      	beq.n	8003732 <_printf_i+0x15a>
 80037f6:	3501      	adds	r5, #1
 80037f8:	68e3      	ldr	r3, [r4, #12]
 80037fa:	9903      	ldr	r1, [sp, #12]
 80037fc:	1a5b      	subs	r3, r3, r1
 80037fe:	42ab      	cmp	r3, r5
 8003800:	dcf2      	bgt.n	80037e8 <_printf_i+0x210>
 8003802:	e7eb      	b.n	80037dc <_printf_i+0x204>
 8003804:	2500      	movs	r5, #0
 8003806:	f104 0619 	add.w	r6, r4, #25
 800380a:	e7f5      	b.n	80037f8 <_printf_i+0x220>
 800380c:	08005c7c 	.word	0x08005c7c
 8003810:	08005c8d 	.word	0x08005c8d

08003814 <std>:
 8003814:	2300      	movs	r3, #0
 8003816:	b510      	push	{r4, lr}
 8003818:	4604      	mov	r4, r0
 800381a:	e9c0 3300 	strd	r3, r3, [r0]
 800381e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003822:	6083      	str	r3, [r0, #8]
 8003824:	8181      	strh	r1, [r0, #12]
 8003826:	6643      	str	r3, [r0, #100]	@ 0x64
 8003828:	81c2      	strh	r2, [r0, #14]
 800382a:	6183      	str	r3, [r0, #24]
 800382c:	4619      	mov	r1, r3
 800382e:	2208      	movs	r2, #8
 8003830:	305c      	adds	r0, #92	@ 0x5c
 8003832:	f000 f916 	bl	8003a62 <memset>
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <std+0x58>)
 8003838:	6224      	str	r4, [r4, #32]
 800383a:	6263      	str	r3, [r4, #36]	@ 0x24
 800383c:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <std+0x5c>)
 800383e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003840:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <std+0x60>)
 8003842:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <std+0x64>)
 8003846:	6323      	str	r3, [r4, #48]	@ 0x30
 8003848:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <std+0x68>)
 800384a:	429c      	cmp	r4, r3
 800384c:	d006      	beq.n	800385c <std+0x48>
 800384e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003852:	4294      	cmp	r4, r2
 8003854:	d002      	beq.n	800385c <std+0x48>
 8003856:	33d0      	adds	r3, #208	@ 0xd0
 8003858:	429c      	cmp	r4, r3
 800385a:	d105      	bne.n	8003868 <std+0x54>
 800385c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003864:	f000 b97a 	b.w	8003b5c <__retarget_lock_init_recursive>
 8003868:	bd10      	pop	{r4, pc}
 800386a:	bf00      	nop
 800386c:	080039dd 	.word	0x080039dd
 8003870:	080039ff 	.word	0x080039ff
 8003874:	08003a37 	.word	0x08003a37
 8003878:	08003a5b 	.word	0x08003a5b
 800387c:	200002a8 	.word	0x200002a8

08003880 <stdio_exit_handler>:
 8003880:	4a02      	ldr	r2, [pc, #8]	@ (800388c <stdio_exit_handler+0xc>)
 8003882:	4903      	ldr	r1, [pc, #12]	@ (8003890 <stdio_exit_handler+0x10>)
 8003884:	4803      	ldr	r0, [pc, #12]	@ (8003894 <stdio_exit_handler+0x14>)
 8003886:	f000 b869 	b.w	800395c <_fwalk_sglue>
 800388a:	bf00      	nop
 800388c:	2000000c 	.word	0x2000000c
 8003890:	080054d9 	.word	0x080054d9
 8003894:	2000001c 	.word	0x2000001c

08003898 <cleanup_stdio>:
 8003898:	6841      	ldr	r1, [r0, #4]
 800389a:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <cleanup_stdio+0x34>)
 800389c:	b510      	push	{r4, lr}
 800389e:	4299      	cmp	r1, r3
 80038a0:	4604      	mov	r4, r0
 80038a2:	d001      	beq.n	80038a8 <cleanup_stdio+0x10>
 80038a4:	f001 fe18 	bl	80054d8 <_fflush_r>
 80038a8:	68a1      	ldr	r1, [r4, #8]
 80038aa:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <cleanup_stdio+0x38>)
 80038ac:	4299      	cmp	r1, r3
 80038ae:	d002      	beq.n	80038b6 <cleanup_stdio+0x1e>
 80038b0:	4620      	mov	r0, r4
 80038b2:	f001 fe11 	bl	80054d8 <_fflush_r>
 80038b6:	68e1      	ldr	r1, [r4, #12]
 80038b8:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <cleanup_stdio+0x3c>)
 80038ba:	4299      	cmp	r1, r3
 80038bc:	d004      	beq.n	80038c8 <cleanup_stdio+0x30>
 80038be:	4620      	mov	r0, r4
 80038c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c4:	f001 be08 	b.w	80054d8 <_fflush_r>
 80038c8:	bd10      	pop	{r4, pc}
 80038ca:	bf00      	nop
 80038cc:	200002a8 	.word	0x200002a8
 80038d0:	20000310 	.word	0x20000310
 80038d4:	20000378 	.word	0x20000378

080038d8 <global_stdio_init.part.0>:
 80038d8:	b510      	push	{r4, lr}
 80038da:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <global_stdio_init.part.0+0x30>)
 80038dc:	4c0b      	ldr	r4, [pc, #44]	@ (800390c <global_stdio_init.part.0+0x34>)
 80038de:	4a0c      	ldr	r2, [pc, #48]	@ (8003910 <global_stdio_init.part.0+0x38>)
 80038e0:	4620      	mov	r0, r4
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	2104      	movs	r1, #4
 80038e6:	2200      	movs	r2, #0
 80038e8:	f7ff ff94 	bl	8003814 <std>
 80038ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038f0:	2201      	movs	r2, #1
 80038f2:	2109      	movs	r1, #9
 80038f4:	f7ff ff8e 	bl	8003814 <std>
 80038f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038fc:	2202      	movs	r2, #2
 80038fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003902:	2112      	movs	r1, #18
 8003904:	f7ff bf86 	b.w	8003814 <std>
 8003908:	200003e0 	.word	0x200003e0
 800390c:	200002a8 	.word	0x200002a8
 8003910:	08003881 	.word	0x08003881

08003914 <__sfp_lock_acquire>:
 8003914:	4801      	ldr	r0, [pc, #4]	@ (800391c <__sfp_lock_acquire+0x8>)
 8003916:	f000 b922 	b.w	8003b5e <__retarget_lock_acquire_recursive>
 800391a:	bf00      	nop
 800391c:	200003e9 	.word	0x200003e9

08003920 <__sfp_lock_release>:
 8003920:	4801      	ldr	r0, [pc, #4]	@ (8003928 <__sfp_lock_release+0x8>)
 8003922:	f000 b91d 	b.w	8003b60 <__retarget_lock_release_recursive>
 8003926:	bf00      	nop
 8003928:	200003e9 	.word	0x200003e9

0800392c <__sinit>:
 800392c:	b510      	push	{r4, lr}
 800392e:	4604      	mov	r4, r0
 8003930:	f7ff fff0 	bl	8003914 <__sfp_lock_acquire>
 8003934:	6a23      	ldr	r3, [r4, #32]
 8003936:	b11b      	cbz	r3, 8003940 <__sinit+0x14>
 8003938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800393c:	f7ff bff0 	b.w	8003920 <__sfp_lock_release>
 8003940:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <__sinit+0x28>)
 8003942:	6223      	str	r3, [r4, #32]
 8003944:	4b04      	ldr	r3, [pc, #16]	@ (8003958 <__sinit+0x2c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f5      	bne.n	8003938 <__sinit+0xc>
 800394c:	f7ff ffc4 	bl	80038d8 <global_stdio_init.part.0>
 8003950:	e7f2      	b.n	8003938 <__sinit+0xc>
 8003952:	bf00      	nop
 8003954:	08003899 	.word	0x08003899
 8003958:	200003e0 	.word	0x200003e0

0800395c <_fwalk_sglue>:
 800395c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003960:	4607      	mov	r7, r0
 8003962:	4688      	mov	r8, r1
 8003964:	4614      	mov	r4, r2
 8003966:	2600      	movs	r6, #0
 8003968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800396c:	f1b9 0901 	subs.w	r9, r9, #1
 8003970:	d505      	bpl.n	800397e <_fwalk_sglue+0x22>
 8003972:	6824      	ldr	r4, [r4, #0]
 8003974:	2c00      	cmp	r4, #0
 8003976:	d1f7      	bne.n	8003968 <_fwalk_sglue+0xc>
 8003978:	4630      	mov	r0, r6
 800397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397e:	89ab      	ldrh	r3, [r5, #12]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d907      	bls.n	8003994 <_fwalk_sglue+0x38>
 8003984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003988:	3301      	adds	r3, #1
 800398a:	d003      	beq.n	8003994 <_fwalk_sglue+0x38>
 800398c:	4629      	mov	r1, r5
 800398e:	4638      	mov	r0, r7
 8003990:	47c0      	blx	r8
 8003992:	4306      	orrs	r6, r0
 8003994:	3568      	adds	r5, #104	@ 0x68
 8003996:	e7e9      	b.n	800396c <_fwalk_sglue+0x10>

08003998 <siprintf>:
 8003998:	b40e      	push	{r1, r2, r3}
 800399a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800399e:	b510      	push	{r4, lr}
 80039a0:	2400      	movs	r4, #0
 80039a2:	b09d      	sub	sp, #116	@ 0x74
 80039a4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80039a6:	9002      	str	r0, [sp, #8]
 80039a8:	9006      	str	r0, [sp, #24]
 80039aa:	9107      	str	r1, [sp, #28]
 80039ac:	9104      	str	r1, [sp, #16]
 80039ae:	4809      	ldr	r0, [pc, #36]	@ (80039d4 <siprintf+0x3c>)
 80039b0:	4909      	ldr	r1, [pc, #36]	@ (80039d8 <siprintf+0x40>)
 80039b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80039b6:	9105      	str	r1, [sp, #20]
 80039b8:	6800      	ldr	r0, [r0, #0]
 80039ba:	a902      	add	r1, sp, #8
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80039c0:	f001 fc0e 	bl	80051e0 <_svfiprintf_r>
 80039c4:	9b02      	ldr	r3, [sp, #8]
 80039c6:	701c      	strb	r4, [r3, #0]
 80039c8:	b01d      	add	sp, #116	@ 0x74
 80039ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ce:	b003      	add	sp, #12
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000018 	.word	0x20000018
 80039d8:	ffff0208 	.word	0xffff0208

080039dc <__sread>:
 80039dc:	b510      	push	{r4, lr}
 80039de:	460c      	mov	r4, r1
 80039e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e4:	f000 f86c 	bl	8003ac0 <_read_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bfab      	itete	ge
 80039ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039ee:	89a3      	ldrhlt	r3, [r4, #12]
 80039f0:	181b      	addge	r3, r3, r0
 80039f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039f6:	bfac      	ite	ge
 80039f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039fa:	81a3      	strhlt	r3, [r4, #12]
 80039fc:	bd10      	pop	{r4, pc}

080039fe <__swrite>:
 80039fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a02:	461f      	mov	r7, r3
 8003a04:	898b      	ldrh	r3, [r1, #12]
 8003a06:	4605      	mov	r5, r0
 8003a08:	05db      	lsls	r3, r3, #23
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	d505      	bpl.n	8003a1c <__swrite+0x1e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	2200      	movs	r2, #0
 8003a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a18:	f000 f840 	bl	8003a9c <_lseek_r>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	4632      	mov	r2, r6
 8003a20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a24:	81a3      	strh	r3, [r4, #12]
 8003a26:	4628      	mov	r0, r5
 8003a28:	463b      	mov	r3, r7
 8003a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a32:	f000 b857 	b.w	8003ae4 <_write_r>

08003a36 <__sseek>:
 8003a36:	b510      	push	{r4, lr}
 8003a38:	460c      	mov	r4, r1
 8003a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3e:	f000 f82d 	bl	8003a9c <_lseek_r>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	bf15      	itete	ne
 8003a48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a52:	81a3      	strheq	r3, [r4, #12]
 8003a54:	bf18      	it	ne
 8003a56:	81a3      	strhne	r3, [r4, #12]
 8003a58:	bd10      	pop	{r4, pc}

08003a5a <__sclose>:
 8003a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5e:	f000 b80d 	b.w	8003a7c <_close_r>

08003a62 <memset>:
 8003a62:	4603      	mov	r3, r0
 8003a64:	4402      	add	r2, r0
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d100      	bne.n	8003a6c <memset+0xa>
 8003a6a:	4770      	bx	lr
 8003a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8003a70:	e7f9      	b.n	8003a66 <memset+0x4>
	...

08003a74 <_localeconv_r>:
 8003a74:	4800      	ldr	r0, [pc, #0]	@ (8003a78 <_localeconv_r+0x4>)
 8003a76:	4770      	bx	lr
 8003a78:	20000158 	.word	0x20000158

08003a7c <_close_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	2300      	movs	r3, #0
 8003a80:	4d05      	ldr	r5, [pc, #20]	@ (8003a98 <_close_r+0x1c>)
 8003a82:	4604      	mov	r4, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	602b      	str	r3, [r5, #0]
 8003a88:	f7fd fcd9 	bl	800143e <_close>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d102      	bne.n	8003a96 <_close_r+0x1a>
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	b103      	cbz	r3, 8003a96 <_close_r+0x1a>
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
 8003a98:	200003e4 	.word	0x200003e4

08003a9c <_lseek_r>:
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4d05      	ldr	r5, [pc, #20]	@ (8003abc <_lseek_r+0x20>)
 8003aa8:	602a      	str	r2, [r5, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f7fd fceb 	bl	8001486 <_lseek>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	d102      	bne.n	8003aba <_lseek_r+0x1e>
 8003ab4:	682b      	ldr	r3, [r5, #0]
 8003ab6:	b103      	cbz	r3, 8003aba <_lseek_r+0x1e>
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	200003e4 	.word	0x200003e4

08003ac0 <_read_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4d05      	ldr	r5, [pc, #20]	@ (8003ae0 <_read_r+0x20>)
 8003acc:	602a      	str	r2, [r5, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7fd fc7c 	bl	80013cc <_read>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_read_r+0x1e>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_read_r+0x1e>
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	200003e4 	.word	0x200003e4

08003ae4 <_write_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4608      	mov	r0, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	2200      	movs	r2, #0
 8003aee:	4d05      	ldr	r5, [pc, #20]	@ (8003b04 <_write_r+0x20>)
 8003af0:	602a      	str	r2, [r5, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f7fd fc87 	bl	8001406 <_write>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_write_r+0x1e>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_write_r+0x1e>
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	200003e4 	.word	0x200003e4

08003b08 <__errno>:
 8003b08:	4b01      	ldr	r3, [pc, #4]	@ (8003b10 <__errno+0x8>)
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000018 	.word	0x20000018

08003b14 <__libc_init_array>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	2600      	movs	r6, #0
 8003b18:	4d0c      	ldr	r5, [pc, #48]	@ (8003b4c <__libc_init_array+0x38>)
 8003b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8003b50 <__libc_init_array+0x3c>)
 8003b1c:	1b64      	subs	r4, r4, r5
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	42a6      	cmp	r6, r4
 8003b22:	d109      	bne.n	8003b38 <__libc_init_array+0x24>
 8003b24:	f002 f874 	bl	8005c10 <_init>
 8003b28:	2600      	movs	r6, #0
 8003b2a:	4d0a      	ldr	r5, [pc, #40]	@ (8003b54 <__libc_init_array+0x40>)
 8003b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003b58 <__libc_init_array+0x44>)
 8003b2e:	1b64      	subs	r4, r4, r5
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	42a6      	cmp	r6, r4
 8003b34:	d105      	bne.n	8003b42 <__libc_init_array+0x2e>
 8003b36:	bd70      	pop	{r4, r5, r6, pc}
 8003b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3c:	4798      	blx	r3
 8003b3e:	3601      	adds	r6, #1
 8003b40:	e7ee      	b.n	8003b20 <__libc_init_array+0xc>
 8003b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b46:	4798      	blx	r3
 8003b48:	3601      	adds	r6, #1
 8003b4a:	e7f2      	b.n	8003b32 <__libc_init_array+0x1e>
 8003b4c:	08005fe4 	.word	0x08005fe4
 8003b50:	08005fe4 	.word	0x08005fe4
 8003b54:	08005fe4 	.word	0x08005fe4
 8003b58:	08005fe8 	.word	0x08005fe8

08003b5c <__retarget_lock_init_recursive>:
 8003b5c:	4770      	bx	lr

08003b5e <__retarget_lock_acquire_recursive>:
 8003b5e:	4770      	bx	lr

08003b60 <__retarget_lock_release_recursive>:
 8003b60:	4770      	bx	lr

08003b62 <memchr>:
 8003b62:	4603      	mov	r3, r0
 8003b64:	b510      	push	{r4, lr}
 8003b66:	b2c9      	uxtb	r1, r1
 8003b68:	4402      	add	r2, r0
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	d101      	bne.n	8003b74 <memchr+0x12>
 8003b70:	2000      	movs	r0, #0
 8003b72:	e003      	b.n	8003b7c <memchr+0x1a>
 8003b74:	7804      	ldrb	r4, [r0, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	428c      	cmp	r4, r1
 8003b7a:	d1f6      	bne.n	8003b6a <memchr+0x8>
 8003b7c:	bd10      	pop	{r4, pc}

08003b7e <quorem>:
 8003b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b82:	6903      	ldr	r3, [r0, #16]
 8003b84:	690c      	ldr	r4, [r1, #16]
 8003b86:	4607      	mov	r7, r0
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	db7e      	blt.n	8003c8a <quorem+0x10c>
 8003b8c:	3c01      	subs	r4, #1
 8003b8e:	00a3      	lsls	r3, r4, #2
 8003b90:	f100 0514 	add.w	r5, r0, #20
 8003b94:	f101 0814 	add.w	r8, r1, #20
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	429a      	cmp	r2, r3
 8003bac:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bb4:	d32e      	bcc.n	8003c14 <quorem+0x96>
 8003bb6:	f04f 0a00 	mov.w	sl, #0
 8003bba:	46c4      	mov	ip, r8
 8003bbc:	46ae      	mov	lr, r5
 8003bbe:	46d3      	mov	fp, sl
 8003bc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003bc4:	b298      	uxth	r0, r3
 8003bc6:	fb06 a000 	mla	r0, r6, r0, sl
 8003bca:	0c1b      	lsrs	r3, r3, #16
 8003bcc:	0c02      	lsrs	r2, r0, #16
 8003bce:	fb06 2303 	mla	r3, r6, r3, r2
 8003bd2:	f8de 2000 	ldr.w	r2, [lr]
 8003bd6:	b280      	uxth	r0, r0
 8003bd8:	b292      	uxth	r2, r2
 8003bda:	1a12      	subs	r2, r2, r0
 8003bdc:	445a      	add	r2, fp
 8003bde:	f8de 0000 	ldr.w	r0, [lr]
 8003be2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003bec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003bf6:	45e1      	cmp	r9, ip
 8003bf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003bfc:	f84e 2b04 	str.w	r2, [lr], #4
 8003c00:	d2de      	bcs.n	8003bc0 <quorem+0x42>
 8003c02:	9b00      	ldr	r3, [sp, #0]
 8003c04:	58eb      	ldr	r3, [r5, r3]
 8003c06:	b92b      	cbnz	r3, 8003c14 <quorem+0x96>
 8003c08:	9b01      	ldr	r3, [sp, #4]
 8003c0a:	3b04      	subs	r3, #4
 8003c0c:	429d      	cmp	r5, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	d32f      	bcc.n	8003c72 <quorem+0xf4>
 8003c12:	613c      	str	r4, [r7, #16]
 8003c14:	4638      	mov	r0, r7
 8003c16:	f001 f97f 	bl	8004f18 <__mcmp>
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	db25      	blt.n	8003c6a <quorem+0xec>
 8003c1e:	4629      	mov	r1, r5
 8003c20:	2000      	movs	r0, #0
 8003c22:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c26:	f8d1 c000 	ldr.w	ip, [r1]
 8003c2a:	fa1f fe82 	uxth.w	lr, r2
 8003c2e:	fa1f f38c 	uxth.w	r3, ip
 8003c32:	eba3 030e 	sub.w	r3, r3, lr
 8003c36:	4403      	add	r3, r0
 8003c38:	0c12      	lsrs	r2, r2, #16
 8003c3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003c3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c48:	45c1      	cmp	r9, r8
 8003c4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c4e:	f841 3b04 	str.w	r3, [r1], #4
 8003c52:	d2e6      	bcs.n	8003c22 <quorem+0xa4>
 8003c54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c5c:	b922      	cbnz	r2, 8003c68 <quorem+0xea>
 8003c5e:	3b04      	subs	r3, #4
 8003c60:	429d      	cmp	r5, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	d30b      	bcc.n	8003c7e <quorem+0x100>
 8003c66:	613c      	str	r4, [r7, #16]
 8003c68:	3601      	adds	r6, #1
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	b003      	add	sp, #12
 8003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	3b04      	subs	r3, #4
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	d1cb      	bne.n	8003c12 <quorem+0x94>
 8003c7a:	3c01      	subs	r4, #1
 8003c7c:	e7c6      	b.n	8003c0c <quorem+0x8e>
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	3b04      	subs	r3, #4
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	d1ef      	bne.n	8003c66 <quorem+0xe8>
 8003c86:	3c01      	subs	r4, #1
 8003c88:	e7ea      	b.n	8003c60 <quorem+0xe2>
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	e7ee      	b.n	8003c6c <quorem+0xee>
	...

08003c90 <_dtoa_r>:
 8003c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c94:	4614      	mov	r4, r2
 8003c96:	461d      	mov	r5, r3
 8003c98:	69c7      	ldr	r7, [r0, #28]
 8003c9a:	b097      	sub	sp, #92	@ 0x5c
 8003c9c:	4681      	mov	r9, r0
 8003c9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003ca2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003ca4:	b97f      	cbnz	r7, 8003cc6 <_dtoa_r+0x36>
 8003ca6:	2010      	movs	r0, #16
 8003ca8:	f000 fe0e 	bl	80048c8 <malloc>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f8c9 001c 	str.w	r0, [r9, #28]
 8003cb2:	b920      	cbnz	r0, 8003cbe <_dtoa_r+0x2e>
 8003cb4:	21ef      	movs	r1, #239	@ 0xef
 8003cb6:	4bac      	ldr	r3, [pc, #688]	@ (8003f68 <_dtoa_r+0x2d8>)
 8003cb8:	48ac      	ldr	r0, [pc, #688]	@ (8003f6c <_dtoa_r+0x2dc>)
 8003cba:	f001 fc6d 	bl	8005598 <__assert_func>
 8003cbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003cc2:	6007      	str	r7, [r0, #0]
 8003cc4:	60c7      	str	r7, [r0, #12]
 8003cc6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003cca:	6819      	ldr	r1, [r3, #0]
 8003ccc:	b159      	cbz	r1, 8003ce6 <_dtoa_r+0x56>
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4093      	lsls	r3, r2
 8003cd4:	604a      	str	r2, [r1, #4]
 8003cd6:	608b      	str	r3, [r1, #8]
 8003cd8:	4648      	mov	r0, r9
 8003cda:	f000 feeb 	bl	8004ab4 <_Bfree>
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	1e2b      	subs	r3, r5, #0
 8003ce8:	bfaf      	iteee	ge
 8003cea:	2300      	movge	r3, #0
 8003cec:	2201      	movlt	r2, #1
 8003cee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003cf2:	9307      	strlt	r3, [sp, #28]
 8003cf4:	bfa8      	it	ge
 8003cf6:	6033      	strge	r3, [r6, #0]
 8003cf8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003cfc:	4b9c      	ldr	r3, [pc, #624]	@ (8003f70 <_dtoa_r+0x2e0>)
 8003cfe:	bfb8      	it	lt
 8003d00:	6032      	strlt	r2, [r6, #0]
 8003d02:	ea33 0308 	bics.w	r3, r3, r8
 8003d06:	d112      	bne.n	8003d2e <_dtoa_r+0x9e>
 8003d08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003d0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003d14:	4323      	orrs	r3, r4
 8003d16:	f000 855e 	beq.w	80047d6 <_dtoa_r+0xb46>
 8003d1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003d1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003f74 <_dtoa_r+0x2e4>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8560 	beq.w	80047e6 <_dtoa_r+0xb56>
 8003d26:	f10a 0303 	add.w	r3, sl, #3
 8003d2a:	f000 bd5a 	b.w	80047e2 <_dtoa_r+0xb52>
 8003d2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f7fc fe33 	bl	80009a8 <__aeabi_dcmpeq>
 8003d42:	4607      	mov	r7, r0
 8003d44:	b158      	cbz	r0, 8003d5e <_dtoa_r+0xce>
 8003d46:	2301      	movs	r3, #1
 8003d48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003d4e:	b113      	cbz	r3, 8003d56 <_dtoa_r+0xc6>
 8003d50:	4b89      	ldr	r3, [pc, #548]	@ (8003f78 <_dtoa_r+0x2e8>)
 8003d52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003f7c <_dtoa_r+0x2ec>
 8003d5a:	f000 bd44 	b.w	80047e6 <_dtoa_r+0xb56>
 8003d5e:	ab14      	add	r3, sp, #80	@ 0x50
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	ab15      	add	r3, sp, #84	@ 0x54
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	4648      	mov	r0, r9
 8003d68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003d6c:	f001 f984 	bl	8005078 <__d2b>
 8003d70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003d74:	9003      	str	r0, [sp, #12]
 8003d76:	2e00      	cmp	r6, #0
 8003d78:	d078      	beq.n	8003e6c <_dtoa_r+0x1dc>
 8003d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003d8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003d90:	9712      	str	r7, [sp, #72]	@ 0x48
 8003d92:	4619      	mov	r1, r3
 8003d94:	2200      	movs	r2, #0
 8003d96:	4b7a      	ldr	r3, [pc, #488]	@ (8003f80 <_dtoa_r+0x2f0>)
 8003d98:	f7fc f9e6 	bl	8000168 <__aeabi_dsub>
 8003d9c:	a36c      	add	r3, pc, #432	@ (adr r3, 8003f50 <_dtoa_r+0x2c0>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f7fc fb99 	bl	80004d8 <__aeabi_dmul>
 8003da6:	a36c      	add	r3, pc, #432	@ (adr r3, 8003f58 <_dtoa_r+0x2c8>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc f9de 	bl	800016c <__adddf3>
 8003db0:	4604      	mov	r4, r0
 8003db2:	4630      	mov	r0, r6
 8003db4:	460d      	mov	r5, r1
 8003db6:	f7fc fb25 	bl	8000404 <__aeabi_i2d>
 8003dba:	a369      	add	r3, pc, #420	@ (adr r3, 8003f60 <_dtoa_r+0x2d0>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fb8a 	bl	80004d8 <__aeabi_dmul>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4620      	mov	r0, r4
 8003dca:	4629      	mov	r1, r5
 8003dcc:	f7fc f9ce 	bl	800016c <__adddf3>
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	460d      	mov	r5, r1
 8003dd4:	f7fc fe30 	bl	8000a38 <__aeabi_d2iz>
 8003dd8:	2200      	movs	r2, #0
 8003dda:	4607      	mov	r7, r0
 8003ddc:	2300      	movs	r3, #0
 8003dde:	4620      	mov	r0, r4
 8003de0:	4629      	mov	r1, r5
 8003de2:	f7fc fdeb 	bl	80009bc <__aeabi_dcmplt>
 8003de6:	b140      	cbz	r0, 8003dfa <_dtoa_r+0x16a>
 8003de8:	4638      	mov	r0, r7
 8003dea:	f7fc fb0b 	bl	8000404 <__aeabi_i2d>
 8003dee:	4622      	mov	r2, r4
 8003df0:	462b      	mov	r3, r5
 8003df2:	f7fc fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8003df6:	b900      	cbnz	r0, 8003dfa <_dtoa_r+0x16a>
 8003df8:	3f01      	subs	r7, #1
 8003dfa:	2f16      	cmp	r7, #22
 8003dfc:	d854      	bhi.n	8003ea8 <_dtoa_r+0x218>
 8003dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e02:	4b60      	ldr	r3, [pc, #384]	@ (8003f84 <_dtoa_r+0x2f4>)
 8003e04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f7fc fdd6 	bl	80009bc <__aeabi_dcmplt>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d04b      	beq.n	8003eac <_dtoa_r+0x21c>
 8003e14:	2300      	movs	r3, #0
 8003e16:	3f01      	subs	r7, #1
 8003e18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003e1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e1c:	1b9b      	subs	r3, r3, r6
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	bf49      	itett	mi
 8003e22:	f1c3 0301 	rsbmi	r3, r3, #1
 8003e26:	2300      	movpl	r3, #0
 8003e28:	9304      	strmi	r3, [sp, #16]
 8003e2a:	2300      	movmi	r3, #0
 8003e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e2e:	bf54      	ite	pl
 8003e30:	9304      	strpl	r3, [sp, #16]
 8003e32:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003e34:	2f00      	cmp	r7, #0
 8003e36:	db3b      	blt.n	8003eb0 <_dtoa_r+0x220>
 8003e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e3a:	970e      	str	r7, [sp, #56]	@ 0x38
 8003e3c:	443b      	add	r3, r7
 8003e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e40:	2300      	movs	r3, #0
 8003e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003e46:	2b09      	cmp	r3, #9
 8003e48:	d865      	bhi.n	8003f16 <_dtoa_r+0x286>
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	bfc4      	itt	gt
 8003e4e:	3b04      	subgt	r3, #4
 8003e50:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003e52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003e54:	bfc8      	it	gt
 8003e56:	2400      	movgt	r4, #0
 8003e58:	f1a3 0302 	sub.w	r3, r3, #2
 8003e5c:	bfd8      	it	le
 8003e5e:	2401      	movle	r4, #1
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d864      	bhi.n	8003f2e <_dtoa_r+0x29e>
 8003e64:	e8df f003 	tbb	[pc, r3]
 8003e68:	2c385553 	.word	0x2c385553
 8003e6c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003e70:	441e      	add	r6, r3
 8003e72:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	bfc1      	itttt	gt
 8003e7a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003e7e:	fa08 f803 	lslgt.w	r8, r8, r3
 8003e82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003e86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003e8a:	bfd6      	itet	le
 8003e8c:	f1c3 0320 	rsble	r3, r3, #32
 8003e90:	ea48 0003 	orrgt.w	r0, r8, r3
 8003e94:	fa04 f003 	lslle.w	r0, r4, r3
 8003e98:	f7fc faa4 	bl	80003e4 <__aeabi_ui2d>
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003ea2:	3e01      	subs	r6, #1
 8003ea4:	9212      	str	r2, [sp, #72]	@ 0x48
 8003ea6:	e774      	b.n	8003d92 <_dtoa_r+0x102>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e7b5      	b.n	8003e18 <_dtoa_r+0x188>
 8003eac:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003eae:	e7b4      	b.n	8003e1a <_dtoa_r+0x18a>
 8003eb0:	9b04      	ldr	r3, [sp, #16]
 8003eb2:	1bdb      	subs	r3, r3, r7
 8003eb4:	9304      	str	r3, [sp, #16]
 8003eb6:	427b      	negs	r3, r7
 8003eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8003eba:	2300      	movs	r3, #0
 8003ebc:	930e      	str	r3, [sp, #56]	@ 0x38
 8003ebe:	e7c1      	b.n	8003e44 <_dtoa_r+0x1b4>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ec4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ec6:	eb07 0b03 	add.w	fp, r7, r3
 8003eca:	f10b 0301 	add.w	r3, fp, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	9308      	str	r3, [sp, #32]
 8003ed2:	bfb8      	it	lt
 8003ed4:	2301      	movlt	r3, #1
 8003ed6:	e006      	b.n	8003ee6 <_dtoa_r+0x256>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003edc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	dd28      	ble.n	8003f34 <_dtoa_r+0x2a4>
 8003ee2:	469b      	mov	fp, r3
 8003ee4:	9308      	str	r3, [sp, #32]
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	2204      	movs	r2, #4
 8003eea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003eee:	f102 0514 	add.w	r5, r2, #20
 8003ef2:	429d      	cmp	r5, r3
 8003ef4:	d926      	bls.n	8003f44 <_dtoa_r+0x2b4>
 8003ef6:	6041      	str	r1, [r0, #4]
 8003ef8:	4648      	mov	r0, r9
 8003efa:	f000 fd9b 	bl	8004a34 <_Balloc>
 8003efe:	4682      	mov	sl, r0
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d143      	bne.n	8003f8c <_dtoa_r+0x2fc>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <_dtoa_r+0x2f8>)
 8003f0c:	e6d4      	b.n	8003cb8 <_dtoa_r+0x28>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e7e3      	b.n	8003eda <_dtoa_r+0x24a>
 8003f12:	2300      	movs	r3, #0
 8003f14:	e7d5      	b.n	8003ec2 <_dtoa_r+0x232>
 8003f16:	2401      	movs	r4, #1
 8003f18:	2300      	movs	r3, #0
 8003f1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003f1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8003f1e:	f04f 3bff 	mov.w	fp, #4294967295
 8003f22:	2200      	movs	r2, #0
 8003f24:	2312      	movs	r3, #18
 8003f26:	f8cd b020 	str.w	fp, [sp, #32]
 8003f2a:	9221      	str	r2, [sp, #132]	@ 0x84
 8003f2c:	e7db      	b.n	8003ee6 <_dtoa_r+0x256>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f32:	e7f4      	b.n	8003f1e <_dtoa_r+0x28e>
 8003f34:	f04f 0b01 	mov.w	fp, #1
 8003f38:	465b      	mov	r3, fp
 8003f3a:	f8cd b020 	str.w	fp, [sp, #32]
 8003f3e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003f42:	e7d0      	b.n	8003ee6 <_dtoa_r+0x256>
 8003f44:	3101      	adds	r1, #1
 8003f46:	0052      	lsls	r2, r2, #1
 8003f48:	e7d1      	b.n	8003eee <_dtoa_r+0x25e>
 8003f4a:	bf00      	nop
 8003f4c:	f3af 8000 	nop.w
 8003f50:	636f4361 	.word	0x636f4361
 8003f54:	3fd287a7 	.word	0x3fd287a7
 8003f58:	8b60c8b3 	.word	0x8b60c8b3
 8003f5c:	3fc68a28 	.word	0x3fc68a28
 8003f60:	509f79fb 	.word	0x509f79fb
 8003f64:	3fd34413 	.word	0x3fd34413
 8003f68:	08005cab 	.word	0x08005cab
 8003f6c:	08005cc2 	.word	0x08005cc2
 8003f70:	7ff00000 	.word	0x7ff00000
 8003f74:	08005ca7 	.word	0x08005ca7
 8003f78:	08005c7b 	.word	0x08005c7b
 8003f7c:	08005c7a 	.word	0x08005c7a
 8003f80:	3ff80000 	.word	0x3ff80000
 8003f84:	08005e10 	.word	0x08005e10
 8003f88:	08005d1a 	.word	0x08005d1a
 8003f8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003f90:	6018      	str	r0, [r3, #0]
 8003f92:	9b08      	ldr	r3, [sp, #32]
 8003f94:	2b0e      	cmp	r3, #14
 8003f96:	f200 80a1 	bhi.w	80040dc <_dtoa_r+0x44c>
 8003f9a:	2c00      	cmp	r4, #0
 8003f9c:	f000 809e 	beq.w	80040dc <_dtoa_r+0x44c>
 8003fa0:	2f00      	cmp	r7, #0
 8003fa2:	dd33      	ble.n	800400c <_dtoa_r+0x37c>
 8003fa4:	4b9c      	ldr	r3, [pc, #624]	@ (8004218 <_dtoa_r+0x588>)
 8003fa6:	f007 020f 	and.w	r2, r7, #15
 8003faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fae:	05f8      	lsls	r0, r7, #23
 8003fb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003fb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003fbc:	d516      	bpl.n	8003fec <_dtoa_r+0x35c>
 8003fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003fc2:	4b96      	ldr	r3, [pc, #600]	@ (800421c <_dtoa_r+0x58c>)
 8003fc4:	2603      	movs	r6, #3
 8003fc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fca:	f7fc fbaf 	bl	800072c <__aeabi_ddiv>
 8003fce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003fd2:	f004 040f 	and.w	r4, r4, #15
 8003fd6:	4d91      	ldr	r5, [pc, #580]	@ (800421c <_dtoa_r+0x58c>)
 8003fd8:	b954      	cbnz	r4, 8003ff0 <_dtoa_r+0x360>
 8003fda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003fde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fe2:	f7fc fba3 	bl	800072c <__aeabi_ddiv>
 8003fe6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003fea:	e028      	b.n	800403e <_dtoa_r+0x3ae>
 8003fec:	2602      	movs	r6, #2
 8003fee:	e7f2      	b.n	8003fd6 <_dtoa_r+0x346>
 8003ff0:	07e1      	lsls	r1, r4, #31
 8003ff2:	d508      	bpl.n	8004006 <_dtoa_r+0x376>
 8003ff4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003ff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ffc:	f7fc fa6c 	bl	80004d8 <__aeabi_dmul>
 8004000:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004004:	3601      	adds	r6, #1
 8004006:	1064      	asrs	r4, r4, #1
 8004008:	3508      	adds	r5, #8
 800400a:	e7e5      	b.n	8003fd8 <_dtoa_r+0x348>
 800400c:	f000 80af 	beq.w	800416e <_dtoa_r+0x4de>
 8004010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004014:	427c      	negs	r4, r7
 8004016:	4b80      	ldr	r3, [pc, #512]	@ (8004218 <_dtoa_r+0x588>)
 8004018:	f004 020f 	and.w	r2, r4, #15
 800401c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f7fc fa58 	bl	80004d8 <__aeabi_dmul>
 8004028:	2602      	movs	r6, #2
 800402a:	2300      	movs	r3, #0
 800402c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004030:	4d7a      	ldr	r5, [pc, #488]	@ (800421c <_dtoa_r+0x58c>)
 8004032:	1124      	asrs	r4, r4, #4
 8004034:	2c00      	cmp	r4, #0
 8004036:	f040 808f 	bne.w	8004158 <_dtoa_r+0x4c8>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1d3      	bne.n	8003fe6 <_dtoa_r+0x356>
 800403e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004042:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8094 	beq.w	8004172 <_dtoa_r+0x4e2>
 800404a:	2200      	movs	r2, #0
 800404c:	4620      	mov	r0, r4
 800404e:	4629      	mov	r1, r5
 8004050:	4b73      	ldr	r3, [pc, #460]	@ (8004220 <_dtoa_r+0x590>)
 8004052:	f7fc fcb3 	bl	80009bc <__aeabi_dcmplt>
 8004056:	2800      	cmp	r0, #0
 8004058:	f000 808b 	beq.w	8004172 <_dtoa_r+0x4e2>
 800405c:	9b08      	ldr	r3, [sp, #32]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8087 	beq.w	8004172 <_dtoa_r+0x4e2>
 8004064:	f1bb 0f00 	cmp.w	fp, #0
 8004068:	dd34      	ble.n	80040d4 <_dtoa_r+0x444>
 800406a:	4620      	mov	r0, r4
 800406c:	2200      	movs	r2, #0
 800406e:	4629      	mov	r1, r5
 8004070:	4b6c      	ldr	r3, [pc, #432]	@ (8004224 <_dtoa_r+0x594>)
 8004072:	f7fc fa31 	bl	80004d8 <__aeabi_dmul>
 8004076:	465c      	mov	r4, fp
 8004078:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800407c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004080:	3601      	adds	r6, #1
 8004082:	4630      	mov	r0, r6
 8004084:	f7fc f9be 	bl	8000404 <__aeabi_i2d>
 8004088:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800408c:	f7fc fa24 	bl	80004d8 <__aeabi_dmul>
 8004090:	2200      	movs	r2, #0
 8004092:	4b65      	ldr	r3, [pc, #404]	@ (8004228 <_dtoa_r+0x598>)
 8004094:	f7fc f86a 	bl	800016c <__adddf3>
 8004098:	4605      	mov	r5, r0
 800409a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800409e:	2c00      	cmp	r4, #0
 80040a0:	d16a      	bne.n	8004178 <_dtoa_r+0x4e8>
 80040a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040a6:	2200      	movs	r2, #0
 80040a8:	4b60      	ldr	r3, [pc, #384]	@ (800422c <_dtoa_r+0x59c>)
 80040aa:	f7fc f85d 	bl	8000168 <__aeabi_dsub>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80040b6:	462a      	mov	r2, r5
 80040b8:	4633      	mov	r3, r6
 80040ba:	f7fc fc9d 	bl	80009f8 <__aeabi_dcmpgt>
 80040be:	2800      	cmp	r0, #0
 80040c0:	f040 8298 	bne.w	80045f4 <_dtoa_r+0x964>
 80040c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040c8:	462a      	mov	r2, r5
 80040ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80040ce:	f7fc fc75 	bl	80009bc <__aeabi_dcmplt>
 80040d2:	bb38      	cbnz	r0, 8004124 <_dtoa_r+0x494>
 80040d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80040d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80040dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f2c0 8157 	blt.w	8004392 <_dtoa_r+0x702>
 80040e4:	2f0e      	cmp	r7, #14
 80040e6:	f300 8154 	bgt.w	8004392 <_dtoa_r+0x702>
 80040ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004218 <_dtoa_r+0x588>)
 80040ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80040f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f280 80e5 	bge.w	80042ca <_dtoa_r+0x63a>
 8004100:	9b08      	ldr	r3, [sp, #32]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f300 80e1 	bgt.w	80042ca <_dtoa_r+0x63a>
 8004108:	d10c      	bne.n	8004124 <_dtoa_r+0x494>
 800410a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800410e:	2200      	movs	r2, #0
 8004110:	4b46      	ldr	r3, [pc, #280]	@ (800422c <_dtoa_r+0x59c>)
 8004112:	f7fc f9e1 	bl	80004d8 <__aeabi_dmul>
 8004116:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800411a:	f7fc fc63 	bl	80009e4 <__aeabi_dcmpge>
 800411e:	2800      	cmp	r0, #0
 8004120:	f000 8266 	beq.w	80045f0 <_dtoa_r+0x960>
 8004124:	2400      	movs	r4, #0
 8004126:	4625      	mov	r5, r4
 8004128:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800412a:	4656      	mov	r6, sl
 800412c:	ea6f 0803 	mvn.w	r8, r3
 8004130:	2700      	movs	r7, #0
 8004132:	4621      	mov	r1, r4
 8004134:	4648      	mov	r0, r9
 8004136:	f000 fcbd 	bl	8004ab4 <_Bfree>
 800413a:	2d00      	cmp	r5, #0
 800413c:	f000 80bd 	beq.w	80042ba <_dtoa_r+0x62a>
 8004140:	b12f      	cbz	r7, 800414e <_dtoa_r+0x4be>
 8004142:	42af      	cmp	r7, r5
 8004144:	d003      	beq.n	800414e <_dtoa_r+0x4be>
 8004146:	4639      	mov	r1, r7
 8004148:	4648      	mov	r0, r9
 800414a:	f000 fcb3 	bl	8004ab4 <_Bfree>
 800414e:	4629      	mov	r1, r5
 8004150:	4648      	mov	r0, r9
 8004152:	f000 fcaf 	bl	8004ab4 <_Bfree>
 8004156:	e0b0      	b.n	80042ba <_dtoa_r+0x62a>
 8004158:	07e2      	lsls	r2, r4, #31
 800415a:	d505      	bpl.n	8004168 <_dtoa_r+0x4d8>
 800415c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004160:	f7fc f9ba 	bl	80004d8 <__aeabi_dmul>
 8004164:	2301      	movs	r3, #1
 8004166:	3601      	adds	r6, #1
 8004168:	1064      	asrs	r4, r4, #1
 800416a:	3508      	adds	r5, #8
 800416c:	e762      	b.n	8004034 <_dtoa_r+0x3a4>
 800416e:	2602      	movs	r6, #2
 8004170:	e765      	b.n	800403e <_dtoa_r+0x3ae>
 8004172:	46b8      	mov	r8, r7
 8004174:	9c08      	ldr	r4, [sp, #32]
 8004176:	e784      	b.n	8004082 <_dtoa_r+0x3f2>
 8004178:	4b27      	ldr	r3, [pc, #156]	@ (8004218 <_dtoa_r+0x588>)
 800417a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800417c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004180:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004184:	4454      	add	r4, sl
 8004186:	2900      	cmp	r1, #0
 8004188:	d054      	beq.n	8004234 <_dtoa_r+0x5a4>
 800418a:	2000      	movs	r0, #0
 800418c:	4928      	ldr	r1, [pc, #160]	@ (8004230 <_dtoa_r+0x5a0>)
 800418e:	f7fc facd 	bl	800072c <__aeabi_ddiv>
 8004192:	4633      	mov	r3, r6
 8004194:	462a      	mov	r2, r5
 8004196:	f7fb ffe7 	bl	8000168 <__aeabi_dsub>
 800419a:	4656      	mov	r6, sl
 800419c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041a4:	f7fc fc48 	bl	8000a38 <__aeabi_d2iz>
 80041a8:	4605      	mov	r5, r0
 80041aa:	f7fc f92b 	bl	8000404 <__aeabi_i2d>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041b6:	f7fb ffd7 	bl	8000168 <__aeabi_dsub>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	3530      	adds	r5, #48	@ 0x30
 80041c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041c8:	f806 5b01 	strb.w	r5, [r6], #1
 80041cc:	f7fc fbf6 	bl	80009bc <__aeabi_dcmplt>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d172      	bne.n	80042ba <_dtoa_r+0x62a>
 80041d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041d8:	2000      	movs	r0, #0
 80041da:	4911      	ldr	r1, [pc, #68]	@ (8004220 <_dtoa_r+0x590>)
 80041dc:	f7fb ffc4 	bl	8000168 <__aeabi_dsub>
 80041e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041e4:	f7fc fbea 	bl	80009bc <__aeabi_dcmplt>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	f040 80b4 	bne.w	8004356 <_dtoa_r+0x6c6>
 80041ee:	42a6      	cmp	r6, r4
 80041f0:	f43f af70 	beq.w	80040d4 <_dtoa_r+0x444>
 80041f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80041f8:	2200      	movs	r2, #0
 80041fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <_dtoa_r+0x594>)
 80041fc:	f7fc f96c 	bl	80004d8 <__aeabi_dmul>
 8004200:	2200      	movs	r2, #0
 8004202:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <_dtoa_r+0x594>)
 800420c:	f7fc f964 	bl	80004d8 <__aeabi_dmul>
 8004210:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004214:	e7c4      	b.n	80041a0 <_dtoa_r+0x510>
 8004216:	bf00      	nop
 8004218:	08005e10 	.word	0x08005e10
 800421c:	08005de8 	.word	0x08005de8
 8004220:	3ff00000 	.word	0x3ff00000
 8004224:	40240000 	.word	0x40240000
 8004228:	401c0000 	.word	0x401c0000
 800422c:	40140000 	.word	0x40140000
 8004230:	3fe00000 	.word	0x3fe00000
 8004234:	4631      	mov	r1, r6
 8004236:	4628      	mov	r0, r5
 8004238:	f7fc f94e 	bl	80004d8 <__aeabi_dmul>
 800423c:	4656      	mov	r6, sl
 800423e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004242:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004248:	f7fc fbf6 	bl	8000a38 <__aeabi_d2iz>
 800424c:	4605      	mov	r5, r0
 800424e:	f7fc f8d9 	bl	8000404 <__aeabi_i2d>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800425a:	f7fb ff85 	bl	8000168 <__aeabi_dsub>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	3530      	adds	r5, #48	@ 0x30
 8004264:	f806 5b01 	strb.w	r5, [r6], #1
 8004268:	42a6      	cmp	r6, r4
 800426a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	d124      	bne.n	80042be <_dtoa_r+0x62e>
 8004274:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004278:	4bae      	ldr	r3, [pc, #696]	@ (8004534 <_dtoa_r+0x8a4>)
 800427a:	f7fb ff77 	bl	800016c <__adddf3>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004286:	f7fc fbb7 	bl	80009f8 <__aeabi_dcmpgt>
 800428a:	2800      	cmp	r0, #0
 800428c:	d163      	bne.n	8004356 <_dtoa_r+0x6c6>
 800428e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004292:	2000      	movs	r0, #0
 8004294:	49a7      	ldr	r1, [pc, #668]	@ (8004534 <_dtoa_r+0x8a4>)
 8004296:	f7fb ff67 	bl	8000168 <__aeabi_dsub>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042a2:	f7fc fb8b 	bl	80009bc <__aeabi_dcmplt>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	f43f af14 	beq.w	80040d4 <_dtoa_r+0x444>
 80042ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80042ae:	1e73      	subs	r3, r6, #1
 80042b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80042b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80042b6:	2b30      	cmp	r3, #48	@ 0x30
 80042b8:	d0f8      	beq.n	80042ac <_dtoa_r+0x61c>
 80042ba:	4647      	mov	r7, r8
 80042bc:	e03b      	b.n	8004336 <_dtoa_r+0x6a6>
 80042be:	4b9e      	ldr	r3, [pc, #632]	@ (8004538 <_dtoa_r+0x8a8>)
 80042c0:	f7fc f90a 	bl	80004d8 <__aeabi_dmul>
 80042c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042c8:	e7bc      	b.n	8004244 <_dtoa_r+0x5b4>
 80042ca:	4656      	mov	r6, sl
 80042cc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80042d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042d4:	4620      	mov	r0, r4
 80042d6:	4629      	mov	r1, r5
 80042d8:	f7fc fa28 	bl	800072c <__aeabi_ddiv>
 80042dc:	f7fc fbac 	bl	8000a38 <__aeabi_d2iz>
 80042e0:	4680      	mov	r8, r0
 80042e2:	f7fc f88f 	bl	8000404 <__aeabi_i2d>
 80042e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042ea:	f7fc f8f5 	bl	80004d8 <__aeabi_dmul>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4620      	mov	r0, r4
 80042f4:	4629      	mov	r1, r5
 80042f6:	f7fb ff37 	bl	8000168 <__aeabi_dsub>
 80042fa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80042fe:	9d08      	ldr	r5, [sp, #32]
 8004300:	f806 4b01 	strb.w	r4, [r6], #1
 8004304:	eba6 040a 	sub.w	r4, r6, sl
 8004308:	42a5      	cmp	r5, r4
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	d133      	bne.n	8004378 <_dtoa_r+0x6e8>
 8004310:	f7fb ff2c 	bl	800016c <__adddf3>
 8004314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004318:	4604      	mov	r4, r0
 800431a:	460d      	mov	r5, r1
 800431c:	f7fc fb6c 	bl	80009f8 <__aeabi_dcmpgt>
 8004320:	b9c0      	cbnz	r0, 8004354 <_dtoa_r+0x6c4>
 8004322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004326:	4620      	mov	r0, r4
 8004328:	4629      	mov	r1, r5
 800432a:	f7fc fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800432e:	b110      	cbz	r0, 8004336 <_dtoa_r+0x6a6>
 8004330:	f018 0f01 	tst.w	r8, #1
 8004334:	d10e      	bne.n	8004354 <_dtoa_r+0x6c4>
 8004336:	4648      	mov	r0, r9
 8004338:	9903      	ldr	r1, [sp, #12]
 800433a:	f000 fbbb 	bl	8004ab4 <_Bfree>
 800433e:	2300      	movs	r3, #0
 8004340:	7033      	strb	r3, [r6, #0]
 8004342:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004344:	3701      	adds	r7, #1
 8004346:	601f      	str	r7, [r3, #0]
 8004348:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 824b 	beq.w	80047e6 <_dtoa_r+0xb56>
 8004350:	601e      	str	r6, [r3, #0]
 8004352:	e248      	b.n	80047e6 <_dtoa_r+0xb56>
 8004354:	46b8      	mov	r8, r7
 8004356:	4633      	mov	r3, r6
 8004358:	461e      	mov	r6, r3
 800435a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800435e:	2a39      	cmp	r2, #57	@ 0x39
 8004360:	d106      	bne.n	8004370 <_dtoa_r+0x6e0>
 8004362:	459a      	cmp	sl, r3
 8004364:	d1f8      	bne.n	8004358 <_dtoa_r+0x6c8>
 8004366:	2230      	movs	r2, #48	@ 0x30
 8004368:	f108 0801 	add.w	r8, r8, #1
 800436c:	f88a 2000 	strb.w	r2, [sl]
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	3201      	adds	r2, #1
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	e7a0      	b.n	80042ba <_dtoa_r+0x62a>
 8004378:	2200      	movs	r2, #0
 800437a:	4b6f      	ldr	r3, [pc, #444]	@ (8004538 <_dtoa_r+0x8a8>)
 800437c:	f7fc f8ac 	bl	80004d8 <__aeabi_dmul>
 8004380:	2200      	movs	r2, #0
 8004382:	2300      	movs	r3, #0
 8004384:	4604      	mov	r4, r0
 8004386:	460d      	mov	r5, r1
 8004388:	f7fc fb0e 	bl	80009a8 <__aeabi_dcmpeq>
 800438c:	2800      	cmp	r0, #0
 800438e:	d09f      	beq.n	80042d0 <_dtoa_r+0x640>
 8004390:	e7d1      	b.n	8004336 <_dtoa_r+0x6a6>
 8004392:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004394:	2a00      	cmp	r2, #0
 8004396:	f000 80ea 	beq.w	800456e <_dtoa_r+0x8de>
 800439a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800439c:	2a01      	cmp	r2, #1
 800439e:	f300 80cd 	bgt.w	800453c <_dtoa_r+0x8ac>
 80043a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80043a4:	2a00      	cmp	r2, #0
 80043a6:	f000 80c1 	beq.w	800452c <_dtoa_r+0x89c>
 80043aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80043ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80043b0:	9e04      	ldr	r6, [sp, #16]
 80043b2:	9a04      	ldr	r2, [sp, #16]
 80043b4:	2101      	movs	r1, #1
 80043b6:	441a      	add	r2, r3
 80043b8:	9204      	str	r2, [sp, #16]
 80043ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043bc:	4648      	mov	r0, r9
 80043be:	441a      	add	r2, r3
 80043c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80043c2:	f000 fc2b 	bl	8004c1c <__i2b>
 80043c6:	4605      	mov	r5, r0
 80043c8:	b166      	cbz	r6, 80043e4 <_dtoa_r+0x754>
 80043ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	dd09      	ble.n	80043e4 <_dtoa_r+0x754>
 80043d0:	42b3      	cmp	r3, r6
 80043d2:	bfa8      	it	ge
 80043d4:	4633      	movge	r3, r6
 80043d6:	9a04      	ldr	r2, [sp, #16]
 80043d8:	1af6      	subs	r6, r6, r3
 80043da:	1ad2      	subs	r2, r2, r3
 80043dc:	9204      	str	r2, [sp, #16]
 80043de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043e6:	b30b      	cbz	r3, 800442c <_dtoa_r+0x79c>
 80043e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80c6 	beq.w	800457c <_dtoa_r+0x8ec>
 80043f0:	2c00      	cmp	r4, #0
 80043f2:	f000 80c0 	beq.w	8004576 <_dtoa_r+0x8e6>
 80043f6:	4629      	mov	r1, r5
 80043f8:	4622      	mov	r2, r4
 80043fa:	4648      	mov	r0, r9
 80043fc:	f000 fcc6 	bl	8004d8c <__pow5mult>
 8004400:	9a03      	ldr	r2, [sp, #12]
 8004402:	4601      	mov	r1, r0
 8004404:	4605      	mov	r5, r0
 8004406:	4648      	mov	r0, r9
 8004408:	f000 fc1e 	bl	8004c48 <__multiply>
 800440c:	9903      	ldr	r1, [sp, #12]
 800440e:	4680      	mov	r8, r0
 8004410:	4648      	mov	r0, r9
 8004412:	f000 fb4f 	bl	8004ab4 <_Bfree>
 8004416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004418:	1b1b      	subs	r3, r3, r4
 800441a:	930a      	str	r3, [sp, #40]	@ 0x28
 800441c:	f000 80b1 	beq.w	8004582 <_dtoa_r+0x8f2>
 8004420:	4641      	mov	r1, r8
 8004422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004424:	4648      	mov	r0, r9
 8004426:	f000 fcb1 	bl	8004d8c <__pow5mult>
 800442a:	9003      	str	r0, [sp, #12]
 800442c:	2101      	movs	r1, #1
 800442e:	4648      	mov	r0, r9
 8004430:	f000 fbf4 	bl	8004c1c <__i2b>
 8004434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004436:	4604      	mov	r4, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 81d8 	beq.w	80047ee <_dtoa_r+0xb5e>
 800443e:	461a      	mov	r2, r3
 8004440:	4601      	mov	r1, r0
 8004442:	4648      	mov	r0, r9
 8004444:	f000 fca2 	bl	8004d8c <__pow5mult>
 8004448:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800444a:	4604      	mov	r4, r0
 800444c:	2b01      	cmp	r3, #1
 800444e:	f300 809f 	bgt.w	8004590 <_dtoa_r+0x900>
 8004452:	9b06      	ldr	r3, [sp, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 8097 	bne.w	8004588 <_dtoa_r+0x8f8>
 800445a:	9b07      	ldr	r3, [sp, #28]
 800445c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004460:	2b00      	cmp	r3, #0
 8004462:	f040 8093 	bne.w	800458c <_dtoa_r+0x8fc>
 8004466:	9b07      	ldr	r3, [sp, #28]
 8004468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800446c:	0d1b      	lsrs	r3, r3, #20
 800446e:	051b      	lsls	r3, r3, #20
 8004470:	b133      	cbz	r3, 8004480 <_dtoa_r+0x7f0>
 8004472:	9b04      	ldr	r3, [sp, #16]
 8004474:	3301      	adds	r3, #1
 8004476:	9304      	str	r3, [sp, #16]
 8004478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800447a:	3301      	adds	r3, #1
 800447c:	9309      	str	r3, [sp, #36]	@ 0x24
 800447e:	2301      	movs	r3, #1
 8004480:	930a      	str	r3, [sp, #40]	@ 0x28
 8004482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 81b8 	beq.w	80047fa <_dtoa_r+0xb6a>
 800448a:	6923      	ldr	r3, [r4, #16]
 800448c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004490:	6918      	ldr	r0, [r3, #16]
 8004492:	f000 fb77 	bl	8004b84 <__hi0bits>
 8004496:	f1c0 0020 	rsb	r0, r0, #32
 800449a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800449c:	4418      	add	r0, r3
 800449e:	f010 001f 	ands.w	r0, r0, #31
 80044a2:	f000 8082 	beq.w	80045aa <_dtoa_r+0x91a>
 80044a6:	f1c0 0320 	rsb	r3, r0, #32
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	dd73      	ble.n	8004596 <_dtoa_r+0x906>
 80044ae:	9b04      	ldr	r3, [sp, #16]
 80044b0:	f1c0 001c 	rsb	r0, r0, #28
 80044b4:	4403      	add	r3, r0
 80044b6:	9304      	str	r3, [sp, #16]
 80044b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044ba:	4406      	add	r6, r0
 80044bc:	4403      	add	r3, r0
 80044be:	9309      	str	r3, [sp, #36]	@ 0x24
 80044c0:	9b04      	ldr	r3, [sp, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	dd05      	ble.n	80044d2 <_dtoa_r+0x842>
 80044c6:	461a      	mov	r2, r3
 80044c8:	4648      	mov	r0, r9
 80044ca:	9903      	ldr	r1, [sp, #12]
 80044cc:	f000 fcb8 	bl	8004e40 <__lshift>
 80044d0:	9003      	str	r0, [sp, #12]
 80044d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	dd05      	ble.n	80044e4 <_dtoa_r+0x854>
 80044d8:	4621      	mov	r1, r4
 80044da:	461a      	mov	r2, r3
 80044dc:	4648      	mov	r0, r9
 80044de:	f000 fcaf 	bl	8004e40 <__lshift>
 80044e2:	4604      	mov	r4, r0
 80044e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d061      	beq.n	80045ae <_dtoa_r+0x91e>
 80044ea:	4621      	mov	r1, r4
 80044ec:	9803      	ldr	r0, [sp, #12]
 80044ee:	f000 fd13 	bl	8004f18 <__mcmp>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	da5b      	bge.n	80045ae <_dtoa_r+0x91e>
 80044f6:	2300      	movs	r3, #0
 80044f8:	220a      	movs	r2, #10
 80044fa:	4648      	mov	r0, r9
 80044fc:	9903      	ldr	r1, [sp, #12]
 80044fe:	f000 fafb 	bl	8004af8 <__multadd>
 8004502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004504:	f107 38ff 	add.w	r8, r7, #4294967295
 8004508:	9003      	str	r0, [sp, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8177 	beq.w	80047fe <_dtoa_r+0xb6e>
 8004510:	4629      	mov	r1, r5
 8004512:	2300      	movs	r3, #0
 8004514:	220a      	movs	r2, #10
 8004516:	4648      	mov	r0, r9
 8004518:	f000 faee 	bl	8004af8 <__multadd>
 800451c:	f1bb 0f00 	cmp.w	fp, #0
 8004520:	4605      	mov	r5, r0
 8004522:	dc6f      	bgt.n	8004604 <_dtoa_r+0x974>
 8004524:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004526:	2b02      	cmp	r3, #2
 8004528:	dc49      	bgt.n	80045be <_dtoa_r+0x92e>
 800452a:	e06b      	b.n	8004604 <_dtoa_r+0x974>
 800452c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800452e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004532:	e73c      	b.n	80043ae <_dtoa_r+0x71e>
 8004534:	3fe00000 	.word	0x3fe00000
 8004538:	40240000 	.word	0x40240000
 800453c:	9b08      	ldr	r3, [sp, #32]
 800453e:	1e5c      	subs	r4, r3, #1
 8004540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004542:	42a3      	cmp	r3, r4
 8004544:	db09      	blt.n	800455a <_dtoa_r+0x8ca>
 8004546:	1b1c      	subs	r4, r3, r4
 8004548:	9b08      	ldr	r3, [sp, #32]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f6bf af30 	bge.w	80043b0 <_dtoa_r+0x720>
 8004550:	9b04      	ldr	r3, [sp, #16]
 8004552:	9a08      	ldr	r2, [sp, #32]
 8004554:	1a9e      	subs	r6, r3, r2
 8004556:	2300      	movs	r3, #0
 8004558:	e72b      	b.n	80043b2 <_dtoa_r+0x722>
 800455a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800455c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800455e:	1ae3      	subs	r3, r4, r3
 8004560:	441a      	add	r2, r3
 8004562:	940a      	str	r4, [sp, #40]	@ 0x28
 8004564:	9e04      	ldr	r6, [sp, #16]
 8004566:	2400      	movs	r4, #0
 8004568:	9b08      	ldr	r3, [sp, #32]
 800456a:	920e      	str	r2, [sp, #56]	@ 0x38
 800456c:	e721      	b.n	80043b2 <_dtoa_r+0x722>
 800456e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004570:	9e04      	ldr	r6, [sp, #16]
 8004572:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004574:	e728      	b.n	80043c8 <_dtoa_r+0x738>
 8004576:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800457a:	e751      	b.n	8004420 <_dtoa_r+0x790>
 800457c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800457e:	9903      	ldr	r1, [sp, #12]
 8004580:	e750      	b.n	8004424 <_dtoa_r+0x794>
 8004582:	f8cd 800c 	str.w	r8, [sp, #12]
 8004586:	e751      	b.n	800442c <_dtoa_r+0x79c>
 8004588:	2300      	movs	r3, #0
 800458a:	e779      	b.n	8004480 <_dtoa_r+0x7f0>
 800458c:	9b06      	ldr	r3, [sp, #24]
 800458e:	e777      	b.n	8004480 <_dtoa_r+0x7f0>
 8004590:	2300      	movs	r3, #0
 8004592:	930a      	str	r3, [sp, #40]	@ 0x28
 8004594:	e779      	b.n	800448a <_dtoa_r+0x7fa>
 8004596:	d093      	beq.n	80044c0 <_dtoa_r+0x830>
 8004598:	9a04      	ldr	r2, [sp, #16]
 800459a:	331c      	adds	r3, #28
 800459c:	441a      	add	r2, r3
 800459e:	9204      	str	r2, [sp, #16]
 80045a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045a2:	441e      	add	r6, r3
 80045a4:	441a      	add	r2, r3
 80045a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80045a8:	e78a      	b.n	80044c0 <_dtoa_r+0x830>
 80045aa:	4603      	mov	r3, r0
 80045ac:	e7f4      	b.n	8004598 <_dtoa_r+0x908>
 80045ae:	9b08      	ldr	r3, [sp, #32]
 80045b0:	46b8      	mov	r8, r7
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	dc20      	bgt.n	80045f8 <_dtoa_r+0x968>
 80045b6:	469b      	mov	fp, r3
 80045b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	dd1e      	ble.n	80045fc <_dtoa_r+0x96c>
 80045be:	f1bb 0f00 	cmp.w	fp, #0
 80045c2:	f47f adb1 	bne.w	8004128 <_dtoa_r+0x498>
 80045c6:	4621      	mov	r1, r4
 80045c8:	465b      	mov	r3, fp
 80045ca:	2205      	movs	r2, #5
 80045cc:	4648      	mov	r0, r9
 80045ce:	f000 fa93 	bl	8004af8 <__multadd>
 80045d2:	4601      	mov	r1, r0
 80045d4:	4604      	mov	r4, r0
 80045d6:	9803      	ldr	r0, [sp, #12]
 80045d8:	f000 fc9e 	bl	8004f18 <__mcmp>
 80045dc:	2800      	cmp	r0, #0
 80045de:	f77f ada3 	ble.w	8004128 <_dtoa_r+0x498>
 80045e2:	4656      	mov	r6, sl
 80045e4:	2331      	movs	r3, #49	@ 0x31
 80045e6:	f108 0801 	add.w	r8, r8, #1
 80045ea:	f806 3b01 	strb.w	r3, [r6], #1
 80045ee:	e59f      	b.n	8004130 <_dtoa_r+0x4a0>
 80045f0:	46b8      	mov	r8, r7
 80045f2:	9c08      	ldr	r4, [sp, #32]
 80045f4:	4625      	mov	r5, r4
 80045f6:	e7f4      	b.n	80045e2 <_dtoa_r+0x952>
 80045f8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80045fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8101 	beq.w	8004806 <_dtoa_r+0xb76>
 8004604:	2e00      	cmp	r6, #0
 8004606:	dd05      	ble.n	8004614 <_dtoa_r+0x984>
 8004608:	4629      	mov	r1, r5
 800460a:	4632      	mov	r2, r6
 800460c:	4648      	mov	r0, r9
 800460e:	f000 fc17 	bl	8004e40 <__lshift>
 8004612:	4605      	mov	r5, r0
 8004614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004616:	2b00      	cmp	r3, #0
 8004618:	d05c      	beq.n	80046d4 <_dtoa_r+0xa44>
 800461a:	4648      	mov	r0, r9
 800461c:	6869      	ldr	r1, [r5, #4]
 800461e:	f000 fa09 	bl	8004a34 <_Balloc>
 8004622:	4606      	mov	r6, r0
 8004624:	b928      	cbnz	r0, 8004632 <_dtoa_r+0x9a2>
 8004626:	4602      	mov	r2, r0
 8004628:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800462c:	4b80      	ldr	r3, [pc, #512]	@ (8004830 <_dtoa_r+0xba0>)
 800462e:	f7ff bb43 	b.w	8003cb8 <_dtoa_r+0x28>
 8004632:	692a      	ldr	r2, [r5, #16]
 8004634:	f105 010c 	add.w	r1, r5, #12
 8004638:	3202      	adds	r2, #2
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	300c      	adds	r0, #12
 800463e:	f000 ff9d 	bl	800557c <memcpy>
 8004642:	2201      	movs	r2, #1
 8004644:	4631      	mov	r1, r6
 8004646:	4648      	mov	r0, r9
 8004648:	f000 fbfa 	bl	8004e40 <__lshift>
 800464c:	462f      	mov	r7, r5
 800464e:	4605      	mov	r5, r0
 8004650:	f10a 0301 	add.w	r3, sl, #1
 8004654:	9304      	str	r3, [sp, #16]
 8004656:	eb0a 030b 	add.w	r3, sl, fp
 800465a:	930a      	str	r3, [sp, #40]	@ 0x28
 800465c:	9b06      	ldr	r3, [sp, #24]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	9309      	str	r3, [sp, #36]	@ 0x24
 8004664:	9b04      	ldr	r3, [sp, #16]
 8004666:	4621      	mov	r1, r4
 8004668:	9803      	ldr	r0, [sp, #12]
 800466a:	f103 3bff 	add.w	fp, r3, #4294967295
 800466e:	f7ff fa86 	bl	8003b7e <quorem>
 8004672:	4603      	mov	r3, r0
 8004674:	4639      	mov	r1, r7
 8004676:	3330      	adds	r3, #48	@ 0x30
 8004678:	9006      	str	r0, [sp, #24]
 800467a:	9803      	ldr	r0, [sp, #12]
 800467c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800467e:	f000 fc4b 	bl	8004f18 <__mcmp>
 8004682:	462a      	mov	r2, r5
 8004684:	9008      	str	r0, [sp, #32]
 8004686:	4621      	mov	r1, r4
 8004688:	4648      	mov	r0, r9
 800468a:	f000 fc61 	bl	8004f50 <__mdiff>
 800468e:	68c2      	ldr	r2, [r0, #12]
 8004690:	4606      	mov	r6, r0
 8004692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004694:	bb02      	cbnz	r2, 80046d8 <_dtoa_r+0xa48>
 8004696:	4601      	mov	r1, r0
 8004698:	9803      	ldr	r0, [sp, #12]
 800469a:	f000 fc3d 	bl	8004f18 <__mcmp>
 800469e:	4602      	mov	r2, r0
 80046a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046a2:	4631      	mov	r1, r6
 80046a4:	4648      	mov	r0, r9
 80046a6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80046aa:	f000 fa03 	bl	8004ab4 <_Bfree>
 80046ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80046b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80046b2:	9e04      	ldr	r6, [sp, #16]
 80046b4:	ea42 0103 	orr.w	r1, r2, r3
 80046b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ba:	4319      	orrs	r1, r3
 80046bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046be:	d10d      	bne.n	80046dc <_dtoa_r+0xa4c>
 80046c0:	2b39      	cmp	r3, #57	@ 0x39
 80046c2:	d027      	beq.n	8004714 <_dtoa_r+0xa84>
 80046c4:	9a08      	ldr	r2, [sp, #32]
 80046c6:	2a00      	cmp	r2, #0
 80046c8:	dd01      	ble.n	80046ce <_dtoa_r+0xa3e>
 80046ca:	9b06      	ldr	r3, [sp, #24]
 80046cc:	3331      	adds	r3, #49	@ 0x31
 80046ce:	f88b 3000 	strb.w	r3, [fp]
 80046d2:	e52e      	b.n	8004132 <_dtoa_r+0x4a2>
 80046d4:	4628      	mov	r0, r5
 80046d6:	e7b9      	b.n	800464c <_dtoa_r+0x9bc>
 80046d8:	2201      	movs	r2, #1
 80046da:	e7e2      	b.n	80046a2 <_dtoa_r+0xa12>
 80046dc:	9908      	ldr	r1, [sp, #32]
 80046de:	2900      	cmp	r1, #0
 80046e0:	db04      	blt.n	80046ec <_dtoa_r+0xa5c>
 80046e2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80046e4:	4301      	orrs	r1, r0
 80046e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046e8:	4301      	orrs	r1, r0
 80046ea:	d120      	bne.n	800472e <_dtoa_r+0xa9e>
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	ddee      	ble.n	80046ce <_dtoa_r+0xa3e>
 80046f0:	2201      	movs	r2, #1
 80046f2:	9903      	ldr	r1, [sp, #12]
 80046f4:	4648      	mov	r0, r9
 80046f6:	9304      	str	r3, [sp, #16]
 80046f8:	f000 fba2 	bl	8004e40 <__lshift>
 80046fc:	4621      	mov	r1, r4
 80046fe:	9003      	str	r0, [sp, #12]
 8004700:	f000 fc0a 	bl	8004f18 <__mcmp>
 8004704:	2800      	cmp	r0, #0
 8004706:	9b04      	ldr	r3, [sp, #16]
 8004708:	dc02      	bgt.n	8004710 <_dtoa_r+0xa80>
 800470a:	d1e0      	bne.n	80046ce <_dtoa_r+0xa3e>
 800470c:	07da      	lsls	r2, r3, #31
 800470e:	d5de      	bpl.n	80046ce <_dtoa_r+0xa3e>
 8004710:	2b39      	cmp	r3, #57	@ 0x39
 8004712:	d1da      	bne.n	80046ca <_dtoa_r+0xa3a>
 8004714:	2339      	movs	r3, #57	@ 0x39
 8004716:	f88b 3000 	strb.w	r3, [fp]
 800471a:	4633      	mov	r3, r6
 800471c:	461e      	mov	r6, r3
 800471e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004722:	3b01      	subs	r3, #1
 8004724:	2a39      	cmp	r2, #57	@ 0x39
 8004726:	d04e      	beq.n	80047c6 <_dtoa_r+0xb36>
 8004728:	3201      	adds	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	e501      	b.n	8004132 <_dtoa_r+0x4a2>
 800472e:	2a00      	cmp	r2, #0
 8004730:	dd03      	ble.n	800473a <_dtoa_r+0xaaa>
 8004732:	2b39      	cmp	r3, #57	@ 0x39
 8004734:	d0ee      	beq.n	8004714 <_dtoa_r+0xa84>
 8004736:	3301      	adds	r3, #1
 8004738:	e7c9      	b.n	80046ce <_dtoa_r+0xa3e>
 800473a:	9a04      	ldr	r2, [sp, #16]
 800473c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800473e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004742:	428a      	cmp	r2, r1
 8004744:	d028      	beq.n	8004798 <_dtoa_r+0xb08>
 8004746:	2300      	movs	r3, #0
 8004748:	220a      	movs	r2, #10
 800474a:	9903      	ldr	r1, [sp, #12]
 800474c:	4648      	mov	r0, r9
 800474e:	f000 f9d3 	bl	8004af8 <__multadd>
 8004752:	42af      	cmp	r7, r5
 8004754:	9003      	str	r0, [sp, #12]
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	f04f 020a 	mov.w	r2, #10
 800475e:	4639      	mov	r1, r7
 8004760:	4648      	mov	r0, r9
 8004762:	d107      	bne.n	8004774 <_dtoa_r+0xae4>
 8004764:	f000 f9c8 	bl	8004af8 <__multadd>
 8004768:	4607      	mov	r7, r0
 800476a:	4605      	mov	r5, r0
 800476c:	9b04      	ldr	r3, [sp, #16]
 800476e:	3301      	adds	r3, #1
 8004770:	9304      	str	r3, [sp, #16]
 8004772:	e777      	b.n	8004664 <_dtoa_r+0x9d4>
 8004774:	f000 f9c0 	bl	8004af8 <__multadd>
 8004778:	4629      	mov	r1, r5
 800477a:	4607      	mov	r7, r0
 800477c:	2300      	movs	r3, #0
 800477e:	220a      	movs	r2, #10
 8004780:	4648      	mov	r0, r9
 8004782:	f000 f9b9 	bl	8004af8 <__multadd>
 8004786:	4605      	mov	r5, r0
 8004788:	e7f0      	b.n	800476c <_dtoa_r+0xadc>
 800478a:	f1bb 0f00 	cmp.w	fp, #0
 800478e:	bfcc      	ite	gt
 8004790:	465e      	movgt	r6, fp
 8004792:	2601      	movle	r6, #1
 8004794:	2700      	movs	r7, #0
 8004796:	4456      	add	r6, sl
 8004798:	2201      	movs	r2, #1
 800479a:	9903      	ldr	r1, [sp, #12]
 800479c:	4648      	mov	r0, r9
 800479e:	9304      	str	r3, [sp, #16]
 80047a0:	f000 fb4e 	bl	8004e40 <__lshift>
 80047a4:	4621      	mov	r1, r4
 80047a6:	9003      	str	r0, [sp, #12]
 80047a8:	f000 fbb6 	bl	8004f18 <__mcmp>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	dcb4      	bgt.n	800471a <_dtoa_r+0xa8a>
 80047b0:	d102      	bne.n	80047b8 <_dtoa_r+0xb28>
 80047b2:	9b04      	ldr	r3, [sp, #16]
 80047b4:	07db      	lsls	r3, r3, #31
 80047b6:	d4b0      	bmi.n	800471a <_dtoa_r+0xa8a>
 80047b8:	4633      	mov	r3, r6
 80047ba:	461e      	mov	r6, r3
 80047bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047c0:	2a30      	cmp	r2, #48	@ 0x30
 80047c2:	d0fa      	beq.n	80047ba <_dtoa_r+0xb2a>
 80047c4:	e4b5      	b.n	8004132 <_dtoa_r+0x4a2>
 80047c6:	459a      	cmp	sl, r3
 80047c8:	d1a8      	bne.n	800471c <_dtoa_r+0xa8c>
 80047ca:	2331      	movs	r3, #49	@ 0x31
 80047cc:	f108 0801 	add.w	r8, r8, #1
 80047d0:	f88a 3000 	strb.w	r3, [sl]
 80047d4:	e4ad      	b.n	8004132 <_dtoa_r+0x4a2>
 80047d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80047d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004834 <_dtoa_r+0xba4>
 80047dc:	b11b      	cbz	r3, 80047e6 <_dtoa_r+0xb56>
 80047de:	f10a 0308 	add.w	r3, sl, #8
 80047e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4650      	mov	r0, sl
 80047e8:	b017      	add	sp, #92	@ 0x5c
 80047ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	f77f ae2e 	ble.w	8004452 <_dtoa_r+0x7c2>
 80047f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80047fa:	2001      	movs	r0, #1
 80047fc:	e64d      	b.n	800449a <_dtoa_r+0x80a>
 80047fe:	f1bb 0f00 	cmp.w	fp, #0
 8004802:	f77f aed9 	ble.w	80045b8 <_dtoa_r+0x928>
 8004806:	4656      	mov	r6, sl
 8004808:	4621      	mov	r1, r4
 800480a:	9803      	ldr	r0, [sp, #12]
 800480c:	f7ff f9b7 	bl	8003b7e <quorem>
 8004810:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004814:	f806 3b01 	strb.w	r3, [r6], #1
 8004818:	eba6 020a 	sub.w	r2, r6, sl
 800481c:	4593      	cmp	fp, r2
 800481e:	ddb4      	ble.n	800478a <_dtoa_r+0xafa>
 8004820:	2300      	movs	r3, #0
 8004822:	220a      	movs	r2, #10
 8004824:	4648      	mov	r0, r9
 8004826:	9903      	ldr	r1, [sp, #12]
 8004828:	f000 f966 	bl	8004af8 <__multadd>
 800482c:	9003      	str	r0, [sp, #12]
 800482e:	e7eb      	b.n	8004808 <_dtoa_r+0xb78>
 8004830:	08005d1a 	.word	0x08005d1a
 8004834:	08005c9e 	.word	0x08005c9e

08004838 <_free_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4605      	mov	r5, r0
 800483c:	2900      	cmp	r1, #0
 800483e:	d040      	beq.n	80048c2 <_free_r+0x8a>
 8004840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004844:	1f0c      	subs	r4, r1, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfb8      	it	lt
 800484a:	18e4      	addlt	r4, r4, r3
 800484c:	f000 f8e6 	bl	8004a1c <__malloc_lock>
 8004850:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <_free_r+0x8c>)
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	b933      	cbnz	r3, 8004864 <_free_r+0x2c>
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	6014      	str	r4, [r2, #0]
 800485a:	4628      	mov	r0, r5
 800485c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004860:	f000 b8e2 	b.w	8004a28 <__malloc_unlock>
 8004864:	42a3      	cmp	r3, r4
 8004866:	d908      	bls.n	800487a <_free_r+0x42>
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	1821      	adds	r1, r4, r0
 800486c:	428b      	cmp	r3, r1
 800486e:	bf01      	itttt	eq
 8004870:	6819      	ldreq	r1, [r3, #0]
 8004872:	685b      	ldreq	r3, [r3, #4]
 8004874:	1809      	addeq	r1, r1, r0
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	e7ed      	b.n	8004856 <_free_r+0x1e>
 800487a:	461a      	mov	r2, r3
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b10b      	cbz	r3, 8004884 <_free_r+0x4c>
 8004880:	42a3      	cmp	r3, r4
 8004882:	d9fa      	bls.n	800487a <_free_r+0x42>
 8004884:	6811      	ldr	r1, [r2, #0]
 8004886:	1850      	adds	r0, r2, r1
 8004888:	42a0      	cmp	r0, r4
 800488a:	d10b      	bne.n	80048a4 <_free_r+0x6c>
 800488c:	6820      	ldr	r0, [r4, #0]
 800488e:	4401      	add	r1, r0
 8004890:	1850      	adds	r0, r2, r1
 8004892:	4283      	cmp	r3, r0
 8004894:	6011      	str	r1, [r2, #0]
 8004896:	d1e0      	bne.n	800485a <_free_r+0x22>
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4408      	add	r0, r1
 800489e:	6010      	str	r0, [r2, #0]
 80048a0:	6053      	str	r3, [r2, #4]
 80048a2:	e7da      	b.n	800485a <_free_r+0x22>
 80048a4:	d902      	bls.n	80048ac <_free_r+0x74>
 80048a6:	230c      	movs	r3, #12
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	e7d6      	b.n	800485a <_free_r+0x22>
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	1821      	adds	r1, r4, r0
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf01      	itttt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	1809      	addeq	r1, r1, r0
 80048ba:	6021      	streq	r1, [r4, #0]
 80048bc:	6063      	str	r3, [r4, #4]
 80048be:	6054      	str	r4, [r2, #4]
 80048c0:	e7cb      	b.n	800485a <_free_r+0x22>
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	200003f0 	.word	0x200003f0

080048c8 <malloc>:
 80048c8:	4b02      	ldr	r3, [pc, #8]	@ (80048d4 <malloc+0xc>)
 80048ca:	4601      	mov	r1, r0
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	f000 b825 	b.w	800491c <_malloc_r>
 80048d2:	bf00      	nop
 80048d4:	20000018 	.word	0x20000018

080048d8 <sbrk_aligned>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4e0f      	ldr	r6, [pc, #60]	@ (8004918 <sbrk_aligned+0x40>)
 80048dc:	460c      	mov	r4, r1
 80048de:	6831      	ldr	r1, [r6, #0]
 80048e0:	4605      	mov	r5, r0
 80048e2:	b911      	cbnz	r1, 80048ea <sbrk_aligned+0x12>
 80048e4:	f000 fe3a 	bl	800555c <_sbrk_r>
 80048e8:	6030      	str	r0, [r6, #0]
 80048ea:	4621      	mov	r1, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 fe35 	bl	800555c <_sbrk_r>
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	d103      	bne.n	80048fe <sbrk_aligned+0x26>
 80048f6:	f04f 34ff 	mov.w	r4, #4294967295
 80048fa:	4620      	mov	r0, r4
 80048fc:	bd70      	pop	{r4, r5, r6, pc}
 80048fe:	1cc4      	adds	r4, r0, #3
 8004900:	f024 0403 	bic.w	r4, r4, #3
 8004904:	42a0      	cmp	r0, r4
 8004906:	d0f8      	beq.n	80048fa <sbrk_aligned+0x22>
 8004908:	1a21      	subs	r1, r4, r0
 800490a:	4628      	mov	r0, r5
 800490c:	f000 fe26 	bl	800555c <_sbrk_r>
 8004910:	3001      	adds	r0, #1
 8004912:	d1f2      	bne.n	80048fa <sbrk_aligned+0x22>
 8004914:	e7ef      	b.n	80048f6 <sbrk_aligned+0x1e>
 8004916:	bf00      	nop
 8004918:	200003ec 	.word	0x200003ec

0800491c <_malloc_r>:
 800491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004920:	1ccd      	adds	r5, r1, #3
 8004922:	f025 0503 	bic.w	r5, r5, #3
 8004926:	3508      	adds	r5, #8
 8004928:	2d0c      	cmp	r5, #12
 800492a:	bf38      	it	cc
 800492c:	250c      	movcc	r5, #12
 800492e:	2d00      	cmp	r5, #0
 8004930:	4606      	mov	r6, r0
 8004932:	db01      	blt.n	8004938 <_malloc_r+0x1c>
 8004934:	42a9      	cmp	r1, r5
 8004936:	d904      	bls.n	8004942 <_malloc_r+0x26>
 8004938:	230c      	movs	r3, #12
 800493a:	6033      	str	r3, [r6, #0]
 800493c:	2000      	movs	r0, #0
 800493e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a18 <_malloc_r+0xfc>
 8004946:	f000 f869 	bl	8004a1c <__malloc_lock>
 800494a:	f8d8 3000 	ldr.w	r3, [r8]
 800494e:	461c      	mov	r4, r3
 8004950:	bb44      	cbnz	r4, 80049a4 <_malloc_r+0x88>
 8004952:	4629      	mov	r1, r5
 8004954:	4630      	mov	r0, r6
 8004956:	f7ff ffbf 	bl	80048d8 <sbrk_aligned>
 800495a:	1c43      	adds	r3, r0, #1
 800495c:	4604      	mov	r4, r0
 800495e:	d158      	bne.n	8004a12 <_malloc_r+0xf6>
 8004960:	f8d8 4000 	ldr.w	r4, [r8]
 8004964:	4627      	mov	r7, r4
 8004966:	2f00      	cmp	r7, #0
 8004968:	d143      	bne.n	80049f2 <_malloc_r+0xd6>
 800496a:	2c00      	cmp	r4, #0
 800496c:	d04b      	beq.n	8004a06 <_malloc_r+0xea>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	4639      	mov	r1, r7
 8004972:	4630      	mov	r0, r6
 8004974:	eb04 0903 	add.w	r9, r4, r3
 8004978:	f000 fdf0 	bl	800555c <_sbrk_r>
 800497c:	4581      	cmp	r9, r0
 800497e:	d142      	bne.n	8004a06 <_malloc_r+0xea>
 8004980:	6821      	ldr	r1, [r4, #0]
 8004982:	4630      	mov	r0, r6
 8004984:	1a6d      	subs	r5, r5, r1
 8004986:	4629      	mov	r1, r5
 8004988:	f7ff ffa6 	bl	80048d8 <sbrk_aligned>
 800498c:	3001      	adds	r0, #1
 800498e:	d03a      	beq.n	8004a06 <_malloc_r+0xea>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	442b      	add	r3, r5
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	f8d8 3000 	ldr.w	r3, [r8]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	bb62      	cbnz	r2, 80049f8 <_malloc_r+0xdc>
 800499e:	f8c8 7000 	str.w	r7, [r8]
 80049a2:	e00f      	b.n	80049c4 <_malloc_r+0xa8>
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	1b52      	subs	r2, r2, r5
 80049a8:	d420      	bmi.n	80049ec <_malloc_r+0xd0>
 80049aa:	2a0b      	cmp	r2, #11
 80049ac:	d917      	bls.n	80049de <_malloc_r+0xc2>
 80049ae:	1961      	adds	r1, r4, r5
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	6025      	str	r5, [r4, #0]
 80049b4:	bf18      	it	ne
 80049b6:	6059      	strne	r1, [r3, #4]
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	bf08      	it	eq
 80049bc:	f8c8 1000 	streq.w	r1, [r8]
 80049c0:	5162      	str	r2, [r4, r5]
 80049c2:	604b      	str	r3, [r1, #4]
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 f82f 	bl	8004a28 <__malloc_unlock>
 80049ca:	f104 000b 	add.w	r0, r4, #11
 80049ce:	1d23      	adds	r3, r4, #4
 80049d0:	f020 0007 	bic.w	r0, r0, #7
 80049d4:	1ac2      	subs	r2, r0, r3
 80049d6:	bf1c      	itt	ne
 80049d8:	1a1b      	subne	r3, r3, r0
 80049da:	50a3      	strne	r3, [r4, r2]
 80049dc:	e7af      	b.n	800493e <_malloc_r+0x22>
 80049de:	6862      	ldr	r2, [r4, #4]
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	bf0c      	ite	eq
 80049e4:	f8c8 2000 	streq.w	r2, [r8]
 80049e8:	605a      	strne	r2, [r3, #4]
 80049ea:	e7eb      	b.n	80049c4 <_malloc_r+0xa8>
 80049ec:	4623      	mov	r3, r4
 80049ee:	6864      	ldr	r4, [r4, #4]
 80049f0:	e7ae      	b.n	8004950 <_malloc_r+0x34>
 80049f2:	463c      	mov	r4, r7
 80049f4:	687f      	ldr	r7, [r7, #4]
 80049f6:	e7b6      	b.n	8004966 <_malloc_r+0x4a>
 80049f8:	461a      	mov	r2, r3
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	d1fb      	bne.n	80049f8 <_malloc_r+0xdc>
 8004a00:	2300      	movs	r3, #0
 8004a02:	6053      	str	r3, [r2, #4]
 8004a04:	e7de      	b.n	80049c4 <_malloc_r+0xa8>
 8004a06:	230c      	movs	r3, #12
 8004a08:	4630      	mov	r0, r6
 8004a0a:	6033      	str	r3, [r6, #0]
 8004a0c:	f000 f80c 	bl	8004a28 <__malloc_unlock>
 8004a10:	e794      	b.n	800493c <_malloc_r+0x20>
 8004a12:	6005      	str	r5, [r0, #0]
 8004a14:	e7d6      	b.n	80049c4 <_malloc_r+0xa8>
 8004a16:	bf00      	nop
 8004a18:	200003f0 	.word	0x200003f0

08004a1c <__malloc_lock>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	@ (8004a24 <__malloc_lock+0x8>)
 8004a1e:	f7ff b89e 	b.w	8003b5e <__retarget_lock_acquire_recursive>
 8004a22:	bf00      	nop
 8004a24:	200003e8 	.word	0x200003e8

08004a28 <__malloc_unlock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	@ (8004a30 <__malloc_unlock+0x8>)
 8004a2a:	f7ff b899 	b.w	8003b60 <__retarget_lock_release_recursive>
 8004a2e:	bf00      	nop
 8004a30:	200003e8 	.word	0x200003e8

08004a34 <_Balloc>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	69c6      	ldr	r6, [r0, #28]
 8004a38:	4604      	mov	r4, r0
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	b976      	cbnz	r6, 8004a5c <_Balloc+0x28>
 8004a3e:	2010      	movs	r0, #16
 8004a40:	f7ff ff42 	bl	80048c8 <malloc>
 8004a44:	4602      	mov	r2, r0
 8004a46:	61e0      	str	r0, [r4, #28]
 8004a48:	b920      	cbnz	r0, 8004a54 <_Balloc+0x20>
 8004a4a:	216b      	movs	r1, #107	@ 0x6b
 8004a4c:	4b17      	ldr	r3, [pc, #92]	@ (8004aac <_Balloc+0x78>)
 8004a4e:	4818      	ldr	r0, [pc, #96]	@ (8004ab0 <_Balloc+0x7c>)
 8004a50:	f000 fda2 	bl	8005598 <__assert_func>
 8004a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a58:	6006      	str	r6, [r0, #0]
 8004a5a:	60c6      	str	r6, [r0, #12]
 8004a5c:	69e6      	ldr	r6, [r4, #28]
 8004a5e:	68f3      	ldr	r3, [r6, #12]
 8004a60:	b183      	cbz	r3, 8004a84 <_Balloc+0x50>
 8004a62:	69e3      	ldr	r3, [r4, #28]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a6a:	b9b8      	cbnz	r0, 8004a9c <_Balloc+0x68>
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	fa01 f605 	lsl.w	r6, r1, r5
 8004a72:	1d72      	adds	r2, r6, #5
 8004a74:	4620      	mov	r0, r4
 8004a76:	0092      	lsls	r2, r2, #2
 8004a78:	f000 fdac 	bl	80055d4 <_calloc_r>
 8004a7c:	b160      	cbz	r0, 8004a98 <_Balloc+0x64>
 8004a7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a82:	e00e      	b.n	8004aa2 <_Balloc+0x6e>
 8004a84:	2221      	movs	r2, #33	@ 0x21
 8004a86:	2104      	movs	r1, #4
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 fda3 	bl	80055d4 <_calloc_r>
 8004a8e:	69e3      	ldr	r3, [r4, #28]
 8004a90:	60f0      	str	r0, [r6, #12]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e4      	bne.n	8004a62 <_Balloc+0x2e>
 8004a98:	2000      	movs	r0, #0
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	6802      	ldr	r2, [r0, #0]
 8004a9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004aa8:	e7f7      	b.n	8004a9a <_Balloc+0x66>
 8004aaa:	bf00      	nop
 8004aac:	08005cab 	.word	0x08005cab
 8004ab0:	08005d2b 	.word	0x08005d2b

08004ab4 <_Bfree>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	69c6      	ldr	r6, [r0, #28]
 8004ab8:	4605      	mov	r5, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	b976      	cbnz	r6, 8004adc <_Bfree+0x28>
 8004abe:	2010      	movs	r0, #16
 8004ac0:	f7ff ff02 	bl	80048c8 <malloc>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	61e8      	str	r0, [r5, #28]
 8004ac8:	b920      	cbnz	r0, 8004ad4 <_Bfree+0x20>
 8004aca:	218f      	movs	r1, #143	@ 0x8f
 8004acc:	4b08      	ldr	r3, [pc, #32]	@ (8004af0 <_Bfree+0x3c>)
 8004ace:	4809      	ldr	r0, [pc, #36]	@ (8004af4 <_Bfree+0x40>)
 8004ad0:	f000 fd62 	bl	8005598 <__assert_func>
 8004ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ad8:	6006      	str	r6, [r0, #0]
 8004ada:	60c6      	str	r6, [r0, #12]
 8004adc:	b13c      	cbz	r4, 8004aee <_Bfree+0x3a>
 8004ade:	69eb      	ldr	r3, [r5, #28]
 8004ae0:	6862      	ldr	r2, [r4, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ae8:	6021      	str	r1, [r4, #0]
 8004aea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	08005cab 	.word	0x08005cab
 8004af4:	08005d2b 	.word	0x08005d2b

08004af8 <__multadd>:
 8004af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afc:	4607      	mov	r7, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	461e      	mov	r6, r3
 8004b02:	2000      	movs	r0, #0
 8004b04:	690d      	ldr	r5, [r1, #16]
 8004b06:	f101 0c14 	add.w	ip, r1, #20
 8004b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8004b0e:	3001      	adds	r0, #1
 8004b10:	b299      	uxth	r1, r3
 8004b12:	fb02 6101 	mla	r1, r2, r1, r6
 8004b16:	0c1e      	lsrs	r6, r3, #16
 8004b18:	0c0b      	lsrs	r3, r1, #16
 8004b1a:	fb02 3306 	mla	r3, r2, r6, r3
 8004b1e:	b289      	uxth	r1, r1
 8004b20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b24:	4285      	cmp	r5, r0
 8004b26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b2a:	f84c 1b04 	str.w	r1, [ip], #4
 8004b2e:	dcec      	bgt.n	8004b0a <__multadd+0x12>
 8004b30:	b30e      	cbz	r6, 8004b76 <__multadd+0x7e>
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	42ab      	cmp	r3, r5
 8004b36:	dc19      	bgt.n	8004b6c <__multadd+0x74>
 8004b38:	6861      	ldr	r1, [r4, #4]
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	3101      	adds	r1, #1
 8004b3e:	f7ff ff79 	bl	8004a34 <_Balloc>
 8004b42:	4680      	mov	r8, r0
 8004b44:	b928      	cbnz	r0, 8004b52 <__multadd+0x5a>
 8004b46:	4602      	mov	r2, r0
 8004b48:	21ba      	movs	r1, #186	@ 0xba
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <__multadd+0x84>)
 8004b4c:	480c      	ldr	r0, [pc, #48]	@ (8004b80 <__multadd+0x88>)
 8004b4e:	f000 fd23 	bl	8005598 <__assert_func>
 8004b52:	6922      	ldr	r2, [r4, #16]
 8004b54:	f104 010c 	add.w	r1, r4, #12
 8004b58:	3202      	adds	r2, #2
 8004b5a:	0092      	lsls	r2, r2, #2
 8004b5c:	300c      	adds	r0, #12
 8004b5e:	f000 fd0d 	bl	800557c <memcpy>
 8004b62:	4621      	mov	r1, r4
 8004b64:	4638      	mov	r0, r7
 8004b66:	f7ff ffa5 	bl	8004ab4 <_Bfree>
 8004b6a:	4644      	mov	r4, r8
 8004b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b70:	3501      	adds	r5, #1
 8004b72:	615e      	str	r6, [r3, #20]
 8004b74:	6125      	str	r5, [r4, #16]
 8004b76:	4620      	mov	r0, r4
 8004b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7c:	08005d1a 	.word	0x08005d1a
 8004b80:	08005d2b 	.word	0x08005d2b

08004b84 <__hi0bits>:
 8004b84:	4603      	mov	r3, r0
 8004b86:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004b8a:	bf3a      	itte	cc
 8004b8c:	0403      	lslcc	r3, r0, #16
 8004b8e:	2010      	movcc	r0, #16
 8004b90:	2000      	movcs	r0, #0
 8004b92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b96:	bf3c      	itt	cc
 8004b98:	021b      	lslcc	r3, r3, #8
 8004b9a:	3008      	addcc	r0, #8
 8004b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ba0:	bf3c      	itt	cc
 8004ba2:	011b      	lslcc	r3, r3, #4
 8004ba4:	3004      	addcc	r0, #4
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004baa:	bf3c      	itt	cc
 8004bac:	009b      	lslcc	r3, r3, #2
 8004bae:	3002      	addcc	r0, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	db05      	blt.n	8004bc0 <__hi0bits+0x3c>
 8004bb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004bb8:	f100 0001 	add.w	r0, r0, #1
 8004bbc:	bf08      	it	eq
 8004bbe:	2020      	moveq	r0, #32
 8004bc0:	4770      	bx	lr

08004bc2 <__lo0bits>:
 8004bc2:	6803      	ldr	r3, [r0, #0]
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	f013 0007 	ands.w	r0, r3, #7
 8004bca:	d00b      	beq.n	8004be4 <__lo0bits+0x22>
 8004bcc:	07d9      	lsls	r1, r3, #31
 8004bce:	d421      	bmi.n	8004c14 <__lo0bits+0x52>
 8004bd0:	0798      	lsls	r0, r3, #30
 8004bd2:	bf49      	itett	mi
 8004bd4:	085b      	lsrmi	r3, r3, #1
 8004bd6:	089b      	lsrpl	r3, r3, #2
 8004bd8:	2001      	movmi	r0, #1
 8004bda:	6013      	strmi	r3, [r2, #0]
 8004bdc:	bf5c      	itt	pl
 8004bde:	2002      	movpl	r0, #2
 8004be0:	6013      	strpl	r3, [r2, #0]
 8004be2:	4770      	bx	lr
 8004be4:	b299      	uxth	r1, r3
 8004be6:	b909      	cbnz	r1, 8004bec <__lo0bits+0x2a>
 8004be8:	2010      	movs	r0, #16
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	b2d9      	uxtb	r1, r3
 8004bee:	b909      	cbnz	r1, 8004bf4 <__lo0bits+0x32>
 8004bf0:	3008      	adds	r0, #8
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	0719      	lsls	r1, r3, #28
 8004bf6:	bf04      	itt	eq
 8004bf8:	091b      	lsreq	r3, r3, #4
 8004bfa:	3004      	addeq	r0, #4
 8004bfc:	0799      	lsls	r1, r3, #30
 8004bfe:	bf04      	itt	eq
 8004c00:	089b      	lsreq	r3, r3, #2
 8004c02:	3002      	addeq	r0, #2
 8004c04:	07d9      	lsls	r1, r3, #31
 8004c06:	d403      	bmi.n	8004c10 <__lo0bits+0x4e>
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	f100 0001 	add.w	r0, r0, #1
 8004c0e:	d003      	beq.n	8004c18 <__lo0bits+0x56>
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4770      	bx	lr
 8004c14:	2000      	movs	r0, #0
 8004c16:	4770      	bx	lr
 8004c18:	2020      	movs	r0, #32
 8004c1a:	4770      	bx	lr

08004c1c <__i2b>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	460c      	mov	r4, r1
 8004c20:	2101      	movs	r1, #1
 8004c22:	f7ff ff07 	bl	8004a34 <_Balloc>
 8004c26:	4602      	mov	r2, r0
 8004c28:	b928      	cbnz	r0, 8004c36 <__i2b+0x1a>
 8004c2a:	f240 1145 	movw	r1, #325	@ 0x145
 8004c2e:	4b04      	ldr	r3, [pc, #16]	@ (8004c40 <__i2b+0x24>)
 8004c30:	4804      	ldr	r0, [pc, #16]	@ (8004c44 <__i2b+0x28>)
 8004c32:	f000 fcb1 	bl	8005598 <__assert_func>
 8004c36:	2301      	movs	r3, #1
 8004c38:	6144      	str	r4, [r0, #20]
 8004c3a:	6103      	str	r3, [r0, #16]
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	bf00      	nop
 8004c40:	08005d1a 	.word	0x08005d1a
 8004c44:	08005d2b 	.word	0x08005d2b

08004c48 <__multiply>:
 8004c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	4617      	mov	r7, r2
 8004c4e:	690a      	ldr	r2, [r1, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4689      	mov	r9, r1
 8004c54:	429a      	cmp	r2, r3
 8004c56:	bfa2      	ittt	ge
 8004c58:	463b      	movge	r3, r7
 8004c5a:	460f      	movge	r7, r1
 8004c5c:	4699      	movge	r9, r3
 8004c5e:	693d      	ldr	r5, [r7, #16]
 8004c60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	eb05 060a 	add.w	r6, r5, sl
 8004c6c:	42b3      	cmp	r3, r6
 8004c6e:	b085      	sub	sp, #20
 8004c70:	bfb8      	it	lt
 8004c72:	3101      	addlt	r1, #1
 8004c74:	f7ff fede 	bl	8004a34 <_Balloc>
 8004c78:	b930      	cbnz	r0, 8004c88 <__multiply+0x40>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004c80:	4b40      	ldr	r3, [pc, #256]	@ (8004d84 <__multiply+0x13c>)
 8004c82:	4841      	ldr	r0, [pc, #260]	@ (8004d88 <__multiply+0x140>)
 8004c84:	f000 fc88 	bl	8005598 <__assert_func>
 8004c88:	f100 0414 	add.w	r4, r0, #20
 8004c8c:	4623      	mov	r3, r4
 8004c8e:	2200      	movs	r2, #0
 8004c90:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004c94:	4573      	cmp	r3, lr
 8004c96:	d320      	bcc.n	8004cda <__multiply+0x92>
 8004c98:	f107 0814 	add.w	r8, r7, #20
 8004c9c:	f109 0114 	add.w	r1, r9, #20
 8004ca0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004ca4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004ca8:	9302      	str	r3, [sp, #8]
 8004caa:	1beb      	subs	r3, r5, r7
 8004cac:	3b15      	subs	r3, #21
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	3715      	adds	r7, #21
 8004cb6:	42bd      	cmp	r5, r7
 8004cb8:	bf38      	it	cc
 8004cba:	2304      	movcc	r3, #4
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	9b02      	ldr	r3, [sp, #8]
 8004cc0:	9103      	str	r1, [sp, #12]
 8004cc2:	428b      	cmp	r3, r1
 8004cc4:	d80c      	bhi.n	8004ce0 <__multiply+0x98>
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	dd03      	ble.n	8004cd2 <__multiply+0x8a>
 8004cca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d055      	beq.n	8004d7e <__multiply+0x136>
 8004cd2:	6106      	str	r6, [r0, #16]
 8004cd4:	b005      	add	sp, #20
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	f843 2b04 	str.w	r2, [r3], #4
 8004cde:	e7d9      	b.n	8004c94 <__multiply+0x4c>
 8004ce0:	f8b1 a000 	ldrh.w	sl, [r1]
 8004ce4:	f1ba 0f00 	cmp.w	sl, #0
 8004ce8:	d01f      	beq.n	8004d2a <__multiply+0xe2>
 8004cea:	46c4      	mov	ip, r8
 8004cec:	46a1      	mov	r9, r4
 8004cee:	2700      	movs	r7, #0
 8004cf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004cf4:	f8d9 3000 	ldr.w	r3, [r9]
 8004cf8:	fa1f fb82 	uxth.w	fp, r2
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	fb0a 330b 	mla	r3, sl, fp, r3
 8004d02:	443b      	add	r3, r7
 8004d04:	f8d9 7000 	ldr.w	r7, [r9]
 8004d08:	0c12      	lsrs	r2, r2, #16
 8004d0a:	0c3f      	lsrs	r7, r7, #16
 8004d0c:	fb0a 7202 	mla	r2, sl, r2, r7
 8004d10:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d1a:	4565      	cmp	r5, ip
 8004d1c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004d20:	f849 3b04 	str.w	r3, [r9], #4
 8004d24:	d8e4      	bhi.n	8004cf0 <__multiply+0xa8>
 8004d26:	9b01      	ldr	r3, [sp, #4]
 8004d28:	50e7      	str	r7, [r4, r3]
 8004d2a:	9b03      	ldr	r3, [sp, #12]
 8004d2c:	3104      	adds	r1, #4
 8004d2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d32:	f1b9 0f00 	cmp.w	r9, #0
 8004d36:	d020      	beq.n	8004d7a <__multiply+0x132>
 8004d38:	4647      	mov	r7, r8
 8004d3a:	46a4      	mov	ip, r4
 8004d3c:	f04f 0a00 	mov.w	sl, #0
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	f8b7 b000 	ldrh.w	fp, [r7]
 8004d46:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	fb09 220b 	mla	r2, r9, fp, r2
 8004d50:	4452      	add	r2, sl
 8004d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d56:	f84c 3b04 	str.w	r3, [ip], #4
 8004d5a:	f857 3b04 	ldr.w	r3, [r7], #4
 8004d5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d62:	f8bc 3000 	ldrh.w	r3, [ip]
 8004d66:	42bd      	cmp	r5, r7
 8004d68:	fb09 330a 	mla	r3, r9, sl, r3
 8004d6c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004d70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d74:	d8e5      	bhi.n	8004d42 <__multiply+0xfa>
 8004d76:	9a01      	ldr	r2, [sp, #4]
 8004d78:	50a3      	str	r3, [r4, r2]
 8004d7a:	3404      	adds	r4, #4
 8004d7c:	e79f      	b.n	8004cbe <__multiply+0x76>
 8004d7e:	3e01      	subs	r6, #1
 8004d80:	e7a1      	b.n	8004cc6 <__multiply+0x7e>
 8004d82:	bf00      	nop
 8004d84:	08005d1a 	.word	0x08005d1a
 8004d88:	08005d2b 	.word	0x08005d2b

08004d8c <__pow5mult>:
 8004d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d90:	4615      	mov	r5, r2
 8004d92:	f012 0203 	ands.w	r2, r2, #3
 8004d96:	4607      	mov	r7, r0
 8004d98:	460e      	mov	r6, r1
 8004d9a:	d007      	beq.n	8004dac <__pow5mult+0x20>
 8004d9c:	4c25      	ldr	r4, [pc, #148]	@ (8004e34 <__pow5mult+0xa8>)
 8004d9e:	3a01      	subs	r2, #1
 8004da0:	2300      	movs	r3, #0
 8004da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004da6:	f7ff fea7 	bl	8004af8 <__multadd>
 8004daa:	4606      	mov	r6, r0
 8004dac:	10ad      	asrs	r5, r5, #2
 8004dae:	d03d      	beq.n	8004e2c <__pow5mult+0xa0>
 8004db0:	69fc      	ldr	r4, [r7, #28]
 8004db2:	b97c      	cbnz	r4, 8004dd4 <__pow5mult+0x48>
 8004db4:	2010      	movs	r0, #16
 8004db6:	f7ff fd87 	bl	80048c8 <malloc>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	61f8      	str	r0, [r7, #28]
 8004dbe:	b928      	cbnz	r0, 8004dcc <__pow5mult+0x40>
 8004dc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e38 <__pow5mult+0xac>)
 8004dc6:	481d      	ldr	r0, [pc, #116]	@ (8004e3c <__pow5mult+0xb0>)
 8004dc8:	f000 fbe6 	bl	8005598 <__assert_func>
 8004dcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004dd0:	6004      	str	r4, [r0, #0]
 8004dd2:	60c4      	str	r4, [r0, #12]
 8004dd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004dd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ddc:	b94c      	cbnz	r4, 8004df2 <__pow5mult+0x66>
 8004dde:	f240 2171 	movw	r1, #625	@ 0x271
 8004de2:	4638      	mov	r0, r7
 8004de4:	f7ff ff1a 	bl	8004c1c <__i2b>
 8004de8:	2300      	movs	r3, #0
 8004dea:	4604      	mov	r4, r0
 8004dec:	f8c8 0008 	str.w	r0, [r8, #8]
 8004df0:	6003      	str	r3, [r0, #0]
 8004df2:	f04f 0900 	mov.w	r9, #0
 8004df6:	07eb      	lsls	r3, r5, #31
 8004df8:	d50a      	bpl.n	8004e10 <__pow5mult+0x84>
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	4638      	mov	r0, r7
 8004e00:	f7ff ff22 	bl	8004c48 <__multiply>
 8004e04:	4680      	mov	r8, r0
 8004e06:	4631      	mov	r1, r6
 8004e08:	4638      	mov	r0, r7
 8004e0a:	f7ff fe53 	bl	8004ab4 <_Bfree>
 8004e0e:	4646      	mov	r6, r8
 8004e10:	106d      	asrs	r5, r5, #1
 8004e12:	d00b      	beq.n	8004e2c <__pow5mult+0xa0>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	b938      	cbnz	r0, 8004e28 <__pow5mult+0x9c>
 8004e18:	4622      	mov	r2, r4
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	f7ff ff13 	bl	8004c48 <__multiply>
 8004e22:	6020      	str	r0, [r4, #0]
 8004e24:	f8c0 9000 	str.w	r9, [r0]
 8004e28:	4604      	mov	r4, r0
 8004e2a:	e7e4      	b.n	8004df6 <__pow5mult+0x6a>
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e32:	bf00      	nop
 8004e34:	08005ddc 	.word	0x08005ddc
 8004e38:	08005cab 	.word	0x08005cab
 8004e3c:	08005d2b 	.word	0x08005d2b

08004e40 <__lshift>:
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	460c      	mov	r4, r1
 8004e46:	4607      	mov	r7, r0
 8004e48:	4691      	mov	r9, r2
 8004e4a:	6923      	ldr	r3, [r4, #16]
 8004e4c:	6849      	ldr	r1, [r1, #4]
 8004e4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e52:	68a3      	ldr	r3, [r4, #8]
 8004e54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e58:	f108 0601 	add.w	r6, r8, #1
 8004e5c:	42b3      	cmp	r3, r6
 8004e5e:	db0b      	blt.n	8004e78 <__lshift+0x38>
 8004e60:	4638      	mov	r0, r7
 8004e62:	f7ff fde7 	bl	8004a34 <_Balloc>
 8004e66:	4605      	mov	r5, r0
 8004e68:	b948      	cbnz	r0, 8004e7e <__lshift+0x3e>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004e70:	4b27      	ldr	r3, [pc, #156]	@ (8004f10 <__lshift+0xd0>)
 8004e72:	4828      	ldr	r0, [pc, #160]	@ (8004f14 <__lshift+0xd4>)
 8004e74:	f000 fb90 	bl	8005598 <__assert_func>
 8004e78:	3101      	adds	r1, #1
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	e7ee      	b.n	8004e5c <__lshift+0x1c>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f100 0114 	add.w	r1, r0, #20
 8004e84:	f100 0210 	add.w	r2, r0, #16
 8004e88:	4618      	mov	r0, r3
 8004e8a:	4553      	cmp	r3, sl
 8004e8c:	db33      	blt.n	8004ef6 <__lshift+0xb6>
 8004e8e:	6920      	ldr	r0, [r4, #16]
 8004e90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e94:	f104 0314 	add.w	r3, r4, #20
 8004e98:	f019 091f 	ands.w	r9, r9, #31
 8004e9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ea0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ea4:	d02b      	beq.n	8004efe <__lshift+0xbe>
 8004ea6:	468a      	mov	sl, r1
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f1c9 0e20 	rsb	lr, r9, #32
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	fa00 f009 	lsl.w	r0, r0, r9
 8004eb4:	4310      	orrs	r0, r2
 8004eb6:	f84a 0b04 	str.w	r0, [sl], #4
 8004eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ebe:	459c      	cmp	ip, r3
 8004ec0:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ec4:	d8f3      	bhi.n	8004eae <__lshift+0x6e>
 8004ec6:	ebac 0304 	sub.w	r3, ip, r4
 8004eca:	3b15      	subs	r3, #21
 8004ecc:	f023 0303 	bic.w	r3, r3, #3
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	f104 0015 	add.w	r0, r4, #21
 8004ed6:	4560      	cmp	r0, ip
 8004ed8:	bf88      	it	hi
 8004eda:	2304      	movhi	r3, #4
 8004edc:	50ca      	str	r2, [r1, r3]
 8004ede:	b10a      	cbz	r2, 8004ee4 <__lshift+0xa4>
 8004ee0:	f108 0602 	add.w	r6, r8, #2
 8004ee4:	3e01      	subs	r6, #1
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	4621      	mov	r1, r4
 8004eea:	612e      	str	r6, [r5, #16]
 8004eec:	f7ff fde2 	bl	8004ab4 <_Bfree>
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004efa:	3301      	adds	r3, #1
 8004efc:	e7c5      	b.n	8004e8a <__lshift+0x4a>
 8004efe:	3904      	subs	r1, #4
 8004f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f04:	459c      	cmp	ip, r3
 8004f06:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f0a:	d8f9      	bhi.n	8004f00 <__lshift+0xc0>
 8004f0c:	e7ea      	b.n	8004ee4 <__lshift+0xa4>
 8004f0e:	bf00      	nop
 8004f10:	08005d1a 	.word	0x08005d1a
 8004f14:	08005d2b 	.word	0x08005d2b

08004f18 <__mcmp>:
 8004f18:	4603      	mov	r3, r0
 8004f1a:	690a      	ldr	r2, [r1, #16]
 8004f1c:	6900      	ldr	r0, [r0, #16]
 8004f1e:	b530      	push	{r4, r5, lr}
 8004f20:	1a80      	subs	r0, r0, r2
 8004f22:	d10e      	bne.n	8004f42 <__mcmp+0x2a>
 8004f24:	3314      	adds	r3, #20
 8004f26:	3114      	adds	r1, #20
 8004f28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f38:	4295      	cmp	r5, r2
 8004f3a:	d003      	beq.n	8004f44 <__mcmp+0x2c>
 8004f3c:	d205      	bcs.n	8004f4a <__mcmp+0x32>
 8004f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f42:	bd30      	pop	{r4, r5, pc}
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d3f3      	bcc.n	8004f30 <__mcmp+0x18>
 8004f48:	e7fb      	b.n	8004f42 <__mcmp+0x2a>
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	e7f9      	b.n	8004f42 <__mcmp+0x2a>
	...

08004f50 <__mdiff>:
 8004f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	4689      	mov	r9, r1
 8004f56:	4606      	mov	r6, r0
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4648      	mov	r0, r9
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	f7ff ffdb 	bl	8004f18 <__mcmp>
 8004f62:	1e05      	subs	r5, r0, #0
 8004f64:	d112      	bne.n	8004f8c <__mdiff+0x3c>
 8004f66:	4629      	mov	r1, r5
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f7ff fd63 	bl	8004a34 <_Balloc>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	b928      	cbnz	r0, 8004f7e <__mdiff+0x2e>
 8004f72:	f240 2137 	movw	r1, #567	@ 0x237
 8004f76:	4b3e      	ldr	r3, [pc, #248]	@ (8005070 <__mdiff+0x120>)
 8004f78:	483e      	ldr	r0, [pc, #248]	@ (8005074 <__mdiff+0x124>)
 8004f7a:	f000 fb0d 	bl	8005598 <__assert_func>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004f84:	4610      	mov	r0, r2
 8004f86:	b003      	add	sp, #12
 8004f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8c:	bfbc      	itt	lt
 8004f8e:	464b      	movlt	r3, r9
 8004f90:	46a1      	movlt	r9, r4
 8004f92:	4630      	mov	r0, r6
 8004f94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004f98:	bfba      	itte	lt
 8004f9a:	461c      	movlt	r4, r3
 8004f9c:	2501      	movlt	r5, #1
 8004f9e:	2500      	movge	r5, #0
 8004fa0:	f7ff fd48 	bl	8004a34 <_Balloc>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	b918      	cbnz	r0, 8004fb0 <__mdiff+0x60>
 8004fa8:	f240 2145 	movw	r1, #581	@ 0x245
 8004fac:	4b30      	ldr	r3, [pc, #192]	@ (8005070 <__mdiff+0x120>)
 8004fae:	e7e3      	b.n	8004f78 <__mdiff+0x28>
 8004fb0:	f100 0b14 	add.w	fp, r0, #20
 8004fb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004fb8:	f109 0310 	add.w	r3, r9, #16
 8004fbc:	60c5      	str	r5, [r0, #12]
 8004fbe:	f04f 0c00 	mov.w	ip, #0
 8004fc2:	f109 0514 	add.w	r5, r9, #20
 8004fc6:	46d9      	mov	r9, fp
 8004fc8:	6926      	ldr	r6, [r4, #16]
 8004fca:	f104 0e14 	add.w	lr, r4, #20
 8004fce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004fd2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	9b01      	ldr	r3, [sp, #4]
 8004fda:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004fde:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004fe2:	b281      	uxth	r1, r0
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	fa1f f38a 	uxth.w	r3, sl
 8004fea:	1a5b      	subs	r3, r3, r1
 8004fec:	0c00      	lsrs	r0, r0, #16
 8004fee:	4463      	add	r3, ip
 8004ff0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004ff4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ffe:	4576      	cmp	r6, lr
 8005000:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005004:	f849 3b04 	str.w	r3, [r9], #4
 8005008:	d8e6      	bhi.n	8004fd8 <__mdiff+0x88>
 800500a:	1b33      	subs	r3, r6, r4
 800500c:	3b15      	subs	r3, #21
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	3415      	adds	r4, #21
 8005014:	3304      	adds	r3, #4
 8005016:	42a6      	cmp	r6, r4
 8005018:	bf38      	it	cc
 800501a:	2304      	movcc	r3, #4
 800501c:	441d      	add	r5, r3
 800501e:	445b      	add	r3, fp
 8005020:	461e      	mov	r6, r3
 8005022:	462c      	mov	r4, r5
 8005024:	4544      	cmp	r4, r8
 8005026:	d30e      	bcc.n	8005046 <__mdiff+0xf6>
 8005028:	f108 0103 	add.w	r1, r8, #3
 800502c:	1b49      	subs	r1, r1, r5
 800502e:	f021 0103 	bic.w	r1, r1, #3
 8005032:	3d03      	subs	r5, #3
 8005034:	45a8      	cmp	r8, r5
 8005036:	bf38      	it	cc
 8005038:	2100      	movcc	r1, #0
 800503a:	440b      	add	r3, r1
 800503c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005040:	b199      	cbz	r1, 800506a <__mdiff+0x11a>
 8005042:	6117      	str	r7, [r2, #16]
 8005044:	e79e      	b.n	8004f84 <__mdiff+0x34>
 8005046:	46e6      	mov	lr, ip
 8005048:	f854 1b04 	ldr.w	r1, [r4], #4
 800504c:	fa1f fc81 	uxth.w	ip, r1
 8005050:	44f4      	add	ip, lr
 8005052:	0c08      	lsrs	r0, r1, #16
 8005054:	4471      	add	r1, lr
 8005056:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800505a:	b289      	uxth	r1, r1
 800505c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005060:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005064:	f846 1b04 	str.w	r1, [r6], #4
 8005068:	e7dc      	b.n	8005024 <__mdiff+0xd4>
 800506a:	3f01      	subs	r7, #1
 800506c:	e7e6      	b.n	800503c <__mdiff+0xec>
 800506e:	bf00      	nop
 8005070:	08005d1a 	.word	0x08005d1a
 8005074:	08005d2b 	.word	0x08005d2b

08005078 <__d2b>:
 8005078:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800507c:	2101      	movs	r1, #1
 800507e:	4690      	mov	r8, r2
 8005080:	4699      	mov	r9, r3
 8005082:	9e08      	ldr	r6, [sp, #32]
 8005084:	f7ff fcd6 	bl	8004a34 <_Balloc>
 8005088:	4604      	mov	r4, r0
 800508a:	b930      	cbnz	r0, 800509a <__d2b+0x22>
 800508c:	4602      	mov	r2, r0
 800508e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005092:	4b23      	ldr	r3, [pc, #140]	@ (8005120 <__d2b+0xa8>)
 8005094:	4823      	ldr	r0, [pc, #140]	@ (8005124 <__d2b+0xac>)
 8005096:	f000 fa7f 	bl	8005598 <__assert_func>
 800509a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800509e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050a2:	b10d      	cbz	r5, 80050a8 <__d2b+0x30>
 80050a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	f1b8 0300 	subs.w	r3, r8, #0
 80050ae:	d024      	beq.n	80050fa <__d2b+0x82>
 80050b0:	4668      	mov	r0, sp
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f7ff fd85 	bl	8004bc2 <__lo0bits>
 80050b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050bc:	b1d8      	cbz	r0, 80050f6 <__d2b+0x7e>
 80050be:	f1c0 0320 	rsb	r3, r0, #32
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	430b      	orrs	r3, r1
 80050c8:	40c2      	lsrs	r2, r0
 80050ca:	6163      	str	r3, [r4, #20]
 80050cc:	9201      	str	r2, [sp, #4]
 80050ce:	9b01      	ldr	r3, [sp, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf0c      	ite	eq
 80050d4:	2201      	moveq	r2, #1
 80050d6:	2202      	movne	r2, #2
 80050d8:	61a3      	str	r3, [r4, #24]
 80050da:	6122      	str	r2, [r4, #16]
 80050dc:	b1ad      	cbz	r5, 800510a <__d2b+0x92>
 80050de:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80050e2:	4405      	add	r5, r0
 80050e4:	6035      	str	r5, [r6, #0]
 80050e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80050ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050ec:	6018      	str	r0, [r3, #0]
 80050ee:	4620      	mov	r0, r4
 80050f0:	b002      	add	sp, #8
 80050f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80050f6:	6161      	str	r1, [r4, #20]
 80050f8:	e7e9      	b.n	80050ce <__d2b+0x56>
 80050fa:	a801      	add	r0, sp, #4
 80050fc:	f7ff fd61 	bl	8004bc2 <__lo0bits>
 8005100:	9b01      	ldr	r3, [sp, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	6163      	str	r3, [r4, #20]
 8005106:	3020      	adds	r0, #32
 8005108:	e7e7      	b.n	80050da <__d2b+0x62>
 800510a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800510e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005112:	6030      	str	r0, [r6, #0]
 8005114:	6918      	ldr	r0, [r3, #16]
 8005116:	f7ff fd35 	bl	8004b84 <__hi0bits>
 800511a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800511e:	e7e4      	b.n	80050ea <__d2b+0x72>
 8005120:	08005d1a 	.word	0x08005d1a
 8005124:	08005d2b 	.word	0x08005d2b

08005128 <__ssputs_r>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	461f      	mov	r7, r3
 800512e:	688e      	ldr	r6, [r1, #8]
 8005130:	4682      	mov	sl, r0
 8005132:	42be      	cmp	r6, r7
 8005134:	460c      	mov	r4, r1
 8005136:	4690      	mov	r8, r2
 8005138:	680b      	ldr	r3, [r1, #0]
 800513a:	d82d      	bhi.n	8005198 <__ssputs_r+0x70>
 800513c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005140:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005144:	d026      	beq.n	8005194 <__ssputs_r+0x6c>
 8005146:	6965      	ldr	r5, [r4, #20]
 8005148:	6909      	ldr	r1, [r1, #16]
 800514a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800514e:	eba3 0901 	sub.w	r9, r3, r1
 8005152:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005156:	1c7b      	adds	r3, r7, #1
 8005158:	444b      	add	r3, r9
 800515a:	106d      	asrs	r5, r5, #1
 800515c:	429d      	cmp	r5, r3
 800515e:	bf38      	it	cc
 8005160:	461d      	movcc	r5, r3
 8005162:	0553      	lsls	r3, r2, #21
 8005164:	d527      	bpl.n	80051b6 <__ssputs_r+0x8e>
 8005166:	4629      	mov	r1, r5
 8005168:	f7ff fbd8 	bl	800491c <_malloc_r>
 800516c:	4606      	mov	r6, r0
 800516e:	b360      	cbz	r0, 80051ca <__ssputs_r+0xa2>
 8005170:	464a      	mov	r2, r9
 8005172:	6921      	ldr	r1, [r4, #16]
 8005174:	f000 fa02 	bl	800557c <memcpy>
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800517e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	6126      	str	r6, [r4, #16]
 8005186:	444e      	add	r6, r9
 8005188:	6026      	str	r6, [r4, #0]
 800518a:	463e      	mov	r6, r7
 800518c:	6165      	str	r5, [r4, #20]
 800518e:	eba5 0509 	sub.w	r5, r5, r9
 8005192:	60a5      	str	r5, [r4, #8]
 8005194:	42be      	cmp	r6, r7
 8005196:	d900      	bls.n	800519a <__ssputs_r+0x72>
 8005198:	463e      	mov	r6, r7
 800519a:	4632      	mov	r2, r6
 800519c:	4641      	mov	r1, r8
 800519e:	6820      	ldr	r0, [r4, #0]
 80051a0:	f000 f9c2 	bl	8005528 <memmove>
 80051a4:	2000      	movs	r0, #0
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	1b9b      	subs	r3, r3, r6
 80051aa:	60a3      	str	r3, [r4, #8]
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	4433      	add	r3, r6
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b6:	462a      	mov	r2, r5
 80051b8:	f000 fa32 	bl	8005620 <_realloc_r>
 80051bc:	4606      	mov	r6, r0
 80051be:	2800      	cmp	r0, #0
 80051c0:	d1e0      	bne.n	8005184 <__ssputs_r+0x5c>
 80051c2:	4650      	mov	r0, sl
 80051c4:	6921      	ldr	r1, [r4, #16]
 80051c6:	f7ff fb37 	bl	8004838 <_free_r>
 80051ca:	230c      	movs	r3, #12
 80051cc:	f8ca 3000 	str.w	r3, [sl]
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	f04f 30ff 	mov.w	r0, #4294967295
 80051d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	e7e9      	b.n	80051b2 <__ssputs_r+0x8a>
	...

080051e0 <_svfiprintf_r>:
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	4698      	mov	r8, r3
 80051e6:	898b      	ldrh	r3, [r1, #12]
 80051e8:	4607      	mov	r7, r0
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	460d      	mov	r5, r1
 80051ee:	4614      	mov	r4, r2
 80051f0:	b09d      	sub	sp, #116	@ 0x74
 80051f2:	d510      	bpl.n	8005216 <_svfiprintf_r+0x36>
 80051f4:	690b      	ldr	r3, [r1, #16]
 80051f6:	b973      	cbnz	r3, 8005216 <_svfiprintf_r+0x36>
 80051f8:	2140      	movs	r1, #64	@ 0x40
 80051fa:	f7ff fb8f 	bl	800491c <_malloc_r>
 80051fe:	6028      	str	r0, [r5, #0]
 8005200:	6128      	str	r0, [r5, #16]
 8005202:	b930      	cbnz	r0, 8005212 <_svfiprintf_r+0x32>
 8005204:	230c      	movs	r3, #12
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	b01d      	add	sp, #116	@ 0x74
 800520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005212:	2340      	movs	r3, #64	@ 0x40
 8005214:	616b      	str	r3, [r5, #20]
 8005216:	2300      	movs	r3, #0
 8005218:	9309      	str	r3, [sp, #36]	@ 0x24
 800521a:	2320      	movs	r3, #32
 800521c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005220:	2330      	movs	r3, #48	@ 0x30
 8005222:	f04f 0901 	mov.w	r9, #1
 8005226:	f8cd 800c 	str.w	r8, [sp, #12]
 800522a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80053c4 <_svfiprintf_r+0x1e4>
 800522e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005232:	4623      	mov	r3, r4
 8005234:	469a      	mov	sl, r3
 8005236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800523a:	b10a      	cbz	r2, 8005240 <_svfiprintf_r+0x60>
 800523c:	2a25      	cmp	r2, #37	@ 0x25
 800523e:	d1f9      	bne.n	8005234 <_svfiprintf_r+0x54>
 8005240:	ebba 0b04 	subs.w	fp, sl, r4
 8005244:	d00b      	beq.n	800525e <_svfiprintf_r+0x7e>
 8005246:	465b      	mov	r3, fp
 8005248:	4622      	mov	r2, r4
 800524a:	4629      	mov	r1, r5
 800524c:	4638      	mov	r0, r7
 800524e:	f7ff ff6b 	bl	8005128 <__ssputs_r>
 8005252:	3001      	adds	r0, #1
 8005254:	f000 80a7 	beq.w	80053a6 <_svfiprintf_r+0x1c6>
 8005258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800525a:	445a      	add	r2, fp
 800525c:	9209      	str	r2, [sp, #36]	@ 0x24
 800525e:	f89a 3000 	ldrb.w	r3, [sl]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 809f 	beq.w	80053a6 <_svfiprintf_r+0x1c6>
 8005268:	2300      	movs	r3, #0
 800526a:	f04f 32ff 	mov.w	r2, #4294967295
 800526e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005272:	f10a 0a01 	add.w	sl, sl, #1
 8005276:	9304      	str	r3, [sp, #16]
 8005278:	9307      	str	r3, [sp, #28]
 800527a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800527e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005280:	4654      	mov	r4, sl
 8005282:	2205      	movs	r2, #5
 8005284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005288:	484e      	ldr	r0, [pc, #312]	@ (80053c4 <_svfiprintf_r+0x1e4>)
 800528a:	f7fe fc6a 	bl	8003b62 <memchr>
 800528e:	9a04      	ldr	r2, [sp, #16]
 8005290:	b9d8      	cbnz	r0, 80052ca <_svfiprintf_r+0xea>
 8005292:	06d0      	lsls	r0, r2, #27
 8005294:	bf44      	itt	mi
 8005296:	2320      	movmi	r3, #32
 8005298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800529c:	0711      	lsls	r1, r2, #28
 800529e:	bf44      	itt	mi
 80052a0:	232b      	movmi	r3, #43	@ 0x2b
 80052a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052a6:	f89a 3000 	ldrb.w	r3, [sl]
 80052aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ac:	d015      	beq.n	80052da <_svfiprintf_r+0xfa>
 80052ae:	4654      	mov	r4, sl
 80052b0:	2000      	movs	r0, #0
 80052b2:	f04f 0c0a 	mov.w	ip, #10
 80052b6:	9a07      	ldr	r2, [sp, #28]
 80052b8:	4621      	mov	r1, r4
 80052ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052be:	3b30      	subs	r3, #48	@ 0x30
 80052c0:	2b09      	cmp	r3, #9
 80052c2:	d94b      	bls.n	800535c <_svfiprintf_r+0x17c>
 80052c4:	b1b0      	cbz	r0, 80052f4 <_svfiprintf_r+0x114>
 80052c6:	9207      	str	r2, [sp, #28]
 80052c8:	e014      	b.n	80052f4 <_svfiprintf_r+0x114>
 80052ca:	eba0 0308 	sub.w	r3, r0, r8
 80052ce:	fa09 f303 	lsl.w	r3, r9, r3
 80052d2:	4313      	orrs	r3, r2
 80052d4:	46a2      	mov	sl, r4
 80052d6:	9304      	str	r3, [sp, #16]
 80052d8:	e7d2      	b.n	8005280 <_svfiprintf_r+0xa0>
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	1d19      	adds	r1, r3, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	9103      	str	r1, [sp, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bfbb      	ittet	lt
 80052e6:	425b      	neglt	r3, r3
 80052e8:	f042 0202 	orrlt.w	r2, r2, #2
 80052ec:	9307      	strge	r3, [sp, #28]
 80052ee:	9307      	strlt	r3, [sp, #28]
 80052f0:	bfb8      	it	lt
 80052f2:	9204      	strlt	r2, [sp, #16]
 80052f4:	7823      	ldrb	r3, [r4, #0]
 80052f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80052f8:	d10a      	bne.n	8005310 <_svfiprintf_r+0x130>
 80052fa:	7863      	ldrb	r3, [r4, #1]
 80052fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80052fe:	d132      	bne.n	8005366 <_svfiprintf_r+0x186>
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	3402      	adds	r4, #2
 8005304:	1d1a      	adds	r2, r3, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	9203      	str	r2, [sp, #12]
 800530a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800530e:	9305      	str	r3, [sp, #20]
 8005310:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80053c8 <_svfiprintf_r+0x1e8>
 8005314:	2203      	movs	r2, #3
 8005316:	4650      	mov	r0, sl
 8005318:	7821      	ldrb	r1, [r4, #0]
 800531a:	f7fe fc22 	bl	8003b62 <memchr>
 800531e:	b138      	cbz	r0, 8005330 <_svfiprintf_r+0x150>
 8005320:	2240      	movs	r2, #64	@ 0x40
 8005322:	9b04      	ldr	r3, [sp, #16]
 8005324:	eba0 000a 	sub.w	r0, r0, sl
 8005328:	4082      	lsls	r2, r0
 800532a:	4313      	orrs	r3, r2
 800532c:	3401      	adds	r4, #1
 800532e:	9304      	str	r3, [sp, #16]
 8005330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005334:	2206      	movs	r2, #6
 8005336:	4825      	ldr	r0, [pc, #148]	@ (80053cc <_svfiprintf_r+0x1ec>)
 8005338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800533c:	f7fe fc11 	bl	8003b62 <memchr>
 8005340:	2800      	cmp	r0, #0
 8005342:	d036      	beq.n	80053b2 <_svfiprintf_r+0x1d2>
 8005344:	4b22      	ldr	r3, [pc, #136]	@ (80053d0 <_svfiprintf_r+0x1f0>)
 8005346:	bb1b      	cbnz	r3, 8005390 <_svfiprintf_r+0x1b0>
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	3307      	adds	r3, #7
 800534c:	f023 0307 	bic.w	r3, r3, #7
 8005350:	3308      	adds	r3, #8
 8005352:	9303      	str	r3, [sp, #12]
 8005354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005356:	4433      	add	r3, r6
 8005358:	9309      	str	r3, [sp, #36]	@ 0x24
 800535a:	e76a      	b.n	8005232 <_svfiprintf_r+0x52>
 800535c:	460c      	mov	r4, r1
 800535e:	2001      	movs	r0, #1
 8005360:	fb0c 3202 	mla	r2, ip, r2, r3
 8005364:	e7a8      	b.n	80052b8 <_svfiprintf_r+0xd8>
 8005366:	2300      	movs	r3, #0
 8005368:	f04f 0c0a 	mov.w	ip, #10
 800536c:	4619      	mov	r1, r3
 800536e:	3401      	adds	r4, #1
 8005370:	9305      	str	r3, [sp, #20]
 8005372:	4620      	mov	r0, r4
 8005374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005378:	3a30      	subs	r2, #48	@ 0x30
 800537a:	2a09      	cmp	r2, #9
 800537c:	d903      	bls.n	8005386 <_svfiprintf_r+0x1a6>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0c6      	beq.n	8005310 <_svfiprintf_r+0x130>
 8005382:	9105      	str	r1, [sp, #20]
 8005384:	e7c4      	b.n	8005310 <_svfiprintf_r+0x130>
 8005386:	4604      	mov	r4, r0
 8005388:	2301      	movs	r3, #1
 800538a:	fb0c 2101 	mla	r1, ip, r1, r2
 800538e:	e7f0      	b.n	8005372 <_svfiprintf_r+0x192>
 8005390:	ab03      	add	r3, sp, #12
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	462a      	mov	r2, r5
 8005396:	4638      	mov	r0, r7
 8005398:	4b0e      	ldr	r3, [pc, #56]	@ (80053d4 <_svfiprintf_r+0x1f4>)
 800539a:	a904      	add	r1, sp, #16
 800539c:	f7fd fe7e 	bl	800309c <_printf_float>
 80053a0:	1c42      	adds	r2, r0, #1
 80053a2:	4606      	mov	r6, r0
 80053a4:	d1d6      	bne.n	8005354 <_svfiprintf_r+0x174>
 80053a6:	89ab      	ldrh	r3, [r5, #12]
 80053a8:	065b      	lsls	r3, r3, #25
 80053aa:	f53f af2d 	bmi.w	8005208 <_svfiprintf_r+0x28>
 80053ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053b0:	e72c      	b.n	800520c <_svfiprintf_r+0x2c>
 80053b2:	ab03      	add	r3, sp, #12
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	462a      	mov	r2, r5
 80053b8:	4638      	mov	r0, r7
 80053ba:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <_svfiprintf_r+0x1f4>)
 80053bc:	a904      	add	r1, sp, #16
 80053be:	f7fe f90b 	bl	80035d8 <_printf_i>
 80053c2:	e7ed      	b.n	80053a0 <_svfiprintf_r+0x1c0>
 80053c4:	08005d84 	.word	0x08005d84
 80053c8:	08005d8a 	.word	0x08005d8a
 80053cc:	08005d8e 	.word	0x08005d8e
 80053d0:	0800309d 	.word	0x0800309d
 80053d4:	08005129 	.word	0x08005129

080053d8 <__sflush_r>:
 80053d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	0716      	lsls	r6, r2, #28
 80053e0:	4605      	mov	r5, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	d454      	bmi.n	8005490 <__sflush_r+0xb8>
 80053e6:	684b      	ldr	r3, [r1, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	dc02      	bgt.n	80053f2 <__sflush_r+0x1a>
 80053ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	dd48      	ble.n	8005484 <__sflush_r+0xac>
 80053f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053f4:	2e00      	cmp	r6, #0
 80053f6:	d045      	beq.n	8005484 <__sflush_r+0xac>
 80053f8:	2300      	movs	r3, #0
 80053fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053fe:	682f      	ldr	r7, [r5, #0]
 8005400:	6a21      	ldr	r1, [r4, #32]
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	d030      	beq.n	8005468 <__sflush_r+0x90>
 8005406:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	0759      	lsls	r1, r3, #29
 800540c:	d505      	bpl.n	800541a <__sflush_r+0x42>
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	1ad2      	subs	r2, r2, r3
 8005412:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005414:	b10b      	cbz	r3, 800541a <__sflush_r+0x42>
 8005416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005418:	1ad2      	subs	r2, r2, r3
 800541a:	2300      	movs	r3, #0
 800541c:	4628      	mov	r0, r5
 800541e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005420:	6a21      	ldr	r1, [r4, #32]
 8005422:	47b0      	blx	r6
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	d106      	bne.n	8005438 <__sflush_r+0x60>
 800542a:	6829      	ldr	r1, [r5, #0]
 800542c:	291d      	cmp	r1, #29
 800542e:	d82b      	bhi.n	8005488 <__sflush_r+0xb0>
 8005430:	4a28      	ldr	r2, [pc, #160]	@ (80054d4 <__sflush_r+0xfc>)
 8005432:	40ca      	lsrs	r2, r1
 8005434:	07d6      	lsls	r6, r2, #31
 8005436:	d527      	bpl.n	8005488 <__sflush_r+0xb0>
 8005438:	2200      	movs	r2, #0
 800543a:	6062      	str	r2, [r4, #4]
 800543c:	6922      	ldr	r2, [r4, #16]
 800543e:	04d9      	lsls	r1, r3, #19
 8005440:	6022      	str	r2, [r4, #0]
 8005442:	d504      	bpl.n	800544e <__sflush_r+0x76>
 8005444:	1c42      	adds	r2, r0, #1
 8005446:	d101      	bne.n	800544c <__sflush_r+0x74>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b903      	cbnz	r3, 800544e <__sflush_r+0x76>
 800544c:	6560      	str	r0, [r4, #84]	@ 0x54
 800544e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005450:	602f      	str	r7, [r5, #0]
 8005452:	b1b9      	cbz	r1, 8005484 <__sflush_r+0xac>
 8005454:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005458:	4299      	cmp	r1, r3
 800545a:	d002      	beq.n	8005462 <__sflush_r+0x8a>
 800545c:	4628      	mov	r0, r5
 800545e:	f7ff f9eb 	bl	8004838 <_free_r>
 8005462:	2300      	movs	r3, #0
 8005464:	6363      	str	r3, [r4, #52]	@ 0x34
 8005466:	e00d      	b.n	8005484 <__sflush_r+0xac>
 8005468:	2301      	movs	r3, #1
 800546a:	4628      	mov	r0, r5
 800546c:	47b0      	blx	r6
 800546e:	4602      	mov	r2, r0
 8005470:	1c50      	adds	r0, r2, #1
 8005472:	d1c9      	bne.n	8005408 <__sflush_r+0x30>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0c6      	beq.n	8005408 <__sflush_r+0x30>
 800547a:	2b1d      	cmp	r3, #29
 800547c:	d001      	beq.n	8005482 <__sflush_r+0xaa>
 800547e:	2b16      	cmp	r3, #22
 8005480:	d11d      	bne.n	80054be <__sflush_r+0xe6>
 8005482:	602f      	str	r7, [r5, #0]
 8005484:	2000      	movs	r0, #0
 8005486:	e021      	b.n	80054cc <__sflush_r+0xf4>
 8005488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800548c:	b21b      	sxth	r3, r3
 800548e:	e01a      	b.n	80054c6 <__sflush_r+0xee>
 8005490:	690f      	ldr	r7, [r1, #16]
 8005492:	2f00      	cmp	r7, #0
 8005494:	d0f6      	beq.n	8005484 <__sflush_r+0xac>
 8005496:	0793      	lsls	r3, r2, #30
 8005498:	bf18      	it	ne
 800549a:	2300      	movne	r3, #0
 800549c:	680e      	ldr	r6, [r1, #0]
 800549e:	bf08      	it	eq
 80054a0:	694b      	ldreq	r3, [r1, #20]
 80054a2:	1bf6      	subs	r6, r6, r7
 80054a4:	600f      	str	r7, [r1, #0]
 80054a6:	608b      	str	r3, [r1, #8]
 80054a8:	2e00      	cmp	r6, #0
 80054aa:	ddeb      	ble.n	8005484 <__sflush_r+0xac>
 80054ac:	4633      	mov	r3, r6
 80054ae:	463a      	mov	r2, r7
 80054b0:	4628      	mov	r0, r5
 80054b2:	6a21      	ldr	r1, [r4, #32]
 80054b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80054b8:	47e0      	blx	ip
 80054ba:	2800      	cmp	r0, #0
 80054bc:	dc07      	bgt.n	80054ce <__sflush_r+0xf6>
 80054be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054c6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ca:	81a3      	strh	r3, [r4, #12]
 80054cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ce:	4407      	add	r7, r0
 80054d0:	1a36      	subs	r6, r6, r0
 80054d2:	e7e9      	b.n	80054a8 <__sflush_r+0xd0>
 80054d4:	20400001 	.word	0x20400001

080054d8 <_fflush_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	690b      	ldr	r3, [r1, #16]
 80054dc:	4605      	mov	r5, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	b913      	cbnz	r3, 80054e8 <_fflush_r+0x10>
 80054e2:	2500      	movs	r5, #0
 80054e4:	4628      	mov	r0, r5
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	b118      	cbz	r0, 80054f2 <_fflush_r+0x1a>
 80054ea:	6a03      	ldr	r3, [r0, #32]
 80054ec:	b90b      	cbnz	r3, 80054f2 <_fflush_r+0x1a>
 80054ee:	f7fe fa1d 	bl	800392c <__sinit>
 80054f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f3      	beq.n	80054e2 <_fflush_r+0xa>
 80054fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054fc:	07d0      	lsls	r0, r2, #31
 80054fe:	d404      	bmi.n	800550a <_fflush_r+0x32>
 8005500:	0599      	lsls	r1, r3, #22
 8005502:	d402      	bmi.n	800550a <_fflush_r+0x32>
 8005504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005506:	f7fe fb2a 	bl	8003b5e <__retarget_lock_acquire_recursive>
 800550a:	4628      	mov	r0, r5
 800550c:	4621      	mov	r1, r4
 800550e:	f7ff ff63 	bl	80053d8 <__sflush_r>
 8005512:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005514:	4605      	mov	r5, r0
 8005516:	07da      	lsls	r2, r3, #31
 8005518:	d4e4      	bmi.n	80054e4 <_fflush_r+0xc>
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	059b      	lsls	r3, r3, #22
 800551e:	d4e1      	bmi.n	80054e4 <_fflush_r+0xc>
 8005520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005522:	f7fe fb1d 	bl	8003b60 <__retarget_lock_release_recursive>
 8005526:	e7dd      	b.n	80054e4 <_fflush_r+0xc>

08005528 <memmove>:
 8005528:	4288      	cmp	r0, r1
 800552a:	b510      	push	{r4, lr}
 800552c:	eb01 0402 	add.w	r4, r1, r2
 8005530:	d902      	bls.n	8005538 <memmove+0x10>
 8005532:	4284      	cmp	r4, r0
 8005534:	4623      	mov	r3, r4
 8005536:	d807      	bhi.n	8005548 <memmove+0x20>
 8005538:	1e43      	subs	r3, r0, #1
 800553a:	42a1      	cmp	r1, r4
 800553c:	d008      	beq.n	8005550 <memmove+0x28>
 800553e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005546:	e7f8      	b.n	800553a <memmove+0x12>
 8005548:	4601      	mov	r1, r0
 800554a:	4402      	add	r2, r0
 800554c:	428a      	cmp	r2, r1
 800554e:	d100      	bne.n	8005552 <memmove+0x2a>
 8005550:	bd10      	pop	{r4, pc}
 8005552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800555a:	e7f7      	b.n	800554c <memmove+0x24>

0800555c <_sbrk_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	2300      	movs	r3, #0
 8005560:	4d05      	ldr	r5, [pc, #20]	@ (8005578 <_sbrk_r+0x1c>)
 8005562:	4604      	mov	r4, r0
 8005564:	4608      	mov	r0, r1
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	f7fb ff9a 	bl	80014a0 <_sbrk>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_sbrk_r+0x1a>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_sbrk_r+0x1a>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	200003e4 	.word	0x200003e4

0800557c <memcpy>:
 800557c:	440a      	add	r2, r1
 800557e:	4291      	cmp	r1, r2
 8005580:	f100 33ff 	add.w	r3, r0, #4294967295
 8005584:	d100      	bne.n	8005588 <memcpy+0xc>
 8005586:	4770      	bx	lr
 8005588:	b510      	push	{r4, lr}
 800558a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800558e:	4291      	cmp	r1, r2
 8005590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005594:	d1f9      	bne.n	800558a <memcpy+0xe>
 8005596:	bd10      	pop	{r4, pc}

08005598 <__assert_func>:
 8005598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800559a:	4614      	mov	r4, r2
 800559c:	461a      	mov	r2, r3
 800559e:	4b09      	ldr	r3, [pc, #36]	@ (80055c4 <__assert_func+0x2c>)
 80055a0:	4605      	mov	r5, r0
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68d8      	ldr	r0, [r3, #12]
 80055a6:	b14c      	cbz	r4, 80055bc <__assert_func+0x24>
 80055a8:	4b07      	ldr	r3, [pc, #28]	@ (80055c8 <__assert_func+0x30>)
 80055aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055ae:	9100      	str	r1, [sp, #0]
 80055b0:	462b      	mov	r3, r5
 80055b2:	4906      	ldr	r1, [pc, #24]	@ (80055cc <__assert_func+0x34>)
 80055b4:	f000 f870 	bl	8005698 <fiprintf>
 80055b8:	f000 f880 	bl	80056bc <abort>
 80055bc:	4b04      	ldr	r3, [pc, #16]	@ (80055d0 <__assert_func+0x38>)
 80055be:	461c      	mov	r4, r3
 80055c0:	e7f3      	b.n	80055aa <__assert_func+0x12>
 80055c2:	bf00      	nop
 80055c4:	20000018 	.word	0x20000018
 80055c8:	08005d9f 	.word	0x08005d9f
 80055cc:	08005dac 	.word	0x08005dac
 80055d0:	08005dda 	.word	0x08005dda

080055d4 <_calloc_r>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	fba1 5402 	umull	r5, r4, r1, r2
 80055da:	b934      	cbnz	r4, 80055ea <_calloc_r+0x16>
 80055dc:	4629      	mov	r1, r5
 80055de:	f7ff f99d 	bl	800491c <_malloc_r>
 80055e2:	4606      	mov	r6, r0
 80055e4:	b928      	cbnz	r0, 80055f2 <_calloc_r+0x1e>
 80055e6:	4630      	mov	r0, r6
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	220c      	movs	r2, #12
 80055ec:	2600      	movs	r6, #0
 80055ee:	6002      	str	r2, [r0, #0]
 80055f0:	e7f9      	b.n	80055e6 <_calloc_r+0x12>
 80055f2:	462a      	mov	r2, r5
 80055f4:	4621      	mov	r1, r4
 80055f6:	f7fe fa34 	bl	8003a62 <memset>
 80055fa:	e7f4      	b.n	80055e6 <_calloc_r+0x12>

080055fc <__ascii_mbtowc>:
 80055fc:	b082      	sub	sp, #8
 80055fe:	b901      	cbnz	r1, 8005602 <__ascii_mbtowc+0x6>
 8005600:	a901      	add	r1, sp, #4
 8005602:	b142      	cbz	r2, 8005616 <__ascii_mbtowc+0x1a>
 8005604:	b14b      	cbz	r3, 800561a <__ascii_mbtowc+0x1e>
 8005606:	7813      	ldrb	r3, [r2, #0]
 8005608:	600b      	str	r3, [r1, #0]
 800560a:	7812      	ldrb	r2, [r2, #0]
 800560c:	1e10      	subs	r0, r2, #0
 800560e:	bf18      	it	ne
 8005610:	2001      	movne	r0, #1
 8005612:	b002      	add	sp, #8
 8005614:	4770      	bx	lr
 8005616:	4610      	mov	r0, r2
 8005618:	e7fb      	b.n	8005612 <__ascii_mbtowc+0x16>
 800561a:	f06f 0001 	mvn.w	r0, #1
 800561e:	e7f8      	b.n	8005612 <__ascii_mbtowc+0x16>

08005620 <_realloc_r>:
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	4607      	mov	r7, r0
 8005626:	4614      	mov	r4, r2
 8005628:	460d      	mov	r5, r1
 800562a:	b921      	cbnz	r1, 8005636 <_realloc_r+0x16>
 800562c:	4611      	mov	r1, r2
 800562e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005632:	f7ff b973 	b.w	800491c <_malloc_r>
 8005636:	b92a      	cbnz	r2, 8005644 <_realloc_r+0x24>
 8005638:	f7ff f8fe 	bl	8004838 <_free_r>
 800563c:	4625      	mov	r5, r4
 800563e:	4628      	mov	r0, r5
 8005640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005644:	f000 f841 	bl	80056ca <_malloc_usable_size_r>
 8005648:	4284      	cmp	r4, r0
 800564a:	4606      	mov	r6, r0
 800564c:	d802      	bhi.n	8005654 <_realloc_r+0x34>
 800564e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005652:	d8f4      	bhi.n	800563e <_realloc_r+0x1e>
 8005654:	4621      	mov	r1, r4
 8005656:	4638      	mov	r0, r7
 8005658:	f7ff f960 	bl	800491c <_malloc_r>
 800565c:	4680      	mov	r8, r0
 800565e:	b908      	cbnz	r0, 8005664 <_realloc_r+0x44>
 8005660:	4645      	mov	r5, r8
 8005662:	e7ec      	b.n	800563e <_realloc_r+0x1e>
 8005664:	42b4      	cmp	r4, r6
 8005666:	4622      	mov	r2, r4
 8005668:	4629      	mov	r1, r5
 800566a:	bf28      	it	cs
 800566c:	4632      	movcs	r2, r6
 800566e:	f7ff ff85 	bl	800557c <memcpy>
 8005672:	4629      	mov	r1, r5
 8005674:	4638      	mov	r0, r7
 8005676:	f7ff f8df 	bl	8004838 <_free_r>
 800567a:	e7f1      	b.n	8005660 <_realloc_r+0x40>

0800567c <__ascii_wctomb>:
 800567c:	4603      	mov	r3, r0
 800567e:	4608      	mov	r0, r1
 8005680:	b141      	cbz	r1, 8005694 <__ascii_wctomb+0x18>
 8005682:	2aff      	cmp	r2, #255	@ 0xff
 8005684:	d904      	bls.n	8005690 <__ascii_wctomb+0x14>
 8005686:	228a      	movs	r2, #138	@ 0x8a
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	4770      	bx	lr
 8005690:	2001      	movs	r0, #1
 8005692:	700a      	strb	r2, [r1, #0]
 8005694:	4770      	bx	lr
	...

08005698 <fiprintf>:
 8005698:	b40e      	push	{r1, r2, r3}
 800569a:	b503      	push	{r0, r1, lr}
 800569c:	4601      	mov	r1, r0
 800569e:	ab03      	add	r3, sp, #12
 80056a0:	4805      	ldr	r0, [pc, #20]	@ (80056b8 <fiprintf+0x20>)
 80056a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a6:	6800      	ldr	r0, [r0, #0]
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	f000 f83d 	bl	8005728 <_vfiprintf_r>
 80056ae:	b002      	add	sp, #8
 80056b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b4:	b003      	add	sp, #12
 80056b6:	4770      	bx	lr
 80056b8:	20000018 	.word	0x20000018

080056bc <abort>:
 80056bc:	2006      	movs	r0, #6
 80056be:	b508      	push	{r3, lr}
 80056c0:	f000 fa06 	bl	8005ad0 <raise>
 80056c4:	2001      	movs	r0, #1
 80056c6:	f7fb fe76 	bl	80013b6 <_exit>

080056ca <_malloc_usable_size_r>:
 80056ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ce:	1f18      	subs	r0, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bfbc      	itt	lt
 80056d4:	580b      	ldrlt	r3, [r1, r0]
 80056d6:	18c0      	addlt	r0, r0, r3
 80056d8:	4770      	bx	lr

080056da <__sfputc_r>:
 80056da:	6893      	ldr	r3, [r2, #8]
 80056dc:	b410      	push	{r4}
 80056de:	3b01      	subs	r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	6093      	str	r3, [r2, #8]
 80056e4:	da07      	bge.n	80056f6 <__sfputc_r+0x1c>
 80056e6:	6994      	ldr	r4, [r2, #24]
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	db01      	blt.n	80056f0 <__sfputc_r+0x16>
 80056ec:	290a      	cmp	r1, #10
 80056ee:	d102      	bne.n	80056f6 <__sfputc_r+0x1c>
 80056f0:	bc10      	pop	{r4}
 80056f2:	f000 b931 	b.w	8005958 <__swbuf_r>
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	1c58      	adds	r0, r3, #1
 80056fa:	6010      	str	r0, [r2, #0]
 80056fc:	7019      	strb	r1, [r3, #0]
 80056fe:	4608      	mov	r0, r1
 8005700:	bc10      	pop	{r4}
 8005702:	4770      	bx	lr

08005704 <__sfputs_r>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	4606      	mov	r6, r0
 8005708:	460f      	mov	r7, r1
 800570a:	4614      	mov	r4, r2
 800570c:	18d5      	adds	r5, r2, r3
 800570e:	42ac      	cmp	r4, r5
 8005710:	d101      	bne.n	8005716 <__sfputs_r+0x12>
 8005712:	2000      	movs	r0, #0
 8005714:	e007      	b.n	8005726 <__sfputs_r+0x22>
 8005716:	463a      	mov	r2, r7
 8005718:	4630      	mov	r0, r6
 800571a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571e:	f7ff ffdc 	bl	80056da <__sfputc_r>
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	d1f3      	bne.n	800570e <__sfputs_r+0xa>
 8005726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005728 <_vfiprintf_r>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	460d      	mov	r5, r1
 800572e:	4614      	mov	r4, r2
 8005730:	4698      	mov	r8, r3
 8005732:	4606      	mov	r6, r0
 8005734:	b09d      	sub	sp, #116	@ 0x74
 8005736:	b118      	cbz	r0, 8005740 <_vfiprintf_r+0x18>
 8005738:	6a03      	ldr	r3, [r0, #32]
 800573a:	b90b      	cbnz	r3, 8005740 <_vfiprintf_r+0x18>
 800573c:	f7fe f8f6 	bl	800392c <__sinit>
 8005740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005742:	07d9      	lsls	r1, r3, #31
 8005744:	d405      	bmi.n	8005752 <_vfiprintf_r+0x2a>
 8005746:	89ab      	ldrh	r3, [r5, #12]
 8005748:	059a      	lsls	r2, r3, #22
 800574a:	d402      	bmi.n	8005752 <_vfiprintf_r+0x2a>
 800574c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800574e:	f7fe fa06 	bl	8003b5e <__retarget_lock_acquire_recursive>
 8005752:	89ab      	ldrh	r3, [r5, #12]
 8005754:	071b      	lsls	r3, r3, #28
 8005756:	d501      	bpl.n	800575c <_vfiprintf_r+0x34>
 8005758:	692b      	ldr	r3, [r5, #16]
 800575a:	b99b      	cbnz	r3, 8005784 <_vfiprintf_r+0x5c>
 800575c:	4629      	mov	r1, r5
 800575e:	4630      	mov	r0, r6
 8005760:	f000 f938 	bl	80059d4 <__swsetup_r>
 8005764:	b170      	cbz	r0, 8005784 <_vfiprintf_r+0x5c>
 8005766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005768:	07dc      	lsls	r4, r3, #31
 800576a:	d504      	bpl.n	8005776 <_vfiprintf_r+0x4e>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	b01d      	add	sp, #116	@ 0x74
 8005772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005776:	89ab      	ldrh	r3, [r5, #12]
 8005778:	0598      	lsls	r0, r3, #22
 800577a:	d4f7      	bmi.n	800576c <_vfiprintf_r+0x44>
 800577c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800577e:	f7fe f9ef 	bl	8003b60 <__retarget_lock_release_recursive>
 8005782:	e7f3      	b.n	800576c <_vfiprintf_r+0x44>
 8005784:	2300      	movs	r3, #0
 8005786:	9309      	str	r3, [sp, #36]	@ 0x24
 8005788:	2320      	movs	r3, #32
 800578a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800578e:	2330      	movs	r3, #48	@ 0x30
 8005790:	f04f 0901 	mov.w	r9, #1
 8005794:	f8cd 800c 	str.w	r8, [sp, #12]
 8005798:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005944 <_vfiprintf_r+0x21c>
 800579c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057a0:	4623      	mov	r3, r4
 80057a2:	469a      	mov	sl, r3
 80057a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057a8:	b10a      	cbz	r2, 80057ae <_vfiprintf_r+0x86>
 80057aa:	2a25      	cmp	r2, #37	@ 0x25
 80057ac:	d1f9      	bne.n	80057a2 <_vfiprintf_r+0x7a>
 80057ae:	ebba 0b04 	subs.w	fp, sl, r4
 80057b2:	d00b      	beq.n	80057cc <_vfiprintf_r+0xa4>
 80057b4:	465b      	mov	r3, fp
 80057b6:	4622      	mov	r2, r4
 80057b8:	4629      	mov	r1, r5
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7ff ffa2 	bl	8005704 <__sfputs_r>
 80057c0:	3001      	adds	r0, #1
 80057c2:	f000 80a7 	beq.w	8005914 <_vfiprintf_r+0x1ec>
 80057c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057c8:	445a      	add	r2, fp
 80057ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80057cc:	f89a 3000 	ldrb.w	r3, [sl]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 809f 	beq.w	8005914 <_vfiprintf_r+0x1ec>
 80057d6:	2300      	movs	r3, #0
 80057d8:	f04f 32ff 	mov.w	r2, #4294967295
 80057dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e0:	f10a 0a01 	add.w	sl, sl, #1
 80057e4:	9304      	str	r3, [sp, #16]
 80057e6:	9307      	str	r3, [sp, #28]
 80057e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80057ee:	4654      	mov	r4, sl
 80057f0:	2205      	movs	r2, #5
 80057f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f6:	4853      	ldr	r0, [pc, #332]	@ (8005944 <_vfiprintf_r+0x21c>)
 80057f8:	f7fe f9b3 	bl	8003b62 <memchr>
 80057fc:	9a04      	ldr	r2, [sp, #16]
 80057fe:	b9d8      	cbnz	r0, 8005838 <_vfiprintf_r+0x110>
 8005800:	06d1      	lsls	r1, r2, #27
 8005802:	bf44      	itt	mi
 8005804:	2320      	movmi	r3, #32
 8005806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800580a:	0713      	lsls	r3, r2, #28
 800580c:	bf44      	itt	mi
 800580e:	232b      	movmi	r3, #43	@ 0x2b
 8005810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005814:	f89a 3000 	ldrb.w	r3, [sl]
 8005818:	2b2a      	cmp	r3, #42	@ 0x2a
 800581a:	d015      	beq.n	8005848 <_vfiprintf_r+0x120>
 800581c:	4654      	mov	r4, sl
 800581e:	2000      	movs	r0, #0
 8005820:	f04f 0c0a 	mov.w	ip, #10
 8005824:	9a07      	ldr	r2, [sp, #28]
 8005826:	4621      	mov	r1, r4
 8005828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800582c:	3b30      	subs	r3, #48	@ 0x30
 800582e:	2b09      	cmp	r3, #9
 8005830:	d94b      	bls.n	80058ca <_vfiprintf_r+0x1a2>
 8005832:	b1b0      	cbz	r0, 8005862 <_vfiprintf_r+0x13a>
 8005834:	9207      	str	r2, [sp, #28]
 8005836:	e014      	b.n	8005862 <_vfiprintf_r+0x13a>
 8005838:	eba0 0308 	sub.w	r3, r0, r8
 800583c:	fa09 f303 	lsl.w	r3, r9, r3
 8005840:	4313      	orrs	r3, r2
 8005842:	46a2      	mov	sl, r4
 8005844:	9304      	str	r3, [sp, #16]
 8005846:	e7d2      	b.n	80057ee <_vfiprintf_r+0xc6>
 8005848:	9b03      	ldr	r3, [sp, #12]
 800584a:	1d19      	adds	r1, r3, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	9103      	str	r1, [sp, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	bfbb      	ittet	lt
 8005854:	425b      	neglt	r3, r3
 8005856:	f042 0202 	orrlt.w	r2, r2, #2
 800585a:	9307      	strge	r3, [sp, #28]
 800585c:	9307      	strlt	r3, [sp, #28]
 800585e:	bfb8      	it	lt
 8005860:	9204      	strlt	r2, [sp, #16]
 8005862:	7823      	ldrb	r3, [r4, #0]
 8005864:	2b2e      	cmp	r3, #46	@ 0x2e
 8005866:	d10a      	bne.n	800587e <_vfiprintf_r+0x156>
 8005868:	7863      	ldrb	r3, [r4, #1]
 800586a:	2b2a      	cmp	r3, #42	@ 0x2a
 800586c:	d132      	bne.n	80058d4 <_vfiprintf_r+0x1ac>
 800586e:	9b03      	ldr	r3, [sp, #12]
 8005870:	3402      	adds	r4, #2
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	9203      	str	r2, [sp, #12]
 8005878:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800587c:	9305      	str	r3, [sp, #20]
 800587e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005948 <_vfiprintf_r+0x220>
 8005882:	2203      	movs	r2, #3
 8005884:	4650      	mov	r0, sl
 8005886:	7821      	ldrb	r1, [r4, #0]
 8005888:	f7fe f96b 	bl	8003b62 <memchr>
 800588c:	b138      	cbz	r0, 800589e <_vfiprintf_r+0x176>
 800588e:	2240      	movs	r2, #64	@ 0x40
 8005890:	9b04      	ldr	r3, [sp, #16]
 8005892:	eba0 000a 	sub.w	r0, r0, sl
 8005896:	4082      	lsls	r2, r0
 8005898:	4313      	orrs	r3, r2
 800589a:	3401      	adds	r4, #1
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a2:	2206      	movs	r2, #6
 80058a4:	4829      	ldr	r0, [pc, #164]	@ (800594c <_vfiprintf_r+0x224>)
 80058a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058aa:	f7fe f95a 	bl	8003b62 <memchr>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d03f      	beq.n	8005932 <_vfiprintf_r+0x20a>
 80058b2:	4b27      	ldr	r3, [pc, #156]	@ (8005950 <_vfiprintf_r+0x228>)
 80058b4:	bb1b      	cbnz	r3, 80058fe <_vfiprintf_r+0x1d6>
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	3307      	adds	r3, #7
 80058ba:	f023 0307 	bic.w	r3, r3, #7
 80058be:	3308      	adds	r3, #8
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c4:	443b      	add	r3, r7
 80058c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c8:	e76a      	b.n	80057a0 <_vfiprintf_r+0x78>
 80058ca:	460c      	mov	r4, r1
 80058cc:	2001      	movs	r0, #1
 80058ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80058d2:	e7a8      	b.n	8005826 <_vfiprintf_r+0xfe>
 80058d4:	2300      	movs	r3, #0
 80058d6:	f04f 0c0a 	mov.w	ip, #10
 80058da:	4619      	mov	r1, r3
 80058dc:	3401      	adds	r4, #1
 80058de:	9305      	str	r3, [sp, #20]
 80058e0:	4620      	mov	r0, r4
 80058e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e6:	3a30      	subs	r2, #48	@ 0x30
 80058e8:	2a09      	cmp	r2, #9
 80058ea:	d903      	bls.n	80058f4 <_vfiprintf_r+0x1cc>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0c6      	beq.n	800587e <_vfiprintf_r+0x156>
 80058f0:	9105      	str	r1, [sp, #20]
 80058f2:	e7c4      	b.n	800587e <_vfiprintf_r+0x156>
 80058f4:	4604      	mov	r4, r0
 80058f6:	2301      	movs	r3, #1
 80058f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80058fc:	e7f0      	b.n	80058e0 <_vfiprintf_r+0x1b8>
 80058fe:	ab03      	add	r3, sp, #12
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	462a      	mov	r2, r5
 8005904:	4630      	mov	r0, r6
 8005906:	4b13      	ldr	r3, [pc, #76]	@ (8005954 <_vfiprintf_r+0x22c>)
 8005908:	a904      	add	r1, sp, #16
 800590a:	f7fd fbc7 	bl	800309c <_printf_float>
 800590e:	4607      	mov	r7, r0
 8005910:	1c78      	adds	r0, r7, #1
 8005912:	d1d6      	bne.n	80058c2 <_vfiprintf_r+0x19a>
 8005914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005916:	07d9      	lsls	r1, r3, #31
 8005918:	d405      	bmi.n	8005926 <_vfiprintf_r+0x1fe>
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	059a      	lsls	r2, r3, #22
 800591e:	d402      	bmi.n	8005926 <_vfiprintf_r+0x1fe>
 8005920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005922:	f7fe f91d 	bl	8003b60 <__retarget_lock_release_recursive>
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	065b      	lsls	r3, r3, #25
 800592a:	f53f af1f 	bmi.w	800576c <_vfiprintf_r+0x44>
 800592e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005930:	e71e      	b.n	8005770 <_vfiprintf_r+0x48>
 8005932:	ab03      	add	r3, sp, #12
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	462a      	mov	r2, r5
 8005938:	4630      	mov	r0, r6
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <_vfiprintf_r+0x22c>)
 800593c:	a904      	add	r1, sp, #16
 800593e:	f7fd fe4b 	bl	80035d8 <_printf_i>
 8005942:	e7e4      	b.n	800590e <_vfiprintf_r+0x1e6>
 8005944:	08005d84 	.word	0x08005d84
 8005948:	08005d8a 	.word	0x08005d8a
 800594c:	08005d8e 	.word	0x08005d8e
 8005950:	0800309d 	.word	0x0800309d
 8005954:	08005705 	.word	0x08005705

08005958 <__swbuf_r>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	460e      	mov	r6, r1
 800595c:	4614      	mov	r4, r2
 800595e:	4605      	mov	r5, r0
 8005960:	b118      	cbz	r0, 800596a <__swbuf_r+0x12>
 8005962:	6a03      	ldr	r3, [r0, #32]
 8005964:	b90b      	cbnz	r3, 800596a <__swbuf_r+0x12>
 8005966:	f7fd ffe1 	bl	800392c <__sinit>
 800596a:	69a3      	ldr	r3, [r4, #24]
 800596c:	60a3      	str	r3, [r4, #8]
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	071a      	lsls	r2, r3, #28
 8005972:	d501      	bpl.n	8005978 <__swbuf_r+0x20>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	b943      	cbnz	r3, 800598a <__swbuf_r+0x32>
 8005978:	4621      	mov	r1, r4
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f82a 	bl	80059d4 <__swsetup_r>
 8005980:	b118      	cbz	r0, 800598a <__swbuf_r+0x32>
 8005982:	f04f 37ff 	mov.w	r7, #4294967295
 8005986:	4638      	mov	r0, r7
 8005988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	6922      	ldr	r2, [r4, #16]
 800598e:	b2f6      	uxtb	r6, r6
 8005990:	1a98      	subs	r0, r3, r2
 8005992:	6963      	ldr	r3, [r4, #20]
 8005994:	4637      	mov	r7, r6
 8005996:	4283      	cmp	r3, r0
 8005998:	dc05      	bgt.n	80059a6 <__swbuf_r+0x4e>
 800599a:	4621      	mov	r1, r4
 800599c:	4628      	mov	r0, r5
 800599e:	f7ff fd9b 	bl	80054d8 <_fflush_r>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d1ed      	bne.n	8005982 <__swbuf_r+0x2a>
 80059a6:	68a3      	ldr	r3, [r4, #8]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	60a3      	str	r3, [r4, #8]
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	701e      	strb	r6, [r3, #0]
 80059b4:	6962      	ldr	r2, [r4, #20]
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d004      	beq.n	80059c6 <__swbuf_r+0x6e>
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	07db      	lsls	r3, r3, #31
 80059c0:	d5e1      	bpl.n	8005986 <__swbuf_r+0x2e>
 80059c2:	2e0a      	cmp	r6, #10
 80059c4:	d1df      	bne.n	8005986 <__swbuf_r+0x2e>
 80059c6:	4621      	mov	r1, r4
 80059c8:	4628      	mov	r0, r5
 80059ca:	f7ff fd85 	bl	80054d8 <_fflush_r>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d0d9      	beq.n	8005986 <__swbuf_r+0x2e>
 80059d2:	e7d6      	b.n	8005982 <__swbuf_r+0x2a>

080059d4 <__swsetup_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4b29      	ldr	r3, [pc, #164]	@ (8005a7c <__swsetup_r+0xa8>)
 80059d8:	4605      	mov	r5, r0
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	460c      	mov	r4, r1
 80059de:	b118      	cbz	r0, 80059e8 <__swsetup_r+0x14>
 80059e0:	6a03      	ldr	r3, [r0, #32]
 80059e2:	b90b      	cbnz	r3, 80059e8 <__swsetup_r+0x14>
 80059e4:	f7fd ffa2 	bl	800392c <__sinit>
 80059e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ec:	0719      	lsls	r1, r3, #28
 80059ee:	d422      	bmi.n	8005a36 <__swsetup_r+0x62>
 80059f0:	06da      	lsls	r2, r3, #27
 80059f2:	d407      	bmi.n	8005a04 <__swsetup_r+0x30>
 80059f4:	2209      	movs	r2, #9
 80059f6:	602a      	str	r2, [r5, #0]
 80059f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	e033      	b.n	8005a6c <__swsetup_r+0x98>
 8005a04:	0758      	lsls	r0, r3, #29
 8005a06:	d512      	bpl.n	8005a2e <__swsetup_r+0x5a>
 8005a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a0a:	b141      	cbz	r1, 8005a1e <__swsetup_r+0x4a>
 8005a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d002      	beq.n	8005a1a <__swsetup_r+0x46>
 8005a14:	4628      	mov	r0, r5
 8005a16:	f7fe ff0f 	bl	8004838 <_free_r>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	2300      	movs	r3, #0
 8005a28:	6063      	str	r3, [r4, #4]
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	f043 0308 	orr.w	r3, r3, #8
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	b94b      	cbnz	r3, 8005a4e <__swsetup_r+0x7a>
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a44:	d003      	beq.n	8005a4e <__swsetup_r+0x7a>
 8005a46:	4621      	mov	r1, r4
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f000 f882 	bl	8005b52 <__smakebuf_r>
 8005a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a52:	f013 0201 	ands.w	r2, r3, #1
 8005a56:	d00a      	beq.n	8005a6e <__swsetup_r+0x9a>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	60a2      	str	r2, [r4, #8]
 8005a5c:	6962      	ldr	r2, [r4, #20]
 8005a5e:	4252      	negs	r2, r2
 8005a60:	61a2      	str	r2, [r4, #24]
 8005a62:	6922      	ldr	r2, [r4, #16]
 8005a64:	b942      	cbnz	r2, 8005a78 <__swsetup_r+0xa4>
 8005a66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a6a:	d1c5      	bne.n	80059f8 <__swsetup_r+0x24>
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	0799      	lsls	r1, r3, #30
 8005a70:	bf58      	it	pl
 8005a72:	6962      	ldrpl	r2, [r4, #20]
 8005a74:	60a2      	str	r2, [r4, #8]
 8005a76:	e7f4      	b.n	8005a62 <__swsetup_r+0x8e>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e7f7      	b.n	8005a6c <__swsetup_r+0x98>
 8005a7c:	20000018 	.word	0x20000018

08005a80 <_raise_r>:
 8005a80:	291f      	cmp	r1, #31
 8005a82:	b538      	push	{r3, r4, r5, lr}
 8005a84:	4605      	mov	r5, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	d904      	bls.n	8005a94 <_raise_r+0x14>
 8005a8a:	2316      	movs	r3, #22
 8005a8c:	6003      	str	r3, [r0, #0]
 8005a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005a96:	b112      	cbz	r2, 8005a9e <_raise_r+0x1e>
 8005a98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a9c:	b94b      	cbnz	r3, 8005ab2 <_raise_r+0x32>
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 f830 	bl	8005b04 <_getpid_r>
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aae:	f000 b817 	b.w	8005ae0 <_kill_r>
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d00a      	beq.n	8005acc <_raise_r+0x4c>
 8005ab6:	1c59      	adds	r1, r3, #1
 8005ab8:	d103      	bne.n	8005ac2 <_raise_r+0x42>
 8005aba:	2316      	movs	r3, #22
 8005abc:	6003      	str	r3, [r0, #0]
 8005abe:	2001      	movs	r0, #1
 8005ac0:	e7e7      	b.n	8005a92 <_raise_r+0x12>
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005aca:	4798      	blx	r3
 8005acc:	2000      	movs	r0, #0
 8005ace:	e7e0      	b.n	8005a92 <_raise_r+0x12>

08005ad0 <raise>:
 8005ad0:	4b02      	ldr	r3, [pc, #8]	@ (8005adc <raise+0xc>)
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	f7ff bfd3 	b.w	8005a80 <_raise_r>
 8005ada:	bf00      	nop
 8005adc:	20000018 	.word	0x20000018

08005ae0 <_kill_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4d06      	ldr	r5, [pc, #24]	@ (8005b00 <_kill_r+0x20>)
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	4611      	mov	r1, r2
 8005aec:	602b      	str	r3, [r5, #0]
 8005aee:	f7fb fc52 	bl	8001396 <_kill>
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	d102      	bne.n	8005afc <_kill_r+0x1c>
 8005af6:	682b      	ldr	r3, [r5, #0]
 8005af8:	b103      	cbz	r3, 8005afc <_kill_r+0x1c>
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	bd38      	pop	{r3, r4, r5, pc}
 8005afe:	bf00      	nop
 8005b00:	200003e4 	.word	0x200003e4

08005b04 <_getpid_r>:
 8005b04:	f7fb bc40 	b.w	8001388 <_getpid>

08005b08 <__swhatbuf_r>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b10:	4615      	mov	r5, r2
 8005b12:	2900      	cmp	r1, #0
 8005b14:	461e      	mov	r6, r3
 8005b16:	b096      	sub	sp, #88	@ 0x58
 8005b18:	da0c      	bge.n	8005b34 <__swhatbuf_r+0x2c>
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b22:	bf14      	ite	ne
 8005b24:	2340      	movne	r3, #64	@ 0x40
 8005b26:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	6031      	str	r1, [r6, #0]
 8005b2e:	602b      	str	r3, [r5, #0]
 8005b30:	b016      	add	sp, #88	@ 0x58
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	466a      	mov	r2, sp
 8005b36:	f000 f849 	bl	8005bcc <_fstat_r>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	dbed      	blt.n	8005b1a <__swhatbuf_r+0x12>
 8005b3e:	9901      	ldr	r1, [sp, #4]
 8005b40:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b44:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b48:	4259      	negs	r1, r3
 8005b4a:	4159      	adcs	r1, r3
 8005b4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b50:	e7eb      	b.n	8005b2a <__swhatbuf_r+0x22>

08005b52 <__smakebuf_r>:
 8005b52:	898b      	ldrh	r3, [r1, #12]
 8005b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b56:	079d      	lsls	r5, r3, #30
 8005b58:	4606      	mov	r6, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	d507      	bpl.n	8005b6e <__smakebuf_r+0x1c>
 8005b5e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	6123      	str	r3, [r4, #16]
 8005b66:	2301      	movs	r3, #1
 8005b68:	6163      	str	r3, [r4, #20]
 8005b6a:	b003      	add	sp, #12
 8005b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b6e:	466a      	mov	r2, sp
 8005b70:	ab01      	add	r3, sp, #4
 8005b72:	f7ff ffc9 	bl	8005b08 <__swhatbuf_r>
 8005b76:	9f00      	ldr	r7, [sp, #0]
 8005b78:	4605      	mov	r5, r0
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f7fe fecd 	bl	800491c <_malloc_r>
 8005b82:	b948      	cbnz	r0, 8005b98 <__smakebuf_r+0x46>
 8005b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b88:	059a      	lsls	r2, r3, #22
 8005b8a:	d4ee      	bmi.n	8005b6a <__smakebuf_r+0x18>
 8005b8c:	f023 0303 	bic.w	r3, r3, #3
 8005b90:	f043 0302 	orr.w	r3, r3, #2
 8005b94:	81a3      	strh	r3, [r4, #12]
 8005b96:	e7e2      	b.n	8005b5e <__smakebuf_r+0xc>
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba2:	81a3      	strh	r3, [r4, #12]
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	6020      	str	r0, [r4, #0]
 8005ba8:	b15b      	cbz	r3, 8005bc2 <__smakebuf_r+0x70>
 8005baa:	4630      	mov	r0, r6
 8005bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bb0:	f000 f81e 	bl	8005bf0 <_isatty_r>
 8005bb4:	b128      	cbz	r0, 8005bc2 <__smakebuf_r+0x70>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f023 0303 	bic.w	r3, r3, #3
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	431d      	orrs	r5, r3
 8005bc6:	81a5      	strh	r5, [r4, #12]
 8005bc8:	e7cf      	b.n	8005b6a <__smakebuf_r+0x18>
	...

08005bcc <_fstat_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	2300      	movs	r3, #0
 8005bd0:	4d06      	ldr	r5, [pc, #24]	@ (8005bec <_fstat_r+0x20>)
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	602b      	str	r3, [r5, #0]
 8005bda:	f7fb fc3b 	bl	8001454 <_fstat>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	d102      	bne.n	8005be8 <_fstat_r+0x1c>
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	b103      	cbz	r3, 8005be8 <_fstat_r+0x1c>
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	bd38      	pop	{r3, r4, r5, pc}
 8005bea:	bf00      	nop
 8005bec:	200003e4 	.word	0x200003e4

08005bf0 <_isatty_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	4d05      	ldr	r5, [pc, #20]	@ (8005c0c <_isatty_r+0x1c>)
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	f7fb fc39 	bl	8001472 <_isatty>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_isatty_r+0x1a>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_isatty_r+0x1a>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	200003e4 	.word	0x200003e4

08005c10 <_init>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr

08005c1c <_fini>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr
