
G474RE_DMA_DAC_Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006980  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006b58  08006b58  00007b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d48  08006d48  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d48  08006d48  00007d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d50  08006d50  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d50  08006d50  00007d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d54  08006d54  00007d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006d58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b4  20000010  08006d68  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021c4  08006d68  000081c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a7f  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b0  00000000  00000000  0001aabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0001d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea2  00000000  00000000  0001e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282b4  00000000  00000000  0001f512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001452e  00000000  00000000  000477c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f82c  00000000  00000000  0005bcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b520  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005598  00000000  00000000  0016b564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00170afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006b40 	.word	0x08006b40

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08006b40 	.word	0x08006b40

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <StringToBits>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void StringToBits(const char *str, uint8_t *bits, uint32_t *n_bits) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
	uint32_t idx = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < strlen(str); i++) {
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	e01d      	b.n	8000bb6 <StringToBits+0x52>
		for (int b = 7; b >= 0; b--) {
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e014      	b.n	8000baa <StringToBits+0x46>
			bits[idx++] = (str[i] >> b) & 0x1;
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	4413      	add	r3, r2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	fa42 f303 	asr.w	r3, r2, r3
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	1c59      	adds	r1, r3, #1
 8000b96:	61f9      	str	r1, [r7, #28]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f002 0201 	and.w	r2, r2, #1
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	701a      	strb	r2, [r3, #0]
		for (int b = 7; b >= 0; b--) {
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	dae7      	bge.n	8000b80 <StringToBits+0x1c>
	for (uint32_t i = 0; i < strlen(str); i++) {
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff fb2e 	bl	8000218 <strlen>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d3da      	bcc.n	8000b7a <StringToBits+0x16>
		}
	}
	*n_bits = idx;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	601a      	str	r2, [r3, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	0000      	movs	r0, r0
 8000bd4:	0000      	movs	r0, r0
	...

08000bd8 <FillDACBufferAFSK>:

void FillDACBufferAFSK(void) {
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b089      	sub	sp, #36	@ 0x24
 8000bdc:	af00      	add	r7, sp, #0
	uint32_t idx = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
	for (uint32_t b = 0; b < total_bits; b++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	e05d      	b.n	8000ca4 <FillDACBufferAFSK+0xcc>
		double freq = (bitstream[b]) ? MARK_FREQ : SPACE_FREQ;
 8000be8:	4a39      	ldr	r2, [pc, #228]	@ (8000cd0 <FillDACBufferAFSK+0xf8>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4413      	add	r3, r2
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <FillDACBufferAFSK+0x24>
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	4b36      	ldr	r3, [pc, #216]	@ (8000cd4 <FillDACBufferAFSK+0xfc>)
 8000bfa:	e002      	b.n	8000c02 <FillDACBufferAFSK+0x2a>
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	4b35      	ldr	r3, [pc, #212]	@ (8000cd8 <FillDACBufferAFSK+0x100>)
 8000c02:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e045      	b.n	8000c98 <FillDACBufferAFSK+0xc0>
			double t = (double) i / SAMPLE_RATE;
 8000c0c:	6978      	ldr	r0, [r7, #20]
 8000c0e:	f7ff fc5d 	bl	80004cc <__aeabi_i2d>
 8000c12:	a329      	add	r3, pc, #164	@ (adr r3, 8000cb8 <FillDACBufferAFSK+0xe0>)
 8000c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c18:	f7ff fdec 	bl	80007f4 <__aeabi_ddiv>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	e9c7 2300 	strd	r2, r3, [r7]
			dac_buffer[idx++] = (uint16_t) ((sin(2 * M_PI * freq * t) + 1.0)
 8000c24:	a326      	add	r3, pc, #152	@ (adr r3, 8000cc0 <FillDACBufferAFSK+0xe8>)
 8000c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c2e:	f7ff fcb7 	bl	80005a0 <__aeabi_dmul>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c3e:	f7ff fcaf 	bl	80005a0 <__aeabi_dmul>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	ec43 2b17 	vmov	d7, r2, r3
 8000c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8000c4e:	eef0 0a67 	vmov.f32	s1, s15
 8000c52:	f004 ff51 	bl	8005af8 <sin>
 8000c56:	ec51 0b10 	vmov	r0, r1, d0
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <FillDACBufferAFSK+0x104>)
 8000c60:	f7ff fae8 	bl	8000234 <__adddf3>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4610      	mov	r0, r2
 8000c6a:	4619      	mov	r1, r3
					* (DAC_MAX / 2));
 8000c6c:	a316      	add	r3, pc, #88	@ (adr r3, 8000cc8 <FillDACBufferAFSK+0xf0>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	f7ff fc95 	bl	80005a0 <__aeabi_dmul>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
			dac_buffer[idx++] = (uint16_t) ((sin(2 * M_PI * freq * t) + 1.0)
 8000c7e:	69fc      	ldr	r4, [r7, #28]
 8000c80:	1c63      	adds	r3, r4, #1
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	f7ff ff4e 	bl	8000b24 <__aeabi_d2uiz>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <FillDACBufferAFSK+0x108>)
 8000c8e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2b31      	cmp	r3, #49	@ 0x31
 8000c9c:	ddb6      	ble.n	8000c0c <FillDACBufferAFSK+0x34>
	for (uint32_t b = 0; b < total_bits; b++) {
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <FillDACBufferAFSK+0x10c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d39c      	bcc.n	8000be8 <FillDACBufferAFSK+0x10>
		}
	}
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3724      	adds	r7, #36	@ 0x24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	00000000 	.word	0x00000000
 8000cbc:	40e38800 	.word	0x40e38800
 8000cc0:	54442d18 	.word	0x54442d18
 8000cc4:	401921fb 	.word	0x401921fb
 8000cc8:	00000000 	.word	0x00000000
 8000ccc:	409ffc00 	.word	0x409ffc00
 8000cd0:	20001f6c 	.word	0x20001f6c
 8000cd4:	40a2c000 	.word	0x40a2c000
 8000cd8:	4092c000 	.word	0x4092c000
 8000cdc:	3ff00000 	.word	0x3ff00000
 8000ce0:	2000002c 	.word	0x2000002c
 8000ce4:	20001fbc 	.word	0x20001fbc

08000ce8 <DetectBit>:

/* Simple Goertzel frequency detection for one block */
uint8_t DetectBit(uint16_t *samples) {
 8000ce8:	b5b0      	push	{r4, r5, r7, lr}
 8000cea:	b092      	sub	sp, #72	@ 0x48
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	double s_prev = 0, s_prev2 = 0;
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double normalized_mark = 2.0 * cos(2 * M_PI * MARK_FREQ / SAMPLE_RATE);
 8000d08:	a377      	add	r3, pc, #476	@ (adr r3, 8000ee8 <DetectBit+0x200>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double normalized_space = 2.0 * cos(2 * M_PI * SPACE_FREQ / SAMPLE_RATE);
 8000d12:	a377      	add	r3, pc, #476	@ (adr r3, 8000ef0 <DetectBit+0x208>)
 8000d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d18:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double s, power_mark, power_space;

	// MARK detection
	for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d20:	e02c      	b.n	8000d7c <DetectBit+0x94>
		s = samples[i] + normalized_mark * s_prev - s_prev2;
 8000d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fbcd 	bl	80004cc <__aeabi_i2d>
 8000d32:	4604      	mov	r4, r0
 8000d34:	460d      	mov	r5, r1
 8000d36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000d3e:	f7ff fc2f 	bl	80005a0 <__aeabi_dmul>
 8000d42:	4602      	mov	r2, r0
 8000d44:	460b      	mov	r3, r1
 8000d46:	4620      	mov	r0, r4
 8000d48:	4629      	mov	r1, r5
 8000d4a:	f7ff fa73 	bl	8000234 <__adddf3>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000d5a:	f7ff fa69 	bl	8000230 <__aeabi_dsub>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	e9c7 2302 	strd	r2, r3, [r7, #8]
		s_prev2 = s_prev;
 8000d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000d6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		s_prev = s;
 8000d6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d72:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8000d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d78:	3301      	adds	r3, #1
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d7e:	2b31      	cmp	r3, #49	@ 0x31
 8000d80:	ddcf      	ble.n	8000d22 <DetectBit+0x3a>
	}
	power_mark = s_prev2 * s_prev2 + s_prev * s_prev
 8000d82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000d86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000d8a:	f7ff fc09 	bl	80005a0 <__aeabi_dmul>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4614      	mov	r4, r2
 8000d94:	461d      	mov	r5, r3
 8000d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000d9a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000d9e:	f7ff fbff 	bl	80005a0 <__aeabi_dmul>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4620      	mov	r0, r4
 8000da8:	4629      	mov	r1, r5
 8000daa:	f7ff fa43 	bl	8000234 <__adddf3>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4614      	mov	r4, r2
 8000db4:	461d      	mov	r5, r3
			- normalized_mark * s_prev * s_prev2;
 8000db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000dba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000dbe:	f7ff fbef 	bl	80005a0 <__aeabi_dmul>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000dce:	f7ff fbe7 	bl	80005a0 <__aeabi_dmul>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
	power_mark = s_prev2 * s_prev2 + s_prev * s_prev
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	4629      	mov	r1, r5
 8000dda:	f7ff fa29 	bl	8000230 <__aeabi_dsub>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	s_prev = s_prev2 = 0;
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000df2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000df6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	// SPACE detection
	for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8000dfe:	e02c      	b.n	8000e5a <DetectBit+0x172>
		s = samples[i] + normalized_space * s_prev - s_prev2;
 8000e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb5e 	bl	80004cc <__aeabi_i2d>
 8000e10:	4604      	mov	r4, r0
 8000e12:	460d      	mov	r5, r1
 8000e14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000e18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e1c:	f7ff fbc0 	bl	80005a0 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4620      	mov	r0, r4
 8000e26:	4629      	mov	r1, r5
 8000e28:	f7ff fa04 	bl	8000234 <__adddf3>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000e38:	f7ff f9fa 	bl	8000230 <__aeabi_dsub>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	e9c7 2302 	strd	r2, r3, [r7, #8]
		s_prev2 = s_prev;
 8000e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000e48:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		s_prev = s;
 8000e4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e50:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8000e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e56:	3301      	adds	r3, #1
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e5c:	2b31      	cmp	r3, #49	@ 0x31
 8000e5e:	ddcf      	ble.n	8000e00 <DetectBit+0x118>
	}
	power_space = s_prev2 * s_prev2 + s_prev * s_prev
 8000e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000e64:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000e68:	f7ff fb9a 	bl	80005a0 <__aeabi_dmul>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4614      	mov	r4, r2
 8000e72:	461d      	mov	r5, r3
 8000e74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000e78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000e7c:	f7ff fb90 	bl	80005a0 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4620      	mov	r0, r4
 8000e86:	4629      	mov	r1, r5
 8000e88:	f7ff f9d4 	bl	8000234 <__adddf3>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4614      	mov	r4, r2
 8000e92:	461d      	mov	r5, r3
			- normalized_space * s_prev * s_prev2;
 8000e94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000e98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e9c:	f7ff fb80 	bl	80005a0 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000eac:	f7ff fb78 	bl	80005a0 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
	power_space = s_prev2 * s_prev2 + s_prev * s_prev
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	f7ff f9ba 	bl	8000230 <__aeabi_dsub>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return (power_mark > power_space) ? 1 : 0;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	461c      	mov	r4, r3
 8000ec8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ecc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ed0:	f7ff fdf6 	bl	8000ac0 <__aeabi_dcmpgt>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <DetectBit+0x1f6>
 8000eda:	2300      	movs	r3, #0
 8000edc:	461c      	mov	r4, r3
 8000ede:	b2e3      	uxtb	r3, r4
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3748      	adds	r7, #72	@ 0x48
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee8:	9def5ae5 	.word	0x9def5ae5
 8000eec:	3ffdc0ba 	.word	0x3ffdc0ba
 8000ef0:	ac2509ff 	.word	0xac2509ff
 8000ef4:	3fff6ee5 	.word	0x3fff6ee5

08000ef8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000efe:	f000 fbb8 	bl	8001672 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f02:	f000 f89d 	bl	8001040 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f06:	f000 fa05 	bl	8001314 <MX_GPIO_Init>
	MX_DMA_Init();
 8000f0a:	f000 f9d9 	bl	80012c0 <MX_DMA_Init>
	MX_DAC2_Init();
 8000f0e:	f000 f94f 	bl	80011b0 <MX_DAC2_Init>
	MX_ADC1_Init();
 8000f12:	f000 f8d5 	bl	80010c0 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000f16:	f000 f985 	bl	8001224 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	StringToBits(msg, bitstream, &total_bits);
 8000f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001010 <main+0x118>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001014 <main+0x11c>)
 8000f20:	493d      	ldr	r1, [pc, #244]	@ (8001018 <main+0x120>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fe1e 	bl	8000b64 <StringToBits>

	// Fill DAC buffer
	FillDACBufferAFSK();
 8000f28:	f7ff fe56 	bl	8000bd8 <FillDACBufferAFSK>

	// Start DAC streaming via DMA
	HAL_TIM_Base_Start(&htim2);
 8000f2c:	483b      	ldr	r0, [pc, #236]	@ (800101c <main+0x124>)
 8000f2e:	f004 fa4b 	bl	80053c8 <HAL_TIM_Base_Start>
	HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, (uint32_t*) dac_buffer,
 8000f32:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <main+0x11c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2232      	movs	r2, #50	@ 0x32
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	9200      	str	r2, [sp, #0]
 8000f40:	4a37      	ldr	r2, [pc, #220]	@ (8001020 <main+0x128>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4837      	ldr	r0, [pc, #220]	@ (8001024 <main+0x12c>)
 8000f46:	f002 fab9 	bl	80034bc <HAL_DAC_Start_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	e015      	b.n	8000f7c <main+0x84>
			HAL_ADC_Start(&hadc1);
 8000f50:	4835      	ldr	r0, [pc, #212]	@ (8001028 <main+0x130>)
 8000f52:	f001 f835 	bl	8001fc0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 10);
 8000f56:	210a      	movs	r1, #10
 8000f58:	4833      	ldr	r0, [pc, #204]	@ (8001028 <main+0x130>)
 8000f5a:	f001 f949 	bl	80021f0 <HAL_ADC_PollForConversion>
			adc_samples[i] = HAL_ADC_GetValue(&hadc1);
 8000f5e:	4832      	ldr	r0, [pc, #200]	@ (8001028 <main+0x130>)
 8000f60:	f001 fa4c 	bl	80023fc <HAL_ADC_GetValue>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b299      	uxth	r1, r3
 8000f68:	4a30      	ldr	r2, [pc, #192]	@ (800102c <main+0x134>)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			HAL_ADC_Stop(&hadc1);
 8000f70:	482d      	ldr	r0, [pc, #180]	@ (8001028 <main+0x130>)
 8000f72:	f001 f909 	bl	8002188 <HAL_ADC_Stop>
		for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b31      	cmp	r3, #49	@ 0x31
 8000f80:	dde6      	ble.n	8000f50 <main+0x58>
		}

		// Detect bit
		received_bits[rx_idx++] = DetectBit(adc_samples);
 8000f82:	4b2b      	ldr	r3, [pc, #172]	@ (8001030 <main+0x138>)
 8000f84:	681c      	ldr	r4, [r3, #0]
 8000f86:	1c63      	adds	r3, r4, #1
 8000f88:	4a29      	ldr	r2, [pc, #164]	@ (8001030 <main+0x138>)
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4827      	ldr	r0, [pc, #156]	@ (800102c <main+0x134>)
 8000f8e:	f7ff feab 	bl	8000ce8 <DetectBit>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <main+0x13c>)
 8000f98:	551a      	strb	r2, [r3, r4]

		// Reconstruct character every 8 bits
		if (rx_idx % 8 == 0) {
 8000f9a:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <main+0x138>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d12a      	bne.n	8000ffc <main+0x104>
			uint8_t c = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	72fb      	strb	r3, [r7, #11]
			for (int b = 0; b < 8; b++) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	e011      	b.n	8000fd4 <main+0xdc>
				c = (c << 1) | received_bits[rx_idx - 8 + b];
 8000fb0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <main+0x138>)
 8000fba:	6819      	ldr	r1, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3b08      	subs	r3, #8
 8000fc2:	491c      	ldr	r1, [pc, #112]	@ (8001034 <main+0x13c>)
 8000fc4:	5ccb      	ldrb	r3, [r1, r3]
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	72fb      	strb	r3, [r7, #11]
			for (int b = 0; b < 8; b++) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b07      	cmp	r3, #7
 8000fd8:	ddea      	ble.n	8000fb0 <main+0xb8>
			}

			// Store in buffer for Live Expressions
			if (decoded_idx < MAX_DECODED) {
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <main+0x140>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b13      	cmp	r3, #19
 8000fe0:	d80c      	bhi.n	8000ffc <main+0x104>
				decoded_msg[decoded_idx++] = c;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <main+0x140>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	4913      	ldr	r1, [pc, #76]	@ (8001038 <main+0x140>)
 8000fea:	600a      	str	r2, [r1, #0]
 8000fec:	4913      	ldr	r1, [pc, #76]	@ (800103c <main+0x144>)
 8000fee:	7afa      	ldrb	r2, [r7, #11]
 8000ff0:	54ca      	strb	r2, [r1, r3]
				decoded_msg[decoded_idx] = '\0';  // null-terminate
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <main+0x140>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a11      	ldr	r2, [pc, #68]	@ (800103c <main+0x144>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	54d1      	strb	r1, [r2, r3]
			}
		}

		// Reset rx_idx if all bits processed
		if (rx_idx >= total_bits)
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <main+0x138>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <main+0x11c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d3a0      	bcc.n	8000f4a <main+0x52>
			rx_idx = 0;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <main+0x138>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 800100e:	e79c      	b.n	8000f4a <main+0x52>
 8001010:	20000000 	.word	0x20000000
 8001014:	20001fbc 	.word	0x20001fbc
 8001018:	20001f6c 	.word	0x20001f6c
 800101c:	20002174 	.word	0x20002174
 8001020:	2000002c 	.word	0x2000002c
 8001024:	20002100 	.word	0x20002100
 8001028:	20002094 	.word	0x20002094
 800102c:	20001fc0 	.word	0x20001fc0
 8001030:	20002074 	.word	0x20002074
 8001034:	20002024 	.word	0x20002024
 8001038:	20002090 	.word	0x20002090
 800103c:	20002078 	.word	0x20002078

08001040 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	@ 0x50
 8001044:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2238      	movs	r2, #56	@ 0x38
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fd26 	bl	8005aa0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001062:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001066:	f003 f953 	bl	8004310 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001074:	2340      	movs	r3, #64	@ 0x40
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	4618      	mov	r0, r3
 8001082:	f003 f9f9 	bl	8004478 <HAL_RCC_OscConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x50>
		Error_Handler();
 800108c:	f000 f972 	bl	8001374 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001090:	230f      	movs	r3, #15
 8001092:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001094:	2301      	movs	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 fcf7 	bl	8004a9c <HAL_RCC_ClockConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x78>
		Error_Handler();
 80010b4:	f000 f95e 	bl	8001374 <Error_Handler>
	}
}
 80010b8:	bf00      	nop
 80010ba:	3750      	adds	r7, #80	@ 0x50
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	@ 0x30
 80010c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80010c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2220      	movs	r2, #32
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 fce1 	bl	8005aa0 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80010de:	4b32      	ldr	r3, [pc, #200]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 80010e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010e4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010e6:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 80010e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010ec:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f4:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 80010fa:	4b2b      	ldr	r3, [pc, #172]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001100:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001106:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 8001108:	2204      	movs	r2, #4
 800110a:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 800110e:	2200      	movs	r2, #0
 8001110:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001112:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 8001114:	2201      	movs	r2, #1
 8001116:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8001118:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 800111a:	2201      	movs	r2, #1
 800111c:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111e:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001126:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112c:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001132:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 800113c:	2200      	movs	r2, #0
 800113e:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001140:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001148:	4817      	ldr	r0, [pc, #92]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 800114a:	f000 fd7d 	bl	8001c48 <HAL_ADC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0x98>
		Error_Handler();
 8001154:	f000 f90e 	bl	8001374 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800115c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 8001164:	f001 ff70 	bl	8003048 <HAL_ADCEx_MultiModeConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0xb2>
		Error_Handler();
 800116e:	f000 f901 	bl	8001374 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_ADC1_Init+0xec>)
 8001174:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001176:	2306      	movs	r3, #6
 8001178:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800117a:	2302      	movs	r3, #2
 800117c:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800117e:	237f      	movs	r3, #127	@ 0x7f
 8001180:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001182:	2304      	movs	r3, #4
 8001184:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <MX_ADC1_Init+0xe8>)
 8001190:	f001 f942 	bl	8002418 <HAL_ADC_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_ADC1_Init+0xde>
		Error_Handler();
 800119a:	f000 f8eb 	bl	8001374 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3730      	adds	r7, #48	@ 0x30
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20002094 	.word	0x20002094
 80011ac:	04300002 	.word	0x04300002

080011b0 <MX_DAC2_Init>:
/**
 * @brief DAC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC2_Init(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	@ 0x30
 80011b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC2_Init 0 */

	/* USER CODE END DAC2_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80011b6:	463b      	mov	r3, r7
 80011b8:	2230      	movs	r2, #48	@ 0x30
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f004 fc6f 	bl	8005aa0 <memset>

	/* USER CODE END DAC2_Init 1 */

	/** DAC Initialization
	 */
	hdac2.Instance = DAC2;
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_DAC2_Init+0x6c>)
 80011c4:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <MX_DAC2_Init+0x70>)
 80011c6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac2) != HAL_OK) {
 80011c8:	4814      	ldr	r0, [pc, #80]	@ (800121c <MX_DAC2_Init+0x6c>)
 80011ca:	f002 f954 	bl	8003476 <HAL_DAC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_DAC2_Init+0x28>
		Error_Handler();
 80011d4:	f000 f8ce 	bl	8001374 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80011d8:	2302      	movs	r3, #2
 80011da:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011e8:	2312      	movs	r3, #18
 80011ea:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80011f4:	2304      	movs	r3, #4
 80011f6:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <MX_DAC2_Init+0x6c>)
 8001204:	f002 fa4c 	bl	80036a0 <HAL_DAC_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_DAC2_Init+0x62>
		Error_Handler();
 800120e:	f000 f8b1 	bl	8001374 <Error_Handler>
	}
	/* USER CODE BEGIN DAC2_Init 2 */

	/* USER CODE END DAC2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3730      	adds	r7, #48	@ 0x30
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20002100 	.word	0x20002100
 8001220:	50000c00 	.word	0x50000c00

08001224 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001244:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001248:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <MX_TIM2_Init+0x98>)
 800124c:	220f      	movs	r2, #15
 800124e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 265;
 8001256:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001258:	f240 1209 	movw	r2, #265	@ 0x109
 800125c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800126a:	4814      	ldr	r0, [pc, #80]	@ (80012bc <MX_TIM2_Init+0x98>)
 800126c:	f004 f854 	bl	8005318 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x56>
		Error_Handler();
 8001276:	f000 f87d 	bl	8001374 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	@ (80012bc <MX_TIM2_Init+0x98>)
 8001288:	f004 f90e 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x72>
		Error_Handler();
 8001292:	f000 f86f 	bl	8001374 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001296:	2320      	movs	r3, #32
 8001298:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	@ (80012bc <MX_TIM2_Init+0x98>)
 80012a4:	f004 fb66 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80012ae:	f000 f861 	bl	8001374 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20002174 	.word	0x20002174

080012c0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_DMA_Init+0x50>)
 80012c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ca:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <MX_DMA_Init+0x50>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_DMA_Init+0x50>)
 80012d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_DMA_Init+0x50>)
 80012e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <MX_DMA_Init+0x50>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_DMA_Init+0x50>)
 80012ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	200b      	movs	r0, #11
 80012fc:	f002 f887 	bl	800340e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001300:	200b      	movs	r0, #11
 8001302:	f002 f89e 	bl	8003442 <HAL_NVIC_EnableIRQ>

}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <MX_GPIO_Init+0x5c>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <MX_GPIO_Init+0x5c>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_GPIO_Init+0x5c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_GPIO_Init+0x5c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <MX_GPIO_Init+0x5c>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_GPIO_Init+0x5c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_GPIO_Init+0x5c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <MX_GPIO_Init+0x5c>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_GPIO_Init+0x5c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <Error_Handler+0x8>

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <HAL_MspInit+0x44>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138a:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <HAL_MspInit+0x44>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6613      	str	r3, [r2, #96]	@ 0x60
 8001392:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <HAL_MspInit+0x44>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <HAL_MspInit+0x44>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	4a08      	ldr	r2, [pc, #32]	@ (80013c4 <HAL_MspInit+0x44>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_MspInit+0x44>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013b6:	f003 f84f 	bl	8004458 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09e      	sub	sp, #120	@ 0x78
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	2254      	movs	r2, #84	@ 0x54
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 fb59 	bl	8005aa0 <memset>
  if(hadc->Instance==ADC1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013f6:	d134      	bne.n	8001462 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013fe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001402:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fd37 	bl	8004e7c <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001414:	f7ff ffae 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <HAL_ADC_MspInit+0xa4>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141c:	4a13      	ldr	r2, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0xa4>)
 800141e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_ADC_MspInit+0xa4>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <HAL_ADC_MspInit+0xa4>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <HAL_ADC_MspInit+0xa4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_ADC_MspInit+0xa4>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001448:	2301      	movs	r3, #1
 800144a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144c:	2303      	movs	r3, #3
 800144e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145e:	f002 fdd5 	bl	800400c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001462:	bf00      	nop
 8001464:	3778      	adds	r7, #120	@ 0x78
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2b      	ldr	r2, [pc, #172]	@ (800153c <HAL_DAC_MspInit+0xcc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d150      	bne.n	8001534 <HAL_DAC_MspInit+0xc4>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <HAL_DAC_MspInit+0xd0>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	4a2a      	ldr	r2, [pc, #168]	@ (8001540 <HAL_DAC_MspInit+0xd0>)
 8001498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800149c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149e:	4b28      	ldr	r3, [pc, #160]	@ (8001540 <HAL_DAC_MspInit+0xd0>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <HAL_DAC_MspInit+0xd0>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	4a24      	ldr	r2, [pc, #144]	@ (8001540 <HAL_DAC_MspInit+0xd0>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b6:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <HAL_DAC_MspInit+0xd0>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c2:	2340      	movs	r3, #64	@ 0x40
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	2303      	movs	r3, #3
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d8:	f002 fd98 	bl	800400c <HAL_GPIO_Init>

    /* DAC2 DMA Init */
    /* DAC2_CH1 Init */
    hdma_dac2_ch1.Instance = DMA1_Channel1;
 80014dc:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 80014de:	4a1a      	ldr	r2, [pc, #104]	@ (8001548 <HAL_DAC_MspInit+0xd8>)
 80014e0:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 80014e4:	2229      	movs	r2, #41	@ 0x29
 80014e6:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 80014ea:	2210      	movs	r2, #16
 80014ec:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 80014f6:	2280      	movs	r2, #128	@ 0x80
 80014f8:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 80014fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001500:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 8001504:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001508:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 800150c:	2220      	movs	r2, #32
 800150e:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 8001512:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001516:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8001518:	480a      	ldr	r0, [pc, #40]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 800151a:	f002 fb05 	bl	8003b28 <HAL_DMA_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001524:	f7ff ff26 	bl	8001374 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <HAL_DAC_MspInit+0xd4>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	@ 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	50000c00 	.word	0x50000c00
 8001540:	40021000 	.word	0x40021000
 8001544:	20002114 	.word	0x20002114
 8001548:	40020008 	.word	0x40020008

0800154c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800155c:	d10b      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	4a08      	ldr	r2, [pc, #32]	@ (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6593      	str	r3, [r2, #88]	@ 0x58
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_TIM_Base_MspInit+0x38>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <NMI_Handler+0x4>

08001590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <MemManage_Handler+0x4>

080015a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <UsageFault_Handler+0x4>

080015b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015de:	f000 f89b 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <DMA1_Channel1_IRQHandler+0x10>)
 80015ee:	f002 fbbe 	bl	8003d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20002114 	.word	0x20002114

080015fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <SystemInit+0x20>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <SystemInit+0x20>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001620:	480d      	ldr	r0, [pc, #52]	@ (8001658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001622:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001624:	f7ff ffea 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <LoopForever+0x6>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	@ (8001660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <LoopForever+0xe>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <LoopForever+0x16>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f004 fa2f 	bl	8005ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001652:	f7ff fc51 	bl	8000ef8 <main>

08001656 <LoopForever>:

LoopForever:
    b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   r0, =_estack
 8001658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001664:	08006d58 	.word	0x08006d58
  ldr r2, =_sbss
 8001668:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800166c:	200021c4 	.word	0x200021c4

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>

08001672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f001 febb 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f80e 	bl	80016a4 <HAL_InitTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	e001      	b.n	8001698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001694:	f7ff fe74 	bl	8001380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001698:	79fb      	ldrb	r3, [r7, #7]

}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <HAL_InitTick+0x68>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d022      	beq.n	80016fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_InitTick+0x6c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <HAL_InitTick+0x68>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fec6 	bl	800345e <HAL_SYSTICK_Config>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10f      	bne.n	80016f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	d809      	bhi.n	80016f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016de:	2200      	movs	r2, #0
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295
 80016e6:	f001 fe92 	bl	800340e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <HAL_InitTick+0x70>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e007      	b.n	8001702 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e004      	b.n	8001702 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000000c 	.word	0x2000000c
 8001710:	20000004 	.word	0x20000004
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_IncTick+0x1c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_IncTick+0x20>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4413      	add	r3, r2
 8001726:	4a03      	ldr	r2, [pc, #12]	@ (8001734 <HAL_IncTick+0x1c>)
 8001728:	6013      	str	r3, [r2, #0]
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	200021c0 	.word	0x200021c0
 8001738:	2000000c 	.word	0x2000000c

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200021c0 	.word	0x200021c0

08001754 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	609a      	str	r2, [r3, #8]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	609a      	str	r2, [r3, #8]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3360      	adds	r3, #96	@ 0x60
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <LL_ADC_SetOffset+0x44>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	4313      	orrs	r3, r2
 80017ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017f4:	bf00      	nop
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	03fff000 	.word	0x03fff000

08001804 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3360      	adds	r3, #96	@ 0x60
 8001812:	461a      	mov	r2, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3360      	adds	r3, #96	@ 0x60
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001866:	b480      	push	{r7}
 8001868:	b087      	sub	sp, #28
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3360      	adds	r3, #96	@ 0x60
 8001876:	461a      	mov	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	431a      	orrs	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3360      	adds	r3, #96	@ 0x60
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	615a      	str	r2, [r3, #20]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800191e:	b480      	push	{r7}
 8001920:	b087      	sub	sp, #28
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3330      	adds	r3, #48	@ 0x30
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	4413      	add	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	211f      	movs	r1, #31
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	0e9b      	lsrs	r3, r3, #26
 8001956:	f003 011f 	and.w	r1, r3, #31
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001976:	b480      	push	{r7}
 8001978:	b087      	sub	sp, #28
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3314      	adds	r3, #20
 8001986:	461a      	mov	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	0e5b      	lsrs	r3, r3, #25
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	0d1b      	lsrs	r3, r3, #20
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2107      	movs	r1, #7
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0d1b      	lsrs	r3, r3, #20
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	431a      	orrs	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019c0:	bf00      	nop
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0318 	and.w	r3, r3, #24
 80019ee:	4908      	ldr	r1, [pc, #32]	@ (8001a10 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019f0:	40d9      	lsrs	r1, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	400b      	ands	r3, r1
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	431a      	orrs	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	0007ffff 	.word	0x0007ffff

08001a14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 031f 	and.w	r3, r3, #31
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6093      	str	r3, [r2, #8]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001aa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b24:	f043 0202 	orr.w	r2, r3, #2
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <LL_ADC_IsEnabled+0x18>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <LL_ADC_IsEnabled+0x1a>
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_IsDisableOngoing+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_IsDisableOngoing+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b98:	f043 0204 	orr.w	r2, r3, #4
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc0:	f043 0210 	orr.w	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d101      	bne.n	8001bec <LL_ADC_REG_IsConversionOngoing+0x18>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c0e:	f043 0220 	orr.w	r2, r3, #32
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d101      	bne.n	8001c3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b089      	sub	sp, #36	@ 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1a9      	b.n	8001fb6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fba9 	bl	80013c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fef1 	bl	8001a70 <LL_ADC_IsDeepPowerDownEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fed7 	bl	8001a4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff0c 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fef0 	bl	8001a98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cb8:	4b9c      	ldr	r3, [pc, #624]	@ (8001f2c <HAL_ADC_Init+0x2e4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	4a9c      	ldr	r2, [pc, #624]	@ (8001f30 <HAL_ADC_Init+0x2e8>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ccc:	e002      	b.n	8001cd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f9      	bne.n	8001cce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff feee 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10d      	bne.n	8001d06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	f043 0210 	orr.w	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff62 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8001d10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 8142 	bne.w	8001fa4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 813e 	bne.w	8001fa4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d30:	f043 0202 	orr.w	r2, r3, #2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fefb 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d141      	bne.n	8001dcc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d50:	d004      	beq.n	8001d5c <HAL_ADC_Init+0x114>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a77      	ldr	r2, [pc, #476]	@ (8001f34 <HAL_ADC_Init+0x2ec>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d10f      	bne.n	8001d7c <HAL_ADC_Init+0x134>
 8001d5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d60:	f7ff feea 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d64:	4604      	mov	r4, r0
 8001d66:	4873      	ldr	r0, [pc, #460]	@ (8001f34 <HAL_ADC_Init+0x2ec>)
 8001d68:	f7ff fee6 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4323      	orrs	r3, r4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e012      	b.n	8001da2 <HAL_ADC_Init+0x15a>
 8001d7c:	486e      	ldr	r0, [pc, #440]	@ (8001f38 <HAL_ADC_Init+0x2f0>)
 8001d7e:	f7ff fedb 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d82:	4604      	mov	r4, r0
 8001d84:	486d      	ldr	r0, [pc, #436]	@ (8001f3c <HAL_ADC_Init+0x2f4>)
 8001d86:	f7ff fed7 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	431c      	orrs	r4, r3
 8001d8e:	486c      	ldr	r0, [pc, #432]	@ (8001f40 <HAL_ADC_Init+0x2f8>)
 8001d90:	f7ff fed2 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4323      	orrs	r3, r4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d012      	beq.n	8001dcc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dae:	d004      	beq.n	8001dba <HAL_ADC_Init+0x172>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5f      	ldr	r2, [pc, #380]	@ (8001f34 <HAL_ADC_Init+0x2ec>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_Init+0x176>
 8001dba:	4a62      	ldr	r2, [pc, #392]	@ (8001f44 <HAL_ADC_Init+0x2fc>)
 8001dbc:	e000      	b.n	8001dc0 <HAL_ADC_Init+0x178>
 8001dbe:	4a62      	ldr	r2, [pc, #392]	@ (8001f48 <HAL_ADC_Init+0x300>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f7ff fcc4 	bl	8001754 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7f5b      	ldrb	r3, [r3, #29]
 8001dd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ddc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001de2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	045b      	lsls	r3, r3, #17
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e14:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	4b48      	ldr	r3, [pc, #288]	@ (8001f4c <HAL_ADC_Init+0x304>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fee5 	bl	8001c22 <LL_ADC_INJ_IsConversionOngoing>
 8001e58:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d17f      	bne.n	8001f60 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d17c      	bne.n	8001f60 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e6a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e82:	f023 0302 	bic.w	r3, r3, #2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d017      	beq.n	8001ec8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ea6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001eb0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6911      	ldr	r1, [r2, #16]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001ec6:	e013      	b.n	8001ef0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ed6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ee8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d12a      	bne.n	8001f50 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f10:	4311      	orrs	r1, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	e019      	b.n	8001f60 <HAL_ADC_Init+0x318>
 8001f2c:	20000004 	.word	0x20000004
 8001f30:	053e2d63 	.word	0x053e2d63
 8001f34:	50000100 	.word	0x50000100
 8001f38:	50000400 	.word	0x50000400
 8001f3c:	50000500 	.word	0x50000500
 8001f40:	50000600 	.word	0x50000600
 8001f44:	50000300 	.word	0x50000300
 8001f48:	50000700 	.word	0x50000700
 8001f4c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d10c      	bne.n	8001f82 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f023 010f 	bic.w	r1, r3, #15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	1e5a      	subs	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f80:	e007      	b.n	8001f92 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 020f 	bic.w	r2, r2, #15
 8001f90:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fa2:	e007      	b.n	8001fb4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	f043 0210 	orr.w	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	@ 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd90      	pop	{r4, r7, pc}
 8001fbe:	bf00      	nop

08001fc0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fd0:	d004      	beq.n	8001fdc <HAL_ADC_Start+0x1c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a67      	ldr	r2, [pc, #412]	@ (8002174 <HAL_ADC_Start+0x1b4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_Start+0x20>
 8001fdc:	4b66      	ldr	r3, [pc, #408]	@ (8002178 <HAL_ADC_Start+0x1b8>)
 8001fde:	e000      	b.n	8001fe2 <HAL_ADC_Start+0x22>
 8001fe0:	4b66      	ldr	r3, [pc, #408]	@ (800217c <HAL_ADC_Start+0x1bc>)
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fd16 	bl	8001a14 <LL_ADC_GetMultimode>
 8001fe8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fdf0 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80b4 	bne.w	8002164 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADC_Start+0x4a>
 8002006:	2302      	movs	r3, #2
 8002008:	e0af      	b.n	800216a <HAL_ADC_Start+0x1aa>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fefc 	bl	8002e10 <ADC_Enable>
 8002018:	4603      	mov	r3, r0
 800201a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 809b 	bne.w	800215a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a4d      	ldr	r2, [pc, #308]	@ (8002174 <HAL_ADC_Start+0x1b4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d009      	beq.n	8002056 <HAL_ADC_Start+0x96>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a4e      	ldr	r2, [pc, #312]	@ (8002180 <HAL_ADC_Start+0x1c0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d002      	beq.n	8002052 <HAL_ADC_Start+0x92>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	e003      	b.n	800205a <HAL_ADC_Start+0x9a>
 8002052:	4b4c      	ldr	r3, [pc, #304]	@ (8002184 <HAL_ADC_Start+0x1c4>)
 8002054:	e001      	b.n	800205a <HAL_ADC_Start+0x9a>
 8002056:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	4293      	cmp	r3, r2
 8002060:	d002      	beq.n	8002068 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002080:	d106      	bne.n	8002090 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002086:	f023 0206 	bic.w	r2, r3, #6
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	661a      	str	r2, [r3, #96]	@ 0x60
 800208e:	e002      	b.n	8002096 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	221c      	movs	r2, #28
 800209c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a32      	ldr	r2, [pc, #200]	@ (8002174 <HAL_ADC_Start+0x1b4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_ADC_Start+0x104>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a32      	ldr	r2, [pc, #200]	@ (8002180 <HAL_ADC_Start+0x1c0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d002      	beq.n	80020c0 <HAL_ADC_Start+0x100>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	e003      	b.n	80020c8 <HAL_ADC_Start+0x108>
 80020c0:	4b30      	ldr	r3, [pc, #192]	@ (8002184 <HAL_ADC_Start+0x1c4>)
 80020c2:	e001      	b.n	80020c8 <HAL_ADC_Start+0x108>
 80020c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d008      	beq.n	80020e2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d002      	beq.n	80020e2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b09      	cmp	r3, #9
 80020e0:	d114      	bne.n	800210c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fd3d 	bl	8001b84 <LL_ADC_REG_StartConversion>
 800210a:	e02d      	b.n	8002168 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a15      	ldr	r2, [pc, #84]	@ (8002174 <HAL_ADC_Start+0x1b4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d009      	beq.n	8002136 <HAL_ADC_Start+0x176>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a16      	ldr	r2, [pc, #88]	@ (8002180 <HAL_ADC_Start+0x1c0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d002      	beq.n	8002132 <HAL_ADC_Start+0x172>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	e003      	b.n	800213a <HAL_ADC_Start+0x17a>
 8002132:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <HAL_ADC_Start+0x1c4>)
 8002134:	e001      	b.n	800213a <HAL_ADC_Start+0x17a>
 8002136:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800213a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00f      	beq.n	8002168 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002150:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002158:	e006      	b.n	8002168 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002162:	e001      	b.n	8002168 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002164:	2302      	movs	r3, #2
 8002166:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002168:	7dfb      	ldrb	r3, [r7, #23]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	50000100 	.word	0x50000100
 8002178:	50000300 	.word	0x50000300
 800217c:	50000700 	.word	0x50000700
 8002180:	50000500 	.word	0x50000500
 8002184:	50000400 	.word	0x50000400

08002188 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_ADC_Stop+0x16>
 800219a:	2302      	movs	r3, #2
 800219c:	e023      	b.n	80021e6 <HAL_ADC_Stop+0x5e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80021a6:	2103      	movs	r1, #3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fd75 	bl	8002c98 <ADC_ConversionStop>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d111      	bne.n	80021dc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 febf 	bl	8002f3c <ADC_Disable>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002202:	d004      	beq.n	800220e <HAL_ADC_PollForConversion+0x1e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a77      	ldr	r2, [pc, #476]	@ (80023e8 <HAL_ADC_PollForConversion+0x1f8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_ADC_PollForConversion+0x22>
 800220e:	4b77      	ldr	r3, [pc, #476]	@ (80023ec <HAL_ADC_PollForConversion+0x1fc>)
 8002210:	e000      	b.n	8002214 <HAL_ADC_PollForConversion+0x24>
 8002212:	4b77      	ldr	r3, [pc, #476]	@ (80023f0 <HAL_ADC_PollForConversion+0x200>)
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fbfd 	bl	8001a14 <LL_ADC_GetMultimode>
 800221a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d102      	bne.n	800222a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002224:	2308      	movs	r3, #8
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	e037      	b.n	800229a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b05      	cmp	r3, #5
 8002234:	d002      	beq.n	800223c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b09      	cmp	r3, #9
 800223a:	d111      	bne.n	8002260 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	f043 0220 	orr.w	r2, r3, #32
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0c1      	b.n	80023de <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800225a:	2304      	movs	r3, #4
 800225c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800225e:	e01c      	b.n	800229a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002268:	d004      	beq.n	8002274 <HAL_ADC_PollForConversion+0x84>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5e      	ldr	r2, [pc, #376]	@ (80023e8 <HAL_ADC_PollForConversion+0x1f8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_ADC_PollForConversion+0x88>
 8002274:	4b5d      	ldr	r3, [pc, #372]	@ (80023ec <HAL_ADC_PollForConversion+0x1fc>)
 8002276:	e000      	b.n	800227a <HAL_ADC_PollForConversion+0x8a>
 8002278:	4b5d      	ldr	r3, [pc, #372]	@ (80023f0 <HAL_ADC_PollForConversion+0x200>)
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fbd8 	bl	8001a30 <LL_ADC_GetMultiDMATransfer>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228a:	f043 0220 	orr.w	r2, r3, #32
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0a3      	b.n	80023de <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002296:	2304      	movs	r3, #4
 8002298:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800229a:	f7ff fa4f 	bl	800173c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022a0:	e021      	b.n	80022e6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d01d      	beq.n	80022e6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022aa:	f7ff fa47 	bl	800173c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <HAL_ADC_PollForConversion+0xd0>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d112      	bne.n	80022e6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d2:	f043 0204 	orr.w	r2, r3, #4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e07b      	b.n	80023de <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0d6      	beq.n	80022a2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff faf7 	bl	80018f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01c      	beq.n	800234a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7f5b      	ldrb	r3, [r3, #29]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d118      	bne.n	800234a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b08      	cmp	r3, #8
 8002324:	d111      	bne.n	800234a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a26      	ldr	r2, [pc, #152]	@ (80023e8 <HAL_ADC_PollForConversion+0x1f8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d009      	beq.n	8002368 <HAL_ADC_PollForConversion+0x178>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a26      	ldr	r2, [pc, #152]	@ (80023f4 <HAL_ADC_PollForConversion+0x204>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d002      	beq.n	8002364 <HAL_ADC_PollForConversion+0x174>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	e003      	b.n	800236c <HAL_ADC_PollForConversion+0x17c>
 8002364:	4b24      	ldr	r3, [pc, #144]	@ (80023f8 <HAL_ADC_PollForConversion+0x208>)
 8002366:	e001      	b.n	800236c <HAL_ADC_PollForConversion+0x17c>
 8002368:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4293      	cmp	r3, r2
 8002372:	d008      	beq.n	8002386 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b05      	cmp	r3, #5
 800237e:	d002      	beq.n	8002386 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b09      	cmp	r3, #9
 8002384:	d104      	bne.n	8002390 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	e014      	b.n	80023ba <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a14      	ldr	r2, [pc, #80]	@ (80023e8 <HAL_ADC_PollForConversion+0x1f8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_ADC_PollForConversion+0x1be>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a15      	ldr	r2, [pc, #84]	@ (80023f4 <HAL_ADC_PollForConversion+0x204>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d002      	beq.n	80023aa <HAL_ADC_PollForConversion+0x1ba>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	e003      	b.n	80023b2 <HAL_ADC_PollForConversion+0x1c2>
 80023aa:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <HAL_ADC_PollForConversion+0x208>)
 80023ac:	e001      	b.n	80023b2 <HAL_ADC_PollForConversion+0x1c2>
 80023ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d104      	bne.n	80023ca <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2208      	movs	r2, #8
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e008      	b.n	80023dc <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	220c      	movs	r2, #12
 80023da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	50000100 	.word	0x50000100
 80023ec:	50000300 	.word	0x50000300
 80023f0:	50000700 	.word	0x50000700
 80023f4:	50000500 	.word	0x50000500
 80023f8:	50000400 	.word	0x50000400

080023fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0b6      	sub	sp, #216	@ 0xd8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <HAL_ADC_ConfigChannel+0x24>
 8002436:	2302      	movs	r3, #2
 8002438:	f000 bc13 	b.w	8002c62 <HAL_ADC_ConfigChannel+0x84a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fbc3 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 83f3 	bne.w	8002c3c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	f7ff fa5b 	bl	800191e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fbb1 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8002472:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fbd1 	bl	8001c22 <LL_ADC_INJ_IsConversionOngoing>
 8002480:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002484:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 81d9 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800248e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 81d4 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024a0:	d10f      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7ff fa62 	bl	8001976 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fa09 	bl	80018d2 <LL_ADC_SetSamplingTimeCommonConfig>
 80024c0:	e00e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7ff fa51 	bl	8001976 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f9f9 	bl	80018d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d022      	beq.n	8002548 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6919      	ldr	r1, [r3, #16]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002512:	f7ff f953 	bl	80017bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6919      	ldr	r1, [r3, #16]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	461a      	mov	r2, r3
 8002524:	f7ff f99f 	bl	8001866 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <HAL_ADC_ConfigChannel+0x126>
 8002538:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800253c:	e000      	b.n	8002540 <HAL_ADC_ConfigChannel+0x128>
 800253e:	2300      	movs	r3, #0
 8002540:	461a      	mov	r2, r3
 8002542:	f7ff f9ab 	bl	800189c <LL_ADC_SetOffsetSaturation>
 8002546:	e17b      	b.n	8002840 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f958 	bl	8001804 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x15c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff f94d 	bl	8001804 <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 021f 	and.w	r2, r3, #31
 8002572:	e01e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x19a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f942 	bl	8001804 <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002596:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800259a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e004      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80025a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x1b2>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	e018      	b.n	80025fc <HAL_ADC_ConfigChannel+0x1e4>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80025de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80025e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80025ee:	2320      	movs	r3, #32
 80025f0:	e004      	b.n	80025fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80025f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d106      	bne.n	800260e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f911 	bl	8001830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f8f5 	bl	8001804 <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <HAL_ADC_ConfigChannel+0x222>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2101      	movs	r1, #1
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f8ea 	bl	8001804 <LL_ADC_GetOffsetChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	e01e      	b.n	8002678 <HAL_ADC_ConfigChannel+0x260>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2101      	movs	r1, #1
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff f8df 	bl	8001804 <LL_ADC_GetOffsetChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002658:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800265c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e004      	b.n	8002676 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800266c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x278>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	e018      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x2aa>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80026a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80026ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e004      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80026b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d106      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2200      	movs	r2, #0
 80026cc:	2101      	movs	r1, #1
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f8ae 	bl	8001830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2102      	movs	r1, #2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff f892 	bl	8001804 <LL_ADC_GetOffsetChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x2e8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2102      	movs	r1, #2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff f887 	bl	8001804 <LL_ADC_GetOffsetChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	0e9b      	lsrs	r3, r3, #26
 80026fa:	f003 021f 	and.w	r2, r3, #31
 80026fe:	e01e      	b.n	800273e <HAL_ADC_ConfigChannel+0x326>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2102      	movs	r1, #2
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f87c 	bl	8001804 <LL_ADC_GetOffsetChannel>
 800270c:	4603      	mov	r3, r0
 800270e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800271e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002726:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800272e:	2320      	movs	r3, #32
 8002730:	e004      	b.n	800273c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002732:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x33e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	e016      	b.n	8002784 <HAL_ADC_ConfigChannel+0x36c>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002768:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800276a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800276e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002776:	2320      	movs	r3, #32
 8002778:	e004      	b.n	8002784 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800277a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002784:	429a      	cmp	r2, r3
 8002786:	d106      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	2102      	movs	r1, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff f84d 	bl	8001830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2103      	movs	r1, #3
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f831 	bl	8001804 <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x3aa>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2103      	movs	r1, #3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f826 	bl	8001804 <LL_ADC_GetOffsetChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	0e9b      	lsrs	r3, r3, #26
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	e017      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x3da>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2103      	movs	r1, #3
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff f81b 	bl	8001804 <LL_ADC_GetOffsetChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80027da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80027de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e003      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80027e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <HAL_ADC_ConfigChannel+0x3f2>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0e9b      	lsrs	r3, r3, #26
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	e011      	b.n	800282e <HAL_ADC_ConfigChannel+0x416>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800281a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800281c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002822:	2320      	movs	r3, #32
 8002824:	e003      	b.n	800282e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800282e:	429a      	cmp	r2, r3
 8002830:	d106      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2200      	movs	r2, #0
 8002838:	2103      	movs	r1, #3
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fff8 	bl	8001830 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f977 	bl	8001b38 <LL_ADC_IsEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 813d 	bne.w	8002acc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f7ff f8b4 	bl	80019cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4aa2      	ldr	r2, [pc, #648]	@ (8002af4 <HAL_ADC_ConfigChannel+0x6dc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	f040 812e 	bne.w	8002acc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x480>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	3301      	adds	r3, #1
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2b09      	cmp	r3, #9
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e019      	b.n	80028cc <HAL_ADC_ConfigChannel+0x4b4>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80028a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80028aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e003      	b.n	80028bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80028b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2b09      	cmp	r3, #9
 80028c4:	bf94      	ite	ls
 80028c6:	2301      	movls	r3, #1
 80028c8:	2300      	movhi	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d079      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x4d4>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	3301      	adds	r3, #1
 80028e4:	069b      	lsls	r3, r3, #26
 80028e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ea:	e015      	b.n	8002918 <HAL_ADC_ConfigChannel+0x500>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80028fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e003      	b.n	8002910 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	069b      	lsls	r3, r3, #26
 8002914:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x520>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	3301      	adds	r3, #1
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	e017      	b.n	8002968 <HAL_ADC_ConfigChannel+0x550>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002948:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800294a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	ea42 0103 	orr.w	r1, r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <HAL_ADC_ConfigChannel+0x576>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	3301      	adds	r3, #1
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	051b      	lsls	r3, r3, #20
 800298c:	e018      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x5a8>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800299c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80029a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80029aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c0:	430b      	orrs	r3, r1
 80029c2:	e07e      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x5c8>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	3301      	adds	r3, #1
 80029d8:	069b      	lsls	r3, r3, #26
 80029da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029de:	e015      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x5f4>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80029f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e003      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80029fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	069b      	lsls	r3, r3, #26
 8002a08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x614>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	2101      	movs	r1, #1
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	e017      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x644>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	61fb      	str	r3, [r7, #28]
  return result;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a44:	2320      	movs	r3, #32
 8002a46:	e003      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	ea42 0103 	orr.w	r1, r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10d      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x670>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3b1e      	subs	r3, #30
 8002a80:	051b      	lsls	r3, r3, #20
 8002a82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	e01b      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x6a8>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	613b      	str	r3, [r7, #16]
  return result;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b1e      	subs	r3, #30
 8002aba:	051b      	lsls	r3, r3, #20
 8002abc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe ff55 	bl	8001976 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80be 	beq.w	8002c56 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ae2:	d004      	beq.n	8002aee <HAL_ADC_ConfigChannel+0x6d6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <HAL_ADC_ConfigChannel+0x6e4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10a      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x6ec>
 8002aee:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <HAL_ADC_ConfigChannel+0x6e8>)
 8002af0:	e009      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x6ee>
 8002af2:	bf00      	nop
 8002af4:	407f0000 	.word	0x407f0000
 8002af8:	80080000 	.word	0x80080000
 8002afc:	50000100 	.word	0x50000100
 8002b00:	50000300 	.word	0x50000300
 8002b04:	4b59      	ldr	r3, [pc, #356]	@ (8002c6c <HAL_ADC_ConfigChannel+0x854>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fe4a 	bl	80017a0 <LL_ADC_GetCommonPathInternalCh>
 8002b0c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a56      	ldr	r2, [pc, #344]	@ (8002c70 <HAL_ADC_ConfigChannel+0x858>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0x70c>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a55      	ldr	r2, [pc, #340]	@ (8002c74 <HAL_ADC_ConfigChannel+0x85c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d13a      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d134      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b38:	d005      	beq.n	8002b46 <HAL_ADC_ConfigChannel+0x72e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a4e      	ldr	r2, [pc, #312]	@ (8002c78 <HAL_ADC_ConfigChannel+0x860>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	f040 8085 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b4e:	d004      	beq.n	8002b5a <HAL_ADC_ConfigChannel+0x742>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a49      	ldr	r2, [pc, #292]	@ (8002c7c <HAL_ADC_ConfigChannel+0x864>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x746>
 8002b5a:	4a49      	ldr	r2, [pc, #292]	@ (8002c80 <HAL_ADC_ConfigChannel+0x868>)
 8002b5c:	e000      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x748>
 8002b5e:	4a43      	ldr	r2, [pc, #268]	@ (8002c6c <HAL_ADC_ConfigChannel+0x854>)
 8002b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f7fe fe05 	bl	800177a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b70:	4b44      	ldr	r3, [pc, #272]	@ (8002c84 <HAL_ADC_ConfigChannel+0x86c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	4a44      	ldr	r2, [pc, #272]	@ (8002c88 <HAL_ADC_ConfigChannel+0x870>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b8a:	e002      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f9      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b98:	e05a      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c8c <HAL_ADC_ConfigChannel+0x874>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d125      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d11f      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a31      	ldr	r2, [pc, #196]	@ (8002c7c <HAL_ADC_ConfigChannel+0x864>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d104      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x7ac>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a34      	ldr	r2, [pc, #208]	@ (8002c90 <HAL_ADC_ConfigChannel+0x878>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d047      	beq.n	8002c54 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bcc:	d004      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x7c0>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c7c <HAL_ADC_ConfigChannel+0x864>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x7c4>
 8002bd8:	4a29      	ldr	r2, [pc, #164]	@ (8002c80 <HAL_ADC_ConfigChannel+0x868>)
 8002bda:	e000      	b.n	8002bde <HAL_ADC_ConfigChannel+0x7c6>
 8002bdc:	4a23      	ldr	r2, [pc, #140]	@ (8002c6c <HAL_ADC_ConfigChannel+0x854>)
 8002bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be6:	4619      	mov	r1, r3
 8002be8:	4610      	mov	r0, r2
 8002bea:	f7fe fdc6 	bl	800177a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bee:	e031      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a27      	ldr	r2, [pc, #156]	@ (8002c94 <HAL_ADC_ConfigChannel+0x87c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d12d      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d127      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <HAL_ADC_ConfigChannel+0x864>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d022      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c18:	d004      	beq.n	8002c24 <HAL_ADC_ConfigChannel+0x80c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <HAL_ADC_ConfigChannel+0x864>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x810>
 8002c24:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <HAL_ADC_ConfigChannel+0x868>)
 8002c26:	e000      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x812>
 8002c28:	4a10      	ldr	r2, [pc, #64]	@ (8002c6c <HAL_ADC_ConfigChannel+0x854>)
 8002c2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f7fe fda0 	bl	800177a <LL_ADC_SetCommonPathInternalCh>
 8002c3a:	e00c      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c4e:	e002      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	37d8      	adds	r7, #216	@ 0xd8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	50000700 	.word	0x50000700
 8002c70:	c3210000 	.word	0xc3210000
 8002c74:	90c00010 	.word	0x90c00010
 8002c78:	50000600 	.word	0x50000600
 8002c7c:	50000100 	.word	0x50000100
 8002c80:	50000300 	.word	0x50000300
 8002c84:	20000004 	.word	0x20000004
 8002c88:	053e2d63 	.word	0x053e2d63
 8002c8c:	c7520000 	.word	0xc7520000
 8002c90:	50000500 	.word	0x50000500
 8002c94:	cb840000 	.word	0xcb840000

08002c98 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe ff90 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8002cb4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe ffb1 	bl	8001c22 <LL_ADC_INJ_IsConversionOngoing>
 8002cc0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8098 	beq.w	8002e00 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d02a      	beq.n	8002d34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7f5b      	ldrb	r3, [r3, #29]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d126      	bne.n	8002d34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7f1b      	ldrb	r3, [r3, #28]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d122      	bne.n	8002d34 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002cf2:	e014      	b.n	8002d1e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4a45      	ldr	r2, [pc, #276]	@ (8002e0c <ADC_ConversionStop+0x174>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d90d      	bls.n	8002d18 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d00:	f043 0210 	orr.w	r2, r3, #16
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e074      	b.n	8002e02 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	d1e3      	bne.n	8002cf4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2240      	movs	r2, #64	@ 0x40
 8002d32:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d014      	beq.n	8002d64 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe ff48 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff05 	bl	8001b5e <LL_ADC_IsDisableOngoing>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe ff24 	bl	8001bac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d014      	beq.n	8002d94 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe ff57 	bl	8001c22 <LL_ADC_INJ_IsConversionOngoing>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe feed 	bl	8001b5e <LL_ADC_IsDisableOngoing>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe ff33 	bl	8001bfa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d005      	beq.n	8002da6 <ADC_ConversionStop+0x10e>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d105      	bne.n	8002dac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002da0:	230c      	movs	r3, #12
 8002da2:	617b      	str	r3, [r7, #20]
        break;
 8002da4:	e005      	b.n	8002db2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002da6:	2308      	movs	r3, #8
 8002da8:	617b      	str	r3, [r7, #20]
        break;
 8002daa:	e002      	b.n	8002db2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002dac:	2304      	movs	r3, #4
 8002dae:	617b      	str	r3, [r7, #20]
        break;
 8002db0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002db2:	f7fe fcc3 	bl	800173c <HAL_GetTick>
 8002db6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002db8:	e01b      	b.n	8002df2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002dba:	f7fe fcbf 	bl	800173c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d914      	bls.n	8002df2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dda:	f043 0210 	orr.w	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de6:	f043 0201 	orr.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e007      	b.n	8002e02 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1dc      	bne.n	8002dba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	a33fffff 	.word	0xa33fffff

08002e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fe89 	bl	8001b38 <LL_ADC_IsEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d176      	bne.n	8002f1a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	4b3c      	ldr	r3, [pc, #240]	@ (8002f24 <ADC_Enable+0x114>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3e:	f043 0210 	orr.w	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e062      	b.n	8002f1c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fe44 	bl	8001ae8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e68:	d004      	beq.n	8002e74 <ADC_Enable+0x64>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f28 <ADC_Enable+0x118>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <ADC_Enable+0x68>
 8002e74:	4b2d      	ldr	r3, [pc, #180]	@ (8002f2c <ADC_Enable+0x11c>)
 8002e76:	e000      	b.n	8002e7a <ADC_Enable+0x6a>
 8002e78:	4b2d      	ldr	r3, [pc, #180]	@ (8002f30 <ADC_Enable+0x120>)
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fc90 	bl	80017a0 <LL_ADC_GetCommonPathInternalCh>
 8002e80:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d013      	beq.n	8002eb2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f34 <ADC_Enable+0x124>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	4a29      	ldr	r2, [pc, #164]	@ (8002f38 <ADC_Enable+0x128>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ea4:	e002      	b.n	8002eac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f9      	bne.n	8002ea6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002eb2:	f7fe fc43 	bl	800173c <HAL_GetTick>
 8002eb6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eb8:	e028      	b.n	8002f0c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fe3a 	bl	8001b38 <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fe0a 	bl	8001ae8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ed4:	f7fe fc32 	bl	800173c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d914      	bls.n	8002f0c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d00d      	beq.n	8002f0c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	f043 0210 	orr.w	r2, r3, #16
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f00:	f043 0201 	orr.w	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e007      	b.n	8002f1c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d1cf      	bne.n	8002eba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	8000003f 	.word	0x8000003f
 8002f28:	50000100 	.word	0x50000100
 8002f2c:	50000300 	.word	0x50000300
 8002f30:	50000700 	.word	0x50000700
 8002f34:	20000004 	.word	0x20000004
 8002f38:	053e2d63 	.word	0x053e2d63

08002f3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fe08 	bl	8001b5e <LL_ADC_IsDisableOngoing>
 8002f4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fdef 	bl	8001b38 <LL_ADC_IsEnabled>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d047      	beq.n	8002ff0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d144      	bne.n	8002ff0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030d 	and.w	r3, r3, #13
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10c      	bne.n	8002f8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fdc9 	bl	8001b10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2203      	movs	r2, #3
 8002f84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f86:	f7fe fbd9 	bl	800173c <HAL_GetTick>
 8002f8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f8c:	e029      	b.n	8002fe2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e023      	b.n	8002ff2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002faa:	f7fe fbc7 	bl	800173c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d914      	bls.n	8002fe2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00d      	beq.n	8002fe2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	f043 0210 	orr.w	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1dc      	bne.n	8002faa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <LL_ADC_IsEnabled>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <LL_ADC_IsEnabled+0x18>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <LL_ADC_IsEnabled+0x1a>
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_ADC_REG_IsConversionOngoing>:
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d101      	bne.n	8003038 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b0a1      	sub	sp, #132	@ 0x84
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003062:	2302      	movs	r3, #2
 8003064:	e0e7      	b.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800306e:	2300      	movs	r3, #0
 8003070:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003072:	2300      	movs	r3, #0
 8003074:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800307e:	d102      	bne.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003080:	4b6f      	ldr	r3, [pc, #444]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	e009      	b.n	800309a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6e      	ldr	r2, [pc, #440]	@ (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d102      	bne.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003090:	4b6d      	ldr	r3, [pc, #436]	@ (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	e001      	b.n	800309a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10b      	bne.n	80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0be      	b.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ffb0 	bl	8003020 <LL_ADC_REG_IsConversionOngoing>
 80030c0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ffaa 	bl	8003020 <LL_ADC_REG_IsConversionOngoing>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 80a0 	bne.w	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 809c 	bne.w	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e4:	d004      	beq.n	80030f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a55      	ldr	r2, [pc, #340]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80030f0:	4b56      	ldr	r3, [pc, #344]	@ (800324c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80030f2:	e000      	b.n	80030f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80030f4:	4b56      	ldr	r3, [pc, #344]	@ (8003250 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80030f6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d04b      	beq.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003100:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003112:	035b      	lsls	r3, r3, #13
 8003114:	430b      	orrs	r3, r1
 8003116:	431a      	orrs	r2, r3
 8003118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800311a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003124:	d004      	beq.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a45      	ldr	r2, [pc, #276]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d10f      	bne.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003130:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003134:	f7ff ff61 	bl	8002ffa <LL_ADC_IsEnabled>
 8003138:	4604      	mov	r4, r0
 800313a:	4841      	ldr	r0, [pc, #260]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800313c:	f7ff ff5d 	bl	8002ffa <LL_ADC_IsEnabled>
 8003140:	4603      	mov	r3, r0
 8003142:	4323      	orrs	r3, r4
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e012      	b.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003150:	483c      	ldr	r0, [pc, #240]	@ (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003152:	f7ff ff52 	bl	8002ffa <LL_ADC_IsEnabled>
 8003156:	4604      	mov	r4, r0
 8003158:	483b      	ldr	r0, [pc, #236]	@ (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800315a:	f7ff ff4e 	bl	8002ffa <LL_ADC_IsEnabled>
 800315e:	4603      	mov	r3, r0
 8003160:	431c      	orrs	r4, r3
 8003162:	483c      	ldr	r0, [pc, #240]	@ (8003254 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003164:	f7ff ff49 	bl	8002ffa <LL_ADC_IsEnabled>
 8003168:	4603      	mov	r3, r0
 800316a:	4323      	orrs	r3, r4
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d056      	beq.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800317a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003182:	f023 030f 	bic.w	r3, r3, #15
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	6811      	ldr	r1, [r2, #0]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	430a      	orrs	r2, r1
 8003190:	431a      	orrs	r2, r3
 8003192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003194:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003196:	e047      	b.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003198:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031a2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031ac:	d004      	beq.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a23      	ldr	r2, [pc, #140]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d10f      	bne.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80031b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80031bc:	f7ff ff1d 	bl	8002ffa <LL_ADC_IsEnabled>
 80031c0:	4604      	mov	r4, r0
 80031c2:	481f      	ldr	r0, [pc, #124]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031c4:	f7ff ff19 	bl	8002ffa <LL_ADC_IsEnabled>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4323      	orrs	r3, r4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e012      	b.n	80031fe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80031d8:	481a      	ldr	r0, [pc, #104]	@ (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031da:	f7ff ff0e 	bl	8002ffa <LL_ADC_IsEnabled>
 80031de:	4604      	mov	r4, r0
 80031e0:	4819      	ldr	r0, [pc, #100]	@ (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031e2:	f7ff ff0a 	bl	8002ffa <LL_ADC_IsEnabled>
 80031e6:	4603      	mov	r3, r0
 80031e8:	431c      	orrs	r4, r3
 80031ea:	481a      	ldr	r0, [pc, #104]	@ (8003254 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80031ec:	f7ff ff05 	bl	8002ffa <LL_ADC_IsEnabled>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4323      	orrs	r3, r4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d012      	beq.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800320a:	f023 030f 	bic.w	r3, r3, #15
 800320e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003210:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003212:	e009      	b.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003226:	e000      	b.n	800322a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003228:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003232:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003236:	4618      	mov	r0, r3
 8003238:	3784      	adds	r7, #132	@ 0x84
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	50000100 	.word	0x50000100
 8003244:	50000400 	.word	0x50000400
 8003248:	50000500 	.word	0x50000500
 800324c:	50000300 	.word	0x50000300
 8003250:	50000700 	.word	0x50000700
 8003254:	50000600 	.word	0x50000600

08003258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003274:	4013      	ands	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328a:	4a04      	ldr	r2, [pc, #16]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	60d3      	str	r3, [r2, #12]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <__NVIC_GetPriorityGrouping+0x18>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	f003 0307 	and.w	r3, r3, #7
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	db0b      	blt.n	80032e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	4907      	ldr	r1, [pc, #28]	@ (80032f4 <__NVIC_EnableIRQ+0x38>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2001      	movs	r0, #1
 80032de:	fa00 f202 	lsl.w	r2, r0, r2
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db0a      	blt.n	8003322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	@ (8003344 <__NVIC_SetPriority+0x4c>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	440b      	add	r3, r1
 800331c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003320:	e00a      	b.n	8003338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4908      	ldr	r1, [pc, #32]	@ (8003348 <__NVIC_SetPriority+0x50>)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3b04      	subs	r3, #4
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	440b      	add	r3, r1
 8003336:	761a      	strb	r2, [r3, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
         );
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f7ff ff8e 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff29 	bl	8003258 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800341c:	f7ff ff40 	bl	80032a0 <__NVIC_GetPriorityGrouping>
 8003420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	6978      	ldr	r0, [r7, #20]
 8003428:	f7ff ff90 	bl	800334c <NVIC_EncodePriority>
 800342c:	4602      	mov	r2, r0
 800342e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff5f 	bl	80032f8 <__NVIC_SetPriority>
}
 800343a:	bf00      	nop
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	4603      	mov	r3, r0
 800344a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff33 	bl	80032bc <__NVIC_EnableIRQ>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ffa4 	bl	80033b4 <SysTick_Config>
 800346c:	4603      	mov	r3, r0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e014      	b.n	80034b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	791b      	ldrb	r3, [r3, #4]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7fd ffe9 	bl	8001470 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0b2      	b.n	800363a <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	795b      	ldrb	r3, [r3, #5]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_DAC_Start_DMA+0x24>
 80034dc:	2302      	movs	r3, #2
 80034de:	e0ac      	b.n	800363a <HAL_DAC_Start_DMA+0x17e>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2202      	movs	r2, #2
 80034ea:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d129      	bne.n	8003546 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	4a53      	ldr	r2, [pc, #332]	@ (8003644 <HAL_DAC_Start_DMA+0x188>)
 80034f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4a52      	ldr	r2, [pc, #328]	@ (8003648 <HAL_DAC_Start_DMA+0x18c>)
 8003500:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4a51      	ldr	r2, [pc, #324]	@ (800364c <HAL_DAC_Start_DMA+0x190>)
 8003508:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003518:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DAC_Start_DMA+0x6c>
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	2b04      	cmp	r3, #4
 8003524:	d005      	beq.n	8003532 <HAL_DAC_Start_DMA+0x76>
 8003526:	e009      	b.n	800353c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3308      	adds	r3, #8
 800352e:	61bb      	str	r3, [r7, #24]
        break;
 8003530:	e033      	b.n	800359a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	61bb      	str	r3, [r7, #24]
        break;
 800353a:	e02e      	b.n	800359a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3310      	adds	r3, #16
 8003542:	61bb      	str	r3, [r7, #24]
        break;
 8003544:	e029      	b.n	800359a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a41      	ldr	r2, [pc, #260]	@ (8003650 <HAL_DAC_Start_DMA+0x194>)
 800354c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	4a40      	ldr	r2, [pc, #256]	@ (8003654 <HAL_DAC_Start_DMA+0x198>)
 8003554:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4a3f      	ldr	r2, [pc, #252]	@ (8003658 <HAL_DAC_Start_DMA+0x19c>)
 800355c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800356c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_DAC_Start_DMA+0xc0>
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	2b04      	cmp	r3, #4
 8003578:	d005      	beq.n	8003586 <HAL_DAC_Start_DMA+0xca>
 800357a:	e009      	b.n	8003590 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3314      	adds	r3, #20
 8003582:	61bb      	str	r3, [r7, #24]
        break;
 8003584:	e009      	b.n	800359a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3318      	adds	r3, #24
 800358c:	61bb      	str	r3, [r7, #24]
        break;
 800358e:	e004      	b.n	800359a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	331c      	adds	r3, #28
 8003596:	61bb      	str	r3, [r7, #24]
        break;
 8003598:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d111      	bne.n	80035c4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6898      	ldr	r0, [r3, #8]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	f000 fb5d 	bl	8003c78 <HAL_DMA_Start_IT>
 80035be:	4603      	mov	r3, r0
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e010      	b.n	80035e6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80035d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68d8      	ldr	r0, [r3, #12]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	f000 fb4b 	bl	8003c78 <HAL_DMA_Start_IT>
 80035e2:	4603      	mov	r3, r0
 80035e4:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80035ec:	7ffb      	ldrb	r3, [r7, #31]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d11c      	bne.n	800362c <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2201      	movs	r2, #1
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800360a:	4b14      	ldr	r3, [pc, #80]	@ (800365c <HAL_DAC_Start_DMA+0x1a0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	099b      	lsrs	r3, r3, #6
 8003610:	4a13      	ldr	r2, [pc, #76]	@ (8003660 <HAL_DAC_Start_DMA+0x1a4>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800361c:	e002      	b.n	8003624 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3b01      	subs	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <HAL_DAC_Start_DMA+0x162>
 800362a:	e005      	b.n	8003638 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f043 0204 	orr.w	r2, r3, #4
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003638:	7ffb      	ldrb	r3, [r7, #31]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	08003a15 	.word	0x08003a15
 8003648:	08003a37 	.word	0x08003a37
 800364c:	08003a53 	.word	0x08003a53
 8003650:	08003abd 	.word	0x08003abd
 8003654:	08003adf 	.word	0x08003adf
 8003658:	08003afb 	.word	0x08003afb
 800365c:	20000004 	.word	0x20000004
 8003660:	053e2d63 	.word	0x053e2d63

08003664 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	@ 0x28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_DAC_ConfigChannel+0x1c>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e1a1      	b.n	8003a04 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	795b      	ldrb	r3, [r3, #5]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_DAC_ConfigChannel+0x32>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e198      	b.n	8003a04 <HAL_DAC_ConfigChannel+0x364>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2202      	movs	r2, #2
 80036dc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d17a      	bne.n	80037dc <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80036e6:	f7fe f829 	bl	800173c <HAL_GetTick>
 80036ea:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d13d      	bne.n	800376e <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036f2:	e018      	b.n	8003726 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036f4:	f7fe f822 	bl	800173c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d911      	bls.n	8003726 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f043 0208 	orr.w	r2, r3, #8
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2203      	movs	r2, #3
 8003720:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e16e      	b.n	8003a04 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1df      	bne.n	80036f4 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800373c:	641a      	str	r2, [r3, #64]	@ 0x40
 800373e:	e020      	b.n	8003782 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003740:	f7fd fffc 	bl	800173c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d90f      	bls.n	800376e <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003754:	2b00      	cmp	r3, #0
 8003756:	da0a      	bge.n	800376e <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f043 0208 	orr.w	r2, r3, #8
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2203      	movs	r2, #3
 8003768:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e14a      	b.n	8003a04 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003774:	2b00      	cmp	r3, #0
 8003776:	dbe3      	blt.n	8003740 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	ea02 0103 	and.w	r1, r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	409a      	lsls	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	21ff      	movs	r1, #255	@ 0xff
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	ea02 0103 	and.w	r1, r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d11d      	bne.n	8003820 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	221f      	movs	r2, #31
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037fc:	4013      	ands	r3, r2
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003814:	4313      	orrs	r3, r2
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2207      	movs	r2, #7
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003838:	4013      	ands	r3, r2
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d102      	bne.n	800384a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003844:	2300      	movs	r3, #0
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	e00f      	b.n	800386a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d102      	bne.n	8003858 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003852:	2301      	movs	r3, #1
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	e008      	b.n	800386a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003860:	2301      	movs	r3, #1
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	e001      	b.n	800386a <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388c:	4013      	ands	r3, r2
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	791b      	ldrb	r3, [r3, #4]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d102      	bne.n	800389e <HAL_DAC_ConfigChannel+0x1fe>
 8003898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800389c:	e000      	b.n	80038a0 <HAL_DAC_ConfigChannel+0x200>
 800389e:	2300      	movs	r3, #0
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b8:	4013      	ands	r3, r2
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	795b      	ldrb	r3, [r3, #5]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d102      	bne.n	80038ca <HAL_DAC_ConfigChannel+0x22a>
 80038c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038c8:	e000      	b.n	80038cc <HAL_DAC_ConfigChannel+0x22c>
 80038ca:	2300      	movs	r3, #0
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d114      	bne.n	800390c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80038e2:	f001 fa79 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 80038e6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4a48      	ldr	r2, [pc, #288]	@ (8003a0c <HAL_DAC_ConfigChannel+0x36c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d904      	bls.n	80038fa <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f8:	e00f      	b.n	800391a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4a44      	ldr	r2, [pc, #272]	@ (8003a10 <HAL_DAC_ConfigChannel+0x370>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d90a      	bls.n	8003918 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
 800390a:	e006      	b.n	800391a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003912:	4313      	orrs	r3, r2
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
 8003916:	e000      	b.n	800391a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003918:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003928:	4313      	orrs	r3, r2
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003932:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43da      	mvns	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	400a      	ands	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396c:	4013      	ands	r3, r2
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003984:	4313      	orrs	r3, r2
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	22c0      	movs	r2, #192	@ 0xc0
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	400a      	ands	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	ea02 0103 	and.w	r1, r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3728      	adds	r7, #40	@ 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	09896800 	.word	0x09896800
 8003a10:	04c4b400 	.word	0x04c4b400

08003a14 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff fe1e 	bl	8003664 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	711a      	strb	r2, [r3, #4]
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a42:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff fe17 	bl	8003678 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f043 0204 	orr.w	r2, r3, #4
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f7ff fe0d 	bl	800368c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	711a      	strb	r2, [r3, #4]
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f7ff ffd8 	bl	8003a80 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	711a      	strb	r2, [r3, #4]
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff ffd1 	bl	8003a94 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f7ff ffc7 	bl	8003aa8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	711a      	strb	r2, [r3, #4]
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e08d      	b.n	8003c56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b47      	ldr	r3, [pc, #284]	@ (8003c60 <HAL_DMA_Init+0x138>)
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d80f      	bhi.n	8003b66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b45      	ldr	r3, [pc, #276]	@ (8003c64 <HAL_DMA_Init+0x13c>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a45      	ldr	r2, [pc, #276]	@ (8003c68 <HAL_DMA_Init+0x140>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	009a      	lsls	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a42      	ldr	r2, [pc, #264]	@ (8003c6c <HAL_DMA_Init+0x144>)
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b64:	e00e      	b.n	8003b84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b40      	ldr	r3, [pc, #256]	@ (8003c70 <HAL_DMA_Init+0x148>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a3d      	ldr	r2, [pc, #244]	@ (8003c68 <HAL_DMA_Init+0x140>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a3c      	ldr	r2, [pc, #240]	@ (8003c74 <HAL_DMA_Init+0x14c>)
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f9b6 	bl	8003f48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003be4:	d102      	bne.n	8003bec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c00:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_DMA_Init+0x104>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d80c      	bhi.n	8003c2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f9d6 	bl	8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e008      	b.n	8003c3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40020407 	.word	0x40020407
 8003c64:	bffdfff8 	.word	0xbffdfff8
 8003c68:	cccccccd 	.word	0xcccccccd
 8003c6c:	40020000 	.word	0x40020000
 8003c70:	bffdfbf8 	.word	0xbffdfbf8
 8003c74:	40020400 	.word	0x40020400

08003c78 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_DMA_Start_IT+0x20>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e066      	b.n	8003d66 <HAL_DMA_Start_IT+0xee>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d155      	bne.n	8003d58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f8fb 	bl	8003ecc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 020e 	orr.w	r2, r2, #14
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e00f      	b.n	8003d10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 020a 	orr.w	r2, r2, #10
 8003d0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d2c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e005      	b.n	8003d64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
 8003d62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2204      	movs	r2, #4
 8003d90:	409a      	lsls	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d026      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x7a>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d021      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0204 	bic.w	r2, r2, #4
 8003dc0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	f003 021f 	and.w	r2, r3, #31
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2104      	movs	r1, #4
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d071      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003de6:	e06c      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2202      	movs	r2, #2
 8003df2:	409a      	lsls	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d02e      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d029      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 020a 	bic.w	r2, r2, #10
 8003e22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	2102      	movs	r1, #2
 8003e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d038      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e58:	e033      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2208      	movs	r2, #8
 8003e64:	409a      	lsls	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d02a      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d025      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 020e 	bic.w	r2, r2, #14
 8003e86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8c:	f003 021f 	and.w	r2, r3, #31
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	2101      	movs	r1, #1
 8003e96:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
}
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ee2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ef4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	f003 021f 	and.w	r2, r3, #31
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	2101      	movs	r1, #1
 8003f04:	fa01 f202 	lsl.w	r2, r1, r2
 8003f08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d108      	bne.n	8003f2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f2a:	e007      	b.n	8003f3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b16      	ldr	r3, [pc, #88]	@ (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d802      	bhi.n	8003f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f5c:	4b15      	ldr	r3, [pc, #84]	@ (8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	e001      	b.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f64:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3b08      	subs	r3, #8
 8003f72:	4a12      	ldr	r2, [pc, #72]	@ (8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	009a      	lsls	r2, r3, #2
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a0b      	ldr	r2, [pc, #44]	@ (8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40020407 	.word	0x40020407
 8003fb4:	40020800 	.word	0x40020800
 8003fb8:	40020820 	.word	0x40020820
 8003fbc:	cccccccd 	.word	0xcccccccd
 8003fc0:	40020880 	.word	0x40020880

08003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a08      	ldr	r2, [pc, #32]	@ (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fe6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	1000823f 	.word	0x1000823f
 8004008:	40020940 	.word	0x40020940

0800400c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800401a:	e15a      	b.n	80042d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	2101      	movs	r1, #1
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	4013      	ands	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 814c 	beq.w	80042cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d005      	beq.n	800404c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004048:	2b02      	cmp	r3, #2
 800404a:	d130      	bne.n	80040ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	2203      	movs	r2, #3
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004082:	2201      	movs	r2, #1
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	f003 0201 	and.w	r2, r3, #1
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d017      	beq.n	80040ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d123      	bne.n	800413e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	08da      	lsrs	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3208      	adds	r2, #8
 80040fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	220f      	movs	r2, #15
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	08da      	lsrs	r2, r3, #3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3208      	adds	r2, #8
 8004138:	6939      	ldr	r1, [r7, #16]
 800413a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	2203      	movs	r2, #3
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0203 	and.w	r2, r3, #3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80a6 	beq.w	80042cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004180:	4b5b      	ldr	r3, [pc, #364]	@ (80042f0 <HAL_GPIO_Init+0x2e4>)
 8004182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004184:	4a5a      	ldr	r2, [pc, #360]	@ (80042f0 <HAL_GPIO_Init+0x2e4>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6613      	str	r3, [r2, #96]	@ 0x60
 800418c:	4b58      	ldr	r3, [pc, #352]	@ (80042f0 <HAL_GPIO_Init+0x2e4>)
 800418e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004198:	4a56      	ldr	r2, [pc, #344]	@ (80042f4 <HAL_GPIO_Init+0x2e8>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	089b      	lsrs	r3, r3, #2
 800419e:	3302      	adds	r3, #2
 80041a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	220f      	movs	r2, #15
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041c2:	d01f      	beq.n	8004204 <HAL_GPIO_Init+0x1f8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a4c      	ldr	r2, [pc, #304]	@ (80042f8 <HAL_GPIO_Init+0x2ec>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d019      	beq.n	8004200 <HAL_GPIO_Init+0x1f4>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a4b      	ldr	r2, [pc, #300]	@ (80042fc <HAL_GPIO_Init+0x2f0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_GPIO_Init+0x1f0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004300 <HAL_GPIO_Init+0x2f4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00d      	beq.n	80041f8 <HAL_GPIO_Init+0x1ec>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a49      	ldr	r2, [pc, #292]	@ (8004304 <HAL_GPIO_Init+0x2f8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <HAL_GPIO_Init+0x1e8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a48      	ldr	r2, [pc, #288]	@ (8004308 <HAL_GPIO_Init+0x2fc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_GPIO_Init+0x1e4>
 80041ec:	2305      	movs	r3, #5
 80041ee:	e00a      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 80041f0:	2306      	movs	r3, #6
 80041f2:	e008      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 80041f4:	2304      	movs	r3, #4
 80041f6:	e006      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 80041f8:	2303      	movs	r3, #3
 80041fa:	e004      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e002      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 8004204:	2300      	movs	r3, #0
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	f002 0203 	and.w	r2, r2, #3
 800420c:	0092      	lsls	r2, r2, #2
 800420e:	4093      	lsls	r3, r2
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004216:	4937      	ldr	r1, [pc, #220]	@ (80042f4 <HAL_GPIO_Init+0x2e8>)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	3302      	adds	r3, #2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004224:	4b39      	ldr	r3, [pc, #228]	@ (800430c <HAL_GPIO_Init+0x300>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	43db      	mvns	r3, r3
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4013      	ands	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004248:	4a30      	ldr	r2, [pc, #192]	@ (800430c <HAL_GPIO_Init+0x300>)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800424e:	4b2f      	ldr	r3, [pc, #188]	@ (800430c <HAL_GPIO_Init+0x300>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	43db      	mvns	r3, r3
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004272:	4a26      	ldr	r2, [pc, #152]	@ (800430c <HAL_GPIO_Init+0x300>)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004278:	4b24      	ldr	r3, [pc, #144]	@ (800430c <HAL_GPIO_Init+0x300>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	43db      	mvns	r3, r3
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800429c:	4a1b      	ldr	r2, [pc, #108]	@ (800430c <HAL_GPIO_Init+0x300>)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042a2:	4b1a      	ldr	r3, [pc, #104]	@ (800430c <HAL_GPIO_Init+0x300>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042c6:	4a11      	ldr	r2, [pc, #68]	@ (800430c <HAL_GPIO_Init+0x300>)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3301      	adds	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f ae9d 	bne.w	800401c <HAL_GPIO_Init+0x10>
  }
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40010000 	.word	0x40010000
 80042f8:	48000400 	.word	0x48000400
 80042fc:	48000800 	.word	0x48000800
 8004300:	48000c00 	.word	0x48000c00
 8004304:	48001000 	.word	0x48001000
 8004308:	48001400 	.word	0x48001400
 800430c:	40010400 	.word	0x40010400

08004310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d141      	bne.n	80043a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800431e:	4b4b      	ldr	r3, [pc, #300]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432a:	d131      	bne.n	8004390 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800432c:	4b47      	ldr	r3, [pc, #284]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004332:	4a46      	ldr	r2, [pc, #280]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004338:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800433c:	4b43      	ldr	r3, [pc, #268]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004344:	4a41      	ldr	r2, [pc, #260]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800434a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800434c:	4b40      	ldr	r3, [pc, #256]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2232      	movs	r2, #50	@ 0x32
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	4a3f      	ldr	r2, [pc, #252]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	0c9b      	lsrs	r3, r3, #18
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004362:	e002      	b.n	800436a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3b01      	subs	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800436a:	4b38      	ldr	r3, [pc, #224]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004376:	d102      	bne.n	800437e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f2      	bne.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800437e:	4b33      	ldr	r3, [pc, #204]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438a:	d158      	bne.n	800443e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e057      	b.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004390:	4b2e      	ldr	r3, [pc, #184]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004396:	4a2d      	ldr	r2, [pc, #180]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800439c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043a0:	e04d      	b.n	800443e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a8:	d141      	bne.n	800442e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043aa:	4b28      	ldr	r3, [pc, #160]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b6:	d131      	bne.n	800441c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043b8:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043be:	4a23      	ldr	r2, [pc, #140]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043c8:	4b20      	ldr	r3, [pc, #128]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043d0:	4a1e      	ldr	r2, [pc, #120]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2232      	movs	r2, #50	@ 0x32
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	0c9b      	lsrs	r3, r3, #18
 80043ea:	3301      	adds	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ee:	e002      	b.n	80043f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f6:	4b15      	ldr	r3, [pc, #84]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004402:	d102      	bne.n	800440a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f2      	bne.n	80043f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800440a:	4b10      	ldr	r3, [pc, #64]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004416:	d112      	bne.n	800443e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e011      	b.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004422:	4a0a      	ldr	r2, [pc, #40]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004428:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800442c:	e007      	b.n	800443e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800442e:	4b07      	ldr	r3, [pc, #28]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004436:	4a05      	ldr	r2, [pc, #20]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004438:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800443c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	40007000 	.word	0x40007000
 8004450:	20000004 	.word	0x20000004
 8004454:	431bde83 	.word	0x431bde83

08004458 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800445c:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a04      	ldr	r2, [pc, #16]	@ (8004474 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004462:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004466:	6093      	str	r3, [r2, #8]
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40007000 	.word	0x40007000

08004478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e2fe      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d075      	beq.n	8004582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004496:	4b97      	ldr	r3, [pc, #604]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a0:	4b94      	ldr	r3, [pc, #592]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	d102      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3e>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d002      	beq.n	80044bc <HAL_RCC_OscConfig+0x44>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d10b      	bne.n	80044d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	4b8d      	ldr	r3, [pc, #564]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d05b      	beq.n	8004580 <HAL_RCC_OscConfig+0x108>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d157      	bne.n	8004580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e2d9      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044dc:	d106      	bne.n	80044ec <HAL_RCC_OscConfig+0x74>
 80044de:	4b85      	ldr	r3, [pc, #532]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a84      	ldr	r2, [pc, #528]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e01d      	b.n	8004528 <HAL_RCC_OscConfig+0xb0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0x98>
 80044f6:	4b7f      	ldr	r3, [pc, #508]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7e      	ldr	r2, [pc, #504]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80044fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b7c      	ldr	r3, [pc, #496]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a7b      	ldr	r2, [pc, #492]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e00b      	b.n	8004528 <HAL_RCC_OscConfig+0xb0>
 8004510:	4b78      	ldr	r3, [pc, #480]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a77      	ldr	r2, [pc, #476]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b75      	ldr	r3, [pc, #468]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a74      	ldr	r2, [pc, #464]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d013      	beq.n	8004558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd f904 	bl	800173c <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004538:	f7fd f900 	bl	800173c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	@ 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e29e      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454a:	4b6a      	ldr	r3, [pc, #424]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0xc0>
 8004556:	e014      	b.n	8004582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fd f8f0 	bl	800173c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004560:	f7fd f8ec 	bl	800173c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	@ 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e28a      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004572:	4b60      	ldr	r3, [pc, #384]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0xe8>
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d075      	beq.n	800467a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800458e:	4b59      	ldr	r3, [pc, #356]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004598:	4b56      	ldr	r3, [pc, #344]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d102      	bne.n	80045ae <HAL_RCC_OscConfig+0x136>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d002      	beq.n	80045b4 <HAL_RCC_OscConfig+0x13c>
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d11f      	bne.n	80045f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b4:	4b4f      	ldr	r3, [pc, #316]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_OscConfig+0x154>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e25d      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b49      	ldr	r3, [pc, #292]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	4946      	ldr	r1, [pc, #280]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045e0:	4b45      	ldr	r3, [pc, #276]	@ (80046f8 <HAL_RCC_OscConfig+0x280>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd f85d 	bl	80016a4 <HAL_InitTick>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d043      	beq.n	8004678 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e249      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d023      	beq.n	8004644 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fc:	4b3d      	ldr	r3, [pc, #244]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a3c      	ldr	r2, [pc, #240]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd f898 	bl	800173c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004610:	f7fd f894 	bl	800173c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e232      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004622:	4b34      	ldr	r3, [pc, #208]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462e:	4b31      	ldr	r3, [pc, #196]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	492d      	ldr	r1, [pc, #180]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
 8004642:	e01a      	b.n	800467a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a2a      	ldr	r2, [pc, #168]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 800464a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800464e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd f874 	bl	800173c <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004658:	f7fd f870 	bl	800173c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e20e      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800466a:	4b22      	ldr	r3, [pc, #136]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x1e0>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d041      	beq.n	800470a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01c      	beq.n	80046c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468e:	4b19      	ldr	r3, [pc, #100]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004694:	4a17      	ldr	r2, [pc, #92]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469e:	f7fd f84d 	bl	800173c <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a6:	f7fd f849 	bl	800173c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1e7      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046b8:	4b0e      	ldr	r3, [pc, #56]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ef      	beq.n	80046a6 <HAL_RCC_OscConfig+0x22e>
 80046c6:	e020      	b.n	800470a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80046ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ce:	4a09      	ldr	r2, [pc, #36]	@ (80046f4 <HAL_RCC_OscConfig+0x27c>)
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fd f830 	bl	800173c <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046de:	e00d      	b.n	80046fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e0:	f7fd f82c 	bl	800173c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d906      	bls.n	80046fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1ca      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046fc:	4b8c      	ldr	r3, [pc, #560]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80046fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ea      	bne.n	80046e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80a6 	beq.w	8004864 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004718:	2300      	movs	r3, #0
 800471a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800471c:	4b84      	ldr	r3, [pc, #528]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_OscConfig+0x2b4>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x2b6>
 800472c:	2300      	movs	r3, #0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00d      	beq.n	800474e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004732:	4b7f      	ldr	r3, [pc, #508]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 8004734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004736:	4a7e      	ldr	r2, [pc, #504]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800473c:	6593      	str	r3, [r2, #88]	@ 0x58
 800473e:	4b7c      	ldr	r3, [pc, #496]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800474a:	2301      	movs	r3, #1
 800474c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474e:	4b79      	ldr	r3, [pc, #484]	@ (8004934 <HAL_RCC_OscConfig+0x4bc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d118      	bne.n	800478c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800475a:	4b76      	ldr	r3, [pc, #472]	@ (8004934 <HAL_RCC_OscConfig+0x4bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a75      	ldr	r2, [pc, #468]	@ (8004934 <HAL_RCC_OscConfig+0x4bc>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004766:	f7fc ffe9 	bl	800173c <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476e:	f7fc ffe5 	bl	800173c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e183      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004780:	4b6c      	ldr	r3, [pc, #432]	@ (8004934 <HAL_RCC_OscConfig+0x4bc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d108      	bne.n	80047a6 <HAL_RCC_OscConfig+0x32e>
 8004794:	4b66      	ldr	r3, [pc, #408]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479a:	4a65      	ldr	r2, [pc, #404]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047a4:	e024      	b.n	80047f0 <HAL_RCC_OscConfig+0x378>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b05      	cmp	r3, #5
 80047ac:	d110      	bne.n	80047d0 <HAL_RCC_OscConfig+0x358>
 80047ae:	4b60      	ldr	r3, [pc, #384]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b4:	4a5e      	ldr	r2, [pc, #376]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047be:	4b5c      	ldr	r3, [pc, #368]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c4:	4a5a      	ldr	r2, [pc, #360]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ce:	e00f      	b.n	80047f0 <HAL_RCC_OscConfig+0x378>
 80047d0:	4b57      	ldr	r3, [pc, #348]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	4a56      	ldr	r2, [pc, #344]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e0:	4b53      	ldr	r3, [pc, #332]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d016      	beq.n	8004826 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fc ffa0 	bl	800173c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fc ff9c 	bl	800173c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e138      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004816:	4b46      	ldr	r3, [pc, #280]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0ed      	beq.n	8004800 <HAL_RCC_OscConfig+0x388>
 8004824:	e015      	b.n	8004852 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004826:	f7fc ff89 	bl	800173c <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800482c:	e00a      	b.n	8004844 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482e:	f7fc ff85 	bl	800173c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e121      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004844:	4b3a      	ldr	r3, [pc, #232]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1ed      	bne.n	800482e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004852:	7ffb      	ldrb	r3, [r7, #31]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004858:	4b35      	ldr	r3, [pc, #212]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485c:	4a34      	ldr	r2, [pc, #208]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 800485e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004862:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d03c      	beq.n	80048ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01c      	beq.n	80048b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004878:	4b2d      	ldr	r3, [pc, #180]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 800487a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800487e:	4a2c      	ldr	r2, [pc, #176]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fc ff58 	bl	800173c <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004890:	f7fc ff54 	bl	800173c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0f2      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048a2:	4b23      	ldr	r3, [pc, #140]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80048a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0ef      	beq.n	8004890 <HAL_RCC_OscConfig+0x418>
 80048b0:	e01b      	b.n	80048ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80048b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c2:	f7fc ff3b 	bl	800173c <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ca:	f7fc ff37 	bl	800173c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e0d5      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048dc:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80048de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1ef      	bne.n	80048ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80c9 	beq.w	8004a86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	f000 8083 	beq.w	8004a08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d15e      	bne.n	80049c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a08      	ldr	r2, [pc, #32]	@ (8004930 <HAL_RCC_OscConfig+0x4b8>)
 8004910:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004916:	f7fc ff11 	bl	800173c <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491c:	e00c      	b.n	8004938 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491e:	f7fc ff0d 	bl	800173c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d905      	bls.n	8004938 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e0ab      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004938:	4b55      	ldr	r3, [pc, #340]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ec      	bne.n	800491e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004944:	4b52      	ldr	r3, [pc, #328]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	4b52      	ldr	r3, [pc, #328]	@ (8004a94 <HAL_RCC_OscConfig+0x61c>)
 800494a:	4013      	ands	r3, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6a11      	ldr	r1, [r2, #32]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004954:	3a01      	subs	r2, #1
 8004956:	0112      	lsls	r2, r2, #4
 8004958:	4311      	orrs	r1, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800495e:	0212      	lsls	r2, r2, #8
 8004960:	4311      	orrs	r1, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004966:	0852      	lsrs	r2, r2, #1
 8004968:	3a01      	subs	r2, #1
 800496a:	0552      	lsls	r2, r2, #21
 800496c:	4311      	orrs	r1, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004972:	0852      	lsrs	r2, r2, #1
 8004974:	3a01      	subs	r2, #1
 8004976:	0652      	lsls	r2, r2, #25
 8004978:	4311      	orrs	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800497e:	06d2      	lsls	r2, r2, #27
 8004980:	430a      	orrs	r2, r1
 8004982:	4943      	ldr	r1, [pc, #268]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 8004984:	4313      	orrs	r3, r2
 8004986:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004988:	4b41      	ldr	r3, [pc, #260]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a40      	ldr	r2, [pc, #256]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 800498e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004992:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004994:	4b3e      	ldr	r3, [pc, #248]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4a3d      	ldr	r2, [pc, #244]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 800499a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800499e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fc fecc 	bl	800173c <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fc fec8 	bl	800173c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e066      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ba:	4b35      	ldr	r3, [pc, #212]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x530>
 80049c6:	e05e      	b.n	8004a86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c8:	4b31      	ldr	r3, [pc, #196]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a30      	ldr	r2, [pc, #192]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 80049ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fc feb2 	bl	800173c <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fc feae 	bl	800173c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e04c      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ee:	4b28      	ldr	r3, [pc, #160]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049fa:	4b25      	ldr	r3, [pc, #148]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	4924      	ldr	r1, [pc, #144]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 8004a00:	4b25      	ldr	r3, [pc, #148]	@ (8004a98 <HAL_RCC_OscConfig+0x620>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	60cb      	str	r3, [r1, #12]
 8004a06:	e03e      	b.n	8004a86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e039      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a14:	4b1e      	ldr	r3, [pc, #120]	@ (8004a90 <HAL_RCC_OscConfig+0x618>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0203 	and.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d12c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	3b01      	subs	r3, #1
 8004a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d123      	bne.n	8004a82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d11b      	bne.n	8004a82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d113      	bne.n	8004a82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	3b01      	subs	r3, #1
 8004a68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	019f800c 	.word	0x019f800c
 8004a98:	feeefffc 	.word	0xfeeefffc

08004a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e11e      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b91      	ldr	r3, [pc, #580]	@ (8004cfc <HAL_RCC_ClockConfig+0x260>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d910      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b8e      	ldr	r3, [pc, #568]	@ (8004cfc <HAL_RCC_ClockConfig+0x260>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 020f 	bic.w	r2, r3, #15
 8004aca:	498c      	ldr	r1, [pc, #560]	@ (8004cfc <HAL_RCC_ClockConfig+0x260>)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b8a      	ldr	r3, [pc, #552]	@ (8004cfc <HAL_RCC_ClockConfig+0x260>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e106      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d073      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d129      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af8:	4b81      	ldr	r3, [pc, #516]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0f4      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b08:	f000 f972 	bl	8004df0 <RCC_GetSysClockFreqFromPLLSource>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4a7c      	ldr	r2, [pc, #496]	@ (8004d04 <HAL_RCC_ClockConfig+0x268>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d93f      	bls.n	8004b96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b16:	4b7a      	ldr	r3, [pc, #488]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d033      	beq.n	8004b96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d12f      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b36:	4b72      	ldr	r3, [pc, #456]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b3e:	4a70      	ldr	r2, [pc, #448]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b46:	2380      	movs	r3, #128	@ 0x80
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e024      	b.n	8004b96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b54:	4b6a      	ldr	r3, [pc, #424]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0c6      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b64:	4b66      	ldr	r3, [pc, #408]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0be      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b74:	f000 f8ce 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4a61      	ldr	r2, [pc, #388]	@ (8004d04 <HAL_RCC_ClockConfig+0x268>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d909      	bls.n	8004b96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b82:	4b5f      	ldr	r3, [pc, #380]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b8a:	4a5d      	ldr	r2, [pc, #372]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b92:	2380      	movs	r3, #128	@ 0x80
 8004b94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b96:	4b5a      	ldr	r3, [pc, #360]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f023 0203 	bic.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4957      	ldr	r1, [pc, #348]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba8:	f7fc fdc8 	bl	800173c <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb0:	f7fc fdc4 	bl	800173c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e095      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	4b4e      	ldr	r3, [pc, #312]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 020c 	and.w	r2, r3, #12
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d1eb      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d023      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bf0:	4b43      	ldr	r3, [pc, #268]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4a42      	ldr	r2, [pc, #264]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004bf6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bfa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c08:	4b3d      	ldr	r3, [pc, #244]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c10:	4a3b      	ldr	r2, [pc, #236]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004c12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c18:	4b39      	ldr	r3, [pc, #228]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4936      	ldr	r1, [pc, #216]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b80      	cmp	r3, #128	@ 0x80
 8004c30:	d105      	bne.n	8004c3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c32:	4b33      	ldr	r3, [pc, #204]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	4a32      	ldr	r2, [pc, #200]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004c38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8004cfc <HAL_RCC_ClockConfig+0x260>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d21d      	bcs.n	8004c88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cfc <HAL_RCC_ClockConfig+0x260>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 020f 	bic.w	r2, r3, #15
 8004c54:	4929      	ldr	r1, [pc, #164]	@ (8004cfc <HAL_RCC_ClockConfig+0x260>)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c5c:	f7fc fd6e 	bl	800173c <HAL_GetTick>
 8004c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	e00a      	b.n	8004c7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c64:	f7fc fd6a 	bl	800173c <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e03b      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b20      	ldr	r3, [pc, #128]	@ (8004cfc <HAL_RCC_ClockConfig+0x260>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d1ed      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c94:	4b1a      	ldr	r3, [pc, #104]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4917      	ldr	r1, [pc, #92]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cb2:	4b13      	ldr	r3, [pc, #76]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	490f      	ldr	r1, [pc, #60]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cc6:	f000 f825 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <HAL_RCC_ClockConfig+0x264>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	490c      	ldr	r1, [pc, #48]	@ (8004d08 <HAL_RCC_ClockConfig+0x26c>)
 8004cd8:	5ccb      	ldrb	r3, [r1, r3]
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d0c <HAL_RCC_ClockConfig+0x270>)
 8004ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <HAL_RCC_ClockConfig+0x274>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fc fcda 	bl	80016a4 <HAL_InitTick>
 8004cf0:	4603      	mov	r3, r0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40022000 	.word	0x40022000
 8004d00:	40021000 	.word	0x40021000
 8004d04:	04c4b400 	.word	0x04c4b400
 8004d08:	08006b60 	.word	0x08006b60
 8004d0c:	20000004 	.word	0x20000004
 8004d10:	20000008 	.word	0x20000008

08004d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d102      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d26:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e047      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d2c:	4b27      	ldr	r3, [pc, #156]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d102      	bne.n	8004d3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d38:	4b26      	ldr	r3, [pc, #152]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	e03e      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d3e:	4b23      	ldr	r3, [pc, #140]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b0c      	cmp	r3, #12
 8004d48:	d136      	bne.n	8004db8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d4a:	4b20      	ldr	r3, [pc, #128]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d54:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d10c      	bne.n	8004d82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d68:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d72:	68d2      	ldr	r2, [r2, #12]
 8004d74:	0a12      	lsrs	r2, r2, #8
 8004d76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	617b      	str	r3, [r7, #20]
      break;
 8004d80:	e00c      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d82:	4a13      	ldr	r2, [pc, #76]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	4a10      	ldr	r2, [pc, #64]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	0a12      	lsrs	r2, r2, #8
 8004d90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]
      break;
 8004d9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0e5b      	lsrs	r3, r3, #25
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	3301      	adds	r3, #1
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	e001      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004dbc:	693b      	ldr	r3, [r7, #16]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	00f42400 	.word	0x00f42400
 8004dd4:	007a1200 	.word	0x007a1200

08004dd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <HAL_RCC_GetHCLKFreq+0x14>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000004 	.word	0x20000004

08004df0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004df6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e00:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d10c      	bne.n	8004e2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e14:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	4a14      	ldr	r2, [pc, #80]	@ (8004e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e1e:	68d2      	ldr	r2, [r2, #12]
 8004e20:	0a12      	lsrs	r2, r2, #8
 8004e22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	617b      	str	r3, [r7, #20]
    break;
 8004e2c:	e00c      	b.n	8004e48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e2e:	4a12      	ldr	r2, [pc, #72]	@ (8004e78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	4a0e      	ldr	r2, [pc, #56]	@ (8004e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e38:	68d2      	ldr	r2, [r2, #12]
 8004e3a:	0a12      	lsrs	r2, r2, #8
 8004e3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e40:	fb02 f303 	mul.w	r3, r2, r3
 8004e44:	617b      	str	r3, [r7, #20]
    break;
 8004e46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e48:	4b09      	ldr	r3, [pc, #36]	@ (8004e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	0e5b      	lsrs	r3, r3, #25
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	3301      	adds	r3, #1
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e62:	687b      	ldr	r3, [r7, #4]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40021000 	.word	0x40021000
 8004e74:	007a1200 	.word	0x007a1200
 8004e78:	00f42400 	.word	0x00f42400

08004e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e84:	2300      	movs	r3, #0
 8004e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8098 	beq.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9e:	4b43      	ldr	r3, [pc, #268]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10d      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eaa:	4b40      	ldr	r3, [pc, #256]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eae:	4a3f      	ldr	r2, [pc, #252]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a39      	ldr	r2, [pc, #228]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ed2:	f7fc fc33 	bl	800173c <HAL_GetTick>
 8004ed6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed8:	e009      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eda:	f7fc fc2f 	bl	800173c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d902      	bls.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	74fb      	strb	r3, [r7, #19]
        break;
 8004eec:	e005      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eee:	4b30      	ldr	r3, [pc, #192]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0ef      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d159      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f00:	4b2a      	ldr	r3, [pc, #168]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01e      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d019      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f1c:	4b23      	ldr	r3, [pc, #140]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f28:	4b20      	ldr	r3, [pc, #128]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f38:	4b1c      	ldr	r3, [pc, #112]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f48:	4a18      	ldr	r2, [pc, #96]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fc fbef 	bl	800173c <HAL_GetTick>
 8004f5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f60:	e00b      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fc fbeb 	bl	800173c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d902      	bls.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	74fb      	strb	r3, [r7, #19]
            break;
 8004f78:	e006      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0ec      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f8e:	4b07      	ldr	r3, [pc, #28]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f9c:	4903      	ldr	r1, [pc, #12]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fa6:	7cfb      	ldrb	r3, [r7, #19]
 8004fa8:	74bb      	strb	r3, [r7, #18]
 8004faa:	e005      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb8:	7c7b      	ldrb	r3, [r7, #17]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d105      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fbe:	4ba7      	ldr	r3, [pc, #668]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc2:	4aa6      	ldr	r2, [pc, #664]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd6:	4ba1      	ldr	r3, [pc, #644]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fdc:	f023 0203 	bic.w	r2, r3, #3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	499d      	ldr	r1, [pc, #628]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff8:	4b98      	ldr	r3, [pc, #608]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffe:	f023 020c 	bic.w	r2, r3, #12
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	4995      	ldr	r1, [pc, #596]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800501a:	4b90      	ldr	r3, [pc, #576]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005020:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	498c      	ldr	r1, [pc, #560]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800503c:	4b87      	ldr	r3, [pc, #540]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005042:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	4984      	ldr	r1, [pc, #528]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800505e:	4b7f      	ldr	r3, [pc, #508]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	497b      	ldr	r1, [pc, #492]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005080:	4b76      	ldr	r3, [pc, #472]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005086:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	4973      	ldr	r1, [pc, #460]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050a2:	4b6e      	ldr	r3, [pc, #440]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	496a      	ldr	r1, [pc, #424]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c4:	4b65      	ldr	r3, [pc, #404]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	4962      	ldr	r1, [pc, #392]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050e6:	4b5d      	ldr	r3, [pc, #372]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	4959      	ldr	r1, [pc, #356]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005108:	4b54      	ldr	r3, [pc, #336]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800510e:	f023 0203 	bic.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	4951      	ldr	r1, [pc, #324]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800512a:	4b4c      	ldr	r3, [pc, #304]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005130:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	4948      	ldr	r1, [pc, #288]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800514c:	4b43      	ldr	r3, [pc, #268]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005152:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515a:	4940      	ldr	r1, [pc, #256]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516a:	d105      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800516c:	4b3b      	ldr	r3, [pc, #236]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4a3a      	ldr	r2, [pc, #232]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005176:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005180:	2b00      	cmp	r3, #0
 8005182:	d015      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005184:	4b35      	ldr	r3, [pc, #212]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005192:	4932      	ldr	r1, [pc, #200]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051a2:	d105      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a4:	4b2d      	ldr	r3, [pc, #180]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a2c      	ldr	r2, [pc, #176]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051bc:	4b27      	ldr	r3, [pc, #156]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ca:	4924      	ldr	r1, [pc, #144]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051da:	d105      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051dc:	4b1f      	ldr	r3, [pc, #124]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a1e      	ldr	r2, [pc, #120]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d015      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f4:	4b19      	ldr	r3, [pc, #100]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005202:	4916      	ldr	r1, [pc, #88]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005212:	d105      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005214:	4b11      	ldr	r3, [pc, #68]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4a10      	ldr	r2, [pc, #64]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800521e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d019      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800522c:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005232:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	4908      	ldr	r1, [pc, #32]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800524a:	d109      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800524c:	4b03      	ldr	r3, [pc, #12]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a02      	ldr	r2, [pc, #8]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005256:	60d3      	str	r3, [r2, #12]
 8005258:	e002      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800525a:	bf00      	nop
 800525c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800526c:	4b29      	ldr	r3, [pc, #164]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005272:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	4926      	ldr	r1, [pc, #152]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800528a:	d105      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800528c:	4b21      	ldr	r3, [pc, #132]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4a20      	ldr	r2, [pc, #128]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005296:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d015      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80052a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b2:	4918      	ldr	r1, [pc, #96]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c2:	d105      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052c4:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a12      	ldr	r2, [pc, #72]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d015      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ea:	490a      	ldr	r1, [pc, #40]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052fa:	d105      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fc:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a04      	ldr	r2, [pc, #16]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005306:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005308:	7cbb      	ldrb	r3, [r7, #18]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40021000 	.word	0x40021000

08005318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e049      	b.n	80053be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc f904 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f000 f9bc 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d001      	beq.n	80053e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e04c      	b.n	800547a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a26      	ldr	r2, [pc, #152]	@ (8005488 <HAL_TIM_Base_Start+0xc0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d022      	beq.n	8005438 <HAL_TIM_Base_Start+0x70>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fa:	d01d      	beq.n	8005438 <HAL_TIM_Base_Start+0x70>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a22      	ldr	r2, [pc, #136]	@ (800548c <HAL_TIM_Base_Start+0xc4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d018      	beq.n	8005438 <HAL_TIM_Base_Start+0x70>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a21      	ldr	r2, [pc, #132]	@ (8005490 <HAL_TIM_Base_Start+0xc8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <HAL_TIM_Base_Start+0x70>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1f      	ldr	r2, [pc, #124]	@ (8005494 <HAL_TIM_Base_Start+0xcc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00e      	beq.n	8005438 <HAL_TIM_Base_Start+0x70>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1e      	ldr	r2, [pc, #120]	@ (8005498 <HAL_TIM_Base_Start+0xd0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d009      	beq.n	8005438 <HAL_TIM_Base_Start+0x70>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1c      	ldr	r2, [pc, #112]	@ (800549c <HAL_TIM_Base_Start+0xd4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_TIM_Base_Start+0x70>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1b      	ldr	r2, [pc, #108]	@ (80054a0 <HAL_TIM_Base_Start+0xd8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d115      	bne.n	8005464 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	4b19      	ldr	r3, [pc, #100]	@ (80054a4 <HAL_TIM_Base_Start+0xdc>)
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b06      	cmp	r3, #6
 8005448:	d015      	beq.n	8005476 <HAL_TIM_Base_Start+0xae>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005450:	d011      	beq.n	8005476 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005462:	e008      	b.n	8005476 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e000      	b.n	8005478 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005476:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40013400 	.word	0x40013400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40015000 	.word	0x40015000
 80054a4:	00010007 	.word	0x00010007

080054a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIM_ConfigClockSource+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0f6      	b.n	80056b2 <HAL_TIM_ConfigClockSource+0x20a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80054e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a6f      	ldr	r2, [pc, #444]	@ (80056bc <HAL_TIM_ConfigClockSource+0x214>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	f000 80c1 	beq.w	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 8005504:	4a6d      	ldr	r2, [pc, #436]	@ (80056bc <HAL_TIM_ConfigClockSource+0x214>)
 8005506:	4293      	cmp	r3, r2
 8005508:	f200 80c6 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 800550c:	4a6c      	ldr	r2, [pc, #432]	@ (80056c0 <HAL_TIM_ConfigClockSource+0x218>)
 800550e:	4293      	cmp	r3, r2
 8005510:	f000 80b9 	beq.w	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 8005514:	4a6a      	ldr	r2, [pc, #424]	@ (80056c0 <HAL_TIM_ConfigClockSource+0x218>)
 8005516:	4293      	cmp	r3, r2
 8005518:	f200 80be 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 800551c:	4a69      	ldr	r2, [pc, #420]	@ (80056c4 <HAL_TIM_ConfigClockSource+0x21c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	f000 80b1 	beq.w	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 8005524:	4a67      	ldr	r2, [pc, #412]	@ (80056c4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	f200 80b6 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 800552c:	4a66      	ldr	r2, [pc, #408]	@ (80056c8 <HAL_TIM_ConfigClockSource+0x220>)
 800552e:	4293      	cmp	r3, r2
 8005530:	f000 80a9 	beq.w	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 8005534:	4a64      	ldr	r2, [pc, #400]	@ (80056c8 <HAL_TIM_ConfigClockSource+0x220>)
 8005536:	4293      	cmp	r3, r2
 8005538:	f200 80ae 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 800553c:	4a63      	ldr	r2, [pc, #396]	@ (80056cc <HAL_TIM_ConfigClockSource+0x224>)
 800553e:	4293      	cmp	r3, r2
 8005540:	f000 80a1 	beq.w	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 8005544:	4a61      	ldr	r2, [pc, #388]	@ (80056cc <HAL_TIM_ConfigClockSource+0x224>)
 8005546:	4293      	cmp	r3, r2
 8005548:	f200 80a6 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 800554c:	4a60      	ldr	r2, [pc, #384]	@ (80056d0 <HAL_TIM_ConfigClockSource+0x228>)
 800554e:	4293      	cmp	r3, r2
 8005550:	f000 8099 	beq.w	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 8005554:	4a5e      	ldr	r2, [pc, #376]	@ (80056d0 <HAL_TIM_ConfigClockSource+0x228>)
 8005556:	4293      	cmp	r3, r2
 8005558:	f200 809e 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 800555c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005560:	f000 8091 	beq.w	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 8005564:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005568:	f200 8096 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 800556c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005570:	f000 8089 	beq.w	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 8005574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005578:	f200 808e 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 800557c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005580:	d03e      	beq.n	8005600 <HAL_TIM_ConfigClockSource+0x158>
 8005582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005586:	f200 8087 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558e:	f000 8086 	beq.w	800569e <HAL_TIM_ConfigClockSource+0x1f6>
 8005592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005596:	d87f      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 8005598:	2b70      	cmp	r3, #112	@ 0x70
 800559a:	d01a      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x12a>
 800559c:	2b70      	cmp	r3, #112	@ 0x70
 800559e:	d87b      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 80055a0:	2b60      	cmp	r3, #96	@ 0x60
 80055a2:	d050      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x19e>
 80055a4:	2b60      	cmp	r3, #96	@ 0x60
 80055a6:	d877      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 80055a8:	2b50      	cmp	r3, #80	@ 0x50
 80055aa:	d03c      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x17e>
 80055ac:	2b50      	cmp	r3, #80	@ 0x50
 80055ae:	d873      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 80055b0:	2b40      	cmp	r3, #64	@ 0x40
 80055b2:	d058      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x1be>
 80055b4:	2b40      	cmp	r3, #64	@ 0x40
 80055b6:	d86f      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 80055b8:	2b30      	cmp	r3, #48	@ 0x30
 80055ba:	d064      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 80055bc:	2b30      	cmp	r3, #48	@ 0x30
 80055be:	d86b      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d060      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d867      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d05c      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d05a      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x1de>
 80055d0:	e062      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055e2:	f000 f9a7 	bl	8005934 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	609a      	str	r2, [r3, #8]
      break;
 80055fe:	e04f      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005610:	f000 f990 	bl	8005934 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005622:	609a      	str	r2, [r3, #8]
      break;
 8005624:	e03c      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	461a      	mov	r2, r3
 8005634:	f000 f902 	bl	800583c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2150      	movs	r1, #80	@ 0x50
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f95b 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 8005644:	e02c      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005652:	461a      	mov	r2, r3
 8005654:	f000 f921 	bl	800589a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2160      	movs	r1, #96	@ 0x60
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f94b 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 8005664:	e01c      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005672:	461a      	mov	r2, r3
 8005674:	f000 f8e2 	bl	800583c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2140      	movs	r1, #64	@ 0x40
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f93b 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 8005684:	e00c      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f000 f932 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 8005696:	e003      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
      break;
 800569c:	e000      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800569e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	00100070 	.word	0x00100070
 80056c0:	00100060 	.word	0x00100060
 80056c4:	00100050 	.word	0x00100050
 80056c8:	00100040 	.word	0x00100040
 80056cc:	00100030 	.word	0x00100030
 80056d0:	00100020 	.word	0x00100020

080056d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005818 <TIM_Base_SetConfig+0x144>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d017      	beq.n	800571c <TIM_Base_SetConfig+0x48>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f2:	d013      	beq.n	800571c <TIM_Base_SetConfig+0x48>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a49      	ldr	r2, [pc, #292]	@ (800581c <TIM_Base_SetConfig+0x148>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0x48>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a48      	ldr	r2, [pc, #288]	@ (8005820 <TIM_Base_SetConfig+0x14c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0x48>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a47      	ldr	r2, [pc, #284]	@ (8005824 <TIM_Base_SetConfig+0x150>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0x48>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a46      	ldr	r2, [pc, #280]	@ (8005828 <TIM_Base_SetConfig+0x154>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0x48>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a45      	ldr	r2, [pc, #276]	@ (800582c <TIM_Base_SetConfig+0x158>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a39      	ldr	r2, [pc, #228]	@ (8005818 <TIM_Base_SetConfig+0x144>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d023      	beq.n	800577e <TIM_Base_SetConfig+0xaa>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573c:	d01f      	beq.n	800577e <TIM_Base_SetConfig+0xaa>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a36      	ldr	r2, [pc, #216]	@ (800581c <TIM_Base_SetConfig+0x148>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01b      	beq.n	800577e <TIM_Base_SetConfig+0xaa>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a35      	ldr	r2, [pc, #212]	@ (8005820 <TIM_Base_SetConfig+0x14c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d017      	beq.n	800577e <TIM_Base_SetConfig+0xaa>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a34      	ldr	r2, [pc, #208]	@ (8005824 <TIM_Base_SetConfig+0x150>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <TIM_Base_SetConfig+0xaa>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a33      	ldr	r2, [pc, #204]	@ (8005828 <TIM_Base_SetConfig+0x154>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00f      	beq.n	800577e <TIM_Base_SetConfig+0xaa>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a33      	ldr	r2, [pc, #204]	@ (8005830 <TIM_Base_SetConfig+0x15c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00b      	beq.n	800577e <TIM_Base_SetConfig+0xaa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a32      	ldr	r2, [pc, #200]	@ (8005834 <TIM_Base_SetConfig+0x160>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d007      	beq.n	800577e <TIM_Base_SetConfig+0xaa>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a31      	ldr	r2, [pc, #196]	@ (8005838 <TIM_Base_SetConfig+0x164>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_Base_SetConfig+0xaa>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2c      	ldr	r2, [pc, #176]	@ (800582c <TIM_Base_SetConfig+0x158>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d108      	bne.n	8005790 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a18      	ldr	r2, [pc, #96]	@ (8005818 <TIM_Base_SetConfig+0x144>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <TIM_Base_SetConfig+0x110>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a1a      	ldr	r2, [pc, #104]	@ (8005828 <TIM_Base_SetConfig+0x154>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00f      	beq.n	80057e4 <TIM_Base_SetConfig+0x110>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005830 <TIM_Base_SetConfig+0x15c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00b      	beq.n	80057e4 <TIM_Base_SetConfig+0x110>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a19      	ldr	r2, [pc, #100]	@ (8005834 <TIM_Base_SetConfig+0x160>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_Base_SetConfig+0x110>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a18      	ldr	r2, [pc, #96]	@ (8005838 <TIM_Base_SetConfig+0x164>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_Base_SetConfig+0x110>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a13      	ldr	r2, [pc, #76]	@ (800582c <TIM_Base_SetConfig+0x158>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d103      	bne.n	80057ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d105      	bne.n	800580a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	611a      	str	r2, [r3, #16]
  }
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40013400 	.word	0x40013400
 800582c:	40015000 	.word	0x40015000
 8005830:	40014000 	.word	0x40014000
 8005834:	40014400 	.word	0x40014400
 8005838:	40014800 	.word	0x40014800

0800583c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0201 	bic.w	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f023 030a 	bic.w	r3, r3, #10
 8005878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800589a:	b480      	push	{r7}
 800589c:	b087      	sub	sp, #28
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f023 0210 	bic.w	r2, r3, #16
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	031b      	lsls	r3, r3, #12
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	f043 0307 	orr.w	r3, r3, #7
 8005920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	609a      	str	r2, [r3, #8]
}
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800594e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	431a      	orrs	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4313      	orrs	r3, r2
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	609a      	str	r2, [r3, #8]
}
 8005968:	bf00      	nop
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005988:	2302      	movs	r3, #2
 800598a:	e074      	b.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a34      	ldr	r2, [pc, #208]	@ (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a33      	ldr	r2, [pc, #204]	@ (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a31      	ldr	r2, [pc, #196]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80059e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a21      	ldr	r2, [pc, #132]	@ (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d022      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0c:	d01d      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d018      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a15      	ldr	r2, [pc, #84]	@ (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a18      	ldr	r2, [pc, #96]	@ (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a11      	ldr	r2, [pc, #68]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d10c      	bne.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400
 8005a8c:	40015000 	.word	0x40015000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40014000 	.word	0x40014000

08005aa0 <memset>:
 8005aa0:	4402      	add	r2, r0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d100      	bne.n	8005aaa <memset+0xa>
 8005aa8:	4770      	bx	lr
 8005aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005aae:	e7f9      	b.n	8005aa4 <memset+0x4>

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ae8 <__libc_init_array+0x38>)
 8005ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8005aec <__libc_init_array+0x3c>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	2600      	movs	r6, #0
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8005af0 <__libc_init_array+0x40>)
 8005ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8005af4 <__libc_init_array+0x44>)
 8005ac4:	f001 f83c 	bl	8006b40 <_init>
 8005ac8:	1b64      	subs	r4, r4, r5
 8005aca:	10a4      	asrs	r4, r4, #2
 8005acc:	2600      	movs	r6, #0
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad8:	4798      	blx	r3
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae2:	4798      	blx	r3
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	08006d50 	.word	0x08006d50
 8005aec:	08006d50 	.word	0x08006d50
 8005af0:	08006d50 	.word	0x08006d50
 8005af4:	08006d54 	.word	0x08006d54

08005af8 <sin>:
 8005af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005afa:	ec53 2b10 	vmov	r2, r3, d0
 8005afe:	4826      	ldr	r0, [pc, #152]	@ (8005b98 <sin+0xa0>)
 8005b00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b04:	4281      	cmp	r1, r0
 8005b06:	d807      	bhi.n	8005b18 <sin+0x20>
 8005b08:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005b90 <sin+0x98>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	b005      	add	sp, #20
 8005b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b14:	f000 b90c 	b.w	8005d30 <__kernel_sin>
 8005b18:	4820      	ldr	r0, [pc, #128]	@ (8005b9c <sin+0xa4>)
 8005b1a:	4281      	cmp	r1, r0
 8005b1c:	d908      	bls.n	8005b30 <sin+0x38>
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	f7fa fb85 	bl	8000230 <__aeabi_dsub>
 8005b26:	ec41 0b10 	vmov	d0, r0, r1
 8005b2a:	b005      	add	sp, #20
 8005b2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b30:	4668      	mov	r0, sp
 8005b32:	f000 f9b9 	bl	8005ea8 <__ieee754_rem_pio2>
 8005b36:	f000 0003 	and.w	r0, r0, #3
 8005b3a:	2801      	cmp	r0, #1
 8005b3c:	d00c      	beq.n	8005b58 <sin+0x60>
 8005b3e:	2802      	cmp	r0, #2
 8005b40:	d011      	beq.n	8005b66 <sin+0x6e>
 8005b42:	b9e8      	cbnz	r0, 8005b80 <sin+0x88>
 8005b44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b48:	ed9d 0b00 	vldr	d0, [sp]
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f000 f8ef 	bl	8005d30 <__kernel_sin>
 8005b52:	ec51 0b10 	vmov	r0, r1, d0
 8005b56:	e7e6      	b.n	8005b26 <sin+0x2e>
 8005b58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b5c:	ed9d 0b00 	vldr	d0, [sp]
 8005b60:	f000 f81e 	bl	8005ba0 <__kernel_cos>
 8005b64:	e7f5      	b.n	8005b52 <sin+0x5a>
 8005b66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b6a:	ed9d 0b00 	vldr	d0, [sp]
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f000 f8de 	bl	8005d30 <__kernel_sin>
 8005b74:	ec53 2b10 	vmov	r2, r3, d0
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005b7e:	e7d2      	b.n	8005b26 <sin+0x2e>
 8005b80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b84:	ed9d 0b00 	vldr	d0, [sp]
 8005b88:	f000 f80a 	bl	8005ba0 <__kernel_cos>
 8005b8c:	e7f2      	b.n	8005b74 <sin+0x7c>
 8005b8e:	bf00      	nop
	...
 8005b98:	3fe921fb 	.word	0x3fe921fb
 8005b9c:	7fefffff 	.word	0x7fefffff

08005ba0 <__kernel_cos>:
 8005ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	ec57 6b10 	vmov	r6, r7, d0
 8005ba8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005bac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005bb0:	ed8d 1b00 	vstr	d1, [sp]
 8005bb4:	d206      	bcs.n	8005bc4 <__kernel_cos+0x24>
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	4639      	mov	r1, r7
 8005bba:	f7fa ff8b 	bl	8000ad4 <__aeabi_d2iz>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	f000 8088 	beq.w	8005cd4 <__kernel_cos+0x134>
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	4630      	mov	r0, r6
 8005bca:	4639      	mov	r1, r7
 8005bcc:	f7fa fce8 	bl	80005a0 <__aeabi_dmul>
 8005bd0:	4b51      	ldr	r3, [pc, #324]	@ (8005d18 <__kernel_cos+0x178>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	460d      	mov	r5, r1
 8005bd8:	f7fa fce2 	bl	80005a0 <__aeabi_dmul>
 8005bdc:	a340      	add	r3, pc, #256	@ (adr r3, 8005ce0 <__kernel_cos+0x140>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	4682      	mov	sl, r0
 8005be4:	468b      	mov	fp, r1
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa fcd9 	bl	80005a0 <__aeabi_dmul>
 8005bee:	a33e      	add	r3, pc, #248	@ (adr r3, 8005ce8 <__kernel_cos+0x148>)
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	f7fa fb1e 	bl	8000234 <__adddf3>
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	462b      	mov	r3, r5
 8005bfc:	f7fa fcd0 	bl	80005a0 <__aeabi_dmul>
 8005c00:	a33b      	add	r3, pc, #236	@ (adr r3, 8005cf0 <__kernel_cos+0x150>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fb13 	bl	8000230 <__aeabi_dsub>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	f7fa fcc7 	bl	80005a0 <__aeabi_dmul>
 8005c12:	a339      	add	r3, pc, #228	@ (adr r3, 8005cf8 <__kernel_cos+0x158>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f7fa fb0c 	bl	8000234 <__adddf3>
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	462b      	mov	r3, r5
 8005c20:	f7fa fcbe 	bl	80005a0 <__aeabi_dmul>
 8005c24:	a336      	add	r3, pc, #216	@ (adr r3, 8005d00 <__kernel_cos+0x160>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f7fa fb01 	bl	8000230 <__aeabi_dsub>
 8005c2e:	4622      	mov	r2, r4
 8005c30:	462b      	mov	r3, r5
 8005c32:	f7fa fcb5 	bl	80005a0 <__aeabi_dmul>
 8005c36:	a334      	add	r3, pc, #208	@ (adr r3, 8005d08 <__kernel_cos+0x168>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fafa 	bl	8000234 <__adddf3>
 8005c40:	4622      	mov	r2, r4
 8005c42:	462b      	mov	r3, r5
 8005c44:	f7fa fcac 	bl	80005a0 <__aeabi_dmul>
 8005c48:	4622      	mov	r2, r4
 8005c4a:	462b      	mov	r3, r5
 8005c4c:	f7fa fca8 	bl	80005a0 <__aeabi_dmul>
 8005c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c54:	4604      	mov	r4, r0
 8005c56:	460d      	mov	r5, r1
 8005c58:	4630      	mov	r0, r6
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f7fa fca0 	bl	80005a0 <__aeabi_dmul>
 8005c60:	460b      	mov	r3, r1
 8005c62:	4602      	mov	r2, r0
 8005c64:	4629      	mov	r1, r5
 8005c66:	4620      	mov	r0, r4
 8005c68:	f7fa fae2 	bl	8000230 <__aeabi_dsub>
 8005c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d1c <__kernel_cos+0x17c>)
 8005c6e:	4598      	cmp	r8, r3
 8005c70:	4606      	mov	r6, r0
 8005c72:	460f      	mov	r7, r1
 8005c74:	d810      	bhi.n	8005c98 <__kernel_cos+0xf8>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4650      	mov	r0, sl
 8005c7c:	4659      	mov	r1, fp
 8005c7e:	f7fa fad7 	bl	8000230 <__aeabi_dsub>
 8005c82:	460b      	mov	r3, r1
 8005c84:	4926      	ldr	r1, [pc, #152]	@ (8005d20 <__kernel_cos+0x180>)
 8005c86:	4602      	mov	r2, r0
 8005c88:	2000      	movs	r0, #0
 8005c8a:	f7fa fad1 	bl	8000230 <__aeabi_dsub>
 8005c8e:	ec41 0b10 	vmov	d0, r0, r1
 8005c92:	b003      	add	sp, #12
 8005c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c98:	4b22      	ldr	r3, [pc, #136]	@ (8005d24 <__kernel_cos+0x184>)
 8005c9a:	4921      	ldr	r1, [pc, #132]	@ (8005d20 <__kernel_cos+0x180>)
 8005c9c:	4598      	cmp	r8, r3
 8005c9e:	bf8c      	ite	hi
 8005ca0:	4d21      	ldrhi	r5, [pc, #132]	@ (8005d28 <__kernel_cos+0x188>)
 8005ca2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005ca6:	2400      	movs	r4, #0
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	2000      	movs	r0, #0
 8005cae:	f7fa fabf 	bl	8000230 <__aeabi_dsub>
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	462b      	mov	r3, r5
 8005cba:	4650      	mov	r0, sl
 8005cbc:	4659      	mov	r1, fp
 8005cbe:	f7fa fab7 	bl	8000230 <__aeabi_dsub>
 8005cc2:	4632      	mov	r2, r6
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	f7fa fab3 	bl	8000230 <__aeabi_dsub>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4640      	mov	r0, r8
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	e7da      	b.n	8005c8a <__kernel_cos+0xea>
 8005cd4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005d10 <__kernel_cos+0x170>
 8005cd8:	e7db      	b.n	8005c92 <__kernel_cos+0xf2>
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w
 8005ce0:	be8838d4 	.word	0xbe8838d4
 8005ce4:	bda8fae9 	.word	0xbda8fae9
 8005ce8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005cec:	3e21ee9e 	.word	0x3e21ee9e
 8005cf0:	809c52ad 	.word	0x809c52ad
 8005cf4:	3e927e4f 	.word	0x3e927e4f
 8005cf8:	19cb1590 	.word	0x19cb1590
 8005cfc:	3efa01a0 	.word	0x3efa01a0
 8005d00:	16c15177 	.word	0x16c15177
 8005d04:	3f56c16c 	.word	0x3f56c16c
 8005d08:	5555554c 	.word	0x5555554c
 8005d0c:	3fa55555 	.word	0x3fa55555
 8005d10:	00000000 	.word	0x00000000
 8005d14:	3ff00000 	.word	0x3ff00000
 8005d18:	3fe00000 	.word	0x3fe00000
 8005d1c:	3fd33332 	.word	0x3fd33332
 8005d20:	3ff00000 	.word	0x3ff00000
 8005d24:	3fe90000 	.word	0x3fe90000
 8005d28:	3fd20000 	.word	0x3fd20000
 8005d2c:	00000000 	.word	0x00000000

08005d30 <__kernel_sin>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	ec55 4b10 	vmov	r4, r5, d0
 8005d38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005d42:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005d46:	4680      	mov	r8, r0
 8005d48:	d205      	bcs.n	8005d56 <__kernel_sin+0x26>
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	f7fa fec1 	bl	8000ad4 <__aeabi_d2iz>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d052      	beq.n	8005dfc <__kernel_sin+0xcc>
 8005d56:	4622      	mov	r2, r4
 8005d58:	462b      	mov	r3, r5
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa fc1f 	bl	80005a0 <__aeabi_dmul>
 8005d62:	4682      	mov	sl, r0
 8005d64:	468b      	mov	fp, r1
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	f7fa fc17 	bl	80005a0 <__aeabi_dmul>
 8005d72:	a342      	add	r3, pc, #264	@ (adr r3, 8005e7c <__kernel_sin+0x14c>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	e9cd 0100 	strd	r0, r1, [sp]
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	4659      	mov	r1, fp
 8005d80:	f7fa fc0e 	bl	80005a0 <__aeabi_dmul>
 8005d84:	a33f      	add	r3, pc, #252	@ (adr r3, 8005e84 <__kernel_sin+0x154>)
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f7fa fa51 	bl	8000230 <__aeabi_dsub>
 8005d8e:	4652      	mov	r2, sl
 8005d90:	465b      	mov	r3, fp
 8005d92:	f7fa fc05 	bl	80005a0 <__aeabi_dmul>
 8005d96:	a33d      	add	r3, pc, #244	@ (adr r3, 8005e8c <__kernel_sin+0x15c>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f7fa fa4a 	bl	8000234 <__adddf3>
 8005da0:	4652      	mov	r2, sl
 8005da2:	465b      	mov	r3, fp
 8005da4:	f7fa fbfc 	bl	80005a0 <__aeabi_dmul>
 8005da8:	a33a      	add	r3, pc, #232	@ (adr r3, 8005e94 <__kernel_sin+0x164>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7fa fa3f 	bl	8000230 <__aeabi_dsub>
 8005db2:	4652      	mov	r2, sl
 8005db4:	465b      	mov	r3, fp
 8005db6:	f7fa fbf3 	bl	80005a0 <__aeabi_dmul>
 8005dba:	a338      	add	r3, pc, #224	@ (adr r3, 8005e9c <__kernel_sin+0x16c>)
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f7fa fa38 	bl	8000234 <__adddf3>
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	460f      	mov	r7, r1
 8005dc8:	f1b8 0f00 	cmp.w	r8, #0
 8005dcc:	d11b      	bne.n	8005e06 <__kernel_sin+0xd6>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	f7fa fbe3 	bl	80005a0 <__aeabi_dmul>
 8005dda:	a325      	add	r3, pc, #148	@ (adr r3, 8005e70 <__kernel_sin+0x140>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa fa26 	bl	8000230 <__aeabi_dsub>
 8005de4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005de8:	f7fa fbda 	bl	80005a0 <__aeabi_dmul>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4620      	mov	r0, r4
 8005df2:	4629      	mov	r1, r5
 8005df4:	f7fa fa1e 	bl	8000234 <__adddf3>
 8005df8:	4604      	mov	r4, r0
 8005dfa:	460d      	mov	r5, r1
 8005dfc:	ec45 4b10 	vmov	d0, r4, r5
 8005e00:	b005      	add	sp, #20
 8005e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e78 <__kernel_sin+0x148>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f7fa fbc7 	bl	80005a0 <__aeabi_dmul>
 8005e12:	4632      	mov	r2, r6
 8005e14:	4680      	mov	r8, r0
 8005e16:	4689      	mov	r9, r1
 8005e18:	463b      	mov	r3, r7
 8005e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e1e:	f7fa fbbf 	bl	80005a0 <__aeabi_dmul>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4640      	mov	r0, r8
 8005e28:	4649      	mov	r1, r9
 8005e2a:	f7fa fa01 	bl	8000230 <__aeabi_dsub>
 8005e2e:	4652      	mov	r2, sl
 8005e30:	465b      	mov	r3, fp
 8005e32:	f7fa fbb5 	bl	80005a0 <__aeabi_dmul>
 8005e36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e3a:	f7fa f9f9 	bl	8000230 <__aeabi_dsub>
 8005e3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005e70 <__kernel_sin+0x140>)
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	4606      	mov	r6, r0
 8005e46:	460f      	mov	r7, r1
 8005e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e4c:	f7fa fba8 	bl	80005a0 <__aeabi_dmul>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4630      	mov	r0, r6
 8005e56:	4639      	mov	r1, r7
 8005e58:	f7fa f9ec 	bl	8000234 <__adddf3>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4620      	mov	r0, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa f9e4 	bl	8000230 <__aeabi_dsub>
 8005e68:	e7c6      	b.n	8005df8 <__kernel_sin+0xc8>
 8005e6a:	bf00      	nop
 8005e6c:	f3af 8000 	nop.w
 8005e70:	55555549 	.word	0x55555549
 8005e74:	3fc55555 	.word	0x3fc55555
 8005e78:	3fe00000 	.word	0x3fe00000
 8005e7c:	5acfd57c 	.word	0x5acfd57c
 8005e80:	3de5d93a 	.word	0x3de5d93a
 8005e84:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e88:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e8c:	57b1fe7d 	.word	0x57b1fe7d
 8005e90:	3ec71de3 	.word	0x3ec71de3
 8005e94:	19c161d5 	.word	0x19c161d5
 8005e98:	3f2a01a0 	.word	0x3f2a01a0
 8005e9c:	1110f8a6 	.word	0x1110f8a6
 8005ea0:	3f811111 	.word	0x3f811111
 8005ea4:	00000000 	.word	0x00000000

08005ea8 <__ieee754_rem_pio2>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	ec57 6b10 	vmov	r6, r7, d0
 8005eb0:	4bc5      	ldr	r3, [pc, #788]	@ (80061c8 <__ieee754_rem_pio2+0x320>)
 8005eb2:	b08d      	sub	sp, #52	@ 0x34
 8005eb4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005eb8:	4598      	cmp	r8, r3
 8005eba:	4604      	mov	r4, r0
 8005ebc:	9704      	str	r7, [sp, #16]
 8005ebe:	d807      	bhi.n	8005ed0 <__ieee754_rem_pio2+0x28>
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	ed80 0b00 	vstr	d0, [r0]
 8005ec8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005ecc:	2500      	movs	r5, #0
 8005ece:	e028      	b.n	8005f22 <__ieee754_rem_pio2+0x7a>
 8005ed0:	4bbe      	ldr	r3, [pc, #760]	@ (80061cc <__ieee754_rem_pio2+0x324>)
 8005ed2:	4598      	cmp	r8, r3
 8005ed4:	d878      	bhi.n	8005fc8 <__ieee754_rem_pio2+0x120>
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	4dbd      	ldr	r5, [pc, #756]	@ (80061d0 <__ieee754_rem_pio2+0x328>)
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	4630      	mov	r0, r6
 8005ede:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006190 <__ieee754_rem_pio2+0x2e8>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	dd38      	ble.n	8005f5a <__ieee754_rem_pio2+0xb2>
 8005ee8:	f7fa f9a2 	bl	8000230 <__aeabi_dsub>
 8005eec:	45a8      	cmp	r8, r5
 8005eee:	4606      	mov	r6, r0
 8005ef0:	460f      	mov	r7, r1
 8005ef2:	d01a      	beq.n	8005f2a <__ieee754_rem_pio2+0x82>
 8005ef4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006198 <__ieee754_rem_pio2+0x2f0>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f7fa f999 	bl	8000230 <__aeabi_dsub>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4680      	mov	r8, r0
 8005f04:	4689      	mov	r9, r1
 8005f06:	4630      	mov	r0, r6
 8005f08:	4639      	mov	r1, r7
 8005f0a:	f7fa f991 	bl	8000230 <__aeabi_dsub>
 8005f0e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006198 <__ieee754_rem_pio2+0x2f0>)
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f7fa f98c 	bl	8000230 <__aeabi_dsub>
 8005f18:	e9c4 8900 	strd	r8, r9, [r4]
 8005f1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f20:	2501      	movs	r5, #1
 8005f22:	4628      	mov	r0, r5
 8005f24:	b00d      	add	sp, #52	@ 0x34
 8005f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2a:	a39d      	add	r3, pc, #628	@ (adr r3, 80061a0 <__ieee754_rem_pio2+0x2f8>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f7fa f97e 	bl	8000230 <__aeabi_dsub>
 8005f34:	a39c      	add	r3, pc, #624	@ (adr r3, 80061a8 <__ieee754_rem_pio2+0x300>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	460f      	mov	r7, r1
 8005f3e:	f7fa f977 	bl	8000230 <__aeabi_dsub>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4680      	mov	r8, r0
 8005f48:	4689      	mov	r9, r1
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	4639      	mov	r1, r7
 8005f4e:	f7fa f96f 	bl	8000230 <__aeabi_dsub>
 8005f52:	a395      	add	r3, pc, #596	@ (adr r3, 80061a8 <__ieee754_rem_pio2+0x300>)
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	e7dc      	b.n	8005f14 <__ieee754_rem_pio2+0x6c>
 8005f5a:	f7fa f96b 	bl	8000234 <__adddf3>
 8005f5e:	45a8      	cmp	r8, r5
 8005f60:	4606      	mov	r6, r0
 8005f62:	460f      	mov	r7, r1
 8005f64:	d018      	beq.n	8005f98 <__ieee754_rem_pio2+0xf0>
 8005f66:	a38c      	add	r3, pc, #560	@ (adr r3, 8006198 <__ieee754_rem_pio2+0x2f0>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f7fa f962 	bl	8000234 <__adddf3>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4680      	mov	r8, r0
 8005f76:	4689      	mov	r9, r1
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7fa f958 	bl	8000230 <__aeabi_dsub>
 8005f80:	a385      	add	r3, pc, #532	@ (adr r3, 8006198 <__ieee754_rem_pio2+0x2f0>)
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f7fa f955 	bl	8000234 <__adddf3>
 8005f8a:	f04f 35ff 	mov.w	r5, #4294967295
 8005f8e:	e9c4 8900 	strd	r8, r9, [r4]
 8005f92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f96:	e7c4      	b.n	8005f22 <__ieee754_rem_pio2+0x7a>
 8005f98:	a381      	add	r3, pc, #516	@ (adr r3, 80061a0 <__ieee754_rem_pio2+0x2f8>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa f949 	bl	8000234 <__adddf3>
 8005fa2:	a381      	add	r3, pc, #516	@ (adr r3, 80061a8 <__ieee754_rem_pio2+0x300>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	4606      	mov	r6, r0
 8005faa:	460f      	mov	r7, r1
 8005fac:	f7fa f942 	bl	8000234 <__adddf3>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	4689      	mov	r9, r1
 8005fb8:	4630      	mov	r0, r6
 8005fba:	4639      	mov	r1, r7
 8005fbc:	f7fa f938 	bl	8000230 <__aeabi_dsub>
 8005fc0:	a379      	add	r3, pc, #484	@ (adr r3, 80061a8 <__ieee754_rem_pio2+0x300>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	e7de      	b.n	8005f86 <__ieee754_rem_pio2+0xde>
 8005fc8:	4b82      	ldr	r3, [pc, #520]	@ (80061d4 <__ieee754_rem_pio2+0x32c>)
 8005fca:	4598      	cmp	r8, r3
 8005fcc:	f200 80d1 	bhi.w	8006172 <__ieee754_rem_pio2+0x2ca>
 8005fd0:	f000 f966 	bl	80062a0 <fabs>
 8005fd4:	ec57 6b10 	vmov	r6, r7, d0
 8005fd8:	a375      	add	r3, pc, #468	@ (adr r3, 80061b0 <__ieee754_rem_pio2+0x308>)
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	4630      	mov	r0, r6
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	f7fa fadd 	bl	80005a0 <__aeabi_dmul>
 8005fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80061d8 <__ieee754_rem_pio2+0x330>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f7fa f923 	bl	8000234 <__adddf3>
 8005fee:	f7fa fd71 	bl	8000ad4 <__aeabi_d2iz>
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	f7fa fa6a 	bl	80004cc <__aeabi_i2d>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006000:	a363      	add	r3, pc, #396	@ (adr r3, 8006190 <__ieee754_rem_pio2+0x2e8>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa facb 	bl	80005a0 <__aeabi_dmul>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4630      	mov	r0, r6
 8006010:	4639      	mov	r1, r7
 8006012:	f7fa f90d 	bl	8000230 <__aeabi_dsub>
 8006016:	a360      	add	r3, pc, #384	@ (adr r3, 8006198 <__ieee754_rem_pio2+0x2f0>)
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	4682      	mov	sl, r0
 800601e:	468b      	mov	fp, r1
 8006020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006024:	f7fa fabc 	bl	80005a0 <__aeabi_dmul>
 8006028:	2d1f      	cmp	r5, #31
 800602a:	4606      	mov	r6, r0
 800602c:	460f      	mov	r7, r1
 800602e:	dc0c      	bgt.n	800604a <__ieee754_rem_pio2+0x1a2>
 8006030:	4b6a      	ldr	r3, [pc, #424]	@ (80061dc <__ieee754_rem_pio2+0x334>)
 8006032:	1e6a      	subs	r2, r5, #1
 8006034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006038:	4543      	cmp	r3, r8
 800603a:	d006      	beq.n	800604a <__ieee754_rem_pio2+0x1a2>
 800603c:	4632      	mov	r2, r6
 800603e:	463b      	mov	r3, r7
 8006040:	4650      	mov	r0, sl
 8006042:	4659      	mov	r1, fp
 8006044:	f7fa f8f4 	bl	8000230 <__aeabi_dsub>
 8006048:	e00e      	b.n	8006068 <__ieee754_rem_pio2+0x1c0>
 800604a:	463b      	mov	r3, r7
 800604c:	4632      	mov	r2, r6
 800604e:	4650      	mov	r0, sl
 8006050:	4659      	mov	r1, fp
 8006052:	f7fa f8ed 	bl	8000230 <__aeabi_dsub>
 8006056:	ea4f 5328 	mov.w	r3, r8, asr #20
 800605a:	9305      	str	r3, [sp, #20]
 800605c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006060:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006064:	2b10      	cmp	r3, #16
 8006066:	dc02      	bgt.n	800606e <__ieee754_rem_pio2+0x1c6>
 8006068:	e9c4 0100 	strd	r0, r1, [r4]
 800606c:	e039      	b.n	80060e2 <__ieee754_rem_pio2+0x23a>
 800606e:	a34c      	add	r3, pc, #304	@ (adr r3, 80061a0 <__ieee754_rem_pio2+0x2f8>)
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006078:	f7fa fa92 	bl	80005a0 <__aeabi_dmul>
 800607c:	4606      	mov	r6, r0
 800607e:	460f      	mov	r7, r1
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4650      	mov	r0, sl
 8006086:	4659      	mov	r1, fp
 8006088:	f7fa f8d2 	bl	8000230 <__aeabi_dsub>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4680      	mov	r8, r0
 8006092:	4689      	mov	r9, r1
 8006094:	4650      	mov	r0, sl
 8006096:	4659      	mov	r1, fp
 8006098:	f7fa f8ca 	bl	8000230 <__aeabi_dsub>
 800609c:	4632      	mov	r2, r6
 800609e:	463b      	mov	r3, r7
 80060a0:	f7fa f8c6 	bl	8000230 <__aeabi_dsub>
 80060a4:	a340      	add	r3, pc, #256	@ (adr r3, 80061a8 <__ieee754_rem_pio2+0x300>)
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	4606      	mov	r6, r0
 80060ac:	460f      	mov	r7, r1
 80060ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060b2:	f7fa fa75 	bl	80005a0 <__aeabi_dmul>
 80060b6:	4632      	mov	r2, r6
 80060b8:	463b      	mov	r3, r7
 80060ba:	f7fa f8b9 	bl	8000230 <__aeabi_dsub>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4606      	mov	r6, r0
 80060c4:	460f      	mov	r7, r1
 80060c6:	4640      	mov	r0, r8
 80060c8:	4649      	mov	r1, r9
 80060ca:	f7fa f8b1 	bl	8000230 <__aeabi_dsub>
 80060ce:	9a05      	ldr	r2, [sp, #20]
 80060d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b31      	cmp	r3, #49	@ 0x31
 80060d8:	dc20      	bgt.n	800611c <__ieee754_rem_pio2+0x274>
 80060da:	e9c4 0100 	strd	r0, r1, [r4]
 80060de:	46c2      	mov	sl, r8
 80060e0:	46cb      	mov	fp, r9
 80060e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80060e6:	4650      	mov	r0, sl
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	4659      	mov	r1, fp
 80060ee:	f7fa f89f 	bl	8000230 <__aeabi_dsub>
 80060f2:	463b      	mov	r3, r7
 80060f4:	4632      	mov	r2, r6
 80060f6:	f7fa f89b 	bl	8000230 <__aeabi_dsub>
 80060fa:	9b04      	ldr	r3, [sp, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006102:	f6bf af0e 	bge.w	8005f22 <__ieee754_rem_pio2+0x7a>
 8006106:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800610a:	6063      	str	r3, [r4, #4]
 800610c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006110:	f8c4 8000 	str.w	r8, [r4]
 8006114:	60a0      	str	r0, [r4, #8]
 8006116:	60e3      	str	r3, [r4, #12]
 8006118:	426d      	negs	r5, r5
 800611a:	e702      	b.n	8005f22 <__ieee754_rem_pio2+0x7a>
 800611c:	a326      	add	r3, pc, #152	@ (adr r3, 80061b8 <__ieee754_rem_pio2+0x310>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006126:	f7fa fa3b 	bl	80005a0 <__aeabi_dmul>
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	f7fa f87b 	bl	8000230 <__aeabi_dsub>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4682      	mov	sl, r0
 8006140:	468b      	mov	fp, r1
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7fa f873 	bl	8000230 <__aeabi_dsub>
 800614a:	4632      	mov	r2, r6
 800614c:	463b      	mov	r3, r7
 800614e:	f7fa f86f 	bl	8000230 <__aeabi_dsub>
 8006152:	a31b      	add	r3, pc, #108	@ (adr r3, 80061c0 <__ieee754_rem_pio2+0x318>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	4606      	mov	r6, r0
 800615a:	460f      	mov	r7, r1
 800615c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006160:	f7fa fa1e 	bl	80005a0 <__aeabi_dmul>
 8006164:	4632      	mov	r2, r6
 8006166:	463b      	mov	r3, r7
 8006168:	f7fa f862 	bl	8000230 <__aeabi_dsub>
 800616c:	4606      	mov	r6, r0
 800616e:	460f      	mov	r7, r1
 8006170:	e764      	b.n	800603c <__ieee754_rem_pio2+0x194>
 8006172:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <__ieee754_rem_pio2+0x338>)
 8006174:	4598      	cmp	r8, r3
 8006176:	d935      	bls.n	80061e4 <__ieee754_rem_pio2+0x33c>
 8006178:	4632      	mov	r2, r6
 800617a:	463b      	mov	r3, r7
 800617c:	4630      	mov	r0, r6
 800617e:	4639      	mov	r1, r7
 8006180:	f7fa f856 	bl	8000230 <__aeabi_dsub>
 8006184:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006188:	e9c4 0100 	strd	r0, r1, [r4]
 800618c:	e69e      	b.n	8005ecc <__ieee754_rem_pio2+0x24>
 800618e:	bf00      	nop
 8006190:	54400000 	.word	0x54400000
 8006194:	3ff921fb 	.word	0x3ff921fb
 8006198:	1a626331 	.word	0x1a626331
 800619c:	3dd0b461 	.word	0x3dd0b461
 80061a0:	1a600000 	.word	0x1a600000
 80061a4:	3dd0b461 	.word	0x3dd0b461
 80061a8:	2e037073 	.word	0x2e037073
 80061ac:	3ba3198a 	.word	0x3ba3198a
 80061b0:	6dc9c883 	.word	0x6dc9c883
 80061b4:	3fe45f30 	.word	0x3fe45f30
 80061b8:	2e000000 	.word	0x2e000000
 80061bc:	3ba3198a 	.word	0x3ba3198a
 80061c0:	252049c1 	.word	0x252049c1
 80061c4:	397b839a 	.word	0x397b839a
 80061c8:	3fe921fb 	.word	0x3fe921fb
 80061cc:	4002d97b 	.word	0x4002d97b
 80061d0:	3ff921fb 	.word	0x3ff921fb
 80061d4:	413921fb 	.word	0x413921fb
 80061d8:	3fe00000 	.word	0x3fe00000
 80061dc:	08006b70 	.word	0x08006b70
 80061e0:	7fefffff 	.word	0x7fefffff
 80061e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80061e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80061ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80061f0:	4630      	mov	r0, r6
 80061f2:	460f      	mov	r7, r1
 80061f4:	f7fa fc6e 	bl	8000ad4 <__aeabi_d2iz>
 80061f8:	f7fa f968 	bl	80004cc <__aeabi_i2d>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4630      	mov	r0, r6
 8006202:	4639      	mov	r1, r7
 8006204:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006208:	f7fa f812 	bl	8000230 <__aeabi_dsub>
 800620c:	4b22      	ldr	r3, [pc, #136]	@ (8006298 <__ieee754_rem_pio2+0x3f0>)
 800620e:	2200      	movs	r2, #0
 8006210:	f7fa f9c6 	bl	80005a0 <__aeabi_dmul>
 8006214:	460f      	mov	r7, r1
 8006216:	4606      	mov	r6, r0
 8006218:	f7fa fc5c 	bl	8000ad4 <__aeabi_d2iz>
 800621c:	f7fa f956 	bl	80004cc <__aeabi_i2d>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4630      	mov	r0, r6
 8006226:	4639      	mov	r1, r7
 8006228:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800622c:	f7fa f800 	bl	8000230 <__aeabi_dsub>
 8006230:	4b19      	ldr	r3, [pc, #100]	@ (8006298 <__ieee754_rem_pio2+0x3f0>)
 8006232:	2200      	movs	r2, #0
 8006234:	f7fa f9b4 	bl	80005a0 <__aeabi_dmul>
 8006238:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800623c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006240:	f04f 0803 	mov.w	r8, #3
 8006244:	2600      	movs	r6, #0
 8006246:	2700      	movs	r7, #0
 8006248:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800624c:	4632      	mov	r2, r6
 800624e:	463b      	mov	r3, r7
 8006250:	46c2      	mov	sl, r8
 8006252:	f108 38ff 	add.w	r8, r8, #4294967295
 8006256:	f7fa fc0b 	bl	8000a70 <__aeabi_dcmpeq>
 800625a:	2800      	cmp	r0, #0
 800625c:	d1f4      	bne.n	8006248 <__ieee754_rem_pio2+0x3a0>
 800625e:	4b0f      	ldr	r3, [pc, #60]	@ (800629c <__ieee754_rem_pio2+0x3f4>)
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	2302      	movs	r3, #2
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	462a      	mov	r2, r5
 8006268:	4653      	mov	r3, sl
 800626a:	4621      	mov	r1, r4
 800626c:	a806      	add	r0, sp, #24
 800626e:	f000 f81f 	bl	80062b0 <__kernel_rem_pio2>
 8006272:	9b04      	ldr	r3, [sp, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	4605      	mov	r5, r0
 8006278:	f6bf ae53 	bge.w	8005f22 <__ieee754_rem_pio2+0x7a>
 800627c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006280:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006284:	e9c4 2300 	strd	r2, r3, [r4]
 8006288:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800628c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006290:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006294:	e740      	b.n	8006118 <__ieee754_rem_pio2+0x270>
 8006296:	bf00      	nop
 8006298:	41700000 	.word	0x41700000
 800629c:	08006bf0 	.word	0x08006bf0

080062a0 <fabs>:
 80062a0:	ec51 0b10 	vmov	r0, r1, d0
 80062a4:	4602      	mov	r2, r0
 80062a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062aa:	ec43 2b10 	vmov	d0, r2, r3
 80062ae:	4770      	bx	lr

080062b0 <__kernel_rem_pio2>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	ed2d 8b02 	vpush	{d8}
 80062b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80062bc:	f112 0f14 	cmn.w	r2, #20
 80062c0:	9306      	str	r3, [sp, #24]
 80062c2:	9104      	str	r1, [sp, #16]
 80062c4:	4bc2      	ldr	r3, [pc, #776]	@ (80065d0 <__kernel_rem_pio2+0x320>)
 80062c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80062c8:	9008      	str	r0, [sp, #32]
 80062ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	9b06      	ldr	r3, [sp, #24]
 80062d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062d6:	bfa8      	it	ge
 80062d8:	1ed4      	subge	r4, r2, #3
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	bfb2      	itee	lt
 80062de:	2400      	movlt	r4, #0
 80062e0:	2318      	movge	r3, #24
 80062e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80062e6:	f06f 0317 	mvn.w	r3, #23
 80062ea:	fb04 3303 	mla	r3, r4, r3, r3
 80062ee:	eb03 0b02 	add.w	fp, r3, r2
 80062f2:	9b00      	ldr	r3, [sp, #0]
 80062f4:	9a05      	ldr	r2, [sp, #20]
 80062f6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80065c0 <__kernel_rem_pio2+0x310>
 80062fa:	eb03 0802 	add.w	r8, r3, r2
 80062fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006300:	1aa7      	subs	r7, r4, r2
 8006302:	ae20      	add	r6, sp, #128	@ 0x80
 8006304:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006308:	2500      	movs	r5, #0
 800630a:	4545      	cmp	r5, r8
 800630c:	dd12      	ble.n	8006334 <__kernel_rem_pio2+0x84>
 800630e:	9b06      	ldr	r3, [sp, #24]
 8006310:	aa20      	add	r2, sp, #128	@ 0x80
 8006312:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006316:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800631a:	2700      	movs	r7, #0
 800631c:	9b00      	ldr	r3, [sp, #0]
 800631e:	429f      	cmp	r7, r3
 8006320:	dc2e      	bgt.n	8006380 <__kernel_rem_pio2+0xd0>
 8006322:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80065c0 <__kernel_rem_pio2+0x310>
 8006326:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800632a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800632e:	46a8      	mov	r8, r5
 8006330:	2600      	movs	r6, #0
 8006332:	e01b      	b.n	800636c <__kernel_rem_pio2+0xbc>
 8006334:	42ef      	cmn	r7, r5
 8006336:	d407      	bmi.n	8006348 <__kernel_rem_pio2+0x98>
 8006338:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800633c:	f7fa f8c6 	bl	80004cc <__aeabi_i2d>
 8006340:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006344:	3501      	adds	r5, #1
 8006346:	e7e0      	b.n	800630a <__kernel_rem_pio2+0x5a>
 8006348:	ec51 0b18 	vmov	r0, r1, d8
 800634c:	e7f8      	b.n	8006340 <__kernel_rem_pio2+0x90>
 800634e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8006352:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006356:	f7fa f923 	bl	80005a0 <__aeabi_dmul>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006362:	f7f9 ff67 	bl	8000234 <__adddf3>
 8006366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800636a:	3601      	adds	r6, #1
 800636c:	9b05      	ldr	r3, [sp, #20]
 800636e:	429e      	cmp	r6, r3
 8006370:	dded      	ble.n	800634e <__kernel_rem_pio2+0x9e>
 8006372:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006376:	3701      	adds	r7, #1
 8006378:	ecaa 7b02 	vstmia	sl!, {d7}
 800637c:	3508      	adds	r5, #8
 800637e:	e7cd      	b.n	800631c <__kernel_rem_pio2+0x6c>
 8006380:	9b00      	ldr	r3, [sp, #0]
 8006382:	f8dd 8000 	ldr.w	r8, [sp]
 8006386:	aa0c      	add	r2, sp, #48	@ 0x30
 8006388:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800638c:	930a      	str	r3, [sp, #40]	@ 0x28
 800638e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006390:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006394:	9309      	str	r3, [sp, #36]	@ 0x24
 8006396:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800639a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800639c:	ab98      	add	r3, sp, #608	@ 0x260
 800639e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80063a2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80063a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80063aa:	ac0c      	add	r4, sp, #48	@ 0x30
 80063ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80063ae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80063b2:	46a1      	mov	r9, r4
 80063b4:	46c2      	mov	sl, r8
 80063b6:	f1ba 0f00 	cmp.w	sl, #0
 80063ba:	dc77      	bgt.n	80064ac <__kernel_rem_pio2+0x1fc>
 80063bc:	4658      	mov	r0, fp
 80063be:	ed9d 0b02 	vldr	d0, [sp, #8]
 80063c2:	f000 fac5 	bl	8006950 <scalbn>
 80063c6:	ec57 6b10 	vmov	r6, r7, d0
 80063ca:	2200      	movs	r2, #0
 80063cc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80063d0:	4630      	mov	r0, r6
 80063d2:	4639      	mov	r1, r7
 80063d4:	f7fa f8e4 	bl	80005a0 <__aeabi_dmul>
 80063d8:	ec41 0b10 	vmov	d0, r0, r1
 80063dc:	f000 fb34 	bl	8006a48 <floor>
 80063e0:	4b7c      	ldr	r3, [pc, #496]	@ (80065d4 <__kernel_rem_pio2+0x324>)
 80063e2:	ec51 0b10 	vmov	r0, r1, d0
 80063e6:	2200      	movs	r2, #0
 80063e8:	f7fa f8da 	bl	80005a0 <__aeabi_dmul>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4630      	mov	r0, r6
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7f9 ff1c 	bl	8000230 <__aeabi_dsub>
 80063f8:	460f      	mov	r7, r1
 80063fa:	4606      	mov	r6, r0
 80063fc:	f7fa fb6a 	bl	8000ad4 <__aeabi_d2iz>
 8006400:	9002      	str	r0, [sp, #8]
 8006402:	f7fa f863 	bl	80004cc <__aeabi_i2d>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4630      	mov	r0, r6
 800640c:	4639      	mov	r1, r7
 800640e:	f7f9 ff0f 	bl	8000230 <__aeabi_dsub>
 8006412:	f1bb 0f00 	cmp.w	fp, #0
 8006416:	4606      	mov	r6, r0
 8006418:	460f      	mov	r7, r1
 800641a:	dd6c      	ble.n	80064f6 <__kernel_rem_pio2+0x246>
 800641c:	f108 31ff 	add.w	r1, r8, #4294967295
 8006420:	ab0c      	add	r3, sp, #48	@ 0x30
 8006422:	9d02      	ldr	r5, [sp, #8]
 8006424:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006428:	f1cb 0018 	rsb	r0, fp, #24
 800642c:	fa43 f200 	asr.w	r2, r3, r0
 8006430:	4415      	add	r5, r2
 8006432:	4082      	lsls	r2, r0
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	aa0c      	add	r2, sp, #48	@ 0x30
 8006438:	9502      	str	r5, [sp, #8]
 800643a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800643e:	f1cb 0217 	rsb	r2, fp, #23
 8006442:	fa43 f902 	asr.w	r9, r3, r2
 8006446:	f1b9 0f00 	cmp.w	r9, #0
 800644a:	dd64      	ble.n	8006516 <__kernel_rem_pio2+0x266>
 800644c:	9b02      	ldr	r3, [sp, #8]
 800644e:	2200      	movs	r2, #0
 8006450:	3301      	adds	r3, #1
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	4615      	mov	r5, r2
 8006456:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800645a:	4590      	cmp	r8, r2
 800645c:	f300 80a1 	bgt.w	80065a2 <__kernel_rem_pio2+0x2f2>
 8006460:	f1bb 0f00 	cmp.w	fp, #0
 8006464:	dd07      	ble.n	8006476 <__kernel_rem_pio2+0x1c6>
 8006466:	f1bb 0f01 	cmp.w	fp, #1
 800646a:	f000 80c1 	beq.w	80065f0 <__kernel_rem_pio2+0x340>
 800646e:	f1bb 0f02 	cmp.w	fp, #2
 8006472:	f000 80c8 	beq.w	8006606 <__kernel_rem_pio2+0x356>
 8006476:	f1b9 0f02 	cmp.w	r9, #2
 800647a:	d14c      	bne.n	8006516 <__kernel_rem_pio2+0x266>
 800647c:	4632      	mov	r2, r6
 800647e:	463b      	mov	r3, r7
 8006480:	4955      	ldr	r1, [pc, #340]	@ (80065d8 <__kernel_rem_pio2+0x328>)
 8006482:	2000      	movs	r0, #0
 8006484:	f7f9 fed4 	bl	8000230 <__aeabi_dsub>
 8006488:	4606      	mov	r6, r0
 800648a:	460f      	mov	r7, r1
 800648c:	2d00      	cmp	r5, #0
 800648e:	d042      	beq.n	8006516 <__kernel_rem_pio2+0x266>
 8006490:	4658      	mov	r0, fp
 8006492:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80065c8 <__kernel_rem_pio2+0x318>
 8006496:	f000 fa5b 	bl	8006950 <scalbn>
 800649a:	4630      	mov	r0, r6
 800649c:	4639      	mov	r1, r7
 800649e:	ec53 2b10 	vmov	r2, r3, d0
 80064a2:	f7f9 fec5 	bl	8000230 <__aeabi_dsub>
 80064a6:	4606      	mov	r6, r0
 80064a8:	460f      	mov	r7, r1
 80064aa:	e034      	b.n	8006516 <__kernel_rem_pio2+0x266>
 80064ac:	4b4b      	ldr	r3, [pc, #300]	@ (80065dc <__kernel_rem_pio2+0x32c>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b4:	f7fa f874 	bl	80005a0 <__aeabi_dmul>
 80064b8:	f7fa fb0c 	bl	8000ad4 <__aeabi_d2iz>
 80064bc:	f7fa f806 	bl	80004cc <__aeabi_i2d>
 80064c0:	4b47      	ldr	r3, [pc, #284]	@ (80065e0 <__kernel_rem_pio2+0x330>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	4606      	mov	r6, r0
 80064c6:	460f      	mov	r7, r1
 80064c8:	f7fa f86a 	bl	80005a0 <__aeabi_dmul>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d4:	f7f9 feac 	bl	8000230 <__aeabi_dsub>
 80064d8:	f7fa fafc 	bl	8000ad4 <__aeabi_d2iz>
 80064dc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80064e0:	f849 0b04 	str.w	r0, [r9], #4
 80064e4:	4639      	mov	r1, r7
 80064e6:	4630      	mov	r0, r6
 80064e8:	f7f9 fea4 	bl	8000234 <__adddf3>
 80064ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f4:	e75f      	b.n	80063b6 <__kernel_rem_pio2+0x106>
 80064f6:	d107      	bne.n	8006508 <__kernel_rem_pio2+0x258>
 80064f8:	f108 33ff 	add.w	r3, r8, #4294967295
 80064fc:	aa0c      	add	r2, sp, #48	@ 0x30
 80064fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006502:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006506:	e79e      	b.n	8006446 <__kernel_rem_pio2+0x196>
 8006508:	4b36      	ldr	r3, [pc, #216]	@ (80065e4 <__kernel_rem_pio2+0x334>)
 800650a:	2200      	movs	r2, #0
 800650c:	f7fa face 	bl	8000aac <__aeabi_dcmpge>
 8006510:	2800      	cmp	r0, #0
 8006512:	d143      	bne.n	800659c <__kernel_rem_pio2+0x2ec>
 8006514:	4681      	mov	r9, r0
 8006516:	2200      	movs	r2, #0
 8006518:	2300      	movs	r3, #0
 800651a:	4630      	mov	r0, r6
 800651c:	4639      	mov	r1, r7
 800651e:	f7fa faa7 	bl	8000a70 <__aeabi_dcmpeq>
 8006522:	2800      	cmp	r0, #0
 8006524:	f000 80c1 	beq.w	80066aa <__kernel_rem_pio2+0x3fa>
 8006528:	f108 33ff 	add.w	r3, r8, #4294967295
 800652c:	2200      	movs	r2, #0
 800652e:	9900      	ldr	r1, [sp, #0]
 8006530:	428b      	cmp	r3, r1
 8006532:	da70      	bge.n	8006616 <__kernel_rem_pio2+0x366>
 8006534:	2a00      	cmp	r2, #0
 8006536:	f000 808b 	beq.w	8006650 <__kernel_rem_pio2+0x3a0>
 800653a:	f108 38ff 	add.w	r8, r8, #4294967295
 800653e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006540:	f1ab 0b18 	sub.w	fp, fp, #24
 8006544:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0f6      	beq.n	800653a <__kernel_rem_pio2+0x28a>
 800654c:	4658      	mov	r0, fp
 800654e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80065c8 <__kernel_rem_pio2+0x318>
 8006552:	f000 f9fd 	bl	8006950 <scalbn>
 8006556:	f108 0301 	add.w	r3, r8, #1
 800655a:	00da      	lsls	r2, r3, #3
 800655c:	9205      	str	r2, [sp, #20]
 800655e:	ec55 4b10 	vmov	r4, r5, d0
 8006562:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006564:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80065dc <__kernel_rem_pio2+0x32c>
 8006568:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800656c:	4646      	mov	r6, r8
 800656e:	f04f 0a00 	mov.w	sl, #0
 8006572:	2e00      	cmp	r6, #0
 8006574:	f280 80d1 	bge.w	800671a <__kernel_rem_pio2+0x46a>
 8006578:	4644      	mov	r4, r8
 800657a:	2c00      	cmp	r4, #0
 800657c:	f2c0 80ff 	blt.w	800677e <__kernel_rem_pio2+0x4ce>
 8006580:	4b19      	ldr	r3, [pc, #100]	@ (80065e8 <__kernel_rem_pio2+0x338>)
 8006582:	461f      	mov	r7, r3
 8006584:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006586:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800658a:	9306      	str	r3, [sp, #24]
 800658c:	f04f 0a00 	mov.w	sl, #0
 8006590:	f04f 0b00 	mov.w	fp, #0
 8006594:	2600      	movs	r6, #0
 8006596:	eba8 0504 	sub.w	r5, r8, r4
 800659a:	e0e4      	b.n	8006766 <__kernel_rem_pio2+0x4b6>
 800659c:	f04f 0902 	mov.w	r9, #2
 80065a0:	e754      	b.n	800644c <__kernel_rem_pio2+0x19c>
 80065a2:	f854 3b04 	ldr.w	r3, [r4], #4
 80065a6:	bb0d      	cbnz	r5, 80065ec <__kernel_rem_pio2+0x33c>
 80065a8:	b123      	cbz	r3, 80065b4 <__kernel_rem_pio2+0x304>
 80065aa:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80065ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80065b2:	2301      	movs	r3, #1
 80065b4:	3201      	adds	r2, #1
 80065b6:	461d      	mov	r5, r3
 80065b8:	e74f      	b.n	800645a <__kernel_rem_pio2+0x1aa>
 80065ba:	bf00      	nop
 80065bc:	f3af 8000 	nop.w
	...
 80065cc:	3ff00000 	.word	0x3ff00000
 80065d0:	08006d38 	.word	0x08006d38
 80065d4:	40200000 	.word	0x40200000
 80065d8:	3ff00000 	.word	0x3ff00000
 80065dc:	3e700000 	.word	0x3e700000
 80065e0:	41700000 	.word	0x41700000
 80065e4:	3fe00000 	.word	0x3fe00000
 80065e8:	08006cf8 	.word	0x08006cf8
 80065ec:	1acb      	subs	r3, r1, r3
 80065ee:	e7de      	b.n	80065ae <__kernel_rem_pio2+0x2fe>
 80065f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80065f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80065f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80065fe:	a90c      	add	r1, sp, #48	@ 0x30
 8006600:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006604:	e737      	b.n	8006476 <__kernel_rem_pio2+0x1c6>
 8006606:	f108 32ff 	add.w	r2, r8, #4294967295
 800660a:	ab0c      	add	r3, sp, #48	@ 0x30
 800660c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006610:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006614:	e7f3      	b.n	80065fe <__kernel_rem_pio2+0x34e>
 8006616:	a90c      	add	r1, sp, #48	@ 0x30
 8006618:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800661c:	3b01      	subs	r3, #1
 800661e:	430a      	orrs	r2, r1
 8006620:	e785      	b.n	800652e <__kernel_rem_pio2+0x27e>
 8006622:	3401      	adds	r4, #1
 8006624:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006628:	2a00      	cmp	r2, #0
 800662a:	d0fa      	beq.n	8006622 <__kernel_rem_pio2+0x372>
 800662c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800662e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006632:	eb0d 0503 	add.w	r5, sp, r3
 8006636:	9b06      	ldr	r3, [sp, #24]
 8006638:	aa20      	add	r2, sp, #128	@ 0x80
 800663a:	4443      	add	r3, r8
 800663c:	f108 0701 	add.w	r7, r8, #1
 8006640:	3d98      	subs	r5, #152	@ 0x98
 8006642:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006646:	4444      	add	r4, r8
 8006648:	42bc      	cmp	r4, r7
 800664a:	da04      	bge.n	8006656 <__kernel_rem_pio2+0x3a6>
 800664c:	46a0      	mov	r8, r4
 800664e:	e6a2      	b.n	8006396 <__kernel_rem_pio2+0xe6>
 8006650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006652:	2401      	movs	r4, #1
 8006654:	e7e6      	b.n	8006624 <__kernel_rem_pio2+0x374>
 8006656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006658:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800665c:	f7f9 ff36 	bl	80004cc <__aeabi_i2d>
 8006660:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8006920 <__kernel_rem_pio2+0x670>
 8006664:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006668:	ed8d 7b02 	vstr	d7, [sp, #8]
 800666c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006670:	46b2      	mov	sl, r6
 8006672:	f04f 0800 	mov.w	r8, #0
 8006676:	9b05      	ldr	r3, [sp, #20]
 8006678:	4598      	cmp	r8, r3
 800667a:	dd05      	ble.n	8006688 <__kernel_rem_pio2+0x3d8>
 800667c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006680:	3701      	adds	r7, #1
 8006682:	eca5 7b02 	vstmia	r5!, {d7}
 8006686:	e7df      	b.n	8006648 <__kernel_rem_pio2+0x398>
 8006688:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800668c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006690:	f7f9 ff86 	bl	80005a0 <__aeabi_dmul>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800669c:	f7f9 fdca 	bl	8000234 <__adddf3>
 80066a0:	f108 0801 	add.w	r8, r8, #1
 80066a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a8:	e7e5      	b.n	8006676 <__kernel_rem_pio2+0x3c6>
 80066aa:	f1cb 0000 	rsb	r0, fp, #0
 80066ae:	ec47 6b10 	vmov	d0, r6, r7
 80066b2:	f000 f94d 	bl	8006950 <scalbn>
 80066b6:	ec55 4b10 	vmov	r4, r5, d0
 80066ba:	4b9b      	ldr	r3, [pc, #620]	@ (8006928 <__kernel_rem_pio2+0x678>)
 80066bc:	2200      	movs	r2, #0
 80066be:	4620      	mov	r0, r4
 80066c0:	4629      	mov	r1, r5
 80066c2:	f7fa f9f3 	bl	8000aac <__aeabi_dcmpge>
 80066c6:	b300      	cbz	r0, 800670a <__kernel_rem_pio2+0x45a>
 80066c8:	4b98      	ldr	r3, [pc, #608]	@ (800692c <__kernel_rem_pio2+0x67c>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	4620      	mov	r0, r4
 80066ce:	4629      	mov	r1, r5
 80066d0:	f7f9 ff66 	bl	80005a0 <__aeabi_dmul>
 80066d4:	f7fa f9fe 	bl	8000ad4 <__aeabi_d2iz>
 80066d8:	4606      	mov	r6, r0
 80066da:	f7f9 fef7 	bl	80004cc <__aeabi_i2d>
 80066de:	4b92      	ldr	r3, [pc, #584]	@ (8006928 <__kernel_rem_pio2+0x678>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	f7f9 ff5d 	bl	80005a0 <__aeabi_dmul>
 80066e6:	460b      	mov	r3, r1
 80066e8:	4602      	mov	r2, r0
 80066ea:	4629      	mov	r1, r5
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7f9 fd9f 	bl	8000230 <__aeabi_dsub>
 80066f2:	f7fa f9ef 	bl	8000ad4 <__aeabi_d2iz>
 80066f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80066f8:	f10b 0b18 	add.w	fp, fp, #24
 80066fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006700:	f108 0801 	add.w	r8, r8, #1
 8006704:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006708:	e720      	b.n	800654c <__kernel_rem_pio2+0x29c>
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7fa f9e1 	bl	8000ad4 <__aeabi_d2iz>
 8006712:	ab0c      	add	r3, sp, #48	@ 0x30
 8006714:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006718:	e718      	b.n	800654c <__kernel_rem_pio2+0x29c>
 800671a:	ab0c      	add	r3, sp, #48	@ 0x30
 800671c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006720:	f7f9 fed4 	bl	80004cc <__aeabi_i2d>
 8006724:	4622      	mov	r2, r4
 8006726:	462b      	mov	r3, r5
 8006728:	f7f9 ff3a 	bl	80005a0 <__aeabi_dmul>
 800672c:	4652      	mov	r2, sl
 800672e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006732:	465b      	mov	r3, fp
 8006734:	4620      	mov	r0, r4
 8006736:	4629      	mov	r1, r5
 8006738:	f7f9 ff32 	bl	80005a0 <__aeabi_dmul>
 800673c:	3e01      	subs	r6, #1
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	e716      	b.n	8006572 <__kernel_rem_pio2+0x2c2>
 8006744:	9906      	ldr	r1, [sp, #24]
 8006746:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800674a:	9106      	str	r1, [sp, #24]
 800674c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006750:	f7f9 ff26 	bl	80005a0 <__aeabi_dmul>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4650      	mov	r0, sl
 800675a:	4659      	mov	r1, fp
 800675c:	f7f9 fd6a 	bl	8000234 <__adddf3>
 8006760:	3601      	adds	r6, #1
 8006762:	4682      	mov	sl, r0
 8006764:	468b      	mov	fp, r1
 8006766:	9b00      	ldr	r3, [sp, #0]
 8006768:	429e      	cmp	r6, r3
 800676a:	dc01      	bgt.n	8006770 <__kernel_rem_pio2+0x4c0>
 800676c:	42ae      	cmp	r6, r5
 800676e:	dde9      	ble.n	8006744 <__kernel_rem_pio2+0x494>
 8006770:	ab48      	add	r3, sp, #288	@ 0x120
 8006772:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006776:	e9c5 ab00 	strd	sl, fp, [r5]
 800677a:	3c01      	subs	r4, #1
 800677c:	e6fd      	b.n	800657a <__kernel_rem_pio2+0x2ca>
 800677e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006780:	2b02      	cmp	r3, #2
 8006782:	dc0b      	bgt.n	800679c <__kernel_rem_pio2+0x4ec>
 8006784:	2b00      	cmp	r3, #0
 8006786:	dc35      	bgt.n	80067f4 <__kernel_rem_pio2+0x544>
 8006788:	d059      	beq.n	800683e <__kernel_rem_pio2+0x58e>
 800678a:	9b02      	ldr	r3, [sp, #8]
 800678c:	f003 0007 	and.w	r0, r3, #7
 8006790:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006794:	ecbd 8b02 	vpop	{d8}
 8006798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d1f3      	bne.n	800678a <__kernel_rem_pio2+0x4da>
 80067a2:	9b05      	ldr	r3, [sp, #20]
 80067a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80067a8:	eb0d 0403 	add.w	r4, sp, r3
 80067ac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80067b0:	4625      	mov	r5, r4
 80067b2:	46c2      	mov	sl, r8
 80067b4:	f1ba 0f00 	cmp.w	sl, #0
 80067b8:	dc69      	bgt.n	800688e <__kernel_rem_pio2+0x5de>
 80067ba:	4645      	mov	r5, r8
 80067bc:	2d01      	cmp	r5, #1
 80067be:	f300 8087 	bgt.w	80068d0 <__kernel_rem_pio2+0x620>
 80067c2:	9c05      	ldr	r4, [sp, #20]
 80067c4:	ab48      	add	r3, sp, #288	@ 0x120
 80067c6:	441c      	add	r4, r3
 80067c8:	2000      	movs	r0, #0
 80067ca:	2100      	movs	r1, #0
 80067cc:	f1b8 0f01 	cmp.w	r8, #1
 80067d0:	f300 809c 	bgt.w	800690c <__kernel_rem_pio2+0x65c>
 80067d4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80067d8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80067dc:	f1b9 0f00 	cmp.w	r9, #0
 80067e0:	f040 80a6 	bne.w	8006930 <__kernel_rem_pio2+0x680>
 80067e4:	9b04      	ldr	r3, [sp, #16]
 80067e6:	e9c3 5600 	strd	r5, r6, [r3]
 80067ea:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80067ee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80067f2:	e7ca      	b.n	800678a <__kernel_rem_pio2+0x4da>
 80067f4:	9d05      	ldr	r5, [sp, #20]
 80067f6:	ab48      	add	r3, sp, #288	@ 0x120
 80067f8:	441d      	add	r5, r3
 80067fa:	4644      	mov	r4, r8
 80067fc:	2000      	movs	r0, #0
 80067fe:	2100      	movs	r1, #0
 8006800:	2c00      	cmp	r4, #0
 8006802:	da35      	bge.n	8006870 <__kernel_rem_pio2+0x5c0>
 8006804:	f1b9 0f00 	cmp.w	r9, #0
 8006808:	d038      	beq.n	800687c <__kernel_rem_pio2+0x5cc>
 800680a:	4602      	mov	r2, r0
 800680c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006810:	9c04      	ldr	r4, [sp, #16]
 8006812:	e9c4 2300 	strd	r2, r3, [r4]
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800681e:	f7f9 fd07 	bl	8000230 <__aeabi_dsub>
 8006822:	ad4a      	add	r5, sp, #296	@ 0x128
 8006824:	2401      	movs	r4, #1
 8006826:	45a0      	cmp	r8, r4
 8006828:	da2b      	bge.n	8006882 <__kernel_rem_pio2+0x5d2>
 800682a:	f1b9 0f00 	cmp.w	r9, #0
 800682e:	d002      	beq.n	8006836 <__kernel_rem_pio2+0x586>
 8006830:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006834:	4619      	mov	r1, r3
 8006836:	9b04      	ldr	r3, [sp, #16]
 8006838:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800683c:	e7a5      	b.n	800678a <__kernel_rem_pio2+0x4da>
 800683e:	9c05      	ldr	r4, [sp, #20]
 8006840:	ab48      	add	r3, sp, #288	@ 0x120
 8006842:	441c      	add	r4, r3
 8006844:	2000      	movs	r0, #0
 8006846:	2100      	movs	r1, #0
 8006848:	f1b8 0f00 	cmp.w	r8, #0
 800684c:	da09      	bge.n	8006862 <__kernel_rem_pio2+0x5b2>
 800684e:	f1b9 0f00 	cmp.w	r9, #0
 8006852:	d002      	beq.n	800685a <__kernel_rem_pio2+0x5aa>
 8006854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006858:	4619      	mov	r1, r3
 800685a:	9b04      	ldr	r3, [sp, #16]
 800685c:	e9c3 0100 	strd	r0, r1, [r3]
 8006860:	e793      	b.n	800678a <__kernel_rem_pio2+0x4da>
 8006862:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006866:	f7f9 fce5 	bl	8000234 <__adddf3>
 800686a:	f108 38ff 	add.w	r8, r8, #4294967295
 800686e:	e7eb      	b.n	8006848 <__kernel_rem_pio2+0x598>
 8006870:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006874:	f7f9 fcde 	bl	8000234 <__adddf3>
 8006878:	3c01      	subs	r4, #1
 800687a:	e7c1      	b.n	8006800 <__kernel_rem_pio2+0x550>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	e7c6      	b.n	8006810 <__kernel_rem_pio2+0x560>
 8006882:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006886:	f7f9 fcd5 	bl	8000234 <__adddf3>
 800688a:	3401      	adds	r4, #1
 800688c:	e7cb      	b.n	8006826 <__kernel_rem_pio2+0x576>
 800688e:	ed35 7b02 	vldmdb	r5!, {d7}
 8006892:	ed8d 7b00 	vstr	d7, [sp]
 8006896:	ed95 7b02 	vldr	d7, [r5, #8]
 800689a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800689e:	ec53 2b17 	vmov	r2, r3, d7
 80068a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80068a6:	f7f9 fcc5 	bl	8000234 <__adddf3>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4606      	mov	r6, r0
 80068b0:	460f      	mov	r7, r1
 80068b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068b6:	f7f9 fcbb 	bl	8000230 <__aeabi_dsub>
 80068ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068be:	f7f9 fcb9 	bl	8000234 <__adddf3>
 80068c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068c6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80068ca:	e9c5 6700 	strd	r6, r7, [r5]
 80068ce:	e771      	b.n	80067b4 <__kernel_rem_pio2+0x504>
 80068d0:	ed34 7b02 	vldmdb	r4!, {d7}
 80068d4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80068d8:	ec51 0b17 	vmov	r0, r1, d7
 80068dc:	4652      	mov	r2, sl
 80068de:	465b      	mov	r3, fp
 80068e0:	ed8d 7b00 	vstr	d7, [sp]
 80068e4:	f7f9 fca6 	bl	8000234 <__adddf3>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4606      	mov	r6, r0
 80068ee:	460f      	mov	r7, r1
 80068f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068f4:	f7f9 fc9c 	bl	8000230 <__aeabi_dsub>
 80068f8:	4652      	mov	r2, sl
 80068fa:	465b      	mov	r3, fp
 80068fc:	f7f9 fc9a 	bl	8000234 <__adddf3>
 8006900:	3d01      	subs	r5, #1
 8006902:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006906:	e9c4 6700 	strd	r6, r7, [r4]
 800690a:	e757      	b.n	80067bc <__kernel_rem_pio2+0x50c>
 800690c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006910:	f7f9 fc90 	bl	8000234 <__adddf3>
 8006914:	f108 38ff 	add.w	r8, r8, #4294967295
 8006918:	e758      	b.n	80067cc <__kernel_rem_pio2+0x51c>
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w
	...
 8006928:	41700000 	.word	0x41700000
 800692c:	3e700000 	.word	0x3e700000
 8006930:	9b04      	ldr	r3, [sp, #16]
 8006932:	9a04      	ldr	r2, [sp, #16]
 8006934:	601d      	str	r5, [r3, #0]
 8006936:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800693a:	605c      	str	r4, [r3, #4]
 800693c:	609f      	str	r7, [r3, #8]
 800693e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8006942:	60d3      	str	r3, [r2, #12]
 8006944:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006948:	6110      	str	r0, [r2, #16]
 800694a:	6153      	str	r3, [r2, #20]
 800694c:	e71d      	b.n	800678a <__kernel_rem_pio2+0x4da>
 800694e:	bf00      	nop

08006950 <scalbn>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	ec55 4b10 	vmov	r4, r5, d0
 8006956:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800695a:	4606      	mov	r6, r0
 800695c:	462b      	mov	r3, r5
 800695e:	b991      	cbnz	r1, 8006986 <scalbn+0x36>
 8006960:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006964:	4323      	orrs	r3, r4
 8006966:	d03b      	beq.n	80069e0 <scalbn+0x90>
 8006968:	4b33      	ldr	r3, [pc, #204]	@ (8006a38 <scalbn+0xe8>)
 800696a:	4620      	mov	r0, r4
 800696c:	4629      	mov	r1, r5
 800696e:	2200      	movs	r2, #0
 8006970:	f7f9 fe16 	bl	80005a0 <__aeabi_dmul>
 8006974:	4b31      	ldr	r3, [pc, #196]	@ (8006a3c <scalbn+0xec>)
 8006976:	429e      	cmp	r6, r3
 8006978:	4604      	mov	r4, r0
 800697a:	460d      	mov	r5, r1
 800697c:	da0f      	bge.n	800699e <scalbn+0x4e>
 800697e:	a326      	add	r3, pc, #152	@ (adr r3, 8006a18 <scalbn+0xc8>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	e01e      	b.n	80069c4 <scalbn+0x74>
 8006986:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800698a:	4291      	cmp	r1, r2
 800698c:	d10b      	bne.n	80069a6 <scalbn+0x56>
 800698e:	4622      	mov	r2, r4
 8006990:	4620      	mov	r0, r4
 8006992:	4629      	mov	r1, r5
 8006994:	f7f9 fc4e 	bl	8000234 <__adddf3>
 8006998:	4604      	mov	r4, r0
 800699a:	460d      	mov	r5, r1
 800699c:	e020      	b.n	80069e0 <scalbn+0x90>
 800699e:	460b      	mov	r3, r1
 80069a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80069a4:	3936      	subs	r1, #54	@ 0x36
 80069a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80069aa:	4296      	cmp	r6, r2
 80069ac:	dd0d      	ble.n	80069ca <scalbn+0x7a>
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	a11b      	add	r1, pc, #108	@ (adr r1, 8006a20 <scalbn+0xd0>)
 80069b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069b6:	da02      	bge.n	80069be <scalbn+0x6e>
 80069b8:	a11b      	add	r1, pc, #108	@ (adr r1, 8006a28 <scalbn+0xd8>)
 80069ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069be:	a318      	add	r3, pc, #96	@ (adr r3, 8006a20 <scalbn+0xd0>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fdec 	bl	80005a0 <__aeabi_dmul>
 80069c8:	e7e6      	b.n	8006998 <scalbn+0x48>
 80069ca:	1872      	adds	r2, r6, r1
 80069cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80069d0:	428a      	cmp	r2, r1
 80069d2:	dcec      	bgt.n	80069ae <scalbn+0x5e>
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	dd06      	ble.n	80069e6 <scalbn+0x96>
 80069d8:	f36f 531e 	bfc	r3, #20, #11
 80069dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069e0:	ec45 4b10 	vmov	d0, r4, r5
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80069ea:	da08      	bge.n	80069fe <scalbn+0xae>
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	a10a      	add	r1, pc, #40	@ (adr r1, 8006a18 <scalbn+0xc8>)
 80069f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f4:	dac3      	bge.n	800697e <scalbn+0x2e>
 80069f6:	a10e      	add	r1, pc, #56	@ (adr r1, 8006a30 <scalbn+0xe0>)
 80069f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069fc:	e7bf      	b.n	800697e <scalbn+0x2e>
 80069fe:	3236      	adds	r2, #54	@ 0x36
 8006a00:	f36f 531e 	bfc	r3, #20, #11
 8006a04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a08:	4620      	mov	r0, r4
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a40 <scalbn+0xf0>)
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	2200      	movs	r2, #0
 8006a10:	e7d8      	b.n	80069c4 <scalbn+0x74>
 8006a12:	bf00      	nop
 8006a14:	f3af 8000 	nop.w
 8006a18:	c2f8f359 	.word	0xc2f8f359
 8006a1c:	01a56e1f 	.word	0x01a56e1f
 8006a20:	8800759c 	.word	0x8800759c
 8006a24:	7e37e43c 	.word	0x7e37e43c
 8006a28:	8800759c 	.word	0x8800759c
 8006a2c:	fe37e43c 	.word	0xfe37e43c
 8006a30:	c2f8f359 	.word	0xc2f8f359
 8006a34:	81a56e1f 	.word	0x81a56e1f
 8006a38:	43500000 	.word	0x43500000
 8006a3c:	ffff3cb0 	.word	0xffff3cb0
 8006a40:	3c900000 	.word	0x3c900000
 8006a44:	00000000 	.word	0x00000000

08006a48 <floor>:
 8006a48:	ec51 0b10 	vmov	r0, r1, d0
 8006a4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a54:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006a58:	2e13      	cmp	r6, #19
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	4680      	mov	r8, r0
 8006a60:	dc34      	bgt.n	8006acc <floor+0x84>
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	da17      	bge.n	8006a96 <floor+0x4e>
 8006a66:	a332      	add	r3, pc, #200	@ (adr r3, 8006b30 <floor+0xe8>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	f7f9 fbe2 	bl	8000234 <__adddf3>
 8006a70:	2200      	movs	r2, #0
 8006a72:	2300      	movs	r3, #0
 8006a74:	f7fa f824 	bl	8000ac0 <__aeabi_dcmpgt>
 8006a78:	b150      	cbz	r0, 8006a90 <floor+0x48>
 8006a7a:	2c00      	cmp	r4, #0
 8006a7c:	da55      	bge.n	8006b2a <floor+0xe2>
 8006a7e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006a82:	432c      	orrs	r4, r5
 8006a84:	2500      	movs	r5, #0
 8006a86:	42ac      	cmp	r4, r5
 8006a88:	4c2b      	ldr	r4, [pc, #172]	@ (8006b38 <floor+0xf0>)
 8006a8a:	bf08      	it	eq
 8006a8c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006a90:	4621      	mov	r1, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	e023      	b.n	8006ade <floor+0x96>
 8006a96:	4f29      	ldr	r7, [pc, #164]	@ (8006b3c <floor+0xf4>)
 8006a98:	4137      	asrs	r7, r6
 8006a9a:	ea01 0307 	and.w	r3, r1, r7
 8006a9e:	4303      	orrs	r3, r0
 8006aa0:	d01d      	beq.n	8006ade <floor+0x96>
 8006aa2:	a323      	add	r3, pc, #140	@ (adr r3, 8006b30 <floor+0xe8>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f7f9 fbc4 	bl	8000234 <__adddf3>
 8006aac:	2200      	movs	r2, #0
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f7fa f806 	bl	8000ac0 <__aeabi_dcmpgt>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d0eb      	beq.n	8006a90 <floor+0x48>
 8006ab8:	2c00      	cmp	r4, #0
 8006aba:	bfbe      	ittt	lt
 8006abc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006ac0:	4133      	asrlt	r3, r6
 8006ac2:	18e4      	addlt	r4, r4, r3
 8006ac4:	ea24 0407 	bic.w	r4, r4, r7
 8006ac8:	2500      	movs	r5, #0
 8006aca:	e7e1      	b.n	8006a90 <floor+0x48>
 8006acc:	2e33      	cmp	r6, #51	@ 0x33
 8006ace:	dd0a      	ble.n	8006ae6 <floor+0x9e>
 8006ad0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006ad4:	d103      	bne.n	8006ade <floor+0x96>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	f7f9 fbab 	bl	8000234 <__adddf3>
 8006ade:	ec41 0b10 	vmov	d0, r0, r1
 8006ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006aea:	f04f 37ff 	mov.w	r7, #4294967295
 8006aee:	40df      	lsrs	r7, r3
 8006af0:	4207      	tst	r7, r0
 8006af2:	d0f4      	beq.n	8006ade <floor+0x96>
 8006af4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006b30 <floor+0xe8>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f7f9 fb9b 	bl	8000234 <__adddf3>
 8006afe:	2200      	movs	r2, #0
 8006b00:	2300      	movs	r3, #0
 8006b02:	f7f9 ffdd 	bl	8000ac0 <__aeabi_dcmpgt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d0c2      	beq.n	8006a90 <floor+0x48>
 8006b0a:	2c00      	cmp	r4, #0
 8006b0c:	da0a      	bge.n	8006b24 <floor+0xdc>
 8006b0e:	2e14      	cmp	r6, #20
 8006b10:	d101      	bne.n	8006b16 <floor+0xce>
 8006b12:	3401      	adds	r4, #1
 8006b14:	e006      	b.n	8006b24 <floor+0xdc>
 8006b16:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	40b3      	lsls	r3, r6
 8006b1e:	441d      	add	r5, r3
 8006b20:	4545      	cmp	r5, r8
 8006b22:	d3f6      	bcc.n	8006b12 <floor+0xca>
 8006b24:	ea25 0507 	bic.w	r5, r5, r7
 8006b28:	e7b2      	b.n	8006a90 <floor+0x48>
 8006b2a:	2500      	movs	r5, #0
 8006b2c:	462c      	mov	r4, r5
 8006b2e:	e7af      	b.n	8006a90 <floor+0x48>
 8006b30:	8800759c 	.word	0x8800759c
 8006b34:	7e37e43c 	.word	0x7e37e43c
 8006b38:	bff00000 	.word	0xbff00000
 8006b3c:	000fffff 	.word	0x000fffff

08006b40 <_init>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	bf00      	nop
 8006b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b46:	bc08      	pop	{r3}
 8006b48:	469e      	mov	lr, r3
 8006b4a:	4770      	bx	lr

08006b4c <_fini>:
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	bf00      	nop
 8006b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b52:	bc08      	pop	{r3}
 8006b54:	469e      	mov	lr, r3
 8006b56:	4770      	bx	lr
