
F103C8T6_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002a08  08002a08  00003a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a94  08002a94  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a94  08002a94  00003a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a9c  08002a9c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a9c  08002a9c  00003a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002aa0  08002aa0  00003aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002aa4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000005c  08002b00  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08002b00  0000425c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b39d  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abf  00000000  00000000  0000f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00010ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000914  00000000  00000000  00011a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a72  00000000  00000000  00012394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce43  00000000  00000000  00029e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a406  00000000  00000000  00036c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c104f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  000c1094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c4610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f0 	.word	0x080029f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080029f0 	.word	0x080029f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <delay_us>:
#define DHT_PIN GPIO_PIN_6

extern TIM_HandleTypeDef htim2;

void delay_us(uint16_t us)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000166:	4b08      	ldr	r3, [pc, #32]	@ (8000188 <delay_us+0x2c>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	2200      	movs	r2, #0
 800016c:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 800016e:	bf00      	nop
 8000170:	4b05      	ldr	r3, [pc, #20]	@ (8000188 <delay_us+0x2c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000176:	88fb      	ldrh	r3, [r7, #6]
 8000178:	429a      	cmp	r2, r3
 800017a:	d3f9      	bcc.n	8000170 <delay_us+0x14>
}
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000078 	.word	0x20000078

0800018c <DHT_Set_Pin_Output>:

void DHT_Set_Pin_Output(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000192:	463b      	mov	r3, r7
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT_PIN;
 800019e:	2340      	movs	r3, #64	@ 0x40
 80001a0:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001a2:	2301      	movs	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001a6:	2302      	movs	r3, #2
 80001a8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 80001aa:	463b      	mov	r3, r7
 80001ac:	4619      	mov	r1, r3
 80001ae:	4803      	ldr	r0, [pc, #12]	@ (80001bc <DHT_Set_Pin_Output+0x30>)
 80001b0:	f000 fcc2 	bl	8000b38 <HAL_GPIO_Init>
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010800 	.word	0x40010800

080001c0 <DHT_Set_Pin_Input>:

void DHT_Set_Pin_Input(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c6:	463b      	mov	r3, r7
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT_PIN;
 80001d2:	2340      	movs	r3, #64	@ 0x40
 80001d4:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001da:	2300      	movs	r3, #0
 80001dc:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 80001de:	463b      	mov	r3, r7
 80001e0:	4619      	mov	r1, r3
 80001e2:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <DHT_Set_Pin_Input+0x30>)
 80001e4:	f000 fca8 	bl	8000b38 <HAL_GPIO_Init>
}
 80001e8:	bf00      	nop
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800

080001f4 <DHT11_Read>:

uint8_t DHT11_Read(uint8_t *temp, uint8_t *hum)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]
    uint8_t bits[5] = {0};
 80001fe:	f107 0308 	add.w	r3, r7, #8
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	711a      	strb	r2, [r3, #4]
    uint8_t i, j;

    DHT_Set_Pin_Output();
 8000208:	f7ff ffc0 	bl	800018c <DHT_Set_Pin_Output>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	2140      	movs	r1, #64	@ 0x40
 8000210:	4853      	ldr	r0, [pc, #332]	@ (8000360 <DHT11_Read+0x16c>)
 8000212:	f000 fe2c 	bl	8000e6e <HAL_GPIO_WritePin>
    HAL_Delay(20); // 18+ ms
 8000216:	2014      	movs	r0, #20
 8000218:	f000 fb86 	bl	8000928 <HAL_Delay>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2140      	movs	r1, #64	@ 0x40
 8000220:	484f      	ldr	r0, [pc, #316]	@ (8000360 <DHT11_Read+0x16c>)
 8000222:	f000 fe24 	bl	8000e6e <HAL_GPIO_WritePin>
    delay_us(30);
 8000226:	201e      	movs	r0, #30
 8000228:	f7ff ff98 	bl	800015c <delay_us>
    DHT_Set_Pin_Input();
 800022c:	f7ff ffc8 	bl	80001c0 <DHT_Set_Pin_Input>

    // Wait for response
    uint32_t timeout = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 8000234:	e009      	b.n	800024a <DHT11_Read+0x56>
        if (++timeout > 10000) return 1;
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	3301      	adds	r3, #1
 800023a:	613b      	str	r3, [r7, #16]
 800023c:	693b      	ldr	r3, [r7, #16]
 800023e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000242:	4293      	cmp	r3, r2
 8000244:	d901      	bls.n	800024a <DHT11_Read+0x56>
 8000246:	2301      	movs	r3, #1
 8000248:	e085      	b.n	8000356 <DHT11_Read+0x162>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 800024a:	2140      	movs	r1, #64	@ 0x40
 800024c:	4844      	ldr	r0, [pc, #272]	@ (8000360 <DHT11_Read+0x16c>)
 800024e:	f000 fdf7 	bl	8000e40 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	2b01      	cmp	r3, #1
 8000256:	d0ee      	beq.n	8000236 <DHT11_Read+0x42>
    timeout = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 800025c:	e009      	b.n	8000272 <DHT11_Read+0x7e>
        if (++timeout > 10000) return 1;
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	3301      	adds	r3, #1
 8000262:	613b      	str	r3, [r7, #16]
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	f242 7210 	movw	r2, #10000	@ 0x2710
 800026a:	4293      	cmp	r3, r2
 800026c:	d901      	bls.n	8000272 <DHT11_Read+0x7e>
 800026e:	2301      	movs	r3, #1
 8000270:	e071      	b.n	8000356 <DHT11_Read+0x162>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 8000272:	2140      	movs	r1, #64	@ 0x40
 8000274:	483a      	ldr	r0, [pc, #232]	@ (8000360 <DHT11_Read+0x16c>)
 8000276:	f000 fde3 	bl	8000e40 <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d0ee      	beq.n	800025e <DHT11_Read+0x6a>
    timeout = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 8000284:	e009      	b.n	800029a <DHT11_Read+0xa6>
        if (++timeout > 10000) return 1;
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	3301      	adds	r3, #1
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	693b      	ldr	r3, [r7, #16]
 800028e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000292:	4293      	cmp	r3, r2
 8000294:	d901      	bls.n	800029a <DHT11_Read+0xa6>
 8000296:	2301      	movs	r3, #1
 8000298:	e05d      	b.n	8000356 <DHT11_Read+0x162>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 800029a:	2140      	movs	r1, #64	@ 0x40
 800029c:	4830      	ldr	r0, [pc, #192]	@ (8000360 <DHT11_Read+0x16c>)
 800029e:	f000 fdcf 	bl	8000e40 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d0ee      	beq.n	8000286 <DHT11_Read+0x92>

    // Read 5 bytes
    for (j = 0; j < 5; j++)
 80002a8:	2300      	movs	r3, #0
 80002aa:	75bb      	strb	r3, [r7, #22]
 80002ac:	e03a      	b.n	8000324 <DHT11_Read+0x130>
    {
        for (i = 0; i < 8; i++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	75fb      	strb	r3, [r7, #23]
 80002b2:	e031      	b.n	8000318 <DHT11_Read+0x124>
        {
            while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET);
 80002b4:	bf00      	nop
 80002b6:	2140      	movs	r1, #64	@ 0x40
 80002b8:	4829      	ldr	r0, [pc, #164]	@ (8000360 <DHT11_Read+0x16c>)
 80002ba:	f000 fdc1 	bl	8000e40 <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d0f8      	beq.n	80002b6 <DHT11_Read+0xc2>
            delay_us(40);
 80002c4:	2028      	movs	r0, #40	@ 0x28
 80002c6:	f7ff ff49 	bl	800015c <delay_us>
            if (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 80002ca:	2140      	movs	r1, #64	@ 0x40
 80002cc:	4824      	ldr	r0, [pc, #144]	@ (8000360 <DHT11_Read+0x16c>)
 80002ce:	f000 fdb7 	bl	8000e40 <HAL_GPIO_ReadPin>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d114      	bne.n	8000302 <DHT11_Read+0x10e>
                bits[j] |= (1 << (7 - i));
 80002d8:	7dbb      	ldrb	r3, [r7, #22]
 80002da:	3318      	adds	r3, #24
 80002dc:	443b      	add	r3, r7
 80002de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002e2:	b25a      	sxtb	r2, r3
 80002e4:	7dfb      	ldrb	r3, [r7, #23]
 80002e6:	f1c3 0307 	rsb	r3, r3, #7
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	b25b      	sxtb	r3, r3
 80002f2:	4313      	orrs	r3, r2
 80002f4:	b25a      	sxtb	r2, r3
 80002f6:	7dbb      	ldrb	r3, [r7, #22]
 80002f8:	b2d2      	uxtb	r2, r2
 80002fa:	3318      	adds	r3, #24
 80002fc:	443b      	add	r3, r7
 80002fe:	f803 2c10 	strb.w	r2, [r3, #-16]
            while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET);
 8000302:	bf00      	nop
 8000304:	2140      	movs	r1, #64	@ 0x40
 8000306:	4816      	ldr	r0, [pc, #88]	@ (8000360 <DHT11_Read+0x16c>)
 8000308:	f000 fd9a 	bl	8000e40 <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	2b01      	cmp	r3, #1
 8000310:	d0f8      	beq.n	8000304 <DHT11_Read+0x110>
        for (i = 0; i < 8; i++)
 8000312:	7dfb      	ldrb	r3, [r7, #23]
 8000314:	3301      	adds	r3, #1
 8000316:	75fb      	strb	r3, [r7, #23]
 8000318:	7dfb      	ldrb	r3, [r7, #23]
 800031a:	2b07      	cmp	r3, #7
 800031c:	d9ca      	bls.n	80002b4 <DHT11_Read+0xc0>
    for (j = 0; j < 5; j++)
 800031e:	7dbb      	ldrb	r3, [r7, #22]
 8000320:	3301      	adds	r3, #1
 8000322:	75bb      	strb	r3, [r7, #22]
 8000324:	7dbb      	ldrb	r3, [r7, #22]
 8000326:	2b04      	cmp	r3, #4
 8000328:	d9c1      	bls.n	80002ae <DHT11_Read+0xba>
        }
    }

    if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4])
 800032a:	7a3a      	ldrb	r2, [r7, #8]
 800032c:	7a7b      	ldrb	r3, [r7, #9]
 800032e:	4413      	add	r3, r2
 8000330:	b2da      	uxtb	r2, r3
 8000332:	7abb      	ldrb	r3, [r7, #10]
 8000334:	4413      	add	r3, r2
 8000336:	b2da      	uxtb	r2, r3
 8000338:	7afb      	ldrb	r3, [r7, #11]
 800033a:	4413      	add	r3, r2
 800033c:	b2da      	uxtb	r2, r3
 800033e:	7b3b      	ldrb	r3, [r7, #12]
 8000340:	429a      	cmp	r2, r3
 8000342:	d001      	beq.n	8000348 <DHT11_Read+0x154>
        return 2;
 8000344:	2302      	movs	r3, #2
 8000346:	e006      	b.n	8000356 <DHT11_Read+0x162>

    *hum = bits[0];
 8000348:	7a3a      	ldrb	r2, [r7, #8]
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	701a      	strb	r2, [r3, #0]
    *temp = bits[2];
 800034e:	7aba      	ldrb	r2, [r7, #10]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	701a      	strb	r2, [r3, #0]

    return 0;
 8000354:	2300      	movs	r3, #0
}
 8000356:	4618      	mov	r0, r3
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010800 	.word	0x40010800

08000364 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b08e      	sub	sp, #56	@ 0x38
 8000368:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800036a:	f000 fa7b 	bl	8000864 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800036e:	f000 f845 	bl	80003fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000372:	f000 f8ff 	bl	8000574 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000376:	f000 f887 	bl	8000488 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800037a:	f000 f8d1 	bl	8000520 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 800037e:	4819      	ldr	r0, [pc, #100]	@ (80003e4 <main+0x80>)
 8000380:	f001 f9ee 	bl	8001760 <HAL_TIM_Base_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (DHT11_Read(&temp, &hum) == 0) {
 8000384:	4918      	ldr	r1, [pc, #96]	@ (80003e8 <main+0x84>)
 8000386:	4819      	ldr	r0, [pc, #100]	@ (80003ec <main+0x88>)
 8000388:	f7ff ff34 	bl	80001f4 <DHT11_Read>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d115      	bne.n	80003be <main+0x5a>
			char msg[50];
			sprintf(msg, "Temp: %d°C  Hum: %d%%\r\n", temp, hum);
 8000392:	4b16      	ldr	r3, [pc, #88]	@ (80003ec <main+0x88>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	461a      	mov	r2, r3
 8000398:	4b13      	ldr	r3, [pc, #76]	@ (80003e8 <main+0x84>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4638      	mov	r0, r7
 800039e:	4914      	ldr	r1, [pc, #80]	@ (80003f0 <main+0x8c>)
 80003a0:	f001 fe76 	bl	8002090 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg),
 80003a4:	463b      	mov	r3, r7
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff fed0 	bl	800014c <strlen>
 80003ac:	4603      	mov	r3, r0
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	4639      	mov	r1, r7
 80003b2:	f04f 33ff 	mov.w	r3, #4294967295
 80003b6:	480f      	ldr	r0, [pc, #60]	@ (80003f4 <main+0x90>)
 80003b8:	f001 fc96 	bl	8001ce8 <HAL_UART_Transmit>
 80003bc:	e00c      	b.n	80003d8 <main+0x74>
			HAL_MAX_DELAY);
		} else {
			char *err = "DHT11 Error\r\n";
 80003be:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <main+0x94>)
 80003c0:	637b      	str	r3, [r7, #52]	@ 0x34
			HAL_UART_Transmit(&huart1, (uint8_t*) err, strlen(err),
 80003c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80003c4:	f7ff fec2 	bl	800014c <strlen>
 80003c8:	4603      	mov	r3, r0
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	f04f 33ff 	mov.w	r3, #4294967295
 80003d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80003d2:	4808      	ldr	r0, [pc, #32]	@ (80003f4 <main+0x90>)
 80003d4:	f001 fc88 	bl	8001ce8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}

		HAL_Delay(2000);
 80003d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003dc:	f000 faa4 	bl	8000928 <HAL_Delay>
		if (DHT11_Read(&temp, &hum) == 0) {
 80003e0:	e7d0      	b.n	8000384 <main+0x20>
 80003e2:	bf00      	nop
 80003e4:	20000078 	.word	0x20000078
 80003e8:	20000109 	.word	0x20000109
 80003ec:	20000108 	.word	0x20000108
 80003f0:	08002a08 	.word	0x08002a08
 80003f4:	200000c0 	.word	0x200000c0
 80003f8:	08002a24 	.word	0x08002a24

080003fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b090      	sub	sp, #64	@ 0x40
 8000400:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2228      	movs	r2, #40	@ 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fe62 	bl	80020d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041e:	2301      	movs	r3, #1
 8000420:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000422:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000426:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000430:	2302      	movs	r3, #2
 8000432:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000438:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800043e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000440:	f107 0318 	add.w	r3, r7, #24
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fd2b 	bl	8000ea0 <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x58>
		Error_Handler();
 8000450:	f000 f8da 	bl	8000608 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000454:	230f      	movs	r3, #15
 8000456:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	2302      	movs	r3, #2
 800045a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000464:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2102      	movs	r1, #2
 800046e:	4618      	mov	r0, r3
 8000470:	f000 ff98 	bl	80013a4 <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x82>
		Error_Handler();
 800047a:	f000 f8c5 	bl	8000608 <Error_Handler>
	}
}
 800047e:	bf00      	nop
 8000480:	3740      	adds	r7, #64	@ 0x40
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800048e:	f107 0308 	add.w	r3, r7, #8
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800049c:	463b      	mov	r3, r7
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80004a4:	4b1d      	ldr	r3, [pc, #116]	@ (800051c <MX_TIM2_Init+0x94>)
 80004a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004aa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 71;
 80004ac:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <MX_TIM2_Init+0x94>)
 80004ae:	2247      	movs	r2, #71	@ 0x47
 80004b0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b2:	4b1a      	ldr	r3, [pc, #104]	@ (800051c <MX_TIM2_Init+0x94>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80004b8:	4b18      	ldr	r3, [pc, #96]	@ (800051c <MX_TIM2_Init+0x94>)
 80004ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004be:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c0:	4b16      	ldr	r3, [pc, #88]	@ (800051c <MX_TIM2_Init+0x94>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <MX_TIM2_Init+0x94>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80004cc:	4813      	ldr	r0, [pc, #76]	@ (800051c <MX_TIM2_Init+0x94>)
 80004ce:	f001 f8f7 	bl	80016c0 <HAL_TIM_Base_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM2_Init+0x54>
		Error_Handler();
 80004d8:	f000 f896 	bl	8000608 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	4619      	mov	r1, r3
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <MX_TIM2_Init+0x94>)
 80004ea:	f001 f983 	bl	80017f4 <HAL_TIM_ConfigClockSource>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM2_Init+0x70>
		Error_Handler();
 80004f4:	f000 f888 	bl	8000608 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f8:	2300      	movs	r3, #0
 80004fa:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000500:	463b      	mov	r3, r7
 8000502:	4619      	mov	r1, r3
 8000504:	4805      	ldr	r0, [pc, #20]	@ (800051c <MX_TIM2_Init+0x94>)
 8000506:	f001 fb41 	bl	8001b8c <HAL_TIMEx_MasterConfigSynchronization>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000510:	f000 f87a 	bl	8000608 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000078 	.word	0x20000078

08000520 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_USART1_UART_Init+0x4c>)
 8000526:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <MX_USART1_UART_Init+0x50>)
 8000528:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <MX_USART1_UART_Init+0x4c>)
 800052c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000530:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_USART1_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_USART1_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_USART1_UART_Init+0x4c>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_USART1_UART_Init+0x4c>)
 8000546:	220c      	movs	r2, #12
 8000548:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_USART1_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_USART1_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000556:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_USART1_UART_Init+0x4c>)
 8000558:	f001 fb76 	bl	8001c48 <HAL_UART_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000562:	f000 f851 	bl	8000608 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000c0 	.word	0x200000c0
 8000570:	40013800 	.word	0x40013800

08000574 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <MX_GPIO_Init+0x8c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a1c      	ldr	r2, [pc, #112]	@ (8000600 <MX_GPIO_Init+0x8c>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <MX_GPIO_Init+0x8c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_GPIO_Init+0x8c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <MX_GPIO_Init+0x8c>)
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_GPIO_Init+0x8c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_GPIO_Init+0x8c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a10      	ldr	r2, [pc, #64]	@ (8000600 <MX_GPIO_Init+0x8c>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_GPIO_Init+0x8c>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	@ 0x40
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <MX_GPIO_Init+0x90>)
 80005d6:	f000 fc4a 	bl	8000e6e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005da:	2340      	movs	r3, #64	@ 0x40
 80005dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <MX_GPIO_Init+0x90>)
 80005f2:	f000 faa1 	bl	8000b38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	40010800 	.word	0x40010800

08000608 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <Error_Handler+0x8>

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <HAL_MspInit+0x5c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <HAL_MspInit+0x5c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HAL_MspInit+0x5c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <HAL_MspInit+0x5c>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <HAL_MspInit+0x5c>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <HAL_MspInit+0x5c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064a:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <HAL_MspInit+0x60>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <HAL_MspInit+0x60>)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	40021000 	.word	0x40021000
 8000674:	40010000 	.word	0x40010000

08000678 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000688:	d10b      	bne.n	80006a2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <HAL_TIM_Base_MspInit+0x34>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a07      	ldr	r2, [pc, #28]	@ (80006ac <HAL_TIM_Base_MspInit+0x34>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_TIM_Base_MspInit+0x34>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <HAL_UART_MspInit+0x8c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d131      	bne.n	8000734 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a14      	ldr	r2, [pc, #80]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000704:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4619      	mov	r1, r3
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <HAL_UART_MspInit+0x94>)
 8000716:	f000 fa0f 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800071a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <HAL_UART_MspInit+0x94>)
 8000730:	f000 fa02 	bl	8000b38 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013800 	.word	0x40013800
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <NMI_Handler+0x4>

08000750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <MemManage_Handler+0x4>

08000760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <UsageFault_Handler+0x4>

08000770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 f8aa 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	@ (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f001 fc88 	bl	80020e4 <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <_sbrk+0x64>)
 80007f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20005000 	.word	0x20005000
 8000800:	00000400 	.word	0x00000400
 8000804:	2000010c 	.word	0x2000010c
 8000808:	20000260 	.word	0x20000260

0800080c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000818:	f7ff fff8 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800081e:	490c      	ldr	r1, [pc, #48]	@ (8000850 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000820:	4a0c      	ldr	r2, [pc, #48]	@ (8000854 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a09      	ldr	r2, [pc, #36]	@ (8000858 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000834:	4c09      	ldr	r4, [pc, #36]	@ (800085c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000842:	f001 fc55 	bl	80020f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fd8d 	bl	8000364 <main>
  bx lr
 800084a:	4770      	bx	lr
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000854:	08002aa4 	.word	0x08002aa4
  ldr r2, =_sbss
 8000858:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800085c:	2000025c 	.word	0x2000025c

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>
	...

08000864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_Init+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <HAL_Init+0x28>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f92b 	bl	8000ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f000 f808 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff fec8 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_InitTick+0x54>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <HAL_InitTick+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f935 	bl	8000b1e <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f90b 	bl	8000ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	@ (80008ec <HAL_InitTick+0x5c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <HAL_IncTick+0x1c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <HAL_IncTick+0x20>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a03      	ldr	r2, [pc, #12]	@ (8000910 <HAL_IncTick+0x20>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000008 	.word	0x20000008
 8000910:	20000110 	.word	0x20000110

08000914 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b02      	ldr	r3, [pc, #8]	@ (8000924 <HAL_GetTick+0x10>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000110 	.word	0x20000110

08000928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff fff0 	bl	8000914 <HAL_GetTick>
 8000934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000940:	d005      	beq.n	800094e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_Delay+0x44>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094e:	bf00      	nop
 8000950:	f7ff ffe0 	bl	8000914 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8f7      	bhi.n	8000950 <HAL_Delay+0x28>
  {
  }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008

08000970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800099c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009bc:	4b04      	ldr	r3, [pc, #16]	@ (80009d0 <__NVIC_GetPriorityGrouping+0x18>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	f003 0307 	and.w	r3, r3, #7
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	db0a      	blt.n	80009fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	490c      	ldr	r1, [pc, #48]	@ (8000a20 <__NVIC_SetPriority+0x4c>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	440b      	add	r3, r1
 80009f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009fc:	e00a      	b.n	8000a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	@ (8000a24 <__NVIC_SetPriority+0x50>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	761a      	strb	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	@ 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	bf28      	it	cs
 8000a46:	2304      	movcs	r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d902      	bls.n	8000a58 <NVIC_EncodePriority+0x30>
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3b03      	subs	r3, #3
 8000a56:	e000      	b.n	8000a5a <NVIC_EncodePriority+0x32>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43da      	mvns	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43d9      	mvns	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	4313      	orrs	r3, r2
         );
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	@ 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a9c:	d301      	bcc.n	8000aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00f      	b.n	8000ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <SysTick_Config+0x40>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aaa:	210f      	movs	r1, #15
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f7ff ff90 	bl	80009d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <SysTick_Config+0x40>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	4b04      	ldr	r3, [pc, #16]	@ (8000acc <SysTick_Config+0x40>)
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff49 	bl	8000970 <__NVIC_SetPriorityGrouping>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af8:	f7ff ff5e 	bl	80009b8 <__NVIC_GetPriorityGrouping>
 8000afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	6978      	ldr	r0, [r7, #20]
 8000b04:	f7ff ff90 	bl	8000a28 <NVIC_EncodePriority>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff5f 	bl	80009d4 <__NVIC_SetPriority>
}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffb0 	bl	8000a8c <SysTick_Config>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b08b      	sub	sp, #44	@ 0x2c
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	e169      	b.n	8000e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 8158 	bne.w	8000e1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	4a9a      	ldr	r2, [pc, #616]	@ (8000dd8 <HAL_GPIO_Init+0x2a0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d05e      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b74:	4a98      	ldr	r2, [pc, #608]	@ (8000dd8 <HAL_GPIO_Init+0x2a0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d875      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a98      	ldr	r2, [pc, #608]	@ (8000ddc <HAL_GPIO_Init+0x2a4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d058      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b80:	4a96      	ldr	r2, [pc, #600]	@ (8000ddc <HAL_GPIO_Init+0x2a4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d86f      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b86:	4a96      	ldr	r2, [pc, #600]	@ (8000de0 <HAL_GPIO_Init+0x2a8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d052      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b8c:	4a94      	ldr	r2, [pc, #592]	@ (8000de0 <HAL_GPIO_Init+0x2a8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d869      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b92:	4a94      	ldr	r2, [pc, #592]	@ (8000de4 <HAL_GPIO_Init+0x2ac>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d04c      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b98:	4a92      	ldr	r2, [pc, #584]	@ (8000de4 <HAL_GPIO_Init+0x2ac>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d863      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b9e:	4a92      	ldr	r2, [pc, #584]	@ (8000de8 <HAL_GPIO_Init+0x2b0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d046      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000ba4:	4a90      	ldr	r2, [pc, #576]	@ (8000de8 <HAL_GPIO_Init+0x2b0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d85d      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	d82a      	bhi.n	8000c04 <HAL_GPIO_Init+0xcc>
 8000bae:	2b12      	cmp	r3, #18
 8000bb0:	d859      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb8 <HAL_GPIO_Init+0x80>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000c33 	.word	0x08000c33
 8000bbc:	08000c0d 	.word	0x08000c0d
 8000bc0:	08000c1f 	.word	0x08000c1f
 8000bc4:	08000c61 	.word	0x08000c61
 8000bc8:	08000c67 	.word	0x08000c67
 8000bcc:	08000c67 	.word	0x08000c67
 8000bd0:	08000c67 	.word	0x08000c67
 8000bd4:	08000c67 	.word	0x08000c67
 8000bd8:	08000c67 	.word	0x08000c67
 8000bdc:	08000c67 	.word	0x08000c67
 8000be0:	08000c67 	.word	0x08000c67
 8000be4:	08000c67 	.word	0x08000c67
 8000be8:	08000c67 	.word	0x08000c67
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c67 	.word	0x08000c67
 8000bf4:	08000c67 	.word	0x08000c67
 8000bf8:	08000c67 	.word	0x08000c67
 8000bfc:	08000c15 	.word	0x08000c15
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	4a79      	ldr	r2, [pc, #484]	@ (8000dec <HAL_GPIO_Init+0x2b4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d013      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c0a:	e02c      	b.n	8000c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e029      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e024      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	3308      	adds	r3, #8
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e01f      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	330c      	adds	r3, #12
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e01a      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e013      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d105      	bne.n	8000c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	611a      	str	r2, [r3, #16]
          break;
 8000c52:	e009      	b.n	8000c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c54:	2308      	movs	r3, #8
 8000c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	615a      	str	r2, [r3, #20]
          break;
 8000c5e:	e003      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          break;
 8000c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2bff      	cmp	r3, #255	@ 0xff
 8000c6c:	d801      	bhi.n	8000c72 <HAL_GPIO_Init+0x13a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	e001      	b.n	8000c76 <HAL_GPIO_Init+0x13e>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3304      	adds	r3, #4
 8000c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2bff      	cmp	r3, #255	@ 0xff
 8000c7c:	d802      	bhi.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x152>
 8000c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c86:	3b08      	subs	r3, #8
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	210f      	movs	r1, #15
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	6a39      	ldr	r1, [r7, #32]
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80b1 	beq.w	8000e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd0:	4a48      	ldr	r2, [pc, #288]	@ (8000df4 <HAL_GPIO_Init+0x2bc>)
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a40      	ldr	r2, [pc, #256]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d013      	beq.n	8000d24 <HAL_GPIO_Init+0x1ec>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8000dfc <HAL_GPIO_Init+0x2c4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d00d      	beq.n	8000d20 <HAL_GPIO_Init+0x1e8>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a3e      	ldr	r2, [pc, #248]	@ (8000e00 <HAL_GPIO_Init+0x2c8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d007      	beq.n	8000d1c <HAL_GPIO_Init+0x1e4>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e04 <HAL_GPIO_Init+0x2cc>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d101      	bne.n	8000d18 <HAL_GPIO_Init+0x1e0>
 8000d14:	2303      	movs	r3, #3
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d18:	2304      	movs	r3, #4
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d24:	2300      	movs	r3, #0
 8000d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d36:	492f      	ldr	r1, [pc, #188]	@ (8000df4 <HAL_GPIO_Init+0x2bc>)
 8000d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d50:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	492c      	ldr	r1, [pc, #176]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	608b      	str	r3, [r1, #8]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4928      	ldr	r1, [pc, #160]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d78:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	4922      	ldr	r1, [pc, #136]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60cb      	str	r3, [r1, #12]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	491e      	ldr	r1, [pc, #120]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4918      	ldr	r1, [pc, #96]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dae:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	4914      	ldr	r1, [pc, #80]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d021      	beq.n	8000e0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	490e      	ldr	r1, [pc, #56]	@ (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
 8000dd4:	e021      	b.n	8000e1a <HAL_GPIO_Init+0x2e2>
 8000dd6:	bf00      	nop
 8000dd8:	10320000 	.word	0x10320000
 8000ddc:	10310000 	.word	0x10310000
 8000de0:	10220000 	.word	0x10220000
 8000de4:	10210000 	.word	0x10210000
 8000de8:	10120000 	.word	0x10120000
 8000dec:	10110000 	.word	0x10110000
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40011400 	.word	0x40011400
 8000e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4909      	ldr	r1, [pc, #36]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f47f ae8e 	bne.w	8000b4c <HAL_GPIO_Init+0x14>
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	372c      	adds	r7, #44	@ 0x2c
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e001      	b.n	8000e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	807b      	strh	r3, [r7, #2]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e7e:	787b      	ldrb	r3, [r7, #1]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e84:	887a      	ldrh	r2, [r7, #2]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e8a:	e003      	b.n	8000e94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	041a      	lsls	r2, r3, #16
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	611a      	str	r2, [r3, #16]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e272      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 8087 	beq.w	8000fce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ec0:	4b92      	ldr	r3, [pc, #584]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d00c      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ecc:	4b8f      	ldr	r3, [pc, #572]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d112      	bne.n	8000efe <HAL_RCC_OscConfig+0x5e>
 8000ed8:	4b8c      	ldr	r3, [pc, #560]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ee4:	d10b      	bne.n	8000efe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee6:	4b89      	ldr	r3, [pc, #548]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d06c      	beq.n	8000fcc <HAL_RCC_OscConfig+0x12c>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d168      	bne.n	8000fcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e24c      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f06:	d106      	bne.n	8000f16 <HAL_RCC_OscConfig+0x76>
 8000f08:	4b80      	ldr	r3, [pc, #512]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a7f      	ldr	r2, [pc, #508]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e02e      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x98>
 8000f1e:	4b7b      	ldr	r3, [pc, #492]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a7a      	ldr	r2, [pc, #488]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b78      	ldr	r3, [pc, #480]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a77      	ldr	r2, [pc, #476]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e01d      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0xbc>
 8000f42:	4b72      	ldr	r3, [pc, #456]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a71      	ldr	r2, [pc, #452]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b6f      	ldr	r3, [pc, #444]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a6e      	ldr	r2, [pc, #440]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e00b      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f5c:	4b6b      	ldr	r3, [pc, #428]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a6a      	ldr	r2, [pc, #424]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b68      	ldr	r3, [pc, #416]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a67      	ldr	r2, [pc, #412]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fcca 	bl	8000914 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fcc6 	bl	8000914 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	@ 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e200      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	4b5d      	ldr	r3, [pc, #372]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0xe4>
 8000fa2:	e014      	b.n	8000fce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fcb6 	bl	8000914 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fcb2 	bl	8000914 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	@ 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e1ec      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	4b53      	ldr	r3, [pc, #332]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x10c>
 8000fca:	e000      	b.n	8000fce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d063      	beq.n	80010a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00b      	beq.n	8000ffe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fe6:	4b49      	ldr	r3, [pc, #292]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d11c      	bne.n	800102c <HAL_RCC_OscConfig+0x18c>
 8000ff2:	4b46      	ldr	r3, [pc, #280]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d116      	bne.n	800102c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	4b43      	ldr	r3, [pc, #268]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_RCC_OscConfig+0x176>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d001      	beq.n	8001016 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e1c0      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001016:	4b3d      	ldr	r3, [pc, #244]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4939      	ldr	r1, [pc, #228]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	e03a      	b.n	80010a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d020      	beq.n	8001076 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001034:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <HAL_RCC_OscConfig+0x270>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fc6b 	bl	8000914 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff fc67 	bl	8000914 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e1a1      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4927      	ldr	r1, [pc, #156]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e015      	b.n	80010a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <HAL_RCC_OscConfig+0x270>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fc4a 	bl	8000914 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fc46 	bl	8000914 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e180      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d03a      	beq.n	8001124 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d019      	beq.n	80010ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <HAL_RCC_OscConfig+0x274>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010bc:	f7ff fc2a 	bl	8000914 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc26 	bl	8000914 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e160      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_RCC_OscConfig+0x26c>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 face 	bl	8001684 <RCC_Delay>
 80010e8:	e01c      	b.n	8001124 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_RCC_OscConfig+0x274>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f0:	f7ff fc10 	bl	8000914 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f6:	e00f      	b.n	8001118 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc0c 	bl	8000914 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d908      	bls.n	8001118 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e146      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	42420000 	.word	0x42420000
 8001114:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001118:	4b92      	ldr	r3, [pc, #584]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e9      	bne.n	80010f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a6 	beq.w	800127e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001136:	4b8b      	ldr	r3, [pc, #556]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10d      	bne.n	800115e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b88      	ldr	r3, [pc, #544]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a87      	ldr	r2, [pc, #540]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b85      	ldr	r3, [pc, #532]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115a:	2301      	movs	r3, #1
 800115c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115e:	4b82      	ldr	r3, [pc, #520]	@ (8001368 <HAL_RCC_OscConfig+0x4c8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001166:	2b00      	cmp	r3, #0
 8001168:	d118      	bne.n	800119c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116a:	4b7f      	ldr	r3, [pc, #508]	@ (8001368 <HAL_RCC_OscConfig+0x4c8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a7e      	ldr	r2, [pc, #504]	@ (8001368 <HAL_RCC_OscConfig+0x4c8>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001176:	f7ff fbcd 	bl	8000914 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117e:	f7ff fbc9 	bl	8000914 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b64      	cmp	r3, #100	@ 0x64
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e103      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001190:	4b75      	ldr	r3, [pc, #468]	@ (8001368 <HAL_RCC_OscConfig+0x4c8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x312>
 80011a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6213      	str	r3, [r2, #32]
 80011b0:	e02d      	b.n	800120e <HAL_RCC_OscConfig+0x36e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x334>
 80011ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a69      	ldr	r2, [pc, #420]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	4b67      	ldr	r3, [pc, #412]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a66      	ldr	r2, [pc, #408]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f023 0304 	bic.w	r3, r3, #4
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	e01c      	b.n	800120e <HAL_RCC_OscConfig+0x36e>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d10c      	bne.n	80011f6 <HAL_RCC_OscConfig+0x356>
 80011dc:	4b61      	ldr	r3, [pc, #388]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a60      	ldr	r2, [pc, #384]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6213      	str	r3, [r2, #32]
 80011e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6213      	str	r3, [r2, #32]
 80011f4:	e00b      	b.n	800120e <HAL_RCC_OscConfig+0x36e>
 80011f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	6213      	str	r3, [r2, #32]
 8001202:	4b58      	ldr	r3, [pc, #352]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a57      	ldr	r2, [pc, #348]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	f023 0304 	bic.w	r3, r3, #4
 800120c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d015      	beq.n	8001242 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fb7d 	bl	8000914 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7ff fb79 	bl	8000914 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e0b1      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001234:	4b4b      	ldr	r3, [pc, #300]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ee      	beq.n	800121e <HAL_RCC_OscConfig+0x37e>
 8001240:	e014      	b.n	800126c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fb67 	bl	8000914 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	e00a      	b.n	8001260 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fb63 	bl	8000914 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e09b      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001260:	4b40      	ldr	r3, [pc, #256]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ee      	bne.n	800124a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d105      	bne.n	800127e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	4b3c      	ldr	r3, [pc, #240]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a3b      	ldr	r2, [pc, #236]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8087 	beq.w	8001396 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001288:	4b36      	ldr	r3, [pc, #216]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b08      	cmp	r3, #8
 8001292:	d061      	beq.n	8001358 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d146      	bne.n	800132a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129c:	4b33      	ldr	r3, [pc, #204]	@ (800136c <HAL_RCC_OscConfig+0x4cc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fb37 	bl	8000914 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff fb33 	bl	8000914 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e06d      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012bc:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012d0:	d108      	bne.n	80012e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012d2:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	4921      	ldr	r1, [pc, #132]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a19      	ldr	r1, [r3, #32]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	430b      	orrs	r3, r1
 80012f6:	491b      	ldr	r1, [pc, #108]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <HAL_RCC_OscConfig+0x4cc>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fb07 	bl	8000914 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fb03 	bl	8000914 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e03d      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x46a>
 8001328:	e035      	b.n	8001396 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_RCC_OscConfig+0x4cc>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff faf0 	bl	8000914 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001338:	f7ff faec 	bl	8000914 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e026      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x498>
 8001356:	e01e      	b.n	8001396 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d107      	bne.n	8001370 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e019      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
 8001364:	40021000 	.word	0x40021000
 8001368:	40007000 	.word	0x40007000
 800136c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_RCC_OscConfig+0x500>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	429a      	cmp	r2, r3
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138e:	429a      	cmp	r2, r3
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0d0      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d910      	bls.n	80013e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b67      	ldr	r3, [pc, #412]	@ (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 0207 	bic.w	r2, r3, #7
 80013ce:	4965      	ldr	r1, [pc, #404]	@ (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b63      	ldr	r3, [pc, #396]	@ (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0b8      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001400:	4b59      	ldr	r3, [pc, #356]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a58      	ldr	r2, [pc, #352]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800140a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001418:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a52      	ldr	r2, [pc, #328]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001422:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001424:	4b50      	ldr	r3, [pc, #320]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	494d      	ldr	r1, [pc, #308]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d040      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b47      	ldr	r3, [pc, #284]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d115      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e07f      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	4b41      	ldr	r3, [pc, #260]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e073      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	4b3d      	ldr	r3, [pc, #244]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06b      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001482:	4b39      	ldr	r3, [pc, #228]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f023 0203 	bic.w	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4936      	ldr	r1, [pc, #216]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001494:	f7ff fa3e 	bl	8000914 <HAL_GetTick>
 8001498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149c:	f7ff fa3a 	bl	8000914 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e053      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 020c 	and.w	r2, r3, #12
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1eb      	bne.n	800149c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c4:	4b27      	ldr	r3, [pc, #156]	@ (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d210      	bcs.n	80014f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 0207 	bic.w	r2, r3, #7
 80014da:	4922      	ldr	r1, [pc, #136]	@ (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e032      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001500:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4916      	ldr	r1, [pc, #88]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	490e      	ldr	r1, [pc, #56]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001532:	f000 f821 	bl	8001578 <HAL_RCC_GetSysClockFreq>
 8001536:	4602      	mov	r2, r0
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	490a      	ldr	r1, [pc, #40]	@ (800156c <HAL_RCC_ClockConfig+0x1c8>)
 8001544:	5ccb      	ldrb	r3, [r1, r3]
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <HAL_RCC_ClockConfig+0x1cc>)
 800154c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_RCC_ClockConfig+0x1d0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f99c 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40022000 	.word	0x40022000
 8001568:	40021000 	.word	0x40021000
 800156c:	08002a34 	.word	0x08002a34
 8001570:	20000000 	.word	0x20000000
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <HAL_RCC_GetSysClockFreq+0x94>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d002      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x30>
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d003      	beq.n	80015ae <HAL_RCC_GetSysClockFreq+0x36>
 80015a6:	e027      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015a8:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x98>)
 80015aa:	613b      	str	r3, [r7, #16]
      break;
 80015ac:	e027      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	0c9b      	lsrs	r3, r3, #18
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	4a17      	ldr	r2, [pc, #92]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d010      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_RCC_GetSysClockFreq+0x94>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	0c5b      	lsrs	r3, r3, #17
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	4a11      	ldr	r2, [pc, #68]	@ (8001618 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x98>)
 80015da:	fb03 f202 	mul.w	r2, r3, r2
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e004      	b.n	80015f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <HAL_RCC_GetSysClockFreq+0xa4>)
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	613b      	str	r3, [r7, #16]
      break;
 80015f6:	e002      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015f8:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x98>)
 80015fa:	613b      	str	r3, [r7, #16]
      break;
 80015fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015fe:	693b      	ldr	r3, [r7, #16]
}
 8001600:	4618      	mov	r0, r3
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	007a1200 	.word	0x007a1200
 8001614:	08002a4c 	.word	0x08002a4c
 8001618:	08002a5c 	.word	0x08002a5c
 800161c:	003d0900 	.word	0x003d0900

08001620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001624:	4b02      	ldr	r3, [pc, #8]	@ (8001630 <HAL_RCC_GetHCLKFreq+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000000 	.word	0x20000000

08001634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001638:	f7ff fff2 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4903      	ldr	r1, [pc, #12]	@ (8001658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	08002a44 	.word	0x08002a44

0800165c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001660:	f7ff ffde 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	0adb      	lsrs	r3, r3, #11
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	4903      	ldr	r1, [pc, #12]	@ (8001680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001678:	4618      	mov	r0, r3
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	08002a44 	.word	0x08002a44

08001684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <RCC_Delay+0x34>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <RCC_Delay+0x38>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0a5b      	lsrs	r3, r3, #9
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016a0:	bf00      	nop
  }
  while (Delay --);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	60fa      	str	r2, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f9      	bne.n	80016a0 <RCC_Delay+0x1c>
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000000 	.word	0x20000000
 80016bc:	10624dd3 	.word	0x10624dd3

080016c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e041      	b.n	8001756 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe ffc6 	bl	8000678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3304      	adds	r3, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f000 f940 	bl	8001984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d001      	beq.n	8001778 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a18      	ldr	r2, [pc, #96]	@ (80017e8 <HAL_TIM_Base_Start+0x88>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00e      	beq.n	80017a8 <HAL_TIM_Base_Start+0x48>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001792:	d009      	beq.n	80017a8 <HAL_TIM_Base_Start+0x48>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a14      	ldr	r2, [pc, #80]	@ (80017ec <HAL_TIM_Base_Start+0x8c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d004      	beq.n	80017a8 <HAL_TIM_Base_Start+0x48>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <HAL_TIM_Base_Start+0x90>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d010      	beq.n	80017dc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ca:	e007      	b.n	80017dc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40000800 	.word	0x40000800

080017f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_TIM_ConfigClockSource+0x1c>
 800180c:	2302      	movs	r3, #2
 800180e:	e0b4      	b.n	800197a <HAL_TIM_ConfigClockSource+0x186>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800182e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001848:	d03e      	beq.n	80018c8 <HAL_TIM_ConfigClockSource+0xd4>
 800184a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800184e:	f200 8087 	bhi.w	8001960 <HAL_TIM_ConfigClockSource+0x16c>
 8001852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001856:	f000 8086 	beq.w	8001966 <HAL_TIM_ConfigClockSource+0x172>
 800185a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800185e:	d87f      	bhi.n	8001960 <HAL_TIM_ConfigClockSource+0x16c>
 8001860:	2b70      	cmp	r3, #112	@ 0x70
 8001862:	d01a      	beq.n	800189a <HAL_TIM_ConfigClockSource+0xa6>
 8001864:	2b70      	cmp	r3, #112	@ 0x70
 8001866:	d87b      	bhi.n	8001960 <HAL_TIM_ConfigClockSource+0x16c>
 8001868:	2b60      	cmp	r3, #96	@ 0x60
 800186a:	d050      	beq.n	800190e <HAL_TIM_ConfigClockSource+0x11a>
 800186c:	2b60      	cmp	r3, #96	@ 0x60
 800186e:	d877      	bhi.n	8001960 <HAL_TIM_ConfigClockSource+0x16c>
 8001870:	2b50      	cmp	r3, #80	@ 0x50
 8001872:	d03c      	beq.n	80018ee <HAL_TIM_ConfigClockSource+0xfa>
 8001874:	2b50      	cmp	r3, #80	@ 0x50
 8001876:	d873      	bhi.n	8001960 <HAL_TIM_ConfigClockSource+0x16c>
 8001878:	2b40      	cmp	r3, #64	@ 0x40
 800187a:	d058      	beq.n	800192e <HAL_TIM_ConfigClockSource+0x13a>
 800187c:	2b40      	cmp	r3, #64	@ 0x40
 800187e:	d86f      	bhi.n	8001960 <HAL_TIM_ConfigClockSource+0x16c>
 8001880:	2b30      	cmp	r3, #48	@ 0x30
 8001882:	d064      	beq.n	800194e <HAL_TIM_ConfigClockSource+0x15a>
 8001884:	2b30      	cmp	r3, #48	@ 0x30
 8001886:	d86b      	bhi.n	8001960 <HAL_TIM_ConfigClockSource+0x16c>
 8001888:	2b20      	cmp	r3, #32
 800188a:	d060      	beq.n	800194e <HAL_TIM_ConfigClockSource+0x15a>
 800188c:	2b20      	cmp	r3, #32
 800188e:	d867      	bhi.n	8001960 <HAL_TIM_ConfigClockSource+0x16c>
 8001890:	2b00      	cmp	r3, #0
 8001892:	d05c      	beq.n	800194e <HAL_TIM_ConfigClockSource+0x15a>
 8001894:	2b10      	cmp	r3, #16
 8001896:	d05a      	beq.n	800194e <HAL_TIM_ConfigClockSource+0x15a>
 8001898:	e062      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80018aa:	f000 f950 	bl	8001b4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80018bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	609a      	str	r2, [r3, #8]
      break;
 80018c6:	e04f      	b.n	8001968 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80018d8:	f000 f939 	bl	8001b4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018ea:	609a      	str	r2, [r3, #8]
      break;
 80018ec:	e03c      	b.n	8001968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018fa:	461a      	mov	r2, r3
 80018fc:	f000 f8b0 	bl	8001a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2150      	movs	r1, #80	@ 0x50
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f907 	bl	8001b1a <TIM_ITRx_SetConfig>
      break;
 800190c:	e02c      	b.n	8001968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800191a:	461a      	mov	r2, r3
 800191c:	f000 f8ce 	bl	8001abc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2160      	movs	r1, #96	@ 0x60
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f8f7 	bl	8001b1a <TIM_ITRx_SetConfig>
      break;
 800192c:	e01c      	b.n	8001968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800193a:	461a      	mov	r2, r3
 800193c:	f000 f890 	bl	8001a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2140      	movs	r1, #64	@ 0x40
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f8e7 	bl	8001b1a <TIM_ITRx_SetConfig>
      break;
 800194c:	e00c      	b.n	8001968 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	4610      	mov	r0, r2
 800195a:	f000 f8de 	bl	8001b1a <TIM_ITRx_SetConfig>
      break;
 800195e:	e003      	b.n	8001968 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
      break;
 8001964:	e000      	b.n	8001968 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a2f      	ldr	r2, [pc, #188]	@ (8001a54 <TIM_Base_SetConfig+0xd0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00b      	beq.n	80019b4 <TIM_Base_SetConfig+0x30>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019a2:	d007      	beq.n	80019b4 <TIM_Base_SetConfig+0x30>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a58 <TIM_Base_SetConfig+0xd4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d003      	beq.n	80019b4 <TIM_Base_SetConfig+0x30>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a2b      	ldr	r2, [pc, #172]	@ (8001a5c <TIM_Base_SetConfig+0xd8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d108      	bne.n	80019c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a22      	ldr	r2, [pc, #136]	@ (8001a54 <TIM_Base_SetConfig+0xd0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00b      	beq.n	80019e6 <TIM_Base_SetConfig+0x62>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d4:	d007      	beq.n	80019e6 <TIM_Base_SetConfig+0x62>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <TIM_Base_SetConfig+0xd4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d003      	beq.n	80019e6 <TIM_Base_SetConfig+0x62>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a5c <TIM_Base_SetConfig+0xd8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d108      	bne.n	80019f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <TIM_Base_SetConfig+0xd0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d103      	bne.n	8001a2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f023 0201 	bic.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40012c00 	.word	0x40012c00
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40000800 	.word	0x40000800

08001a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	f023 0201 	bic.w	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f023 030a 	bic.w	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	621a      	str	r2, [r3, #32]
}
 8001ab2:	bf00      	nop
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	f023 0210 	bic.w	r2, r3, #16
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	031b      	lsls	r3, r3, #12
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001af8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	621a      	str	r2, [r3, #32]
}
 8001b10:	bf00      	nop
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f043 0307 	orr.w	r3, r3, #7
 8001b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b087      	sub	sp, #28
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001b68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	021a      	lsls	r2, r3, #8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	609a      	str	r2, [r3, #8]
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e046      	b.n	8001c32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a16      	ldr	r2, [pc, #88]	@ (8001c3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d00e      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf0:	d009      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d004      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a10      	ldr	r2, [pc, #64]	@ (8001c44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10c      	bne.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40000800 	.word	0x40000800

08001c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e042      	b.n	8001ce0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe fd1e 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	@ 0x24
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f971 	bl	8001f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d175      	bne.n	8001df4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_UART_Transmit+0x2c>
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e06e      	b.n	8001df6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2221      	movs	r2, #33	@ 0x21
 8001d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d26:	f7fe fdf5 	bl	8000914 <HAL_GetTick>
 8001d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	88fa      	ldrh	r2, [r7, #6]
 8001d36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d40:	d108      	bne.n	8001d54 <HAL_UART_Transmit+0x6c>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d104      	bne.n	8001d54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	e003      	b.n	8001d5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d5c:	e02e      	b.n	8001dbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2180      	movs	r1, #128	@ 0x80
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f848 	bl	8001dfe <UART_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e03a      	b.n	8001df6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10b      	bne.n	8001d9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	3302      	adds	r3, #2
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	e007      	b.n	8001dae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	3301      	adds	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1cb      	bne.n	8001d5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2140      	movs	r1, #64	@ 0x40
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f814 	bl	8001dfe <UART_WaitOnFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e006      	b.n	8001df6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e0e:	e03b      	b.n	8001e88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e16:	d037      	beq.n	8001e88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e18:	f7fe fd7c 	bl	8000914 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	6a3a      	ldr	r2, [r7, #32]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d302      	bcc.n	8001e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e03a      	b.n	8001ea8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d023      	beq.n	8001e88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b80      	cmp	r3, #128	@ 0x80
 8001e44:	d020      	beq.n	8001e88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b40      	cmp	r3, #64	@ 0x40
 8001e4a:	d01d      	beq.n	8001e88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d116      	bne.n	8001e88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f81d 	bl	8001eb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2208      	movs	r2, #8
 8001e7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e00f      	b.n	8001ea8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d0b4      	beq.n	8001e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b095      	sub	sp, #84	@ 0x54
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec2:	e853 3f00 	ldrex	r3, [r3]
 8001ec6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ed8:	643a      	str	r2, [r7, #64]	@ 0x40
 8001eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001edc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ede:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ee0:	e841 2300 	strex	r3, r2, [r1]
 8001ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e5      	bne.n	8001eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3314      	adds	r3, #20
 8001ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	e853 3f00 	ldrex	r3, [r3]
 8001efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3314      	adds	r3, #20
 8001f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f14:	e841 2300 	strex	r3, r2, [r1]
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e5      	bne.n	8001eec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d119      	bne.n	8001f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	e853 3f00 	ldrex	r3, [r3]
 8001f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f023 0310 	bic.w	r3, r3, #16
 8001f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	330c      	adds	r3, #12
 8001f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f48:	61ba      	str	r2, [r7, #24]
 8001f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f4c:	6979      	ldr	r1, [r7, #20]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	e841 2300 	strex	r3, r2, [r1]
 8001f54:	613b      	str	r3, [r7, #16]
   return(result);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e5      	bne.n	8001f28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f6a:	bf00      	nop
 8001f6c:	3754      	adds	r7, #84	@ 0x54
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001fae:	f023 030c 	bic.w	r3, r3, #12
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8002088 <UART_SetConfig+0x114>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d103      	bne.n	8001fe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fdc:	f7ff fb3e 	bl	800165c <HAL_RCC_GetPCLK2Freq>
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	e002      	b.n	8001fea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fe4:	f7ff fb26 	bl	8001634 <HAL_RCC_GetPCLK1Freq>
 8001fe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009a      	lsls	r2, r3, #2
 8001ff4:	441a      	add	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	4a22      	ldr	r2, [pc, #136]	@ (800208c <UART_SetConfig+0x118>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	0119      	lsls	r1, r3, #4
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	009a      	lsls	r2, r3, #2
 8002014:	441a      	add	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002020:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <UART_SetConfig+0x118>)
 8002022:	fba3 0302 	umull	r0, r3, r3, r2
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2064      	movs	r0, #100	@ 0x64
 800202a:	fb00 f303 	mul.w	r3, r0, r3
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	3332      	adds	r3, #50	@ 0x32
 8002034:	4a15      	ldr	r2, [pc, #84]	@ (800208c <UART_SetConfig+0x118>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002040:	4419      	add	r1, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	009a      	lsls	r2, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fbb2 f2f3 	udiv	r2, r2, r3
 8002058:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <UART_SetConfig+0x118>)
 800205a:	fba3 0302 	umull	r0, r3, r3, r2
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2064      	movs	r0, #100	@ 0x64
 8002062:	fb00 f303 	mul.w	r3, r0, r3
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	3332      	adds	r3, #50	@ 0x32
 800206c:	4a07      	ldr	r2, [pc, #28]	@ (800208c <UART_SetConfig+0x118>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	f003 020f 	and.w	r2, r3, #15
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	440a      	add	r2, r1
 800207e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40013800 	.word	0x40013800
 800208c:	51eb851f 	.word	0x51eb851f

08002090 <siprintf>:
 8002090:	b40e      	push	{r1, r2, r3}
 8002092:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002096:	b510      	push	{r4, lr}
 8002098:	2400      	movs	r4, #0
 800209a:	b09d      	sub	sp, #116	@ 0x74
 800209c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800209e:	9002      	str	r0, [sp, #8]
 80020a0:	9006      	str	r0, [sp, #24]
 80020a2:	9107      	str	r1, [sp, #28]
 80020a4:	9104      	str	r1, [sp, #16]
 80020a6:	4809      	ldr	r0, [pc, #36]	@ (80020cc <siprintf+0x3c>)
 80020a8:	4909      	ldr	r1, [pc, #36]	@ (80020d0 <siprintf+0x40>)
 80020aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80020ae:	9105      	str	r1, [sp, #20]
 80020b0:	6800      	ldr	r0, [r0, #0]
 80020b2:	a902      	add	r1, sp, #8
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80020b8:	f000 f992 	bl	80023e0 <_svfiprintf_r>
 80020bc:	9b02      	ldr	r3, [sp, #8]
 80020be:	701c      	strb	r4, [r3, #0]
 80020c0:	b01d      	add	sp, #116	@ 0x74
 80020c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020c6:	b003      	add	sp, #12
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	ffff0208 	.word	0xffff0208

080020d4 <memset>:
 80020d4:	4603      	mov	r3, r0
 80020d6:	4402      	add	r2, r0
 80020d8:	4293      	cmp	r3, r2
 80020da:	d100      	bne.n	80020de <memset+0xa>
 80020dc:	4770      	bx	lr
 80020de:	f803 1b01 	strb.w	r1, [r3], #1
 80020e2:	e7f9      	b.n	80020d8 <memset+0x4>

080020e4 <__errno>:
 80020e4:	4b01      	ldr	r3, [pc, #4]	@ (80020ec <__errno+0x8>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000000c 	.word	0x2000000c

080020f0 <__libc_init_array>:
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	2600      	movs	r6, #0
 80020f4:	4d0c      	ldr	r5, [pc, #48]	@ (8002128 <__libc_init_array+0x38>)
 80020f6:	4c0d      	ldr	r4, [pc, #52]	@ (800212c <__libc_init_array+0x3c>)
 80020f8:	1b64      	subs	r4, r4, r5
 80020fa:	10a4      	asrs	r4, r4, #2
 80020fc:	42a6      	cmp	r6, r4
 80020fe:	d109      	bne.n	8002114 <__libc_init_array+0x24>
 8002100:	f000 fc76 	bl	80029f0 <_init>
 8002104:	2600      	movs	r6, #0
 8002106:	4d0a      	ldr	r5, [pc, #40]	@ (8002130 <__libc_init_array+0x40>)
 8002108:	4c0a      	ldr	r4, [pc, #40]	@ (8002134 <__libc_init_array+0x44>)
 800210a:	1b64      	subs	r4, r4, r5
 800210c:	10a4      	asrs	r4, r4, #2
 800210e:	42a6      	cmp	r6, r4
 8002110:	d105      	bne.n	800211e <__libc_init_array+0x2e>
 8002112:	bd70      	pop	{r4, r5, r6, pc}
 8002114:	f855 3b04 	ldr.w	r3, [r5], #4
 8002118:	4798      	blx	r3
 800211a:	3601      	adds	r6, #1
 800211c:	e7ee      	b.n	80020fc <__libc_init_array+0xc>
 800211e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002122:	4798      	blx	r3
 8002124:	3601      	adds	r6, #1
 8002126:	e7f2      	b.n	800210e <__libc_init_array+0x1e>
 8002128:	08002a9c 	.word	0x08002a9c
 800212c:	08002a9c 	.word	0x08002a9c
 8002130:	08002a9c 	.word	0x08002a9c
 8002134:	08002aa0 	.word	0x08002aa0

08002138 <__retarget_lock_acquire_recursive>:
 8002138:	4770      	bx	lr

0800213a <__retarget_lock_release_recursive>:
 800213a:	4770      	bx	lr

0800213c <_free_r>:
 800213c:	b538      	push	{r3, r4, r5, lr}
 800213e:	4605      	mov	r5, r0
 8002140:	2900      	cmp	r1, #0
 8002142:	d040      	beq.n	80021c6 <_free_r+0x8a>
 8002144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002148:	1f0c      	subs	r4, r1, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	bfb8      	it	lt
 800214e:	18e4      	addlt	r4, r4, r3
 8002150:	f000 f8de 	bl	8002310 <__malloc_lock>
 8002154:	4a1c      	ldr	r2, [pc, #112]	@ (80021c8 <_free_r+0x8c>)
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	b933      	cbnz	r3, 8002168 <_free_r+0x2c>
 800215a:	6063      	str	r3, [r4, #4]
 800215c:	6014      	str	r4, [r2, #0]
 800215e:	4628      	mov	r0, r5
 8002160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002164:	f000 b8da 	b.w	800231c <__malloc_unlock>
 8002168:	42a3      	cmp	r3, r4
 800216a:	d908      	bls.n	800217e <_free_r+0x42>
 800216c:	6820      	ldr	r0, [r4, #0]
 800216e:	1821      	adds	r1, r4, r0
 8002170:	428b      	cmp	r3, r1
 8002172:	bf01      	itttt	eq
 8002174:	6819      	ldreq	r1, [r3, #0]
 8002176:	685b      	ldreq	r3, [r3, #4]
 8002178:	1809      	addeq	r1, r1, r0
 800217a:	6021      	streq	r1, [r4, #0]
 800217c:	e7ed      	b.n	800215a <_free_r+0x1e>
 800217e:	461a      	mov	r2, r3
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	b10b      	cbz	r3, 8002188 <_free_r+0x4c>
 8002184:	42a3      	cmp	r3, r4
 8002186:	d9fa      	bls.n	800217e <_free_r+0x42>
 8002188:	6811      	ldr	r1, [r2, #0]
 800218a:	1850      	adds	r0, r2, r1
 800218c:	42a0      	cmp	r0, r4
 800218e:	d10b      	bne.n	80021a8 <_free_r+0x6c>
 8002190:	6820      	ldr	r0, [r4, #0]
 8002192:	4401      	add	r1, r0
 8002194:	1850      	adds	r0, r2, r1
 8002196:	4283      	cmp	r3, r0
 8002198:	6011      	str	r1, [r2, #0]
 800219a:	d1e0      	bne.n	800215e <_free_r+0x22>
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4408      	add	r0, r1
 80021a2:	6010      	str	r0, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	e7da      	b.n	800215e <_free_r+0x22>
 80021a8:	d902      	bls.n	80021b0 <_free_r+0x74>
 80021aa:	230c      	movs	r3, #12
 80021ac:	602b      	str	r3, [r5, #0]
 80021ae:	e7d6      	b.n	800215e <_free_r+0x22>
 80021b0:	6820      	ldr	r0, [r4, #0]
 80021b2:	1821      	adds	r1, r4, r0
 80021b4:	428b      	cmp	r3, r1
 80021b6:	bf01      	itttt	eq
 80021b8:	6819      	ldreq	r1, [r3, #0]
 80021ba:	685b      	ldreq	r3, [r3, #4]
 80021bc:	1809      	addeq	r1, r1, r0
 80021be:	6021      	streq	r1, [r4, #0]
 80021c0:	6063      	str	r3, [r4, #4]
 80021c2:	6054      	str	r4, [r2, #4]
 80021c4:	e7cb      	b.n	800215e <_free_r+0x22>
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
 80021c8:	20000258 	.word	0x20000258

080021cc <sbrk_aligned>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	4e0f      	ldr	r6, [pc, #60]	@ (800220c <sbrk_aligned+0x40>)
 80021d0:	460c      	mov	r4, r1
 80021d2:	6831      	ldr	r1, [r6, #0]
 80021d4:	4605      	mov	r5, r0
 80021d6:	b911      	cbnz	r1, 80021de <sbrk_aligned+0x12>
 80021d8:	f000 fba8 	bl	800292c <_sbrk_r>
 80021dc:	6030      	str	r0, [r6, #0]
 80021de:	4621      	mov	r1, r4
 80021e0:	4628      	mov	r0, r5
 80021e2:	f000 fba3 	bl	800292c <_sbrk_r>
 80021e6:	1c43      	adds	r3, r0, #1
 80021e8:	d103      	bne.n	80021f2 <sbrk_aligned+0x26>
 80021ea:	f04f 34ff 	mov.w	r4, #4294967295
 80021ee:	4620      	mov	r0, r4
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
 80021f2:	1cc4      	adds	r4, r0, #3
 80021f4:	f024 0403 	bic.w	r4, r4, #3
 80021f8:	42a0      	cmp	r0, r4
 80021fa:	d0f8      	beq.n	80021ee <sbrk_aligned+0x22>
 80021fc:	1a21      	subs	r1, r4, r0
 80021fe:	4628      	mov	r0, r5
 8002200:	f000 fb94 	bl	800292c <_sbrk_r>
 8002204:	3001      	adds	r0, #1
 8002206:	d1f2      	bne.n	80021ee <sbrk_aligned+0x22>
 8002208:	e7ef      	b.n	80021ea <sbrk_aligned+0x1e>
 800220a:	bf00      	nop
 800220c:	20000254 	.word	0x20000254

08002210 <_malloc_r>:
 8002210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002214:	1ccd      	adds	r5, r1, #3
 8002216:	f025 0503 	bic.w	r5, r5, #3
 800221a:	3508      	adds	r5, #8
 800221c:	2d0c      	cmp	r5, #12
 800221e:	bf38      	it	cc
 8002220:	250c      	movcc	r5, #12
 8002222:	2d00      	cmp	r5, #0
 8002224:	4606      	mov	r6, r0
 8002226:	db01      	blt.n	800222c <_malloc_r+0x1c>
 8002228:	42a9      	cmp	r1, r5
 800222a:	d904      	bls.n	8002236 <_malloc_r+0x26>
 800222c:	230c      	movs	r3, #12
 800222e:	6033      	str	r3, [r6, #0]
 8002230:	2000      	movs	r0, #0
 8002232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800230c <_malloc_r+0xfc>
 800223a:	f000 f869 	bl	8002310 <__malloc_lock>
 800223e:	f8d8 3000 	ldr.w	r3, [r8]
 8002242:	461c      	mov	r4, r3
 8002244:	bb44      	cbnz	r4, 8002298 <_malloc_r+0x88>
 8002246:	4629      	mov	r1, r5
 8002248:	4630      	mov	r0, r6
 800224a:	f7ff ffbf 	bl	80021cc <sbrk_aligned>
 800224e:	1c43      	adds	r3, r0, #1
 8002250:	4604      	mov	r4, r0
 8002252:	d158      	bne.n	8002306 <_malloc_r+0xf6>
 8002254:	f8d8 4000 	ldr.w	r4, [r8]
 8002258:	4627      	mov	r7, r4
 800225a:	2f00      	cmp	r7, #0
 800225c:	d143      	bne.n	80022e6 <_malloc_r+0xd6>
 800225e:	2c00      	cmp	r4, #0
 8002260:	d04b      	beq.n	80022fa <_malloc_r+0xea>
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	4639      	mov	r1, r7
 8002266:	4630      	mov	r0, r6
 8002268:	eb04 0903 	add.w	r9, r4, r3
 800226c:	f000 fb5e 	bl	800292c <_sbrk_r>
 8002270:	4581      	cmp	r9, r0
 8002272:	d142      	bne.n	80022fa <_malloc_r+0xea>
 8002274:	6821      	ldr	r1, [r4, #0]
 8002276:	4630      	mov	r0, r6
 8002278:	1a6d      	subs	r5, r5, r1
 800227a:	4629      	mov	r1, r5
 800227c:	f7ff ffa6 	bl	80021cc <sbrk_aligned>
 8002280:	3001      	adds	r0, #1
 8002282:	d03a      	beq.n	80022fa <_malloc_r+0xea>
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	442b      	add	r3, r5
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	f8d8 3000 	ldr.w	r3, [r8]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	bb62      	cbnz	r2, 80022ec <_malloc_r+0xdc>
 8002292:	f8c8 7000 	str.w	r7, [r8]
 8002296:	e00f      	b.n	80022b8 <_malloc_r+0xa8>
 8002298:	6822      	ldr	r2, [r4, #0]
 800229a:	1b52      	subs	r2, r2, r5
 800229c:	d420      	bmi.n	80022e0 <_malloc_r+0xd0>
 800229e:	2a0b      	cmp	r2, #11
 80022a0:	d917      	bls.n	80022d2 <_malloc_r+0xc2>
 80022a2:	1961      	adds	r1, r4, r5
 80022a4:	42a3      	cmp	r3, r4
 80022a6:	6025      	str	r5, [r4, #0]
 80022a8:	bf18      	it	ne
 80022aa:	6059      	strne	r1, [r3, #4]
 80022ac:	6863      	ldr	r3, [r4, #4]
 80022ae:	bf08      	it	eq
 80022b0:	f8c8 1000 	streq.w	r1, [r8]
 80022b4:	5162      	str	r2, [r4, r5]
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	4630      	mov	r0, r6
 80022ba:	f000 f82f 	bl	800231c <__malloc_unlock>
 80022be:	f104 000b 	add.w	r0, r4, #11
 80022c2:	1d23      	adds	r3, r4, #4
 80022c4:	f020 0007 	bic.w	r0, r0, #7
 80022c8:	1ac2      	subs	r2, r0, r3
 80022ca:	bf1c      	itt	ne
 80022cc:	1a1b      	subne	r3, r3, r0
 80022ce:	50a3      	strne	r3, [r4, r2]
 80022d0:	e7af      	b.n	8002232 <_malloc_r+0x22>
 80022d2:	6862      	ldr	r2, [r4, #4]
 80022d4:	42a3      	cmp	r3, r4
 80022d6:	bf0c      	ite	eq
 80022d8:	f8c8 2000 	streq.w	r2, [r8]
 80022dc:	605a      	strne	r2, [r3, #4]
 80022de:	e7eb      	b.n	80022b8 <_malloc_r+0xa8>
 80022e0:	4623      	mov	r3, r4
 80022e2:	6864      	ldr	r4, [r4, #4]
 80022e4:	e7ae      	b.n	8002244 <_malloc_r+0x34>
 80022e6:	463c      	mov	r4, r7
 80022e8:	687f      	ldr	r7, [r7, #4]
 80022ea:	e7b6      	b.n	800225a <_malloc_r+0x4a>
 80022ec:	461a      	mov	r2, r3
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	d1fb      	bne.n	80022ec <_malloc_r+0xdc>
 80022f4:	2300      	movs	r3, #0
 80022f6:	6053      	str	r3, [r2, #4]
 80022f8:	e7de      	b.n	80022b8 <_malloc_r+0xa8>
 80022fa:	230c      	movs	r3, #12
 80022fc:	4630      	mov	r0, r6
 80022fe:	6033      	str	r3, [r6, #0]
 8002300:	f000 f80c 	bl	800231c <__malloc_unlock>
 8002304:	e794      	b.n	8002230 <_malloc_r+0x20>
 8002306:	6005      	str	r5, [r0, #0]
 8002308:	e7d6      	b.n	80022b8 <_malloc_r+0xa8>
 800230a:	bf00      	nop
 800230c:	20000258 	.word	0x20000258

08002310 <__malloc_lock>:
 8002310:	4801      	ldr	r0, [pc, #4]	@ (8002318 <__malloc_lock+0x8>)
 8002312:	f7ff bf11 	b.w	8002138 <__retarget_lock_acquire_recursive>
 8002316:	bf00      	nop
 8002318:	20000250 	.word	0x20000250

0800231c <__malloc_unlock>:
 800231c:	4801      	ldr	r0, [pc, #4]	@ (8002324 <__malloc_unlock+0x8>)
 800231e:	f7ff bf0c 	b.w	800213a <__retarget_lock_release_recursive>
 8002322:	bf00      	nop
 8002324:	20000250 	.word	0x20000250

08002328 <__ssputs_r>:
 8002328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800232c:	461f      	mov	r7, r3
 800232e:	688e      	ldr	r6, [r1, #8]
 8002330:	4682      	mov	sl, r0
 8002332:	42be      	cmp	r6, r7
 8002334:	460c      	mov	r4, r1
 8002336:	4690      	mov	r8, r2
 8002338:	680b      	ldr	r3, [r1, #0]
 800233a:	d82d      	bhi.n	8002398 <__ssputs_r+0x70>
 800233c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002340:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002344:	d026      	beq.n	8002394 <__ssputs_r+0x6c>
 8002346:	6965      	ldr	r5, [r4, #20]
 8002348:	6909      	ldr	r1, [r1, #16]
 800234a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800234e:	eba3 0901 	sub.w	r9, r3, r1
 8002352:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002356:	1c7b      	adds	r3, r7, #1
 8002358:	444b      	add	r3, r9
 800235a:	106d      	asrs	r5, r5, #1
 800235c:	429d      	cmp	r5, r3
 800235e:	bf38      	it	cc
 8002360:	461d      	movcc	r5, r3
 8002362:	0553      	lsls	r3, r2, #21
 8002364:	d527      	bpl.n	80023b6 <__ssputs_r+0x8e>
 8002366:	4629      	mov	r1, r5
 8002368:	f7ff ff52 	bl	8002210 <_malloc_r>
 800236c:	4606      	mov	r6, r0
 800236e:	b360      	cbz	r0, 80023ca <__ssputs_r+0xa2>
 8002370:	464a      	mov	r2, r9
 8002372:	6921      	ldr	r1, [r4, #16]
 8002374:	f000 faf8 	bl	8002968 <memcpy>
 8002378:	89a3      	ldrh	r3, [r4, #12]
 800237a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800237e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002382:	81a3      	strh	r3, [r4, #12]
 8002384:	6126      	str	r6, [r4, #16]
 8002386:	444e      	add	r6, r9
 8002388:	6026      	str	r6, [r4, #0]
 800238a:	463e      	mov	r6, r7
 800238c:	6165      	str	r5, [r4, #20]
 800238e:	eba5 0509 	sub.w	r5, r5, r9
 8002392:	60a5      	str	r5, [r4, #8]
 8002394:	42be      	cmp	r6, r7
 8002396:	d900      	bls.n	800239a <__ssputs_r+0x72>
 8002398:	463e      	mov	r6, r7
 800239a:	4632      	mov	r2, r6
 800239c:	4641      	mov	r1, r8
 800239e:	6820      	ldr	r0, [r4, #0]
 80023a0:	f000 faaa 	bl	80028f8 <memmove>
 80023a4:	2000      	movs	r0, #0
 80023a6:	68a3      	ldr	r3, [r4, #8]
 80023a8:	1b9b      	subs	r3, r3, r6
 80023aa:	60a3      	str	r3, [r4, #8]
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	4433      	add	r3, r6
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b6:	462a      	mov	r2, r5
 80023b8:	f000 fae4 	bl	8002984 <_realloc_r>
 80023bc:	4606      	mov	r6, r0
 80023be:	2800      	cmp	r0, #0
 80023c0:	d1e0      	bne.n	8002384 <__ssputs_r+0x5c>
 80023c2:	4650      	mov	r0, sl
 80023c4:	6921      	ldr	r1, [r4, #16]
 80023c6:	f7ff feb9 	bl	800213c <_free_r>
 80023ca:	230c      	movs	r3, #12
 80023cc:	f8ca 3000 	str.w	r3, [sl]
 80023d0:	89a3      	ldrh	r3, [r4, #12]
 80023d2:	f04f 30ff 	mov.w	r0, #4294967295
 80023d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023da:	81a3      	strh	r3, [r4, #12]
 80023dc:	e7e9      	b.n	80023b2 <__ssputs_r+0x8a>
	...

080023e0 <_svfiprintf_r>:
 80023e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e4:	4698      	mov	r8, r3
 80023e6:	898b      	ldrh	r3, [r1, #12]
 80023e8:	4607      	mov	r7, r0
 80023ea:	061b      	lsls	r3, r3, #24
 80023ec:	460d      	mov	r5, r1
 80023ee:	4614      	mov	r4, r2
 80023f0:	b09d      	sub	sp, #116	@ 0x74
 80023f2:	d510      	bpl.n	8002416 <_svfiprintf_r+0x36>
 80023f4:	690b      	ldr	r3, [r1, #16]
 80023f6:	b973      	cbnz	r3, 8002416 <_svfiprintf_r+0x36>
 80023f8:	2140      	movs	r1, #64	@ 0x40
 80023fa:	f7ff ff09 	bl	8002210 <_malloc_r>
 80023fe:	6028      	str	r0, [r5, #0]
 8002400:	6128      	str	r0, [r5, #16]
 8002402:	b930      	cbnz	r0, 8002412 <_svfiprintf_r+0x32>
 8002404:	230c      	movs	r3, #12
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	b01d      	add	sp, #116	@ 0x74
 800240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002412:	2340      	movs	r3, #64	@ 0x40
 8002414:	616b      	str	r3, [r5, #20]
 8002416:	2300      	movs	r3, #0
 8002418:	9309      	str	r3, [sp, #36]	@ 0x24
 800241a:	2320      	movs	r3, #32
 800241c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002420:	2330      	movs	r3, #48	@ 0x30
 8002422:	f04f 0901 	mov.w	r9, #1
 8002426:	f8cd 800c 	str.w	r8, [sp, #12]
 800242a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80025c4 <_svfiprintf_r+0x1e4>
 800242e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002432:	4623      	mov	r3, r4
 8002434:	469a      	mov	sl, r3
 8002436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800243a:	b10a      	cbz	r2, 8002440 <_svfiprintf_r+0x60>
 800243c:	2a25      	cmp	r2, #37	@ 0x25
 800243e:	d1f9      	bne.n	8002434 <_svfiprintf_r+0x54>
 8002440:	ebba 0b04 	subs.w	fp, sl, r4
 8002444:	d00b      	beq.n	800245e <_svfiprintf_r+0x7e>
 8002446:	465b      	mov	r3, fp
 8002448:	4622      	mov	r2, r4
 800244a:	4629      	mov	r1, r5
 800244c:	4638      	mov	r0, r7
 800244e:	f7ff ff6b 	bl	8002328 <__ssputs_r>
 8002452:	3001      	adds	r0, #1
 8002454:	f000 80a7 	beq.w	80025a6 <_svfiprintf_r+0x1c6>
 8002458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800245a:	445a      	add	r2, fp
 800245c:	9209      	str	r2, [sp, #36]	@ 0x24
 800245e:	f89a 3000 	ldrb.w	r3, [sl]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 809f 	beq.w	80025a6 <_svfiprintf_r+0x1c6>
 8002468:	2300      	movs	r3, #0
 800246a:	f04f 32ff 	mov.w	r2, #4294967295
 800246e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002472:	f10a 0a01 	add.w	sl, sl, #1
 8002476:	9304      	str	r3, [sp, #16]
 8002478:	9307      	str	r3, [sp, #28]
 800247a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800247e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002480:	4654      	mov	r4, sl
 8002482:	2205      	movs	r2, #5
 8002484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002488:	484e      	ldr	r0, [pc, #312]	@ (80025c4 <_svfiprintf_r+0x1e4>)
 800248a:	f000 fa5f 	bl	800294c <memchr>
 800248e:	9a04      	ldr	r2, [sp, #16]
 8002490:	b9d8      	cbnz	r0, 80024ca <_svfiprintf_r+0xea>
 8002492:	06d0      	lsls	r0, r2, #27
 8002494:	bf44      	itt	mi
 8002496:	2320      	movmi	r3, #32
 8002498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800249c:	0711      	lsls	r1, r2, #28
 800249e:	bf44      	itt	mi
 80024a0:	232b      	movmi	r3, #43	@ 0x2b
 80024a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80024a6:	f89a 3000 	ldrb.w	r3, [sl]
 80024aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80024ac:	d015      	beq.n	80024da <_svfiprintf_r+0xfa>
 80024ae:	4654      	mov	r4, sl
 80024b0:	2000      	movs	r0, #0
 80024b2:	f04f 0c0a 	mov.w	ip, #10
 80024b6:	9a07      	ldr	r2, [sp, #28]
 80024b8:	4621      	mov	r1, r4
 80024ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024be:	3b30      	subs	r3, #48	@ 0x30
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d94b      	bls.n	800255c <_svfiprintf_r+0x17c>
 80024c4:	b1b0      	cbz	r0, 80024f4 <_svfiprintf_r+0x114>
 80024c6:	9207      	str	r2, [sp, #28]
 80024c8:	e014      	b.n	80024f4 <_svfiprintf_r+0x114>
 80024ca:	eba0 0308 	sub.w	r3, r0, r8
 80024ce:	fa09 f303 	lsl.w	r3, r9, r3
 80024d2:	4313      	orrs	r3, r2
 80024d4:	46a2      	mov	sl, r4
 80024d6:	9304      	str	r3, [sp, #16]
 80024d8:	e7d2      	b.n	8002480 <_svfiprintf_r+0xa0>
 80024da:	9b03      	ldr	r3, [sp, #12]
 80024dc:	1d19      	adds	r1, r3, #4
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	9103      	str	r1, [sp, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bfbb      	ittet	lt
 80024e6:	425b      	neglt	r3, r3
 80024e8:	f042 0202 	orrlt.w	r2, r2, #2
 80024ec:	9307      	strge	r3, [sp, #28]
 80024ee:	9307      	strlt	r3, [sp, #28]
 80024f0:	bfb8      	it	lt
 80024f2:	9204      	strlt	r2, [sp, #16]
 80024f4:	7823      	ldrb	r3, [r4, #0]
 80024f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80024f8:	d10a      	bne.n	8002510 <_svfiprintf_r+0x130>
 80024fa:	7863      	ldrb	r3, [r4, #1]
 80024fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80024fe:	d132      	bne.n	8002566 <_svfiprintf_r+0x186>
 8002500:	9b03      	ldr	r3, [sp, #12]
 8002502:	3402      	adds	r4, #2
 8002504:	1d1a      	adds	r2, r3, #4
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	9203      	str	r2, [sp, #12]
 800250a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800250e:	9305      	str	r3, [sp, #20]
 8002510:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80025c8 <_svfiprintf_r+0x1e8>
 8002514:	2203      	movs	r2, #3
 8002516:	4650      	mov	r0, sl
 8002518:	7821      	ldrb	r1, [r4, #0]
 800251a:	f000 fa17 	bl	800294c <memchr>
 800251e:	b138      	cbz	r0, 8002530 <_svfiprintf_r+0x150>
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	9b04      	ldr	r3, [sp, #16]
 8002524:	eba0 000a 	sub.w	r0, r0, sl
 8002528:	4082      	lsls	r2, r0
 800252a:	4313      	orrs	r3, r2
 800252c:	3401      	adds	r4, #1
 800252e:	9304      	str	r3, [sp, #16]
 8002530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002534:	2206      	movs	r2, #6
 8002536:	4825      	ldr	r0, [pc, #148]	@ (80025cc <_svfiprintf_r+0x1ec>)
 8002538:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800253c:	f000 fa06 	bl	800294c <memchr>
 8002540:	2800      	cmp	r0, #0
 8002542:	d036      	beq.n	80025b2 <_svfiprintf_r+0x1d2>
 8002544:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <_svfiprintf_r+0x1f0>)
 8002546:	bb1b      	cbnz	r3, 8002590 <_svfiprintf_r+0x1b0>
 8002548:	9b03      	ldr	r3, [sp, #12]
 800254a:	3307      	adds	r3, #7
 800254c:	f023 0307 	bic.w	r3, r3, #7
 8002550:	3308      	adds	r3, #8
 8002552:	9303      	str	r3, [sp, #12]
 8002554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002556:	4433      	add	r3, r6
 8002558:	9309      	str	r3, [sp, #36]	@ 0x24
 800255a:	e76a      	b.n	8002432 <_svfiprintf_r+0x52>
 800255c:	460c      	mov	r4, r1
 800255e:	2001      	movs	r0, #1
 8002560:	fb0c 3202 	mla	r2, ip, r2, r3
 8002564:	e7a8      	b.n	80024b8 <_svfiprintf_r+0xd8>
 8002566:	2300      	movs	r3, #0
 8002568:	f04f 0c0a 	mov.w	ip, #10
 800256c:	4619      	mov	r1, r3
 800256e:	3401      	adds	r4, #1
 8002570:	9305      	str	r3, [sp, #20]
 8002572:	4620      	mov	r0, r4
 8002574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002578:	3a30      	subs	r2, #48	@ 0x30
 800257a:	2a09      	cmp	r2, #9
 800257c:	d903      	bls.n	8002586 <_svfiprintf_r+0x1a6>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0c6      	beq.n	8002510 <_svfiprintf_r+0x130>
 8002582:	9105      	str	r1, [sp, #20]
 8002584:	e7c4      	b.n	8002510 <_svfiprintf_r+0x130>
 8002586:	4604      	mov	r4, r0
 8002588:	2301      	movs	r3, #1
 800258a:	fb0c 2101 	mla	r1, ip, r1, r2
 800258e:	e7f0      	b.n	8002572 <_svfiprintf_r+0x192>
 8002590:	ab03      	add	r3, sp, #12
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	462a      	mov	r2, r5
 8002596:	4638      	mov	r0, r7
 8002598:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <_svfiprintf_r+0x1f4>)
 800259a:	a904      	add	r1, sp, #16
 800259c:	f3af 8000 	nop.w
 80025a0:	1c42      	adds	r2, r0, #1
 80025a2:	4606      	mov	r6, r0
 80025a4:	d1d6      	bne.n	8002554 <_svfiprintf_r+0x174>
 80025a6:	89ab      	ldrh	r3, [r5, #12]
 80025a8:	065b      	lsls	r3, r3, #25
 80025aa:	f53f af2d 	bmi.w	8002408 <_svfiprintf_r+0x28>
 80025ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80025b0:	e72c      	b.n	800240c <_svfiprintf_r+0x2c>
 80025b2:	ab03      	add	r3, sp, #12
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	462a      	mov	r2, r5
 80025b8:	4638      	mov	r0, r7
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <_svfiprintf_r+0x1f4>)
 80025bc:	a904      	add	r1, sp, #16
 80025be:	f000 f87d 	bl	80026bc <_printf_i>
 80025c2:	e7ed      	b.n	80025a0 <_svfiprintf_r+0x1c0>
 80025c4:	08002a5e 	.word	0x08002a5e
 80025c8:	08002a64 	.word	0x08002a64
 80025cc:	08002a68 	.word	0x08002a68
 80025d0:	00000000 	.word	0x00000000
 80025d4:	08002329 	.word	0x08002329

080025d8 <_printf_common>:
 80025d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025dc:	4616      	mov	r6, r2
 80025de:	4698      	mov	r8, r3
 80025e0:	688a      	ldr	r2, [r1, #8]
 80025e2:	690b      	ldr	r3, [r1, #16]
 80025e4:	4607      	mov	r7, r0
 80025e6:	4293      	cmp	r3, r2
 80025e8:	bfb8      	it	lt
 80025ea:	4613      	movlt	r3, r2
 80025ec:	6033      	str	r3, [r6, #0]
 80025ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80025f2:	460c      	mov	r4, r1
 80025f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80025f8:	b10a      	cbz	r2, 80025fe <_printf_common+0x26>
 80025fa:	3301      	adds	r3, #1
 80025fc:	6033      	str	r3, [r6, #0]
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	0699      	lsls	r1, r3, #26
 8002602:	bf42      	ittt	mi
 8002604:	6833      	ldrmi	r3, [r6, #0]
 8002606:	3302      	addmi	r3, #2
 8002608:	6033      	strmi	r3, [r6, #0]
 800260a:	6825      	ldr	r5, [r4, #0]
 800260c:	f015 0506 	ands.w	r5, r5, #6
 8002610:	d106      	bne.n	8002620 <_printf_common+0x48>
 8002612:	f104 0a19 	add.w	sl, r4, #25
 8002616:	68e3      	ldr	r3, [r4, #12]
 8002618:	6832      	ldr	r2, [r6, #0]
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	42ab      	cmp	r3, r5
 800261e:	dc2b      	bgt.n	8002678 <_printf_common+0xa0>
 8002620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	3b00      	subs	r3, #0
 8002628:	bf18      	it	ne
 800262a:	2301      	movne	r3, #1
 800262c:	0692      	lsls	r2, r2, #26
 800262e:	d430      	bmi.n	8002692 <_printf_common+0xba>
 8002630:	4641      	mov	r1, r8
 8002632:	4638      	mov	r0, r7
 8002634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002638:	47c8      	blx	r9
 800263a:	3001      	adds	r0, #1
 800263c:	d023      	beq.n	8002686 <_printf_common+0xae>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	6922      	ldr	r2, [r4, #16]
 8002642:	f003 0306 	and.w	r3, r3, #6
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf14      	ite	ne
 800264a:	2500      	movne	r5, #0
 800264c:	6833      	ldreq	r3, [r6, #0]
 800264e:	f04f 0600 	mov.w	r6, #0
 8002652:	bf08      	it	eq
 8002654:	68e5      	ldreq	r5, [r4, #12]
 8002656:	f104 041a 	add.w	r4, r4, #26
 800265a:	bf08      	it	eq
 800265c:	1aed      	subeq	r5, r5, r3
 800265e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002662:	bf08      	it	eq
 8002664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002668:	4293      	cmp	r3, r2
 800266a:	bfc4      	itt	gt
 800266c:	1a9b      	subgt	r3, r3, r2
 800266e:	18ed      	addgt	r5, r5, r3
 8002670:	42b5      	cmp	r5, r6
 8002672:	d11a      	bne.n	80026aa <_printf_common+0xd2>
 8002674:	2000      	movs	r0, #0
 8002676:	e008      	b.n	800268a <_printf_common+0xb2>
 8002678:	2301      	movs	r3, #1
 800267a:	4652      	mov	r2, sl
 800267c:	4641      	mov	r1, r8
 800267e:	4638      	mov	r0, r7
 8002680:	47c8      	blx	r9
 8002682:	3001      	adds	r0, #1
 8002684:	d103      	bne.n	800268e <_printf_common+0xb6>
 8002686:	f04f 30ff 	mov.w	r0, #4294967295
 800268a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800268e:	3501      	adds	r5, #1
 8002690:	e7c1      	b.n	8002616 <_printf_common+0x3e>
 8002692:	2030      	movs	r0, #48	@ 0x30
 8002694:	18e1      	adds	r1, r4, r3
 8002696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80026a0:	4422      	add	r2, r4
 80026a2:	3302      	adds	r3, #2
 80026a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80026a8:	e7c2      	b.n	8002630 <_printf_common+0x58>
 80026aa:	2301      	movs	r3, #1
 80026ac:	4622      	mov	r2, r4
 80026ae:	4641      	mov	r1, r8
 80026b0:	4638      	mov	r0, r7
 80026b2:	47c8      	blx	r9
 80026b4:	3001      	adds	r0, #1
 80026b6:	d0e6      	beq.n	8002686 <_printf_common+0xae>
 80026b8:	3601      	adds	r6, #1
 80026ba:	e7d9      	b.n	8002670 <_printf_common+0x98>

080026bc <_printf_i>:
 80026bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026c0:	7e0f      	ldrb	r7, [r1, #24]
 80026c2:	4691      	mov	r9, r2
 80026c4:	2f78      	cmp	r7, #120	@ 0x78
 80026c6:	4680      	mov	r8, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	469a      	mov	sl, r3
 80026cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80026ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80026d2:	d807      	bhi.n	80026e4 <_printf_i+0x28>
 80026d4:	2f62      	cmp	r7, #98	@ 0x62
 80026d6:	d80a      	bhi.n	80026ee <_printf_i+0x32>
 80026d8:	2f00      	cmp	r7, #0
 80026da:	f000 80d1 	beq.w	8002880 <_printf_i+0x1c4>
 80026de:	2f58      	cmp	r7, #88	@ 0x58
 80026e0:	f000 80b8 	beq.w	8002854 <_printf_i+0x198>
 80026e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80026ec:	e03a      	b.n	8002764 <_printf_i+0xa8>
 80026ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80026f2:	2b15      	cmp	r3, #21
 80026f4:	d8f6      	bhi.n	80026e4 <_printf_i+0x28>
 80026f6:	a101      	add	r1, pc, #4	@ (adr r1, 80026fc <_printf_i+0x40>)
 80026f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026fc:	08002755 	.word	0x08002755
 8002700:	08002769 	.word	0x08002769
 8002704:	080026e5 	.word	0x080026e5
 8002708:	080026e5 	.word	0x080026e5
 800270c:	080026e5 	.word	0x080026e5
 8002710:	080026e5 	.word	0x080026e5
 8002714:	08002769 	.word	0x08002769
 8002718:	080026e5 	.word	0x080026e5
 800271c:	080026e5 	.word	0x080026e5
 8002720:	080026e5 	.word	0x080026e5
 8002724:	080026e5 	.word	0x080026e5
 8002728:	08002867 	.word	0x08002867
 800272c:	08002793 	.word	0x08002793
 8002730:	08002821 	.word	0x08002821
 8002734:	080026e5 	.word	0x080026e5
 8002738:	080026e5 	.word	0x080026e5
 800273c:	08002889 	.word	0x08002889
 8002740:	080026e5 	.word	0x080026e5
 8002744:	08002793 	.word	0x08002793
 8002748:	080026e5 	.word	0x080026e5
 800274c:	080026e5 	.word	0x080026e5
 8002750:	08002829 	.word	0x08002829
 8002754:	6833      	ldr	r3, [r6, #0]
 8002756:	1d1a      	adds	r2, r3, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6032      	str	r2, [r6, #0]
 800275c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002764:	2301      	movs	r3, #1
 8002766:	e09c      	b.n	80028a2 <_printf_i+0x1e6>
 8002768:	6833      	ldr	r3, [r6, #0]
 800276a:	6820      	ldr	r0, [r4, #0]
 800276c:	1d19      	adds	r1, r3, #4
 800276e:	6031      	str	r1, [r6, #0]
 8002770:	0606      	lsls	r6, r0, #24
 8002772:	d501      	bpl.n	8002778 <_printf_i+0xbc>
 8002774:	681d      	ldr	r5, [r3, #0]
 8002776:	e003      	b.n	8002780 <_printf_i+0xc4>
 8002778:	0645      	lsls	r5, r0, #25
 800277a:	d5fb      	bpl.n	8002774 <_printf_i+0xb8>
 800277c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002780:	2d00      	cmp	r5, #0
 8002782:	da03      	bge.n	800278c <_printf_i+0xd0>
 8002784:	232d      	movs	r3, #45	@ 0x2d
 8002786:	426d      	negs	r5, r5
 8002788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800278c:	230a      	movs	r3, #10
 800278e:	4858      	ldr	r0, [pc, #352]	@ (80028f0 <_printf_i+0x234>)
 8002790:	e011      	b.n	80027b6 <_printf_i+0xfa>
 8002792:	6821      	ldr	r1, [r4, #0]
 8002794:	6833      	ldr	r3, [r6, #0]
 8002796:	0608      	lsls	r0, r1, #24
 8002798:	f853 5b04 	ldr.w	r5, [r3], #4
 800279c:	d402      	bmi.n	80027a4 <_printf_i+0xe8>
 800279e:	0649      	lsls	r1, r1, #25
 80027a0:	bf48      	it	mi
 80027a2:	b2ad      	uxthmi	r5, r5
 80027a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80027a6:	6033      	str	r3, [r6, #0]
 80027a8:	bf14      	ite	ne
 80027aa:	230a      	movne	r3, #10
 80027ac:	2308      	moveq	r3, #8
 80027ae:	4850      	ldr	r0, [pc, #320]	@ (80028f0 <_printf_i+0x234>)
 80027b0:	2100      	movs	r1, #0
 80027b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80027b6:	6866      	ldr	r6, [r4, #4]
 80027b8:	2e00      	cmp	r6, #0
 80027ba:	60a6      	str	r6, [r4, #8]
 80027bc:	db05      	blt.n	80027ca <_printf_i+0x10e>
 80027be:	6821      	ldr	r1, [r4, #0]
 80027c0:	432e      	orrs	r6, r5
 80027c2:	f021 0104 	bic.w	r1, r1, #4
 80027c6:	6021      	str	r1, [r4, #0]
 80027c8:	d04b      	beq.n	8002862 <_printf_i+0x1a6>
 80027ca:	4616      	mov	r6, r2
 80027cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80027d0:	fb03 5711 	mls	r7, r3, r1, r5
 80027d4:	5dc7      	ldrb	r7, [r0, r7]
 80027d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80027da:	462f      	mov	r7, r5
 80027dc:	42bb      	cmp	r3, r7
 80027de:	460d      	mov	r5, r1
 80027e0:	d9f4      	bls.n	80027cc <_printf_i+0x110>
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d10b      	bne.n	80027fe <_printf_i+0x142>
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	07df      	lsls	r7, r3, #31
 80027ea:	d508      	bpl.n	80027fe <_printf_i+0x142>
 80027ec:	6923      	ldr	r3, [r4, #16]
 80027ee:	6861      	ldr	r1, [r4, #4]
 80027f0:	4299      	cmp	r1, r3
 80027f2:	bfde      	ittt	le
 80027f4:	2330      	movle	r3, #48	@ 0x30
 80027f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80027fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80027fe:	1b92      	subs	r2, r2, r6
 8002800:	6122      	str	r2, [r4, #16]
 8002802:	464b      	mov	r3, r9
 8002804:	4621      	mov	r1, r4
 8002806:	4640      	mov	r0, r8
 8002808:	f8cd a000 	str.w	sl, [sp]
 800280c:	aa03      	add	r2, sp, #12
 800280e:	f7ff fee3 	bl	80025d8 <_printf_common>
 8002812:	3001      	adds	r0, #1
 8002814:	d14a      	bne.n	80028ac <_printf_i+0x1f0>
 8002816:	f04f 30ff 	mov.w	r0, #4294967295
 800281a:	b004      	add	sp, #16
 800281c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	f043 0320 	orr.w	r3, r3, #32
 8002826:	6023      	str	r3, [r4, #0]
 8002828:	2778      	movs	r7, #120	@ 0x78
 800282a:	4832      	ldr	r0, [pc, #200]	@ (80028f4 <_printf_i+0x238>)
 800282c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	6831      	ldr	r1, [r6, #0]
 8002834:	061f      	lsls	r7, r3, #24
 8002836:	f851 5b04 	ldr.w	r5, [r1], #4
 800283a:	d402      	bmi.n	8002842 <_printf_i+0x186>
 800283c:	065f      	lsls	r7, r3, #25
 800283e:	bf48      	it	mi
 8002840:	b2ad      	uxthmi	r5, r5
 8002842:	6031      	str	r1, [r6, #0]
 8002844:	07d9      	lsls	r1, r3, #31
 8002846:	bf44      	itt	mi
 8002848:	f043 0320 	orrmi.w	r3, r3, #32
 800284c:	6023      	strmi	r3, [r4, #0]
 800284e:	b11d      	cbz	r5, 8002858 <_printf_i+0x19c>
 8002850:	2310      	movs	r3, #16
 8002852:	e7ad      	b.n	80027b0 <_printf_i+0xf4>
 8002854:	4826      	ldr	r0, [pc, #152]	@ (80028f0 <_printf_i+0x234>)
 8002856:	e7e9      	b.n	800282c <_printf_i+0x170>
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	f023 0320 	bic.w	r3, r3, #32
 800285e:	6023      	str	r3, [r4, #0]
 8002860:	e7f6      	b.n	8002850 <_printf_i+0x194>
 8002862:	4616      	mov	r6, r2
 8002864:	e7bd      	b.n	80027e2 <_printf_i+0x126>
 8002866:	6833      	ldr	r3, [r6, #0]
 8002868:	6825      	ldr	r5, [r4, #0]
 800286a:	1d18      	adds	r0, r3, #4
 800286c:	6961      	ldr	r1, [r4, #20]
 800286e:	6030      	str	r0, [r6, #0]
 8002870:	062e      	lsls	r6, r5, #24
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	d501      	bpl.n	800287a <_printf_i+0x1be>
 8002876:	6019      	str	r1, [r3, #0]
 8002878:	e002      	b.n	8002880 <_printf_i+0x1c4>
 800287a:	0668      	lsls	r0, r5, #25
 800287c:	d5fb      	bpl.n	8002876 <_printf_i+0x1ba>
 800287e:	8019      	strh	r1, [r3, #0]
 8002880:	2300      	movs	r3, #0
 8002882:	4616      	mov	r6, r2
 8002884:	6123      	str	r3, [r4, #16]
 8002886:	e7bc      	b.n	8002802 <_printf_i+0x146>
 8002888:	6833      	ldr	r3, [r6, #0]
 800288a:	2100      	movs	r1, #0
 800288c:	1d1a      	adds	r2, r3, #4
 800288e:	6032      	str	r2, [r6, #0]
 8002890:	681e      	ldr	r6, [r3, #0]
 8002892:	6862      	ldr	r2, [r4, #4]
 8002894:	4630      	mov	r0, r6
 8002896:	f000 f859 	bl	800294c <memchr>
 800289a:	b108      	cbz	r0, 80028a0 <_printf_i+0x1e4>
 800289c:	1b80      	subs	r0, r0, r6
 800289e:	6060      	str	r0, [r4, #4]
 80028a0:	6863      	ldr	r3, [r4, #4]
 80028a2:	6123      	str	r3, [r4, #16]
 80028a4:	2300      	movs	r3, #0
 80028a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028aa:	e7aa      	b.n	8002802 <_printf_i+0x146>
 80028ac:	4632      	mov	r2, r6
 80028ae:	4649      	mov	r1, r9
 80028b0:	4640      	mov	r0, r8
 80028b2:	6923      	ldr	r3, [r4, #16]
 80028b4:	47d0      	blx	sl
 80028b6:	3001      	adds	r0, #1
 80028b8:	d0ad      	beq.n	8002816 <_printf_i+0x15a>
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	079b      	lsls	r3, r3, #30
 80028be:	d413      	bmi.n	80028e8 <_printf_i+0x22c>
 80028c0:	68e0      	ldr	r0, [r4, #12]
 80028c2:	9b03      	ldr	r3, [sp, #12]
 80028c4:	4298      	cmp	r0, r3
 80028c6:	bfb8      	it	lt
 80028c8:	4618      	movlt	r0, r3
 80028ca:	e7a6      	b.n	800281a <_printf_i+0x15e>
 80028cc:	2301      	movs	r3, #1
 80028ce:	4632      	mov	r2, r6
 80028d0:	4649      	mov	r1, r9
 80028d2:	4640      	mov	r0, r8
 80028d4:	47d0      	blx	sl
 80028d6:	3001      	adds	r0, #1
 80028d8:	d09d      	beq.n	8002816 <_printf_i+0x15a>
 80028da:	3501      	adds	r5, #1
 80028dc:	68e3      	ldr	r3, [r4, #12]
 80028de:	9903      	ldr	r1, [sp, #12]
 80028e0:	1a5b      	subs	r3, r3, r1
 80028e2:	42ab      	cmp	r3, r5
 80028e4:	dcf2      	bgt.n	80028cc <_printf_i+0x210>
 80028e6:	e7eb      	b.n	80028c0 <_printf_i+0x204>
 80028e8:	2500      	movs	r5, #0
 80028ea:	f104 0619 	add.w	r6, r4, #25
 80028ee:	e7f5      	b.n	80028dc <_printf_i+0x220>
 80028f0:	08002a6f 	.word	0x08002a6f
 80028f4:	08002a80 	.word	0x08002a80

080028f8 <memmove>:
 80028f8:	4288      	cmp	r0, r1
 80028fa:	b510      	push	{r4, lr}
 80028fc:	eb01 0402 	add.w	r4, r1, r2
 8002900:	d902      	bls.n	8002908 <memmove+0x10>
 8002902:	4284      	cmp	r4, r0
 8002904:	4623      	mov	r3, r4
 8002906:	d807      	bhi.n	8002918 <memmove+0x20>
 8002908:	1e43      	subs	r3, r0, #1
 800290a:	42a1      	cmp	r1, r4
 800290c:	d008      	beq.n	8002920 <memmove+0x28>
 800290e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002916:	e7f8      	b.n	800290a <memmove+0x12>
 8002918:	4601      	mov	r1, r0
 800291a:	4402      	add	r2, r0
 800291c:	428a      	cmp	r2, r1
 800291e:	d100      	bne.n	8002922 <memmove+0x2a>
 8002920:	bd10      	pop	{r4, pc}
 8002922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800292a:	e7f7      	b.n	800291c <memmove+0x24>

0800292c <_sbrk_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	2300      	movs	r3, #0
 8002930:	4d05      	ldr	r5, [pc, #20]	@ (8002948 <_sbrk_r+0x1c>)
 8002932:	4604      	mov	r4, r0
 8002934:	4608      	mov	r0, r1
 8002936:	602b      	str	r3, [r5, #0]
 8002938:	f7fd ff32 	bl	80007a0 <_sbrk>
 800293c:	1c43      	adds	r3, r0, #1
 800293e:	d102      	bne.n	8002946 <_sbrk_r+0x1a>
 8002940:	682b      	ldr	r3, [r5, #0]
 8002942:	b103      	cbz	r3, 8002946 <_sbrk_r+0x1a>
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	bd38      	pop	{r3, r4, r5, pc}
 8002948:	2000024c 	.word	0x2000024c

0800294c <memchr>:
 800294c:	4603      	mov	r3, r0
 800294e:	b510      	push	{r4, lr}
 8002950:	b2c9      	uxtb	r1, r1
 8002952:	4402      	add	r2, r0
 8002954:	4293      	cmp	r3, r2
 8002956:	4618      	mov	r0, r3
 8002958:	d101      	bne.n	800295e <memchr+0x12>
 800295a:	2000      	movs	r0, #0
 800295c:	e003      	b.n	8002966 <memchr+0x1a>
 800295e:	7804      	ldrb	r4, [r0, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	428c      	cmp	r4, r1
 8002964:	d1f6      	bne.n	8002954 <memchr+0x8>
 8002966:	bd10      	pop	{r4, pc}

08002968 <memcpy>:
 8002968:	440a      	add	r2, r1
 800296a:	4291      	cmp	r1, r2
 800296c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002970:	d100      	bne.n	8002974 <memcpy+0xc>
 8002972:	4770      	bx	lr
 8002974:	b510      	push	{r4, lr}
 8002976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800297a:	4291      	cmp	r1, r2
 800297c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002980:	d1f9      	bne.n	8002976 <memcpy+0xe>
 8002982:	bd10      	pop	{r4, pc}

08002984 <_realloc_r>:
 8002984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002988:	4607      	mov	r7, r0
 800298a:	4614      	mov	r4, r2
 800298c:	460d      	mov	r5, r1
 800298e:	b921      	cbnz	r1, 800299a <_realloc_r+0x16>
 8002990:	4611      	mov	r1, r2
 8002992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002996:	f7ff bc3b 	b.w	8002210 <_malloc_r>
 800299a:	b92a      	cbnz	r2, 80029a8 <_realloc_r+0x24>
 800299c:	f7ff fbce 	bl	800213c <_free_r>
 80029a0:	4625      	mov	r5, r4
 80029a2:	4628      	mov	r0, r5
 80029a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029a8:	f000 f81a 	bl	80029e0 <_malloc_usable_size_r>
 80029ac:	4284      	cmp	r4, r0
 80029ae:	4606      	mov	r6, r0
 80029b0:	d802      	bhi.n	80029b8 <_realloc_r+0x34>
 80029b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80029b6:	d8f4      	bhi.n	80029a2 <_realloc_r+0x1e>
 80029b8:	4621      	mov	r1, r4
 80029ba:	4638      	mov	r0, r7
 80029bc:	f7ff fc28 	bl	8002210 <_malloc_r>
 80029c0:	4680      	mov	r8, r0
 80029c2:	b908      	cbnz	r0, 80029c8 <_realloc_r+0x44>
 80029c4:	4645      	mov	r5, r8
 80029c6:	e7ec      	b.n	80029a2 <_realloc_r+0x1e>
 80029c8:	42b4      	cmp	r4, r6
 80029ca:	4622      	mov	r2, r4
 80029cc:	4629      	mov	r1, r5
 80029ce:	bf28      	it	cs
 80029d0:	4632      	movcs	r2, r6
 80029d2:	f7ff ffc9 	bl	8002968 <memcpy>
 80029d6:	4629      	mov	r1, r5
 80029d8:	4638      	mov	r0, r7
 80029da:	f7ff fbaf 	bl	800213c <_free_r>
 80029de:	e7f1      	b.n	80029c4 <_realloc_r+0x40>

080029e0 <_malloc_usable_size_r>:
 80029e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029e4:	1f18      	subs	r0, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bfbc      	itt	lt
 80029ea:	580b      	ldrlt	r3, [r1, r0]
 80029ec:	18c0      	addlt	r0, r0, r3
 80029ee:	4770      	bx	lr

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
