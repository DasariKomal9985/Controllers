
F103C8T6_Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0e8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800b1f8  0800b1f8  0000c1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9c8  0800b9c8  0000d1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b9c8  0800b9c8  0000c9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9d0  0800b9d0  0000d1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9d0  0800b9d0  0000c9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9d4  0800b9d4  0000c9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800b9d8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200001f4  0800bbcc  0000d1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  0800bbcc  0000d974  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011509  00000000  00000000  0000d21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002771  00000000  00000000  0001e726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00020e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd0  00000000  00000000  00021ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ae7  00000000  00000000  00022dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001453c  00000000  00000000  0003c8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009452a  00000000  00000000  00050de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e530d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000605c  00000000  00000000  000e5350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000eb3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b1e0 	.word	0x0800b1e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800b1e0 	.word	0x0800b1e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_d2lz>:
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	2200      	movs	r2, #0
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	460d      	mov	r5, r1
 8000f8e:	f7ff fd15 	bl	80009bc <__aeabi_dcmplt>
 8000f92:	b928      	cbnz	r0, 8000fa0 <__aeabi_d2lz+0x1c>
 8000f94:	4620      	mov	r0, r4
 8000f96:	4629      	mov	r1, r5
 8000f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f9c:	f000 b80a 	b.w	8000fb4 <__aeabi_d2ulz>
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fa6:	f000 f805 	bl	8000fb4 <__aeabi_d2ulz>
 8000faa:	4240      	negs	r0, r0
 8000fac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fb0:	bd38      	pop	{r3, r4, r5, pc}
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_d2ulz>:
 8000fb4:	b5d0      	push	{r4, r6, r7, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <__aeabi_d2ulz+0x34>)
 8000fba:	4606      	mov	r6, r0
 8000fbc:	460f      	mov	r7, r1
 8000fbe:	f7ff fa8b 	bl	80004d8 <__aeabi_dmul>
 8000fc2:	f7ff fd61 	bl	8000a88 <__aeabi_d2uiz>
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	f7ff fa0c 	bl	80003e4 <__aeabi_ui2d>
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <__aeabi_d2ulz+0x38>)
 8000fd0:	f7ff fa82 	bl	80004d8 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4630      	mov	r0, r6
 8000fda:	4639      	mov	r1, r7
 8000fdc:	f7ff f8c4 	bl	8000168 <__aeabi_dsub>
 8000fe0:	f7ff fd52 	bl	8000a88 <__aeabi_d2uiz>
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fe8:	3df00000 	.word	0x3df00000
 8000fec:	41f00000 	.word	0x41f00000

08000ff0 <delay_us>:
#define DHT_PIN  GPIO_PIN_6

extern TIM_HandleTypeDef htim2;

// ---- Accurate microsecond delay ----
void delay_us(uint16_t us) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <delay_us+0x2c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8001002:	bf00      	nop
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <delay_us+0x2c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	429a      	cmp	r2, r3
 800100e:	d3f9      	bcc.n	8001004 <delay_us+0x14>
		;
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	20000294 	.word	0x20000294

08001020 <DHT_Set_Pin_Output>:

// ---- GPIO Mode Switching ----
static void DHT_Set_Pin_Output(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT_PIN;
 8001032:	2340      	movs	r3, #64	@ 0x40
 8001034:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2302      	movs	r3, #2
 800103c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4803      	ldr	r0, [pc, #12]	@ (8001050 <DHT_Set_Pin_Output+0x30>)
 8001044:	f002 fc72 	bl	800392c <HAL_GPIO_Init>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40010800 	.word	0x40010800

08001054 <DHT_Set_Pin_Input>:

static void DHT_Set_Pin_Input(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT_PIN;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4803      	ldr	r0, [pc, #12]	@ (8001084 <DHT_Set_Pin_Input+0x30>)
 8001078:	f002 fc58 	bl	800392c <HAL_GPIO_Init>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40010800 	.word	0x40010800

08001088 <DHT11_Read>:

// ---- Main Read Function ----
uint8_t DHT11_Read(uint8_t *temp, uint8_t *hum) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	uint8_t bits[5] = { 0 };
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	711a      	strb	r2, [r3, #4]
	uint8_t i, j;

	// 1. Start signal
	DHT_Set_Pin_Output();
 800109c:	f7ff ffc0 	bl	8001020 <DHT_Set_Pin_Output>
	HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2140      	movs	r1, #64	@ 0x40
 80010a4:	485f      	ldr	r0, [pc, #380]	@ (8001224 <DHT11_Read+0x19c>)
 80010a6:	f002 fddc 	bl	8003c62 <HAL_GPIO_WritePin>
	HAL_Delay(20);  // >18ms
 80010aa:	2014      	movs	r0, #20
 80010ac:	f001 fccc 	bl	8002a48 <HAL_Delay>
	HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2140      	movs	r1, #64	@ 0x40
 80010b4:	485b      	ldr	r0, [pc, #364]	@ (8001224 <DHT11_Read+0x19c>)
 80010b6:	f002 fdd4 	bl	8003c62 <HAL_GPIO_WritePin>
	delay_us(40);
 80010ba:	2028      	movs	r0, #40	@ 0x28
 80010bc:	f7ff ff98 	bl	8000ff0 <delay_us>
	DHT_Set_Pin_Input();
 80010c0:	f7ff ffc8 	bl	8001054 <DHT_Set_Pin_Input>

	// 2. Wait for response
	uint32_t timeout = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
	while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 80010c8:	e009      	b.n	80010de <DHT11_Read+0x56>
		if (++timeout > 20000)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	3301      	adds	r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d901      	bls.n	80010de <DHT11_Read+0x56>
			return 1; // No response
 80010da:	2301      	movs	r3, #1
 80010dc:	e09e      	b.n	800121c <DHT11_Read+0x194>
	while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 80010de:	2140      	movs	r1, #64	@ 0x40
 80010e0:	4850      	ldr	r0, [pc, #320]	@ (8001224 <DHT11_Read+0x19c>)
 80010e2:	f002 fda7 	bl	8003c34 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d0ee      	beq.n	80010ca <DHT11_Read+0x42>
	timeout = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
	while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 80010f0:	e009      	b.n	8001106 <DHT11_Read+0x7e>
		if (++timeout > 20000)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	3301      	adds	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80010fe:	4293      	cmp	r3, r2
 8001100:	d901      	bls.n	8001106 <DHT11_Read+0x7e>
			return 1;
 8001102:	2301      	movs	r3, #1
 8001104:	e08a      	b.n	800121c <DHT11_Read+0x194>
	while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 8001106:	2140      	movs	r1, #64	@ 0x40
 8001108:	4846      	ldr	r0, [pc, #280]	@ (8001224 <DHT11_Read+0x19c>)
 800110a:	f002 fd93 	bl	8003c34 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0ee      	beq.n	80010f2 <DHT11_Read+0x6a>
	timeout = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
	while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 8001118:	e009      	b.n	800112e <DHT11_Read+0xa6>
		if (++timeout > 20000)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	3301      	adds	r3, #1
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001126:	4293      	cmp	r3, r2
 8001128:	d901      	bls.n	800112e <DHT11_Read+0xa6>
			return 1;
 800112a:	2301      	movs	r3, #1
 800112c:	e076      	b.n	800121c <DHT11_Read+0x194>
	while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 800112e:	2140      	movs	r1, #64	@ 0x40
 8001130:	483c      	ldr	r0, [pc, #240]	@ (8001224 <DHT11_Read+0x19c>)
 8001132:	f002 fd7f 	bl	8003c34 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d0ee      	beq.n	800111a <DHT11_Read+0x92>

	// 3. Read 5 bytes
	for (j = 0; j < 5; j++) {
 800113c:	2300      	movs	r3, #0
 800113e:	75bb      	strb	r3, [r7, #22]
 8001140:	e052      	b.n	80011e8 <DHT11_Read+0x160>
		for (i = 0; i < 8; i++) {
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]
 8001146:	e049      	b.n	80011dc <DHT11_Read+0x154>
			// Wait for LOW -> HIGH
			timeout = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
			while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 800114c:	e009      	b.n	8001162 <DHT11_Read+0xda>
				if (++timeout > 20000)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	3301      	adds	r3, #1
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <DHT11_Read+0xda>
					return 1;
 800115e:	2301      	movs	r3, #1
 8001160:	e05c      	b.n	800121c <DHT11_Read+0x194>
			while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 8001162:	2140      	movs	r1, #64	@ 0x40
 8001164:	482f      	ldr	r0, [pc, #188]	@ (8001224 <DHT11_Read+0x19c>)
 8001166:	f002 fd65 	bl	8003c34 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0ee      	beq.n	800114e <DHT11_Read+0xc6>

			delay_us(35); // sample mid-bit
 8001170:	2023      	movs	r0, #35	@ 0x23
 8001172:	f7ff ff3d 	bl	8000ff0 <delay_us>
			if (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 8001176:	2140      	movs	r1, #64	@ 0x40
 8001178:	482a      	ldr	r0, [pc, #168]	@ (8001224 <DHT11_Read+0x19c>)
 800117a:	f002 fd5b 	bl	8003c34 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d114      	bne.n	80011ae <DHT11_Read+0x126>
				bits[j] |= (1 << (7 - i));
 8001184:	7dbb      	ldrb	r3, [r7, #22]
 8001186:	3318      	adds	r3, #24
 8001188:	443b      	add	r3, r7
 800118a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800118e:	b25a      	sxtb	r2, r3
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2101      	movs	r1, #1
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	7dbb      	ldrb	r3, [r7, #22]
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	3318      	adds	r3, #24
 80011a8:	443b      	add	r3, r7
 80011aa:	f803 2c10 	strb.w	r2, [r3, #-16]

			// Wait for HIGH -> LOW
			timeout = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
			while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 80011b2:	e009      	b.n	80011c8 <DHT11_Read+0x140>
				if (++timeout > 20000)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	3301      	adds	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <DHT11_Read+0x140>
					return 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e029      	b.n	800121c <DHT11_Read+0x194>
			while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 80011c8:	2140      	movs	r1, #64	@ 0x40
 80011ca:	4816      	ldr	r0, [pc, #88]	@ (8001224 <DHT11_Read+0x19c>)
 80011cc:	f002 fd32 	bl	8003c34 <HAL_GPIO_ReadPin>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d0ee      	beq.n	80011b4 <DHT11_Read+0x12c>
		for (i = 0; i < 8; i++) {
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	3301      	adds	r3, #1
 80011da:	75fb      	strb	r3, [r7, #23]
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	2b07      	cmp	r3, #7
 80011e0:	d9b2      	bls.n	8001148 <DHT11_Read+0xc0>
	for (j = 0; j < 5; j++) {
 80011e2:	7dbb      	ldrb	r3, [r7, #22]
 80011e4:	3301      	adds	r3, #1
 80011e6:	75bb      	strb	r3, [r7, #22]
 80011e8:	7dbb      	ldrb	r3, [r7, #22]
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d9a9      	bls.n	8001142 <DHT11_Read+0xba>
		}
	}

	// 4. Verify checksum
	uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
 80011ee:	7a3a      	ldrb	r2, [r7, #8]
 80011f0:	7a7b      	ldrb	r3, [r7, #9]
 80011f2:	4413      	add	r3, r2
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	7abb      	ldrb	r3, [r7, #10]
 80011f8:	4413      	add	r3, r2
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	7afb      	ldrb	r3, [r7, #11]
 80011fe:	4413      	add	r3, r2
 8001200:	73fb      	strb	r3, [r7, #15]
	if (sum != bits[4])
 8001202:	7b3b      	ldrb	r3, [r7, #12]
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <DHT11_Read+0x186>
		return 2; // checksum error
 800120a:	2302      	movs	r3, #2
 800120c:	e006      	b.n	800121c <DHT11_Read+0x194>

	*hum = bits[0];
 800120e:	7a3a      	ldrb	r2, [r7, #8]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	701a      	strb	r2, [r3, #0]
	*temp = bits[2];
 8001214:	7aba      	ldrb	r2, [r7, #10]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	701a      	strb	r2, [r3, #0]

	return 0;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40010800 	.word	0x40010800

08001228 <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
		// GSM TX completed
	}
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
	...

0800123c <uart_print>:

void uart_print(char *msg) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7fe ff83 	bl	8000150 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4803      	ldr	r0, [pc, #12]	@ (8001264 <uart_print+0x28>)
 8001256:	f004 fe13 	bl	8005e80 <HAL_UART_Transmit>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200002dc 	.word	0x200002dc

08001268 <Read_LM35>:

float Read_LM35(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800126e:	4812      	ldr	r0, [pc, #72]	@ (80012b8 <Read_LM35+0x50>)
 8001270:	f001 fce6 	bl	8002c40 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <Read_LM35+0x50>)
 800127a:	f001 fd8f 	bl	8002d9c <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 800127e:	480e      	ldr	r0, [pc, #56]	@ (80012b8 <Read_LM35+0x50>)
 8001280:	f001 fe92 	bl	8002fa8 <HAL_ADC_GetValue>
 8001284:	4603      	mov	r3, r0
 8001286:	80fb      	strh	r3, [r7, #6]
	return ((float) adc_val * 3.3f / 4095.0f) * 100.0f;
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fcd2 	bl	8000c34 <__aeabi_ui2f>
 8001290:	4603      	mov	r3, r0
 8001292:	490a      	ldr	r1, [pc, #40]	@ (80012bc <Read_LM35+0x54>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fd25 	bl	8000ce4 <__aeabi_fmul>
 800129a:	4603      	mov	r3, r0
 800129c:	4908      	ldr	r1, [pc, #32]	@ (80012c0 <Read_LM35+0x58>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fdd4 	bl	8000e4c <__aeabi_fdiv>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4907      	ldr	r1, [pc, #28]	@ (80012c4 <Read_LM35+0x5c>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd1b 	bl	8000ce4 <__aeabi_fmul>
 80012ae:	4603      	mov	r3, r0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000210 	.word	0x20000210
 80012bc:	40533333 	.word	0x40533333
 80012c0:	457ff000 	.word	0x457ff000
 80012c4:	42c80000 	.word	0x42c80000

080012c8 <GSM_SendSMS>:

void GSM_SendSMS(char *number, char *message) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0b4      	sub	sp, #208	@ 0xd0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	char cmd[64];
	uint8_t resp[128];
	memset(resp, 0, sizeof(resp));
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	2280      	movs	r2, #128	@ 0x80
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 f87b 	bl	80083d6 <memset>

	// 1. Check module
	HAL_UART_Transmit(&huart3, (uint8_t*) "AT\r\n", 4, HAL_MAX_DELAY);
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	2204      	movs	r2, #4
 80012e6:	4945      	ldr	r1, [pc, #276]	@ (80013fc <GSM_SendSMS+0x134>)
 80012e8:	4845      	ldr	r0, [pc, #276]	@ (8001400 <GSM_SendSMS+0x138>)
 80012ea:	f004 fdc9 	bl	8005e80 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, resp, sizeof(resp), 1000);
 80012ee:	f107 0110 	add.w	r1, r7, #16
 80012f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	4841      	ldr	r0, [pc, #260]	@ (8001400 <GSM_SendSMS+0x138>)
 80012fa:	f004 fe4c 	bl	8005f96 <HAL_UART_Receive>
	uart_print((char*) resp);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff9a 	bl	800123c <uart_print>

	// 2. Set text mode
	sprintf(cmd, "AT+CMGF=1\r\n");
 8001308:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800130c:	493d      	ldr	r1, [pc, #244]	@ (8001404 <GSM_SendSMS+0x13c>)
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fffc 	bl	800830c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) cmd, strlen(cmd), HAL_MAX_DELAY);
 8001314:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001318:	4618      	mov	r0, r3
 800131a:	f7fe ff19 	bl	8000150 <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	b29a      	uxth	r2, r3
 8001322:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	4835      	ldr	r0, [pc, #212]	@ (8001400 <GSM_SendSMS+0x138>)
 800132c:	f004 fda8 	bl	8005e80 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, resp, sizeof(resp), 1000);
 8001330:	f107 0110 	add.w	r1, r7, #16
 8001334:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001338:	2280      	movs	r2, #128	@ 0x80
 800133a:	4831      	ldr	r0, [pc, #196]	@ (8001400 <GSM_SendSMS+0x138>)
 800133c:	f004 fe2b 	bl	8005f96 <HAL_UART_Receive>
	uart_print((char*) resp);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff79 	bl	800123c <uart_print>

	// 3. Send number
	sprintf(cmd, "AT+CMGS=\"%s\"\r\n", number);
 800134a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	492d      	ldr	r1, [pc, #180]	@ (8001408 <GSM_SendSMS+0x140>)
 8001352:	4618      	mov	r0, r3
 8001354:	f006 ffda 	bl	800830c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) cmd, strlen(cmd), HAL_MAX_DELAY);
 8001358:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800135c:	4618      	mov	r0, r3
 800135e:	f7fe fef7 	bl	8000150 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	b29a      	uxth	r2, r3
 8001366:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	4824      	ldr	r0, [pc, #144]	@ (8001400 <GSM_SendSMS+0x138>)
 8001370:	f004 fd86 	bl	8005e80 <HAL_UART_Transmit>

	// Wait for '>' prompt from GSM (ready for message)
	memset(resp, 0, sizeof(resp));
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2280      	movs	r2, #128	@ 0x80
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f007 f82a 	bl	80083d6 <memset>
	HAL_UART_Receive(&huart3, resp, sizeof(resp), 3000);
 8001382:	f107 0110 	add.w	r1, r7, #16
 8001386:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800138a:	2280      	movs	r2, #128	@ 0x80
 800138c:	481c      	ldr	r0, [pc, #112]	@ (8001400 <GSM_SendSMS+0x138>)
 800138e:	f004 fe02 	bl	8005f96 <HAL_UART_Receive>
	uart_print((char*) resp);
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff50 	bl	800123c <uart_print>

	// 4. Send message body
	HAL_UART_Transmit(&huart3, (uint8_t*) message, strlen(message),
 800139c:	6838      	ldr	r0, [r7, #0]
 800139e:	f7fe fed7 	bl	8000150 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	4814      	ldr	r0, [pc, #80]	@ (8001400 <GSM_SendSMS+0x138>)
 80013ae:	f004 fd67 	bl	8005e80 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	// 5. Send Ctrl+Z to finish
	uint8_t ctrl_z = 26;
 80013b2:	231a      	movs	r3, #26
 80013b4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, &ctrl_z, 1, HAL_MAX_DELAY);
 80013b6:	f107 010f 	add.w	r1, r7, #15
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	2201      	movs	r2, #1
 80013c0:	480f      	ldr	r0, [pc, #60]	@ (8001400 <GSM_SendSMS+0x138>)
 80013c2:	f004 fd5d 	bl	8005e80 <HAL_UART_Transmit>

	// 6. Wait for final confirmation
	memset(resp, 0, sizeof(resp));
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2280      	movs	r2, #128	@ 0x80
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f007 f801 	bl	80083d6 <memset>
	HAL_UART_Receive(&huart3, resp, sizeof(resp), 5000);
 80013d4:	f107 0110 	add.w	r1, r7, #16
 80013d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	4808      	ldr	r0, [pc, #32]	@ (8001400 <GSM_SendSMS+0x138>)
 80013e0:	f004 fdd9 	bl	8005f96 <HAL_UART_Receive>
	uart_print((char*) resp);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff27 	bl	800123c <uart_print>

	uart_print("SMS attempt finished\r\n");
 80013ee:	4807      	ldr	r0, [pc, #28]	@ (800140c <GSM_SendSMS+0x144>)
 80013f0:	f7ff ff24 	bl	800123c <uart_print>
}
 80013f4:	bf00      	nop
 80013f6:	37d0      	adds	r7, #208	@ 0xd0
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800b1f8 	.word	0x0800b1f8
 8001400:	2000036c 	.word	0x2000036c
 8001404:	0800b200 	.word	0x0800b200
 8001408:	0800b20c 	.word	0x0800b20c
 800140c:	0800b21c 	.word	0x0800b21c

08001410 <parse_GPRMC_from_line>:
 - Main loop checks gps_ready, prints raw NMEA to UART1 and parses GPRMC to update latitude/longitude.
 - When sending SMS, only latitude and longitude will be sent.
 */

/* parse GPRMC from gps_line (assumes gps_line is null-terminated) */
void parse_GPRMC_from_line(void) {
 8001410:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001414:	b0c2      	sub	sp, #264	@ 0x108
 8001416:	af02      	add	r7, sp, #8
	// ensure gps_line contains $GPRMC or $GNRMC
	if (strstr((char*) gps_line, "$GPRMC")
 8001418:	4995      	ldr	r1, [pc, #596]	@ (8001670 <parse_GPRMC_from_line+0x260>)
 800141a:	4896      	ldr	r0, [pc, #600]	@ (8001674 <parse_GPRMC_from_line+0x264>)
 800141c:	f007 f864 	bl	80084e8 <strstr>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d107      	bne.n	8001436 <parse_GPRMC_from_line+0x26>
			|| strstr((char*) gps_line, "$GNRMC")) {
 8001426:	4994      	ldr	r1, [pc, #592]	@ (8001678 <parse_GPRMC_from_line+0x268>)
 8001428:	4892      	ldr	r0, [pc, #584]	@ (8001674 <parse_GPRMC_from_line+0x264>)
 800142a:	f007 f85d 	bl	80084e8 <strstr>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8117 	beq.w	8001664 <parse_GPRMC_from_line+0x254>
		char buf[GPS_LINE_MAX];
		char *fields[12] = { 0 };
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2230      	movs	r2, #48	@ 0x30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f006 ffc9 	bl	80083d6 <memset>
		int j = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		strcpy(buf, (char*) gps_line);
 800144a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800144e:	4989      	ldr	r1, [pc, #548]	@ (8001674 <parse_GPRMC_from_line+0x264>)
 8001450:	4618      	mov	r0, r3
 8001452:	f007 f8d6 	bl	8008602 <strcpy>

		char *token = strtok(buf, ",");
 8001456:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800145a:	4988      	ldr	r1, [pc, #544]	@ (800167c <parse_GPRMC_from_line+0x26c>)
 800145c:	4618      	mov	r0, r3
 800145e:	f006 ffe7 	bl	8008430 <strtok>
 8001462:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
		while (token && j < 12) {
 8001466:	e013      	b.n	8001490 <parse_GPRMC_from_line+0x80>
			fields[j++] = token;
 8001468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	33f8      	adds	r3, #248	@ 0xf8
 8001476:	f107 0208 	add.w	r2, r7, #8
 800147a:	4413      	add	r3, r2
 800147c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8001480:	f843 2cf8 	str.w	r2, [r3, #-248]
			token = strtok(NULL, ",");
 8001484:	497d      	ldr	r1, [pc, #500]	@ (800167c <parse_GPRMC_from_line+0x26c>)
 8001486:	2000      	movs	r0, #0
 8001488:	f006 ffd2 	bl	8008430 <strtok>
 800148c:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
		while (token && j < 12) {
 8001490:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <parse_GPRMC_from_line+0x90>
 8001498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800149c:	2b0b      	cmp	r3, #11
 800149e:	dde3      	ble.n	8001468 <parse_GPRMC_from_line+0x58>
		}

		if (j >= 7 && fields[3] && fields[5] && fields[2]
 80014a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	f340 80dd 	ble.w	8001664 <parse_GPRMC_from_line+0x254>
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80d9 	beq.w	8001664 <parse_GPRMC_from_line+0x254>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80d5 	beq.w	8001664 <parse_GPRMC_from_line+0x254>
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80d1 	beq.w	8001664 <parse_GPRMC_from_line+0x254>
				&& fields[2][0] == 'A') {
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b41      	cmp	r3, #65	@ 0x41
 80014c8:	f040 80cc 	bne.w	8001664 <parse_GPRMC_from_line+0x254>
			double raw_lat = atof(fields[3]);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fb80 	bl	8006bd4 <atof>
 80014d4:	e9c7 0138 	strd	r0, r1, [r7, #224]	@ 0xe0
			double raw_lon = atof(fields[5]);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 fb7a 	bl	8006bd4 <atof>
 80014e0:	e9c7 0136 	strd	r0, r1, [r7, #216]	@ 0xd8
			char ns = fields[4][0];
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
			char ew = fields[6][0];
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6

			if (raw_lat != 0 && raw_lon != 0) {
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001500:	f7ff fa52 	bl	80009a8 <__aeabi_dcmpeq>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d000      	beq.n	800150c <parse_GPRMC_from_line+0xfc>
				snprintf(latitude, sizeof(latitude), "%.6f", lat_dec);
				snprintf(longitude, sizeof(longitude), "%.6f", lon_dec);
			}
		}
	}
}
 800150a:	e0ab      	b.n	8001664 <parse_GPRMC_from_line+0x254>
			if (raw_lat != 0 && raw_lon != 0) {
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001518:	f7ff fa46 	bl	80009a8 <__aeabi_dcmpeq>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <parse_GPRMC_from_line+0x114>
}
 8001522:	e09f      	b.n	8001664 <parse_GPRMC_from_line+0x254>
				int lat_deg = (int) (raw_lat / 100);
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b55      	ldr	r3, [pc, #340]	@ (8001680 <parse_GPRMC_from_line+0x270>)
 800152a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800152e:	f7ff f8fd 	bl	800072c <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fa7d 	bl	8000a38 <__aeabi_d2iz>
 800153e:	4603      	mov	r3, r0
 8001540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				double lat_min = raw_lat - (lat_deg * 100);
 8001544:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001548:	2264      	movs	r2, #100	@ 0x64
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff58 	bl	8000404 <__aeabi_i2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800155c:	f7fe fe04 	bl	8000168 <__aeabi_dsub>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
				double lat_dec = lat_deg + lat_min / 60.0;
 8001568:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800156c:	f7fe ff4a 	bl	8000404 <__aeabi_i2d>
 8001570:	4680      	mov	r8, r0
 8001572:	4689      	mov	r9, r1
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b42      	ldr	r3, [pc, #264]	@ (8001684 <parse_GPRMC_from_line+0x274>)
 800157a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800157e:	f7ff f8d5 	bl	800072c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4640      	mov	r0, r8
 8001588:	4649      	mov	r1, r9
 800158a:	f7fe fdef 	bl	800016c <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
				int lon_deg = (int) (raw_lon / 100);
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b39      	ldr	r3, [pc, #228]	@ (8001680 <parse_GPRMC_from_line+0x270>)
 800159c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80015a0:	f7ff f8c4 	bl	800072c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fa44 	bl	8000a38 <__aeabi_d2iz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
				double lon_min = raw_lon - (lon_deg * 100);
 80015b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80015ba:	2264      	movs	r2, #100	@ 0x64
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff1f 	bl	8000404 <__aeabi_i2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80015ce:	f7fe fdcb 	bl	8000168 <__aeabi_dsub>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
				double lon_dec = lon_deg + lon_min / 60.0;
 80015da:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80015de:	f7fe ff11 	bl	8000404 <__aeabi_i2d>
 80015e2:	4680      	mov	r8, r0
 80015e4:	4689      	mov	r9, r1
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <parse_GPRMC_from_line+0x274>)
 80015ec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80015f0:	f7ff f89c 	bl	800072c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4640      	mov	r0, r8
 80015fa:	4649      	mov	r1, r9
 80015fc:	f7fe fdb6 	bl	800016c <__adddf3>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
				if (ns == 'S')
 8001608:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800160c:	2b53      	cmp	r3, #83	@ 0x53
 800160e:	d10b      	bne.n	8001628 <parse_GPRMC_from_line+0x218>
					lat_dec = -lat_dec;
 8001610:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800161a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001624:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
				if (ew == 'W')
 8001628:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 800162c:	2b57      	cmp	r3, #87	@ 0x57
 800162e:	d107      	bne.n	8001640 <parse_GPRMC_from_line+0x230>
					lon_dec = -lon_dec;
 8001630:	f8d7 40e8 	ldr.w	r4, [r7, #232]	@ 0xe8
 8001634:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001638:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800163c:	e9c7 453a 	strd	r4, r5, [r7, #232]	@ 0xe8
				snprintf(latitude, sizeof(latitude), "%.6f", lat_dec);
 8001640:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8001644:	e9cd 2300 	strd	r2, r3, [sp]
 8001648:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <parse_GPRMC_from_line+0x278>)
 800164a:	2110      	movs	r1, #16
 800164c:	480f      	ldr	r0, [pc, #60]	@ (800168c <parse_GPRMC_from_line+0x27c>)
 800164e:	f006 fe27 	bl	80082a0 <sniprintf>
				snprintf(longitude, sizeof(longitude), "%.6f", lon_dec);
 8001652:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8001656:	e9cd 2300 	strd	r2, r3, [sp]
 800165a:	4a0b      	ldr	r2, [pc, #44]	@ (8001688 <parse_GPRMC_from_line+0x278>)
 800165c:	2110      	movs	r1, #16
 800165e:	480c      	ldr	r0, [pc, #48]	@ (8001690 <parse_GPRMC_from_line+0x280>)
 8001660:	f006 fe1e 	bl	80082a0 <sniprintf>
}
 8001664:	bf00      	nop
 8001666:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800166a:	46bd      	mov	sp, r7
 800166c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001670:	0800b234 	.word	0x0800b234
 8001674:	200003fc 	.word	0x200003fc
 8001678:	0800b23c 	.word	0x0800b23c
 800167c:	0800b244 	.word	0x0800b244
 8001680:	40590000 	.word	0x40590000
 8001684:	404e0000 	.word	0x404e0000
 8001688:	0800b248 	.word	0x0800b248
 800168c:	20000000 	.word	0x20000000
 8001690:	20000010 	.word	0x20000010

08001694 <HAL_UART_RxCpltCallback>:

/* UART2 RX complete callback (very small, re-arms receive) */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001718 <HAL_UART_RxCpltCallback+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d134      	bne.n	8001710 <HAL_UART_RxCpltCallback+0x7c>
		char c = gps_rx_buffer[0];
 80016a6:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <HAL_UART_RxCpltCallback+0x88>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	73fb      	strb	r3, [r7, #15]

		// build line without CR/LF; when newline -> mark ready
		if (c == '\n' || c == '\r') {
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d002      	beq.n	80016b8 <HAL_UART_RxCpltCallback+0x24>
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b0d      	cmp	r3, #13
 80016b6:	d112      	bne.n	80016de <HAL_UART_RxCpltCallback+0x4a>
			if (gps_idx > 0) {
 80016b8:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_UART_RxCpltCallback+0x8c>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d021      	beq.n	8001706 <HAL_UART_RxCpltCallback+0x72>
				gps_line[gps_idx] = '\0';
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <HAL_UART_RxCpltCallback+0x8c>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_UART_RxCpltCallback+0x90>)
 80016cc:	2100      	movs	r1, #0
 80016ce:	5499      	strb	r1, [r3, r2]
				gps_idx = 0;
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <HAL_UART_RxCpltCallback+0x8c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	801a      	strh	r2, [r3, #0]
				gps_ready = 1; // main loop will handle printing & parsing
 80016d6:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <HAL_UART_RxCpltCallback+0x94>)
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
			if (gps_idx > 0) {
 80016dc:	e013      	b.n	8001706 <HAL_UART_RxCpltCallback+0x72>
			}
		} else {
			if (gps_idx < GPS_LINE_MAX - 1) {
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_UART_RxCpltCallback+0x8c>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2b7e      	cmp	r3, #126	@ 0x7e
 80016e6:	d80b      	bhi.n	8001700 <HAL_UART_RxCpltCallback+0x6c>
				gps_line[gps_idx++] = c;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <HAL_UART_RxCpltCallback+0x8c>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	b291      	uxth	r1, r2
 80016f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001720 <HAL_UART_RxCpltCallback+0x8c>)
 80016f4:	8011      	strh	r1, [r2, #0]
 80016f6:	4619      	mov	r1, r3
 80016f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <HAL_UART_RxCpltCallback+0x90>)
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	5453      	strb	r3, [r2, r1]
 80016fe:	e002      	b.n	8001706 <HAL_UART_RxCpltCallback+0x72>
			} else {
				// overflow, reset index
				gps_idx = 0;
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <HAL_UART_RxCpltCallback+0x8c>)
 8001702:	2200      	movs	r2, #0
 8001704:	801a      	strh	r2, [r3, #0]
			}
		}

		// re-arm reception for next byte
		HAL_UART_Receive_IT(&huart2, (uint8_t*) &gps_rx_buffer[0], 1);
 8001706:	2201      	movs	r2, #1
 8001708:	4904      	ldr	r1, [pc, #16]	@ (800171c <HAL_UART_RxCpltCallback+0x88>)
 800170a:	4808      	ldr	r0, [pc, #32]	@ (800172c <HAL_UART_RxCpltCallback+0x98>)
 800170c:	f004 fcda 	bl	80060c4 <HAL_UART_Receive_IT>
	}
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004400 	.word	0x40004400
 800171c:	200007a0 	.word	0x200007a0
 8001720:	2000047c 	.word	0x2000047c
 8001724:	200003fc 	.word	0x200003fc
 8001728:	2000047e 	.word	0x2000047e
 800172c:	20000324 	.word	0x20000324

08001730 <GSM_WaitForNetwork>:
void GSM_WaitForNetwork(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b0a2      	sub	sp, #136	@ 0x88
 8001734:	af00      	add	r7, sp, #0
	char resp[128];
	for (int tries = 0; tries < 10; tries++) {
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800173c:	e02a      	b.n	8001794 <GSM_WaitForNetwork+0x64>
		HAL_UART_Transmit(&huart3, (uint8_t*) "AT+CREG?\r\n", 10,
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	220a      	movs	r2, #10
 8001744:	4918      	ldr	r1, [pc, #96]	@ (80017a8 <GSM_WaitForNetwork+0x78>)
 8001746:	4819      	ldr	r0, [pc, #100]	@ (80017ac <GSM_WaitForNetwork+0x7c>)
 8001748:	f004 fb9a 	bl	8005e80 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		HAL_UART_Receive(&huart3, (uint8_t*) resp, sizeof(resp), 1000);
 800174c:	1d39      	adds	r1, r7, #4
 800174e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001752:	2280      	movs	r2, #128	@ 0x80
 8001754:	4815      	ldr	r0, [pc, #84]	@ (80017ac <GSM_WaitForNetwork+0x7c>)
 8001756:	f004 fc1e 	bl	8005f96 <HAL_UART_Receive>
		if (strstr((char*) resp, ",1") || strstr((char*) resp, ",5")) {
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4914      	ldr	r1, [pc, #80]	@ (80017b0 <GSM_WaitForNetwork+0x80>)
 800175e:	4618      	mov	r0, r3
 8001760:	f006 fec2 	bl	80084e8 <strstr>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d107      	bne.n	800177a <GSM_WaitForNetwork+0x4a>
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4911      	ldr	r1, [pc, #68]	@ (80017b4 <GSM_WaitForNetwork+0x84>)
 800176e:	4618      	mov	r0, r3
 8001770:	f006 feba 	bl	80084e8 <strstr>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <GSM_WaitForNetwork+0x52>
			uart_print("GSM Registered to Network\r\n");
 800177a:	480f      	ldr	r0, [pc, #60]	@ (80017b8 <GSM_WaitForNetwork+0x88>)
 800177c:	f7ff fd5e 	bl	800123c <uart_print>
 8001780:	e00f      	b.n	80017a2 <GSM_WaitForNetwork+0x72>
			return;
		}
		HAL_Delay(1000);
 8001782:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001786:	f001 f95f 	bl	8002a48 <HAL_Delay>
	for (int tries = 0; tries < 10; tries++) {
 800178a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800178e:	3301      	adds	r3, #1
 8001790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001798:	2b09      	cmp	r3, #9
 800179a:	ddd0      	ble.n	800173e <GSM_WaitForNetwork+0xe>
	}
	uart_print("GSM Network not found\r\n");
 800179c:	4807      	ldr	r0, [pc, #28]	@ (80017bc <GSM_WaitForNetwork+0x8c>)
 800179e:	f7ff fd4d 	bl	800123c <uart_print>
}
 80017a2:	3788      	adds	r7, #136	@ 0x88
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	0800b250 	.word	0x0800b250
 80017ac:	2000036c 	.word	0x2000036c
 80017b0:	0800b25c 	.word	0x0800b25c
 80017b4:	0800b260 	.word	0x0800b260
 80017b8:	0800b264 	.word	0x0800b264
 80017bc:	0800b280 	.word	0x0800b280

080017c0 <Generate_BP>:

void Generate_BP(uint8_t *systolic, uint8_t *diastolic) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	*systolic = 110 + (rand() % 21);   // 110–130
 80017ca:	f005 fa07 	bl	8006bdc <rand>
 80017ce:	4601      	mov	r1, r0
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <Generate_BP+0x64>)
 80017d2:	fb83 2301 	smull	r2, r3, r3, r1
 80017d6:	109a      	asrs	r2, r3, #2
 80017d8:	17cb      	asrs	r3, r1, #31
 80017da:	1ad2      	subs	r2, r2, r3
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	00da      	lsls	r2, r3, #3
 80017e4:	1ad2      	subs	r2, r2, r3
 80017e6:	1a8a      	subs	r2, r1, r2
 80017e8:	b2d3      	uxtb	r3, r2
 80017ea:	336e      	adds	r3, #110	@ 0x6e
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	701a      	strb	r2, [r3, #0]
	*diastolic = 70 + (rand() % 21);   // 70–90
 80017f2:	f005 f9f3 	bl	8006bdc <rand>
 80017f6:	4601      	mov	r1, r0
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <Generate_BP+0x64>)
 80017fa:	fb83 2301 	smull	r2, r3, r3, r1
 80017fe:	109a      	asrs	r2, r3, #2
 8001800:	17cb      	asrs	r3, r1, #31
 8001802:	1ad2      	subs	r2, r2, r3
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	00da      	lsls	r2, r3, #3
 800180c:	1ad2      	subs	r2, r2, r3
 800180e:	1a8a      	subs	r2, r1, r2
 8001810:	b2d3      	uxtb	r3, r2
 8001812:	3346      	adds	r3, #70	@ 0x46
 8001814:	b2da      	uxtb	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	701a      	strb	r2, [r3, #0]
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	30c30c31 	.word	0x30c30c31

08001828 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800182c:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8001830:	af0c      	add	r7, sp, #48	@ 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001832:	f001 f8a7 	bl	8002984 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001836:	f000 fa07 	bl	8001c48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800183a:	f000 fbb5 	bl	8001fa8 <MX_GPIO_Init>
	MX_DMA_Init();
 800183e:	f000 fb95 	bl	8001f6c <MX_DMA_Init>
	MX_TIM2_Init();
 8001842:	f000 fac9 	bl	8001dd8 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001846:	f000 fb13 	bl	8001e70 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800184a:	f000 fa59 	bl	8001d00 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 800184e:	f000 fb39 	bl	8001ec4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001852:	f000 fb61 	bl	8001f18 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8001856:	f000 fa91 	bl	8001d7c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 800185a:	4870      	ldr	r0, [pc, #448]	@ (8001a1c <main+0x1f4>)
 800185c:	f004 f84c 	bl	80058f8 <HAL_TIM_Base_Start>
	HAL_ADC_Start(&hadc1);
 8001860:	486f      	ldr	r0, [pc, #444]	@ (8001a20 <main+0x1f8>)
 8001862:	f001 f9ed 	bl	8002c40 <HAL_ADC_Start>
	uart_print("Initializing MAX30102...\r\n");
 8001866:	486f      	ldr	r0, [pc, #444]	@ (8001a24 <main+0x1fc>)
 8001868:	f7ff fce8 	bl	800123c <uart_print>
	MAX30102_Init();
 800186c:	f000 fc4a 	bl	8002104 <MAX30102_Init>
	uart_print("MAX30102 Ready\r\n");
 8001870:	486d      	ldr	r0, [pc, #436]	@ (8001a28 <main+0x200>)
 8001872:	f7ff fce3 	bl	800123c <uart_print>
	// inside while(1) and before the button check
	GSM_WaitForNetwork();
 8001876:	f7ff ff5b 	bl	8001730 <GSM_WaitForNetwork>

	// Start GPS interrupt-based reception, 1 byte at a time
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &gps_rx_buffer[0], 1);
 800187a:	2201      	movs	r2, #1
 800187c:	496b      	ldr	r1, [pc, #428]	@ (8001a2c <main+0x204>)
 800187e:	486c      	ldr	r0, [pc, #432]	@ (8001a30 <main+0x208>)
 8001880:	f004 fc20 	bl	80060c4 <HAL_UART_Receive_IT>

	uart_print("STM32 Initialized\r\n");
 8001884:	486b      	ldr	r0, [pc, #428]	@ (8001a34 <main+0x20c>)
 8001886:	f7ff fcd9 	bl	800123c <uart_print>
	uart_print("GPS UART2 @ 38400, debug on UART1 @ 115200\r\n");
 800188a:	486b      	ldr	r0, [pc, #428]	@ (8001a38 <main+0x210>)
 800188c:	f7ff fcd6 	bl	800123c <uart_print>

		/* USER CODE BEGIN 3 */

		/* ------------------- GPS parsing ------------------- */
		// Parse incoming GPS lines silently
		if (gps_ready) {
 8001890:	4b6a      	ldr	r3, [pc, #424]	@ (8001a3c <main+0x214>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01d      	beq.n	80018d6 <main+0xae>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189a:	b672      	cpsid	i
}
 800189c:	bf00      	nop
			__disable_irq();
			char tmp_line[GPS_LINE_MAX];
			strncpy(tmp_line, (char*) gps_line, GPS_LINE_MAX);
 800189e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	4966      	ldr	r1, [pc, #408]	@ (8001a40 <main+0x218>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fdaf 	bl	800840a <strncpy>
			tmp_line[GPS_LINE_MAX - 1] = '\0';
 80018ac:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018b0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
			gps_ready = 0;
 80018ba:	4b60      	ldr	r3, [pc, #384]	@ (8001a3c <main+0x214>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018c0:	b662      	cpsie	i
}
 80018c2:	bf00      	nop
			__enable_irq();

			strncpy((char*) gps_line, tmp_line, GPS_LINE_MAX);
 80018c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018c8:	2280      	movs	r2, #128	@ 0x80
 80018ca:	4619      	mov	r1, r3
 80018cc:	485c      	ldr	r0, [pc, #368]	@ (8001a40 <main+0x218>)
 80018ce:	f006 fd9c 	bl	800840a <strncpy>
			parse_GPRMC_from_line(); // just update latitude/longitude
 80018d2:	f7ff fd9d 	bl	8001410 <parse_GPRMC_from_line>
		}

		/* ------------------- Button-triggered report ------------------- */
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_RESET) {
 80018d6:	2120      	movs	r1, #32
 80018d8:	485a      	ldr	r0, [pc, #360]	@ (8001a44 <main+0x21c>)
 80018da:	f002 f9ab 	bl	8003c34 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1d5      	bne.n	8001890 <main+0x68>

			/* ---------- Step 1: Read MAX30102 samples ---------- */
			uint32_t ir_avg = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
			uint32_t red_avg = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
			uint32_t finger_threshold = 900; // adjust as needed
 80018f0:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80018f4:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
			uint8_t bp_sys, bp_dia;
			Generate_BP(&bp_sys, &bp_dia);
 80018f8:	f207 2226 	addw	r2, r7, #550	@ 0x226
 80018fc:	f207 2327 	addw	r3, r7, #551	@ 0x227
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff5c 	bl	80017c0 <Generate_BP>
			for (int i = 0; i < SAMPLE_SIZE; i++) {
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800190e:	e029      	b.n	8001964 <main+0x13c>
				MAX30102_ReadFIFO(&red_samples[i], &ir_samples[i]);
 8001910:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4a4c      	ldr	r2, [pc, #304]	@ (8001a48 <main+0x220>)
 8001918:	441a      	add	r2, r3
 800191a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	494a      	ldr	r1, [pc, #296]	@ (8001a4c <main+0x224>)
 8001922:	440b      	add	r3, r1
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f000 fbbc 	bl	80020a4 <MAX30102_ReadFIFO>
				ir_avg += ir_samples[i];
 800192c:	4a47      	ldr	r2, [pc, #284]	@ (8001a4c <main+0x224>)
 800192e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800193a:	4413      	add	r3, r2
 800193c:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
				red_avg += red_samples[i];
 8001940:	4a41      	ldr	r2, [pc, #260]	@ (8001a48 <main+0x220>)
 8001942:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800194e:	4413      	add	r3, r2
 8001950:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
				HAL_Delay(10);
 8001954:	200a      	movs	r0, #10
 8001956:	f001 f877 	bl	8002a48 <HAL_Delay>
			for (int i = 0; i < SAMPLE_SIZE; i++) {
 800195a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800195e:	3301      	adds	r3, #1
 8001960:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8001964:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001968:	2b63      	cmp	r3, #99	@ 0x63
 800196a:	ddd1      	ble.n	8001910 <main+0xe8>
			}

			ir_avg /= SAMPLE_SIZE;
 800196c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001970:	4a37      	ldr	r2, [pc, #220]	@ (8001a50 <main+0x228>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
			red_avg /= SAMPLE_SIZE;
 800197c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8001980:	4a33      	ldr	r2, [pc, #204]	@ (8001a50 <main+0x228>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
			/* ---------- Step 2: Finger Detection ---------- */
			double hr_to_send, spo2_to_send;

			char msg[128];

			if (ir_avg < finger_threshold && red_avg < finger_threshold) {
 800198c:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8001990:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8001994:	429a      	cmp	r2, r3
 8001996:	d267      	bcs.n	8001a68 <main+0x240>
 8001998:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800199c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d261      	bcs.n	8001a68 <main+0x240>
				// No finger detected
				sprintf(msg,
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	492a      	ldr	r1, [pc, #168]	@ (8001a54 <main+0x22c>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 fcae 	bl	800830c <siprintf>
						"⚠️ No finger detected. Place finger on sensor.\r\n");
				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg),
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fbcb 	bl	8000150 <strlen>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f107 0110 	add.w	r1, r7, #16
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	4824      	ldr	r0, [pc, #144]	@ (8001a58 <main+0x230>)
 80019c8:	f004 fa5a 	bl	8005e80 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				hr_to_send = 60.0;
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <main+0x234>)
 80019d2:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
				spo2_to_send = 70.0;
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <main+0x238>)
 80019dc:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

				sprintf(msg, "HR: %.1f bpm  SpO2: %.1f%% (Reference only)\r\n",
 80019e0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80019e4:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 80019e8:	f107 0410 	add.w	r4, r7, #16
 80019ec:	e9cd 2300 	strd	r2, r3, [sp]
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	491b      	ldr	r1, [pc, #108]	@ (8001a64 <main+0x23c>)
 80019f6:	4620      	mov	r0, r4
 80019f8:	f006 fc88 	bl	800830c <siprintf>
						hr_to_send, spo2_to_send);
				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg),
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fba5 	bl	8000150 <strlen>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	f107 0110 	add.w	r1, r7, #16
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <main+0x230>)
 8001a14:	f004 fa34 	bl	8005e80 <HAL_UART_Transmit>
 8001a18:	e04d      	b.n	8001ab6 <main+0x28e>
 8001a1a:	bf00      	nop
 8001a1c:	20000294 	.word	0x20000294
 8001a20:	20000210 	.word	0x20000210
 8001a24:	0800b298 	.word	0x0800b298
 8001a28:	0800b2b4 	.word	0x0800b2b4
 8001a2c:	200007a0 	.word	0x200007a0
 8001a30:	20000324 	.word	0x20000324
 8001a34:	0800b2c8 	.word	0x0800b2c8
 8001a38:	0800b2dc 	.word	0x0800b2dc
 8001a3c:	2000047e 	.word	0x2000047e
 8001a40:	200003fc 	.word	0x200003fc
 8001a44:	40010800 	.word	0x40010800
 8001a48:	20000480 	.word	0x20000480
 8001a4c:	20000610 	.word	0x20000610
 8001a50:	51eb851f 	.word	0x51eb851f
 8001a54:	0800b30c 	.word	0x0800b30c
 8001a58:	200002dc 	.word	0x200002dc
 8001a5c:	404e0000 	.word	0x404e0000
 8001a60:	40518000 	.word	0x40518000
 8001a64:	0800b344 	.word	0x0800b344
				HAL_MAX_DELAY);
			} else {
				// Finger detected, calculate real values
				Calculate_SPO2_HR(red_samples, ir_samples, SAMPLE_SIZE,
 8001a68:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8001a6c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	4613      	mov	r3, r2
 8001a74:	2264      	movs	r2, #100	@ 0x64
 8001a76:	4965      	ldr	r1, [pc, #404]	@ (8001c0c <main+0x3e4>)
 8001a78:	4865      	ldr	r0, [pc, #404]	@ (8001c10 <main+0x3e8>)
 8001a7a:	f000 fb6d 	bl	8002158 <Calculate_SPO2_HR>
						&spo2_to_send, &hr_to_send);

				sprintf(msg,
 8001a7e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8001a82:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8001a86:	f107 0410 	add.w	r4, r7, #16
 8001a8a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4960      	ldr	r1, [pc, #384]	@ (8001c14 <main+0x3ec>)
 8001a94:	4620      	mov	r0, r4
 8001a96:	f006 fc39 	bl	800830c <siprintf>
						"Finger detected ✅\r\nHR: %.1f bpm  SpO2: %.1f%%\r\n",
						hr_to_send, spo2_to_send);
				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg),
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fb56 	bl	8000150 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f107 0110 	add.w	r1, r7, #16
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	4859      	ldr	r0, [pc, #356]	@ (8001c18 <main+0x3f0>)
 8001ab2:	f004 f9e5 	bl	8005e80 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}

			/* ---------- Step 3: Read DHT11 and LM35 ---------- */
			uint8_t status = DHT11_Read(&dht_temp, &dht_hum);
 8001ab6:	4959      	ldr	r1, [pc, #356]	@ (8001c1c <main+0x3f4>)
 8001ab8:	4859      	ldr	r0, [pc, #356]	@ (8001c20 <main+0x3f8>)
 8001aba:	f7ff fae5 	bl	8001088 <DHT11_Read>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
			if (status != 0) {
 8001ac4:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <main+0x2b0>
				dht_temp = 0;
 8001acc:	4b54      	ldr	r3, [pc, #336]	@ (8001c20 <main+0x3f8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
				dht_hum = 0;
 8001ad2:	4b52      	ldr	r3, [pc, #328]	@ (8001c1c <main+0x3f4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
			}
			float lm35_temp = Read_LM35();
 8001ad8:	f7ff fbc6 	bl	8001268 <Read_LM35>
 8001adc:	f8c7 0228 	str.w	r0, [r7, #552]	@ 0x228

			/* ---------- Step 4: Prepare UART output ---------- */
			char out[256];
			snprintf(out, sizeof(out),
 8001ae0:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001ae4:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001ae8:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 8001aec:	461e      	mov	r6, r3
 8001aee:	f897 3226 	ldrb.w	r3, [r7, #550]	@ 0x226
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c20 <main+0x3f8>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b48      	ldr	r3, [pc, #288]	@ (8001c1c <main+0x3f4>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 8001b04:	f7fe fc90 	bl	8000428 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001b10:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	9208      	str	r2, [sp, #32]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	9307      	str	r3, [sp, #28]
 8001b20:	9606      	str	r6, [sp, #24]
 8001b22:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001b26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c24 <main+0x3fc>)
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c28 <main+0x400>)
 8001b30:	4a3e      	ldr	r2, [pc, #248]	@ (8001c2c <main+0x404>)
 8001b32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b36:	f006 fbb3 	bl	80082a0 <sniprintf>
					"LAT: %s\r\nLON: %s\r\nHR: %.1f bpm  SpO2: %.1f%%\r\n"
							"BP: %d/%d mmHg\r\n"
							"DHT Temp: %dC  Hum: %d%%\r\nLM35 Temp: %.2fC\r\n",
					latitude, longitude, hr_to_send, spo2_to_send, bp_sys,
					bp_dia, dht_temp, dht_hum, lm35_temp);
			HAL_UART_Transmit(&huart1, (uint8_t*) out, strlen(out),
 8001b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fb06 	bl	8000150 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	4831      	ldr	r0, [pc, #196]	@ (8001c18 <main+0x3f0>)
 8001b52:	f004 f995 	bl	8005e80 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			/* ---------- Step 5: Send SMS (always send) ---------- */
			char sms_payload[128];
			snprintf(sms_payload, sizeof(sms_payload),
 8001b56:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001b5a:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001b5e:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 8001b62:	461e      	mov	r6, r3
 8001b64:	f897 3226 	ldrb.w	r3, [r7, #550]	@ 0x226
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <main+0x3f8>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <main+0x3f4>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 8001b7a:	f7fe fc55 	bl	8000428 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001b86:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	9208      	str	r2, [sp, #32]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	9307      	str	r3, [sp, #28]
 8001b96:	9606      	str	r6, [sp, #24]
 8001b98:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001b9c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001ba0:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <main+0x3fc>)
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <main+0x400>)
 8001ba6:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <main+0x408>)
 8001ba8:	2180      	movs	r1, #128	@ 0x80
 8001baa:	f006 fb79 	bl	80082a0 <sniprintf>
					"LAT=%s LON=%s HR=%.1f SpO2=%.1f BP=%d/%d DHT_T=%d DHT_H=%d LM35_T=%.2f",
					latitude, longitude, hr_to_send, spo2_to_send, bp_sys,
					bp_dia, dht_temp, dht_hum, lm35_temp);

			GSM_SendSMS("+919985798499", sms_payload);
 8001bae:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481f      	ldr	r0, [pc, #124]	@ (8001c34 <main+0x40c>)
 8001bb6:	f7ff fb87 	bl	80012c8 <GSM_SendSMS>
			HAL_Delay(100);
 8001bba:	2064      	movs	r0, #100	@ 0x64
 8001bbc:	f000 ff44 	bl	8002a48 <HAL_Delay>
			GSM_SendSMS("+916005585291", sms_payload);
 8001bc0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	481c      	ldr	r0, [pc, #112]	@ (8001c38 <main+0x410>)
 8001bc8:	f7ff fb7e 	bl	80012c8 <GSM_SendSMS>
			HAL_Delay(100);
 8001bcc:	2064      	movs	r0, #100	@ 0x64
 8001bce:	f000 ff3b 	bl	8002a48 <HAL_Delay>
			GSM_SendSMS("+919677677535", sms_payload);
 8001bd2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4818      	ldr	r0, [pc, #96]	@ (8001c3c <main+0x414>)
 8001bda:	f7ff fb75 	bl	80012c8 <GSM_SendSMS>
			HAL_Delay(100);
 8001bde:	2064      	movs	r0, #100	@ 0x64
 8001be0:	f000 ff32 	bl	8002a48 <HAL_Delay>
			GSM_SendSMS("+917780718009", sms_payload);
 8001be4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001be8:	4619      	mov	r1, r3
 8001bea:	4815      	ldr	r0, [pc, #84]	@ (8001c40 <main+0x418>)
 8001bec:	f7ff fb6c 	bl	80012c8 <GSM_SendSMS>

			/* ---------- Step 6: Debounce ---------- */
			while (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_RESET)
 8001bf0:	bf00      	nop
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	4813      	ldr	r0, [pc, #76]	@ (8001c44 <main+0x41c>)
 8001bf6:	f002 f81d 	bl	8003c34 <HAL_GPIO_ReadPin>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f8      	beq.n	8001bf2 <main+0x3ca>
				;
			HAL_Delay(300);
 8001c00:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c04:	f000 ff20 	bl	8002a48 <HAL_Delay>
		if (gps_ready) {
 8001c08:	e642      	b.n	8001890 <main+0x68>
 8001c0a:	bf00      	nop
 8001c0c:	20000610 	.word	0x20000610
 8001c10:	20000480 	.word	0x20000480
 8001c14:	0800b374 	.word	0x0800b374
 8001c18:	200002dc 	.word	0x200002dc
 8001c1c:	200003f9 	.word	0x200003f9
 8001c20:	200003f8 	.word	0x200003f8
 8001c24:	20000010 	.word	0x20000010
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	0800b3a8 	.word	0x0800b3a8
 8001c30:	0800b414 	.word	0x0800b414
 8001c34:	0800b45c 	.word	0x0800b45c
 8001c38:	0800b46c 	.word	0x0800b46c
 8001c3c:	0800b47c 	.word	0x0800b47c
 8001c40:	0800b48c 	.word	0x0800b48c
 8001c44:	40010800 	.word	0x40010800

08001c48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b094      	sub	sp, #80	@ 0x50
 8001c4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c52:	2228      	movs	r2, #40	@ 0x28
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f006 fbbd 	bl	80083d6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c86:	2301      	movs	r3, #1
 8001c88:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c92:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c94:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 f85e 	bl	8004d60 <HAL_RCC_OscConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0x66>
		Error_Handler();
 8001caa:	f000 fb57 	bl	800235c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001cae:	230f      	movs	r3, #15
 8001cb0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cbe:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2102      	movs	r1, #2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 faca 	bl	8005264 <HAL_RCC_ClockConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0x92>
		Error_Handler();
 8001cd6:	f000 fb41 	bl	800235c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ce2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fc4a 	bl	8005580 <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0xae>
		Error_Handler();
 8001cf2:	f000 fb33 	bl	800235c <Error_Handler>
	}
}
 8001cf6:	bf00      	nop
 8001cf8:	3750      	adds	r7, #80	@ 0x50
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001d10:	4b18      	ldr	r3, [pc, #96]	@ (8001d74 <MX_ADC1_Init+0x74>)
 8001d12:	4a19      	ldr	r2, [pc, #100]	@ (8001d78 <MX_ADC1_Init+0x78>)
 8001d14:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d16:	4b17      	ldr	r3, [pc, #92]	@ (8001d74 <MX_ADC1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <MX_ADC1_Init+0x74>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d22:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <MX_ADC1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d28:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <MX_ADC1_Init+0x74>)
 8001d2a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001d2e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d30:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <MX_ADC1_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <MX_ADC1_Init+0x74>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001d3c:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <MX_ADC1_Init+0x74>)
 8001d3e:	f000 fea7 	bl	8002a90 <HAL_ADC_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001d48:	f000 fb08 	bl	800235c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001d54:	2306      	movs	r3, #6
 8001d56:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <MX_ADC1_Init+0x74>)
 8001d5e:	f001 f92f 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001d68:	f000 faf8 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000210 	.word	0x20000210
 8001d78:	40012400 	.word	0x40012400

08001d7c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d82:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <MX_I2C1_Init+0x54>)
 8001d84:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d88:	4a12      	ldr	r2, [pc, #72]	@ (8001dd4 <MX_I2C1_Init+0x58>)
 8001d8a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d9e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dac:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001db8:	4804      	ldr	r0, [pc, #16]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001dba:	f001 ff6b 	bl	8003c94 <HAL_I2C_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001dc4:	f000 faca 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000240 	.word	0x20000240
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	000186a0 	.word	0x000186a0

08001dd8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001dec:	463b      	mov	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <MX_TIM2_Init+0x94>)
 8001df6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dfa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 71;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <MX_TIM2_Init+0x94>)
 8001dfe:	2247      	movs	r2, #71	@ 0x47
 8001e00:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <MX_TIM2_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001e08:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <MX_TIM2_Init+0x94>)
 8001e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e0e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b16      	ldr	r3, [pc, #88]	@ (8001e6c <MX_TIM2_Init+0x94>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <MX_TIM2_Init+0x94>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001e1c:	4813      	ldr	r0, [pc, #76]	@ (8001e6c <MX_TIM2_Init+0x94>)
 8001e1e:	f003 fd1b 	bl	8005858 <HAL_TIM_Base_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM2_Init+0x54>
		Error_Handler();
 8001e28:	f000 fa98 	bl	800235c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e30:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e32:	f107 0308 	add.w	r3, r7, #8
 8001e36:	4619      	mov	r1, r3
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <MX_TIM2_Init+0x94>)
 8001e3a:	f003 fda7 	bl	800598c <HAL_TIM_ConfigClockSource>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001e44:	f000 fa8a 	bl	800235c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001e50:	463b      	mov	r3, r7
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <MX_TIM2_Init+0x94>)
 8001e56:	f003 ff65 	bl	8005d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001e60:	f000 fa7c 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000294 	.word	0x20000294

08001e70 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <MX_USART1_UART_Init+0x50>)
 8001e78:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e80:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001ea6:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001ea8:	f003 ff9a 	bl	8005de0 <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001eb2:	f000 fa53 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200002dc 	.word	0x200002dc
 8001ec0:	40013800 	.word	0x40013800

08001ec4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <MX_USART2_UART_Init+0x50>)
 8001ecc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001ed4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001eea:	220c      	movs	r2, #12
 8001eec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001efa:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001efc:	f003 ff70 	bl	8005de0 <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001f06:	f000 fa29 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000324 	.word	0x20000324
 8001f14:	40004400 	.word	0x40004400

08001f18 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <MX_USART3_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f24:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f28:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001f4e:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f50:	f003 ff46 	bl	8005de0 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001f5a:	f000 f9ff 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000036c 	.word	0x2000036c
 8001f68:	40004800 	.word	0x40004800

08001f6c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f72:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <MX_DMA_Init+0x38>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <MX_DMA_Init+0x38>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6153      	str	r3, [r2, #20]
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <MX_DMA_Init+0x38>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	200d      	movs	r0, #13
 8001f90:	f001 fa81 	bl	8003496 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f94:	200d      	movs	r0, #13
 8001f96:	f001 fa9a 	bl	80034ce <HAL_NVIC_EnableIRQ>

}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbc:	4b29      	ldr	r3, [pc, #164]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd4:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a16      	ldr	r2, [pc, #88]	@ (8002064 <MX_GPIO_Init+0xbc>)
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	2140      	movs	r1, #64	@ 0x40
 8002020:	4811      	ldr	r0, [pc, #68]	@ (8002068 <MX_GPIO_Init+0xc0>)
 8002022:	f001 fe1e 	bl	8003c62 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002026:	2320      	movs	r3, #32
 8002028:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202e:	2301      	movs	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4619      	mov	r1, r3
 8002038:	480b      	ldr	r0, [pc, #44]	@ (8002068 <MX_GPIO_Init+0xc0>)
 800203a:	f001 fc77 	bl	800392c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800203e:	2340      	movs	r3, #64	@ 0x40
 8002040:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002042:	2301      	movs	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2302      	movs	r3, #2
 800204c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	4619      	mov	r1, r3
 8002054:	4804      	ldr	r0, [pc, #16]	@ (8002068 <MX_GPIO_Init+0xc0>)
 8002056:	f001 fc69 	bl	800392c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800

0800206c <MAX30102_WriteReg>:

/* USER CODE BEGIN 4 */
void MAX30102_WriteReg(uint8_t reg, uint8_t value) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af04      	add	r7, sp, #16
 8002072:	4603      	mov	r3, r0
 8002074:	460a      	mov	r2, r1
 8002076:	71fb      	strb	r3, [r7, #7]
 8002078:	4613      	mov	r3, r2
 800207a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value,
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	b29a      	uxth	r2, r3
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	2301      	movs	r3, #1
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	1dbb      	adds	r3, r7, #6
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	21ae      	movs	r1, #174	@ 0xae
 8002092:	4803      	ldr	r0, [pc, #12]	@ (80020a0 <MAX30102_WriteReg+0x34>)
 8002094:	f001 ff42 	bl	8003f1c <HAL_I2C_Mem_Write>
			1, HAL_MAX_DELAY);
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000240 	.word	0x20000240

080020a4 <MAX30102_ReadFIFO>:
	HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value,
			1, HAL_MAX_DELAY);
	return value;
}

void MAX30102_ReadFIFO(uint32_t *red_led, uint32_t *ir_led) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR, REG_FIFO_DATA,
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	2306      	movs	r3, #6
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	2207      	movs	r2, #7
 80020c2:	21ae      	movs	r1, #174	@ 0xae
 80020c4:	480e      	ldr	r0, [pc, #56]	@ (8002100 <MAX30102_ReadFIFO+0x5c>)
 80020c6:	f002 f823 	bl	8004110 <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);

	*red_led = ((uint32_t) (data[0] & 0x03) << 16) | ((uint32_t) data[1] << 8)
 80020ca:	7a3b      	ldrb	r3, [r7, #8]
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020d2:	7a7b      	ldrb	r3, [r7, #9]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	4313      	orrs	r3, r2
			| data[2];
 80020d8:	7aba      	ldrb	r2, [r7, #10]
 80020da:	431a      	orrs	r2, r3
	*red_led = ((uint32_t) (data[0] & 0x03) << 16) | ((uint32_t) data[1] << 8)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	601a      	str	r2, [r3, #0]
	*ir_led = ((uint32_t) (data[3] & 0x03) << 16) | ((uint32_t) data[4] << 8)
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	4313      	orrs	r3, r2
			| data[5];
 80020ee:	7b7a      	ldrb	r2, [r7, #13]
 80020f0:	431a      	orrs	r2, r3
	*ir_led = ((uint32_t) (data[3] & 0x03) << 16) | ((uint32_t) data[4] << 8)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	601a      	str	r2, [r3, #0]
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000240 	.word	0x20000240

08002104 <MAX30102_Init>:

void MAX30102_Init(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	// Reset
	MAX30102_WriteReg(REG_MODE_CONFIG, 0x40);
 8002108:	2140      	movs	r1, #64	@ 0x40
 800210a:	2009      	movs	r0, #9
 800210c:	f7ff ffae 	bl	800206c <MAX30102_WriteReg>
	HAL_Delay(100);
 8002110:	2064      	movs	r0, #100	@ 0x64
 8002112:	f000 fc99 	bl	8002a48 <HAL_Delay>

	// SpO2 mode
	MAX30102_WriteReg(REG_MODE_CONFIG, 0x03);
 8002116:	2103      	movs	r1, #3
 8002118:	2009      	movs	r0, #9
 800211a:	f7ff ffa7 	bl	800206c <MAX30102_WriteReg>

	// SpO2 config: ADC range = 4096nA, sample rate = 100Hz, pulse width = 411us
	MAX30102_WriteReg(REG_SPO2_CONFIG, 0x27);
 800211e:	2127      	movs	r1, #39	@ 0x27
 8002120:	200a      	movs	r0, #10
 8002122:	f7ff ffa3 	bl	800206c <MAX30102_WriteReg>

	// LED pulse amplitudes
	MAX30102_WriteReg(REG_LED1_PA, 0x24); // Red LED
 8002126:	2124      	movs	r1, #36	@ 0x24
 8002128:	200c      	movs	r0, #12
 800212a:	f7ff ff9f 	bl	800206c <MAX30102_WriteReg>
	MAX30102_WriteReg(REG_LED2_PA, 0x24); // IR LED
 800212e:	2124      	movs	r1, #36	@ 0x24
 8002130:	200d      	movs	r0, #13
 8002132:	f7ff ff9b 	bl	800206c <MAX30102_WriteReg>

	// Clear FIFO pointers
	MAX30102_WriteReg(REG_FIFO_WR_PTR, 0x00);
 8002136:	2100      	movs	r1, #0
 8002138:	2002      	movs	r0, #2
 800213a:	f7ff ff97 	bl	800206c <MAX30102_WriteReg>
	MAX30102_WriteReg(REG_FIFO_RD_PTR, 0x00);
 800213e:	2100      	movs	r1, #0
 8002140:	2003      	movs	r0, #3
 8002142:	f7ff ff93 	bl	800206c <MAX30102_WriteReg>
	MAX30102_WriteReg(REG_FIFO_OVERFLOW, 0x00);
 8002146:	2100      	movs	r1, #0
 8002148:	2004      	movs	r0, #4
 800214a:	f7ff ff8f 	bl	800206c <MAX30102_WriteReg>
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	0000      	movs	r0, r0
 8002154:	0000      	movs	r0, r0
	...

08002158 <Calculate_SPO2_HR>:
/**
 * Simple HR and SpO2 placeholder calculation (basic RMS method)
 * Replace with proper MAX30102 algorithm for accuracy.
 */
void Calculate_SPO2_HR(uint32_t *red_buf, uint32_t *ir_buf, int size,
		double *spo2, double *hr) {
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b090      	sub	sp, #64	@ 0x40
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
	double red_avg = 0, ir_avg = 0;
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	for (int i = 0; i < size; i++) {
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002182:	e026      	b.n	80021d2 <Calculate_SPO2_HR+0x7a>
		red_avg += red_buf[i];
 8002184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f928 	bl	80003e4 <__aeabi_ui2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800219c:	f7fd ffe6 	bl	800016c <__adddf3>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		ir_avg += ir_buf[i];
 80021a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	4413      	add	r3, r2
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f916 	bl	80003e4 <__aeabi_ui2d>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80021c0:	f7fd ffd4 	bl	800016c <__adddf3>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	for (int i = 0; i < size; i++) {
 80021cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ce:	3301      	adds	r3, #1
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	dbd4      	blt.n	8002184 <Calculate_SPO2_HR+0x2c>
	}
	red_avg /= size;
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe f912 	bl	8000404 <__aeabi_i2d>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021e8:	f7fe faa0 	bl	800072c <__aeabi_ddiv>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	ir_avg /= size;
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7fe f905 	bl	8000404 <__aeabi_i2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002202:	f7fe fa93 	bl	800072c <__aeabi_ddiv>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	double ratio = red_avg / ir_avg;
 800220e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002212:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002216:	f7fe fa89 	bl	800072c <__aeabi_ddiv>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*spo2 = 110.0 - (25.0 * ratio); // rough linear estimate
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	4b46      	ldr	r3, [pc, #280]	@ (8002340 <Calculate_SPO2_HR+0x1e8>)
 8002228:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800222c:	f7fe f954 	bl	80004d8 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	f04f 0000 	mov.w	r0, #0
 8002238:	4942      	ldr	r1, [pc, #264]	@ (8002344 <Calculate_SPO2_HR+0x1ec>)
 800223a:	f7fd ff95 	bl	8000168 <__aeabi_dsub>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	e9c1 2300 	strd	r2, r3, [r1]
	if (*spo2 > 100)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4b3d      	ldr	r3, [pc, #244]	@ (8002348 <Calculate_SPO2_HR+0x1f0>)
 8002254:	f7fe fbd0 	bl	80009f8 <__aeabi_dcmpgt>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <Calculate_SPO2_HR+0x112>
		*spo2 = 99;
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	a335      	add	r3, pc, #212	@ (adr r3, 8002338 <Calculate_SPO2_HR+0x1e0>)
 8002262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002266:	e9c1 2300 	strd	r2, r3, [r1]
	if (*spo2 < 50)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	4b35      	ldr	r3, [pc, #212]	@ (800234c <Calculate_SPO2_HR+0x1f4>)
 8002276:	f7fe fba1 	bl	80009bc <__aeabi_dcmplt>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <Calculate_SPO2_HR+0x134>
		*spo2 = 50;
 8002280:	6839      	ldr	r1, [r7, #0]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	4b31      	ldr	r3, [pc, #196]	@ (800234c <Calculate_SPO2_HR+0x1f4>)
 8002288:	e9c1 2300 	strd	r2, r3, [r1]

	// Simulated heart rate from signal variance
	double variance = 0;
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < size; i++)
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	e01d      	b.n	80022da <Calculate_SPO2_HR+0x182>
		variance += fabs((double) ir_buf[i] - ir_avg);
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4413      	add	r3, r2
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe f89b 	bl	80003e4 <__aeabi_ui2d>
 80022ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022b2:	f7fd ff59 	bl	8000168 <__aeabi_dsub>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4614      	mov	r4, r2
 80022bc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80022c0:	4622      	mov	r2, r4
 80022c2:	462b      	mov	r3, r5
 80022c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022c8:	f7fd ff50 	bl	800016c <__adddf3>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < size; i++)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	3301      	adds	r3, #1
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	dbdd      	blt.n	800229e <Calculate_SPO2_HR+0x146>
	variance /= size;
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe f88e 	bl	8000404 <__aeabi_i2d>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022f0:	f7fe fa1c 	bl	800072c <__aeabi_ddiv>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	*hr = 60.0 + fmod(variance / 1000.0, 40.0); // between 60–100 bpm
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <Calculate_SPO2_HR+0x1f8>)
 8002302:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002306:	f7fe fa11 	bl	800072c <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <Calculate_SPO2_HR+0x1fc>)
 8002318:	f008 fe38 	bl	800af8c <fmod>
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <Calculate_SPO2_HR+0x200>)
 8002322:	f7fd ff23 	bl	800016c <__adddf3>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800232c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002330:	bf00      	nop
 8002332:	3740      	adds	r7, #64	@ 0x40
 8002334:	46bd      	mov	sp, r7
 8002336:	bdb0      	pop	{r4, r5, r7, pc}
 8002338:	00000000 	.word	0x00000000
 800233c:	4058c000 	.word	0x4058c000
 8002340:	40390000 	.word	0x40390000
 8002344:	405b8000 	.word	0x405b8000
 8002348:	40590000 	.word	0x40590000
 800234c:	40490000 	.word	0x40490000
 8002350:	408f4000 	.word	0x408f4000
 8002354:	40440000 	.word	0x40440000
 8002358:	404e0000 	.word	0x404e0000

0800235c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <Error_Handler+0x8>

08002368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_MspInit+0x5c>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <HAL_MspInit+0x5c>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6193      	str	r3, [r2, #24]
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_MspInit+0x5c>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <HAL_MspInit+0x5c>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a0e      	ldr	r2, [pc, #56]	@ (80023c4 <HAL_MspInit+0x5c>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HAL_MspInit+0x5c>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <HAL_MspInit+0x60>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <HAL_MspInit+0x60>)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40010000 	.word	0x40010000

080023cc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <HAL_ADC_MspInit+0x6c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d121      	bne.n	8002430 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ec:	4b13      	ldr	r3, [pc, #76]	@ (800243c <HAL_ADC_MspInit+0x70>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a12      	ldr	r2, [pc, #72]	@ (800243c <HAL_ADC_MspInit+0x70>)
 80023f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b10      	ldr	r3, [pc, #64]	@ (800243c <HAL_ADC_MspInit+0x70>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <HAL_ADC_MspInit+0x70>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a0c      	ldr	r2, [pc, #48]	@ (800243c <HAL_ADC_MspInit+0x70>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_ADC_MspInit+0x70>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800241c:	2301      	movs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002420:	2303      	movs	r3, #3
 8002422:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	4619      	mov	r1, r3
 800242a:	4805      	ldr	r0, [pc, #20]	@ (8002440 <HAL_ADC_MspInit+0x74>)
 800242c:	f001 fa7e 	bl	800392c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002430:	bf00      	nop
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40012400 	.word	0x40012400
 800243c:	40021000 	.word	0x40021000
 8002440:	40010800 	.word	0x40010800

08002444 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a15      	ldr	r2, [pc, #84]	@ (80024b4 <HAL_I2C_MspInit+0x70>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d123      	bne.n	80024ac <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	4b14      	ldr	r3, [pc, #80]	@ (80024b8 <HAL_I2C_MspInit+0x74>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a13      	ldr	r2, [pc, #76]	@ (80024b8 <HAL_I2C_MspInit+0x74>)
 800246a:	f043 0308 	orr.w	r3, r3, #8
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_I2C_MspInit+0x74>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800247c:	23c0      	movs	r3, #192	@ 0xc0
 800247e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002480:	2312      	movs	r3, #18
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	4619      	mov	r1, r3
 800248e:	480b      	ldr	r0, [pc, #44]	@ (80024bc <HAL_I2C_MspInit+0x78>)
 8002490:	f001 fa4c 	bl	800392c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002494:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <HAL_I2C_MspInit+0x74>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4a07      	ldr	r2, [pc, #28]	@ (80024b8 <HAL_I2C_MspInit+0x74>)
 800249a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800249e:	61d3      	str	r3, [r2, #28]
 80024a0:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <HAL_I2C_MspInit+0x74>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024ac:	bf00      	nop
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40005400 	.word	0x40005400
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40010c00 	.word	0x40010c00

080024c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d0:	d10b      	bne.n	80024ea <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d2:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <HAL_TIM_Base_MspInit+0x34>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_TIM_Base_MspInit+0x34>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	61d3      	str	r3, [r2, #28]
 80024de:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_TIM_Base_MspInit+0x34>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	@ 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0320 	add.w	r3, r7, #32
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a73      	ldr	r2, [pc, #460]	@ (80026e0 <HAL_UART_MspInit+0x1e8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d13a      	bne.n	800258e <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002518:	4b72      	ldr	r3, [pc, #456]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a71      	ldr	r2, [pc, #452]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 800251e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b6f      	ldr	r3, [pc, #444]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002530:	4b6c      	ldr	r3, [pc, #432]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a6b      	ldr	r2, [pc, #428]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b69      	ldr	r3, [pc, #420]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800254c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 0320 	add.w	r3, r7, #32
 800255a:	4619      	mov	r1, r3
 800255c:	4862      	ldr	r0, [pc, #392]	@ (80026e8 <HAL_UART_MspInit+0x1f0>)
 800255e:	f001 f9e5 	bl	800392c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	4619      	mov	r1, r3
 8002576:	485c      	ldr	r0, [pc, #368]	@ (80026e8 <HAL_UART_MspInit+0x1f0>)
 8002578:	f001 f9d8 	bl	800392c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	2025      	movs	r0, #37	@ 0x25
 8002582:	f000 ff88 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002586:	2025      	movs	r0, #37	@ 0x25
 8002588:	f000 ffa1 	bl	80034ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800258c:	e0a3      	b.n	80026d6 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a56      	ldr	r2, [pc, #344]	@ (80026ec <HAL_UART_MspInit+0x1f4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d138      	bne.n	800260a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002598:	4b52      	ldr	r3, [pc, #328]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	4a51      	ldr	r2, [pc, #324]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a2:	61d3      	str	r3, [r2, #28]
 80025a4:	4b4f      	ldr	r3, [pc, #316]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	4b4c      	ldr	r3, [pc, #304]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a4b      	ldr	r2, [pc, #300]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b49      	ldr	r3, [pc, #292]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025c8:	2304      	movs	r3, #4
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d4:	f107 0320 	add.w	r3, r7, #32
 80025d8:	4619      	mov	r1, r3
 80025da:	4843      	ldr	r0, [pc, #268]	@ (80026e8 <HAL_UART_MspInit+0x1f0>)
 80025dc:	f001 f9a6 	bl	800392c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025e0:	2308      	movs	r3, #8
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 0320 	add.w	r3, r7, #32
 80025f0:	4619      	mov	r1, r3
 80025f2:	483d      	ldr	r0, [pc, #244]	@ (80026e8 <HAL_UART_MspInit+0x1f0>)
 80025f4:	f001 f99a 	bl	800392c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	2026      	movs	r0, #38	@ 0x26
 80025fe:	f000 ff4a 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002602:	2026      	movs	r0, #38	@ 0x26
 8002604:	f000 ff63 	bl	80034ce <HAL_NVIC_EnableIRQ>
}
 8002608:	e065      	b.n	80026d6 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a38      	ldr	r2, [pc, #224]	@ (80026f0 <HAL_UART_MspInit+0x1f8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d160      	bne.n	80026d6 <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002614:	4b33      	ldr	r3, [pc, #204]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4a32      	ldr	r2, [pc, #200]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 800261a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800261e:	61d3      	str	r3, [r2, #28]
 8002620:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262c:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a2c      	ldr	r2, [pc, #176]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 8002632:	f043 0308 	orr.w	r3, r3, #8
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <HAL_UART_MspInit+0x1ec>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002652:	f107 0320 	add.w	r3, r7, #32
 8002656:	4619      	mov	r1, r3
 8002658:	4826      	ldr	r0, [pc, #152]	@ (80026f4 <HAL_UART_MspInit+0x1fc>)
 800265a:	f001 f967 	bl	800392c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800265e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	f107 0320 	add.w	r3, r7, #32
 8002670:	4619      	mov	r1, r3
 8002672:	4820      	ldr	r0, [pc, #128]	@ (80026f4 <HAL_UART_MspInit+0x1fc>)
 8002674:	f001 f95a 	bl	800392c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002678:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 800267a:	4a20      	ldr	r2, [pc, #128]	@ (80026fc <HAL_UART_MspInit+0x204>)
 800267c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800267e:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002684:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800268a:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 800268c:	2280      	movs	r2, #128	@ 0x80
 800268e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002690:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002696:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 8002698:	2200      	movs	r2, #0
 800269a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 800269e:	2220      	movs	r2, #32
 80026a0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 80026a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026aa:	4813      	ldr	r0, [pc, #76]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 80026ac:	f000 ff2a 	bl	8003504 <HAL_DMA_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 80026b6:	f7ff fe51 	bl	800235c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a0e      	ldr	r2, [pc, #56]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 80026be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026c0:	4a0d      	ldr	r2, [pc, #52]	@ (80026f8 <HAL_UART_MspInit+0x200>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	2027      	movs	r0, #39	@ 0x27
 80026cc:	f000 fee3 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026d0:	2027      	movs	r0, #39	@ 0x27
 80026d2:	f000 fefc 	bl	80034ce <HAL_NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3730      	adds	r7, #48	@ 0x30
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40013800 	.word	0x40013800
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40010800 	.word	0x40010800
 80026ec:	40004400 	.word	0x40004400
 80026f0:	40004800 	.word	0x40004800
 80026f4:	40010c00 	.word	0x40010c00
 80026f8:	200003b4 	.word	0x200003b4
 80026fc:	40020030 	.word	0x40020030

08002700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <NMI_Handler+0x4>

08002708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <MemManage_Handler+0x4>

08002718 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <BusFault_Handler+0x4>

08002720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <UsageFault_Handler+0x4>

08002728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002750:	f000 f95e 	bl	8002a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}

08002758 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800275c:	4802      	ldr	r0, [pc, #8]	@ (8002768 <DMA1_Channel3_IRQHandler+0x10>)
 800275e:	f000 ffdf 	bl	8003720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200003b4 	.word	0x200003b4

0800276c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <USART1_IRQHandler+0x10>)
 8002772:	f003 fccd 	bl	8006110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200002dc 	.word	0x200002dc

08002780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <USART2_IRQHandler+0x10>)
 8002786:	f003 fcc3 	bl	8006110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000324 	.word	0x20000324

08002794 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <USART3_IRQHandler+0x10>)
 800279a:	f003 fcb9 	bl	8006110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000036c 	.word	0x2000036c

080027a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return 1;
 80027ac:	2301      	movs	r3, #1
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <_kill>:

int _kill(int pid, int sig)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027c0:	f005 fef2 	bl	80085a8 <__errno>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2216      	movs	r2, #22
 80027c8:	601a      	str	r2, [r3, #0]
  return -1;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_exit>:

void _exit (int status)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027de:	f04f 31ff 	mov.w	r1, #4294967295
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffe7 	bl	80027b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <_exit+0x12>

080027ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e00a      	b.n	8002814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027fe:	f3af 8000 	nop.w
 8002802:	4601      	mov	r1, r0
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	60ba      	str	r2, [r7, #8]
 800280a:	b2ca      	uxtb	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3301      	adds	r3, #1
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	dbf0      	blt.n	80027fe <_read+0x12>
  }

  return len;
 800281c:	687b      	ldr	r3, [r7, #4]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e009      	b.n	800284c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	dbf1      	blt.n	8002838 <_write+0x12>
  }
  return len;
 8002854:	687b      	ldr	r3, [r7, #4]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_close>:

int _close(int file)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002884:	605a      	str	r2, [r3, #4]
  return 0;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <_isatty>:

int _isatty(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
	...

080028c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c8:	4a14      	ldr	r2, [pc, #80]	@ (800291c <_sbrk+0x5c>)
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <_sbrk+0x60>)
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <_sbrk+0x64>)
 80028de:	4a12      	ldr	r2, [pc, #72]	@ (8002928 <_sbrk+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e2:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d207      	bcs.n	8002900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f0:	f005 fe5a 	bl	80085a8 <__errno>
 80028f4:	4603      	mov	r3, r0
 80028f6:	220c      	movs	r2, #12
 80028f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	e009      	b.n	8002914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002900:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002906:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <_sbrk+0x64>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	4a05      	ldr	r2, [pc, #20]	@ (8002924 <_sbrk+0x64>)
 8002910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20005000 	.word	0x20005000
 8002920:	00000400 	.word	0x00000400
 8002924:	20000820 	.word	0x20000820
 8002928:	20000978 	.word	0x20000978

0800292c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002938:	f7ff fff8 	bl	800292c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800293c:	480b      	ldr	r0, [pc, #44]	@ (800296c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800293e:	490c      	ldr	r1, [pc, #48]	@ (8002970 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002940:	4a0c      	ldr	r2, [pc, #48]	@ (8002974 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002944:	e002      	b.n	800294c <LoopCopyDataInit>

08002946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294a:	3304      	adds	r3, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800294c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002950:	d3f9      	bcc.n	8002946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002952:	4a09      	ldr	r2, [pc, #36]	@ (8002978 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002954:	4c09      	ldr	r4, [pc, #36]	@ (800297c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002958:	e001      	b.n	800295e <LoopFillZerobss>

0800295a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800295c:	3204      	adds	r2, #4

0800295e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002960:	d3fb      	bcc.n	800295a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002962:	f005 fe27 	bl	80085b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002966:	f7fe ff5f 	bl	8001828 <main>
  bx lr
 800296a:	4770      	bx	lr
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002970:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002974:	0800b9d8 	.word	0x0800b9d8
  ldr r2, =_sbss
 8002978:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800297c:	20000974 	.word	0x20000974

08002980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC1_2_IRQHandler>
	...

08002984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_Init+0x28>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <HAL_Init+0x28>)
 800298e:	f043 0310 	orr.w	r3, r3, #16
 8002992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 fd73 	bl	8003480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299a:	200f      	movs	r0, #15
 800299c:	f000 f808 	bl	80029b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a0:	f7ff fce2 	bl	8002368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40022000 	.word	0x40022000

080029b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_InitTick+0x54>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_InitTick+0x58>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fd8b 	bl	80034ea <HAL_SYSTICK_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00e      	b.n	80029fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b0f      	cmp	r3, #15
 80029e2:	d80a      	bhi.n	80029fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e4:	2200      	movs	r2, #0
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f000 fd53 	bl	8003496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f0:	4a06      	ldr	r2, [pc, #24]	@ (8002a0c <HAL_InitTick+0x5c>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000020 	.word	0x20000020
 8002a08:	20000028 	.word	0x20000028
 8002a0c:	20000024 	.word	0x20000024

08002a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <HAL_IncTick+0x1c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_IncTick+0x20>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a03      	ldr	r2, [pc, #12]	@ (8002a30 <HAL_IncTick+0x20>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	20000028 	.word	0x20000028
 8002a30:	20000824 	.word	0x20000824

08002a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return uwTick;
 8002a38:	4b02      	ldr	r3, [pc, #8]	@ (8002a44 <HAL_GetTick+0x10>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	20000824 	.word	0x20000824

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff fff0 	bl	8002a34 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffe0 	bl	8002a34 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000028 	.word	0x20000028

08002a90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0be      	b.n	8002c30 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fc7c 	bl	80023cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fbc5 	bl	8003264 <ADC_ConversionStop_Disable>
 8002ada:	4603      	mov	r3, r0
 8002adc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8099 	bne.w	8002c1e <HAL_ADC_Init+0x18e>
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 8095 	bne.w	8002c1e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002afc:	f023 0302 	bic.w	r3, r3, #2
 8002b00:	f043 0202 	orr.w	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b10:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7b1b      	ldrb	r3, [r3, #12]
 8002b16:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b18:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b28:	d003      	beq.n	8002b32 <HAL_ADC_Init+0xa2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_ADC_Init+0xa8>
 8002b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b36:	e000      	b.n	8002b3a <HAL_ADC_Init+0xaa>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7d1b      	ldrb	r3, [r3, #20]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d119      	bne.n	8002b7c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7b1b      	ldrb	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	035a      	lsls	r2, r3, #13
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e00b      	b.n	8002b7c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <HAL_ADC_Init+0x1a8>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bac:	d003      	beq.n	8002bb6 <HAL_ADC_Init+0x126>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d104      	bne.n	8002bc0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	051b      	lsls	r3, r3, #20
 8002bbe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	4b18      	ldr	r3, [pc, #96]	@ (8002c3c <HAL_ADC_Init+0x1ac>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d10b      	bne.n	8002bfc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bfa:	e018      	b.n	8002c2e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	f023 0312 	bic.w	r3, r3, #18
 8002c04:	f043 0210 	orr.w	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c1c:	e007      	b.n	8002c2e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	f043 0210 	orr.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	ffe1f7fd 	.word	0xffe1f7fd
 8002c3c:	ff1f0efe 	.word	0xff1f0efe

08002c40 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_Start+0x1a>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e098      	b.n	8002d8c <HAL_ADC_Start+0x14c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 faa4 	bl	80031b0 <ADC_Enable>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 8087 	bne.w	8002d82 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a41      	ldr	r2, [pc, #260]	@ (8002d94 <HAL_ADC_Start+0x154>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d105      	bne.n	8002c9e <HAL_ADC_Start+0x5e>
 8002c92:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_ADC_Start+0x158>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d115      	bne.n	8002cca <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d026      	beq.n	8002d06 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cc0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cc8:	e01d      	b.n	8002d06 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2f      	ldr	r2, [pc, #188]	@ (8002d98 <HAL_ADC_Start+0x158>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_ADC_Start+0xaa>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d94 <HAL_ADC_Start+0x154>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10d      	bne.n	8002d06 <HAL_ADC_Start+0xc6>
 8002cea:	4b2b      	ldr	r3, [pc, #172]	@ (8002d98 <HAL_ADC_Start+0x158>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cfe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	f023 0206 	bic.w	r2, r3, #6
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d1e:	e002      	b.n	8002d26 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f06f 0202 	mvn.w	r2, #2
 8002d36:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002d42:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d46:	d113      	bne.n	8002d70 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d4c:	4a11      	ldr	r2, [pc, #68]	@ (8002d94 <HAL_ADC_Start+0x154>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d105      	bne.n	8002d5e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <HAL_ADC_Start+0x158>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	e00c      	b.n	8002d8a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	e003      	b.n	8002d8a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40012800 	.word	0x40012800
 8002d98:	40012400 	.word	0x40012400

08002d9c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002db2:	f7ff fe3f 	bl	8002a34 <HAL_GetTick>
 8002db6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0d3      	b.n	8002f86 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d131      	bne.n	8002e50 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d12a      	bne.n	8002e50 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002dfa:	e021      	b.n	8002e40 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d01d      	beq.n	8002e40 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <HAL_ADC_PollForConversion+0x7e>
 8002e0a:	f7ff fe13 	bl	8002a34 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d212      	bcs.n	8002e40 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f043 0204 	orr.w	r2, r3, #4
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0a2      	b.n	8002f86 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0d6      	beq.n	8002dfc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e4e:	e070      	b.n	8002f32 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e50:	4b4f      	ldr	r3, [pc, #316]	@ (8002f90 <HAL_ADC_PollForConversion+0x1f4>)
 8002e52:	681c      	ldr	r4, [r3, #0]
 8002e54:	2002      	movs	r0, #2
 8002e56:	f002 fc49 	bl	80056ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6919      	ldr	r1, [r3, #16]
 8002e66:	4b4b      	ldr	r3, [pc, #300]	@ (8002f94 <HAL_ADC_PollForConversion+0x1f8>)
 8002e68:	400b      	ands	r3, r1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_ADC_PollForConversion+0x104>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68d9      	ldr	r1, [r3, #12]
 8002e74:	4b48      	ldr	r3, [pc, #288]	@ (8002f98 <HAL_ADC_PollForConversion+0x1fc>)
 8002e76:	400b      	ands	r3, r1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d111      	bne.n	8002ea0 <HAL_ADC_PollForConversion+0x104>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6919      	ldr	r1, [r3, #16]
 8002e82:	4b46      	ldr	r3, [pc, #280]	@ (8002f9c <HAL_ADC_PollForConversion+0x200>)
 8002e84:	400b      	ands	r3, r1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d108      	bne.n	8002e9c <HAL_ADC_PollForConversion+0x100>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68d9      	ldr	r1, [r3, #12]
 8002e90:	4b43      	ldr	r3, [pc, #268]	@ (8002fa0 <HAL_ADC_PollForConversion+0x204>)
 8002e92:	400b      	ands	r3, r1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_PollForConversion+0x100>
 8002e98:	2314      	movs	r3, #20
 8002e9a:	e020      	b.n	8002ede <HAL_ADC_PollForConversion+0x142>
 8002e9c:	2329      	movs	r3, #41	@ 0x29
 8002e9e:	e01e      	b.n	8002ede <HAL_ADC_PollForConversion+0x142>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6919      	ldr	r1, [r3, #16]
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8002f9c <HAL_ADC_PollForConversion+0x200>)
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_ADC_PollForConversion+0x120>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa0 <HAL_ADC_PollForConversion+0x204>)
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00d      	beq.n	8002ed8 <HAL_ADC_PollForConversion+0x13c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	4b38      	ldr	r3, [pc, #224]	@ (8002fa4 <HAL_ADC_PollForConversion+0x208>)
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d108      	bne.n	8002edc <HAL_ADC_PollForConversion+0x140>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68d9      	ldr	r1, [r3, #12]
 8002ed0:	4b34      	ldr	r3, [pc, #208]	@ (8002fa4 <HAL_ADC_PollForConversion+0x208>)
 8002ed2:	400b      	ands	r3, r1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_PollForConversion+0x140>
 8002ed8:	2354      	movs	r3, #84	@ 0x54
 8002eda:	e000      	b.n	8002ede <HAL_ADC_PollForConversion+0x142>
 8002edc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ee4:	e021      	b.n	8002f2a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d01a      	beq.n	8002f24 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <HAL_ADC_PollForConversion+0x168>
 8002ef4:	f7ff fd9e 	bl	8002a34 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d20f      	bcs.n	8002f24 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d90b      	bls.n	8002f24 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f10:	f043 0204 	orr.w	r2, r3, #4
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e030      	b.n	8002f86 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d8d9      	bhi.n	8002ee6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f06f 0212 	mvn.w	r2, #18
 8002f3a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f52:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f56:	d115      	bne.n	8002f84 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	f043 0201 	orr.w	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000020 	.word	0x20000020
 8002f94:	24924924 	.word	0x24924924
 8002f98:	00924924 	.word	0x00924924
 8002f9c:	12492492 	.word	0x12492492
 8002fa0:	00492492 	.word	0x00492492
 8002fa4:	00249249 	.word	0x00249249

08002fa8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x20>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0dc      	b.n	800319a <HAL_ADC_ConfigChannel+0x1da>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d81c      	bhi.n	800302a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	3b05      	subs	r3, #5
 8003002:	221f      	movs	r2, #31
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	4019      	ands	r1, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	3b05      	subs	r3, #5
 800301c:	fa00 f203 	lsl.w	r2, r0, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	635a      	str	r2, [r3, #52]	@ 0x34
 8003028:	e03c      	b.n	80030a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d81c      	bhi.n	800306c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	3b23      	subs	r3, #35	@ 0x23
 8003044:	221f      	movs	r2, #31
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	4019      	ands	r1, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	3b23      	subs	r3, #35	@ 0x23
 800305e:	fa00 f203 	lsl.w	r2, r0, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30
 800306a:	e01b      	b.n	80030a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3b41      	subs	r3, #65	@ 0x41
 800307e:	221f      	movs	r2, #31
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	4019      	ands	r1, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	3b41      	subs	r3, #65	@ 0x41
 8003098:	fa00 f203 	lsl.w	r2, r0, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d91c      	bls.n	80030e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68d9      	ldr	r1, [r3, #12]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	3b1e      	subs	r3, #30
 80030be:	2207      	movs	r2, #7
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4019      	ands	r1, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6898      	ldr	r0, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	3b1e      	subs	r3, #30
 80030d8:	fa00 f203 	lsl.w	r2, r0, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	e019      	b.n	800311a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6919      	ldr	r1, [r3, #16]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	2207      	movs	r2, #7
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	4019      	ands	r1, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6898      	ldr	r0, [r3, #8]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	fa00 f203 	lsl.w	r2, r0, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b10      	cmp	r3, #16
 8003120:	d003      	beq.n	800312a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003126:	2b11      	cmp	r3, #17
 8003128:	d132      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d125      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d126      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003150:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b10      	cmp	r3, #16
 8003158:	d11a      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800315a:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a13      	ldr	r2, [pc, #76]	@ (80031ac <HAL_ADC_ConfigChannel+0x1ec>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	0c9a      	lsrs	r2, r3, #18
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003170:	e002      	b.n	8003178 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3b01      	subs	r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f9      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x1b2>
 800317e:	e007      	b.n	8003190 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	40012400 	.word	0x40012400
 80031a8:	20000020 	.word	0x20000020
 80031ac:	431bde83 	.word	0x431bde83

080031b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d040      	beq.n	8003250 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031de:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <ADC_Enable+0xac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003260 <ADC_Enable+0xb0>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	0c9b      	lsrs	r3, r3, #18
 80031ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031ec:	e002      	b.n	80031f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f9      	bne.n	80031ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031fa:	f7ff fc1b 	bl	8002a34 <HAL_GetTick>
 80031fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003200:	e01f      	b.n	8003242 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003202:	f7ff fc17 	bl	8002a34 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d918      	bls.n	8003242 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d011      	beq.n	8003242 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	f043 0210 	orr.w	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	f043 0201 	orr.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e007      	b.n	8003252 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d1d8      	bne.n	8003202 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000020 	.word	0x20000020
 8003260:	431bde83 	.word	0x431bde83

08003264 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d12e      	bne.n	80032dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800328e:	f7ff fbd1 	bl	8002a34 <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003294:	e01b      	b.n	80032ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003296:	f7ff fbcd 	bl	8002a34 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d914      	bls.n	80032ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d10d      	bne.n	80032ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	f043 0210 	orr.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	f043 0201 	orr.w	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e007      	b.n	80032de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d0dc      	beq.n	8003296 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003334:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <__NVIC_GetPriorityGrouping+0x18>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0307 	and.w	r3, r3, #7
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db0b      	blt.n	8003376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4906      	ldr	r1, [pc, #24]	@ (8003380 <__NVIC_EnableIRQ+0x34>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2001      	movs	r0, #1
 800336e:	fa00 f202 	lsl.w	r2, r0, r2
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100

08003384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	6039      	str	r1, [r7, #0]
 800338e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	2b00      	cmp	r3, #0
 8003396:	db0a      	blt.n	80033ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	490c      	ldr	r1, [pc, #48]	@ (80033d0 <__NVIC_SetPriority+0x4c>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	0112      	lsls	r2, r2, #4
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	440b      	add	r3, r1
 80033a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ac:	e00a      	b.n	80033c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4908      	ldr	r1, [pc, #32]	@ (80033d4 <__NVIC_SetPriority+0x50>)
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	3b04      	subs	r3, #4
 80033bc:	0112      	lsls	r2, r2, #4
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	440b      	add	r3, r1
 80033c2:	761a      	strb	r2, [r3, #24]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e100 	.word	0xe000e100
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	@ 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f1c3 0307 	rsb	r3, r3, #7
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	bf28      	it	cs
 80033f6:	2304      	movcs	r3, #4
 80033f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d902      	bls.n	8003408 <NVIC_EncodePriority+0x30>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3b03      	subs	r3, #3
 8003406:	e000      	b.n	800340a <NVIC_EncodePriority+0x32>
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	f04f 32ff 	mov.w	r2, #4294967295
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	401a      	ands	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003420:	f04f 31ff 	mov.w	r1, #4294967295
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	43d9      	mvns	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	4313      	orrs	r3, r2
         );
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	@ 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800344c:	d301      	bcc.n	8003452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800344e:	2301      	movs	r3, #1
 8003450:	e00f      	b.n	8003472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003452:	4a0a      	ldr	r2, [pc, #40]	@ (800347c <SysTick_Config+0x40>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345a:	210f      	movs	r1, #15
 800345c:	f04f 30ff 	mov.w	r0, #4294967295
 8003460:	f7ff ff90 	bl	8003384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <SysTick_Config+0x40>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346a:	4b04      	ldr	r3, [pc, #16]	@ (800347c <SysTick_Config+0x40>)
 800346c:	2207      	movs	r2, #7
 800346e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	e000e010 	.word	0xe000e010

08003480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff2d 	bl	80032e8 <__NVIC_SetPriorityGrouping>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a8:	f7ff ff42 	bl	8003330 <__NVIC_GetPriorityGrouping>
 80034ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	6978      	ldr	r0, [r7, #20]
 80034b4:	f7ff ff90 	bl	80033d8 <NVIC_EncodePriority>
 80034b8:	4602      	mov	r2, r0
 80034ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff5f 	bl	8003384 <__NVIC_SetPriority>
}
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff35 	bl	800334c <__NVIC_EnableIRQ>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ffa2 	bl	800343c <SysTick_Config>
 80034f8:	4603      	mov	r3, r0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e043      	b.n	80035a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	4b22      	ldr	r3, [pc, #136]	@ (80035ac <HAL_DMA_Init+0xa8>)
 8003522:	4413      	add	r3, r2
 8003524:	4a22      	ldr	r2, [pc, #136]	@ (80035b0 <HAL_DMA_Init+0xac>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	009a      	lsls	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1f      	ldr	r2, [pc, #124]	@ (80035b4 <HAL_DMA_Init+0xb0>)
 8003536:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800354e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003552:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800355c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	bffdfff8 	.word	0xbffdfff8
 80035b0:	cccccccd 	.word	0xcccccccd
 80035b4:	40020000 	.word	0x40020000

080035b8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d008      	beq.n	80035e2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2204      	movs	r2, #4
 80035d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e020      	b.n	8003624 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 020e 	bic.w	r2, r2, #14
 80035f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f202 	lsl.w	r2, r1, r2
 8003610:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003622:	7bfb      	ldrb	r3, [r7, #15]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
	...

08003630 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d005      	beq.n	8003654 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2204      	movs	r2, #4
 800364c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	e051      	b.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 020e 	bic.w	r2, r2, #14
 8003662:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a22      	ldr	r2, [pc, #136]	@ (8003704 <HAL_DMA_Abort_IT+0xd4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d029      	beq.n	80036d2 <HAL_DMA_Abort_IT+0xa2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a21      	ldr	r2, [pc, #132]	@ (8003708 <HAL_DMA_Abort_IT+0xd8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_Abort_IT+0x9e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1f      	ldr	r2, [pc, #124]	@ (800370c <HAL_DMA_Abort_IT+0xdc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01a      	beq.n	80036c8 <HAL_DMA_Abort_IT+0x98>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1e      	ldr	r2, [pc, #120]	@ (8003710 <HAL_DMA_Abort_IT+0xe0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d012      	beq.n	80036c2 <HAL_DMA_Abort_IT+0x92>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003714 <HAL_DMA_Abort_IT+0xe4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00a      	beq.n	80036bc <HAL_DMA_Abort_IT+0x8c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <HAL_DMA_Abort_IT+0xe8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <HAL_DMA_Abort_IT+0x86>
 80036b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80036b4:	e00e      	b.n	80036d4 <HAL_DMA_Abort_IT+0xa4>
 80036b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036ba:	e00b      	b.n	80036d4 <HAL_DMA_Abort_IT+0xa4>
 80036bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036c0:	e008      	b.n	80036d4 <HAL_DMA_Abort_IT+0xa4>
 80036c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036c6:	e005      	b.n	80036d4 <HAL_DMA_Abort_IT+0xa4>
 80036c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036cc:	e002      	b.n	80036d4 <HAL_DMA_Abort_IT+0xa4>
 80036ce:	2310      	movs	r3, #16
 80036d0:	e000      	b.n	80036d4 <HAL_DMA_Abort_IT+0xa4>
 80036d2:	2301      	movs	r3, #1
 80036d4:	4a11      	ldr	r2, [pc, #68]	@ (800371c <HAL_DMA_Abort_IT+0xec>)
 80036d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
    } 
  }
  return status;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40020008 	.word	0x40020008
 8003708:	4002001c 	.word	0x4002001c
 800370c:	40020030 	.word	0x40020030
 8003710:	40020044 	.word	0x40020044
 8003714:	40020058 	.word	0x40020058
 8003718:	4002006c 	.word	0x4002006c
 800371c:	40020000 	.word	0x40020000

08003720 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	2204      	movs	r2, #4
 800373e:	409a      	lsls	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d04f      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xc8>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d04a      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a66      	ldr	r2, [pc, #408]	@ (8003910 <HAL_DMA_IRQHandler+0x1f0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d029      	beq.n	80037ce <HAL_DMA_IRQHandler+0xae>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a65      	ldr	r2, [pc, #404]	@ (8003914 <HAL_DMA_IRQHandler+0x1f4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d022      	beq.n	80037ca <HAL_DMA_IRQHandler+0xaa>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a63      	ldr	r2, [pc, #396]	@ (8003918 <HAL_DMA_IRQHandler+0x1f8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01a      	beq.n	80037c4 <HAL_DMA_IRQHandler+0xa4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a62      	ldr	r2, [pc, #392]	@ (800391c <HAL_DMA_IRQHandler+0x1fc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d012      	beq.n	80037be <HAL_DMA_IRQHandler+0x9e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a60      	ldr	r2, [pc, #384]	@ (8003920 <HAL_DMA_IRQHandler+0x200>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00a      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x98>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003924 <HAL_DMA_IRQHandler+0x204>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d102      	bne.n	80037b2 <HAL_DMA_IRQHandler+0x92>
 80037ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037b0:	e00e      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80037b6:	e00b      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037bc:	e008      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037c2:	e005      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037c8:	e002      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037ca:	2340      	movs	r3, #64	@ 0x40
 80037cc:	e000      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037ce:	2304      	movs	r3, #4
 80037d0:	4a55      	ldr	r2, [pc, #340]	@ (8003928 <HAL_DMA_IRQHandler+0x208>)
 80037d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8094 	beq.w	8003906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037e6:	e08e      	b.n	8003906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	2202      	movs	r2, #2
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d056      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x186>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d051      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10b      	bne.n	8003828 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 020a 	bic.w	r2, r2, #10
 800381e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a38      	ldr	r2, [pc, #224]	@ (8003910 <HAL_DMA_IRQHandler+0x1f0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d029      	beq.n	8003886 <HAL_DMA_IRQHandler+0x166>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a37      	ldr	r2, [pc, #220]	@ (8003914 <HAL_DMA_IRQHandler+0x1f4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d022      	beq.n	8003882 <HAL_DMA_IRQHandler+0x162>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a35      	ldr	r2, [pc, #212]	@ (8003918 <HAL_DMA_IRQHandler+0x1f8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01a      	beq.n	800387c <HAL_DMA_IRQHandler+0x15c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a34      	ldr	r2, [pc, #208]	@ (800391c <HAL_DMA_IRQHandler+0x1fc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d012      	beq.n	8003876 <HAL_DMA_IRQHandler+0x156>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a32      	ldr	r2, [pc, #200]	@ (8003920 <HAL_DMA_IRQHandler+0x200>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00a      	beq.n	8003870 <HAL_DMA_IRQHandler+0x150>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a31      	ldr	r2, [pc, #196]	@ (8003924 <HAL_DMA_IRQHandler+0x204>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <HAL_DMA_IRQHandler+0x14a>
 8003864:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003868:	e00e      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 800386a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800386e:	e00b      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 8003870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003874:	e008      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 8003876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800387a:	e005      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 800387c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003880:	e002      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 8003882:	2320      	movs	r3, #32
 8003884:	e000      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 8003886:	2302      	movs	r3, #2
 8003888:	4a27      	ldr	r2, [pc, #156]	@ (8003928 <HAL_DMA_IRQHandler+0x208>)
 800388a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	2b00      	cmp	r3, #0
 800389a:	d034      	beq.n	8003906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038a4:	e02f      	b.n	8003906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	2208      	movs	r2, #8
 80038ac:	409a      	lsls	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d028      	beq.n	8003908 <HAL_DMA_IRQHandler+0x1e8>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d023      	beq.n	8003908 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 020e 	bic.w	r2, r2, #14
 80038ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f202 	lsl.w	r2, r1, r2
 80038de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
    }
  }
  return;
 8003906:	bf00      	nop
 8003908:	bf00      	nop
}
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40020008 	.word	0x40020008
 8003914:	4002001c 	.word	0x4002001c
 8003918:	40020030 	.word	0x40020030
 800391c:	40020044 	.word	0x40020044
 8003920:	40020058 	.word	0x40020058
 8003924:	4002006c 	.word	0x4002006c
 8003928:	40020000 	.word	0x40020000

0800392c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800392c:	b480      	push	{r7}
 800392e:	b08b      	sub	sp, #44	@ 0x2c
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800393a:	2300      	movs	r3, #0
 800393c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800393e:	e169      	b.n	8003c14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003940:	2201      	movs	r2, #1
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	429a      	cmp	r2, r3
 800395a:	f040 8158 	bne.w	8003c0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a9a      	ldr	r2, [pc, #616]	@ (8003bcc <HAL_GPIO_Init+0x2a0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d05e      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 8003968:	4a98      	ldr	r2, [pc, #608]	@ (8003bcc <HAL_GPIO_Init+0x2a0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d875      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 800396e:	4a98      	ldr	r2, [pc, #608]	@ (8003bd0 <HAL_GPIO_Init+0x2a4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d058      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 8003974:	4a96      	ldr	r2, [pc, #600]	@ (8003bd0 <HAL_GPIO_Init+0x2a4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d86f      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 800397a:	4a96      	ldr	r2, [pc, #600]	@ (8003bd4 <HAL_GPIO_Init+0x2a8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d052      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 8003980:	4a94      	ldr	r2, [pc, #592]	@ (8003bd4 <HAL_GPIO_Init+0x2a8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d869      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 8003986:	4a94      	ldr	r2, [pc, #592]	@ (8003bd8 <HAL_GPIO_Init+0x2ac>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d04c      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 800398c:	4a92      	ldr	r2, [pc, #584]	@ (8003bd8 <HAL_GPIO_Init+0x2ac>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d863      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 8003992:	4a92      	ldr	r2, [pc, #584]	@ (8003bdc <HAL_GPIO_Init+0x2b0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d046      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 8003998:	4a90      	ldr	r2, [pc, #576]	@ (8003bdc <HAL_GPIO_Init+0x2b0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d85d      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 800399e:	2b12      	cmp	r3, #18
 80039a0:	d82a      	bhi.n	80039f8 <HAL_GPIO_Init+0xcc>
 80039a2:	2b12      	cmp	r3, #18
 80039a4:	d859      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 80039a6:	a201      	add	r2, pc, #4	@ (adr r2, 80039ac <HAL_GPIO_Init+0x80>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	08003a27 	.word	0x08003a27
 80039b0:	08003a01 	.word	0x08003a01
 80039b4:	08003a13 	.word	0x08003a13
 80039b8:	08003a55 	.word	0x08003a55
 80039bc:	08003a5b 	.word	0x08003a5b
 80039c0:	08003a5b 	.word	0x08003a5b
 80039c4:	08003a5b 	.word	0x08003a5b
 80039c8:	08003a5b 	.word	0x08003a5b
 80039cc:	08003a5b 	.word	0x08003a5b
 80039d0:	08003a5b 	.word	0x08003a5b
 80039d4:	08003a5b 	.word	0x08003a5b
 80039d8:	08003a5b 	.word	0x08003a5b
 80039dc:	08003a5b 	.word	0x08003a5b
 80039e0:	08003a5b 	.word	0x08003a5b
 80039e4:	08003a5b 	.word	0x08003a5b
 80039e8:	08003a5b 	.word	0x08003a5b
 80039ec:	08003a5b 	.word	0x08003a5b
 80039f0:	08003a09 	.word	0x08003a09
 80039f4:	08003a1d 	.word	0x08003a1d
 80039f8:	4a79      	ldr	r2, [pc, #484]	@ (8003be0 <HAL_GPIO_Init+0x2b4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039fe:	e02c      	b.n	8003a5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	623b      	str	r3, [r7, #32]
          break;
 8003a06:	e029      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	623b      	str	r3, [r7, #32]
          break;
 8003a10:	e024      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	3308      	adds	r3, #8
 8003a18:	623b      	str	r3, [r7, #32]
          break;
 8003a1a:	e01f      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	330c      	adds	r3, #12
 8003a22:	623b      	str	r3, [r7, #32]
          break;
 8003a24:	e01a      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a2e:	2304      	movs	r3, #4
 8003a30:	623b      	str	r3, [r7, #32]
          break;
 8003a32:	e013      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d105      	bne.n	8003a48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	611a      	str	r2, [r3, #16]
          break;
 8003a46:	e009      	b.n	8003a5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a48:	2308      	movs	r3, #8
 8003a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	615a      	str	r2, [r3, #20]
          break;
 8003a52:	e003      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a54:	2300      	movs	r3, #0
 8003a56:	623b      	str	r3, [r7, #32]
          break;
 8003a58:	e000      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          break;
 8003a5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2bff      	cmp	r3, #255	@ 0xff
 8003a60:	d801      	bhi.n	8003a66 <HAL_GPIO_Init+0x13a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	e001      	b.n	8003a6a <HAL_GPIO_Init+0x13e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2bff      	cmp	r3, #255	@ 0xff
 8003a70:	d802      	bhi.n	8003a78 <HAL_GPIO_Init+0x14c>
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	e002      	b.n	8003a7e <HAL_GPIO_Init+0x152>
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	3b08      	subs	r3, #8
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	210f      	movs	r1, #15
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	6a39      	ldr	r1, [r7, #32]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80b1 	beq.w	8003c0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003aac:	4b4d      	ldr	r3, [pc, #308]	@ (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6193      	str	r3, [r2, #24]
 8003ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ac4:	4a48      	ldr	r2, [pc, #288]	@ (8003be8 <HAL_GPIO_Init+0x2bc>)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	220f      	movs	r2, #15
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a40      	ldr	r2, [pc, #256]	@ (8003bec <HAL_GPIO_Init+0x2c0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d013      	beq.n	8003b18 <HAL_GPIO_Init+0x1ec>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf0 <HAL_GPIO_Init+0x2c4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00d      	beq.n	8003b14 <HAL_GPIO_Init+0x1e8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf4 <HAL_GPIO_Init+0x2c8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <HAL_GPIO_Init+0x1e4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3d      	ldr	r2, [pc, #244]	@ (8003bf8 <HAL_GPIO_Init+0x2cc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_GPIO_Init+0x1e0>
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e006      	b.n	8003b1a <HAL_GPIO_Init+0x1ee>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	e004      	b.n	8003b1a <HAL_GPIO_Init+0x1ee>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e002      	b.n	8003b1a <HAL_GPIO_Init+0x1ee>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_GPIO_Init+0x1ee>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1c:	f002 0203 	and.w	r2, r2, #3
 8003b20:	0092      	lsls	r2, r2, #2
 8003b22:	4093      	lsls	r3, r2
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b2a:	492f      	ldr	r1, [pc, #188]	@ (8003be8 <HAL_GPIO_Init+0x2bc>)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3302      	adds	r3, #2
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d006      	beq.n	8003b52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b44:	4b2d      	ldr	r3, [pc, #180]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	492c      	ldr	r1, [pc, #176]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b52:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	4928      	ldr	r1, [pc, #160]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b6c:	4b23      	ldr	r3, [pc, #140]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4922      	ldr	r1, [pc, #136]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
 8003b78:	e006      	b.n	8003b88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b7a:	4b20      	ldr	r3, [pc, #128]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	491e      	ldr	r1, [pc, #120]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b94:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	4918      	ldr	r1, [pc, #96]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
 8003ba0:	e006      	b.n	8003bb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ba2:	4b16      	ldr	r3, [pc, #88]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	4914      	ldr	r1, [pc, #80]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d021      	beq.n	8003c00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	490e      	ldr	r1, [pc, #56]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
 8003bc8:	e021      	b.n	8003c0e <HAL_GPIO_Init+0x2e2>
 8003bca:	bf00      	nop
 8003bcc:	10320000 	.word	0x10320000
 8003bd0:	10310000 	.word	0x10310000
 8003bd4:	10220000 	.word	0x10220000
 8003bd8:	10210000 	.word	0x10210000
 8003bdc:	10120000 	.word	0x10120000
 8003be0:	10110000 	.word	0x10110000
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40010800 	.word	0x40010800
 8003bf0:	40010c00 	.word	0x40010c00
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40011400 	.word	0x40011400
 8003bfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	4909      	ldr	r1, [pc, #36]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	3301      	adds	r3, #1
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f47f ae8e 	bne.w	8003940 <HAL_GPIO_Init+0x14>
  }
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	372c      	adds	r7, #44	@ 0x2c
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	40010400 	.word	0x40010400

08003c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e001      	b.n	8003c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	807b      	strh	r3, [r7, #2]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c72:	787b      	ldrb	r3, [r7, #1]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c78:	887a      	ldrh	r2, [r7, #2]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c7e:	e003      	b.n	8003c88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	041a      	lsls	r2, r3, #16
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	611a      	str	r2, [r3, #16]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
	...

08003c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e12b      	b.n	8003efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fe fbc2 	bl	8002444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	@ 0x24
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cf8:	f001 fbfc 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8003cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4a81      	ldr	r2, [pc, #516]	@ (8003f08 <HAL_I2C_Init+0x274>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d807      	bhi.n	8003d18 <HAL_I2C_Init+0x84>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a80      	ldr	r2, [pc, #512]	@ (8003f0c <HAL_I2C_Init+0x278>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	bf94      	ite	ls
 8003d10:	2301      	movls	r3, #1
 8003d12:	2300      	movhi	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e006      	b.n	8003d26 <HAL_I2C_Init+0x92>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f10 <HAL_I2C_Init+0x27c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	bf94      	ite	ls
 8003d20:	2301      	movls	r3, #1
 8003d22:	2300      	movhi	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e0e7      	b.n	8003efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a78      	ldr	r2, [pc, #480]	@ (8003f14 <HAL_I2C_Init+0x280>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0c9b      	lsrs	r3, r3, #18
 8003d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003f08 <HAL_I2C_Init+0x274>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d802      	bhi.n	8003d68 <HAL_I2C_Init+0xd4>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	3301      	adds	r3, #1
 8003d66:	e009      	b.n	8003d7c <HAL_I2C_Init+0xe8>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	4a69      	ldr	r2, [pc, #420]	@ (8003f18 <HAL_I2C_Init+0x284>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	495c      	ldr	r1, [pc, #368]	@ (8003f08 <HAL_I2C_Init+0x274>)
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	d819      	bhi.n	8003dd0 <HAL_I2C_Init+0x13c>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e59      	subs	r1, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003daa:	1c59      	adds	r1, r3, #1
 8003dac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003db0:	400b      	ands	r3, r1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_I2C_Init+0x138>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1e59      	subs	r1, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dca:	e051      	b.n	8003e70 <HAL_I2C_Init+0x1dc>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	e04f      	b.n	8003e70 <HAL_I2C_Init+0x1dc>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d111      	bne.n	8003dfc <HAL_I2C_Init+0x168>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e58      	subs	r0, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	440b      	add	r3, r1
 8003de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e012      	b.n	8003e22 <HAL_I2C_Init+0x18e>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1e58      	subs	r0, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6859      	ldr	r1, [r3, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	0099      	lsls	r1, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e12:	3301      	adds	r3, #1
 8003e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Init+0x196>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e022      	b.n	8003e70 <HAL_I2C_Init+0x1dc>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10e      	bne.n	8003e50 <HAL_I2C_Init+0x1bc>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1e58      	subs	r0, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6859      	ldr	r1, [r3, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	440b      	add	r3, r1
 8003e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e44:	3301      	adds	r3, #1
 8003e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e4e:	e00f      	b.n	8003e70 <HAL_I2C_Init+0x1dc>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e58      	subs	r0, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	0099      	lsls	r1, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e66:	3301      	adds	r3, #1
 8003e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	6809      	ldr	r1, [r1, #0]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6911      	ldr	r1, [r2, #16]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68d2      	ldr	r2, [r2, #12]
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	000186a0 	.word	0x000186a0
 8003f0c:	001e847f 	.word	0x001e847f
 8003f10:	003d08ff 	.word	0x003d08ff
 8003f14:	431bde83 	.word	0x431bde83
 8003f18:	10624dd3 	.word	0x10624dd3

08003f1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	813b      	strh	r3, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f36:	f7fe fd7d 	bl	8002a34 <HAL_GetTick>
 8003f3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	f040 80d9 	bne.w	80040fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2319      	movs	r3, #25
 8003f50:	2201      	movs	r2, #1
 8003f52:	496d      	ldr	r1, [pc, #436]	@ (8004108 <HAL_I2C_Mem_Write+0x1ec>)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fccd 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
 8003f62:	e0cc      	b.n	80040fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Mem_Write+0x56>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0c5      	b.n	80040fe <HAL_I2C_Mem_Write+0x1e2>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d007      	beq.n	8003f98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2221      	movs	r2, #33	@ 0x21
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2240      	movs	r2, #64	@ 0x40
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a3a      	ldr	r2, [r7, #32]
 8003fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a4d      	ldr	r2, [pc, #308]	@ (800410c <HAL_I2C_Mem_Write+0x1f0>)
 8003fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fda:	88f8      	ldrh	r0, [r7, #6]
 8003fdc:	893a      	ldrh	r2, [r7, #8]
 8003fde:	8979      	ldrh	r1, [r7, #10]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	4603      	mov	r3, r0
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fb04 	bl	80045f8 <I2C_RequestMemoryWrite>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d052      	beq.n	800409c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e081      	b.n	80040fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fd92 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	2b04      	cmp	r3, #4
 8004010:	d107      	bne.n	8004022 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004020:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06b      	b.n	80040fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b04      	cmp	r3, #4
 8004062:	d11b      	bne.n	800409c <HAL_I2C_Mem_Write+0x180>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d017      	beq.n	800409c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1aa      	bne.n	8003ffa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fd85 	bl	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00d      	beq.n	80040d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d107      	bne.n	80040cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e016      	b.n	80040fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	00100002 	.word	0x00100002
 800410c:	ffff0000 	.word	0xffff0000

08004110 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08c      	sub	sp, #48	@ 0x30
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4603      	mov	r3, r0
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	460b      	mov	r3, r1
 8004124:	813b      	strh	r3, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800412e:	f7fe fc81 	bl	8002a34 <HAL_GetTick>
 8004132:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b20      	cmp	r3, #32
 800413e:	f040 8250 	bne.w	80045e2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	2319      	movs	r3, #25
 8004148:	2201      	movs	r2, #1
 800414a:	4982      	ldr	r1, [pc, #520]	@ (8004354 <HAL_I2C_Mem_Read+0x244>)
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fbd1 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
 800415a:	e243      	b.n	80045e4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_I2C_Mem_Read+0x5a>
 8004166:	2302      	movs	r3, #2
 8004168:	e23c      	b.n	80045e4 <HAL_I2C_Mem_Read+0x4d4>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d007      	beq.n	8004190 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800419e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2222      	movs	r2, #34	@ 0x22
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2240      	movs	r2, #64	@ 0x40
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80041c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a62      	ldr	r2, [pc, #392]	@ (8004358 <HAL_I2C_Mem_Read+0x248>)
 80041d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041d2:	88f8      	ldrh	r0, [r7, #6]
 80041d4:	893a      	ldrh	r2, [r7, #8]
 80041d6:	8979      	ldrh	r1, [r7, #10]
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	4603      	mov	r3, r0
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fa9e 	bl	8004724 <I2C_RequestMemoryRead>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1f8      	b.n	80045e4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d113      	bne.n	8004222 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e1cc      	b.n	80045bc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004226:	2b01      	cmp	r3, #1
 8004228:	d11e      	bne.n	8004268 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004238:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800423a:	b672      	cpsid	i
}
 800423c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004262:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004264:	b662      	cpsie	i
}
 8004266:	e035      	b.n	80042d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426c:	2b02      	cmp	r3, #2
 800426e:	d11e      	bne.n	80042ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004280:	b672      	cpsid	i
}
 8004282:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042aa:	b662      	cpsie	i
}
 80042ac:	e012      	b.n	80042d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80042d4:	e172      	b.n	80045bc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042da:	2b03      	cmp	r3, #3
 80042dc:	f200 811f 	bhi.w	800451e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d123      	bne.n	8004330 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fcab 	bl	8004c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e173      	b.n	80045e4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800432e:	e145      	b.n	80045bc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	2b02      	cmp	r3, #2
 8004336:	d152      	bne.n	80043de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433e:	2200      	movs	r2, #0
 8004340:	4906      	ldr	r1, [pc, #24]	@ (800435c <HAL_I2C_Mem_Read+0x24c>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fad6 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e148      	b.n	80045e4 <HAL_I2C_Mem_Read+0x4d4>
 8004352:	bf00      	nop
 8004354:	00100002 	.word	0x00100002
 8004358:	ffff0000 	.word	0xffff0000
 800435c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004360:	b672      	cpsid	i
}
 8004362:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043a6:	b662      	cpsie	i
}
 80043a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043dc:	e0ee      	b.n	80045bc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	2200      	movs	r2, #0
 80043e6:	4981      	ldr	r1, [pc, #516]	@ (80045ec <HAL_I2C_Mem_Read+0x4dc>)
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fa83 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0f5      	b.n	80045e4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004406:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004408:	b672      	cpsid	i
}
 800440a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800443e:	4b6c      	ldr	r3, [pc, #432]	@ (80045f0 <HAL_I2C_Mem_Read+0x4e0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	08db      	lsrs	r3, r3, #3
 8004444:	4a6b      	ldr	r2, [pc, #428]	@ (80045f4 <HAL_I2C_Mem_Read+0x4e4>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0a1a      	lsrs	r2, r3, #8
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00da      	lsls	r2, r3, #3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	3b01      	subs	r3, #1
 800445c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d118      	bne.n	8004496 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004486:	b662      	cpsie	i
}
 8004488:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0a6      	b.n	80045e4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d1d9      	bne.n	8004458 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044e6:	b662      	cpsie	i
}
 80044e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800451c:	e04e      	b.n	80045bc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004520:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fb90 	bl	8004c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e058      	b.n	80045e4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b04      	cmp	r3, #4
 8004570:	d124      	bne.n	80045bc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004576:	2b03      	cmp	r3, #3
 8004578:	d107      	bne.n	800458a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004588:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f ae88 	bne.w	80042d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3728      	adds	r7, #40	@ 0x28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	00010004 	.word	0x00010004
 80045f0:	20000020 	.word	0x20000020
 80045f4:	14f8b589 	.word	0x14f8b589

080045f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4603      	mov	r3, r0
 8004608:	817b      	strh	r3, [r7, #10]
 800460a:	460b      	mov	r3, r1
 800460c:	813b      	strh	r3, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	2200      	movs	r2, #0
 800462a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f960 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004648:	d103      	bne.n	8004652 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004650:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e05f      	b.n	8004716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004656:	897b      	ldrh	r3, [r7, #10]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	6a3a      	ldr	r2, [r7, #32]
 800466a:	492d      	ldr	r1, [pc, #180]	@ (8004720 <I2C_RequestMemoryWrite+0x128>)
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f9bb 	bl	80049e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e04c      	b.n	8004716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004694:	6a39      	ldr	r1, [r7, #32]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fa46 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d107      	bne.n	80046ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e02b      	b.n	8004716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d105      	bne.n	80046d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046c4:	893b      	ldrh	r3, [r7, #8]
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	611a      	str	r2, [r3, #16]
 80046ce:	e021      	b.n	8004714 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046d0:	893b      	ldrh	r3, [r7, #8]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e0:	6a39      	ldr	r1, [r7, #32]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fa20 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d107      	bne.n	8004706 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e005      	b.n	8004716 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800470a:	893b      	ldrh	r3, [r7, #8]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	00010002 	.word	0x00010002

08004724 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	4608      	mov	r0, r1
 800472e:	4611      	mov	r1, r2
 8004730:	461a      	mov	r2, r3
 8004732:	4603      	mov	r3, r0
 8004734:	817b      	strh	r3, [r7, #10]
 8004736:	460b      	mov	r3, r1
 8004738:	813b      	strh	r3, [r7, #8]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800474c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800475c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2200      	movs	r2, #0
 8004766:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f8c2 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004784:	d103      	bne.n	800478e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800478c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e0aa      	b.n	80048e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	6a3a      	ldr	r2, [r7, #32]
 80047a6:	4952      	ldr	r1, [pc, #328]	@ (80048f0 <I2C_RequestMemoryRead+0x1cc>)
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f91d 	bl	80049e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e097      	b.n	80048e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d0:	6a39      	ldr	r1, [r7, #32]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f9a8 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d107      	bne.n	80047f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e076      	b.n	80048e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d105      	bne.n	800480c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004800:	893b      	ldrh	r3, [r7, #8]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	611a      	str	r2, [r3, #16]
 800480a:	e021      	b.n	8004850 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800480c:	893b      	ldrh	r3, [r7, #8]
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	b29b      	uxth	r3, r3
 8004812:	b2da      	uxtb	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481c:	6a39      	ldr	r1, [r7, #32]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f982 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	2b04      	cmp	r3, #4
 8004830:	d107      	bne.n	8004842 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004840:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e050      	b.n	80048e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004846:	893b      	ldrh	r3, [r7, #8]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004852:	6a39      	ldr	r1, [r7, #32]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f967 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	2b04      	cmp	r3, #4
 8004866:	d107      	bne.n	8004878 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004876:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e035      	b.n	80048e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800488a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800488c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	2200      	movs	r2, #0
 8004894:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f82b 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b2:	d103      	bne.n	80048bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e013      	b.n	80048e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048c0:	897b      	ldrh	r3, [r7, #10]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	4906      	ldr	r1, [pc, #24]	@ (80048f0 <I2C_RequestMemoryRead+0x1cc>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f886 	bl	80049e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	00010002 	.word	0x00010002

080048f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004904:	e048      	b.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d044      	beq.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fe f891 	bl	8002a34 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d139      	bne.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10d      	bne.n	800494a <I2C_WaitOnFlagUntilTimeout+0x56>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	43da      	mvns	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4013      	ands	r3, r2
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	e00c      	b.n	8004964 <I2C_WaitOnFlagUntilTimeout+0x70>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	43da      	mvns	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4013      	ands	r3, r2
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	429a      	cmp	r2, r3
 8004968:	d116      	bne.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e023      	b.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d10d      	bne.n	80049be <I2C_WaitOnFlagUntilTimeout+0xca>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	43da      	mvns	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4013      	ands	r3, r2
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	e00c      	b.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	43da      	mvns	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d093      	beq.n	8004906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049f6:	e071      	b.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a06:	d123      	bne.n	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3c:	f043 0204 	orr.w	r2, r3, #4
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e067      	b.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d041      	beq.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a58:	f7fd ffec 	bl	8002a34 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d302      	bcc.n	8004a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d136      	bne.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10c      	bne.n	8004a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4013      	ands	r3, r2
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e00b      	b.n	8004aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	f043 0220 	orr.w	r2, r3, #32
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e021      	b.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10c      	bne.n	8004b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	43da      	mvns	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e00b      	b.n	8004b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f47f af6d 	bne.w	80049f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b34:	e034      	b.n	8004ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8e3 	bl	8004d02 <I2C_IsAcknowledgeFailed>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e034      	b.n	8004bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d028      	beq.n	8004ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fd ff71 	bl	8002a34 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d11d      	bne.n	8004ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6e:	2b80      	cmp	r3, #128	@ 0x80
 8004b70:	d016      	beq.n	8004ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e007      	b.n	8004bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004baa:	2b80      	cmp	r3, #128	@ 0x80
 8004bac:	d1c3      	bne.n	8004b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bc4:	e034      	b.n	8004c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f89b 	bl	8004d02 <I2C_IsAcknowledgeFailed>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e034      	b.n	8004c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d028      	beq.n	8004c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fd ff29 	bl	8002a34 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d11d      	bne.n	8004c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d016      	beq.n	8004c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e007      	b.n	8004c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d1c3      	bne.n	8004bc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c54:	e049      	b.n	8004cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d119      	bne.n	8004c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0210 	mvn.w	r2, #16
 8004c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e030      	b.n	8004cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c98:	f7fd fecc 	bl	8002a34 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d302      	bcc.n	8004cae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d11d      	bne.n	8004cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb8:	2b40      	cmp	r3, #64	@ 0x40
 8004cba:	d016      	beq.n	8004cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f043 0220 	orr.w	r2, r3, #32
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e007      	b.n	8004cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf4:	2b40      	cmp	r3, #64	@ 0x40
 8004cf6:	d1ae      	bne.n	8004c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d18:	d11b      	bne.n	8004d52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	f043 0204 	orr.w	r2, r3, #4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr
	...

08004d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e272      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 8087 	beq.w	8004e8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d80:	4b92      	ldr	r3, [pc, #584]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 030c 	and.w	r3, r3, #12
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d00c      	beq.n	8004da6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d8c:	4b8f      	ldr	r3, [pc, #572]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d112      	bne.n	8004dbe <HAL_RCC_OscConfig+0x5e>
 8004d98:	4b8c      	ldr	r3, [pc, #560]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da4:	d10b      	bne.n	8004dbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da6:	4b89      	ldr	r3, [pc, #548]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d06c      	beq.n	8004e8c <HAL_RCC_OscConfig+0x12c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d168      	bne.n	8004e8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e24c      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc6:	d106      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x76>
 8004dc8:	4b80      	ldr	r3, [pc, #512]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a7f      	ldr	r2, [pc, #508]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e02e      	b.n	8004e34 <HAL_RCC_OscConfig+0xd4>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCC_OscConfig+0x98>
 8004dde:	4b7b      	ldr	r3, [pc, #492]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a7a      	ldr	r2, [pc, #488]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	4b78      	ldr	r3, [pc, #480]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a77      	ldr	r2, [pc, #476]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004df0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e01d      	b.n	8004e34 <HAL_RCC_OscConfig+0xd4>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e00:	d10c      	bne.n	8004e1c <HAL_RCC_OscConfig+0xbc>
 8004e02:	4b72      	ldr	r3, [pc, #456]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a71      	ldr	r2, [pc, #452]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	4b6f      	ldr	r3, [pc, #444]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6e      	ldr	r2, [pc, #440]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e00b      	b.n	8004e34 <HAL_RCC_OscConfig+0xd4>
 8004e1c:	4b6b      	ldr	r3, [pc, #428]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a6a      	ldr	r2, [pc, #424]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	4b68      	ldr	r3, [pc, #416]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a67      	ldr	r2, [pc, #412]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d013      	beq.n	8004e64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fd fdfa 	bl	8002a34 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fd fdf6 	bl	8002a34 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	@ 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e200      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	4b5d      	ldr	r3, [pc, #372]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0xe4>
 8004e62:	e014      	b.n	8004e8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fd fde6 	bl	8002a34 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e6c:	f7fd fde2 	bl	8002a34 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	@ 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e1ec      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7e:	4b53      	ldr	r3, [pc, #332]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x10c>
 8004e8a:	e000      	b.n	8004e8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d063      	beq.n	8004f62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ea6:	4b49      	ldr	r3, [pc, #292]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d11c      	bne.n	8004eec <HAL_RCC_OscConfig+0x18c>
 8004eb2:	4b46      	ldr	r3, [pc, #280]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d116      	bne.n	8004eec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ebe:	4b43      	ldr	r3, [pc, #268]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x176>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d001      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e1c0      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4939      	ldr	r1, [pc, #228]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eea:	e03a      	b.n	8004f62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d020      	beq.n	8004f36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef4:	4b36      	ldr	r3, [pc, #216]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efa:	f7fd fd9b 	bl	8002a34 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f02:	f7fd fd97 	bl	8002a34 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e1a1      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f14:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f20:	4b2a      	ldr	r3, [pc, #168]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4927      	ldr	r1, [pc, #156]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	600b      	str	r3, [r1, #0]
 8004f34:	e015      	b.n	8004f62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f36:	4b26      	ldr	r3, [pc, #152]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fd7a 	bl	8002a34 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f44:	f7fd fd76 	bl	8002a34 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e180      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f56:	4b1d      	ldr	r3, [pc, #116]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d03a      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d019      	beq.n	8004faa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f76:	4b17      	ldr	r3, [pc, #92]	@ (8004fd4 <HAL_RCC_OscConfig+0x274>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f7c:	f7fd fd5a 	bl	8002a34 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f84:	f7fd fd56 	bl	8002a34 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e160      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f96:	4b0d      	ldr	r3, [pc, #52]	@ (8004fcc <HAL_RCC_OscConfig+0x26c>)
 8004f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	f000 face 	bl	8005544 <RCC_Delay>
 8004fa8:	e01c      	b.n	8004fe4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004faa:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd4 <HAL_RCC_OscConfig+0x274>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb0:	f7fd fd40 	bl	8002a34 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb6:	e00f      	b.n	8004fd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb8:	f7fd fd3c 	bl	8002a34 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d908      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e146      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	42420000 	.word	0x42420000
 8004fd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd8:	4b92      	ldr	r3, [pc, #584]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e9      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80a6 	beq.w	800513e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff6:	4b8b      	ldr	r3, [pc, #556]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	4b88      	ldr	r3, [pc, #544]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	4a87      	ldr	r2, [pc, #540]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800500c:	61d3      	str	r3, [r2, #28]
 800500e:	4b85      	ldr	r3, [pc, #532]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501e:	4b82      	ldr	r3, [pc, #520]	@ (8005228 <HAL_RCC_OscConfig+0x4c8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d118      	bne.n	800505c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800502a:	4b7f      	ldr	r3, [pc, #508]	@ (8005228 <HAL_RCC_OscConfig+0x4c8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a7e      	ldr	r2, [pc, #504]	@ (8005228 <HAL_RCC_OscConfig+0x4c8>)
 8005030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005036:	f7fd fcfd 	bl	8002a34 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503e:	f7fd fcf9 	bl	8002a34 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b64      	cmp	r3, #100	@ 0x64
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e103      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005050:	4b75      	ldr	r3, [pc, #468]	@ (8005228 <HAL_RCC_OscConfig+0x4c8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x312>
 8005064:	4b6f      	ldr	r3, [pc, #444]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	4a6e      	ldr	r2, [pc, #440]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	6213      	str	r3, [r2, #32]
 8005070:	e02d      	b.n	80050ce <HAL_RCC_OscConfig+0x36e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x334>
 800507a:	4b6a      	ldr	r3, [pc, #424]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	4a69      	ldr	r2, [pc, #420]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	6213      	str	r3, [r2, #32]
 8005086:	4b67      	ldr	r3, [pc, #412]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	4a66      	ldr	r2, [pc, #408]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 800508c:	f023 0304 	bic.w	r3, r3, #4
 8005090:	6213      	str	r3, [r2, #32]
 8005092:	e01c      	b.n	80050ce <HAL_RCC_OscConfig+0x36e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b05      	cmp	r3, #5
 800509a:	d10c      	bne.n	80050b6 <HAL_RCC_OscConfig+0x356>
 800509c:	4b61      	ldr	r3, [pc, #388]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	4a60      	ldr	r2, [pc, #384]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80050a2:	f043 0304 	orr.w	r3, r3, #4
 80050a6:	6213      	str	r3, [r2, #32]
 80050a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6213      	str	r3, [r2, #32]
 80050b4:	e00b      	b.n	80050ce <HAL_RCC_OscConfig+0x36e>
 80050b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	4a5a      	ldr	r2, [pc, #360]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	6213      	str	r3, [r2, #32]
 80050c2:	4b58      	ldr	r3, [pc, #352]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	4a57      	ldr	r2, [pc, #348]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d015      	beq.n	8005102 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d6:	f7fd fcad 	bl	8002a34 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fd fca9 	bl	8002a34 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e0b1      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ee      	beq.n	80050de <HAL_RCC_OscConfig+0x37e>
 8005100:	e014      	b.n	800512c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005102:	f7fd fc97 	bl	8002a34 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f7fd fc93 	bl	8002a34 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e09b      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005120:	4b40      	ldr	r3, [pc, #256]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ee      	bne.n	800510a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d105      	bne.n	800513e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005132:	4b3c      	ldr	r3, [pc, #240]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	4a3b      	ldr	r2, [pc, #236]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800513c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8087 	beq.w	8005256 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005148:	4b36      	ldr	r3, [pc, #216]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b08      	cmp	r3, #8
 8005152:	d061      	beq.n	8005218 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d146      	bne.n	80051ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515c:	4b33      	ldr	r3, [pc, #204]	@ (800522c <HAL_RCC_OscConfig+0x4cc>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005162:	f7fd fc67 	bl	8002a34 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516a:	f7fd fc63 	bl	8002a34 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e06d      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800517c:	4b29      	ldr	r3, [pc, #164]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f0      	bne.n	800516a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005190:	d108      	bne.n	80051a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005192:	4b24      	ldr	r3, [pc, #144]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	4921      	ldr	r1, [pc, #132]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a19      	ldr	r1, [r3, #32]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	430b      	orrs	r3, r1
 80051b6:	491b      	ldr	r1, [pc, #108]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051bc:	4b1b      	ldr	r3, [pc, #108]	@ (800522c <HAL_RCC_OscConfig+0x4cc>)
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c2:	f7fd fc37 	bl	8002a34 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ca:	f7fd fc33 	bl	8002a34 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e03d      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051dc:	4b11      	ldr	r3, [pc, #68]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x46a>
 80051e8:	e035      	b.n	8005256 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ea:	4b10      	ldr	r3, [pc, #64]	@ (800522c <HAL_RCC_OscConfig+0x4cc>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fd fc20 	bl	8002a34 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fd fc1c 	bl	8002a34 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e026      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800520a:	4b06      	ldr	r3, [pc, #24]	@ (8005224 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x498>
 8005216:	e01e      	b.n	8005256 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d107      	bne.n	8005230 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e019      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
 8005224:	40021000 	.word	0x40021000
 8005228:	40007000 	.word	0x40007000
 800522c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005230:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <HAL_RCC_OscConfig+0x500>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	429a      	cmp	r2, r3
 8005242:	d106      	bne.n	8005252 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d001      	beq.n	8005256 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40021000 	.word	0x40021000

08005264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0d0      	b.n	800541a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005278:	4b6a      	ldr	r3, [pc, #424]	@ (8005424 <HAL_RCC_ClockConfig+0x1c0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d910      	bls.n	80052a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005286:	4b67      	ldr	r3, [pc, #412]	@ (8005424 <HAL_RCC_ClockConfig+0x1c0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 0207 	bic.w	r2, r3, #7
 800528e:	4965      	ldr	r1, [pc, #404]	@ (8005424 <HAL_RCC_ClockConfig+0x1c0>)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005296:	4b63      	ldr	r3, [pc, #396]	@ (8005424 <HAL_RCC_ClockConfig+0x1c0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0b8      	b.n	800541a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d020      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052c0:	4b59      	ldr	r3, [pc, #356]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4a58      	ldr	r2, [pc, #352]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052d8:	4b53      	ldr	r3, [pc, #332]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a52      	ldr	r2, [pc, #328]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80052de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80052e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e4:	4b50      	ldr	r3, [pc, #320]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	494d      	ldr	r1, [pc, #308]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d040      	beq.n	8005384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530a:	4b47      	ldr	r3, [pc, #284]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d115      	bne.n	8005342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e07f      	b.n	800541a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d107      	bne.n	8005332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005322:	4b41      	ldr	r3, [pc, #260]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e073      	b.n	800541a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005332:	4b3d      	ldr	r3, [pc, #244]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e06b      	b.n	800541a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005342:	4b39      	ldr	r3, [pc, #228]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f023 0203 	bic.w	r2, r3, #3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4936      	ldr	r1, [pc, #216]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 8005350:	4313      	orrs	r3, r2
 8005352:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005354:	f7fd fb6e 	bl	8002a34 <HAL_GetTick>
 8005358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	e00a      	b.n	8005372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800535c:	f7fd fb6a 	bl	8002a34 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e053      	b.n	800541a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005372:	4b2d      	ldr	r3, [pc, #180]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f003 020c 	and.w	r2, r3, #12
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	429a      	cmp	r2, r3
 8005382:	d1eb      	bne.n	800535c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005384:	4b27      	ldr	r3, [pc, #156]	@ (8005424 <HAL_RCC_ClockConfig+0x1c0>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d210      	bcs.n	80053b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b24      	ldr	r3, [pc, #144]	@ (8005424 <HAL_RCC_ClockConfig+0x1c0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 0207 	bic.w	r2, r3, #7
 800539a:	4922      	ldr	r1, [pc, #136]	@ (8005424 <HAL_RCC_ClockConfig+0x1c0>)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b20      	ldr	r3, [pc, #128]	@ (8005424 <HAL_RCC_ClockConfig+0x1c0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e032      	b.n	800541a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c0:	4b19      	ldr	r3, [pc, #100]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4916      	ldr	r1, [pc, #88]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053de:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	490e      	ldr	r1, [pc, #56]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053f2:	f000 f821 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 80053f6:	4602      	mov	r2, r0
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	490a      	ldr	r1, [pc, #40]	@ (800542c <HAL_RCC_ClockConfig+0x1c8>)
 8005404:	5ccb      	ldrb	r3, [r1, r3]
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	4a09      	ldr	r2, [pc, #36]	@ (8005430 <HAL_RCC_ClockConfig+0x1cc>)
 800540c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800540e:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <HAL_RCC_ClockConfig+0x1d0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fd facc 	bl	80029b0 <HAL_InitTick>

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40022000 	.word	0x40022000
 8005428:	40021000 	.word	0x40021000
 800542c:	0800b49c 	.word	0x0800b49c
 8005430:	20000020 	.word	0x20000020
 8005434:	20000024 	.word	0x20000024

08005438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005452:	4b1e      	ldr	r3, [pc, #120]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b04      	cmp	r3, #4
 8005460:	d002      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x30>
 8005462:	2b08      	cmp	r3, #8
 8005464:	d003      	beq.n	800546e <HAL_RCC_GetSysClockFreq+0x36>
 8005466:	e027      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005468:	4b19      	ldr	r3, [pc, #100]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800546a:	613b      	str	r3, [r7, #16]
      break;
 800546c:	e027      	b.n	80054be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	0c9b      	lsrs	r3, r3, #18
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	4a17      	ldr	r2, [pc, #92]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005478:	5cd3      	ldrb	r3, [r2, r3]
 800547a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d010      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005486:	4b11      	ldr	r3, [pc, #68]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	0c5b      	lsrs	r3, r3, #17
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	4a11      	ldr	r2, [pc, #68]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005492:	5cd3      	ldrb	r3, [r2, r3]
 8005494:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a0d      	ldr	r2, [pc, #52]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800549a:	fb03 f202 	mul.w	r2, r3, r2
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e004      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a0c      	ldr	r2, [pc, #48]	@ (80054dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	613b      	str	r3, [r7, #16]
      break;
 80054b6:	e002      	b.n	80054be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80054ba:	613b      	str	r3, [r7, #16]
      break;
 80054bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054be:	693b      	ldr	r3, [r7, #16]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	007a1200 	.word	0x007a1200
 80054d4:	0800b4b4 	.word	0x0800b4b4
 80054d8:	0800b4c4 	.word	0x0800b4c4
 80054dc:	003d0900 	.word	0x003d0900

080054e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b02      	ldr	r3, [pc, #8]	@ (80054f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	20000020 	.word	0x20000020

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054f8:	f7ff fff2 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	0800b4ac 	.word	0x0800b4ac

0800551c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005520:	f7ff ffde 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	4b05      	ldr	r3, [pc, #20]	@ (800553c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	0adb      	lsrs	r3, r3, #11
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	4903      	ldr	r1, [pc, #12]	@ (8005540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005532:	5ccb      	ldrb	r3, [r1, r3]
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000
 8005540:	0800b4ac 	.word	0x0800b4ac

08005544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800554c:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <RCC_Delay+0x34>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <RCC_Delay+0x38>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	0a5b      	lsrs	r3, r3, #9
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005560:	bf00      	nop
  }
  while (Delay --);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1e5a      	subs	r2, r3, #1
 8005566:	60fa      	str	r2, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f9      	bne.n	8005560 <RCC_Delay+0x1c>
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	20000020 	.word	0x20000020
 800557c:	10624dd3 	.word	0x10624dd3

08005580 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d07d      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800559c:	2300      	movs	r3, #0
 800559e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a0:	4b4f      	ldr	r3, [pc, #316]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10d      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ac:	4b4c      	ldr	r3, [pc, #304]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	4a4b      	ldr	r2, [pc, #300]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b6:	61d3      	str	r3, [r2, #28]
 80055b8:	4b49      	ldr	r3, [pc, #292]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c8:	4b46      	ldr	r3, [pc, #280]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d118      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d4:	4b43      	ldr	r3, [pc, #268]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a42      	ldr	r2, [pc, #264]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e0:	f7fd fa28 	bl	8002a34 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e6:	e008      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e8:	f7fd fa24 	bl	8002a34 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	@ 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e06d      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fa:	4b3a      	ldr	r3, [pc, #232]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0f0      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005606:	4b36      	ldr	r3, [pc, #216]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d02e      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	429a      	cmp	r2, r3
 8005622:	d027      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005624:	4b2e      	ldr	r3, [pc, #184]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800562c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800562e:	4b2e      	ldr	r3, [pc, #184]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005634:	4b2c      	ldr	r3, [pc, #176]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800563a:	4a29      	ldr	r2, [pc, #164]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d014      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564a:	f7fd f9f3 	bl	8002a34 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005650:	e00a      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005652:	f7fd f9ef 	bl	8002a34 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e036      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005668:	4b1d      	ldr	r3, [pc, #116]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ee      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005674:	4b1a      	ldr	r3, [pc, #104]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4917      	ldr	r1, [pc, #92]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005682:	4313      	orrs	r3, r2
 8005684:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d105      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568c:	4b14      	ldr	r3, [pc, #80]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	4a13      	ldr	r2, [pc, #76]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005692:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005696:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d008      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a4:	4b0e      	ldr	r3, [pc, #56]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	490b      	ldr	r1, [pc, #44]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c2:	4b07      	ldr	r3, [pc, #28]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4904      	ldr	r1, [pc, #16]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000
 80056e4:	40007000 	.word	0x40007000
 80056e8:	42420440 	.word	0x42420440

080056ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	2300      	movs	r3, #0
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b10      	cmp	r3, #16
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b10      	cmp	r3, #16
 8005712:	f200 808a 	bhi.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d045      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d075      	beq.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005722:	e082      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005724:	4b46      	ldr	r3, [pc, #280]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800572a:	4b45      	ldr	r3, [pc, #276]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d07b      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	0c9b      	lsrs	r3, r3, #18
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	4a41      	ldr	r2, [pc, #260]	@ (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005740:	5cd3      	ldrb	r3, [r2, r3]
 8005742:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d015      	beq.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800574e:	4b3c      	ldr	r3, [pc, #240]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	0c5b      	lsrs	r3, r3, #17
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	4a3b      	ldr	r2, [pc, #236]	@ (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800575a:	5cd3      	ldrb	r3, [r2, r3]
 800575c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00d      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005768:	4a38      	ldr	r2, [pc, #224]	@ (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	e004      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4a34      	ldr	r2, [pc, #208]	@ (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005784:	4b2e      	ldr	r3, [pc, #184]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800578c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005790:	d102      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	61bb      	str	r3, [r7, #24]
      break;
 8005796:	e04a      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4a2d      	ldr	r2, [pc, #180]	@ (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	61bb      	str	r3, [r7, #24]
      break;
 80057a6:	e042      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80057a8:	4b25      	ldr	r3, [pc, #148]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b8:	d108      	bne.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80057c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e01f      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057d6:	d109      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80057d8:	4b19      	ldr	r3, [pc, #100]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80057e4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e00f      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057f6:	d11c      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80057f8:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d016      	beq.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005804:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005808:	61bb      	str	r3, [r7, #24]
      break;
 800580a:	e012      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800580c:	e011      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800580e:	f7ff fe85 	bl	800551c <HAL_RCC_GetPCLK2Freq>
 8005812:	4602      	mov	r2, r0
 8005814:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	0b9b      	lsrs	r3, r3, #14
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	3301      	adds	r3, #1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	61bb      	str	r3, [r7, #24]
      break;
 8005828:	e004      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005832:	bf00      	nop
    }
  }
  return (frequency);
 8005834:	69bb      	ldr	r3, [r7, #24]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	0800b4c8 	.word	0x0800b4c8
 8005848:	0800b4d8 	.word	0x0800b4d8
 800584c:	007a1200 	.word	0x007a1200
 8005850:	003d0900 	.word	0x003d0900
 8005854:	aaaaaaab 	.word	0xaaaaaaab

08005858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e041      	b.n	80058ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc fe1e 	bl	80024c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3304      	adds	r3, #4
 8005894:	4619      	mov	r1, r3
 8005896:	4610      	mov	r0, r2
 8005898:	f000 f940 	bl	8005b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d001      	beq.n	8005910 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e032      	b.n	8005976 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a18      	ldr	r2, [pc, #96]	@ (8005980 <HAL_TIM_Base_Start+0x88>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00e      	beq.n	8005940 <HAL_TIM_Base_Start+0x48>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592a:	d009      	beq.n	8005940 <HAL_TIM_Base_Start+0x48>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a14      	ldr	r2, [pc, #80]	@ (8005984 <HAL_TIM_Base_Start+0x8c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_TIM_Base_Start+0x48>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a13      	ldr	r2, [pc, #76]	@ (8005988 <HAL_TIM_Base_Start+0x90>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d111      	bne.n	8005964 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b06      	cmp	r3, #6
 8005950:	d010      	beq.n	8005974 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	e007      	b.n	8005974 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800

0800598c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e0b4      	b.n	8005b12 <HAL_TIM_ConfigClockSource+0x186>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059e0:	d03e      	beq.n	8005a60 <HAL_TIM_ConfigClockSource+0xd4>
 80059e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059e6:	f200 8087 	bhi.w	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ee:	f000 8086 	beq.w	8005afe <HAL_TIM_ConfigClockSource+0x172>
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f6:	d87f      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 80059f8:	2b70      	cmp	r3, #112	@ 0x70
 80059fa:	d01a      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0xa6>
 80059fc:	2b70      	cmp	r3, #112	@ 0x70
 80059fe:	d87b      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a00:	2b60      	cmp	r3, #96	@ 0x60
 8005a02:	d050      	beq.n	8005aa6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a04:	2b60      	cmp	r3, #96	@ 0x60
 8005a06:	d877      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a08:	2b50      	cmp	r3, #80	@ 0x50
 8005a0a:	d03c      	beq.n	8005a86 <HAL_TIM_ConfigClockSource+0xfa>
 8005a0c:	2b50      	cmp	r3, #80	@ 0x50
 8005a0e:	d873      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b40      	cmp	r3, #64	@ 0x40
 8005a12:	d058      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x13a>
 8005a14:	2b40      	cmp	r3, #64	@ 0x40
 8005a16:	d86f      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b30      	cmp	r3, #48	@ 0x30
 8005a1a:	d064      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a1c:	2b30      	cmp	r3, #48	@ 0x30
 8005a1e:	d86b      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d060      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d867      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d05c      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d05a      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a30:	e062      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a42:	f000 f950 	bl	8005ce6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	609a      	str	r2, [r3, #8]
      break;
 8005a5e:	e04f      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a70:	f000 f939 	bl	8005ce6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a82:	609a      	str	r2, [r3, #8]
      break;
 8005a84:	e03c      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a92:	461a      	mov	r2, r3
 8005a94:	f000 f8b0 	bl	8005bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2150      	movs	r1, #80	@ 0x50
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 f907 	bl	8005cb2 <TIM_ITRx_SetConfig>
      break;
 8005aa4:	e02c      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f000 f8ce 	bl	8005c54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2160      	movs	r1, #96	@ 0x60
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f8f7 	bl	8005cb2 <TIM_ITRx_SetConfig>
      break;
 8005ac4:	e01c      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f000 f890 	bl	8005bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2140      	movs	r1, #64	@ 0x40
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f8e7 	bl	8005cb2 <TIM_ITRx_SetConfig>
      break;
 8005ae4:	e00c      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f000 f8de 	bl	8005cb2 <TIM_ITRx_SetConfig>
      break;
 8005af6:	e003      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
      break;
 8005afc:	e000      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005afe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8005bec <TIM_Base_SetConfig+0xd0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <TIM_Base_SetConfig+0x30>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3a:	d007      	beq.n	8005b4c <TIM_Base_SetConfig+0x30>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf0 <TIM_Base_SetConfig+0xd4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_Base_SetConfig+0x30>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a2b      	ldr	r2, [pc, #172]	@ (8005bf4 <TIM_Base_SetConfig+0xd8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d108      	bne.n	8005b5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a22      	ldr	r2, [pc, #136]	@ (8005bec <TIM_Base_SetConfig+0xd0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00b      	beq.n	8005b7e <TIM_Base_SetConfig+0x62>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b6c:	d007      	beq.n	8005b7e <TIM_Base_SetConfig+0x62>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf0 <TIM_Base_SetConfig+0xd4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_Base_SetConfig+0x62>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf4 <TIM_Base_SetConfig+0xd8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d108      	bne.n	8005b90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8005bec <TIM_Base_SetConfig+0xd0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d103      	bne.n	8005bc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f023 0201 	bic.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	611a      	str	r2, [r3, #16]
  }
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800

08005bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f023 0201 	bic.w	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f023 030a 	bic.w	r3, r3, #10
 8005c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f023 0210 	bic.w	r2, r3, #16
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	031b      	lsls	r3, r3, #12
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	621a      	str	r2, [r3, #32]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr

08005cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f043 0307 	orr.w	r3, r3, #7
 8005cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	021a      	lsls	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	609a      	str	r2, [r3, #8]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e046      	b.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a16      	ldr	r2, [pc, #88]	@ (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00e      	beq.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d88:	d009      	beq.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a12      	ldr	r2, [pc, #72]	@ (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a10      	ldr	r2, [pc, #64]	@ (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d10c      	bne.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800

08005de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e042      	b.n	8005e78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fc fb76 	bl	80024f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	@ 0x24
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fe47 	bl	8006ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	@ 0x28
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d175      	bne.n	8005f8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_UART_Transmit+0x2c>
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e06e      	b.n	8005f8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2221      	movs	r2, #33	@ 0x21
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ebe:	f7fc fdb9 	bl	8002a34 <HAL_GetTick>
 8005ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	88fa      	ldrh	r2, [r7, #6]
 8005ec8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed8:	d108      	bne.n	8005eec <HAL_UART_Transmit+0x6c>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e003      	b.n	8005ef4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ef4:	e02e      	b.n	8005f54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2180      	movs	r1, #128	@ 0x80
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fbab 	bl	800665c <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e03a      	b.n	8005f8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	3302      	adds	r3, #2
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e007      	b.n	8005f46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1cb      	bne.n	8005ef6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2140      	movs	r1, #64	@ 0x40
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fb77 	bl	800665c <UART_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e006      	b.n	8005f8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b08a      	sub	sp, #40	@ 0x28
 8005f9a:	af02      	add	r7, sp, #8
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	f040 8081 	bne.w	80060ba <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_UART_Receive+0x2e>
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e079      	b.n	80060bc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2222      	movs	r2, #34	@ 0x22
 8005fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fdc:	f7fc fd2a 	bl	8002a34 <HAL_GetTick>
 8005fe0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff6:	d108      	bne.n	800600a <HAL_UART_Receive+0x74>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e003      	b.n	8006012 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006012:	e047      	b.n	80060a4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2200      	movs	r2, #0
 800601c:	2120      	movs	r1, #32
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fb1c 	bl	800665c <UART_WaitOnFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e042      	b.n	80060bc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10c      	bne.n	8006056 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006048:	b29a      	uxth	r2, r3
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	3302      	adds	r3, #2
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e01f      	b.n	8006096 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605e:	d007      	beq.n	8006070 <HAL_UART_Receive+0xda>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <HAL_UART_Receive+0xe8>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d106      	bne.n	800607e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	e008      	b.n	8006090 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608a:	b2da      	uxtb	r2, r3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	3301      	adds	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1b2      	bne.n	8006014 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e000      	b.n	80060bc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3720      	adds	r7, #32
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d112      	bne.n	8006104 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_UART_Receive_IT+0x26>
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e00b      	b.n	8006106 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fb07 	bl	800670e <UART_Start_Receive_IT>
 8006100:	4603      	mov	r3, r0
 8006102:	e000      	b.n	8006106 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006104:	2302      	movs	r3, #2
  }
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b0ba      	sub	sp, #232	@ 0xe8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006136:	2300      	movs	r3, #0
 8006138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800614e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <HAL_UART_IRQHandler+0x66>
 8006162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fbe3 	bl	800693a <UART_Receive_IT>
      return;
 8006174:	e25b      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80de 	beq.w	800633c <HAL_UART_IRQHandler+0x22c>
 8006180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d106      	bne.n	800619a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800618c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006190:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80d1 	beq.w	800633c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <HAL_UART_IRQHandler+0xae>
 80061a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b6:	f043 0201 	orr.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <HAL_UART_IRQHandler+0xd2>
 80061ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	f043 0202 	orr.w	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00b      	beq.n	8006206 <HAL_UART_IRQHandler+0xf6>
 80061ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fe:	f043 0204 	orr.w	r2, r3, #4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d011      	beq.n	8006236 <HAL_UART_IRQHandler+0x126>
 8006212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800621e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622e:	f043 0208 	orr.w	r2, r3, #8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 81f2 	beq.w	8006624 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <HAL_UART_IRQHandler+0x14e>
 800624c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fb6e 	bl	800693a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d103      	bne.n	800628a <HAL_UART_IRQHandler+0x17a>
 8006282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d04f      	beq.n	800632a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa78 	bl	8006780 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d041      	beq.n	8006322 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3314      	adds	r3, #20
 80062a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3314      	adds	r3, #20
 80062c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80062ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1d9      	bne.n	800629e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d013      	beq.n	800631a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f6:	4a7e      	ldr	r2, [pc, #504]	@ (80064f0 <HAL_UART_IRQHandler+0x3e0>)
 80062f8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fd f996 	bl	8003630 <HAL_DMA_Abort_IT>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d016      	beq.n	8006338 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	e00e      	b.n	8006338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f98a 	bl	8006634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	e00a      	b.n	8006338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f986 	bl	8006634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	e006      	b.n	8006338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f982 	bl	8006634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006336:	e175      	b.n	8006624 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	bf00      	nop
    return;
 800633a:	e173      	b.n	8006624 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006340:	2b01      	cmp	r3, #1
 8006342:	f040 814f 	bne.w	80065e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8148 	beq.w	80065e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8141 	beq.w	80065e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	60bb      	str	r3, [r7, #8]
 8006376:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 80b6 	beq.w	80064f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006394:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8145 	beq.w	8006628 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063a6:	429a      	cmp	r2, r3
 80063a8:	f080 813e 	bcs.w	8006628 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	f000 8088 	beq.w	80064d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80063ec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1d9      	bne.n	80063c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800641c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3314      	adds	r3, #20
 800642c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006430:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006434:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006438:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006442:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e1      	bne.n	800640c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3314      	adds	r3, #20
 800644e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800645a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800645e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800646c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800646e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006472:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800647a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e3      	bne.n	8006448 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800649e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064a0:	f023 0310 	bic.w	r3, r3, #16
 80064a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80064b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80064b4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e3      	bne.n	800648e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fd f874 	bl	80035b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064de:	b29b      	uxth	r3, r3
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f8ad 	bl	8006646 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064ec:	e09c      	b.n	8006628 <HAL_UART_IRQHandler+0x518>
 80064ee:	bf00      	nop
 80064f0:	08006845 	.word	0x08006845
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 808e 	beq.w	800662c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8089 	beq.w	800662c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800652a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006530:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800653e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006540:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006544:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800654c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e3      	bne.n	800651a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3314      	adds	r3, #20
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	623b      	str	r3, [r7, #32]
   return(result);
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3314      	adds	r3, #20
 8006572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006576:	633a      	str	r2, [r7, #48]	@ 0x30
 8006578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800657c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e3      	bne.n	8006552 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0310 	bic.w	r3, r3, #16
 80065ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80065bc:	61fa      	str	r2, [r7, #28]
 80065be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e3      	bne.n	8006598 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f832 	bl	8006646 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065e2:	e023      	b.n	800662c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <HAL_UART_IRQHandler+0x4f4>
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f935 	bl	800686c <UART_Transmit_IT>
    return;
 8006602:	e014      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <HAL_UART_IRQHandler+0x51e>
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f974 	bl	800690a <UART_EndTransmit_IT>
    return;
 8006622:	e004      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
    return;
 8006624:	bf00      	nop
 8006626:	e002      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
      return;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
      return;
 800662c:	bf00      	nop
  }
}
 800662e:	37e8      	adds	r7, #232	@ 0xe8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr

0800665c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	4613      	mov	r3, r2
 800666a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666c:	e03b      	b.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d037      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006676:	f7fc f9dd 	bl	8002a34 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	6a3a      	ldr	r2, [r7, #32]
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <UART_WaitOnFlagUntilTimeout+0x30>
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e03a      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d023      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b80      	cmp	r3, #128	@ 0x80
 80066a2:	d020      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b40      	cmp	r3, #64	@ 0x40
 80066a8:	d01d      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d116      	bne.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f856 	bl	8006780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2208      	movs	r2, #8
 80066d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e00f      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	429a      	cmp	r2, r3
 8006702:	d0b4      	beq.n	800666e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	4613      	mov	r3, r2
 800671a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	88fa      	ldrh	r2, [r7, #6]
 8006726:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	88fa      	ldrh	r2, [r7, #6]
 800672c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2222      	movs	r2, #34	@ 0x22
 8006738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006752:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0220 	orr.w	r2, r2, #32
 8006772:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr

08006780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006780:	b480      	push	{r7}
 8006782:	b095      	sub	sp, #84	@ 0x54
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	330c      	adds	r3, #12
 800678e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800679e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e5      	bne.n	8006788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3314      	adds	r3, #20
 80067c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3314      	adds	r3, #20
 80067da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e5      	bne.n	80067bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d119      	bne.n	800682c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	60bb      	str	r3, [r7, #8]
   return(result);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f023 0310 	bic.w	r3, r3, #16
 800680e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	330c      	adds	r3, #12
 8006816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006818:	61ba      	str	r2, [r7, #24]
 800681a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6979      	ldr	r1, [r7, #20]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	613b      	str	r3, [r7, #16]
   return(result);
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e5      	bne.n	80067f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800683a:	bf00      	nop
 800683c:	3754      	adds	r7, #84	@ 0x54
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006850:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff fee8 	bl	8006634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b21      	cmp	r3, #33	@ 0x21
 800687e:	d13e      	bne.n	80068fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006888:	d114      	bne.n	80068b4 <UART_Transmit_IT+0x48>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d110      	bne.n	80068b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	1c9a      	adds	r2, r3, #2
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	621a      	str	r2, [r3, #32]
 80068b2:	e008      	b.n	80068c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	1c59      	adds	r1, r3, #1
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6211      	str	r1, [r2, #32]
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4619      	mov	r1, r3
 80068d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10f      	bne.n	80068fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e000      	b.n	8006900 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068fe:	2302      	movs	r3, #2
  }
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr

0800690a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006920:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fa fc7c 	bl	8001228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b08c      	sub	sp, #48	@ 0x30
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b22      	cmp	r3, #34	@ 0x22
 800694c:	f040 80ae 	bne.w	8006aac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006958:	d117      	bne.n	800698a <UART_Receive_IT+0x50>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d113      	bne.n	800698a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006978:	b29a      	uxth	r2, r3
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006982:	1c9a      	adds	r2, r3, #2
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	629a      	str	r2, [r3, #40]	@ 0x28
 8006988:	e026      	b.n	80069d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800699c:	d007      	beq.n	80069ae <UART_Receive_IT+0x74>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <UART_Receive_IT+0x82>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	e008      	b.n	80069ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4619      	mov	r1, r3
 80069e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d15d      	bne.n	8006aa8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0220 	bic.w	r2, r2, #32
 80069fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695a      	ldr	r2, [r3, #20]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d135      	bne.n	8006a9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	613b      	str	r3, [r7, #16]
   return(result);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f023 0310 	bic.w	r3, r3, #16
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a58:	623a      	str	r2, [r7, #32]
 8006a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	69f9      	ldr	r1, [r7, #28]
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e5      	bne.n	8006a38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	2b10      	cmp	r3, #16
 8006a78:	d10a      	bne.n	8006a90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff fdd5 	bl	8006646 <HAL_UARTEx_RxEventCallback>
 8006a9c:	e002      	b.n	8006aa4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fa fdf8 	bl	8001694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e002      	b.n	8006aae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e000      	b.n	8006aae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006aac:	2302      	movs	r3, #2
  }
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3730      	adds	r7, #48	@ 0x30
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006af2:	f023 030c 	bic.w	r3, r3, #12
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6812      	ldr	r2, [r2, #0]
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	430b      	orrs	r3, r1
 8006afe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bcc <UART_SetConfig+0x114>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d103      	bne.n	8006b28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b20:	f7fe fcfc 	bl	800551c <HAL_RCC_GetPCLK2Freq>
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	e002      	b.n	8006b2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b28:	f7fe fce4 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8006b2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	009a      	lsls	r2, r3, #2
 8006b38:	441a      	add	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	4a22      	ldr	r2, [pc, #136]	@ (8006bd0 <UART_SetConfig+0x118>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	0119      	lsls	r1, r3, #4
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009a      	lsls	r2, r3, #2
 8006b58:	441a      	add	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b64:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd0 <UART_SetConfig+0x118>)
 8006b66:	fba3 0302 	umull	r0, r3, r3, r2
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	2064      	movs	r0, #100	@ 0x64
 8006b6e:	fb00 f303 	mul.w	r3, r0, r3
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	3332      	adds	r3, #50	@ 0x32
 8006b78:	4a15      	ldr	r2, [pc, #84]	@ (8006bd0 <UART_SetConfig+0x118>)
 8006b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b84:	4419      	add	r1, r3
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009a      	lsls	r2, r3, #2
 8006b90:	441a      	add	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd0 <UART_SetConfig+0x118>)
 8006b9e:	fba3 0302 	umull	r0, r3, r3, r2
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	2064      	movs	r0, #100	@ 0x64
 8006ba6:	fb00 f303 	mul.w	r3, r0, r3
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	3332      	adds	r3, #50	@ 0x32
 8006bb0:	4a07      	ldr	r2, [pc, #28]	@ (8006bd0 <UART_SetConfig+0x118>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	f003 020f 	and.w	r2, r3, #15
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40013800 	.word	0x40013800
 8006bd0:	51eb851f 	.word	0x51eb851f

08006bd4 <atof>:
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	f000 be3b 	b.w	8007850 <strtod>
	...

08006bdc <rand>:
 8006bdc:	4b16      	ldr	r3, [pc, #88]	@ (8006c38 <rand+0x5c>)
 8006bde:	b510      	push	{r4, lr}
 8006be0:	681c      	ldr	r4, [r3, #0]
 8006be2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006be4:	b9b3      	cbnz	r3, 8006c14 <rand+0x38>
 8006be6:	2018      	movs	r0, #24
 8006be8:	f002 ff34 	bl	8009a54 <malloc>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6320      	str	r0, [r4, #48]	@ 0x30
 8006bf0:	b920      	cbnz	r0, 8006bfc <rand+0x20>
 8006bf2:	2152      	movs	r1, #82	@ 0x52
 8006bf4:	4b11      	ldr	r3, [pc, #68]	@ (8006c3c <rand+0x60>)
 8006bf6:	4812      	ldr	r0, [pc, #72]	@ (8006c40 <rand+0x64>)
 8006bf8:	f001 fd2e 	bl	8008658 <__assert_func>
 8006bfc:	4911      	ldr	r1, [pc, #68]	@ (8006c44 <rand+0x68>)
 8006bfe:	4b12      	ldr	r3, [pc, #72]	@ (8006c48 <rand+0x6c>)
 8006c00:	e9c0 1300 	strd	r1, r3, [r0]
 8006c04:	4b11      	ldr	r3, [pc, #68]	@ (8006c4c <rand+0x70>)
 8006c06:	2100      	movs	r1, #0
 8006c08:	6083      	str	r3, [r0, #8]
 8006c0a:	230b      	movs	r3, #11
 8006c0c:	8183      	strh	r3, [r0, #12]
 8006c0e:	2001      	movs	r0, #1
 8006c10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006c14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c16:	480e      	ldr	r0, [pc, #56]	@ (8006c50 <rand+0x74>)
 8006c18:	690b      	ldr	r3, [r1, #16]
 8006c1a:	694c      	ldr	r4, [r1, #20]
 8006c1c:	4358      	muls	r0, r3
 8006c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8006c54 <rand+0x78>)
 8006c20:	fb02 0004 	mla	r0, r2, r4, r0
 8006c24:	fba3 3202 	umull	r3, r2, r3, r2
 8006c28:	3301      	adds	r3, #1
 8006c2a:	eb40 0002 	adc.w	r0, r0, r2
 8006c2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006c32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006c36:	bd10      	pop	{r4, pc}
 8006c38:	200001a4 	.word	0x200001a4
 8006c3c:	0800b4da 	.word	0x0800b4da
 8006c40:	0800b4f1 	.word	0x0800b4f1
 8006c44:	abcd330e 	.word	0xabcd330e
 8006c48:	e66d1234 	.word	0xe66d1234
 8006c4c:	0005deec 	.word	0x0005deec
 8006c50:	5851f42d 	.word	0x5851f42d
 8006c54:	4c957f2d 	.word	0x4c957f2d

08006c58 <sulp>:
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	460f      	mov	r7, r1
 8006c5e:	4690      	mov	r8, r2
 8006c60:	f003 fb2c 	bl	800a2bc <__ulp>
 8006c64:	4604      	mov	r4, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	f1b8 0f00 	cmp.w	r8, #0
 8006c6c:	d011      	beq.n	8006c92 <sulp+0x3a>
 8006c6e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006c72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dd0b      	ble.n	8006c92 <sulp+0x3a>
 8006c7a:	2400      	movs	r4, #0
 8006c7c:	051b      	lsls	r3, r3, #20
 8006c7e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006c82:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006c86:	4622      	mov	r2, r4
 8006c88:	462b      	mov	r3, r5
 8006c8a:	f7f9 fc25 	bl	80004d8 <__aeabi_dmul>
 8006c8e:	4604      	mov	r4, r0
 8006c90:	460d      	mov	r5, r1
 8006c92:	4620      	mov	r0, r4
 8006c94:	4629      	mov	r1, r5
 8006c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9a:	0000      	movs	r0, r0
 8006c9c:	0000      	movs	r0, r0
	...

08006ca0 <_strtod_l>:
 8006ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	b09f      	sub	sp, #124	@ 0x7c
 8006ca6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	460c      	mov	r4, r1
 8006cac:	921a      	str	r2, [sp, #104]	@ 0x68
 8006cae:	f04f 0a00 	mov.w	sl, #0
 8006cb2:	f04f 0b00 	mov.w	fp, #0
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	9005      	str	r0, [sp, #20]
 8006cba:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cbc:	7811      	ldrb	r1, [r2, #0]
 8006cbe:	292b      	cmp	r1, #43	@ 0x2b
 8006cc0:	d048      	beq.n	8006d54 <_strtod_l+0xb4>
 8006cc2:	d836      	bhi.n	8006d32 <_strtod_l+0x92>
 8006cc4:	290d      	cmp	r1, #13
 8006cc6:	d830      	bhi.n	8006d2a <_strtod_l+0x8a>
 8006cc8:	2908      	cmp	r1, #8
 8006cca:	d830      	bhi.n	8006d2e <_strtod_l+0x8e>
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	d039      	beq.n	8006d44 <_strtod_l+0xa4>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006cd6:	782a      	ldrb	r2, [r5, #0]
 8006cd8:	2a30      	cmp	r2, #48	@ 0x30
 8006cda:	f040 80b0 	bne.w	8006e3e <_strtod_l+0x19e>
 8006cde:	786a      	ldrb	r2, [r5, #1]
 8006ce0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ce4:	2a58      	cmp	r2, #88	@ 0x58
 8006ce6:	d16c      	bne.n	8006dc2 <_strtod_l+0x122>
 8006ce8:	9302      	str	r3, [sp, #8]
 8006cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cec:	4a8f      	ldr	r2, [pc, #572]	@ (8006f2c <_strtod_l+0x28c>)
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	ab1a      	add	r3, sp, #104	@ 0x68
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	9805      	ldr	r0, [sp, #20]
 8006cf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006cf8:	a919      	add	r1, sp, #100	@ 0x64
 8006cfa:	f002 fbd9 	bl	80094b0 <__gethex>
 8006cfe:	f010 060f 	ands.w	r6, r0, #15
 8006d02:	4604      	mov	r4, r0
 8006d04:	d005      	beq.n	8006d12 <_strtod_l+0x72>
 8006d06:	2e06      	cmp	r6, #6
 8006d08:	d126      	bne.n	8006d58 <_strtod_l+0xb8>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	3501      	adds	r5, #1
 8006d0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006d10:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f040 8582 	bne.w	800781e <_strtod_l+0xb7e>
 8006d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d1c:	b1bb      	cbz	r3, 8006d4e <_strtod_l+0xae>
 8006d1e:	4650      	mov	r0, sl
 8006d20:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006d24:	b01f      	add	sp, #124	@ 0x7c
 8006d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2a:	2920      	cmp	r1, #32
 8006d2c:	d1d0      	bne.n	8006cd0 <_strtod_l+0x30>
 8006d2e:	3201      	adds	r2, #1
 8006d30:	e7c3      	b.n	8006cba <_strtod_l+0x1a>
 8006d32:	292d      	cmp	r1, #45	@ 0x2d
 8006d34:	d1cc      	bne.n	8006cd0 <_strtod_l+0x30>
 8006d36:	2101      	movs	r1, #1
 8006d38:	910e      	str	r1, [sp, #56]	@ 0x38
 8006d3a:	1c51      	adds	r1, r2, #1
 8006d3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d3e:	7852      	ldrb	r2, [r2, #1]
 8006d40:	2a00      	cmp	r2, #0
 8006d42:	d1c7      	bne.n	8006cd4 <_strtod_l+0x34>
 8006d44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d46:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f040 8566 	bne.w	800781a <_strtod_l+0xb7a>
 8006d4e:	4650      	mov	r0, sl
 8006d50:	4659      	mov	r1, fp
 8006d52:	e7e7      	b.n	8006d24 <_strtod_l+0x84>
 8006d54:	2100      	movs	r1, #0
 8006d56:	e7ef      	b.n	8006d38 <_strtod_l+0x98>
 8006d58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d5a:	b13a      	cbz	r2, 8006d6c <_strtod_l+0xcc>
 8006d5c:	2135      	movs	r1, #53	@ 0x35
 8006d5e:	a81c      	add	r0, sp, #112	@ 0x70
 8006d60:	f003 fb9c 	bl	800a49c <__copybits>
 8006d64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d66:	9805      	ldr	r0, [sp, #20]
 8006d68:	f002 ff7c 	bl	8009c64 <_Bfree>
 8006d6c:	3e01      	subs	r6, #1
 8006d6e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006d70:	2e04      	cmp	r6, #4
 8006d72:	d806      	bhi.n	8006d82 <_strtod_l+0xe2>
 8006d74:	e8df f006 	tbb	[pc, r6]
 8006d78:	201d0314 	.word	0x201d0314
 8006d7c:	14          	.byte	0x14
 8006d7d:	00          	.byte	0x00
 8006d7e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006d82:	05e1      	lsls	r1, r4, #23
 8006d84:	bf48      	it	mi
 8006d86:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006d8a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d8e:	0d1b      	lsrs	r3, r3, #20
 8006d90:	051b      	lsls	r3, r3, #20
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1bd      	bne.n	8006d12 <_strtod_l+0x72>
 8006d96:	f001 fc07 	bl	80085a8 <__errno>
 8006d9a:	2322      	movs	r3, #34	@ 0x22
 8006d9c:	6003      	str	r3, [r0, #0]
 8006d9e:	e7b8      	b.n	8006d12 <_strtod_l+0x72>
 8006da0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006da4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006da8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006dac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006db0:	e7e7      	b.n	8006d82 <_strtod_l+0xe2>
 8006db2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006f30 <_strtod_l+0x290>
 8006db6:	e7e4      	b.n	8006d82 <_strtod_l+0xe2>
 8006db8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006dbc:	f04f 3aff 	mov.w	sl, #4294967295
 8006dc0:	e7df      	b.n	8006d82 <_strtod_l+0xe2>
 8006dc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	2b30      	cmp	r3, #48	@ 0x30
 8006dcc:	d0f9      	beq.n	8006dc2 <_strtod_l+0x122>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d09f      	beq.n	8006d12 <_strtod_l+0x72>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	2700      	movs	r7, #0
 8006dd6:	220a      	movs	r2, #10
 8006dd8:	46b9      	mov	r9, r7
 8006dda:	9308      	str	r3, [sp, #32]
 8006ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006dde:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006de0:	930c      	str	r3, [sp, #48]	@ 0x30
 8006de2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006de4:	7805      	ldrb	r5, [r0, #0]
 8006de6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006dea:	b2d9      	uxtb	r1, r3
 8006dec:	2909      	cmp	r1, #9
 8006dee:	d928      	bls.n	8006e42 <_strtod_l+0x1a2>
 8006df0:	2201      	movs	r2, #1
 8006df2:	4950      	ldr	r1, [pc, #320]	@ (8006f34 <_strtod_l+0x294>)
 8006df4:	f001 faf7 	bl	80083e6 <strncmp>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d032      	beq.n	8006e62 <_strtod_l+0x1c2>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	462a      	mov	r2, r5
 8006e00:	4603      	mov	r3, r0
 8006e02:	464d      	mov	r5, r9
 8006e04:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e06:	2a65      	cmp	r2, #101	@ 0x65
 8006e08:	d001      	beq.n	8006e0e <_strtod_l+0x16e>
 8006e0a:	2a45      	cmp	r2, #69	@ 0x45
 8006e0c:	d114      	bne.n	8006e38 <_strtod_l+0x198>
 8006e0e:	b91d      	cbnz	r5, 8006e18 <_strtod_l+0x178>
 8006e10:	9a08      	ldr	r2, [sp, #32]
 8006e12:	4302      	orrs	r2, r0
 8006e14:	d096      	beq.n	8006d44 <_strtod_l+0xa4>
 8006e16:	2500      	movs	r5, #0
 8006e18:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006e1a:	1c62      	adds	r2, r4, #1
 8006e1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e1e:	7862      	ldrb	r2, [r4, #1]
 8006e20:	2a2b      	cmp	r2, #43	@ 0x2b
 8006e22:	d07a      	beq.n	8006f1a <_strtod_l+0x27a>
 8006e24:	2a2d      	cmp	r2, #45	@ 0x2d
 8006e26:	d07e      	beq.n	8006f26 <_strtod_l+0x286>
 8006e28:	f04f 0c00 	mov.w	ip, #0
 8006e2c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006e30:	2909      	cmp	r1, #9
 8006e32:	f240 8085 	bls.w	8006f40 <_strtod_l+0x2a0>
 8006e36:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e38:	f04f 0800 	mov.w	r8, #0
 8006e3c:	e0a5      	b.n	8006f8a <_strtod_l+0x2ea>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e7c8      	b.n	8006dd4 <_strtod_l+0x134>
 8006e42:	f1b9 0f08 	cmp.w	r9, #8
 8006e46:	bfd8      	it	le
 8006e48:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006e4a:	f100 0001 	add.w	r0, r0, #1
 8006e4e:	bfd6      	itet	le
 8006e50:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e54:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006e58:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006e5a:	f109 0901 	add.w	r9, r9, #1
 8006e5e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006e60:	e7bf      	b.n	8006de2 <_strtod_l+0x142>
 8006e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e68:	785a      	ldrb	r2, [r3, #1]
 8006e6a:	f1b9 0f00 	cmp.w	r9, #0
 8006e6e:	d03b      	beq.n	8006ee8 <_strtod_l+0x248>
 8006e70:	464d      	mov	r5, r9
 8006e72:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e74:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d912      	bls.n	8006ea2 <_strtod_l+0x202>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e7c2      	b.n	8006e06 <_strtod_l+0x166>
 8006e80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e82:	3001      	adds	r0, #1
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e88:	785a      	ldrb	r2, [r3, #1]
 8006e8a:	2a30      	cmp	r2, #48	@ 0x30
 8006e8c:	d0f8      	beq.n	8006e80 <_strtod_l+0x1e0>
 8006e8e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	f200 84c8 	bhi.w	8007828 <_strtod_l+0xb88>
 8006e98:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ea0:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ea2:	3a30      	subs	r2, #48	@ 0x30
 8006ea4:	f100 0301 	add.w	r3, r0, #1
 8006ea8:	d018      	beq.n	8006edc <_strtod_l+0x23c>
 8006eaa:	462e      	mov	r6, r5
 8006eac:	f04f 0e0a 	mov.w	lr, #10
 8006eb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006eb2:	4419      	add	r1, r3
 8006eb4:	910a      	str	r1, [sp, #40]	@ 0x28
 8006eb6:	1c71      	adds	r1, r6, #1
 8006eb8:	eba1 0c05 	sub.w	ip, r1, r5
 8006ebc:	4563      	cmp	r3, ip
 8006ebe:	dc15      	bgt.n	8006eec <_strtod_l+0x24c>
 8006ec0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006ec4:	182b      	adds	r3, r5, r0
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	f105 0501 	add.w	r5, r5, #1
 8006ecc:	4405      	add	r5, r0
 8006ece:	dc1a      	bgt.n	8006f06 <_strtod_l+0x266>
 8006ed0:	230a      	movs	r3, #10
 8006ed2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ed4:	fb03 2301 	mla	r3, r3, r1, r2
 8006ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eda:	2300      	movs	r3, #0
 8006edc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ede:	4618      	mov	r0, r3
 8006ee0:	1c51      	adds	r1, r2, #1
 8006ee2:	9119      	str	r1, [sp, #100]	@ 0x64
 8006ee4:	7852      	ldrb	r2, [r2, #1]
 8006ee6:	e7c5      	b.n	8006e74 <_strtod_l+0x1d4>
 8006ee8:	4648      	mov	r0, r9
 8006eea:	e7ce      	b.n	8006e8a <_strtod_l+0x1ea>
 8006eec:	2e08      	cmp	r6, #8
 8006eee:	dc05      	bgt.n	8006efc <_strtod_l+0x25c>
 8006ef0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006ef2:	fb0e f606 	mul.w	r6, lr, r6
 8006ef6:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006ef8:	460e      	mov	r6, r1
 8006efa:	e7dc      	b.n	8006eb6 <_strtod_l+0x216>
 8006efc:	2910      	cmp	r1, #16
 8006efe:	bfd8      	it	le
 8006f00:	fb0e f707 	mulle.w	r7, lr, r7
 8006f04:	e7f8      	b.n	8006ef8 <_strtod_l+0x258>
 8006f06:	2b0f      	cmp	r3, #15
 8006f08:	bfdc      	itt	le
 8006f0a:	230a      	movle	r3, #10
 8006f0c:	fb03 2707 	mlale	r7, r3, r7, r2
 8006f10:	e7e3      	b.n	8006eda <_strtod_l+0x23a>
 8006f12:	2300      	movs	r3, #0
 8006f14:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f16:	2301      	movs	r3, #1
 8006f18:	e77a      	b.n	8006e10 <_strtod_l+0x170>
 8006f1a:	f04f 0c00 	mov.w	ip, #0
 8006f1e:	1ca2      	adds	r2, r4, #2
 8006f20:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f22:	78a2      	ldrb	r2, [r4, #2]
 8006f24:	e782      	b.n	8006e2c <_strtod_l+0x18c>
 8006f26:	f04f 0c01 	mov.w	ip, #1
 8006f2a:	e7f8      	b.n	8006f1e <_strtod_l+0x27e>
 8006f2c:	0800b774 	.word	0x0800b774
 8006f30:	7ff00000 	.word	0x7ff00000
 8006f34:	0800b549 	.word	0x0800b549
 8006f38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f3a:	1c51      	adds	r1, r2, #1
 8006f3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f3e:	7852      	ldrb	r2, [r2, #1]
 8006f40:	2a30      	cmp	r2, #48	@ 0x30
 8006f42:	d0f9      	beq.n	8006f38 <_strtod_l+0x298>
 8006f44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006f48:	2908      	cmp	r1, #8
 8006f4a:	f63f af75 	bhi.w	8006e38 <_strtod_l+0x198>
 8006f4e:	f04f 080a 	mov.w	r8, #10
 8006f52:	3a30      	subs	r2, #48	@ 0x30
 8006f54:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f58:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006f5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f5c:	1c56      	adds	r6, r2, #1
 8006f5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006f60:	7852      	ldrb	r2, [r2, #1]
 8006f62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006f66:	f1be 0f09 	cmp.w	lr, #9
 8006f6a:	d939      	bls.n	8006fe0 <_strtod_l+0x340>
 8006f6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006f6e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006f72:	1a76      	subs	r6, r6, r1
 8006f74:	2e08      	cmp	r6, #8
 8006f76:	dc03      	bgt.n	8006f80 <_strtod_l+0x2e0>
 8006f78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f7a:	4588      	cmp	r8, r1
 8006f7c:	bfa8      	it	ge
 8006f7e:	4688      	movge	r8, r1
 8006f80:	f1bc 0f00 	cmp.w	ip, #0
 8006f84:	d001      	beq.n	8006f8a <_strtod_l+0x2ea>
 8006f86:	f1c8 0800 	rsb	r8, r8, #0
 8006f8a:	2d00      	cmp	r5, #0
 8006f8c:	d14e      	bne.n	800702c <_strtod_l+0x38c>
 8006f8e:	9908      	ldr	r1, [sp, #32]
 8006f90:	4308      	orrs	r0, r1
 8006f92:	f47f aebe 	bne.w	8006d12 <_strtod_l+0x72>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f47f aed4 	bne.w	8006d44 <_strtod_l+0xa4>
 8006f9c:	2a69      	cmp	r2, #105	@ 0x69
 8006f9e:	d028      	beq.n	8006ff2 <_strtod_l+0x352>
 8006fa0:	dc25      	bgt.n	8006fee <_strtod_l+0x34e>
 8006fa2:	2a49      	cmp	r2, #73	@ 0x49
 8006fa4:	d025      	beq.n	8006ff2 <_strtod_l+0x352>
 8006fa6:	2a4e      	cmp	r2, #78	@ 0x4e
 8006fa8:	f47f aecc 	bne.w	8006d44 <_strtod_l+0xa4>
 8006fac:	4999      	ldr	r1, [pc, #612]	@ (8007214 <_strtod_l+0x574>)
 8006fae:	a819      	add	r0, sp, #100	@ 0x64
 8006fb0:	f002 fca0 	bl	80098f4 <__match>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f43f aec5 	beq.w	8006d44 <_strtod_l+0xa4>
 8006fba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b28      	cmp	r3, #40	@ 0x28
 8006fc0:	d12e      	bne.n	8007020 <_strtod_l+0x380>
 8006fc2:	4995      	ldr	r1, [pc, #596]	@ (8007218 <_strtod_l+0x578>)
 8006fc4:	aa1c      	add	r2, sp, #112	@ 0x70
 8006fc6:	a819      	add	r0, sp, #100	@ 0x64
 8006fc8:	f002 fca8 	bl	800991c <__hexnan>
 8006fcc:	2805      	cmp	r0, #5
 8006fce:	d127      	bne.n	8007020 <_strtod_l+0x380>
 8006fd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006fd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006fd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006fda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006fde:	e698      	b.n	8006d12 <_strtod_l+0x72>
 8006fe0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fe2:	fb08 2101 	mla	r1, r8, r1, r2
 8006fe6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fec:	e7b5      	b.n	8006f5a <_strtod_l+0x2ba>
 8006fee:	2a6e      	cmp	r2, #110	@ 0x6e
 8006ff0:	e7da      	b.n	8006fa8 <_strtod_l+0x308>
 8006ff2:	498a      	ldr	r1, [pc, #552]	@ (800721c <_strtod_l+0x57c>)
 8006ff4:	a819      	add	r0, sp, #100	@ 0x64
 8006ff6:	f002 fc7d 	bl	80098f4 <__match>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	f43f aea2 	beq.w	8006d44 <_strtod_l+0xa4>
 8007000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007002:	4987      	ldr	r1, [pc, #540]	@ (8007220 <_strtod_l+0x580>)
 8007004:	3b01      	subs	r3, #1
 8007006:	a819      	add	r0, sp, #100	@ 0x64
 8007008:	9319      	str	r3, [sp, #100]	@ 0x64
 800700a:	f002 fc73 	bl	80098f4 <__match>
 800700e:	b910      	cbnz	r0, 8007016 <_strtod_l+0x376>
 8007010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007012:	3301      	adds	r3, #1
 8007014:	9319      	str	r3, [sp, #100]	@ 0x64
 8007016:	f04f 0a00 	mov.w	sl, #0
 800701a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007224 <_strtod_l+0x584>
 800701e:	e678      	b.n	8006d12 <_strtod_l+0x72>
 8007020:	4881      	ldr	r0, [pc, #516]	@ (8007228 <_strtod_l+0x588>)
 8007022:	f001 fb13 	bl	800864c <nan>
 8007026:	4682      	mov	sl, r0
 8007028:	468b      	mov	fp, r1
 800702a:	e672      	b.n	8006d12 <_strtod_l+0x72>
 800702c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800702e:	f1b9 0f00 	cmp.w	r9, #0
 8007032:	bf08      	it	eq
 8007034:	46a9      	moveq	r9, r5
 8007036:	eba8 0303 	sub.w	r3, r8, r3
 800703a:	2d10      	cmp	r5, #16
 800703c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800703e:	462c      	mov	r4, r5
 8007040:	9309      	str	r3, [sp, #36]	@ 0x24
 8007042:	bfa8      	it	ge
 8007044:	2410      	movge	r4, #16
 8007046:	f7f9 f9cd 	bl	80003e4 <__aeabi_ui2d>
 800704a:	2d09      	cmp	r5, #9
 800704c:	4682      	mov	sl, r0
 800704e:	468b      	mov	fp, r1
 8007050:	dc11      	bgt.n	8007076 <_strtod_l+0x3d6>
 8007052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	f43f ae5c 	beq.w	8006d12 <_strtod_l+0x72>
 800705a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800705c:	dd76      	ble.n	800714c <_strtod_l+0x4ac>
 800705e:	2b16      	cmp	r3, #22
 8007060:	dc5d      	bgt.n	800711e <_strtod_l+0x47e>
 8007062:	4972      	ldr	r1, [pc, #456]	@ (800722c <_strtod_l+0x58c>)
 8007064:	4652      	mov	r2, sl
 8007066:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800706a:	465b      	mov	r3, fp
 800706c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007070:	f7f9 fa32 	bl	80004d8 <__aeabi_dmul>
 8007074:	e7d7      	b.n	8007026 <_strtod_l+0x386>
 8007076:	4b6d      	ldr	r3, [pc, #436]	@ (800722c <_strtod_l+0x58c>)
 8007078:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800707c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007080:	f7f9 fa2a 	bl	80004d8 <__aeabi_dmul>
 8007084:	4682      	mov	sl, r0
 8007086:	4638      	mov	r0, r7
 8007088:	468b      	mov	fp, r1
 800708a:	f7f9 f9ab 	bl	80003e4 <__aeabi_ui2d>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4650      	mov	r0, sl
 8007094:	4659      	mov	r1, fp
 8007096:	f7f9 f869 	bl	800016c <__adddf3>
 800709a:	2d0f      	cmp	r5, #15
 800709c:	4682      	mov	sl, r0
 800709e:	468b      	mov	fp, r1
 80070a0:	ddd7      	ble.n	8007052 <_strtod_l+0x3b2>
 80070a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a4:	1b2c      	subs	r4, r5, r4
 80070a6:	441c      	add	r4, r3
 80070a8:	2c00      	cmp	r4, #0
 80070aa:	f340 8093 	ble.w	80071d4 <_strtod_l+0x534>
 80070ae:	f014 030f 	ands.w	r3, r4, #15
 80070b2:	d00a      	beq.n	80070ca <_strtod_l+0x42a>
 80070b4:	495d      	ldr	r1, [pc, #372]	@ (800722c <_strtod_l+0x58c>)
 80070b6:	4652      	mov	r2, sl
 80070b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c0:	465b      	mov	r3, fp
 80070c2:	f7f9 fa09 	bl	80004d8 <__aeabi_dmul>
 80070c6:	4682      	mov	sl, r0
 80070c8:	468b      	mov	fp, r1
 80070ca:	f034 040f 	bics.w	r4, r4, #15
 80070ce:	d073      	beq.n	80071b8 <_strtod_l+0x518>
 80070d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80070d4:	dd49      	ble.n	800716a <_strtod_l+0x4ca>
 80070d6:	2400      	movs	r4, #0
 80070d8:	46a0      	mov	r8, r4
 80070da:	46a1      	mov	r9, r4
 80070dc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070de:	2322      	movs	r3, #34	@ 0x22
 80070e0:	f04f 0a00 	mov.w	sl, #0
 80070e4:	9a05      	ldr	r2, [sp, #20]
 80070e6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007224 <_strtod_l+0x584>
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f43f ae0f 	beq.w	8006d12 <_strtod_l+0x72>
 80070f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070f6:	9805      	ldr	r0, [sp, #20]
 80070f8:	f002 fdb4 	bl	8009c64 <_Bfree>
 80070fc:	4649      	mov	r1, r9
 80070fe:	9805      	ldr	r0, [sp, #20]
 8007100:	f002 fdb0 	bl	8009c64 <_Bfree>
 8007104:	4641      	mov	r1, r8
 8007106:	9805      	ldr	r0, [sp, #20]
 8007108:	f002 fdac 	bl	8009c64 <_Bfree>
 800710c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800710e:	9805      	ldr	r0, [sp, #20]
 8007110:	f002 fda8 	bl	8009c64 <_Bfree>
 8007114:	4621      	mov	r1, r4
 8007116:	9805      	ldr	r0, [sp, #20]
 8007118:	f002 fda4 	bl	8009c64 <_Bfree>
 800711c:	e5f9      	b.n	8006d12 <_strtod_l+0x72>
 800711e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007120:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007124:	4293      	cmp	r3, r2
 8007126:	dbbc      	blt.n	80070a2 <_strtod_l+0x402>
 8007128:	4c40      	ldr	r4, [pc, #256]	@ (800722c <_strtod_l+0x58c>)
 800712a:	f1c5 050f 	rsb	r5, r5, #15
 800712e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007132:	4652      	mov	r2, sl
 8007134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007138:	465b      	mov	r3, fp
 800713a:	f7f9 f9cd 	bl	80004d8 <__aeabi_dmul>
 800713e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007140:	1b5d      	subs	r5, r3, r5
 8007142:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007146:	e9d4 2300 	ldrd	r2, r3, [r4]
 800714a:	e791      	b.n	8007070 <_strtod_l+0x3d0>
 800714c:	3316      	adds	r3, #22
 800714e:	dba8      	blt.n	80070a2 <_strtod_l+0x402>
 8007150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007152:	4650      	mov	r0, sl
 8007154:	eba3 0808 	sub.w	r8, r3, r8
 8007158:	4b34      	ldr	r3, [pc, #208]	@ (800722c <_strtod_l+0x58c>)
 800715a:	4659      	mov	r1, fp
 800715c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007160:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007164:	f7f9 fae2 	bl	800072c <__aeabi_ddiv>
 8007168:	e75d      	b.n	8007026 <_strtod_l+0x386>
 800716a:	2300      	movs	r3, #0
 800716c:	4650      	mov	r0, sl
 800716e:	4659      	mov	r1, fp
 8007170:	461e      	mov	r6, r3
 8007172:	4f2f      	ldr	r7, [pc, #188]	@ (8007230 <_strtod_l+0x590>)
 8007174:	1124      	asrs	r4, r4, #4
 8007176:	2c01      	cmp	r4, #1
 8007178:	dc21      	bgt.n	80071be <_strtod_l+0x51e>
 800717a:	b10b      	cbz	r3, 8007180 <_strtod_l+0x4e0>
 800717c:	4682      	mov	sl, r0
 800717e:	468b      	mov	fp, r1
 8007180:	492b      	ldr	r1, [pc, #172]	@ (8007230 <_strtod_l+0x590>)
 8007182:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007186:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800718a:	4652      	mov	r2, sl
 800718c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007190:	465b      	mov	r3, fp
 8007192:	f7f9 f9a1 	bl	80004d8 <__aeabi_dmul>
 8007196:	4b23      	ldr	r3, [pc, #140]	@ (8007224 <_strtod_l+0x584>)
 8007198:	460a      	mov	r2, r1
 800719a:	400b      	ands	r3, r1
 800719c:	4925      	ldr	r1, [pc, #148]	@ (8007234 <_strtod_l+0x594>)
 800719e:	4682      	mov	sl, r0
 80071a0:	428b      	cmp	r3, r1
 80071a2:	d898      	bhi.n	80070d6 <_strtod_l+0x436>
 80071a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80071a8:	428b      	cmp	r3, r1
 80071aa:	bf86      	itte	hi
 80071ac:	f04f 3aff 	movhi.w	sl, #4294967295
 80071b0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007238 <_strtod_l+0x598>
 80071b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80071b8:	2300      	movs	r3, #0
 80071ba:	9308      	str	r3, [sp, #32]
 80071bc:	e076      	b.n	80072ac <_strtod_l+0x60c>
 80071be:	07e2      	lsls	r2, r4, #31
 80071c0:	d504      	bpl.n	80071cc <_strtod_l+0x52c>
 80071c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071c6:	f7f9 f987 	bl	80004d8 <__aeabi_dmul>
 80071ca:	2301      	movs	r3, #1
 80071cc:	3601      	adds	r6, #1
 80071ce:	1064      	asrs	r4, r4, #1
 80071d0:	3708      	adds	r7, #8
 80071d2:	e7d0      	b.n	8007176 <_strtod_l+0x4d6>
 80071d4:	d0f0      	beq.n	80071b8 <_strtod_l+0x518>
 80071d6:	4264      	negs	r4, r4
 80071d8:	f014 020f 	ands.w	r2, r4, #15
 80071dc:	d00a      	beq.n	80071f4 <_strtod_l+0x554>
 80071de:	4b13      	ldr	r3, [pc, #76]	@ (800722c <_strtod_l+0x58c>)
 80071e0:	4650      	mov	r0, sl
 80071e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071e6:	4659      	mov	r1, fp
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f9 fa9e 	bl	800072c <__aeabi_ddiv>
 80071f0:	4682      	mov	sl, r0
 80071f2:	468b      	mov	fp, r1
 80071f4:	1124      	asrs	r4, r4, #4
 80071f6:	d0df      	beq.n	80071b8 <_strtod_l+0x518>
 80071f8:	2c1f      	cmp	r4, #31
 80071fa:	dd1f      	ble.n	800723c <_strtod_l+0x59c>
 80071fc:	2400      	movs	r4, #0
 80071fe:	46a0      	mov	r8, r4
 8007200:	46a1      	mov	r9, r4
 8007202:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007204:	2322      	movs	r3, #34	@ 0x22
 8007206:	9a05      	ldr	r2, [sp, #20]
 8007208:	f04f 0a00 	mov.w	sl, #0
 800720c:	f04f 0b00 	mov.w	fp, #0
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	e76b      	b.n	80070ec <_strtod_l+0x44c>
 8007214:	0800b558 	.word	0x0800b558
 8007218:	0800b760 	.word	0x0800b760
 800721c:	0800b550 	.word	0x0800b550
 8007220:	0800b620 	.word	0x0800b620
 8007224:	7ff00000 	.word	0x7ff00000
 8007228:	0800b61c 	.word	0x0800b61c
 800722c:	0800b7e8 	.word	0x0800b7e8
 8007230:	0800b7c0 	.word	0x0800b7c0
 8007234:	7ca00000 	.word	0x7ca00000
 8007238:	7fefffff 	.word	0x7fefffff
 800723c:	f014 0310 	ands.w	r3, r4, #16
 8007240:	bf18      	it	ne
 8007242:	236a      	movne	r3, #106	@ 0x6a
 8007244:	4650      	mov	r0, sl
 8007246:	9308      	str	r3, [sp, #32]
 8007248:	4659      	mov	r1, fp
 800724a:	2300      	movs	r3, #0
 800724c:	4e77      	ldr	r6, [pc, #476]	@ (800742c <_strtod_l+0x78c>)
 800724e:	07e7      	lsls	r7, r4, #31
 8007250:	d504      	bpl.n	800725c <_strtod_l+0x5bc>
 8007252:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007256:	f7f9 f93f 	bl	80004d8 <__aeabi_dmul>
 800725a:	2301      	movs	r3, #1
 800725c:	1064      	asrs	r4, r4, #1
 800725e:	f106 0608 	add.w	r6, r6, #8
 8007262:	d1f4      	bne.n	800724e <_strtod_l+0x5ae>
 8007264:	b10b      	cbz	r3, 800726a <_strtod_l+0x5ca>
 8007266:	4682      	mov	sl, r0
 8007268:	468b      	mov	fp, r1
 800726a:	9b08      	ldr	r3, [sp, #32]
 800726c:	b1b3      	cbz	r3, 800729c <_strtod_l+0x5fc>
 800726e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007272:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007276:	2b00      	cmp	r3, #0
 8007278:	4659      	mov	r1, fp
 800727a:	dd0f      	ble.n	800729c <_strtod_l+0x5fc>
 800727c:	2b1f      	cmp	r3, #31
 800727e:	dd58      	ble.n	8007332 <_strtod_l+0x692>
 8007280:	2b34      	cmp	r3, #52	@ 0x34
 8007282:	bfd8      	it	le
 8007284:	f04f 33ff 	movle.w	r3, #4294967295
 8007288:	f04f 0a00 	mov.w	sl, #0
 800728c:	bfcf      	iteee	gt
 800728e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007292:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007296:	4093      	lslle	r3, r2
 8007298:	ea03 0b01 	andle.w	fp, r3, r1
 800729c:	2200      	movs	r2, #0
 800729e:	2300      	movs	r3, #0
 80072a0:	4650      	mov	r0, sl
 80072a2:	4659      	mov	r1, fp
 80072a4:	f7f9 fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1a7      	bne.n	80071fc <_strtod_l+0x55c>
 80072ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072ae:	464a      	mov	r2, r9
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80072b4:	462b      	mov	r3, r5
 80072b6:	9805      	ldr	r0, [sp, #20]
 80072b8:	f002 fd3c 	bl	8009d34 <__s2b>
 80072bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80072be:	2800      	cmp	r0, #0
 80072c0:	f43f af09 	beq.w	80070d6 <_strtod_l+0x436>
 80072c4:	2400      	movs	r4, #0
 80072c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ca:	2a00      	cmp	r2, #0
 80072cc:	eba3 0308 	sub.w	r3, r3, r8
 80072d0:	bfa8      	it	ge
 80072d2:	2300      	movge	r3, #0
 80072d4:	46a0      	mov	r8, r4
 80072d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80072d8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80072dc:	9316      	str	r3, [sp, #88]	@ 0x58
 80072de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072e0:	9805      	ldr	r0, [sp, #20]
 80072e2:	6859      	ldr	r1, [r3, #4]
 80072e4:	f002 fc7e 	bl	8009be4 <_Balloc>
 80072e8:	4681      	mov	r9, r0
 80072ea:	2800      	cmp	r0, #0
 80072ec:	f43f aef7 	beq.w	80070de <_strtod_l+0x43e>
 80072f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072f2:	300c      	adds	r0, #12
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	f103 010c 	add.w	r1, r3, #12
 80072fa:	3202      	adds	r2, #2
 80072fc:	0092      	lsls	r2, r2, #2
 80072fe:	f001 f996 	bl	800862e <memcpy>
 8007302:	ab1c      	add	r3, sp, #112	@ 0x70
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4652      	mov	r2, sl
 800730c:	465b      	mov	r3, fp
 800730e:	9805      	ldr	r0, [sp, #20]
 8007310:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007314:	f003 f83a 	bl	800a38c <__d2b>
 8007318:	901a      	str	r0, [sp, #104]	@ 0x68
 800731a:	2800      	cmp	r0, #0
 800731c:	f43f aedf 	beq.w	80070de <_strtod_l+0x43e>
 8007320:	2101      	movs	r1, #1
 8007322:	9805      	ldr	r0, [sp, #20]
 8007324:	f002 fd9c 	bl	8009e60 <__i2b>
 8007328:	4680      	mov	r8, r0
 800732a:	b948      	cbnz	r0, 8007340 <_strtod_l+0x6a0>
 800732c:	f04f 0800 	mov.w	r8, #0
 8007330:	e6d5      	b.n	80070de <_strtod_l+0x43e>
 8007332:	f04f 32ff 	mov.w	r2, #4294967295
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	ea03 0a0a 	and.w	sl, r3, sl
 800733e:	e7ad      	b.n	800729c <_strtod_l+0x5fc>
 8007340:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007342:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007344:	2d00      	cmp	r5, #0
 8007346:	bfab      	itete	ge
 8007348:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800734a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800734c:	18ef      	addge	r7, r5, r3
 800734e:	1b5e      	sublt	r6, r3, r5
 8007350:	9b08      	ldr	r3, [sp, #32]
 8007352:	bfa8      	it	ge
 8007354:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007356:	eba5 0503 	sub.w	r5, r5, r3
 800735a:	4415      	add	r5, r2
 800735c:	4b34      	ldr	r3, [pc, #208]	@ (8007430 <_strtod_l+0x790>)
 800735e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007362:	bfb8      	it	lt
 8007364:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007366:	429d      	cmp	r5, r3
 8007368:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800736c:	da50      	bge.n	8007410 <_strtod_l+0x770>
 800736e:	1b5b      	subs	r3, r3, r5
 8007370:	2b1f      	cmp	r3, #31
 8007372:	f04f 0101 	mov.w	r1, #1
 8007376:	eba2 0203 	sub.w	r2, r2, r3
 800737a:	dc3d      	bgt.n	80073f8 <_strtod_l+0x758>
 800737c:	fa01 f303 	lsl.w	r3, r1, r3
 8007380:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007382:	2300      	movs	r3, #0
 8007384:	9310      	str	r3, [sp, #64]	@ 0x40
 8007386:	18bd      	adds	r5, r7, r2
 8007388:	9b08      	ldr	r3, [sp, #32]
 800738a:	42af      	cmp	r7, r5
 800738c:	4416      	add	r6, r2
 800738e:	441e      	add	r6, r3
 8007390:	463b      	mov	r3, r7
 8007392:	bfa8      	it	ge
 8007394:	462b      	movge	r3, r5
 8007396:	42b3      	cmp	r3, r6
 8007398:	bfa8      	it	ge
 800739a:	4633      	movge	r3, r6
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfc2      	ittt	gt
 80073a0:	1aed      	subgt	r5, r5, r3
 80073a2:	1af6      	subgt	r6, r6, r3
 80073a4:	1aff      	subgt	r7, r7, r3
 80073a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	dd16      	ble.n	80073da <_strtod_l+0x73a>
 80073ac:	4641      	mov	r1, r8
 80073ae:	461a      	mov	r2, r3
 80073b0:	9805      	ldr	r0, [sp, #20]
 80073b2:	f002 fe0d 	bl	8009fd0 <__pow5mult>
 80073b6:	4680      	mov	r8, r0
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d0b7      	beq.n	800732c <_strtod_l+0x68c>
 80073bc:	4601      	mov	r1, r0
 80073be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073c0:	9805      	ldr	r0, [sp, #20]
 80073c2:	f002 fd63 	bl	8009e8c <__multiply>
 80073c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80073c8:	2800      	cmp	r0, #0
 80073ca:	f43f ae88 	beq.w	80070de <_strtod_l+0x43e>
 80073ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073d0:	9805      	ldr	r0, [sp, #20]
 80073d2:	f002 fc47 	bl	8009c64 <_Bfree>
 80073d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80073da:	2d00      	cmp	r5, #0
 80073dc:	dc1d      	bgt.n	800741a <_strtod_l+0x77a>
 80073de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dd27      	ble.n	8007434 <_strtod_l+0x794>
 80073e4:	4649      	mov	r1, r9
 80073e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80073e8:	9805      	ldr	r0, [sp, #20]
 80073ea:	f002 fdf1 	bl	8009fd0 <__pow5mult>
 80073ee:	4681      	mov	r9, r0
 80073f0:	bb00      	cbnz	r0, 8007434 <_strtod_l+0x794>
 80073f2:	f04f 0900 	mov.w	r9, #0
 80073f6:	e672      	b.n	80070de <_strtod_l+0x43e>
 80073f8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80073fc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007400:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007404:	35e2      	adds	r5, #226	@ 0xe2
 8007406:	fa01 f305 	lsl.w	r3, r1, r5
 800740a:	9310      	str	r3, [sp, #64]	@ 0x40
 800740c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800740e:	e7ba      	b.n	8007386 <_strtod_l+0x6e6>
 8007410:	2300      	movs	r3, #0
 8007412:	9310      	str	r3, [sp, #64]	@ 0x40
 8007414:	2301      	movs	r3, #1
 8007416:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007418:	e7b5      	b.n	8007386 <_strtod_l+0x6e6>
 800741a:	462a      	mov	r2, r5
 800741c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800741e:	9805      	ldr	r0, [sp, #20]
 8007420:	f002 fe30 	bl	800a084 <__lshift>
 8007424:	901a      	str	r0, [sp, #104]	@ 0x68
 8007426:	2800      	cmp	r0, #0
 8007428:	d1d9      	bne.n	80073de <_strtod_l+0x73e>
 800742a:	e658      	b.n	80070de <_strtod_l+0x43e>
 800742c:	0800b788 	.word	0x0800b788
 8007430:	fffffc02 	.word	0xfffffc02
 8007434:	2e00      	cmp	r6, #0
 8007436:	dd07      	ble.n	8007448 <_strtod_l+0x7a8>
 8007438:	4649      	mov	r1, r9
 800743a:	4632      	mov	r2, r6
 800743c:	9805      	ldr	r0, [sp, #20]
 800743e:	f002 fe21 	bl	800a084 <__lshift>
 8007442:	4681      	mov	r9, r0
 8007444:	2800      	cmp	r0, #0
 8007446:	d0d4      	beq.n	80073f2 <_strtod_l+0x752>
 8007448:	2f00      	cmp	r7, #0
 800744a:	dd08      	ble.n	800745e <_strtod_l+0x7be>
 800744c:	4641      	mov	r1, r8
 800744e:	463a      	mov	r2, r7
 8007450:	9805      	ldr	r0, [sp, #20]
 8007452:	f002 fe17 	bl	800a084 <__lshift>
 8007456:	4680      	mov	r8, r0
 8007458:	2800      	cmp	r0, #0
 800745a:	f43f ae40 	beq.w	80070de <_strtod_l+0x43e>
 800745e:	464a      	mov	r2, r9
 8007460:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007462:	9805      	ldr	r0, [sp, #20]
 8007464:	f002 fe96 	bl	800a194 <__mdiff>
 8007468:	4604      	mov	r4, r0
 800746a:	2800      	cmp	r0, #0
 800746c:	f43f ae37 	beq.w	80070de <_strtod_l+0x43e>
 8007470:	68c3      	ldr	r3, [r0, #12]
 8007472:	4641      	mov	r1, r8
 8007474:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007476:	2300      	movs	r3, #0
 8007478:	60c3      	str	r3, [r0, #12]
 800747a:	f002 fe6f 	bl	800a15c <__mcmp>
 800747e:	2800      	cmp	r0, #0
 8007480:	da3d      	bge.n	80074fe <_strtod_l+0x85e>
 8007482:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007484:	ea53 030a 	orrs.w	r3, r3, sl
 8007488:	d163      	bne.n	8007552 <_strtod_l+0x8b2>
 800748a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800748e:	2b00      	cmp	r3, #0
 8007490:	d15f      	bne.n	8007552 <_strtod_l+0x8b2>
 8007492:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007496:	0d1b      	lsrs	r3, r3, #20
 8007498:	051b      	lsls	r3, r3, #20
 800749a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800749e:	d958      	bls.n	8007552 <_strtod_l+0x8b2>
 80074a0:	6963      	ldr	r3, [r4, #20]
 80074a2:	b913      	cbnz	r3, 80074aa <_strtod_l+0x80a>
 80074a4:	6923      	ldr	r3, [r4, #16]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	dd53      	ble.n	8007552 <_strtod_l+0x8b2>
 80074aa:	4621      	mov	r1, r4
 80074ac:	2201      	movs	r2, #1
 80074ae:	9805      	ldr	r0, [sp, #20]
 80074b0:	f002 fde8 	bl	800a084 <__lshift>
 80074b4:	4641      	mov	r1, r8
 80074b6:	4604      	mov	r4, r0
 80074b8:	f002 fe50 	bl	800a15c <__mcmp>
 80074bc:	2800      	cmp	r0, #0
 80074be:	dd48      	ble.n	8007552 <_strtod_l+0x8b2>
 80074c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074c4:	9a08      	ldr	r2, [sp, #32]
 80074c6:	0d1b      	lsrs	r3, r3, #20
 80074c8:	051b      	lsls	r3, r3, #20
 80074ca:	2a00      	cmp	r2, #0
 80074cc:	d062      	beq.n	8007594 <_strtod_l+0x8f4>
 80074ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074d2:	d85f      	bhi.n	8007594 <_strtod_l+0x8f4>
 80074d4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80074d8:	f67f ae94 	bls.w	8007204 <_strtod_l+0x564>
 80074dc:	4650      	mov	r0, sl
 80074de:	4659      	mov	r1, fp
 80074e0:	4ba3      	ldr	r3, [pc, #652]	@ (8007770 <_strtod_l+0xad0>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	f7f8 fff8 	bl	80004d8 <__aeabi_dmul>
 80074e8:	4ba2      	ldr	r3, [pc, #648]	@ (8007774 <_strtod_l+0xad4>)
 80074ea:	4682      	mov	sl, r0
 80074ec:	400b      	ands	r3, r1
 80074ee:	468b      	mov	fp, r1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f47f adff 	bne.w	80070f4 <_strtod_l+0x454>
 80074f6:	2322      	movs	r3, #34	@ 0x22
 80074f8:	9a05      	ldr	r2, [sp, #20]
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	e5fa      	b.n	80070f4 <_strtod_l+0x454>
 80074fe:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007502:	d165      	bne.n	80075d0 <_strtod_l+0x930>
 8007504:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007506:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800750a:	b35a      	cbz	r2, 8007564 <_strtod_l+0x8c4>
 800750c:	4a9a      	ldr	r2, [pc, #616]	@ (8007778 <_strtod_l+0xad8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d12b      	bne.n	800756a <_strtod_l+0x8ca>
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	4651      	mov	r1, sl
 8007516:	b303      	cbz	r3, 800755a <_strtod_l+0x8ba>
 8007518:	465a      	mov	r2, fp
 800751a:	4b96      	ldr	r3, [pc, #600]	@ (8007774 <_strtod_l+0xad4>)
 800751c:	4013      	ands	r3, r2
 800751e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007522:	f04f 32ff 	mov.w	r2, #4294967295
 8007526:	d81b      	bhi.n	8007560 <_strtod_l+0x8c0>
 8007528:	0d1b      	lsrs	r3, r3, #20
 800752a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	4299      	cmp	r1, r3
 8007534:	d119      	bne.n	800756a <_strtod_l+0x8ca>
 8007536:	4b91      	ldr	r3, [pc, #580]	@ (800777c <_strtod_l+0xadc>)
 8007538:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800753a:	429a      	cmp	r2, r3
 800753c:	d102      	bne.n	8007544 <_strtod_l+0x8a4>
 800753e:	3101      	adds	r1, #1
 8007540:	f43f adcd 	beq.w	80070de <_strtod_l+0x43e>
 8007544:	f04f 0a00 	mov.w	sl, #0
 8007548:	4b8a      	ldr	r3, [pc, #552]	@ (8007774 <_strtod_l+0xad4>)
 800754a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800754c:	401a      	ands	r2, r3
 800754e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007552:	9b08      	ldr	r3, [sp, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1c1      	bne.n	80074dc <_strtod_l+0x83c>
 8007558:	e5cc      	b.n	80070f4 <_strtod_l+0x454>
 800755a:	f04f 33ff 	mov.w	r3, #4294967295
 800755e:	e7e8      	b.n	8007532 <_strtod_l+0x892>
 8007560:	4613      	mov	r3, r2
 8007562:	e7e6      	b.n	8007532 <_strtod_l+0x892>
 8007564:	ea53 030a 	orrs.w	r3, r3, sl
 8007568:	d0aa      	beq.n	80074c0 <_strtod_l+0x820>
 800756a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800756c:	b1db      	cbz	r3, 80075a6 <_strtod_l+0x906>
 800756e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007570:	4213      	tst	r3, r2
 8007572:	d0ee      	beq.n	8007552 <_strtod_l+0x8b2>
 8007574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007576:	4650      	mov	r0, sl
 8007578:	4659      	mov	r1, fp
 800757a:	9a08      	ldr	r2, [sp, #32]
 800757c:	b1bb      	cbz	r3, 80075ae <_strtod_l+0x90e>
 800757e:	f7ff fb6b 	bl	8006c58 <sulp>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800758a:	f7f8 fdef 	bl	800016c <__adddf3>
 800758e:	4682      	mov	sl, r0
 8007590:	468b      	mov	fp, r1
 8007592:	e7de      	b.n	8007552 <_strtod_l+0x8b2>
 8007594:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007598:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800759c:	f04f 3aff 	mov.w	sl, #4294967295
 80075a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80075a4:	e7d5      	b.n	8007552 <_strtod_l+0x8b2>
 80075a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075a8:	ea13 0f0a 	tst.w	r3, sl
 80075ac:	e7e1      	b.n	8007572 <_strtod_l+0x8d2>
 80075ae:	f7ff fb53 	bl	8006c58 <sulp>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ba:	f7f8 fdd5 	bl	8000168 <__aeabi_dsub>
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	4682      	mov	sl, r0
 80075c4:	468b      	mov	fp, r1
 80075c6:	f7f9 f9ef 	bl	80009a8 <__aeabi_dcmpeq>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d0c1      	beq.n	8007552 <_strtod_l+0x8b2>
 80075ce:	e619      	b.n	8007204 <_strtod_l+0x564>
 80075d0:	4641      	mov	r1, r8
 80075d2:	4620      	mov	r0, r4
 80075d4:	f002 ff32 	bl	800a43c <__ratio>
 80075d8:	2200      	movs	r2, #0
 80075da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80075de:	4606      	mov	r6, r0
 80075e0:	460f      	mov	r7, r1
 80075e2:	f7f9 f9f5 	bl	80009d0 <__aeabi_dcmple>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d06d      	beq.n	80076c6 <_strtod_l+0xa26>
 80075ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d178      	bne.n	80076e2 <_strtod_l+0xa42>
 80075f0:	f1ba 0f00 	cmp.w	sl, #0
 80075f4:	d156      	bne.n	80076a4 <_strtod_l+0xa04>
 80075f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d158      	bne.n	80076b2 <_strtod_l+0xa12>
 8007600:	2200      	movs	r2, #0
 8007602:	4630      	mov	r0, r6
 8007604:	4639      	mov	r1, r7
 8007606:	4b5e      	ldr	r3, [pc, #376]	@ (8007780 <_strtod_l+0xae0>)
 8007608:	f7f9 f9d8 	bl	80009bc <__aeabi_dcmplt>
 800760c:	2800      	cmp	r0, #0
 800760e:	d157      	bne.n	80076c0 <_strtod_l+0xa20>
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	2200      	movs	r2, #0
 8007616:	4b5b      	ldr	r3, [pc, #364]	@ (8007784 <_strtod_l+0xae4>)
 8007618:	f7f8 ff5e 	bl	80004d8 <__aeabi_dmul>
 800761c:	4606      	mov	r6, r0
 800761e:	460f      	mov	r7, r1
 8007620:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007624:	9606      	str	r6, [sp, #24]
 8007626:	9307      	str	r3, [sp, #28]
 8007628:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800762c:	4d51      	ldr	r5, [pc, #324]	@ (8007774 <_strtod_l+0xad4>)
 800762e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007634:	401d      	ands	r5, r3
 8007636:	4b54      	ldr	r3, [pc, #336]	@ (8007788 <_strtod_l+0xae8>)
 8007638:	429d      	cmp	r5, r3
 800763a:	f040 80ab 	bne.w	8007794 <_strtod_l+0xaf4>
 800763e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007640:	4650      	mov	r0, sl
 8007642:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007646:	4659      	mov	r1, fp
 8007648:	f002 fe38 	bl	800a2bc <__ulp>
 800764c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007650:	f7f8 ff42 	bl	80004d8 <__aeabi_dmul>
 8007654:	4652      	mov	r2, sl
 8007656:	465b      	mov	r3, fp
 8007658:	f7f8 fd88 	bl	800016c <__adddf3>
 800765c:	460b      	mov	r3, r1
 800765e:	4945      	ldr	r1, [pc, #276]	@ (8007774 <_strtod_l+0xad4>)
 8007660:	4a4a      	ldr	r2, [pc, #296]	@ (800778c <_strtod_l+0xaec>)
 8007662:	4019      	ands	r1, r3
 8007664:	4291      	cmp	r1, r2
 8007666:	4682      	mov	sl, r0
 8007668:	d942      	bls.n	80076f0 <_strtod_l+0xa50>
 800766a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800766c:	4b43      	ldr	r3, [pc, #268]	@ (800777c <_strtod_l+0xadc>)
 800766e:	429a      	cmp	r2, r3
 8007670:	d103      	bne.n	800767a <_strtod_l+0x9da>
 8007672:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007674:	3301      	adds	r3, #1
 8007676:	f43f ad32 	beq.w	80070de <_strtod_l+0x43e>
 800767a:	f04f 3aff 	mov.w	sl, #4294967295
 800767e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800777c <_strtod_l+0xadc>
 8007682:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007684:	9805      	ldr	r0, [sp, #20]
 8007686:	f002 faed 	bl	8009c64 <_Bfree>
 800768a:	4649      	mov	r1, r9
 800768c:	9805      	ldr	r0, [sp, #20]
 800768e:	f002 fae9 	bl	8009c64 <_Bfree>
 8007692:	4641      	mov	r1, r8
 8007694:	9805      	ldr	r0, [sp, #20]
 8007696:	f002 fae5 	bl	8009c64 <_Bfree>
 800769a:	4621      	mov	r1, r4
 800769c:	9805      	ldr	r0, [sp, #20]
 800769e:	f002 fae1 	bl	8009c64 <_Bfree>
 80076a2:	e61c      	b.n	80072de <_strtod_l+0x63e>
 80076a4:	f1ba 0f01 	cmp.w	sl, #1
 80076a8:	d103      	bne.n	80076b2 <_strtod_l+0xa12>
 80076aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f43f ada9 	beq.w	8007204 <_strtod_l+0x564>
 80076b2:	2200      	movs	r2, #0
 80076b4:	4b36      	ldr	r3, [pc, #216]	@ (8007790 <_strtod_l+0xaf0>)
 80076b6:	2600      	movs	r6, #0
 80076b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076bc:	4f30      	ldr	r7, [pc, #192]	@ (8007780 <_strtod_l+0xae0>)
 80076be:	e7b3      	b.n	8007628 <_strtod_l+0x988>
 80076c0:	2600      	movs	r6, #0
 80076c2:	4f30      	ldr	r7, [pc, #192]	@ (8007784 <_strtod_l+0xae4>)
 80076c4:	e7ac      	b.n	8007620 <_strtod_l+0x980>
 80076c6:	4630      	mov	r0, r6
 80076c8:	4639      	mov	r1, r7
 80076ca:	4b2e      	ldr	r3, [pc, #184]	@ (8007784 <_strtod_l+0xae4>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	f7f8 ff03 	bl	80004d8 <__aeabi_dmul>
 80076d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076d4:	4606      	mov	r6, r0
 80076d6:	460f      	mov	r7, r1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d0a1      	beq.n	8007620 <_strtod_l+0x980>
 80076dc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80076e0:	e7a2      	b.n	8007628 <_strtod_l+0x988>
 80076e2:	2200      	movs	r2, #0
 80076e4:	4b26      	ldr	r3, [pc, #152]	@ (8007780 <_strtod_l+0xae0>)
 80076e6:	4616      	mov	r6, r2
 80076e8:	461f      	mov	r7, r3
 80076ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076ee:	e79b      	b.n	8007628 <_strtod_l+0x988>
 80076f0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80076f4:	9b08      	ldr	r3, [sp, #32]
 80076f6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1c1      	bne.n	8007682 <_strtod_l+0x9e2>
 80076fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007702:	0d1b      	lsrs	r3, r3, #20
 8007704:	051b      	lsls	r3, r3, #20
 8007706:	429d      	cmp	r5, r3
 8007708:	d1bb      	bne.n	8007682 <_strtod_l+0x9e2>
 800770a:	4630      	mov	r0, r6
 800770c:	4639      	mov	r1, r7
 800770e:	f7f9 fc39 	bl	8000f84 <__aeabi_d2lz>
 8007712:	f7f8 feb3 	bl	800047c <__aeabi_l2d>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f8 fd23 	bl	8000168 <__aeabi_dsub>
 8007722:	460b      	mov	r3, r1
 8007724:	4602      	mov	r2, r0
 8007726:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800772a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800772e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007730:	ea46 060a 	orr.w	r6, r6, sl
 8007734:	431e      	orrs	r6, r3
 8007736:	d06a      	beq.n	800780e <_strtod_l+0xb6e>
 8007738:	a309      	add	r3, pc, #36	@ (adr r3, 8007760 <_strtod_l+0xac0>)
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f7f9 f93d 	bl	80009bc <__aeabi_dcmplt>
 8007742:	2800      	cmp	r0, #0
 8007744:	f47f acd6 	bne.w	80070f4 <_strtod_l+0x454>
 8007748:	a307      	add	r3, pc, #28	@ (adr r3, 8007768 <_strtod_l+0xac8>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007752:	f7f9 f951 	bl	80009f8 <__aeabi_dcmpgt>
 8007756:	2800      	cmp	r0, #0
 8007758:	d093      	beq.n	8007682 <_strtod_l+0x9e2>
 800775a:	e4cb      	b.n	80070f4 <_strtod_l+0x454>
 800775c:	f3af 8000 	nop.w
 8007760:	94a03595 	.word	0x94a03595
 8007764:	3fdfffff 	.word	0x3fdfffff
 8007768:	35afe535 	.word	0x35afe535
 800776c:	3fe00000 	.word	0x3fe00000
 8007770:	39500000 	.word	0x39500000
 8007774:	7ff00000 	.word	0x7ff00000
 8007778:	000fffff 	.word	0x000fffff
 800777c:	7fefffff 	.word	0x7fefffff
 8007780:	3ff00000 	.word	0x3ff00000
 8007784:	3fe00000 	.word	0x3fe00000
 8007788:	7fe00000 	.word	0x7fe00000
 800778c:	7c9fffff 	.word	0x7c9fffff
 8007790:	bff00000 	.word	0xbff00000
 8007794:	9b08      	ldr	r3, [sp, #32]
 8007796:	b323      	cbz	r3, 80077e2 <_strtod_l+0xb42>
 8007798:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800779c:	d821      	bhi.n	80077e2 <_strtod_l+0xb42>
 800779e:	a328      	add	r3, pc, #160	@ (adr r3, 8007840 <_strtod_l+0xba0>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	4630      	mov	r0, r6
 80077a6:	4639      	mov	r1, r7
 80077a8:	f7f9 f912 	bl	80009d0 <__aeabi_dcmple>
 80077ac:	b1a0      	cbz	r0, 80077d8 <_strtod_l+0xb38>
 80077ae:	4639      	mov	r1, r7
 80077b0:	4630      	mov	r0, r6
 80077b2:	f7f9 f969 	bl	8000a88 <__aeabi_d2uiz>
 80077b6:	2801      	cmp	r0, #1
 80077b8:	bf38      	it	cc
 80077ba:	2001      	movcc	r0, #1
 80077bc:	f7f8 fe12 	bl	80003e4 <__aeabi_ui2d>
 80077c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077c2:	4606      	mov	r6, r0
 80077c4:	460f      	mov	r7, r1
 80077c6:	b9fb      	cbnz	r3, 8007808 <_strtod_l+0xb68>
 80077c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80077cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80077ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80077d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80077d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80077d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80077da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80077de:	1b5b      	subs	r3, r3, r5
 80077e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80077e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80077ea:	f002 fd67 	bl	800a2bc <__ulp>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4650      	mov	r0, sl
 80077f4:	4659      	mov	r1, fp
 80077f6:	f7f8 fe6f 	bl	80004d8 <__aeabi_dmul>
 80077fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80077fe:	f7f8 fcb5 	bl	800016c <__adddf3>
 8007802:	4682      	mov	sl, r0
 8007804:	468b      	mov	fp, r1
 8007806:	e775      	b.n	80076f4 <_strtod_l+0xa54>
 8007808:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800780c:	e7e0      	b.n	80077d0 <_strtod_l+0xb30>
 800780e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007848 <_strtod_l+0xba8>)
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f7f9 f8d2 	bl	80009bc <__aeabi_dcmplt>
 8007818:	e79d      	b.n	8007756 <_strtod_l+0xab6>
 800781a:	2300      	movs	r3, #0
 800781c:	930e      	str	r3, [sp, #56]	@ 0x38
 800781e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007820:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	f7ff ba79 	b.w	8006d1a <_strtod_l+0x7a>
 8007828:	2a65      	cmp	r2, #101	@ 0x65
 800782a:	f43f ab72 	beq.w	8006f12 <_strtod_l+0x272>
 800782e:	2a45      	cmp	r2, #69	@ 0x45
 8007830:	f43f ab6f 	beq.w	8006f12 <_strtod_l+0x272>
 8007834:	2301      	movs	r3, #1
 8007836:	f7ff bbaa 	b.w	8006f8e <_strtod_l+0x2ee>
 800783a:	bf00      	nop
 800783c:	f3af 8000 	nop.w
 8007840:	ffc00000 	.word	0xffc00000
 8007844:	41dfffff 	.word	0x41dfffff
 8007848:	94a03595 	.word	0x94a03595
 800784c:	3fcfffff 	.word	0x3fcfffff

08007850 <strtod>:
 8007850:	460a      	mov	r2, r1
 8007852:	4601      	mov	r1, r0
 8007854:	4802      	ldr	r0, [pc, #8]	@ (8007860 <strtod+0x10>)
 8007856:	4b03      	ldr	r3, [pc, #12]	@ (8007864 <strtod+0x14>)
 8007858:	6800      	ldr	r0, [r0, #0]
 800785a:	f7ff ba21 	b.w	8006ca0 <_strtod_l>
 800785e:	bf00      	nop
 8007860:	200001a4 	.word	0x200001a4
 8007864:	20000038 	.word	0x20000038

08007868 <__cvt>:
 8007868:	2b00      	cmp	r3, #0
 800786a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786e:	461d      	mov	r5, r3
 8007870:	bfbb      	ittet	lt
 8007872:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007876:	461d      	movlt	r5, r3
 8007878:	2300      	movge	r3, #0
 800787a:	232d      	movlt	r3, #45	@ 0x2d
 800787c:	b088      	sub	sp, #32
 800787e:	4614      	mov	r4, r2
 8007880:	bfb8      	it	lt
 8007882:	4614      	movlt	r4, r2
 8007884:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007886:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007888:	7013      	strb	r3, [r2, #0]
 800788a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800788c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007890:	f023 0820 	bic.w	r8, r3, #32
 8007894:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007898:	d005      	beq.n	80078a6 <__cvt+0x3e>
 800789a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800789e:	d100      	bne.n	80078a2 <__cvt+0x3a>
 80078a0:	3601      	adds	r6, #1
 80078a2:	2302      	movs	r3, #2
 80078a4:	e000      	b.n	80078a8 <__cvt+0x40>
 80078a6:	2303      	movs	r3, #3
 80078a8:	aa07      	add	r2, sp, #28
 80078aa:	9204      	str	r2, [sp, #16]
 80078ac:	aa06      	add	r2, sp, #24
 80078ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80078b2:	e9cd 3600 	strd	r3, r6, [sp]
 80078b6:	4622      	mov	r2, r4
 80078b8:	462b      	mov	r3, r5
 80078ba:	f000 ff75 	bl	80087a8 <_dtoa_r>
 80078be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80078c2:	4607      	mov	r7, r0
 80078c4:	d119      	bne.n	80078fa <__cvt+0x92>
 80078c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80078c8:	07db      	lsls	r3, r3, #31
 80078ca:	d50e      	bpl.n	80078ea <__cvt+0x82>
 80078cc:	eb00 0906 	add.w	r9, r0, r6
 80078d0:	2200      	movs	r2, #0
 80078d2:	2300      	movs	r3, #0
 80078d4:	4620      	mov	r0, r4
 80078d6:	4629      	mov	r1, r5
 80078d8:	f7f9 f866 	bl	80009a8 <__aeabi_dcmpeq>
 80078dc:	b108      	cbz	r0, 80078e2 <__cvt+0x7a>
 80078de:	f8cd 901c 	str.w	r9, [sp, #28]
 80078e2:	2230      	movs	r2, #48	@ 0x30
 80078e4:	9b07      	ldr	r3, [sp, #28]
 80078e6:	454b      	cmp	r3, r9
 80078e8:	d31e      	bcc.n	8007928 <__cvt+0xc0>
 80078ea:	4638      	mov	r0, r7
 80078ec:	9b07      	ldr	r3, [sp, #28]
 80078ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80078f0:	1bdb      	subs	r3, r3, r7
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	b008      	add	sp, #32
 80078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078fe:	eb00 0906 	add.w	r9, r0, r6
 8007902:	d1e5      	bne.n	80078d0 <__cvt+0x68>
 8007904:	7803      	ldrb	r3, [r0, #0]
 8007906:	2b30      	cmp	r3, #48	@ 0x30
 8007908:	d10a      	bne.n	8007920 <__cvt+0xb8>
 800790a:	2200      	movs	r2, #0
 800790c:	2300      	movs	r3, #0
 800790e:	4620      	mov	r0, r4
 8007910:	4629      	mov	r1, r5
 8007912:	f7f9 f849 	bl	80009a8 <__aeabi_dcmpeq>
 8007916:	b918      	cbnz	r0, 8007920 <__cvt+0xb8>
 8007918:	f1c6 0601 	rsb	r6, r6, #1
 800791c:	f8ca 6000 	str.w	r6, [sl]
 8007920:	f8da 3000 	ldr.w	r3, [sl]
 8007924:	4499      	add	r9, r3
 8007926:	e7d3      	b.n	80078d0 <__cvt+0x68>
 8007928:	1c59      	adds	r1, r3, #1
 800792a:	9107      	str	r1, [sp, #28]
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e7d9      	b.n	80078e4 <__cvt+0x7c>

08007930 <__exponent>:
 8007930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007932:	2900      	cmp	r1, #0
 8007934:	bfb6      	itet	lt
 8007936:	232d      	movlt	r3, #45	@ 0x2d
 8007938:	232b      	movge	r3, #43	@ 0x2b
 800793a:	4249      	neglt	r1, r1
 800793c:	2909      	cmp	r1, #9
 800793e:	7002      	strb	r2, [r0, #0]
 8007940:	7043      	strb	r3, [r0, #1]
 8007942:	dd29      	ble.n	8007998 <__exponent+0x68>
 8007944:	f10d 0307 	add.w	r3, sp, #7
 8007948:	461d      	mov	r5, r3
 800794a:	270a      	movs	r7, #10
 800794c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007950:	461a      	mov	r2, r3
 8007952:	fb07 1416 	mls	r4, r7, r6, r1
 8007956:	3430      	adds	r4, #48	@ 0x30
 8007958:	f802 4c01 	strb.w	r4, [r2, #-1]
 800795c:	460c      	mov	r4, r1
 800795e:	2c63      	cmp	r4, #99	@ 0x63
 8007960:	4631      	mov	r1, r6
 8007962:	f103 33ff 	add.w	r3, r3, #4294967295
 8007966:	dcf1      	bgt.n	800794c <__exponent+0x1c>
 8007968:	3130      	adds	r1, #48	@ 0x30
 800796a:	1e94      	subs	r4, r2, #2
 800796c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007970:	4623      	mov	r3, r4
 8007972:	1c41      	adds	r1, r0, #1
 8007974:	42ab      	cmp	r3, r5
 8007976:	d30a      	bcc.n	800798e <__exponent+0x5e>
 8007978:	f10d 0309 	add.w	r3, sp, #9
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	42ac      	cmp	r4, r5
 8007980:	bf88      	it	hi
 8007982:	2300      	movhi	r3, #0
 8007984:	3302      	adds	r3, #2
 8007986:	4403      	add	r3, r0
 8007988:	1a18      	subs	r0, r3, r0
 800798a:	b003      	add	sp, #12
 800798c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800798e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007992:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007996:	e7ed      	b.n	8007974 <__exponent+0x44>
 8007998:	2330      	movs	r3, #48	@ 0x30
 800799a:	3130      	adds	r1, #48	@ 0x30
 800799c:	7083      	strb	r3, [r0, #2]
 800799e:	70c1      	strb	r1, [r0, #3]
 80079a0:	1d03      	adds	r3, r0, #4
 80079a2:	e7f1      	b.n	8007988 <__exponent+0x58>

080079a4 <_printf_float>:
 80079a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	b091      	sub	sp, #68	@ 0x44
 80079aa:	460c      	mov	r4, r1
 80079ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80079b0:	4616      	mov	r6, r2
 80079b2:	461f      	mov	r7, r3
 80079b4:	4605      	mov	r5, r0
 80079b6:	f000 fdad 	bl	8008514 <_localeconv_r>
 80079ba:	6803      	ldr	r3, [r0, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	9308      	str	r3, [sp, #32]
 80079c0:	f7f8 fbc6 	bl	8000150 <strlen>
 80079c4:	2300      	movs	r3, #0
 80079c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80079c8:	f8d8 3000 	ldr.w	r3, [r8]
 80079cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80079ce:	3307      	adds	r3, #7
 80079d0:	f023 0307 	bic.w	r3, r3, #7
 80079d4:	f103 0208 	add.w	r2, r3, #8
 80079d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079dc:	f8d4 b000 	ldr.w	fp, [r4]
 80079e0:	f8c8 2000 	str.w	r2, [r8]
 80079e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80079ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80079fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80079fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007c70 <_printf_float+0x2cc>)
 8007a00:	f7f9 f804 	bl	8000a0c <__aeabi_dcmpun>
 8007a04:	bb70      	cbnz	r0, 8007a64 <_printf_float+0xc0>
 8007a06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0e:	4b98      	ldr	r3, [pc, #608]	@ (8007c70 <_printf_float+0x2cc>)
 8007a10:	f7f8 ffde 	bl	80009d0 <__aeabi_dcmple>
 8007a14:	bb30      	cbnz	r0, 8007a64 <_printf_float+0xc0>
 8007a16:	2200      	movs	r2, #0
 8007a18:	2300      	movs	r3, #0
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	f7f8 ffcd 	bl	80009bc <__aeabi_dcmplt>
 8007a22:	b110      	cbz	r0, 8007a2a <_printf_float+0x86>
 8007a24:	232d      	movs	r3, #45	@ 0x2d
 8007a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a2a:	4a92      	ldr	r2, [pc, #584]	@ (8007c74 <_printf_float+0x2d0>)
 8007a2c:	4b92      	ldr	r3, [pc, #584]	@ (8007c78 <_printf_float+0x2d4>)
 8007a2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007a32:	bf8c      	ite	hi
 8007a34:	4690      	movhi	r8, r2
 8007a36:	4698      	movls	r8, r3
 8007a38:	2303      	movs	r3, #3
 8007a3a:	f04f 0900 	mov.w	r9, #0
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	f02b 0304 	bic.w	r3, fp, #4
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	4633      	mov	r3, r6
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	9700      	str	r7, [sp, #0]
 8007a4e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007a50:	f000 f9d4 	bl	8007dfc <_printf_common>
 8007a54:	3001      	adds	r0, #1
 8007a56:	f040 8090 	bne.w	8007b7a <_printf_float+0x1d6>
 8007a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5e:	b011      	add	sp, #68	@ 0x44
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a64:	4642      	mov	r2, r8
 8007a66:	464b      	mov	r3, r9
 8007a68:	4640      	mov	r0, r8
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	f7f8 ffce 	bl	8000a0c <__aeabi_dcmpun>
 8007a70:	b148      	cbz	r0, 8007a86 <_printf_float+0xe2>
 8007a72:	464b      	mov	r3, r9
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bfb8      	it	lt
 8007a78:	232d      	movlt	r3, #45	@ 0x2d
 8007a7a:	4a80      	ldr	r2, [pc, #512]	@ (8007c7c <_printf_float+0x2d8>)
 8007a7c:	bfb8      	it	lt
 8007a7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a82:	4b7f      	ldr	r3, [pc, #508]	@ (8007c80 <_printf_float+0x2dc>)
 8007a84:	e7d3      	b.n	8007a2e <_printf_float+0x8a>
 8007a86:	6863      	ldr	r3, [r4, #4]
 8007a88:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	d13f      	bne.n	8007b10 <_printf_float+0x16c>
 8007a90:	2306      	movs	r3, #6
 8007a92:	6063      	str	r3, [r4, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	9206      	str	r2, [sp, #24]
 8007a9e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007aa0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007aa4:	aa0d      	add	r2, sp, #52	@ 0x34
 8007aa6:	9203      	str	r2, [sp, #12]
 8007aa8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007aac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007ab0:	6863      	ldr	r3, [r4, #4]
 8007ab2:	4642      	mov	r2, r8
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	464b      	mov	r3, r9
 8007aba:	910a      	str	r1, [sp, #40]	@ 0x28
 8007abc:	f7ff fed4 	bl	8007868 <__cvt>
 8007ac0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	2947      	cmp	r1, #71	@ 0x47
 8007ac6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007ac8:	d128      	bne.n	8007b1c <_printf_float+0x178>
 8007aca:	1cc8      	adds	r0, r1, #3
 8007acc:	db02      	blt.n	8007ad4 <_printf_float+0x130>
 8007ace:	6863      	ldr	r3, [r4, #4]
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	dd40      	ble.n	8007b56 <_printf_float+0x1b2>
 8007ad4:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ad8:	fa5f fa8a 	uxtb.w	sl, sl
 8007adc:	4652      	mov	r2, sl
 8007ade:	3901      	subs	r1, #1
 8007ae0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ae4:	910d      	str	r1, [sp, #52]	@ 0x34
 8007ae6:	f7ff ff23 	bl	8007930 <__exponent>
 8007aea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007aec:	4681      	mov	r9, r0
 8007aee:	1813      	adds	r3, r2, r0
 8007af0:	2a01      	cmp	r2, #1
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	dc02      	bgt.n	8007afc <_printf_float+0x158>
 8007af6:	6822      	ldr	r2, [r4, #0]
 8007af8:	07d2      	lsls	r2, r2, #31
 8007afa:	d501      	bpl.n	8007b00 <_printf_float+0x15c>
 8007afc:	3301      	adds	r3, #1
 8007afe:	6123      	str	r3, [r4, #16]
 8007b00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d09e      	beq.n	8007a46 <_printf_float+0xa2>
 8007b08:	232d      	movs	r3, #45	@ 0x2d
 8007b0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b0e:	e79a      	b.n	8007a46 <_printf_float+0xa2>
 8007b10:	2947      	cmp	r1, #71	@ 0x47
 8007b12:	d1bf      	bne.n	8007a94 <_printf_float+0xf0>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1bd      	bne.n	8007a94 <_printf_float+0xf0>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e7ba      	b.n	8007a92 <_printf_float+0xee>
 8007b1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b20:	d9dc      	bls.n	8007adc <_printf_float+0x138>
 8007b22:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b26:	d118      	bne.n	8007b5a <_printf_float+0x1b6>
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	6863      	ldr	r3, [r4, #4]
 8007b2c:	dd0b      	ble.n	8007b46 <_printf_float+0x1a2>
 8007b2e:	6121      	str	r1, [r4, #16]
 8007b30:	b913      	cbnz	r3, 8007b38 <_printf_float+0x194>
 8007b32:	6822      	ldr	r2, [r4, #0]
 8007b34:	07d0      	lsls	r0, r2, #31
 8007b36:	d502      	bpl.n	8007b3e <_printf_float+0x19a>
 8007b38:	3301      	adds	r3, #1
 8007b3a:	440b      	add	r3, r1
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b44:	e7dc      	b.n	8007b00 <_printf_float+0x15c>
 8007b46:	b913      	cbnz	r3, 8007b4e <_printf_float+0x1aa>
 8007b48:	6822      	ldr	r2, [r4, #0]
 8007b4a:	07d2      	lsls	r2, r2, #31
 8007b4c:	d501      	bpl.n	8007b52 <_printf_float+0x1ae>
 8007b4e:	3302      	adds	r3, #2
 8007b50:	e7f4      	b.n	8007b3c <_printf_float+0x198>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e7f2      	b.n	8007b3c <_printf_float+0x198>
 8007b56:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	db05      	blt.n	8007b6c <_printf_float+0x1c8>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	6121      	str	r1, [r4, #16]
 8007b64:	07d8      	lsls	r0, r3, #31
 8007b66:	d5ea      	bpl.n	8007b3e <_printf_float+0x19a>
 8007b68:	1c4b      	adds	r3, r1, #1
 8007b6a:	e7e7      	b.n	8007b3c <_printf_float+0x198>
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	bfcc      	ite	gt
 8007b70:	2201      	movgt	r2, #1
 8007b72:	f1c1 0202 	rsble	r2, r1, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	e7e0      	b.n	8007b3c <_printf_float+0x198>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	055a      	lsls	r2, r3, #21
 8007b7e:	d407      	bmi.n	8007b90 <_printf_float+0x1ec>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	4642      	mov	r2, r8
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d12b      	bne.n	8007be6 <_printf_float+0x242>
 8007b8e:	e764      	b.n	8007a5a <_printf_float+0xb6>
 8007b90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b94:	f240 80dc 	bls.w	8007d50 <_printf_float+0x3ac>
 8007b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f7f8 ff02 	bl	80009a8 <__aeabi_dcmpeq>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d033      	beq.n	8007c10 <_printf_float+0x26c>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	4a35      	ldr	r2, [pc, #212]	@ (8007c84 <_printf_float+0x2e0>)
 8007bb0:	47b8      	blx	r7
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	f43f af51 	beq.w	8007a5a <_printf_float+0xb6>
 8007bb8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007bbc:	4543      	cmp	r3, r8
 8007bbe:	db02      	blt.n	8007bc6 <_printf_float+0x222>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	07d8      	lsls	r0, r3, #31
 8007bc4:	d50f      	bpl.n	8007be6 <_printf_float+0x242>
 8007bc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f af42 	beq.w	8007a5a <_printf_float+0xb6>
 8007bd6:	f04f 0900 	mov.w	r9, #0
 8007bda:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bde:	f104 0a1a 	add.w	sl, r4, #26
 8007be2:	45c8      	cmp	r8, r9
 8007be4:	dc09      	bgt.n	8007bfa <_printf_float+0x256>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	079b      	lsls	r3, r3, #30
 8007bea:	f100 8102 	bmi.w	8007df2 <_printf_float+0x44e>
 8007bee:	68e0      	ldr	r0, [r4, #12]
 8007bf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bf2:	4298      	cmp	r0, r3
 8007bf4:	bfb8      	it	lt
 8007bf6:	4618      	movlt	r0, r3
 8007bf8:	e731      	b.n	8007a5e <_printf_float+0xba>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4652      	mov	r2, sl
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f af28 	beq.w	8007a5a <_printf_float+0xb6>
 8007c0a:	f109 0901 	add.w	r9, r9, #1
 8007c0e:	e7e8      	b.n	8007be2 <_printf_float+0x23e>
 8007c10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	dc38      	bgt.n	8007c88 <_printf_float+0x2e4>
 8007c16:	2301      	movs	r3, #1
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	4a19      	ldr	r2, [pc, #100]	@ (8007c84 <_printf_float+0x2e0>)
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f af1a 	beq.w	8007a5a <_printf_float+0xb6>
 8007c26:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007c2a:	ea59 0303 	orrs.w	r3, r9, r3
 8007c2e:	d102      	bne.n	8007c36 <_printf_float+0x292>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	07d9      	lsls	r1, r3, #31
 8007c34:	d5d7      	bpl.n	8007be6 <_printf_float+0x242>
 8007c36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	f43f af0a 	beq.w	8007a5a <_printf_float+0xb6>
 8007c46:	f04f 0a00 	mov.w	sl, #0
 8007c4a:	f104 0b1a 	add.w	fp, r4, #26
 8007c4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c50:	425b      	negs	r3, r3
 8007c52:	4553      	cmp	r3, sl
 8007c54:	dc01      	bgt.n	8007c5a <_printf_float+0x2b6>
 8007c56:	464b      	mov	r3, r9
 8007c58:	e793      	b.n	8007b82 <_printf_float+0x1de>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	465a      	mov	r2, fp
 8007c5e:	4631      	mov	r1, r6
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b8      	blx	r7
 8007c64:	3001      	adds	r0, #1
 8007c66:	f43f aef8 	beq.w	8007a5a <_printf_float+0xb6>
 8007c6a:	f10a 0a01 	add.w	sl, sl, #1
 8007c6e:	e7ee      	b.n	8007c4e <_printf_float+0x2aa>
 8007c70:	7fefffff 	.word	0x7fefffff
 8007c74:	0800b54f 	.word	0x0800b54f
 8007c78:	0800b54b 	.word	0x0800b54b
 8007c7c:	0800b557 	.word	0x0800b557
 8007c80:	0800b553 	.word	0x0800b553
 8007c84:	0800b55b 	.word	0x0800b55b
 8007c88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c8a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007c8e:	4553      	cmp	r3, sl
 8007c90:	bfa8      	it	ge
 8007c92:	4653      	movge	r3, sl
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	4699      	mov	r9, r3
 8007c98:	dc36      	bgt.n	8007d08 <_printf_float+0x364>
 8007c9a:	f04f 0b00 	mov.w	fp, #0
 8007c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ca2:	f104 021a 	add.w	r2, r4, #26
 8007ca6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007caa:	eba3 0309 	sub.w	r3, r3, r9
 8007cae:	455b      	cmp	r3, fp
 8007cb0:	dc31      	bgt.n	8007d16 <_printf_float+0x372>
 8007cb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cb4:	459a      	cmp	sl, r3
 8007cb6:	dc3a      	bgt.n	8007d2e <_printf_float+0x38a>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	07da      	lsls	r2, r3, #31
 8007cbc:	d437      	bmi.n	8007d2e <_printf_float+0x38a>
 8007cbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cc0:	ebaa 0903 	sub.w	r9, sl, r3
 8007cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cc6:	ebaa 0303 	sub.w	r3, sl, r3
 8007cca:	4599      	cmp	r9, r3
 8007ccc:	bfa8      	it	ge
 8007cce:	4699      	movge	r9, r3
 8007cd0:	f1b9 0f00 	cmp.w	r9, #0
 8007cd4:	dc33      	bgt.n	8007d3e <_printf_float+0x39a>
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cde:	f104 0b1a 	add.w	fp, r4, #26
 8007ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ce4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ce8:	eba3 0309 	sub.w	r3, r3, r9
 8007cec:	4543      	cmp	r3, r8
 8007cee:	f77f af7a 	ble.w	8007be6 <_printf_float+0x242>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	465a      	mov	r2, fp
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	47b8      	blx	r7
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	f43f aeac 	beq.w	8007a5a <_printf_float+0xb6>
 8007d02:	f108 0801 	add.w	r8, r8, #1
 8007d06:	e7ec      	b.n	8007ce2 <_printf_float+0x33e>
 8007d08:	4642      	mov	r2, r8
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b8      	blx	r7
 8007d10:	3001      	adds	r0, #1
 8007d12:	d1c2      	bne.n	8007c9a <_printf_float+0x2f6>
 8007d14:	e6a1      	b.n	8007a5a <_printf_float+0xb6>
 8007d16:	2301      	movs	r3, #1
 8007d18:	4631      	mov	r1, r6
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8007d1e:	47b8      	blx	r7
 8007d20:	3001      	adds	r0, #1
 8007d22:	f43f ae9a 	beq.w	8007a5a <_printf_float+0xb6>
 8007d26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d28:	f10b 0b01 	add.w	fp, fp, #1
 8007d2c:	e7bb      	b.n	8007ca6 <_printf_float+0x302>
 8007d2e:	4631      	mov	r1, r6
 8007d30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b8      	blx	r7
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d1c0      	bne.n	8007cbe <_printf_float+0x31a>
 8007d3c:	e68d      	b.n	8007a5a <_printf_float+0xb6>
 8007d3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d40:	464b      	mov	r3, r9
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	4442      	add	r2, r8
 8007d48:	47b8      	blx	r7
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d1c3      	bne.n	8007cd6 <_printf_float+0x332>
 8007d4e:	e684      	b.n	8007a5a <_printf_float+0xb6>
 8007d50:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007d54:	f1ba 0f01 	cmp.w	sl, #1
 8007d58:	dc01      	bgt.n	8007d5e <_printf_float+0x3ba>
 8007d5a:	07db      	lsls	r3, r3, #31
 8007d5c:	d536      	bpl.n	8007dcc <_printf_float+0x428>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4642      	mov	r2, r8
 8007d62:	4631      	mov	r1, r6
 8007d64:	4628      	mov	r0, r5
 8007d66:	47b8      	blx	r7
 8007d68:	3001      	adds	r0, #1
 8007d6a:	f43f ae76 	beq.w	8007a5a <_printf_float+0xb6>
 8007d6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f ae6e 	beq.w	8007a5a <_printf_float+0xb6>
 8007d7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d82:	2200      	movs	r2, #0
 8007d84:	2300      	movs	r3, #0
 8007d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d8a:	f7f8 fe0d 	bl	80009a8 <__aeabi_dcmpeq>
 8007d8e:	b9c0      	cbnz	r0, 8007dc2 <_printf_float+0x41e>
 8007d90:	4653      	mov	r3, sl
 8007d92:	f108 0201 	add.w	r2, r8, #1
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b8      	blx	r7
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d10c      	bne.n	8007dba <_printf_float+0x416>
 8007da0:	e65b      	b.n	8007a5a <_printf_float+0xb6>
 8007da2:	2301      	movs	r3, #1
 8007da4:	465a      	mov	r2, fp
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	f43f ae54 	beq.w	8007a5a <_printf_float+0xb6>
 8007db2:	f108 0801 	add.w	r8, r8, #1
 8007db6:	45d0      	cmp	r8, sl
 8007db8:	dbf3      	blt.n	8007da2 <_printf_float+0x3fe>
 8007dba:	464b      	mov	r3, r9
 8007dbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007dc0:	e6e0      	b.n	8007b84 <_printf_float+0x1e0>
 8007dc2:	f04f 0800 	mov.w	r8, #0
 8007dc6:	f104 0b1a 	add.w	fp, r4, #26
 8007dca:	e7f4      	b.n	8007db6 <_printf_float+0x412>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	4642      	mov	r2, r8
 8007dd0:	e7e1      	b.n	8007d96 <_printf_float+0x3f2>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	464a      	mov	r2, r9
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f43f ae3c 	beq.w	8007a5a <_printf_float+0xb6>
 8007de2:	f108 0801 	add.w	r8, r8, #1
 8007de6:	68e3      	ldr	r3, [r4, #12]
 8007de8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007dea:	1a5b      	subs	r3, r3, r1
 8007dec:	4543      	cmp	r3, r8
 8007dee:	dcf0      	bgt.n	8007dd2 <_printf_float+0x42e>
 8007df0:	e6fd      	b.n	8007bee <_printf_float+0x24a>
 8007df2:	f04f 0800 	mov.w	r8, #0
 8007df6:	f104 0919 	add.w	r9, r4, #25
 8007dfa:	e7f4      	b.n	8007de6 <_printf_float+0x442>

08007dfc <_printf_common>:
 8007dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e00:	4616      	mov	r6, r2
 8007e02:	4698      	mov	r8, r3
 8007e04:	688a      	ldr	r2, [r1, #8]
 8007e06:	690b      	ldr	r3, [r1, #16]
 8007e08:	4607      	mov	r7, r0
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	bfb8      	it	lt
 8007e0e:	4613      	movlt	r3, r2
 8007e10:	6033      	str	r3, [r6, #0]
 8007e12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e16:	460c      	mov	r4, r1
 8007e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e1c:	b10a      	cbz	r2, 8007e22 <_printf_common+0x26>
 8007e1e:	3301      	adds	r3, #1
 8007e20:	6033      	str	r3, [r6, #0]
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	0699      	lsls	r1, r3, #26
 8007e26:	bf42      	ittt	mi
 8007e28:	6833      	ldrmi	r3, [r6, #0]
 8007e2a:	3302      	addmi	r3, #2
 8007e2c:	6033      	strmi	r3, [r6, #0]
 8007e2e:	6825      	ldr	r5, [r4, #0]
 8007e30:	f015 0506 	ands.w	r5, r5, #6
 8007e34:	d106      	bne.n	8007e44 <_printf_common+0x48>
 8007e36:	f104 0a19 	add.w	sl, r4, #25
 8007e3a:	68e3      	ldr	r3, [r4, #12]
 8007e3c:	6832      	ldr	r2, [r6, #0]
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	42ab      	cmp	r3, r5
 8007e42:	dc2b      	bgt.n	8007e9c <_printf_common+0xa0>
 8007e44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	3b00      	subs	r3, #0
 8007e4c:	bf18      	it	ne
 8007e4e:	2301      	movne	r3, #1
 8007e50:	0692      	lsls	r2, r2, #26
 8007e52:	d430      	bmi.n	8007eb6 <_printf_common+0xba>
 8007e54:	4641      	mov	r1, r8
 8007e56:	4638      	mov	r0, r7
 8007e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e5c:	47c8      	blx	r9
 8007e5e:	3001      	adds	r0, #1
 8007e60:	d023      	beq.n	8007eaa <_printf_common+0xae>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	f003 0306 	and.w	r3, r3, #6
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	bf14      	ite	ne
 8007e6e:	2500      	movne	r5, #0
 8007e70:	6833      	ldreq	r3, [r6, #0]
 8007e72:	f04f 0600 	mov.w	r6, #0
 8007e76:	bf08      	it	eq
 8007e78:	68e5      	ldreq	r5, [r4, #12]
 8007e7a:	f104 041a 	add.w	r4, r4, #26
 8007e7e:	bf08      	it	eq
 8007e80:	1aed      	subeq	r5, r5, r3
 8007e82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007e86:	bf08      	it	eq
 8007e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	bfc4      	itt	gt
 8007e90:	1a9b      	subgt	r3, r3, r2
 8007e92:	18ed      	addgt	r5, r5, r3
 8007e94:	42b5      	cmp	r5, r6
 8007e96:	d11a      	bne.n	8007ece <_printf_common+0xd2>
 8007e98:	2000      	movs	r0, #0
 8007e9a:	e008      	b.n	8007eae <_printf_common+0xb2>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4652      	mov	r2, sl
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	47c8      	blx	r9
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d103      	bne.n	8007eb2 <_printf_common+0xb6>
 8007eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8007eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb2:	3501      	adds	r5, #1
 8007eb4:	e7c1      	b.n	8007e3a <_printf_common+0x3e>
 8007eb6:	2030      	movs	r0, #48	@ 0x30
 8007eb8:	18e1      	adds	r1, r4, r3
 8007eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ec4:	4422      	add	r2, r4
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ecc:	e7c2      	b.n	8007e54 <_printf_common+0x58>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	47c8      	blx	r9
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d0e6      	beq.n	8007eaa <_printf_common+0xae>
 8007edc:	3601      	adds	r6, #1
 8007ede:	e7d9      	b.n	8007e94 <_printf_common+0x98>

08007ee0 <_printf_i>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	7e0f      	ldrb	r7, [r1, #24]
 8007ee6:	4691      	mov	r9, r2
 8007ee8:	2f78      	cmp	r7, #120	@ 0x78
 8007eea:	4680      	mov	r8, r0
 8007eec:	460c      	mov	r4, r1
 8007eee:	469a      	mov	sl, r3
 8007ef0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ef6:	d807      	bhi.n	8007f08 <_printf_i+0x28>
 8007ef8:	2f62      	cmp	r7, #98	@ 0x62
 8007efa:	d80a      	bhi.n	8007f12 <_printf_i+0x32>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	f000 80d1 	beq.w	80080a4 <_printf_i+0x1c4>
 8007f02:	2f58      	cmp	r7, #88	@ 0x58
 8007f04:	f000 80b8 	beq.w	8008078 <_printf_i+0x198>
 8007f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f10:	e03a      	b.n	8007f88 <_printf_i+0xa8>
 8007f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f16:	2b15      	cmp	r3, #21
 8007f18:	d8f6      	bhi.n	8007f08 <_printf_i+0x28>
 8007f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8007f20 <_printf_i+0x40>)
 8007f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f09 	.word	0x08007f09
 8007f2c:	08007f09 	.word	0x08007f09
 8007f30:	08007f09 	.word	0x08007f09
 8007f34:	08007f09 	.word	0x08007f09
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007f09 	.word	0x08007f09
 8007f40:	08007f09 	.word	0x08007f09
 8007f44:	08007f09 	.word	0x08007f09
 8007f48:	08007f09 	.word	0x08007f09
 8007f4c:	0800808b 	.word	0x0800808b
 8007f50:	08007fb7 	.word	0x08007fb7
 8007f54:	08008045 	.word	0x08008045
 8007f58:	08007f09 	.word	0x08007f09
 8007f5c:	08007f09 	.word	0x08007f09
 8007f60:	080080ad 	.word	0x080080ad
 8007f64:	08007f09 	.word	0x08007f09
 8007f68:	08007fb7 	.word	0x08007fb7
 8007f6c:	08007f09 	.word	0x08007f09
 8007f70:	08007f09 	.word	0x08007f09
 8007f74:	0800804d 	.word	0x0800804d
 8007f78:	6833      	ldr	r3, [r6, #0]
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6032      	str	r2, [r6, #0]
 8007f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e09c      	b.n	80080c6 <_printf_i+0x1e6>
 8007f8c:	6833      	ldr	r3, [r6, #0]
 8007f8e:	6820      	ldr	r0, [r4, #0]
 8007f90:	1d19      	adds	r1, r3, #4
 8007f92:	6031      	str	r1, [r6, #0]
 8007f94:	0606      	lsls	r6, r0, #24
 8007f96:	d501      	bpl.n	8007f9c <_printf_i+0xbc>
 8007f98:	681d      	ldr	r5, [r3, #0]
 8007f9a:	e003      	b.n	8007fa4 <_printf_i+0xc4>
 8007f9c:	0645      	lsls	r5, r0, #25
 8007f9e:	d5fb      	bpl.n	8007f98 <_printf_i+0xb8>
 8007fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	da03      	bge.n	8007fb0 <_printf_i+0xd0>
 8007fa8:	232d      	movs	r3, #45	@ 0x2d
 8007faa:	426d      	negs	r5, r5
 8007fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fb0:	230a      	movs	r3, #10
 8007fb2:	4858      	ldr	r0, [pc, #352]	@ (8008114 <_printf_i+0x234>)
 8007fb4:	e011      	b.n	8007fda <_printf_i+0xfa>
 8007fb6:	6821      	ldr	r1, [r4, #0]
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	0608      	lsls	r0, r1, #24
 8007fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fc0:	d402      	bmi.n	8007fc8 <_printf_i+0xe8>
 8007fc2:	0649      	lsls	r1, r1, #25
 8007fc4:	bf48      	it	mi
 8007fc6:	b2ad      	uxthmi	r5, r5
 8007fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fca:	6033      	str	r3, [r6, #0]
 8007fcc:	bf14      	ite	ne
 8007fce:	230a      	movne	r3, #10
 8007fd0:	2308      	moveq	r3, #8
 8007fd2:	4850      	ldr	r0, [pc, #320]	@ (8008114 <_printf_i+0x234>)
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fda:	6866      	ldr	r6, [r4, #4]
 8007fdc:	2e00      	cmp	r6, #0
 8007fde:	60a6      	str	r6, [r4, #8]
 8007fe0:	db05      	blt.n	8007fee <_printf_i+0x10e>
 8007fe2:	6821      	ldr	r1, [r4, #0]
 8007fe4:	432e      	orrs	r6, r5
 8007fe6:	f021 0104 	bic.w	r1, r1, #4
 8007fea:	6021      	str	r1, [r4, #0]
 8007fec:	d04b      	beq.n	8008086 <_printf_i+0x1a6>
 8007fee:	4616      	mov	r6, r2
 8007ff0:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ff4:	fb03 5711 	mls	r7, r3, r1, r5
 8007ff8:	5dc7      	ldrb	r7, [r0, r7]
 8007ffa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ffe:	462f      	mov	r7, r5
 8008000:	42bb      	cmp	r3, r7
 8008002:	460d      	mov	r5, r1
 8008004:	d9f4      	bls.n	8007ff0 <_printf_i+0x110>
 8008006:	2b08      	cmp	r3, #8
 8008008:	d10b      	bne.n	8008022 <_printf_i+0x142>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	07df      	lsls	r7, r3, #31
 800800e:	d508      	bpl.n	8008022 <_printf_i+0x142>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	6861      	ldr	r1, [r4, #4]
 8008014:	4299      	cmp	r1, r3
 8008016:	bfde      	ittt	le
 8008018:	2330      	movle	r3, #48	@ 0x30
 800801a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800801e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008022:	1b92      	subs	r2, r2, r6
 8008024:	6122      	str	r2, [r4, #16]
 8008026:	464b      	mov	r3, r9
 8008028:	4621      	mov	r1, r4
 800802a:	4640      	mov	r0, r8
 800802c:	f8cd a000 	str.w	sl, [sp]
 8008030:	aa03      	add	r2, sp, #12
 8008032:	f7ff fee3 	bl	8007dfc <_printf_common>
 8008036:	3001      	adds	r0, #1
 8008038:	d14a      	bne.n	80080d0 <_printf_i+0x1f0>
 800803a:	f04f 30ff 	mov.w	r0, #4294967295
 800803e:	b004      	add	sp, #16
 8008040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	f043 0320 	orr.w	r3, r3, #32
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	2778      	movs	r7, #120	@ 0x78
 800804e:	4832      	ldr	r0, [pc, #200]	@ (8008118 <_printf_i+0x238>)
 8008050:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	6831      	ldr	r1, [r6, #0]
 8008058:	061f      	lsls	r7, r3, #24
 800805a:	f851 5b04 	ldr.w	r5, [r1], #4
 800805e:	d402      	bmi.n	8008066 <_printf_i+0x186>
 8008060:	065f      	lsls	r7, r3, #25
 8008062:	bf48      	it	mi
 8008064:	b2ad      	uxthmi	r5, r5
 8008066:	6031      	str	r1, [r6, #0]
 8008068:	07d9      	lsls	r1, r3, #31
 800806a:	bf44      	itt	mi
 800806c:	f043 0320 	orrmi.w	r3, r3, #32
 8008070:	6023      	strmi	r3, [r4, #0]
 8008072:	b11d      	cbz	r5, 800807c <_printf_i+0x19c>
 8008074:	2310      	movs	r3, #16
 8008076:	e7ad      	b.n	8007fd4 <_printf_i+0xf4>
 8008078:	4826      	ldr	r0, [pc, #152]	@ (8008114 <_printf_i+0x234>)
 800807a:	e7e9      	b.n	8008050 <_printf_i+0x170>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	f023 0320 	bic.w	r3, r3, #32
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	e7f6      	b.n	8008074 <_printf_i+0x194>
 8008086:	4616      	mov	r6, r2
 8008088:	e7bd      	b.n	8008006 <_printf_i+0x126>
 800808a:	6833      	ldr	r3, [r6, #0]
 800808c:	6825      	ldr	r5, [r4, #0]
 800808e:	1d18      	adds	r0, r3, #4
 8008090:	6961      	ldr	r1, [r4, #20]
 8008092:	6030      	str	r0, [r6, #0]
 8008094:	062e      	lsls	r6, r5, #24
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	d501      	bpl.n	800809e <_printf_i+0x1be>
 800809a:	6019      	str	r1, [r3, #0]
 800809c:	e002      	b.n	80080a4 <_printf_i+0x1c4>
 800809e:	0668      	lsls	r0, r5, #25
 80080a0:	d5fb      	bpl.n	800809a <_printf_i+0x1ba>
 80080a2:	8019      	strh	r1, [r3, #0]
 80080a4:	2300      	movs	r3, #0
 80080a6:	4616      	mov	r6, r2
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	e7bc      	b.n	8008026 <_printf_i+0x146>
 80080ac:	6833      	ldr	r3, [r6, #0]
 80080ae:	2100      	movs	r1, #0
 80080b0:	1d1a      	adds	r2, r3, #4
 80080b2:	6032      	str	r2, [r6, #0]
 80080b4:	681e      	ldr	r6, [r3, #0]
 80080b6:	6862      	ldr	r2, [r4, #4]
 80080b8:	4630      	mov	r0, r6
 80080ba:	f000 faaa 	bl	8008612 <memchr>
 80080be:	b108      	cbz	r0, 80080c4 <_printf_i+0x1e4>
 80080c0:	1b80      	subs	r0, r0, r6
 80080c2:	6060      	str	r0, [r4, #4]
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	2300      	movs	r3, #0
 80080ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080ce:	e7aa      	b.n	8008026 <_printf_i+0x146>
 80080d0:	4632      	mov	r2, r6
 80080d2:	4649      	mov	r1, r9
 80080d4:	4640      	mov	r0, r8
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	47d0      	blx	sl
 80080da:	3001      	adds	r0, #1
 80080dc:	d0ad      	beq.n	800803a <_printf_i+0x15a>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	079b      	lsls	r3, r3, #30
 80080e2:	d413      	bmi.n	800810c <_printf_i+0x22c>
 80080e4:	68e0      	ldr	r0, [r4, #12]
 80080e6:	9b03      	ldr	r3, [sp, #12]
 80080e8:	4298      	cmp	r0, r3
 80080ea:	bfb8      	it	lt
 80080ec:	4618      	movlt	r0, r3
 80080ee:	e7a6      	b.n	800803e <_printf_i+0x15e>
 80080f0:	2301      	movs	r3, #1
 80080f2:	4632      	mov	r2, r6
 80080f4:	4649      	mov	r1, r9
 80080f6:	4640      	mov	r0, r8
 80080f8:	47d0      	blx	sl
 80080fa:	3001      	adds	r0, #1
 80080fc:	d09d      	beq.n	800803a <_printf_i+0x15a>
 80080fe:	3501      	adds	r5, #1
 8008100:	68e3      	ldr	r3, [r4, #12]
 8008102:	9903      	ldr	r1, [sp, #12]
 8008104:	1a5b      	subs	r3, r3, r1
 8008106:	42ab      	cmp	r3, r5
 8008108:	dcf2      	bgt.n	80080f0 <_printf_i+0x210>
 800810a:	e7eb      	b.n	80080e4 <_printf_i+0x204>
 800810c:	2500      	movs	r5, #0
 800810e:	f104 0619 	add.w	r6, r4, #25
 8008112:	e7f5      	b.n	8008100 <_printf_i+0x220>
 8008114:	0800b55d 	.word	0x0800b55d
 8008118:	0800b56e 	.word	0x0800b56e

0800811c <std>:
 800811c:	2300      	movs	r3, #0
 800811e:	b510      	push	{r4, lr}
 8008120:	4604      	mov	r4, r0
 8008122:	e9c0 3300 	strd	r3, r3, [r0]
 8008126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800812a:	6083      	str	r3, [r0, #8]
 800812c:	8181      	strh	r1, [r0, #12]
 800812e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008130:	81c2      	strh	r2, [r0, #14]
 8008132:	6183      	str	r3, [r0, #24]
 8008134:	4619      	mov	r1, r3
 8008136:	2208      	movs	r2, #8
 8008138:	305c      	adds	r0, #92	@ 0x5c
 800813a:	f000 f94c 	bl	80083d6 <memset>
 800813e:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <std+0x58>)
 8008140:	6224      	str	r4, [r4, #32]
 8008142:	6263      	str	r3, [r4, #36]	@ 0x24
 8008144:	4b0c      	ldr	r3, [pc, #48]	@ (8008178 <std+0x5c>)
 8008146:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008148:	4b0c      	ldr	r3, [pc, #48]	@ (800817c <std+0x60>)
 800814a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800814c:	4b0c      	ldr	r3, [pc, #48]	@ (8008180 <std+0x64>)
 800814e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008150:	4b0c      	ldr	r3, [pc, #48]	@ (8008184 <std+0x68>)
 8008152:	429c      	cmp	r4, r3
 8008154:	d006      	beq.n	8008164 <std+0x48>
 8008156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800815a:	4294      	cmp	r4, r2
 800815c:	d002      	beq.n	8008164 <std+0x48>
 800815e:	33d0      	adds	r3, #208	@ 0xd0
 8008160:	429c      	cmp	r4, r3
 8008162:	d105      	bne.n	8008170 <std+0x54>
 8008164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800816c:	f000 ba46 	b.w	80085fc <__retarget_lock_init_recursive>
 8008170:	bd10      	pop	{r4, pc}
 8008172:	bf00      	nop
 8008174:	08008351 	.word	0x08008351
 8008178:	08008373 	.word	0x08008373
 800817c:	080083ab 	.word	0x080083ab
 8008180:	080083cf 	.word	0x080083cf
 8008184:	20000828 	.word	0x20000828

08008188 <stdio_exit_handler>:
 8008188:	4a02      	ldr	r2, [pc, #8]	@ (8008194 <stdio_exit_handler+0xc>)
 800818a:	4903      	ldr	r1, [pc, #12]	@ (8008198 <stdio_exit_handler+0x10>)
 800818c:	4803      	ldr	r0, [pc, #12]	@ (800819c <stdio_exit_handler+0x14>)
 800818e:	f000 b869 	b.w	8008264 <_fwalk_sglue>
 8008192:	bf00      	nop
 8008194:	2000002c 	.word	0x2000002c
 8008198:	0800a8ed 	.word	0x0800a8ed
 800819c:	200001a8 	.word	0x200001a8

080081a0 <cleanup_stdio>:
 80081a0:	6841      	ldr	r1, [r0, #4]
 80081a2:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <cleanup_stdio+0x34>)
 80081a4:	b510      	push	{r4, lr}
 80081a6:	4299      	cmp	r1, r3
 80081a8:	4604      	mov	r4, r0
 80081aa:	d001      	beq.n	80081b0 <cleanup_stdio+0x10>
 80081ac:	f002 fb9e 	bl	800a8ec <_fflush_r>
 80081b0:	68a1      	ldr	r1, [r4, #8]
 80081b2:	4b09      	ldr	r3, [pc, #36]	@ (80081d8 <cleanup_stdio+0x38>)
 80081b4:	4299      	cmp	r1, r3
 80081b6:	d002      	beq.n	80081be <cleanup_stdio+0x1e>
 80081b8:	4620      	mov	r0, r4
 80081ba:	f002 fb97 	bl	800a8ec <_fflush_r>
 80081be:	68e1      	ldr	r1, [r4, #12]
 80081c0:	4b06      	ldr	r3, [pc, #24]	@ (80081dc <cleanup_stdio+0x3c>)
 80081c2:	4299      	cmp	r1, r3
 80081c4:	d004      	beq.n	80081d0 <cleanup_stdio+0x30>
 80081c6:	4620      	mov	r0, r4
 80081c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081cc:	f002 bb8e 	b.w	800a8ec <_fflush_r>
 80081d0:	bd10      	pop	{r4, pc}
 80081d2:	bf00      	nop
 80081d4:	20000828 	.word	0x20000828
 80081d8:	20000890 	.word	0x20000890
 80081dc:	200008f8 	.word	0x200008f8

080081e0 <global_stdio_init.part.0>:
 80081e0:	b510      	push	{r4, lr}
 80081e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008210 <global_stdio_init.part.0+0x30>)
 80081e4:	4c0b      	ldr	r4, [pc, #44]	@ (8008214 <global_stdio_init.part.0+0x34>)
 80081e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008218 <global_stdio_init.part.0+0x38>)
 80081e8:	4620      	mov	r0, r4
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	2104      	movs	r1, #4
 80081ee:	2200      	movs	r2, #0
 80081f0:	f7ff ff94 	bl	800811c <std>
 80081f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081f8:	2201      	movs	r2, #1
 80081fa:	2109      	movs	r1, #9
 80081fc:	f7ff ff8e 	bl	800811c <std>
 8008200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008204:	2202      	movs	r2, #2
 8008206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800820a:	2112      	movs	r1, #18
 800820c:	f7ff bf86 	b.w	800811c <std>
 8008210:	20000960 	.word	0x20000960
 8008214:	20000828 	.word	0x20000828
 8008218:	08008189 	.word	0x08008189

0800821c <__sfp_lock_acquire>:
 800821c:	4801      	ldr	r0, [pc, #4]	@ (8008224 <__sfp_lock_acquire+0x8>)
 800821e:	f000 b9ee 	b.w	80085fe <__retarget_lock_acquire_recursive>
 8008222:	bf00      	nop
 8008224:	20000969 	.word	0x20000969

08008228 <__sfp_lock_release>:
 8008228:	4801      	ldr	r0, [pc, #4]	@ (8008230 <__sfp_lock_release+0x8>)
 800822a:	f000 b9e9 	b.w	8008600 <__retarget_lock_release_recursive>
 800822e:	bf00      	nop
 8008230:	20000969 	.word	0x20000969

08008234 <__sinit>:
 8008234:	b510      	push	{r4, lr}
 8008236:	4604      	mov	r4, r0
 8008238:	f7ff fff0 	bl	800821c <__sfp_lock_acquire>
 800823c:	6a23      	ldr	r3, [r4, #32]
 800823e:	b11b      	cbz	r3, 8008248 <__sinit+0x14>
 8008240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008244:	f7ff bff0 	b.w	8008228 <__sfp_lock_release>
 8008248:	4b04      	ldr	r3, [pc, #16]	@ (800825c <__sinit+0x28>)
 800824a:	6223      	str	r3, [r4, #32]
 800824c:	4b04      	ldr	r3, [pc, #16]	@ (8008260 <__sinit+0x2c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1f5      	bne.n	8008240 <__sinit+0xc>
 8008254:	f7ff ffc4 	bl	80081e0 <global_stdio_init.part.0>
 8008258:	e7f2      	b.n	8008240 <__sinit+0xc>
 800825a:	bf00      	nop
 800825c:	080081a1 	.word	0x080081a1
 8008260:	20000960 	.word	0x20000960

08008264 <_fwalk_sglue>:
 8008264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008268:	4607      	mov	r7, r0
 800826a:	4688      	mov	r8, r1
 800826c:	4614      	mov	r4, r2
 800826e:	2600      	movs	r6, #0
 8008270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008274:	f1b9 0901 	subs.w	r9, r9, #1
 8008278:	d505      	bpl.n	8008286 <_fwalk_sglue+0x22>
 800827a:	6824      	ldr	r4, [r4, #0]
 800827c:	2c00      	cmp	r4, #0
 800827e:	d1f7      	bne.n	8008270 <_fwalk_sglue+0xc>
 8008280:	4630      	mov	r0, r6
 8008282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d907      	bls.n	800829c <_fwalk_sglue+0x38>
 800828c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008290:	3301      	adds	r3, #1
 8008292:	d003      	beq.n	800829c <_fwalk_sglue+0x38>
 8008294:	4629      	mov	r1, r5
 8008296:	4638      	mov	r0, r7
 8008298:	47c0      	blx	r8
 800829a:	4306      	orrs	r6, r0
 800829c:	3568      	adds	r5, #104	@ 0x68
 800829e:	e7e9      	b.n	8008274 <_fwalk_sglue+0x10>

080082a0 <sniprintf>:
 80082a0:	b40c      	push	{r2, r3}
 80082a2:	b530      	push	{r4, r5, lr}
 80082a4:	4b18      	ldr	r3, [pc, #96]	@ (8008308 <sniprintf+0x68>)
 80082a6:	1e0c      	subs	r4, r1, #0
 80082a8:	681d      	ldr	r5, [r3, #0]
 80082aa:	b09d      	sub	sp, #116	@ 0x74
 80082ac:	da08      	bge.n	80082c0 <sniprintf+0x20>
 80082ae:	238b      	movs	r3, #139	@ 0x8b
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	b01d      	add	sp, #116	@ 0x74
 80082b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082bc:	b002      	add	sp, #8
 80082be:	4770      	bx	lr
 80082c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80082c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80082ce:	bf0c      	ite	eq
 80082d0:	4623      	moveq	r3, r4
 80082d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	9307      	str	r3, [sp, #28]
 80082da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082de:	9002      	str	r0, [sp, #8]
 80082e0:	9006      	str	r0, [sp, #24]
 80082e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082e6:	4628      	mov	r0, r5
 80082e8:	ab21      	add	r3, sp, #132	@ 0x84
 80082ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80082ec:	a902      	add	r1, sp, #8
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	f002 f980 	bl	800a5f4 <_svfiprintf_r>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	bfbc      	itt	lt
 80082f8:	238b      	movlt	r3, #139	@ 0x8b
 80082fa:	602b      	strlt	r3, [r5, #0]
 80082fc:	2c00      	cmp	r4, #0
 80082fe:	d0da      	beq.n	80082b6 <sniprintf+0x16>
 8008300:	2200      	movs	r2, #0
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	701a      	strb	r2, [r3, #0]
 8008306:	e7d6      	b.n	80082b6 <sniprintf+0x16>
 8008308:	200001a4 	.word	0x200001a4

0800830c <siprintf>:
 800830c:	b40e      	push	{r1, r2, r3}
 800830e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008312:	b510      	push	{r4, lr}
 8008314:	2400      	movs	r4, #0
 8008316:	b09d      	sub	sp, #116	@ 0x74
 8008318:	ab1f      	add	r3, sp, #124	@ 0x7c
 800831a:	9002      	str	r0, [sp, #8]
 800831c:	9006      	str	r0, [sp, #24]
 800831e:	9107      	str	r1, [sp, #28]
 8008320:	9104      	str	r1, [sp, #16]
 8008322:	4809      	ldr	r0, [pc, #36]	@ (8008348 <siprintf+0x3c>)
 8008324:	4909      	ldr	r1, [pc, #36]	@ (800834c <siprintf+0x40>)
 8008326:	f853 2b04 	ldr.w	r2, [r3], #4
 800832a:	9105      	str	r1, [sp, #20]
 800832c:	6800      	ldr	r0, [r0, #0]
 800832e:	a902      	add	r1, sp, #8
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008334:	f002 f95e 	bl	800a5f4 <_svfiprintf_r>
 8008338:	9b02      	ldr	r3, [sp, #8]
 800833a:	701c      	strb	r4, [r3, #0]
 800833c:	b01d      	add	sp, #116	@ 0x74
 800833e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008342:	b003      	add	sp, #12
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	200001a4 	.word	0x200001a4
 800834c:	ffff0208 	.word	0xffff0208

08008350 <__sread>:
 8008350:	b510      	push	{r4, lr}
 8008352:	460c      	mov	r4, r1
 8008354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008358:	f000 f902 	bl	8008560 <_read_r>
 800835c:	2800      	cmp	r0, #0
 800835e:	bfab      	itete	ge
 8008360:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008362:	89a3      	ldrhlt	r3, [r4, #12]
 8008364:	181b      	addge	r3, r3, r0
 8008366:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800836a:	bfac      	ite	ge
 800836c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800836e:	81a3      	strhlt	r3, [r4, #12]
 8008370:	bd10      	pop	{r4, pc}

08008372 <__swrite>:
 8008372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008376:	461f      	mov	r7, r3
 8008378:	898b      	ldrh	r3, [r1, #12]
 800837a:	4605      	mov	r5, r0
 800837c:	05db      	lsls	r3, r3, #23
 800837e:	460c      	mov	r4, r1
 8008380:	4616      	mov	r6, r2
 8008382:	d505      	bpl.n	8008390 <__swrite+0x1e>
 8008384:	2302      	movs	r3, #2
 8008386:	2200      	movs	r2, #0
 8008388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838c:	f000 f8d6 	bl	800853c <_lseek_r>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	4632      	mov	r2, r6
 8008394:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008398:	81a3      	strh	r3, [r4, #12]
 800839a:	4628      	mov	r0, r5
 800839c:	463b      	mov	r3, r7
 800839e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083a6:	f000 b8ed 	b.w	8008584 <_write_r>

080083aa <__sseek>:
 80083aa:	b510      	push	{r4, lr}
 80083ac:	460c      	mov	r4, r1
 80083ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b2:	f000 f8c3 	bl	800853c <_lseek_r>
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	bf15      	itete	ne
 80083bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083c6:	81a3      	strheq	r3, [r4, #12]
 80083c8:	bf18      	it	ne
 80083ca:	81a3      	strhne	r3, [r4, #12]
 80083cc:	bd10      	pop	{r4, pc}

080083ce <__sclose>:
 80083ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d2:	f000 b8a3 	b.w	800851c <_close_r>

080083d6 <memset>:
 80083d6:	4603      	mov	r3, r0
 80083d8:	4402      	add	r2, r0
 80083da:	4293      	cmp	r3, r2
 80083dc:	d100      	bne.n	80083e0 <memset+0xa>
 80083de:	4770      	bx	lr
 80083e0:	f803 1b01 	strb.w	r1, [r3], #1
 80083e4:	e7f9      	b.n	80083da <memset+0x4>

080083e6 <strncmp>:
 80083e6:	b510      	push	{r4, lr}
 80083e8:	b16a      	cbz	r2, 8008406 <strncmp+0x20>
 80083ea:	3901      	subs	r1, #1
 80083ec:	1884      	adds	r4, r0, r2
 80083ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d103      	bne.n	8008402 <strncmp+0x1c>
 80083fa:	42a0      	cmp	r0, r4
 80083fc:	d001      	beq.n	8008402 <strncmp+0x1c>
 80083fe:	2a00      	cmp	r2, #0
 8008400:	d1f5      	bne.n	80083ee <strncmp+0x8>
 8008402:	1ad0      	subs	r0, r2, r3
 8008404:	bd10      	pop	{r4, pc}
 8008406:	4610      	mov	r0, r2
 8008408:	e7fc      	b.n	8008404 <strncmp+0x1e>

0800840a <strncpy>:
 800840a:	4603      	mov	r3, r0
 800840c:	b510      	push	{r4, lr}
 800840e:	3901      	subs	r1, #1
 8008410:	b132      	cbz	r2, 8008420 <strncpy+0x16>
 8008412:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008416:	3a01      	subs	r2, #1
 8008418:	f803 4b01 	strb.w	r4, [r3], #1
 800841c:	2c00      	cmp	r4, #0
 800841e:	d1f7      	bne.n	8008410 <strncpy+0x6>
 8008420:	2100      	movs	r1, #0
 8008422:	441a      	add	r2, r3
 8008424:	4293      	cmp	r3, r2
 8008426:	d100      	bne.n	800842a <strncpy+0x20>
 8008428:	bd10      	pop	{r4, pc}
 800842a:	f803 1b01 	strb.w	r1, [r3], #1
 800842e:	e7f9      	b.n	8008424 <strncpy+0x1a>

08008430 <strtok>:
 8008430:	4b16      	ldr	r3, [pc, #88]	@ (800848c <strtok+0x5c>)
 8008432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008436:	681f      	ldr	r7, [r3, #0]
 8008438:	4605      	mov	r5, r0
 800843a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800843c:	460e      	mov	r6, r1
 800843e:	b9ec      	cbnz	r4, 800847c <strtok+0x4c>
 8008440:	2050      	movs	r0, #80	@ 0x50
 8008442:	f001 fb07 	bl	8009a54 <malloc>
 8008446:	4602      	mov	r2, r0
 8008448:	6478      	str	r0, [r7, #68]	@ 0x44
 800844a:	b920      	cbnz	r0, 8008456 <strtok+0x26>
 800844c:	215b      	movs	r1, #91	@ 0x5b
 800844e:	4b10      	ldr	r3, [pc, #64]	@ (8008490 <strtok+0x60>)
 8008450:	4810      	ldr	r0, [pc, #64]	@ (8008494 <strtok+0x64>)
 8008452:	f000 f901 	bl	8008658 <__assert_func>
 8008456:	e9c0 4400 	strd	r4, r4, [r0]
 800845a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800845e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008462:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008466:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800846a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800846e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008472:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008476:	6184      	str	r4, [r0, #24]
 8008478:	7704      	strb	r4, [r0, #28]
 800847a:	6244      	str	r4, [r0, #36]	@ 0x24
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008482:	2301      	movs	r3, #1
 8008484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008488:	f000 b806 	b.w	8008498 <__strtok_r>
 800848c:	200001a4 	.word	0x200001a4
 8008490:	0800b4da 	.word	0x0800b4da
 8008494:	0800b57f 	.word	0x0800b57f

08008498 <__strtok_r>:
 8008498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800849a:	4604      	mov	r4, r0
 800849c:	b908      	cbnz	r0, 80084a2 <__strtok_r+0xa>
 800849e:	6814      	ldr	r4, [r2, #0]
 80084a0:	b144      	cbz	r4, 80084b4 <__strtok_r+0x1c>
 80084a2:	460f      	mov	r7, r1
 80084a4:	4620      	mov	r0, r4
 80084a6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80084aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80084ae:	b91e      	cbnz	r6, 80084b8 <__strtok_r+0x20>
 80084b0:	b965      	cbnz	r5, 80084cc <__strtok_r+0x34>
 80084b2:	6015      	str	r5, [r2, #0]
 80084b4:	2000      	movs	r0, #0
 80084b6:	e005      	b.n	80084c4 <__strtok_r+0x2c>
 80084b8:	42b5      	cmp	r5, r6
 80084ba:	d1f6      	bne.n	80084aa <__strtok_r+0x12>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1f0      	bne.n	80084a2 <__strtok_r+0xa>
 80084c0:	6014      	str	r4, [r2, #0]
 80084c2:	7003      	strb	r3, [r0, #0]
 80084c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c6:	461c      	mov	r4, r3
 80084c8:	e00c      	b.n	80084e4 <__strtok_r+0x4c>
 80084ca:	b91d      	cbnz	r5, 80084d4 <__strtok_r+0x3c>
 80084cc:	460e      	mov	r6, r1
 80084ce:	4627      	mov	r7, r4
 80084d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084d4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80084d8:	42ab      	cmp	r3, r5
 80084da:	d1f6      	bne.n	80084ca <__strtok_r+0x32>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0f2      	beq.n	80084c6 <__strtok_r+0x2e>
 80084e0:	2300      	movs	r3, #0
 80084e2:	703b      	strb	r3, [r7, #0]
 80084e4:	6014      	str	r4, [r2, #0]
 80084e6:	e7ed      	b.n	80084c4 <__strtok_r+0x2c>

080084e8 <strstr>:
 80084e8:	780a      	ldrb	r2, [r1, #0]
 80084ea:	b570      	push	{r4, r5, r6, lr}
 80084ec:	b96a      	cbnz	r2, 800850a <strstr+0x22>
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d109      	bne.n	8008508 <strstr+0x20>
 80084f4:	460c      	mov	r4, r1
 80084f6:	4605      	mov	r5, r0
 80084f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0f6      	beq.n	80084ee <strstr+0x6>
 8008500:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008504:	429e      	cmp	r6, r3
 8008506:	d0f7      	beq.n	80084f8 <strstr+0x10>
 8008508:	3001      	adds	r0, #1
 800850a:	7803      	ldrb	r3, [r0, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1ef      	bne.n	80084f0 <strstr+0x8>
 8008510:	4618      	mov	r0, r3
 8008512:	e7ec      	b.n	80084ee <strstr+0x6>

08008514 <_localeconv_r>:
 8008514:	4800      	ldr	r0, [pc, #0]	@ (8008518 <_localeconv_r+0x4>)
 8008516:	4770      	bx	lr
 8008518:	20000128 	.word	0x20000128

0800851c <_close_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	2300      	movs	r3, #0
 8008520:	4d05      	ldr	r5, [pc, #20]	@ (8008538 <_close_r+0x1c>)
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	602b      	str	r3, [r5, #0]
 8008528:	f7fa f999 	bl	800285e <_close>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_close_r+0x1a>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_close_r+0x1a>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20000964 	.word	0x20000964

0800853c <_lseek_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	4611      	mov	r1, r2
 8008544:	2200      	movs	r2, #0
 8008546:	4d05      	ldr	r5, [pc, #20]	@ (800855c <_lseek_r+0x20>)
 8008548:	602a      	str	r2, [r5, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	f7fa f9ab 	bl	80028a6 <_lseek>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_lseek_r+0x1e>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b103      	cbz	r3, 800855a <_lseek_r+0x1e>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	20000964 	.word	0x20000964

08008560 <_read_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	4611      	mov	r1, r2
 8008568:	2200      	movs	r2, #0
 800856a:	4d05      	ldr	r5, [pc, #20]	@ (8008580 <_read_r+0x20>)
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f7fa f93c 	bl	80027ec <_read>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_read_r+0x1e>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_read_r+0x1e>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20000964 	.word	0x20000964

08008584 <_write_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4604      	mov	r4, r0
 8008588:	4608      	mov	r0, r1
 800858a:	4611      	mov	r1, r2
 800858c:	2200      	movs	r2, #0
 800858e:	4d05      	ldr	r5, [pc, #20]	@ (80085a4 <_write_r+0x20>)
 8008590:	602a      	str	r2, [r5, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	f7fa f947 	bl	8002826 <_write>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d102      	bne.n	80085a2 <_write_r+0x1e>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	b103      	cbz	r3, 80085a2 <_write_r+0x1e>
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	20000964 	.word	0x20000964

080085a8 <__errno>:
 80085a8:	4b01      	ldr	r3, [pc, #4]	@ (80085b0 <__errno+0x8>)
 80085aa:	6818      	ldr	r0, [r3, #0]
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	200001a4 	.word	0x200001a4

080085b4 <__libc_init_array>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	2600      	movs	r6, #0
 80085b8:	4d0c      	ldr	r5, [pc, #48]	@ (80085ec <__libc_init_array+0x38>)
 80085ba:	4c0d      	ldr	r4, [pc, #52]	@ (80085f0 <__libc_init_array+0x3c>)
 80085bc:	1b64      	subs	r4, r4, r5
 80085be:	10a4      	asrs	r4, r4, #2
 80085c0:	42a6      	cmp	r6, r4
 80085c2:	d109      	bne.n	80085d8 <__libc_init_array+0x24>
 80085c4:	f002 fe0c 	bl	800b1e0 <_init>
 80085c8:	2600      	movs	r6, #0
 80085ca:	4d0a      	ldr	r5, [pc, #40]	@ (80085f4 <__libc_init_array+0x40>)
 80085cc:	4c0a      	ldr	r4, [pc, #40]	@ (80085f8 <__libc_init_array+0x44>)
 80085ce:	1b64      	subs	r4, r4, r5
 80085d0:	10a4      	asrs	r4, r4, #2
 80085d2:	42a6      	cmp	r6, r4
 80085d4:	d105      	bne.n	80085e2 <__libc_init_array+0x2e>
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085dc:	4798      	blx	r3
 80085de:	3601      	adds	r6, #1
 80085e0:	e7ee      	b.n	80085c0 <__libc_init_array+0xc>
 80085e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e6:	4798      	blx	r3
 80085e8:	3601      	adds	r6, #1
 80085ea:	e7f2      	b.n	80085d2 <__libc_init_array+0x1e>
 80085ec:	0800b9d0 	.word	0x0800b9d0
 80085f0:	0800b9d0 	.word	0x0800b9d0
 80085f4:	0800b9d0 	.word	0x0800b9d0
 80085f8:	0800b9d4 	.word	0x0800b9d4

080085fc <__retarget_lock_init_recursive>:
 80085fc:	4770      	bx	lr

080085fe <__retarget_lock_acquire_recursive>:
 80085fe:	4770      	bx	lr

08008600 <__retarget_lock_release_recursive>:
 8008600:	4770      	bx	lr

08008602 <strcpy>:
 8008602:	4603      	mov	r3, r0
 8008604:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008608:	f803 2b01 	strb.w	r2, [r3], #1
 800860c:	2a00      	cmp	r2, #0
 800860e:	d1f9      	bne.n	8008604 <strcpy+0x2>
 8008610:	4770      	bx	lr

08008612 <memchr>:
 8008612:	4603      	mov	r3, r0
 8008614:	b510      	push	{r4, lr}
 8008616:	b2c9      	uxtb	r1, r1
 8008618:	4402      	add	r2, r0
 800861a:	4293      	cmp	r3, r2
 800861c:	4618      	mov	r0, r3
 800861e:	d101      	bne.n	8008624 <memchr+0x12>
 8008620:	2000      	movs	r0, #0
 8008622:	e003      	b.n	800862c <memchr+0x1a>
 8008624:	7804      	ldrb	r4, [r0, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	428c      	cmp	r4, r1
 800862a:	d1f6      	bne.n	800861a <memchr+0x8>
 800862c:	bd10      	pop	{r4, pc}

0800862e <memcpy>:
 800862e:	440a      	add	r2, r1
 8008630:	4291      	cmp	r1, r2
 8008632:	f100 33ff 	add.w	r3, r0, #4294967295
 8008636:	d100      	bne.n	800863a <memcpy+0xc>
 8008638:	4770      	bx	lr
 800863a:	b510      	push	{r4, lr}
 800863c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008640:	4291      	cmp	r1, r2
 8008642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008646:	d1f9      	bne.n	800863c <memcpy+0xe>
 8008648:	bd10      	pop	{r4, pc}
	...

0800864c <nan>:
 800864c:	2000      	movs	r0, #0
 800864e:	4901      	ldr	r1, [pc, #4]	@ (8008654 <nan+0x8>)
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	7ff80000 	.word	0x7ff80000

08008658 <__assert_func>:
 8008658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800865a:	4614      	mov	r4, r2
 800865c:	461a      	mov	r2, r3
 800865e:	4b09      	ldr	r3, [pc, #36]	@ (8008684 <__assert_func+0x2c>)
 8008660:	4605      	mov	r5, r0
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68d8      	ldr	r0, [r3, #12]
 8008666:	b14c      	cbz	r4, 800867c <__assert_func+0x24>
 8008668:	4b07      	ldr	r3, [pc, #28]	@ (8008688 <__assert_func+0x30>)
 800866a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800866e:	9100      	str	r1, [sp, #0]
 8008670:	462b      	mov	r3, r5
 8008672:	4906      	ldr	r1, [pc, #24]	@ (800868c <__assert_func+0x34>)
 8008674:	f002 f962 	bl	800a93c <fiprintf>
 8008678:	f002 f99c 	bl	800a9b4 <abort>
 800867c:	4b04      	ldr	r3, [pc, #16]	@ (8008690 <__assert_func+0x38>)
 800867e:	461c      	mov	r4, r3
 8008680:	e7f3      	b.n	800866a <__assert_func+0x12>
 8008682:	bf00      	nop
 8008684:	200001a4 	.word	0x200001a4
 8008688:	0800b5e1 	.word	0x0800b5e1
 800868c:	0800b5ee 	.word	0x0800b5ee
 8008690:	0800b61c 	.word	0x0800b61c

08008694 <quorem>:
 8008694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008698:	6903      	ldr	r3, [r0, #16]
 800869a:	690c      	ldr	r4, [r1, #16]
 800869c:	4607      	mov	r7, r0
 800869e:	42a3      	cmp	r3, r4
 80086a0:	db7e      	blt.n	80087a0 <quorem+0x10c>
 80086a2:	3c01      	subs	r4, #1
 80086a4:	00a3      	lsls	r3, r4, #2
 80086a6:	f100 0514 	add.w	r5, r0, #20
 80086aa:	f101 0814 	add.w	r8, r1, #20
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086be:	3301      	adds	r3, #1
 80086c0:	429a      	cmp	r2, r3
 80086c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80086c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80086ca:	d32e      	bcc.n	800872a <quorem+0x96>
 80086cc:	f04f 0a00 	mov.w	sl, #0
 80086d0:	46c4      	mov	ip, r8
 80086d2:	46ae      	mov	lr, r5
 80086d4:	46d3      	mov	fp, sl
 80086d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80086da:	b298      	uxth	r0, r3
 80086dc:	fb06 a000 	mla	r0, r6, r0, sl
 80086e0:	0c1b      	lsrs	r3, r3, #16
 80086e2:	0c02      	lsrs	r2, r0, #16
 80086e4:	fb06 2303 	mla	r3, r6, r3, r2
 80086e8:	f8de 2000 	ldr.w	r2, [lr]
 80086ec:	b280      	uxth	r0, r0
 80086ee:	b292      	uxth	r2, r2
 80086f0:	1a12      	subs	r2, r2, r0
 80086f2:	445a      	add	r2, fp
 80086f4:	f8de 0000 	ldr.w	r0, [lr]
 80086f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008702:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008706:	b292      	uxth	r2, r2
 8008708:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800870c:	45e1      	cmp	r9, ip
 800870e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008712:	f84e 2b04 	str.w	r2, [lr], #4
 8008716:	d2de      	bcs.n	80086d6 <quorem+0x42>
 8008718:	9b00      	ldr	r3, [sp, #0]
 800871a:	58eb      	ldr	r3, [r5, r3]
 800871c:	b92b      	cbnz	r3, 800872a <quorem+0x96>
 800871e:	9b01      	ldr	r3, [sp, #4]
 8008720:	3b04      	subs	r3, #4
 8008722:	429d      	cmp	r5, r3
 8008724:	461a      	mov	r2, r3
 8008726:	d32f      	bcc.n	8008788 <quorem+0xf4>
 8008728:	613c      	str	r4, [r7, #16]
 800872a:	4638      	mov	r0, r7
 800872c:	f001 fd16 	bl	800a15c <__mcmp>
 8008730:	2800      	cmp	r0, #0
 8008732:	db25      	blt.n	8008780 <quorem+0xec>
 8008734:	4629      	mov	r1, r5
 8008736:	2000      	movs	r0, #0
 8008738:	f858 2b04 	ldr.w	r2, [r8], #4
 800873c:	f8d1 c000 	ldr.w	ip, [r1]
 8008740:	fa1f fe82 	uxth.w	lr, r2
 8008744:	fa1f f38c 	uxth.w	r3, ip
 8008748:	eba3 030e 	sub.w	r3, r3, lr
 800874c:	4403      	add	r3, r0
 800874e:	0c12      	lsrs	r2, r2, #16
 8008750:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008754:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008758:	b29b      	uxth	r3, r3
 800875a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800875e:	45c1      	cmp	r9, r8
 8008760:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008764:	f841 3b04 	str.w	r3, [r1], #4
 8008768:	d2e6      	bcs.n	8008738 <quorem+0xa4>
 800876a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800876e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008772:	b922      	cbnz	r2, 800877e <quorem+0xea>
 8008774:	3b04      	subs	r3, #4
 8008776:	429d      	cmp	r5, r3
 8008778:	461a      	mov	r2, r3
 800877a:	d30b      	bcc.n	8008794 <quorem+0x100>
 800877c:	613c      	str	r4, [r7, #16]
 800877e:	3601      	adds	r6, #1
 8008780:	4630      	mov	r0, r6
 8008782:	b003      	add	sp, #12
 8008784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008788:	6812      	ldr	r2, [r2, #0]
 800878a:	3b04      	subs	r3, #4
 800878c:	2a00      	cmp	r2, #0
 800878e:	d1cb      	bne.n	8008728 <quorem+0x94>
 8008790:	3c01      	subs	r4, #1
 8008792:	e7c6      	b.n	8008722 <quorem+0x8e>
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	3b04      	subs	r3, #4
 8008798:	2a00      	cmp	r2, #0
 800879a:	d1ef      	bne.n	800877c <quorem+0xe8>
 800879c:	3c01      	subs	r4, #1
 800879e:	e7ea      	b.n	8008776 <quorem+0xe2>
 80087a0:	2000      	movs	r0, #0
 80087a2:	e7ee      	b.n	8008782 <quorem+0xee>
 80087a4:	0000      	movs	r0, r0
	...

080087a8 <_dtoa_r>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	4614      	mov	r4, r2
 80087ae:	461d      	mov	r5, r3
 80087b0:	69c7      	ldr	r7, [r0, #28]
 80087b2:	b097      	sub	sp, #92	@ 0x5c
 80087b4:	4681      	mov	r9, r0
 80087b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80087ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80087bc:	b97f      	cbnz	r7, 80087de <_dtoa_r+0x36>
 80087be:	2010      	movs	r0, #16
 80087c0:	f001 f948 	bl	8009a54 <malloc>
 80087c4:	4602      	mov	r2, r0
 80087c6:	f8c9 001c 	str.w	r0, [r9, #28]
 80087ca:	b920      	cbnz	r0, 80087d6 <_dtoa_r+0x2e>
 80087cc:	21ef      	movs	r1, #239	@ 0xef
 80087ce:	4bac      	ldr	r3, [pc, #688]	@ (8008a80 <_dtoa_r+0x2d8>)
 80087d0:	48ac      	ldr	r0, [pc, #688]	@ (8008a84 <_dtoa_r+0x2dc>)
 80087d2:	f7ff ff41 	bl	8008658 <__assert_func>
 80087d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80087da:	6007      	str	r7, [r0, #0]
 80087dc:	60c7      	str	r7, [r0, #12]
 80087de:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087e2:	6819      	ldr	r1, [r3, #0]
 80087e4:	b159      	cbz	r1, 80087fe <_dtoa_r+0x56>
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	2301      	movs	r3, #1
 80087ea:	4093      	lsls	r3, r2
 80087ec:	604a      	str	r2, [r1, #4]
 80087ee:	608b      	str	r3, [r1, #8]
 80087f0:	4648      	mov	r0, r9
 80087f2:	f001 fa37 	bl	8009c64 <_Bfree>
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	1e2b      	subs	r3, r5, #0
 8008800:	bfaf      	iteee	ge
 8008802:	2300      	movge	r3, #0
 8008804:	2201      	movlt	r2, #1
 8008806:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800880a:	9307      	strlt	r3, [sp, #28]
 800880c:	bfa8      	it	ge
 800880e:	6033      	strge	r3, [r6, #0]
 8008810:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008814:	4b9c      	ldr	r3, [pc, #624]	@ (8008a88 <_dtoa_r+0x2e0>)
 8008816:	bfb8      	it	lt
 8008818:	6032      	strlt	r2, [r6, #0]
 800881a:	ea33 0308 	bics.w	r3, r3, r8
 800881e:	d112      	bne.n	8008846 <_dtoa_r+0x9e>
 8008820:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008824:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800882c:	4323      	orrs	r3, r4
 800882e:	f000 855e 	beq.w	80092ee <_dtoa_r+0xb46>
 8008832:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008834:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008a8c <_dtoa_r+0x2e4>
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 8560 	beq.w	80092fe <_dtoa_r+0xb56>
 800883e:	f10a 0303 	add.w	r3, sl, #3
 8008842:	f000 bd5a 	b.w	80092fa <_dtoa_r+0xb52>
 8008846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800884a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800884e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008852:	2200      	movs	r2, #0
 8008854:	2300      	movs	r3, #0
 8008856:	f7f8 f8a7 	bl	80009a8 <__aeabi_dcmpeq>
 800885a:	4607      	mov	r7, r0
 800885c:	b158      	cbz	r0, 8008876 <_dtoa_r+0xce>
 800885e:	2301      	movs	r3, #1
 8008860:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008866:	b113      	cbz	r3, 800886e <_dtoa_r+0xc6>
 8008868:	4b89      	ldr	r3, [pc, #548]	@ (8008a90 <_dtoa_r+0x2e8>)
 800886a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008a94 <_dtoa_r+0x2ec>
 8008872:	f000 bd44 	b.w	80092fe <_dtoa_r+0xb56>
 8008876:	ab14      	add	r3, sp, #80	@ 0x50
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	ab15      	add	r3, sp, #84	@ 0x54
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	4648      	mov	r0, r9
 8008880:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008884:	f001 fd82 	bl	800a38c <__d2b>
 8008888:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800888c:	9003      	str	r0, [sp, #12]
 800888e:	2e00      	cmp	r6, #0
 8008890:	d078      	beq.n	8008984 <_dtoa_r+0x1dc>
 8008892:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008898:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800889c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80088a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80088a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80088aa:	4619      	mov	r1, r3
 80088ac:	2200      	movs	r2, #0
 80088ae:	4b7a      	ldr	r3, [pc, #488]	@ (8008a98 <_dtoa_r+0x2f0>)
 80088b0:	f7f7 fc5a 	bl	8000168 <__aeabi_dsub>
 80088b4:	a36c      	add	r3, pc, #432	@ (adr r3, 8008a68 <_dtoa_r+0x2c0>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f7f7 fe0d 	bl	80004d8 <__aeabi_dmul>
 80088be:	a36c      	add	r3, pc, #432	@ (adr r3, 8008a70 <_dtoa_r+0x2c8>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 fc52 	bl	800016c <__adddf3>
 80088c8:	4604      	mov	r4, r0
 80088ca:	4630      	mov	r0, r6
 80088cc:	460d      	mov	r5, r1
 80088ce:	f7f7 fd99 	bl	8000404 <__aeabi_i2d>
 80088d2:	a369      	add	r3, pc, #420	@ (adr r3, 8008a78 <_dtoa_r+0x2d0>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 fdfe 	bl	80004d8 <__aeabi_dmul>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4620      	mov	r0, r4
 80088e2:	4629      	mov	r1, r5
 80088e4:	f7f7 fc42 	bl	800016c <__adddf3>
 80088e8:	4604      	mov	r4, r0
 80088ea:	460d      	mov	r5, r1
 80088ec:	f7f8 f8a4 	bl	8000a38 <__aeabi_d2iz>
 80088f0:	2200      	movs	r2, #0
 80088f2:	4607      	mov	r7, r0
 80088f4:	2300      	movs	r3, #0
 80088f6:	4620      	mov	r0, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f8 f85f 	bl	80009bc <__aeabi_dcmplt>
 80088fe:	b140      	cbz	r0, 8008912 <_dtoa_r+0x16a>
 8008900:	4638      	mov	r0, r7
 8008902:	f7f7 fd7f 	bl	8000404 <__aeabi_i2d>
 8008906:	4622      	mov	r2, r4
 8008908:	462b      	mov	r3, r5
 800890a:	f7f8 f84d 	bl	80009a8 <__aeabi_dcmpeq>
 800890e:	b900      	cbnz	r0, 8008912 <_dtoa_r+0x16a>
 8008910:	3f01      	subs	r7, #1
 8008912:	2f16      	cmp	r7, #22
 8008914:	d854      	bhi.n	80089c0 <_dtoa_r+0x218>
 8008916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800891a:	4b60      	ldr	r3, [pc, #384]	@ (8008a9c <_dtoa_r+0x2f4>)
 800891c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f8 f84a 	bl	80009bc <__aeabi_dcmplt>
 8008928:	2800      	cmp	r0, #0
 800892a:	d04b      	beq.n	80089c4 <_dtoa_r+0x21c>
 800892c:	2300      	movs	r3, #0
 800892e:	3f01      	subs	r7, #1
 8008930:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008932:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008934:	1b9b      	subs	r3, r3, r6
 8008936:	1e5a      	subs	r2, r3, #1
 8008938:	bf49      	itett	mi
 800893a:	f1c3 0301 	rsbmi	r3, r3, #1
 800893e:	2300      	movpl	r3, #0
 8008940:	9304      	strmi	r3, [sp, #16]
 8008942:	2300      	movmi	r3, #0
 8008944:	9209      	str	r2, [sp, #36]	@ 0x24
 8008946:	bf54      	ite	pl
 8008948:	9304      	strpl	r3, [sp, #16]
 800894a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800894c:	2f00      	cmp	r7, #0
 800894e:	db3b      	blt.n	80089c8 <_dtoa_r+0x220>
 8008950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008952:	970e      	str	r7, [sp, #56]	@ 0x38
 8008954:	443b      	add	r3, r7
 8008956:	9309      	str	r3, [sp, #36]	@ 0x24
 8008958:	2300      	movs	r3, #0
 800895a:	930a      	str	r3, [sp, #40]	@ 0x28
 800895c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800895e:	2b09      	cmp	r3, #9
 8008960:	d865      	bhi.n	8008a2e <_dtoa_r+0x286>
 8008962:	2b05      	cmp	r3, #5
 8008964:	bfc4      	itt	gt
 8008966:	3b04      	subgt	r3, #4
 8008968:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800896a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800896c:	bfc8      	it	gt
 800896e:	2400      	movgt	r4, #0
 8008970:	f1a3 0302 	sub.w	r3, r3, #2
 8008974:	bfd8      	it	le
 8008976:	2401      	movle	r4, #1
 8008978:	2b03      	cmp	r3, #3
 800897a:	d864      	bhi.n	8008a46 <_dtoa_r+0x29e>
 800897c:	e8df f003 	tbb	[pc, r3]
 8008980:	2c385553 	.word	0x2c385553
 8008984:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008988:	441e      	add	r6, r3
 800898a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800898e:	2b20      	cmp	r3, #32
 8008990:	bfc1      	itttt	gt
 8008992:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008996:	fa08 f803 	lslgt.w	r8, r8, r3
 800899a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800899e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80089a2:	bfd6      	itet	le
 80089a4:	f1c3 0320 	rsble	r3, r3, #32
 80089a8:	ea48 0003 	orrgt.w	r0, r8, r3
 80089ac:	fa04 f003 	lslle.w	r0, r4, r3
 80089b0:	f7f7 fd18 	bl	80003e4 <__aeabi_ui2d>
 80089b4:	2201      	movs	r2, #1
 80089b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80089ba:	3e01      	subs	r6, #1
 80089bc:	9212      	str	r2, [sp, #72]	@ 0x48
 80089be:	e774      	b.n	80088aa <_dtoa_r+0x102>
 80089c0:	2301      	movs	r3, #1
 80089c2:	e7b5      	b.n	8008930 <_dtoa_r+0x188>
 80089c4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80089c6:	e7b4      	b.n	8008932 <_dtoa_r+0x18a>
 80089c8:	9b04      	ldr	r3, [sp, #16]
 80089ca:	1bdb      	subs	r3, r3, r7
 80089cc:	9304      	str	r3, [sp, #16]
 80089ce:	427b      	negs	r3, r7
 80089d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80089d2:	2300      	movs	r3, #0
 80089d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80089d6:	e7c1      	b.n	800895c <_dtoa_r+0x1b4>
 80089d8:	2301      	movs	r3, #1
 80089da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089de:	eb07 0b03 	add.w	fp, r7, r3
 80089e2:	f10b 0301 	add.w	r3, fp, #1
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	9308      	str	r3, [sp, #32]
 80089ea:	bfb8      	it	lt
 80089ec:	2301      	movlt	r3, #1
 80089ee:	e006      	b.n	80089fe <_dtoa_r+0x256>
 80089f0:	2301      	movs	r3, #1
 80089f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dd28      	ble.n	8008a4c <_dtoa_r+0x2a4>
 80089fa:	469b      	mov	fp, r3
 80089fc:	9308      	str	r3, [sp, #32]
 80089fe:	2100      	movs	r1, #0
 8008a00:	2204      	movs	r2, #4
 8008a02:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008a06:	f102 0514 	add.w	r5, r2, #20
 8008a0a:	429d      	cmp	r5, r3
 8008a0c:	d926      	bls.n	8008a5c <_dtoa_r+0x2b4>
 8008a0e:	6041      	str	r1, [r0, #4]
 8008a10:	4648      	mov	r0, r9
 8008a12:	f001 f8e7 	bl	8009be4 <_Balloc>
 8008a16:	4682      	mov	sl, r0
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d143      	bne.n	8008aa4 <_dtoa_r+0x2fc>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008a22:	4b1f      	ldr	r3, [pc, #124]	@ (8008aa0 <_dtoa_r+0x2f8>)
 8008a24:	e6d4      	b.n	80087d0 <_dtoa_r+0x28>
 8008a26:	2300      	movs	r3, #0
 8008a28:	e7e3      	b.n	80089f2 <_dtoa_r+0x24a>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e7d5      	b.n	80089da <_dtoa_r+0x232>
 8008a2e:	2401      	movs	r4, #1
 8008a30:	2300      	movs	r3, #0
 8008a32:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a34:	9320      	str	r3, [sp, #128]	@ 0x80
 8008a36:	f04f 3bff 	mov.w	fp, #4294967295
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2312      	movs	r3, #18
 8008a3e:	f8cd b020 	str.w	fp, [sp, #32]
 8008a42:	9221      	str	r2, [sp, #132]	@ 0x84
 8008a44:	e7db      	b.n	80089fe <_dtoa_r+0x256>
 8008a46:	2301      	movs	r3, #1
 8008a48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a4a:	e7f4      	b.n	8008a36 <_dtoa_r+0x28e>
 8008a4c:	f04f 0b01 	mov.w	fp, #1
 8008a50:	465b      	mov	r3, fp
 8008a52:	f8cd b020 	str.w	fp, [sp, #32]
 8008a56:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008a5a:	e7d0      	b.n	80089fe <_dtoa_r+0x256>
 8008a5c:	3101      	adds	r1, #1
 8008a5e:	0052      	lsls	r2, r2, #1
 8008a60:	e7d1      	b.n	8008a06 <_dtoa_r+0x25e>
 8008a62:	bf00      	nop
 8008a64:	f3af 8000 	nop.w
 8008a68:	636f4361 	.word	0x636f4361
 8008a6c:	3fd287a7 	.word	0x3fd287a7
 8008a70:	8b60c8b3 	.word	0x8b60c8b3
 8008a74:	3fc68a28 	.word	0x3fc68a28
 8008a78:	509f79fb 	.word	0x509f79fb
 8008a7c:	3fd34413 	.word	0x3fd34413
 8008a80:	0800b4da 	.word	0x0800b4da
 8008a84:	0800b62a 	.word	0x0800b62a
 8008a88:	7ff00000 	.word	0x7ff00000
 8008a8c:	0800b626 	.word	0x0800b626
 8008a90:	0800b55c 	.word	0x0800b55c
 8008a94:	0800b55b 	.word	0x0800b55b
 8008a98:	3ff80000 	.word	0x3ff80000
 8008a9c:	0800b7e8 	.word	0x0800b7e8
 8008aa0:	0800b682 	.word	0x0800b682
 8008aa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008aa8:	6018      	str	r0, [r3, #0]
 8008aaa:	9b08      	ldr	r3, [sp, #32]
 8008aac:	2b0e      	cmp	r3, #14
 8008aae:	f200 80a1 	bhi.w	8008bf4 <_dtoa_r+0x44c>
 8008ab2:	2c00      	cmp	r4, #0
 8008ab4:	f000 809e 	beq.w	8008bf4 <_dtoa_r+0x44c>
 8008ab8:	2f00      	cmp	r7, #0
 8008aba:	dd33      	ble.n	8008b24 <_dtoa_r+0x37c>
 8008abc:	4b9c      	ldr	r3, [pc, #624]	@ (8008d30 <_dtoa_r+0x588>)
 8008abe:	f007 020f 	and.w	r2, r7, #15
 8008ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ac6:	05f8      	lsls	r0, r7, #23
 8008ac8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008acc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008ad0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008ad4:	d516      	bpl.n	8008b04 <_dtoa_r+0x35c>
 8008ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ada:	4b96      	ldr	r3, [pc, #600]	@ (8008d34 <_dtoa_r+0x58c>)
 8008adc:	2603      	movs	r6, #3
 8008ade:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ae2:	f7f7 fe23 	bl	800072c <__aeabi_ddiv>
 8008ae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008aea:	f004 040f 	and.w	r4, r4, #15
 8008aee:	4d91      	ldr	r5, [pc, #580]	@ (8008d34 <_dtoa_r+0x58c>)
 8008af0:	b954      	cbnz	r4, 8008b08 <_dtoa_r+0x360>
 8008af2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008afa:	f7f7 fe17 	bl	800072c <__aeabi_ddiv>
 8008afe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b02:	e028      	b.n	8008b56 <_dtoa_r+0x3ae>
 8008b04:	2602      	movs	r6, #2
 8008b06:	e7f2      	b.n	8008aee <_dtoa_r+0x346>
 8008b08:	07e1      	lsls	r1, r4, #31
 8008b0a:	d508      	bpl.n	8008b1e <_dtoa_r+0x376>
 8008b0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b14:	f7f7 fce0 	bl	80004d8 <__aeabi_dmul>
 8008b18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b1c:	3601      	adds	r6, #1
 8008b1e:	1064      	asrs	r4, r4, #1
 8008b20:	3508      	adds	r5, #8
 8008b22:	e7e5      	b.n	8008af0 <_dtoa_r+0x348>
 8008b24:	f000 80af 	beq.w	8008c86 <_dtoa_r+0x4de>
 8008b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b2c:	427c      	negs	r4, r7
 8008b2e:	4b80      	ldr	r3, [pc, #512]	@ (8008d30 <_dtoa_r+0x588>)
 8008b30:	f004 020f 	and.w	r2, r4, #15
 8008b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f7f7 fccc 	bl	80004d8 <__aeabi_dmul>
 8008b40:	2602      	movs	r6, #2
 8008b42:	2300      	movs	r3, #0
 8008b44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b48:	4d7a      	ldr	r5, [pc, #488]	@ (8008d34 <_dtoa_r+0x58c>)
 8008b4a:	1124      	asrs	r4, r4, #4
 8008b4c:	2c00      	cmp	r4, #0
 8008b4e:	f040 808f 	bne.w	8008c70 <_dtoa_r+0x4c8>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1d3      	bne.n	8008afe <_dtoa_r+0x356>
 8008b56:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008b5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8094 	beq.w	8008c8a <_dtoa_r+0x4e2>
 8008b62:	2200      	movs	r2, #0
 8008b64:	4620      	mov	r0, r4
 8008b66:	4629      	mov	r1, r5
 8008b68:	4b73      	ldr	r3, [pc, #460]	@ (8008d38 <_dtoa_r+0x590>)
 8008b6a:	f7f7 ff27 	bl	80009bc <__aeabi_dcmplt>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f000 808b 	beq.w	8008c8a <_dtoa_r+0x4e2>
 8008b74:	9b08      	ldr	r3, [sp, #32]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 8087 	beq.w	8008c8a <_dtoa_r+0x4e2>
 8008b7c:	f1bb 0f00 	cmp.w	fp, #0
 8008b80:	dd34      	ble.n	8008bec <_dtoa_r+0x444>
 8008b82:	4620      	mov	r0, r4
 8008b84:	2200      	movs	r2, #0
 8008b86:	4629      	mov	r1, r5
 8008b88:	4b6c      	ldr	r3, [pc, #432]	@ (8008d3c <_dtoa_r+0x594>)
 8008b8a:	f7f7 fca5 	bl	80004d8 <__aeabi_dmul>
 8008b8e:	465c      	mov	r4, fp
 8008b90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b94:	f107 38ff 	add.w	r8, r7, #4294967295
 8008b98:	3601      	adds	r6, #1
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7f7 fc32 	bl	8000404 <__aeabi_i2d>
 8008ba0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ba4:	f7f7 fc98 	bl	80004d8 <__aeabi_dmul>
 8008ba8:	2200      	movs	r2, #0
 8008baa:	4b65      	ldr	r3, [pc, #404]	@ (8008d40 <_dtoa_r+0x598>)
 8008bac:	f7f7 fade 	bl	800016c <__adddf3>
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008bb6:	2c00      	cmp	r4, #0
 8008bb8:	d16a      	bne.n	8008c90 <_dtoa_r+0x4e8>
 8008bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4b60      	ldr	r3, [pc, #384]	@ (8008d44 <_dtoa_r+0x59c>)
 8008bc2:	f7f7 fad1 	bl	8000168 <__aeabi_dsub>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008bce:	462a      	mov	r2, r5
 8008bd0:	4633      	mov	r3, r6
 8008bd2:	f7f7 ff11 	bl	80009f8 <__aeabi_dcmpgt>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f040 8298 	bne.w	800910c <_dtoa_r+0x964>
 8008bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008be0:	462a      	mov	r2, r5
 8008be2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008be6:	f7f7 fee9 	bl	80009bc <__aeabi_dcmplt>
 8008bea:	bb38      	cbnz	r0, 8008c3c <_dtoa_r+0x494>
 8008bec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008bf0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008bf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f2c0 8157 	blt.w	8008eaa <_dtoa_r+0x702>
 8008bfc:	2f0e      	cmp	r7, #14
 8008bfe:	f300 8154 	bgt.w	8008eaa <_dtoa_r+0x702>
 8008c02:	4b4b      	ldr	r3, [pc, #300]	@ (8008d30 <_dtoa_r+0x588>)
 8008c04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f280 80e5 	bge.w	8008de2 <_dtoa_r+0x63a>
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f300 80e1 	bgt.w	8008de2 <_dtoa_r+0x63a>
 8008c20:	d10c      	bne.n	8008c3c <_dtoa_r+0x494>
 8008c22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c26:	2200      	movs	r2, #0
 8008c28:	4b46      	ldr	r3, [pc, #280]	@ (8008d44 <_dtoa_r+0x59c>)
 8008c2a:	f7f7 fc55 	bl	80004d8 <__aeabi_dmul>
 8008c2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c32:	f7f7 fed7 	bl	80009e4 <__aeabi_dcmpge>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f000 8266 	beq.w	8009108 <_dtoa_r+0x960>
 8008c3c:	2400      	movs	r4, #0
 8008c3e:	4625      	mov	r5, r4
 8008c40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c42:	4656      	mov	r6, sl
 8008c44:	ea6f 0803 	mvn.w	r8, r3
 8008c48:	2700      	movs	r7, #0
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	f001 f809 	bl	8009c64 <_Bfree>
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	f000 80bd 	beq.w	8008dd2 <_dtoa_r+0x62a>
 8008c58:	b12f      	cbz	r7, 8008c66 <_dtoa_r+0x4be>
 8008c5a:	42af      	cmp	r7, r5
 8008c5c:	d003      	beq.n	8008c66 <_dtoa_r+0x4be>
 8008c5e:	4639      	mov	r1, r7
 8008c60:	4648      	mov	r0, r9
 8008c62:	f000 ffff 	bl	8009c64 <_Bfree>
 8008c66:	4629      	mov	r1, r5
 8008c68:	4648      	mov	r0, r9
 8008c6a:	f000 fffb 	bl	8009c64 <_Bfree>
 8008c6e:	e0b0      	b.n	8008dd2 <_dtoa_r+0x62a>
 8008c70:	07e2      	lsls	r2, r4, #31
 8008c72:	d505      	bpl.n	8008c80 <_dtoa_r+0x4d8>
 8008c74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c78:	f7f7 fc2e 	bl	80004d8 <__aeabi_dmul>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	3601      	adds	r6, #1
 8008c80:	1064      	asrs	r4, r4, #1
 8008c82:	3508      	adds	r5, #8
 8008c84:	e762      	b.n	8008b4c <_dtoa_r+0x3a4>
 8008c86:	2602      	movs	r6, #2
 8008c88:	e765      	b.n	8008b56 <_dtoa_r+0x3ae>
 8008c8a:	46b8      	mov	r8, r7
 8008c8c:	9c08      	ldr	r4, [sp, #32]
 8008c8e:	e784      	b.n	8008b9a <_dtoa_r+0x3f2>
 8008c90:	4b27      	ldr	r3, [pc, #156]	@ (8008d30 <_dtoa_r+0x588>)
 8008c92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c9c:	4454      	add	r4, sl
 8008c9e:	2900      	cmp	r1, #0
 8008ca0:	d054      	beq.n	8008d4c <_dtoa_r+0x5a4>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	4928      	ldr	r1, [pc, #160]	@ (8008d48 <_dtoa_r+0x5a0>)
 8008ca6:	f7f7 fd41 	bl	800072c <__aeabi_ddiv>
 8008caa:	4633      	mov	r3, r6
 8008cac:	462a      	mov	r2, r5
 8008cae:	f7f7 fa5b 	bl	8000168 <__aeabi_dsub>
 8008cb2:	4656      	mov	r6, sl
 8008cb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008cb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cbc:	f7f7 febc 	bl	8000a38 <__aeabi_d2iz>
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	f7f7 fb9f 	bl	8000404 <__aeabi_i2d>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cce:	f7f7 fa4b 	bl	8000168 <__aeabi_dsub>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	3530      	adds	r5, #48	@ 0x30
 8008cd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008cdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ce0:	f806 5b01 	strb.w	r5, [r6], #1
 8008ce4:	f7f7 fe6a 	bl	80009bc <__aeabi_dcmplt>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d172      	bne.n	8008dd2 <_dtoa_r+0x62a>
 8008cec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	4911      	ldr	r1, [pc, #68]	@ (8008d38 <_dtoa_r+0x590>)
 8008cf4:	f7f7 fa38 	bl	8000168 <__aeabi_dsub>
 8008cf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cfc:	f7f7 fe5e 	bl	80009bc <__aeabi_dcmplt>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f040 80b4 	bne.w	8008e6e <_dtoa_r+0x6c6>
 8008d06:	42a6      	cmp	r6, r4
 8008d08:	f43f af70 	beq.w	8008bec <_dtoa_r+0x444>
 8008d0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d10:	2200      	movs	r2, #0
 8008d12:	4b0a      	ldr	r3, [pc, #40]	@ (8008d3c <_dtoa_r+0x594>)
 8008d14:	f7f7 fbe0 	bl	80004d8 <__aeabi_dmul>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d22:	4b06      	ldr	r3, [pc, #24]	@ (8008d3c <_dtoa_r+0x594>)
 8008d24:	f7f7 fbd8 	bl	80004d8 <__aeabi_dmul>
 8008d28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d2c:	e7c4      	b.n	8008cb8 <_dtoa_r+0x510>
 8008d2e:	bf00      	nop
 8008d30:	0800b7e8 	.word	0x0800b7e8
 8008d34:	0800b7c0 	.word	0x0800b7c0
 8008d38:	3ff00000 	.word	0x3ff00000
 8008d3c:	40240000 	.word	0x40240000
 8008d40:	401c0000 	.word	0x401c0000
 8008d44:	40140000 	.word	0x40140000
 8008d48:	3fe00000 	.word	0x3fe00000
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f7f7 fbc2 	bl	80004d8 <__aeabi_dmul>
 8008d54:	4656      	mov	r6, sl
 8008d56:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d5a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008d5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d60:	f7f7 fe6a 	bl	8000a38 <__aeabi_d2iz>
 8008d64:	4605      	mov	r5, r0
 8008d66:	f7f7 fb4d 	bl	8000404 <__aeabi_i2d>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d72:	f7f7 f9f9 	bl	8000168 <__aeabi_dsub>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	3530      	adds	r5, #48	@ 0x30
 8008d7c:	f806 5b01 	strb.w	r5, [r6], #1
 8008d80:	42a6      	cmp	r6, r4
 8008d82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	d124      	bne.n	8008dd6 <_dtoa_r+0x62e>
 8008d8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d90:	4bae      	ldr	r3, [pc, #696]	@ (800904c <_dtoa_r+0x8a4>)
 8008d92:	f7f7 f9eb 	bl	800016c <__adddf3>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d9e:	f7f7 fe2b 	bl	80009f8 <__aeabi_dcmpgt>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d163      	bne.n	8008e6e <_dtoa_r+0x6c6>
 8008da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008daa:	2000      	movs	r0, #0
 8008dac:	49a7      	ldr	r1, [pc, #668]	@ (800904c <_dtoa_r+0x8a4>)
 8008dae:	f7f7 f9db 	bl	8000168 <__aeabi_dsub>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dba:	f7f7 fdff 	bl	80009bc <__aeabi_dcmplt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f43f af14 	beq.w	8008bec <_dtoa_r+0x444>
 8008dc4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008dc6:	1e73      	subs	r3, r6, #1
 8008dc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008dca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008dce:	2b30      	cmp	r3, #48	@ 0x30
 8008dd0:	d0f8      	beq.n	8008dc4 <_dtoa_r+0x61c>
 8008dd2:	4647      	mov	r7, r8
 8008dd4:	e03b      	b.n	8008e4e <_dtoa_r+0x6a6>
 8008dd6:	4b9e      	ldr	r3, [pc, #632]	@ (8009050 <_dtoa_r+0x8a8>)
 8008dd8:	f7f7 fb7e 	bl	80004d8 <__aeabi_dmul>
 8008ddc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008de0:	e7bc      	b.n	8008d5c <_dtoa_r+0x5b4>
 8008de2:	4656      	mov	r6, sl
 8008de4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dec:	4620      	mov	r0, r4
 8008dee:	4629      	mov	r1, r5
 8008df0:	f7f7 fc9c 	bl	800072c <__aeabi_ddiv>
 8008df4:	f7f7 fe20 	bl	8000a38 <__aeabi_d2iz>
 8008df8:	4680      	mov	r8, r0
 8008dfa:	f7f7 fb03 	bl	8000404 <__aeabi_i2d>
 8008dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e02:	f7f7 fb69 	bl	80004d8 <__aeabi_dmul>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 f9ab 	bl	8000168 <__aeabi_dsub>
 8008e12:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e16:	9d08      	ldr	r5, [sp, #32]
 8008e18:	f806 4b01 	strb.w	r4, [r6], #1
 8008e1c:	eba6 040a 	sub.w	r4, r6, sl
 8008e20:	42a5      	cmp	r5, r4
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	d133      	bne.n	8008e90 <_dtoa_r+0x6e8>
 8008e28:	f7f7 f9a0 	bl	800016c <__adddf3>
 8008e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e30:	4604      	mov	r4, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	f7f7 fde0 	bl	80009f8 <__aeabi_dcmpgt>
 8008e38:	b9c0      	cbnz	r0, 8008e6c <_dtoa_r+0x6c4>
 8008e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e3e:	4620      	mov	r0, r4
 8008e40:	4629      	mov	r1, r5
 8008e42:	f7f7 fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8008e46:	b110      	cbz	r0, 8008e4e <_dtoa_r+0x6a6>
 8008e48:	f018 0f01 	tst.w	r8, #1
 8008e4c:	d10e      	bne.n	8008e6c <_dtoa_r+0x6c4>
 8008e4e:	4648      	mov	r0, r9
 8008e50:	9903      	ldr	r1, [sp, #12]
 8008e52:	f000 ff07 	bl	8009c64 <_Bfree>
 8008e56:	2300      	movs	r3, #0
 8008e58:	7033      	strb	r3, [r6, #0]
 8008e5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e5c:	3701      	adds	r7, #1
 8008e5e:	601f      	str	r7, [r3, #0]
 8008e60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 824b 	beq.w	80092fe <_dtoa_r+0xb56>
 8008e68:	601e      	str	r6, [r3, #0]
 8008e6a:	e248      	b.n	80092fe <_dtoa_r+0xb56>
 8008e6c:	46b8      	mov	r8, r7
 8008e6e:	4633      	mov	r3, r6
 8008e70:	461e      	mov	r6, r3
 8008e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e76:	2a39      	cmp	r2, #57	@ 0x39
 8008e78:	d106      	bne.n	8008e88 <_dtoa_r+0x6e0>
 8008e7a:	459a      	cmp	sl, r3
 8008e7c:	d1f8      	bne.n	8008e70 <_dtoa_r+0x6c8>
 8008e7e:	2230      	movs	r2, #48	@ 0x30
 8008e80:	f108 0801 	add.w	r8, r8, #1
 8008e84:	f88a 2000 	strb.w	r2, [sl]
 8008e88:	781a      	ldrb	r2, [r3, #0]
 8008e8a:	3201      	adds	r2, #1
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	e7a0      	b.n	8008dd2 <_dtoa_r+0x62a>
 8008e90:	2200      	movs	r2, #0
 8008e92:	4b6f      	ldr	r3, [pc, #444]	@ (8009050 <_dtoa_r+0x8a8>)
 8008e94:	f7f7 fb20 	bl	80004d8 <__aeabi_dmul>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	f7f7 fd82 	bl	80009a8 <__aeabi_dcmpeq>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d09f      	beq.n	8008de8 <_dtoa_r+0x640>
 8008ea8:	e7d1      	b.n	8008e4e <_dtoa_r+0x6a6>
 8008eaa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008eac:	2a00      	cmp	r2, #0
 8008eae:	f000 80ea 	beq.w	8009086 <_dtoa_r+0x8de>
 8008eb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008eb4:	2a01      	cmp	r2, #1
 8008eb6:	f300 80cd 	bgt.w	8009054 <_dtoa_r+0x8ac>
 8008eba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008ebc:	2a00      	cmp	r2, #0
 8008ebe:	f000 80c1 	beq.w	8009044 <_dtoa_r+0x89c>
 8008ec2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008ec6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ec8:	9e04      	ldr	r6, [sp, #16]
 8008eca:	9a04      	ldr	r2, [sp, #16]
 8008ecc:	2101      	movs	r1, #1
 8008ece:	441a      	add	r2, r3
 8008ed0:	9204      	str	r2, [sp, #16]
 8008ed2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	441a      	add	r2, r3
 8008ed8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008eda:	f000 ffc1 	bl	8009e60 <__i2b>
 8008ede:	4605      	mov	r5, r0
 8008ee0:	b166      	cbz	r6, 8008efc <_dtoa_r+0x754>
 8008ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dd09      	ble.n	8008efc <_dtoa_r+0x754>
 8008ee8:	42b3      	cmp	r3, r6
 8008eea:	bfa8      	it	ge
 8008eec:	4633      	movge	r3, r6
 8008eee:	9a04      	ldr	r2, [sp, #16]
 8008ef0:	1af6      	subs	r6, r6, r3
 8008ef2:	1ad2      	subs	r2, r2, r3
 8008ef4:	9204      	str	r2, [sp, #16]
 8008ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008efe:	b30b      	cbz	r3, 8008f44 <_dtoa_r+0x79c>
 8008f00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 80c6 	beq.w	8009094 <_dtoa_r+0x8ec>
 8008f08:	2c00      	cmp	r4, #0
 8008f0a:	f000 80c0 	beq.w	800908e <_dtoa_r+0x8e6>
 8008f0e:	4629      	mov	r1, r5
 8008f10:	4622      	mov	r2, r4
 8008f12:	4648      	mov	r0, r9
 8008f14:	f001 f85c 	bl	8009fd0 <__pow5mult>
 8008f18:	9a03      	ldr	r2, [sp, #12]
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	4648      	mov	r0, r9
 8008f20:	f000 ffb4 	bl	8009e8c <__multiply>
 8008f24:	9903      	ldr	r1, [sp, #12]
 8008f26:	4680      	mov	r8, r0
 8008f28:	4648      	mov	r0, r9
 8008f2a:	f000 fe9b 	bl	8009c64 <_Bfree>
 8008f2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f30:	1b1b      	subs	r3, r3, r4
 8008f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f34:	f000 80b1 	beq.w	800909a <_dtoa_r+0x8f2>
 8008f38:	4641      	mov	r1, r8
 8008f3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f3c:	4648      	mov	r0, r9
 8008f3e:	f001 f847 	bl	8009fd0 <__pow5mult>
 8008f42:	9003      	str	r0, [sp, #12]
 8008f44:	2101      	movs	r1, #1
 8008f46:	4648      	mov	r0, r9
 8008f48:	f000 ff8a 	bl	8009e60 <__i2b>
 8008f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f4e:	4604      	mov	r4, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 81d8 	beq.w	8009306 <_dtoa_r+0xb5e>
 8008f56:	461a      	mov	r2, r3
 8008f58:	4601      	mov	r1, r0
 8008f5a:	4648      	mov	r0, r9
 8008f5c:	f001 f838 	bl	8009fd0 <__pow5mult>
 8008f60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f62:	4604      	mov	r4, r0
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	f300 809f 	bgt.w	80090a8 <_dtoa_r+0x900>
 8008f6a:	9b06      	ldr	r3, [sp, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f040 8097 	bne.w	80090a0 <_dtoa_r+0x8f8>
 8008f72:	9b07      	ldr	r3, [sp, #28]
 8008f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 8093 	bne.w	80090a4 <_dtoa_r+0x8fc>
 8008f7e:	9b07      	ldr	r3, [sp, #28]
 8008f80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f84:	0d1b      	lsrs	r3, r3, #20
 8008f86:	051b      	lsls	r3, r3, #20
 8008f88:	b133      	cbz	r3, 8008f98 <_dtoa_r+0x7f0>
 8008f8a:	9b04      	ldr	r3, [sp, #16]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f92:	3301      	adds	r3, #1
 8008f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f96:	2301      	movs	r3, #1
 8008f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 81b8 	beq.w	8009312 <_dtoa_r+0xb6a>
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fa8:	6918      	ldr	r0, [r3, #16]
 8008faa:	f000 ff0d 	bl	8009dc8 <__hi0bits>
 8008fae:	f1c0 0020 	rsb	r0, r0, #32
 8008fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb4:	4418      	add	r0, r3
 8008fb6:	f010 001f 	ands.w	r0, r0, #31
 8008fba:	f000 8082 	beq.w	80090c2 <_dtoa_r+0x91a>
 8008fbe:	f1c0 0320 	rsb	r3, r0, #32
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	dd73      	ble.n	80090ae <_dtoa_r+0x906>
 8008fc6:	9b04      	ldr	r3, [sp, #16]
 8008fc8:	f1c0 001c 	rsb	r0, r0, #28
 8008fcc:	4403      	add	r3, r0
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd2:	4406      	add	r6, r0
 8008fd4:	4403      	add	r3, r0
 8008fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd8:	9b04      	ldr	r3, [sp, #16]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dd05      	ble.n	8008fea <_dtoa_r+0x842>
 8008fde:	461a      	mov	r2, r3
 8008fe0:	4648      	mov	r0, r9
 8008fe2:	9903      	ldr	r1, [sp, #12]
 8008fe4:	f001 f84e 	bl	800a084 <__lshift>
 8008fe8:	9003      	str	r0, [sp, #12]
 8008fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dd05      	ble.n	8008ffc <_dtoa_r+0x854>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	4648      	mov	r0, r9
 8008ff6:	f001 f845 	bl	800a084 <__lshift>
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d061      	beq.n	80090c6 <_dtoa_r+0x91e>
 8009002:	4621      	mov	r1, r4
 8009004:	9803      	ldr	r0, [sp, #12]
 8009006:	f001 f8a9 	bl	800a15c <__mcmp>
 800900a:	2800      	cmp	r0, #0
 800900c:	da5b      	bge.n	80090c6 <_dtoa_r+0x91e>
 800900e:	2300      	movs	r3, #0
 8009010:	220a      	movs	r2, #10
 8009012:	4648      	mov	r0, r9
 8009014:	9903      	ldr	r1, [sp, #12]
 8009016:	f000 fe47 	bl	8009ca8 <__multadd>
 800901a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800901c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009020:	9003      	str	r0, [sp, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8177 	beq.w	8009316 <_dtoa_r+0xb6e>
 8009028:	4629      	mov	r1, r5
 800902a:	2300      	movs	r3, #0
 800902c:	220a      	movs	r2, #10
 800902e:	4648      	mov	r0, r9
 8009030:	f000 fe3a 	bl	8009ca8 <__multadd>
 8009034:	f1bb 0f00 	cmp.w	fp, #0
 8009038:	4605      	mov	r5, r0
 800903a:	dc6f      	bgt.n	800911c <_dtoa_r+0x974>
 800903c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800903e:	2b02      	cmp	r3, #2
 8009040:	dc49      	bgt.n	80090d6 <_dtoa_r+0x92e>
 8009042:	e06b      	b.n	800911c <_dtoa_r+0x974>
 8009044:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009046:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800904a:	e73c      	b.n	8008ec6 <_dtoa_r+0x71e>
 800904c:	3fe00000 	.word	0x3fe00000
 8009050:	40240000 	.word	0x40240000
 8009054:	9b08      	ldr	r3, [sp, #32]
 8009056:	1e5c      	subs	r4, r3, #1
 8009058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800905a:	42a3      	cmp	r3, r4
 800905c:	db09      	blt.n	8009072 <_dtoa_r+0x8ca>
 800905e:	1b1c      	subs	r4, r3, r4
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	2b00      	cmp	r3, #0
 8009064:	f6bf af30 	bge.w	8008ec8 <_dtoa_r+0x720>
 8009068:	9b04      	ldr	r3, [sp, #16]
 800906a:	9a08      	ldr	r2, [sp, #32]
 800906c:	1a9e      	subs	r6, r3, r2
 800906e:	2300      	movs	r3, #0
 8009070:	e72b      	b.n	8008eca <_dtoa_r+0x722>
 8009072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009076:	1ae3      	subs	r3, r4, r3
 8009078:	441a      	add	r2, r3
 800907a:	940a      	str	r4, [sp, #40]	@ 0x28
 800907c:	9e04      	ldr	r6, [sp, #16]
 800907e:	2400      	movs	r4, #0
 8009080:	9b08      	ldr	r3, [sp, #32]
 8009082:	920e      	str	r2, [sp, #56]	@ 0x38
 8009084:	e721      	b.n	8008eca <_dtoa_r+0x722>
 8009086:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009088:	9e04      	ldr	r6, [sp, #16]
 800908a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800908c:	e728      	b.n	8008ee0 <_dtoa_r+0x738>
 800908e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009092:	e751      	b.n	8008f38 <_dtoa_r+0x790>
 8009094:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009096:	9903      	ldr	r1, [sp, #12]
 8009098:	e750      	b.n	8008f3c <_dtoa_r+0x794>
 800909a:	f8cd 800c 	str.w	r8, [sp, #12]
 800909e:	e751      	b.n	8008f44 <_dtoa_r+0x79c>
 80090a0:	2300      	movs	r3, #0
 80090a2:	e779      	b.n	8008f98 <_dtoa_r+0x7f0>
 80090a4:	9b06      	ldr	r3, [sp, #24]
 80090a6:	e777      	b.n	8008f98 <_dtoa_r+0x7f0>
 80090a8:	2300      	movs	r3, #0
 80090aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80090ac:	e779      	b.n	8008fa2 <_dtoa_r+0x7fa>
 80090ae:	d093      	beq.n	8008fd8 <_dtoa_r+0x830>
 80090b0:	9a04      	ldr	r2, [sp, #16]
 80090b2:	331c      	adds	r3, #28
 80090b4:	441a      	add	r2, r3
 80090b6:	9204      	str	r2, [sp, #16]
 80090b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090ba:	441e      	add	r6, r3
 80090bc:	441a      	add	r2, r3
 80090be:	9209      	str	r2, [sp, #36]	@ 0x24
 80090c0:	e78a      	b.n	8008fd8 <_dtoa_r+0x830>
 80090c2:	4603      	mov	r3, r0
 80090c4:	e7f4      	b.n	80090b0 <_dtoa_r+0x908>
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	46b8      	mov	r8, r7
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dc20      	bgt.n	8009110 <_dtoa_r+0x968>
 80090ce:	469b      	mov	fp, r3
 80090d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	dd1e      	ble.n	8009114 <_dtoa_r+0x96c>
 80090d6:	f1bb 0f00 	cmp.w	fp, #0
 80090da:	f47f adb1 	bne.w	8008c40 <_dtoa_r+0x498>
 80090de:	4621      	mov	r1, r4
 80090e0:	465b      	mov	r3, fp
 80090e2:	2205      	movs	r2, #5
 80090e4:	4648      	mov	r0, r9
 80090e6:	f000 fddf 	bl	8009ca8 <__multadd>
 80090ea:	4601      	mov	r1, r0
 80090ec:	4604      	mov	r4, r0
 80090ee:	9803      	ldr	r0, [sp, #12]
 80090f0:	f001 f834 	bl	800a15c <__mcmp>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f77f ada3 	ble.w	8008c40 <_dtoa_r+0x498>
 80090fa:	4656      	mov	r6, sl
 80090fc:	2331      	movs	r3, #49	@ 0x31
 80090fe:	f108 0801 	add.w	r8, r8, #1
 8009102:	f806 3b01 	strb.w	r3, [r6], #1
 8009106:	e59f      	b.n	8008c48 <_dtoa_r+0x4a0>
 8009108:	46b8      	mov	r8, r7
 800910a:	9c08      	ldr	r4, [sp, #32]
 800910c:	4625      	mov	r5, r4
 800910e:	e7f4      	b.n	80090fa <_dtoa_r+0x952>
 8009110:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 8101 	beq.w	800931e <_dtoa_r+0xb76>
 800911c:	2e00      	cmp	r6, #0
 800911e:	dd05      	ble.n	800912c <_dtoa_r+0x984>
 8009120:	4629      	mov	r1, r5
 8009122:	4632      	mov	r2, r6
 8009124:	4648      	mov	r0, r9
 8009126:	f000 ffad 	bl	800a084 <__lshift>
 800912a:	4605      	mov	r5, r0
 800912c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800912e:	2b00      	cmp	r3, #0
 8009130:	d05c      	beq.n	80091ec <_dtoa_r+0xa44>
 8009132:	4648      	mov	r0, r9
 8009134:	6869      	ldr	r1, [r5, #4]
 8009136:	f000 fd55 	bl	8009be4 <_Balloc>
 800913a:	4606      	mov	r6, r0
 800913c:	b928      	cbnz	r0, 800914a <_dtoa_r+0x9a2>
 800913e:	4602      	mov	r2, r0
 8009140:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009144:	4b80      	ldr	r3, [pc, #512]	@ (8009348 <_dtoa_r+0xba0>)
 8009146:	f7ff bb43 	b.w	80087d0 <_dtoa_r+0x28>
 800914a:	692a      	ldr	r2, [r5, #16]
 800914c:	f105 010c 	add.w	r1, r5, #12
 8009150:	3202      	adds	r2, #2
 8009152:	0092      	lsls	r2, r2, #2
 8009154:	300c      	adds	r0, #12
 8009156:	f7ff fa6a 	bl	800862e <memcpy>
 800915a:	2201      	movs	r2, #1
 800915c:	4631      	mov	r1, r6
 800915e:	4648      	mov	r0, r9
 8009160:	f000 ff90 	bl	800a084 <__lshift>
 8009164:	462f      	mov	r7, r5
 8009166:	4605      	mov	r5, r0
 8009168:	f10a 0301 	add.w	r3, sl, #1
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	eb0a 030b 	add.w	r3, sl, fp
 8009172:	930a      	str	r3, [sp, #40]	@ 0x28
 8009174:	9b06      	ldr	r3, [sp, #24]
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	9309      	str	r3, [sp, #36]	@ 0x24
 800917c:	9b04      	ldr	r3, [sp, #16]
 800917e:	4621      	mov	r1, r4
 8009180:	9803      	ldr	r0, [sp, #12]
 8009182:	f103 3bff 	add.w	fp, r3, #4294967295
 8009186:	f7ff fa85 	bl	8008694 <quorem>
 800918a:	4603      	mov	r3, r0
 800918c:	4639      	mov	r1, r7
 800918e:	3330      	adds	r3, #48	@ 0x30
 8009190:	9006      	str	r0, [sp, #24]
 8009192:	9803      	ldr	r0, [sp, #12]
 8009194:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009196:	f000 ffe1 	bl	800a15c <__mcmp>
 800919a:	462a      	mov	r2, r5
 800919c:	9008      	str	r0, [sp, #32]
 800919e:	4621      	mov	r1, r4
 80091a0:	4648      	mov	r0, r9
 80091a2:	f000 fff7 	bl	800a194 <__mdiff>
 80091a6:	68c2      	ldr	r2, [r0, #12]
 80091a8:	4606      	mov	r6, r0
 80091aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091ac:	bb02      	cbnz	r2, 80091f0 <_dtoa_r+0xa48>
 80091ae:	4601      	mov	r1, r0
 80091b0:	9803      	ldr	r0, [sp, #12]
 80091b2:	f000 ffd3 	bl	800a15c <__mcmp>
 80091b6:	4602      	mov	r2, r0
 80091b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091ba:	4631      	mov	r1, r6
 80091bc:	4648      	mov	r0, r9
 80091be:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80091c2:	f000 fd4f 	bl	8009c64 <_Bfree>
 80091c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80091c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80091ca:	9e04      	ldr	r6, [sp, #16]
 80091cc:	ea42 0103 	orr.w	r1, r2, r3
 80091d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d2:	4319      	orrs	r1, r3
 80091d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091d6:	d10d      	bne.n	80091f4 <_dtoa_r+0xa4c>
 80091d8:	2b39      	cmp	r3, #57	@ 0x39
 80091da:	d027      	beq.n	800922c <_dtoa_r+0xa84>
 80091dc:	9a08      	ldr	r2, [sp, #32]
 80091de:	2a00      	cmp	r2, #0
 80091e0:	dd01      	ble.n	80091e6 <_dtoa_r+0xa3e>
 80091e2:	9b06      	ldr	r3, [sp, #24]
 80091e4:	3331      	adds	r3, #49	@ 0x31
 80091e6:	f88b 3000 	strb.w	r3, [fp]
 80091ea:	e52e      	b.n	8008c4a <_dtoa_r+0x4a2>
 80091ec:	4628      	mov	r0, r5
 80091ee:	e7b9      	b.n	8009164 <_dtoa_r+0x9bc>
 80091f0:	2201      	movs	r2, #1
 80091f2:	e7e2      	b.n	80091ba <_dtoa_r+0xa12>
 80091f4:	9908      	ldr	r1, [sp, #32]
 80091f6:	2900      	cmp	r1, #0
 80091f8:	db04      	blt.n	8009204 <_dtoa_r+0xa5c>
 80091fa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80091fc:	4301      	orrs	r1, r0
 80091fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009200:	4301      	orrs	r1, r0
 8009202:	d120      	bne.n	8009246 <_dtoa_r+0xa9e>
 8009204:	2a00      	cmp	r2, #0
 8009206:	ddee      	ble.n	80091e6 <_dtoa_r+0xa3e>
 8009208:	2201      	movs	r2, #1
 800920a:	9903      	ldr	r1, [sp, #12]
 800920c:	4648      	mov	r0, r9
 800920e:	9304      	str	r3, [sp, #16]
 8009210:	f000 ff38 	bl	800a084 <__lshift>
 8009214:	4621      	mov	r1, r4
 8009216:	9003      	str	r0, [sp, #12]
 8009218:	f000 ffa0 	bl	800a15c <__mcmp>
 800921c:	2800      	cmp	r0, #0
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	dc02      	bgt.n	8009228 <_dtoa_r+0xa80>
 8009222:	d1e0      	bne.n	80091e6 <_dtoa_r+0xa3e>
 8009224:	07da      	lsls	r2, r3, #31
 8009226:	d5de      	bpl.n	80091e6 <_dtoa_r+0xa3e>
 8009228:	2b39      	cmp	r3, #57	@ 0x39
 800922a:	d1da      	bne.n	80091e2 <_dtoa_r+0xa3a>
 800922c:	2339      	movs	r3, #57	@ 0x39
 800922e:	f88b 3000 	strb.w	r3, [fp]
 8009232:	4633      	mov	r3, r6
 8009234:	461e      	mov	r6, r3
 8009236:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800923a:	3b01      	subs	r3, #1
 800923c:	2a39      	cmp	r2, #57	@ 0x39
 800923e:	d04e      	beq.n	80092de <_dtoa_r+0xb36>
 8009240:	3201      	adds	r2, #1
 8009242:	701a      	strb	r2, [r3, #0]
 8009244:	e501      	b.n	8008c4a <_dtoa_r+0x4a2>
 8009246:	2a00      	cmp	r2, #0
 8009248:	dd03      	ble.n	8009252 <_dtoa_r+0xaaa>
 800924a:	2b39      	cmp	r3, #57	@ 0x39
 800924c:	d0ee      	beq.n	800922c <_dtoa_r+0xa84>
 800924e:	3301      	adds	r3, #1
 8009250:	e7c9      	b.n	80091e6 <_dtoa_r+0xa3e>
 8009252:	9a04      	ldr	r2, [sp, #16]
 8009254:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009256:	f802 3c01 	strb.w	r3, [r2, #-1]
 800925a:	428a      	cmp	r2, r1
 800925c:	d028      	beq.n	80092b0 <_dtoa_r+0xb08>
 800925e:	2300      	movs	r3, #0
 8009260:	220a      	movs	r2, #10
 8009262:	9903      	ldr	r1, [sp, #12]
 8009264:	4648      	mov	r0, r9
 8009266:	f000 fd1f 	bl	8009ca8 <__multadd>
 800926a:	42af      	cmp	r7, r5
 800926c:	9003      	str	r0, [sp, #12]
 800926e:	f04f 0300 	mov.w	r3, #0
 8009272:	f04f 020a 	mov.w	r2, #10
 8009276:	4639      	mov	r1, r7
 8009278:	4648      	mov	r0, r9
 800927a:	d107      	bne.n	800928c <_dtoa_r+0xae4>
 800927c:	f000 fd14 	bl	8009ca8 <__multadd>
 8009280:	4607      	mov	r7, r0
 8009282:	4605      	mov	r5, r0
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	3301      	adds	r3, #1
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	e777      	b.n	800917c <_dtoa_r+0x9d4>
 800928c:	f000 fd0c 	bl	8009ca8 <__multadd>
 8009290:	4629      	mov	r1, r5
 8009292:	4607      	mov	r7, r0
 8009294:	2300      	movs	r3, #0
 8009296:	220a      	movs	r2, #10
 8009298:	4648      	mov	r0, r9
 800929a:	f000 fd05 	bl	8009ca8 <__multadd>
 800929e:	4605      	mov	r5, r0
 80092a0:	e7f0      	b.n	8009284 <_dtoa_r+0xadc>
 80092a2:	f1bb 0f00 	cmp.w	fp, #0
 80092a6:	bfcc      	ite	gt
 80092a8:	465e      	movgt	r6, fp
 80092aa:	2601      	movle	r6, #1
 80092ac:	2700      	movs	r7, #0
 80092ae:	4456      	add	r6, sl
 80092b0:	2201      	movs	r2, #1
 80092b2:	9903      	ldr	r1, [sp, #12]
 80092b4:	4648      	mov	r0, r9
 80092b6:	9304      	str	r3, [sp, #16]
 80092b8:	f000 fee4 	bl	800a084 <__lshift>
 80092bc:	4621      	mov	r1, r4
 80092be:	9003      	str	r0, [sp, #12]
 80092c0:	f000 ff4c 	bl	800a15c <__mcmp>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	dcb4      	bgt.n	8009232 <_dtoa_r+0xa8a>
 80092c8:	d102      	bne.n	80092d0 <_dtoa_r+0xb28>
 80092ca:	9b04      	ldr	r3, [sp, #16]
 80092cc:	07db      	lsls	r3, r3, #31
 80092ce:	d4b0      	bmi.n	8009232 <_dtoa_r+0xa8a>
 80092d0:	4633      	mov	r3, r6
 80092d2:	461e      	mov	r6, r3
 80092d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092d8:	2a30      	cmp	r2, #48	@ 0x30
 80092da:	d0fa      	beq.n	80092d2 <_dtoa_r+0xb2a>
 80092dc:	e4b5      	b.n	8008c4a <_dtoa_r+0x4a2>
 80092de:	459a      	cmp	sl, r3
 80092e0:	d1a8      	bne.n	8009234 <_dtoa_r+0xa8c>
 80092e2:	2331      	movs	r3, #49	@ 0x31
 80092e4:	f108 0801 	add.w	r8, r8, #1
 80092e8:	f88a 3000 	strb.w	r3, [sl]
 80092ec:	e4ad      	b.n	8008c4a <_dtoa_r+0x4a2>
 80092ee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80092f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800934c <_dtoa_r+0xba4>
 80092f4:	b11b      	cbz	r3, 80092fe <_dtoa_r+0xb56>
 80092f6:	f10a 0308 	add.w	r3, sl, #8
 80092fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	4650      	mov	r0, sl
 8009300:	b017      	add	sp, #92	@ 0x5c
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009308:	2b01      	cmp	r3, #1
 800930a:	f77f ae2e 	ble.w	8008f6a <_dtoa_r+0x7c2>
 800930e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009310:	930a      	str	r3, [sp, #40]	@ 0x28
 8009312:	2001      	movs	r0, #1
 8009314:	e64d      	b.n	8008fb2 <_dtoa_r+0x80a>
 8009316:	f1bb 0f00 	cmp.w	fp, #0
 800931a:	f77f aed9 	ble.w	80090d0 <_dtoa_r+0x928>
 800931e:	4656      	mov	r6, sl
 8009320:	4621      	mov	r1, r4
 8009322:	9803      	ldr	r0, [sp, #12]
 8009324:	f7ff f9b6 	bl	8008694 <quorem>
 8009328:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800932c:	f806 3b01 	strb.w	r3, [r6], #1
 8009330:	eba6 020a 	sub.w	r2, r6, sl
 8009334:	4593      	cmp	fp, r2
 8009336:	ddb4      	ble.n	80092a2 <_dtoa_r+0xafa>
 8009338:	2300      	movs	r3, #0
 800933a:	220a      	movs	r2, #10
 800933c:	4648      	mov	r0, r9
 800933e:	9903      	ldr	r1, [sp, #12]
 8009340:	f000 fcb2 	bl	8009ca8 <__multadd>
 8009344:	9003      	str	r0, [sp, #12]
 8009346:	e7eb      	b.n	8009320 <_dtoa_r+0xb78>
 8009348:	0800b682 	.word	0x0800b682
 800934c:	0800b61d 	.word	0x0800b61d

08009350 <_free_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4605      	mov	r5, r0
 8009354:	2900      	cmp	r1, #0
 8009356:	d040      	beq.n	80093da <_free_r+0x8a>
 8009358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935c:	1f0c      	subs	r4, r1, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	bfb8      	it	lt
 8009362:	18e4      	addlt	r4, r4, r3
 8009364:	f000 fc32 	bl	8009bcc <__malloc_lock>
 8009368:	4a1c      	ldr	r2, [pc, #112]	@ (80093dc <_free_r+0x8c>)
 800936a:	6813      	ldr	r3, [r2, #0]
 800936c:	b933      	cbnz	r3, 800937c <_free_r+0x2c>
 800936e:	6063      	str	r3, [r4, #4]
 8009370:	6014      	str	r4, [r2, #0]
 8009372:	4628      	mov	r0, r5
 8009374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009378:	f000 bc2e 	b.w	8009bd8 <__malloc_unlock>
 800937c:	42a3      	cmp	r3, r4
 800937e:	d908      	bls.n	8009392 <_free_r+0x42>
 8009380:	6820      	ldr	r0, [r4, #0]
 8009382:	1821      	adds	r1, r4, r0
 8009384:	428b      	cmp	r3, r1
 8009386:	bf01      	itttt	eq
 8009388:	6819      	ldreq	r1, [r3, #0]
 800938a:	685b      	ldreq	r3, [r3, #4]
 800938c:	1809      	addeq	r1, r1, r0
 800938e:	6021      	streq	r1, [r4, #0]
 8009390:	e7ed      	b.n	800936e <_free_r+0x1e>
 8009392:	461a      	mov	r2, r3
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	b10b      	cbz	r3, 800939c <_free_r+0x4c>
 8009398:	42a3      	cmp	r3, r4
 800939a:	d9fa      	bls.n	8009392 <_free_r+0x42>
 800939c:	6811      	ldr	r1, [r2, #0]
 800939e:	1850      	adds	r0, r2, r1
 80093a0:	42a0      	cmp	r0, r4
 80093a2:	d10b      	bne.n	80093bc <_free_r+0x6c>
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	4401      	add	r1, r0
 80093a8:	1850      	adds	r0, r2, r1
 80093aa:	4283      	cmp	r3, r0
 80093ac:	6011      	str	r1, [r2, #0]
 80093ae:	d1e0      	bne.n	8009372 <_free_r+0x22>
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	4408      	add	r0, r1
 80093b6:	6010      	str	r0, [r2, #0]
 80093b8:	6053      	str	r3, [r2, #4]
 80093ba:	e7da      	b.n	8009372 <_free_r+0x22>
 80093bc:	d902      	bls.n	80093c4 <_free_r+0x74>
 80093be:	230c      	movs	r3, #12
 80093c0:	602b      	str	r3, [r5, #0]
 80093c2:	e7d6      	b.n	8009372 <_free_r+0x22>
 80093c4:	6820      	ldr	r0, [r4, #0]
 80093c6:	1821      	adds	r1, r4, r0
 80093c8:	428b      	cmp	r3, r1
 80093ca:	bf01      	itttt	eq
 80093cc:	6819      	ldreq	r1, [r3, #0]
 80093ce:	685b      	ldreq	r3, [r3, #4]
 80093d0:	1809      	addeq	r1, r1, r0
 80093d2:	6021      	streq	r1, [r4, #0]
 80093d4:	6063      	str	r3, [r4, #4]
 80093d6:	6054      	str	r4, [r2, #4]
 80093d8:	e7cb      	b.n	8009372 <_free_r+0x22>
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20000970 	.word	0x20000970

080093e0 <rshift>:
 80093e0:	6903      	ldr	r3, [r0, #16]
 80093e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093ea:	f100 0414 	add.w	r4, r0, #20
 80093ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093f2:	dd46      	ble.n	8009482 <rshift+0xa2>
 80093f4:	f011 011f 	ands.w	r1, r1, #31
 80093f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009400:	d10c      	bne.n	800941c <rshift+0x3c>
 8009402:	4629      	mov	r1, r5
 8009404:	f100 0710 	add.w	r7, r0, #16
 8009408:	42b1      	cmp	r1, r6
 800940a:	d335      	bcc.n	8009478 <rshift+0x98>
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	1eea      	subs	r2, r5, #3
 8009412:	4296      	cmp	r6, r2
 8009414:	bf38      	it	cc
 8009416:	2300      	movcc	r3, #0
 8009418:	4423      	add	r3, r4
 800941a:	e015      	b.n	8009448 <rshift+0x68>
 800941c:	46a1      	mov	r9, r4
 800941e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009422:	f1c1 0820 	rsb	r8, r1, #32
 8009426:	40cf      	lsrs	r7, r1
 8009428:	f105 0e04 	add.w	lr, r5, #4
 800942c:	4576      	cmp	r6, lr
 800942e:	46f4      	mov	ip, lr
 8009430:	d816      	bhi.n	8009460 <rshift+0x80>
 8009432:	1a9a      	subs	r2, r3, r2
 8009434:	0092      	lsls	r2, r2, #2
 8009436:	3a04      	subs	r2, #4
 8009438:	3501      	adds	r5, #1
 800943a:	42ae      	cmp	r6, r5
 800943c:	bf38      	it	cc
 800943e:	2200      	movcc	r2, #0
 8009440:	18a3      	adds	r3, r4, r2
 8009442:	50a7      	str	r7, [r4, r2]
 8009444:	b107      	cbz	r7, 8009448 <rshift+0x68>
 8009446:	3304      	adds	r3, #4
 8009448:	42a3      	cmp	r3, r4
 800944a:	eba3 0204 	sub.w	r2, r3, r4
 800944e:	bf08      	it	eq
 8009450:	2300      	moveq	r3, #0
 8009452:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009456:	6102      	str	r2, [r0, #16]
 8009458:	bf08      	it	eq
 800945a:	6143      	streq	r3, [r0, #20]
 800945c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009460:	f8dc c000 	ldr.w	ip, [ip]
 8009464:	fa0c fc08 	lsl.w	ip, ip, r8
 8009468:	ea4c 0707 	orr.w	r7, ip, r7
 800946c:	f849 7b04 	str.w	r7, [r9], #4
 8009470:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009474:	40cf      	lsrs	r7, r1
 8009476:	e7d9      	b.n	800942c <rshift+0x4c>
 8009478:	f851 cb04 	ldr.w	ip, [r1], #4
 800947c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009480:	e7c2      	b.n	8009408 <rshift+0x28>
 8009482:	4623      	mov	r3, r4
 8009484:	e7e0      	b.n	8009448 <rshift+0x68>

08009486 <__hexdig_fun>:
 8009486:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800948a:	2b09      	cmp	r3, #9
 800948c:	d802      	bhi.n	8009494 <__hexdig_fun+0xe>
 800948e:	3820      	subs	r0, #32
 8009490:	b2c0      	uxtb	r0, r0
 8009492:	4770      	bx	lr
 8009494:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009498:	2b05      	cmp	r3, #5
 800949a:	d801      	bhi.n	80094a0 <__hexdig_fun+0x1a>
 800949c:	3847      	subs	r0, #71	@ 0x47
 800949e:	e7f7      	b.n	8009490 <__hexdig_fun+0xa>
 80094a0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80094a4:	2b05      	cmp	r3, #5
 80094a6:	d801      	bhi.n	80094ac <__hexdig_fun+0x26>
 80094a8:	3827      	subs	r0, #39	@ 0x27
 80094aa:	e7f1      	b.n	8009490 <__hexdig_fun+0xa>
 80094ac:	2000      	movs	r0, #0
 80094ae:	4770      	bx	lr

080094b0 <__gethex>:
 80094b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b4:	468a      	mov	sl, r1
 80094b6:	4690      	mov	r8, r2
 80094b8:	b085      	sub	sp, #20
 80094ba:	9302      	str	r3, [sp, #8]
 80094bc:	680b      	ldr	r3, [r1, #0]
 80094be:	9001      	str	r0, [sp, #4]
 80094c0:	1c9c      	adds	r4, r3, #2
 80094c2:	46a1      	mov	r9, r4
 80094c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80094c8:	2830      	cmp	r0, #48	@ 0x30
 80094ca:	d0fa      	beq.n	80094c2 <__gethex+0x12>
 80094cc:	eba9 0303 	sub.w	r3, r9, r3
 80094d0:	f1a3 0b02 	sub.w	fp, r3, #2
 80094d4:	f7ff ffd7 	bl	8009486 <__hexdig_fun>
 80094d8:	4605      	mov	r5, r0
 80094da:	2800      	cmp	r0, #0
 80094dc:	d168      	bne.n	80095b0 <__gethex+0x100>
 80094de:	2201      	movs	r2, #1
 80094e0:	4648      	mov	r0, r9
 80094e2:	499f      	ldr	r1, [pc, #636]	@ (8009760 <__gethex+0x2b0>)
 80094e4:	f7fe ff7f 	bl	80083e6 <strncmp>
 80094e8:	4607      	mov	r7, r0
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d167      	bne.n	80095be <__gethex+0x10e>
 80094ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 80094f2:	4626      	mov	r6, r4
 80094f4:	f7ff ffc7 	bl	8009486 <__hexdig_fun>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d062      	beq.n	80095c2 <__gethex+0x112>
 80094fc:	4623      	mov	r3, r4
 80094fe:	7818      	ldrb	r0, [r3, #0]
 8009500:	4699      	mov	r9, r3
 8009502:	2830      	cmp	r0, #48	@ 0x30
 8009504:	f103 0301 	add.w	r3, r3, #1
 8009508:	d0f9      	beq.n	80094fe <__gethex+0x4e>
 800950a:	f7ff ffbc 	bl	8009486 <__hexdig_fun>
 800950e:	fab0 f580 	clz	r5, r0
 8009512:	f04f 0b01 	mov.w	fp, #1
 8009516:	096d      	lsrs	r5, r5, #5
 8009518:	464a      	mov	r2, r9
 800951a:	4616      	mov	r6, r2
 800951c:	7830      	ldrb	r0, [r6, #0]
 800951e:	3201      	adds	r2, #1
 8009520:	f7ff ffb1 	bl	8009486 <__hexdig_fun>
 8009524:	2800      	cmp	r0, #0
 8009526:	d1f8      	bne.n	800951a <__gethex+0x6a>
 8009528:	2201      	movs	r2, #1
 800952a:	4630      	mov	r0, r6
 800952c:	498c      	ldr	r1, [pc, #560]	@ (8009760 <__gethex+0x2b0>)
 800952e:	f7fe ff5a 	bl	80083e6 <strncmp>
 8009532:	2800      	cmp	r0, #0
 8009534:	d13f      	bne.n	80095b6 <__gethex+0x106>
 8009536:	b944      	cbnz	r4, 800954a <__gethex+0x9a>
 8009538:	1c74      	adds	r4, r6, #1
 800953a:	4622      	mov	r2, r4
 800953c:	4616      	mov	r6, r2
 800953e:	7830      	ldrb	r0, [r6, #0]
 8009540:	3201      	adds	r2, #1
 8009542:	f7ff ffa0 	bl	8009486 <__hexdig_fun>
 8009546:	2800      	cmp	r0, #0
 8009548:	d1f8      	bne.n	800953c <__gethex+0x8c>
 800954a:	1ba4      	subs	r4, r4, r6
 800954c:	00a7      	lsls	r7, r4, #2
 800954e:	7833      	ldrb	r3, [r6, #0]
 8009550:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009554:	2b50      	cmp	r3, #80	@ 0x50
 8009556:	d13e      	bne.n	80095d6 <__gethex+0x126>
 8009558:	7873      	ldrb	r3, [r6, #1]
 800955a:	2b2b      	cmp	r3, #43	@ 0x2b
 800955c:	d033      	beq.n	80095c6 <__gethex+0x116>
 800955e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009560:	d034      	beq.n	80095cc <__gethex+0x11c>
 8009562:	2400      	movs	r4, #0
 8009564:	1c71      	adds	r1, r6, #1
 8009566:	7808      	ldrb	r0, [r1, #0]
 8009568:	f7ff ff8d 	bl	8009486 <__hexdig_fun>
 800956c:	1e43      	subs	r3, r0, #1
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b18      	cmp	r3, #24
 8009572:	d830      	bhi.n	80095d6 <__gethex+0x126>
 8009574:	f1a0 0210 	sub.w	r2, r0, #16
 8009578:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800957c:	f7ff ff83 	bl	8009486 <__hexdig_fun>
 8009580:	f100 3cff 	add.w	ip, r0, #4294967295
 8009584:	fa5f fc8c 	uxtb.w	ip, ip
 8009588:	f1bc 0f18 	cmp.w	ip, #24
 800958c:	f04f 030a 	mov.w	r3, #10
 8009590:	d91e      	bls.n	80095d0 <__gethex+0x120>
 8009592:	b104      	cbz	r4, 8009596 <__gethex+0xe6>
 8009594:	4252      	negs	r2, r2
 8009596:	4417      	add	r7, r2
 8009598:	f8ca 1000 	str.w	r1, [sl]
 800959c:	b1ed      	cbz	r5, 80095da <__gethex+0x12a>
 800959e:	f1bb 0f00 	cmp.w	fp, #0
 80095a2:	bf0c      	ite	eq
 80095a4:	2506      	moveq	r5, #6
 80095a6:	2500      	movne	r5, #0
 80095a8:	4628      	mov	r0, r5
 80095aa:	b005      	add	sp, #20
 80095ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b0:	2500      	movs	r5, #0
 80095b2:	462c      	mov	r4, r5
 80095b4:	e7b0      	b.n	8009518 <__gethex+0x68>
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	d1c7      	bne.n	800954a <__gethex+0x9a>
 80095ba:	4627      	mov	r7, r4
 80095bc:	e7c7      	b.n	800954e <__gethex+0x9e>
 80095be:	464e      	mov	r6, r9
 80095c0:	462f      	mov	r7, r5
 80095c2:	2501      	movs	r5, #1
 80095c4:	e7c3      	b.n	800954e <__gethex+0x9e>
 80095c6:	2400      	movs	r4, #0
 80095c8:	1cb1      	adds	r1, r6, #2
 80095ca:	e7cc      	b.n	8009566 <__gethex+0xb6>
 80095cc:	2401      	movs	r4, #1
 80095ce:	e7fb      	b.n	80095c8 <__gethex+0x118>
 80095d0:	fb03 0002 	mla	r0, r3, r2, r0
 80095d4:	e7ce      	b.n	8009574 <__gethex+0xc4>
 80095d6:	4631      	mov	r1, r6
 80095d8:	e7de      	b.n	8009598 <__gethex+0xe8>
 80095da:	4629      	mov	r1, r5
 80095dc:	eba6 0309 	sub.w	r3, r6, r9
 80095e0:	3b01      	subs	r3, #1
 80095e2:	2b07      	cmp	r3, #7
 80095e4:	dc0a      	bgt.n	80095fc <__gethex+0x14c>
 80095e6:	9801      	ldr	r0, [sp, #4]
 80095e8:	f000 fafc 	bl	8009be4 <_Balloc>
 80095ec:	4604      	mov	r4, r0
 80095ee:	b940      	cbnz	r0, 8009602 <__gethex+0x152>
 80095f0:	4602      	mov	r2, r0
 80095f2:	21e4      	movs	r1, #228	@ 0xe4
 80095f4:	4b5b      	ldr	r3, [pc, #364]	@ (8009764 <__gethex+0x2b4>)
 80095f6:	485c      	ldr	r0, [pc, #368]	@ (8009768 <__gethex+0x2b8>)
 80095f8:	f7ff f82e 	bl	8008658 <__assert_func>
 80095fc:	3101      	adds	r1, #1
 80095fe:	105b      	asrs	r3, r3, #1
 8009600:	e7ef      	b.n	80095e2 <__gethex+0x132>
 8009602:	2300      	movs	r3, #0
 8009604:	f100 0a14 	add.w	sl, r0, #20
 8009608:	4655      	mov	r5, sl
 800960a:	469b      	mov	fp, r3
 800960c:	45b1      	cmp	r9, r6
 800960e:	d337      	bcc.n	8009680 <__gethex+0x1d0>
 8009610:	f845 bb04 	str.w	fp, [r5], #4
 8009614:	eba5 050a 	sub.w	r5, r5, sl
 8009618:	10ad      	asrs	r5, r5, #2
 800961a:	6125      	str	r5, [r4, #16]
 800961c:	4658      	mov	r0, fp
 800961e:	f000 fbd3 	bl	8009dc8 <__hi0bits>
 8009622:	016d      	lsls	r5, r5, #5
 8009624:	f8d8 6000 	ldr.w	r6, [r8]
 8009628:	1a2d      	subs	r5, r5, r0
 800962a:	42b5      	cmp	r5, r6
 800962c:	dd54      	ble.n	80096d8 <__gethex+0x228>
 800962e:	1bad      	subs	r5, r5, r6
 8009630:	4629      	mov	r1, r5
 8009632:	4620      	mov	r0, r4
 8009634:	f000 ff55 	bl	800a4e2 <__any_on>
 8009638:	4681      	mov	r9, r0
 800963a:	b178      	cbz	r0, 800965c <__gethex+0x1ac>
 800963c:	f04f 0901 	mov.w	r9, #1
 8009640:	1e6b      	subs	r3, r5, #1
 8009642:	1159      	asrs	r1, r3, #5
 8009644:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009648:	f003 021f 	and.w	r2, r3, #31
 800964c:	fa09 f202 	lsl.w	r2, r9, r2
 8009650:	420a      	tst	r2, r1
 8009652:	d003      	beq.n	800965c <__gethex+0x1ac>
 8009654:	454b      	cmp	r3, r9
 8009656:	dc36      	bgt.n	80096c6 <__gethex+0x216>
 8009658:	f04f 0902 	mov.w	r9, #2
 800965c:	4629      	mov	r1, r5
 800965e:	4620      	mov	r0, r4
 8009660:	f7ff febe 	bl	80093e0 <rshift>
 8009664:	442f      	add	r7, r5
 8009666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800966a:	42bb      	cmp	r3, r7
 800966c:	da42      	bge.n	80096f4 <__gethex+0x244>
 800966e:	4621      	mov	r1, r4
 8009670:	9801      	ldr	r0, [sp, #4]
 8009672:	f000 faf7 	bl	8009c64 <_Bfree>
 8009676:	2300      	movs	r3, #0
 8009678:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800967a:	25a3      	movs	r5, #163	@ 0xa3
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	e793      	b.n	80095a8 <__gethex+0xf8>
 8009680:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009684:	2a2e      	cmp	r2, #46	@ 0x2e
 8009686:	d012      	beq.n	80096ae <__gethex+0x1fe>
 8009688:	2b20      	cmp	r3, #32
 800968a:	d104      	bne.n	8009696 <__gethex+0x1e6>
 800968c:	f845 bb04 	str.w	fp, [r5], #4
 8009690:	f04f 0b00 	mov.w	fp, #0
 8009694:	465b      	mov	r3, fp
 8009696:	7830      	ldrb	r0, [r6, #0]
 8009698:	9303      	str	r3, [sp, #12]
 800969a:	f7ff fef4 	bl	8009486 <__hexdig_fun>
 800969e:	9b03      	ldr	r3, [sp, #12]
 80096a0:	f000 000f 	and.w	r0, r0, #15
 80096a4:	4098      	lsls	r0, r3
 80096a6:	ea4b 0b00 	orr.w	fp, fp, r0
 80096aa:	3304      	adds	r3, #4
 80096ac:	e7ae      	b.n	800960c <__gethex+0x15c>
 80096ae:	45b1      	cmp	r9, r6
 80096b0:	d8ea      	bhi.n	8009688 <__gethex+0x1d8>
 80096b2:	2201      	movs	r2, #1
 80096b4:	4630      	mov	r0, r6
 80096b6:	492a      	ldr	r1, [pc, #168]	@ (8009760 <__gethex+0x2b0>)
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	f7fe fe94 	bl	80083e6 <strncmp>
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d1e1      	bne.n	8009688 <__gethex+0x1d8>
 80096c4:	e7a2      	b.n	800960c <__gethex+0x15c>
 80096c6:	4620      	mov	r0, r4
 80096c8:	1ea9      	subs	r1, r5, #2
 80096ca:	f000 ff0a 	bl	800a4e2 <__any_on>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d0c2      	beq.n	8009658 <__gethex+0x1a8>
 80096d2:	f04f 0903 	mov.w	r9, #3
 80096d6:	e7c1      	b.n	800965c <__gethex+0x1ac>
 80096d8:	da09      	bge.n	80096ee <__gethex+0x23e>
 80096da:	1b75      	subs	r5, r6, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	462a      	mov	r2, r5
 80096e0:	9801      	ldr	r0, [sp, #4]
 80096e2:	f000 fccf 	bl	800a084 <__lshift>
 80096e6:	4604      	mov	r4, r0
 80096e8:	1b7f      	subs	r7, r7, r5
 80096ea:	f100 0a14 	add.w	sl, r0, #20
 80096ee:	f04f 0900 	mov.w	r9, #0
 80096f2:	e7b8      	b.n	8009666 <__gethex+0x1b6>
 80096f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80096f8:	42bd      	cmp	r5, r7
 80096fa:	dd6f      	ble.n	80097dc <__gethex+0x32c>
 80096fc:	1bed      	subs	r5, r5, r7
 80096fe:	42ae      	cmp	r6, r5
 8009700:	dc34      	bgt.n	800976c <__gethex+0x2bc>
 8009702:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d022      	beq.n	8009750 <__gethex+0x2a0>
 800970a:	2b03      	cmp	r3, #3
 800970c:	d024      	beq.n	8009758 <__gethex+0x2a8>
 800970e:	2b01      	cmp	r3, #1
 8009710:	d115      	bne.n	800973e <__gethex+0x28e>
 8009712:	42ae      	cmp	r6, r5
 8009714:	d113      	bne.n	800973e <__gethex+0x28e>
 8009716:	2e01      	cmp	r6, #1
 8009718:	d10b      	bne.n	8009732 <__gethex+0x282>
 800971a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800971e:	9a02      	ldr	r2, [sp, #8]
 8009720:	2562      	movs	r5, #98	@ 0x62
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	2301      	movs	r3, #1
 8009726:	6123      	str	r3, [r4, #16]
 8009728:	f8ca 3000 	str.w	r3, [sl]
 800972c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800972e:	601c      	str	r4, [r3, #0]
 8009730:	e73a      	b.n	80095a8 <__gethex+0xf8>
 8009732:	4620      	mov	r0, r4
 8009734:	1e71      	subs	r1, r6, #1
 8009736:	f000 fed4 	bl	800a4e2 <__any_on>
 800973a:	2800      	cmp	r0, #0
 800973c:	d1ed      	bne.n	800971a <__gethex+0x26a>
 800973e:	4621      	mov	r1, r4
 8009740:	9801      	ldr	r0, [sp, #4]
 8009742:	f000 fa8f 	bl	8009c64 <_Bfree>
 8009746:	2300      	movs	r3, #0
 8009748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800974a:	2550      	movs	r5, #80	@ 0x50
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	e72b      	b.n	80095a8 <__gethex+0xf8>
 8009750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1f3      	bne.n	800973e <__gethex+0x28e>
 8009756:	e7e0      	b.n	800971a <__gethex+0x26a>
 8009758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1dd      	bne.n	800971a <__gethex+0x26a>
 800975e:	e7ee      	b.n	800973e <__gethex+0x28e>
 8009760:	0800b549 	.word	0x0800b549
 8009764:	0800b682 	.word	0x0800b682
 8009768:	0800b693 	.word	0x0800b693
 800976c:	1e6f      	subs	r7, r5, #1
 800976e:	f1b9 0f00 	cmp.w	r9, #0
 8009772:	d130      	bne.n	80097d6 <__gethex+0x326>
 8009774:	b127      	cbz	r7, 8009780 <__gethex+0x2d0>
 8009776:	4639      	mov	r1, r7
 8009778:	4620      	mov	r0, r4
 800977a:	f000 feb2 	bl	800a4e2 <__any_on>
 800977e:	4681      	mov	r9, r0
 8009780:	2301      	movs	r3, #1
 8009782:	4629      	mov	r1, r5
 8009784:	1b76      	subs	r6, r6, r5
 8009786:	2502      	movs	r5, #2
 8009788:	117a      	asrs	r2, r7, #5
 800978a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800978e:	f007 071f 	and.w	r7, r7, #31
 8009792:	40bb      	lsls	r3, r7
 8009794:	4213      	tst	r3, r2
 8009796:	4620      	mov	r0, r4
 8009798:	bf18      	it	ne
 800979a:	f049 0902 	orrne.w	r9, r9, #2
 800979e:	f7ff fe1f 	bl	80093e0 <rshift>
 80097a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80097a6:	f1b9 0f00 	cmp.w	r9, #0
 80097aa:	d047      	beq.n	800983c <__gethex+0x38c>
 80097ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d015      	beq.n	80097e0 <__gethex+0x330>
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d017      	beq.n	80097e8 <__gethex+0x338>
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d109      	bne.n	80097d0 <__gethex+0x320>
 80097bc:	f019 0f02 	tst.w	r9, #2
 80097c0:	d006      	beq.n	80097d0 <__gethex+0x320>
 80097c2:	f8da 3000 	ldr.w	r3, [sl]
 80097c6:	ea49 0903 	orr.w	r9, r9, r3
 80097ca:	f019 0f01 	tst.w	r9, #1
 80097ce:	d10e      	bne.n	80097ee <__gethex+0x33e>
 80097d0:	f045 0510 	orr.w	r5, r5, #16
 80097d4:	e032      	b.n	800983c <__gethex+0x38c>
 80097d6:	f04f 0901 	mov.w	r9, #1
 80097da:	e7d1      	b.n	8009780 <__gethex+0x2d0>
 80097dc:	2501      	movs	r5, #1
 80097de:	e7e2      	b.n	80097a6 <__gethex+0x2f6>
 80097e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097e2:	f1c3 0301 	rsb	r3, r3, #1
 80097e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0f0      	beq.n	80097d0 <__gethex+0x320>
 80097ee:	f04f 0c00 	mov.w	ip, #0
 80097f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097f6:	f104 0314 	add.w	r3, r4, #20
 80097fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80097fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009802:	4618      	mov	r0, r3
 8009804:	f853 2b04 	ldr.w	r2, [r3], #4
 8009808:	f1b2 3fff 	cmp.w	r2, #4294967295
 800980c:	d01b      	beq.n	8009846 <__gethex+0x396>
 800980e:	3201      	adds	r2, #1
 8009810:	6002      	str	r2, [r0, #0]
 8009812:	2d02      	cmp	r5, #2
 8009814:	f104 0314 	add.w	r3, r4, #20
 8009818:	d13c      	bne.n	8009894 <__gethex+0x3e4>
 800981a:	f8d8 2000 	ldr.w	r2, [r8]
 800981e:	3a01      	subs	r2, #1
 8009820:	42b2      	cmp	r2, r6
 8009822:	d109      	bne.n	8009838 <__gethex+0x388>
 8009824:	2201      	movs	r2, #1
 8009826:	1171      	asrs	r1, r6, #5
 8009828:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800982c:	f006 061f 	and.w	r6, r6, #31
 8009830:	fa02 f606 	lsl.w	r6, r2, r6
 8009834:	421e      	tst	r6, r3
 8009836:	d13a      	bne.n	80098ae <__gethex+0x3fe>
 8009838:	f045 0520 	orr.w	r5, r5, #32
 800983c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800983e:	601c      	str	r4, [r3, #0]
 8009840:	9b02      	ldr	r3, [sp, #8]
 8009842:	601f      	str	r7, [r3, #0]
 8009844:	e6b0      	b.n	80095a8 <__gethex+0xf8>
 8009846:	4299      	cmp	r1, r3
 8009848:	f843 cc04 	str.w	ip, [r3, #-4]
 800984c:	d8d9      	bhi.n	8009802 <__gethex+0x352>
 800984e:	68a3      	ldr	r3, [r4, #8]
 8009850:	459b      	cmp	fp, r3
 8009852:	db17      	blt.n	8009884 <__gethex+0x3d4>
 8009854:	6861      	ldr	r1, [r4, #4]
 8009856:	9801      	ldr	r0, [sp, #4]
 8009858:	3101      	adds	r1, #1
 800985a:	f000 f9c3 	bl	8009be4 <_Balloc>
 800985e:	4681      	mov	r9, r0
 8009860:	b918      	cbnz	r0, 800986a <__gethex+0x3ba>
 8009862:	4602      	mov	r2, r0
 8009864:	2184      	movs	r1, #132	@ 0x84
 8009866:	4b19      	ldr	r3, [pc, #100]	@ (80098cc <__gethex+0x41c>)
 8009868:	e6c5      	b.n	80095f6 <__gethex+0x146>
 800986a:	6922      	ldr	r2, [r4, #16]
 800986c:	f104 010c 	add.w	r1, r4, #12
 8009870:	3202      	adds	r2, #2
 8009872:	0092      	lsls	r2, r2, #2
 8009874:	300c      	adds	r0, #12
 8009876:	f7fe feda 	bl	800862e <memcpy>
 800987a:	4621      	mov	r1, r4
 800987c:	9801      	ldr	r0, [sp, #4]
 800987e:	f000 f9f1 	bl	8009c64 <_Bfree>
 8009882:	464c      	mov	r4, r9
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	6122      	str	r2, [r4, #16]
 800988a:	2201      	movs	r2, #1
 800988c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009890:	615a      	str	r2, [r3, #20]
 8009892:	e7be      	b.n	8009812 <__gethex+0x362>
 8009894:	6922      	ldr	r2, [r4, #16]
 8009896:	455a      	cmp	r2, fp
 8009898:	dd0b      	ble.n	80098b2 <__gethex+0x402>
 800989a:	2101      	movs	r1, #1
 800989c:	4620      	mov	r0, r4
 800989e:	f7ff fd9f 	bl	80093e0 <rshift>
 80098a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098a6:	3701      	adds	r7, #1
 80098a8:	42bb      	cmp	r3, r7
 80098aa:	f6ff aee0 	blt.w	800966e <__gethex+0x1be>
 80098ae:	2501      	movs	r5, #1
 80098b0:	e7c2      	b.n	8009838 <__gethex+0x388>
 80098b2:	f016 061f 	ands.w	r6, r6, #31
 80098b6:	d0fa      	beq.n	80098ae <__gethex+0x3fe>
 80098b8:	4453      	add	r3, sl
 80098ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098be:	f000 fa83 	bl	8009dc8 <__hi0bits>
 80098c2:	f1c6 0620 	rsb	r6, r6, #32
 80098c6:	42b0      	cmp	r0, r6
 80098c8:	dbe7      	blt.n	800989a <__gethex+0x3ea>
 80098ca:	e7f0      	b.n	80098ae <__gethex+0x3fe>
 80098cc:	0800b682 	.word	0x0800b682

080098d0 <L_shift>:
 80098d0:	f1c2 0208 	rsb	r2, r2, #8
 80098d4:	0092      	lsls	r2, r2, #2
 80098d6:	b570      	push	{r4, r5, r6, lr}
 80098d8:	f1c2 0620 	rsb	r6, r2, #32
 80098dc:	6843      	ldr	r3, [r0, #4]
 80098de:	6804      	ldr	r4, [r0, #0]
 80098e0:	fa03 f506 	lsl.w	r5, r3, r6
 80098e4:	432c      	orrs	r4, r5
 80098e6:	40d3      	lsrs	r3, r2
 80098e8:	6004      	str	r4, [r0, #0]
 80098ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80098ee:	4288      	cmp	r0, r1
 80098f0:	d3f4      	bcc.n	80098dc <L_shift+0xc>
 80098f2:	bd70      	pop	{r4, r5, r6, pc}

080098f4 <__match>:
 80098f4:	b530      	push	{r4, r5, lr}
 80098f6:	6803      	ldr	r3, [r0, #0]
 80098f8:	3301      	adds	r3, #1
 80098fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098fe:	b914      	cbnz	r4, 8009906 <__match+0x12>
 8009900:	6003      	str	r3, [r0, #0]
 8009902:	2001      	movs	r0, #1
 8009904:	bd30      	pop	{r4, r5, pc}
 8009906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800990a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800990e:	2d19      	cmp	r5, #25
 8009910:	bf98      	it	ls
 8009912:	3220      	addls	r2, #32
 8009914:	42a2      	cmp	r2, r4
 8009916:	d0f0      	beq.n	80098fa <__match+0x6>
 8009918:	2000      	movs	r0, #0
 800991a:	e7f3      	b.n	8009904 <__match+0x10>

0800991c <__hexnan>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	2500      	movs	r5, #0
 8009922:	680b      	ldr	r3, [r1, #0]
 8009924:	4682      	mov	sl, r0
 8009926:	115e      	asrs	r6, r3, #5
 8009928:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800992c:	f013 031f 	ands.w	r3, r3, #31
 8009930:	bf18      	it	ne
 8009932:	3604      	addne	r6, #4
 8009934:	1f37      	subs	r7, r6, #4
 8009936:	4690      	mov	r8, r2
 8009938:	46b9      	mov	r9, r7
 800993a:	463c      	mov	r4, r7
 800993c:	46ab      	mov	fp, r5
 800993e:	b087      	sub	sp, #28
 8009940:	6801      	ldr	r1, [r0, #0]
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	f846 5c04 	str.w	r5, [r6, #-4]
 8009948:	9502      	str	r5, [sp, #8]
 800994a:	784a      	ldrb	r2, [r1, #1]
 800994c:	1c4b      	adds	r3, r1, #1
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	b342      	cbz	r2, 80099a4 <__hexnan+0x88>
 8009952:	4610      	mov	r0, r2
 8009954:	9105      	str	r1, [sp, #20]
 8009956:	9204      	str	r2, [sp, #16]
 8009958:	f7ff fd95 	bl	8009486 <__hexdig_fun>
 800995c:	2800      	cmp	r0, #0
 800995e:	d151      	bne.n	8009a04 <__hexnan+0xe8>
 8009960:	9a04      	ldr	r2, [sp, #16]
 8009962:	9905      	ldr	r1, [sp, #20]
 8009964:	2a20      	cmp	r2, #32
 8009966:	d818      	bhi.n	800999a <__hexnan+0x7e>
 8009968:	9b02      	ldr	r3, [sp, #8]
 800996a:	459b      	cmp	fp, r3
 800996c:	dd13      	ble.n	8009996 <__hexnan+0x7a>
 800996e:	454c      	cmp	r4, r9
 8009970:	d206      	bcs.n	8009980 <__hexnan+0x64>
 8009972:	2d07      	cmp	r5, #7
 8009974:	dc04      	bgt.n	8009980 <__hexnan+0x64>
 8009976:	462a      	mov	r2, r5
 8009978:	4649      	mov	r1, r9
 800997a:	4620      	mov	r0, r4
 800997c:	f7ff ffa8 	bl	80098d0 <L_shift>
 8009980:	4544      	cmp	r4, r8
 8009982:	d952      	bls.n	8009a2a <__hexnan+0x10e>
 8009984:	2300      	movs	r3, #0
 8009986:	f1a4 0904 	sub.w	r9, r4, #4
 800998a:	f844 3c04 	str.w	r3, [r4, #-4]
 800998e:	461d      	mov	r5, r3
 8009990:	464c      	mov	r4, r9
 8009992:	f8cd b008 	str.w	fp, [sp, #8]
 8009996:	9903      	ldr	r1, [sp, #12]
 8009998:	e7d7      	b.n	800994a <__hexnan+0x2e>
 800999a:	2a29      	cmp	r2, #41	@ 0x29
 800999c:	d157      	bne.n	8009a4e <__hexnan+0x132>
 800999e:	3102      	adds	r1, #2
 80099a0:	f8ca 1000 	str.w	r1, [sl]
 80099a4:	f1bb 0f00 	cmp.w	fp, #0
 80099a8:	d051      	beq.n	8009a4e <__hexnan+0x132>
 80099aa:	454c      	cmp	r4, r9
 80099ac:	d206      	bcs.n	80099bc <__hexnan+0xa0>
 80099ae:	2d07      	cmp	r5, #7
 80099b0:	dc04      	bgt.n	80099bc <__hexnan+0xa0>
 80099b2:	462a      	mov	r2, r5
 80099b4:	4649      	mov	r1, r9
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff ff8a 	bl	80098d0 <L_shift>
 80099bc:	4544      	cmp	r4, r8
 80099be:	d936      	bls.n	8009a2e <__hexnan+0x112>
 80099c0:	4623      	mov	r3, r4
 80099c2:	f1a8 0204 	sub.w	r2, r8, #4
 80099c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80099ca:	429f      	cmp	r7, r3
 80099cc:	f842 1f04 	str.w	r1, [r2, #4]!
 80099d0:	d2f9      	bcs.n	80099c6 <__hexnan+0xaa>
 80099d2:	1b3b      	subs	r3, r7, r4
 80099d4:	f023 0303 	bic.w	r3, r3, #3
 80099d8:	3304      	adds	r3, #4
 80099da:	3401      	adds	r4, #1
 80099dc:	3e03      	subs	r6, #3
 80099de:	42b4      	cmp	r4, r6
 80099e0:	bf88      	it	hi
 80099e2:	2304      	movhi	r3, #4
 80099e4:	2200      	movs	r2, #0
 80099e6:	4443      	add	r3, r8
 80099e8:	f843 2b04 	str.w	r2, [r3], #4
 80099ec:	429f      	cmp	r7, r3
 80099ee:	d2fb      	bcs.n	80099e8 <__hexnan+0xcc>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	b91b      	cbnz	r3, 80099fc <__hexnan+0xe0>
 80099f4:	4547      	cmp	r7, r8
 80099f6:	d128      	bne.n	8009a4a <__hexnan+0x12e>
 80099f8:	2301      	movs	r3, #1
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	2005      	movs	r0, #5
 80099fe:	b007      	add	sp, #28
 8009a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a04:	3501      	adds	r5, #1
 8009a06:	2d08      	cmp	r5, #8
 8009a08:	f10b 0b01 	add.w	fp, fp, #1
 8009a0c:	dd06      	ble.n	8009a1c <__hexnan+0x100>
 8009a0e:	4544      	cmp	r4, r8
 8009a10:	d9c1      	bls.n	8009996 <__hexnan+0x7a>
 8009a12:	2300      	movs	r3, #0
 8009a14:	2501      	movs	r5, #1
 8009a16:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a1a:	3c04      	subs	r4, #4
 8009a1c:	6822      	ldr	r2, [r4, #0]
 8009a1e:	f000 000f 	and.w	r0, r0, #15
 8009a22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a26:	6020      	str	r0, [r4, #0]
 8009a28:	e7b5      	b.n	8009996 <__hexnan+0x7a>
 8009a2a:	2508      	movs	r5, #8
 8009a2c:	e7b3      	b.n	8009996 <__hexnan+0x7a>
 8009a2e:	9b01      	ldr	r3, [sp, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d0dd      	beq.n	80099f0 <__hexnan+0xd4>
 8009a34:	f04f 32ff 	mov.w	r2, #4294967295
 8009a38:	f1c3 0320 	rsb	r3, r3, #32
 8009a3c:	40da      	lsrs	r2, r3
 8009a3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a42:	4013      	ands	r3, r2
 8009a44:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a48:	e7d2      	b.n	80099f0 <__hexnan+0xd4>
 8009a4a:	3f04      	subs	r7, #4
 8009a4c:	e7d0      	b.n	80099f0 <__hexnan+0xd4>
 8009a4e:	2004      	movs	r0, #4
 8009a50:	e7d5      	b.n	80099fe <__hexnan+0xe2>
	...

08009a54 <malloc>:
 8009a54:	4b02      	ldr	r3, [pc, #8]	@ (8009a60 <malloc+0xc>)
 8009a56:	4601      	mov	r1, r0
 8009a58:	6818      	ldr	r0, [r3, #0]
 8009a5a:	f000 b825 	b.w	8009aa8 <_malloc_r>
 8009a5e:	bf00      	nop
 8009a60:	200001a4 	.word	0x200001a4

08009a64 <sbrk_aligned>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4e0f      	ldr	r6, [pc, #60]	@ (8009aa4 <sbrk_aligned+0x40>)
 8009a68:	460c      	mov	r4, r1
 8009a6a:	6831      	ldr	r1, [r6, #0]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	b911      	cbnz	r1, 8009a76 <sbrk_aligned+0x12>
 8009a70:	f000 ff90 	bl	800a994 <_sbrk_r>
 8009a74:	6030      	str	r0, [r6, #0]
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f000 ff8b 	bl	800a994 <_sbrk_r>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d103      	bne.n	8009a8a <sbrk_aligned+0x26>
 8009a82:	f04f 34ff 	mov.w	r4, #4294967295
 8009a86:	4620      	mov	r0, r4
 8009a88:	bd70      	pop	{r4, r5, r6, pc}
 8009a8a:	1cc4      	adds	r4, r0, #3
 8009a8c:	f024 0403 	bic.w	r4, r4, #3
 8009a90:	42a0      	cmp	r0, r4
 8009a92:	d0f8      	beq.n	8009a86 <sbrk_aligned+0x22>
 8009a94:	1a21      	subs	r1, r4, r0
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 ff7c 	bl	800a994 <_sbrk_r>
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d1f2      	bne.n	8009a86 <sbrk_aligned+0x22>
 8009aa0:	e7ef      	b.n	8009a82 <sbrk_aligned+0x1e>
 8009aa2:	bf00      	nop
 8009aa4:	2000096c 	.word	0x2000096c

08009aa8 <_malloc_r>:
 8009aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aac:	1ccd      	adds	r5, r1, #3
 8009aae:	f025 0503 	bic.w	r5, r5, #3
 8009ab2:	3508      	adds	r5, #8
 8009ab4:	2d0c      	cmp	r5, #12
 8009ab6:	bf38      	it	cc
 8009ab8:	250c      	movcc	r5, #12
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	4606      	mov	r6, r0
 8009abe:	db01      	blt.n	8009ac4 <_malloc_r+0x1c>
 8009ac0:	42a9      	cmp	r1, r5
 8009ac2:	d904      	bls.n	8009ace <_malloc_r+0x26>
 8009ac4:	230c      	movs	r3, #12
 8009ac6:	6033      	str	r3, [r6, #0]
 8009ac8:	2000      	movs	r0, #0
 8009aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ace:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ba4 <_malloc_r+0xfc>
 8009ad2:	f000 f87b 	bl	8009bcc <__malloc_lock>
 8009ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8009ada:	461c      	mov	r4, r3
 8009adc:	bb44      	cbnz	r4, 8009b30 <_malloc_r+0x88>
 8009ade:	4629      	mov	r1, r5
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f7ff ffbf 	bl	8009a64 <sbrk_aligned>
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	4604      	mov	r4, r0
 8009aea:	d158      	bne.n	8009b9e <_malloc_r+0xf6>
 8009aec:	f8d8 4000 	ldr.w	r4, [r8]
 8009af0:	4627      	mov	r7, r4
 8009af2:	2f00      	cmp	r7, #0
 8009af4:	d143      	bne.n	8009b7e <_malloc_r+0xd6>
 8009af6:	2c00      	cmp	r4, #0
 8009af8:	d04b      	beq.n	8009b92 <_malloc_r+0xea>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	4639      	mov	r1, r7
 8009afe:	4630      	mov	r0, r6
 8009b00:	eb04 0903 	add.w	r9, r4, r3
 8009b04:	f000 ff46 	bl	800a994 <_sbrk_r>
 8009b08:	4581      	cmp	r9, r0
 8009b0a:	d142      	bne.n	8009b92 <_malloc_r+0xea>
 8009b0c:	6821      	ldr	r1, [r4, #0]
 8009b0e:	4630      	mov	r0, r6
 8009b10:	1a6d      	subs	r5, r5, r1
 8009b12:	4629      	mov	r1, r5
 8009b14:	f7ff ffa6 	bl	8009a64 <sbrk_aligned>
 8009b18:	3001      	adds	r0, #1
 8009b1a:	d03a      	beq.n	8009b92 <_malloc_r+0xea>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	442b      	add	r3, r5
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	f8d8 3000 	ldr.w	r3, [r8]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	bb62      	cbnz	r2, 8009b84 <_malloc_r+0xdc>
 8009b2a:	f8c8 7000 	str.w	r7, [r8]
 8009b2e:	e00f      	b.n	8009b50 <_malloc_r+0xa8>
 8009b30:	6822      	ldr	r2, [r4, #0]
 8009b32:	1b52      	subs	r2, r2, r5
 8009b34:	d420      	bmi.n	8009b78 <_malloc_r+0xd0>
 8009b36:	2a0b      	cmp	r2, #11
 8009b38:	d917      	bls.n	8009b6a <_malloc_r+0xc2>
 8009b3a:	1961      	adds	r1, r4, r5
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	6025      	str	r5, [r4, #0]
 8009b40:	bf18      	it	ne
 8009b42:	6059      	strne	r1, [r3, #4]
 8009b44:	6863      	ldr	r3, [r4, #4]
 8009b46:	bf08      	it	eq
 8009b48:	f8c8 1000 	streq.w	r1, [r8]
 8009b4c:	5162      	str	r2, [r4, r5]
 8009b4e:	604b      	str	r3, [r1, #4]
 8009b50:	4630      	mov	r0, r6
 8009b52:	f000 f841 	bl	8009bd8 <__malloc_unlock>
 8009b56:	f104 000b 	add.w	r0, r4, #11
 8009b5a:	1d23      	adds	r3, r4, #4
 8009b5c:	f020 0007 	bic.w	r0, r0, #7
 8009b60:	1ac2      	subs	r2, r0, r3
 8009b62:	bf1c      	itt	ne
 8009b64:	1a1b      	subne	r3, r3, r0
 8009b66:	50a3      	strne	r3, [r4, r2]
 8009b68:	e7af      	b.n	8009aca <_malloc_r+0x22>
 8009b6a:	6862      	ldr	r2, [r4, #4]
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	bf0c      	ite	eq
 8009b70:	f8c8 2000 	streq.w	r2, [r8]
 8009b74:	605a      	strne	r2, [r3, #4]
 8009b76:	e7eb      	b.n	8009b50 <_malloc_r+0xa8>
 8009b78:	4623      	mov	r3, r4
 8009b7a:	6864      	ldr	r4, [r4, #4]
 8009b7c:	e7ae      	b.n	8009adc <_malloc_r+0x34>
 8009b7e:	463c      	mov	r4, r7
 8009b80:	687f      	ldr	r7, [r7, #4]
 8009b82:	e7b6      	b.n	8009af2 <_malloc_r+0x4a>
 8009b84:	461a      	mov	r2, r3
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	d1fb      	bne.n	8009b84 <_malloc_r+0xdc>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	6053      	str	r3, [r2, #4]
 8009b90:	e7de      	b.n	8009b50 <_malloc_r+0xa8>
 8009b92:	230c      	movs	r3, #12
 8009b94:	4630      	mov	r0, r6
 8009b96:	6033      	str	r3, [r6, #0]
 8009b98:	f000 f81e 	bl	8009bd8 <__malloc_unlock>
 8009b9c:	e794      	b.n	8009ac8 <_malloc_r+0x20>
 8009b9e:	6005      	str	r5, [r0, #0]
 8009ba0:	e7d6      	b.n	8009b50 <_malloc_r+0xa8>
 8009ba2:	bf00      	nop
 8009ba4:	20000970 	.word	0x20000970

08009ba8 <__ascii_mbtowc>:
 8009ba8:	b082      	sub	sp, #8
 8009baa:	b901      	cbnz	r1, 8009bae <__ascii_mbtowc+0x6>
 8009bac:	a901      	add	r1, sp, #4
 8009bae:	b142      	cbz	r2, 8009bc2 <__ascii_mbtowc+0x1a>
 8009bb0:	b14b      	cbz	r3, 8009bc6 <__ascii_mbtowc+0x1e>
 8009bb2:	7813      	ldrb	r3, [r2, #0]
 8009bb4:	600b      	str	r3, [r1, #0]
 8009bb6:	7812      	ldrb	r2, [r2, #0]
 8009bb8:	1e10      	subs	r0, r2, #0
 8009bba:	bf18      	it	ne
 8009bbc:	2001      	movne	r0, #1
 8009bbe:	b002      	add	sp, #8
 8009bc0:	4770      	bx	lr
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	e7fb      	b.n	8009bbe <__ascii_mbtowc+0x16>
 8009bc6:	f06f 0001 	mvn.w	r0, #1
 8009bca:	e7f8      	b.n	8009bbe <__ascii_mbtowc+0x16>

08009bcc <__malloc_lock>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	@ (8009bd4 <__malloc_lock+0x8>)
 8009bce:	f7fe bd16 	b.w	80085fe <__retarget_lock_acquire_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	20000968 	.word	0x20000968

08009bd8 <__malloc_unlock>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	@ (8009be0 <__malloc_unlock+0x8>)
 8009bda:	f7fe bd11 	b.w	8008600 <__retarget_lock_release_recursive>
 8009bde:	bf00      	nop
 8009be0:	20000968 	.word	0x20000968

08009be4 <_Balloc>:
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	69c6      	ldr	r6, [r0, #28]
 8009be8:	4604      	mov	r4, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	b976      	cbnz	r6, 8009c0c <_Balloc+0x28>
 8009bee:	2010      	movs	r0, #16
 8009bf0:	f7ff ff30 	bl	8009a54 <malloc>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	61e0      	str	r0, [r4, #28]
 8009bf8:	b920      	cbnz	r0, 8009c04 <_Balloc+0x20>
 8009bfa:	216b      	movs	r1, #107	@ 0x6b
 8009bfc:	4b17      	ldr	r3, [pc, #92]	@ (8009c5c <_Balloc+0x78>)
 8009bfe:	4818      	ldr	r0, [pc, #96]	@ (8009c60 <_Balloc+0x7c>)
 8009c00:	f7fe fd2a 	bl	8008658 <__assert_func>
 8009c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c08:	6006      	str	r6, [r0, #0]
 8009c0a:	60c6      	str	r6, [r0, #12]
 8009c0c:	69e6      	ldr	r6, [r4, #28]
 8009c0e:	68f3      	ldr	r3, [r6, #12]
 8009c10:	b183      	cbz	r3, 8009c34 <_Balloc+0x50>
 8009c12:	69e3      	ldr	r3, [r4, #28]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c1a:	b9b8      	cbnz	r0, 8009c4c <_Balloc+0x68>
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8009c22:	1d72      	adds	r2, r6, #5
 8009c24:	4620      	mov	r0, r4
 8009c26:	0092      	lsls	r2, r2, #2
 8009c28:	f000 fecb 	bl	800a9c2 <_calloc_r>
 8009c2c:	b160      	cbz	r0, 8009c48 <_Balloc+0x64>
 8009c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c32:	e00e      	b.n	8009c52 <_Balloc+0x6e>
 8009c34:	2221      	movs	r2, #33	@ 0x21
 8009c36:	2104      	movs	r1, #4
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f000 fec2 	bl	800a9c2 <_calloc_r>
 8009c3e:	69e3      	ldr	r3, [r4, #28]
 8009c40:	60f0      	str	r0, [r6, #12]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1e4      	bne.n	8009c12 <_Balloc+0x2e>
 8009c48:	2000      	movs	r0, #0
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	6802      	ldr	r2, [r0, #0]
 8009c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c52:	2300      	movs	r3, #0
 8009c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c58:	e7f7      	b.n	8009c4a <_Balloc+0x66>
 8009c5a:	bf00      	nop
 8009c5c:	0800b4da 	.word	0x0800b4da
 8009c60:	0800b6f3 	.word	0x0800b6f3

08009c64 <_Bfree>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	69c6      	ldr	r6, [r0, #28]
 8009c68:	4605      	mov	r5, r0
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	b976      	cbnz	r6, 8009c8c <_Bfree+0x28>
 8009c6e:	2010      	movs	r0, #16
 8009c70:	f7ff fef0 	bl	8009a54 <malloc>
 8009c74:	4602      	mov	r2, r0
 8009c76:	61e8      	str	r0, [r5, #28]
 8009c78:	b920      	cbnz	r0, 8009c84 <_Bfree+0x20>
 8009c7a:	218f      	movs	r1, #143	@ 0x8f
 8009c7c:	4b08      	ldr	r3, [pc, #32]	@ (8009ca0 <_Bfree+0x3c>)
 8009c7e:	4809      	ldr	r0, [pc, #36]	@ (8009ca4 <_Bfree+0x40>)
 8009c80:	f7fe fcea 	bl	8008658 <__assert_func>
 8009c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c88:	6006      	str	r6, [r0, #0]
 8009c8a:	60c6      	str	r6, [r0, #12]
 8009c8c:	b13c      	cbz	r4, 8009c9e <_Bfree+0x3a>
 8009c8e:	69eb      	ldr	r3, [r5, #28]
 8009c90:	6862      	ldr	r2, [r4, #4]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c98:	6021      	str	r1, [r4, #0]
 8009c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	0800b4da 	.word	0x0800b4da
 8009ca4:	0800b6f3 	.word	0x0800b6f3

08009ca8 <__multadd>:
 8009ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cac:	4607      	mov	r7, r0
 8009cae:	460c      	mov	r4, r1
 8009cb0:	461e      	mov	r6, r3
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	690d      	ldr	r5, [r1, #16]
 8009cb6:	f101 0c14 	add.w	ip, r1, #20
 8009cba:	f8dc 3000 	ldr.w	r3, [ip]
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	b299      	uxth	r1, r3
 8009cc2:	fb02 6101 	mla	r1, r2, r1, r6
 8009cc6:	0c1e      	lsrs	r6, r3, #16
 8009cc8:	0c0b      	lsrs	r3, r1, #16
 8009cca:	fb02 3306 	mla	r3, r2, r6, r3
 8009cce:	b289      	uxth	r1, r1
 8009cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009cd4:	4285      	cmp	r5, r0
 8009cd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009cda:	f84c 1b04 	str.w	r1, [ip], #4
 8009cde:	dcec      	bgt.n	8009cba <__multadd+0x12>
 8009ce0:	b30e      	cbz	r6, 8009d26 <__multadd+0x7e>
 8009ce2:	68a3      	ldr	r3, [r4, #8]
 8009ce4:	42ab      	cmp	r3, r5
 8009ce6:	dc19      	bgt.n	8009d1c <__multadd+0x74>
 8009ce8:	6861      	ldr	r1, [r4, #4]
 8009cea:	4638      	mov	r0, r7
 8009cec:	3101      	adds	r1, #1
 8009cee:	f7ff ff79 	bl	8009be4 <_Balloc>
 8009cf2:	4680      	mov	r8, r0
 8009cf4:	b928      	cbnz	r0, 8009d02 <__multadd+0x5a>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	21ba      	movs	r1, #186	@ 0xba
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8009d2c <__multadd+0x84>)
 8009cfc:	480c      	ldr	r0, [pc, #48]	@ (8009d30 <__multadd+0x88>)
 8009cfe:	f7fe fcab 	bl	8008658 <__assert_func>
 8009d02:	6922      	ldr	r2, [r4, #16]
 8009d04:	f104 010c 	add.w	r1, r4, #12
 8009d08:	3202      	adds	r2, #2
 8009d0a:	0092      	lsls	r2, r2, #2
 8009d0c:	300c      	adds	r0, #12
 8009d0e:	f7fe fc8e 	bl	800862e <memcpy>
 8009d12:	4621      	mov	r1, r4
 8009d14:	4638      	mov	r0, r7
 8009d16:	f7ff ffa5 	bl	8009c64 <_Bfree>
 8009d1a:	4644      	mov	r4, r8
 8009d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d20:	3501      	adds	r5, #1
 8009d22:	615e      	str	r6, [r3, #20]
 8009d24:	6125      	str	r5, [r4, #16]
 8009d26:	4620      	mov	r0, r4
 8009d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d2c:	0800b682 	.word	0x0800b682
 8009d30:	0800b6f3 	.word	0x0800b6f3

08009d34 <__s2b>:
 8009d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d38:	4615      	mov	r5, r2
 8009d3a:	2209      	movs	r2, #9
 8009d3c:	461f      	mov	r7, r3
 8009d3e:	3308      	adds	r3, #8
 8009d40:	460c      	mov	r4, r1
 8009d42:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d46:	4606      	mov	r6, r0
 8009d48:	2201      	movs	r2, #1
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	db09      	blt.n	8009d64 <__s2b+0x30>
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7ff ff47 	bl	8009be4 <_Balloc>
 8009d56:	b940      	cbnz	r0, 8009d6a <__s2b+0x36>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	21d3      	movs	r1, #211	@ 0xd3
 8009d5c:	4b18      	ldr	r3, [pc, #96]	@ (8009dc0 <__s2b+0x8c>)
 8009d5e:	4819      	ldr	r0, [pc, #100]	@ (8009dc4 <__s2b+0x90>)
 8009d60:	f7fe fc7a 	bl	8008658 <__assert_func>
 8009d64:	0052      	lsls	r2, r2, #1
 8009d66:	3101      	adds	r1, #1
 8009d68:	e7f0      	b.n	8009d4c <__s2b+0x18>
 8009d6a:	9b08      	ldr	r3, [sp, #32]
 8009d6c:	2d09      	cmp	r5, #9
 8009d6e:	6143      	str	r3, [r0, #20]
 8009d70:	f04f 0301 	mov.w	r3, #1
 8009d74:	6103      	str	r3, [r0, #16]
 8009d76:	dd16      	ble.n	8009da6 <__s2b+0x72>
 8009d78:	f104 0909 	add.w	r9, r4, #9
 8009d7c:	46c8      	mov	r8, r9
 8009d7e:	442c      	add	r4, r5
 8009d80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d84:	4601      	mov	r1, r0
 8009d86:	220a      	movs	r2, #10
 8009d88:	4630      	mov	r0, r6
 8009d8a:	3b30      	subs	r3, #48	@ 0x30
 8009d8c:	f7ff ff8c 	bl	8009ca8 <__multadd>
 8009d90:	45a0      	cmp	r8, r4
 8009d92:	d1f5      	bne.n	8009d80 <__s2b+0x4c>
 8009d94:	f1a5 0408 	sub.w	r4, r5, #8
 8009d98:	444c      	add	r4, r9
 8009d9a:	1b2d      	subs	r5, r5, r4
 8009d9c:	1963      	adds	r3, r4, r5
 8009d9e:	42bb      	cmp	r3, r7
 8009da0:	db04      	blt.n	8009dac <__s2b+0x78>
 8009da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da6:	2509      	movs	r5, #9
 8009da8:	340a      	adds	r4, #10
 8009daa:	e7f6      	b.n	8009d9a <__s2b+0x66>
 8009dac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009db0:	4601      	mov	r1, r0
 8009db2:	220a      	movs	r2, #10
 8009db4:	4630      	mov	r0, r6
 8009db6:	3b30      	subs	r3, #48	@ 0x30
 8009db8:	f7ff ff76 	bl	8009ca8 <__multadd>
 8009dbc:	e7ee      	b.n	8009d9c <__s2b+0x68>
 8009dbe:	bf00      	nop
 8009dc0:	0800b682 	.word	0x0800b682
 8009dc4:	0800b6f3 	.word	0x0800b6f3

08009dc8 <__hi0bits>:
 8009dc8:	4603      	mov	r3, r0
 8009dca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009dce:	bf3a      	itte	cc
 8009dd0:	0403      	lslcc	r3, r0, #16
 8009dd2:	2010      	movcc	r0, #16
 8009dd4:	2000      	movcs	r0, #0
 8009dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dda:	bf3c      	itt	cc
 8009ddc:	021b      	lslcc	r3, r3, #8
 8009dde:	3008      	addcc	r0, #8
 8009de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009de4:	bf3c      	itt	cc
 8009de6:	011b      	lslcc	r3, r3, #4
 8009de8:	3004      	addcc	r0, #4
 8009dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dee:	bf3c      	itt	cc
 8009df0:	009b      	lslcc	r3, r3, #2
 8009df2:	3002      	addcc	r0, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	db05      	blt.n	8009e04 <__hi0bits+0x3c>
 8009df8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009dfc:	f100 0001 	add.w	r0, r0, #1
 8009e00:	bf08      	it	eq
 8009e02:	2020      	moveq	r0, #32
 8009e04:	4770      	bx	lr

08009e06 <__lo0bits>:
 8009e06:	6803      	ldr	r3, [r0, #0]
 8009e08:	4602      	mov	r2, r0
 8009e0a:	f013 0007 	ands.w	r0, r3, #7
 8009e0e:	d00b      	beq.n	8009e28 <__lo0bits+0x22>
 8009e10:	07d9      	lsls	r1, r3, #31
 8009e12:	d421      	bmi.n	8009e58 <__lo0bits+0x52>
 8009e14:	0798      	lsls	r0, r3, #30
 8009e16:	bf49      	itett	mi
 8009e18:	085b      	lsrmi	r3, r3, #1
 8009e1a:	089b      	lsrpl	r3, r3, #2
 8009e1c:	2001      	movmi	r0, #1
 8009e1e:	6013      	strmi	r3, [r2, #0]
 8009e20:	bf5c      	itt	pl
 8009e22:	2002      	movpl	r0, #2
 8009e24:	6013      	strpl	r3, [r2, #0]
 8009e26:	4770      	bx	lr
 8009e28:	b299      	uxth	r1, r3
 8009e2a:	b909      	cbnz	r1, 8009e30 <__lo0bits+0x2a>
 8009e2c:	2010      	movs	r0, #16
 8009e2e:	0c1b      	lsrs	r3, r3, #16
 8009e30:	b2d9      	uxtb	r1, r3
 8009e32:	b909      	cbnz	r1, 8009e38 <__lo0bits+0x32>
 8009e34:	3008      	adds	r0, #8
 8009e36:	0a1b      	lsrs	r3, r3, #8
 8009e38:	0719      	lsls	r1, r3, #28
 8009e3a:	bf04      	itt	eq
 8009e3c:	091b      	lsreq	r3, r3, #4
 8009e3e:	3004      	addeq	r0, #4
 8009e40:	0799      	lsls	r1, r3, #30
 8009e42:	bf04      	itt	eq
 8009e44:	089b      	lsreq	r3, r3, #2
 8009e46:	3002      	addeq	r0, #2
 8009e48:	07d9      	lsls	r1, r3, #31
 8009e4a:	d403      	bmi.n	8009e54 <__lo0bits+0x4e>
 8009e4c:	085b      	lsrs	r3, r3, #1
 8009e4e:	f100 0001 	add.w	r0, r0, #1
 8009e52:	d003      	beq.n	8009e5c <__lo0bits+0x56>
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	4770      	bx	lr
 8009e58:	2000      	movs	r0, #0
 8009e5a:	4770      	bx	lr
 8009e5c:	2020      	movs	r0, #32
 8009e5e:	4770      	bx	lr

08009e60 <__i2b>:
 8009e60:	b510      	push	{r4, lr}
 8009e62:	460c      	mov	r4, r1
 8009e64:	2101      	movs	r1, #1
 8009e66:	f7ff febd 	bl	8009be4 <_Balloc>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	b928      	cbnz	r0, 8009e7a <__i2b+0x1a>
 8009e6e:	f240 1145 	movw	r1, #325	@ 0x145
 8009e72:	4b04      	ldr	r3, [pc, #16]	@ (8009e84 <__i2b+0x24>)
 8009e74:	4804      	ldr	r0, [pc, #16]	@ (8009e88 <__i2b+0x28>)
 8009e76:	f7fe fbef 	bl	8008658 <__assert_func>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	6144      	str	r4, [r0, #20]
 8009e7e:	6103      	str	r3, [r0, #16]
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	bf00      	nop
 8009e84:	0800b682 	.word	0x0800b682
 8009e88:	0800b6f3 	.word	0x0800b6f3

08009e8c <__multiply>:
 8009e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e90:	4617      	mov	r7, r2
 8009e92:	690a      	ldr	r2, [r1, #16]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	4689      	mov	r9, r1
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	bfa2      	ittt	ge
 8009e9c:	463b      	movge	r3, r7
 8009e9e:	460f      	movge	r7, r1
 8009ea0:	4699      	movge	r9, r3
 8009ea2:	693d      	ldr	r5, [r7, #16]
 8009ea4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	eb05 060a 	add.w	r6, r5, sl
 8009eb0:	42b3      	cmp	r3, r6
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	bfb8      	it	lt
 8009eb6:	3101      	addlt	r1, #1
 8009eb8:	f7ff fe94 	bl	8009be4 <_Balloc>
 8009ebc:	b930      	cbnz	r0, 8009ecc <__multiply+0x40>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009ec4:	4b40      	ldr	r3, [pc, #256]	@ (8009fc8 <__multiply+0x13c>)
 8009ec6:	4841      	ldr	r0, [pc, #260]	@ (8009fcc <__multiply+0x140>)
 8009ec8:	f7fe fbc6 	bl	8008658 <__assert_func>
 8009ecc:	f100 0414 	add.w	r4, r0, #20
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009ed8:	4573      	cmp	r3, lr
 8009eda:	d320      	bcc.n	8009f1e <__multiply+0x92>
 8009edc:	f107 0814 	add.w	r8, r7, #20
 8009ee0:	f109 0114 	add.w	r1, r9, #20
 8009ee4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009ee8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009eec:	9302      	str	r3, [sp, #8]
 8009eee:	1beb      	subs	r3, r5, r7
 8009ef0:	3b15      	subs	r3, #21
 8009ef2:	f023 0303 	bic.w	r3, r3, #3
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	3715      	adds	r7, #21
 8009efa:	42bd      	cmp	r5, r7
 8009efc:	bf38      	it	cc
 8009efe:	2304      	movcc	r3, #4
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	9b02      	ldr	r3, [sp, #8]
 8009f04:	9103      	str	r1, [sp, #12]
 8009f06:	428b      	cmp	r3, r1
 8009f08:	d80c      	bhi.n	8009f24 <__multiply+0x98>
 8009f0a:	2e00      	cmp	r6, #0
 8009f0c:	dd03      	ble.n	8009f16 <__multiply+0x8a>
 8009f0e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d055      	beq.n	8009fc2 <__multiply+0x136>
 8009f16:	6106      	str	r6, [r0, #16]
 8009f18:	b005      	add	sp, #20
 8009f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1e:	f843 2b04 	str.w	r2, [r3], #4
 8009f22:	e7d9      	b.n	8009ed8 <__multiply+0x4c>
 8009f24:	f8b1 a000 	ldrh.w	sl, [r1]
 8009f28:	f1ba 0f00 	cmp.w	sl, #0
 8009f2c:	d01f      	beq.n	8009f6e <__multiply+0xe2>
 8009f2e:	46c4      	mov	ip, r8
 8009f30:	46a1      	mov	r9, r4
 8009f32:	2700      	movs	r7, #0
 8009f34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f38:	f8d9 3000 	ldr.w	r3, [r9]
 8009f3c:	fa1f fb82 	uxth.w	fp, r2
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	fb0a 330b 	mla	r3, sl, fp, r3
 8009f46:	443b      	add	r3, r7
 8009f48:	f8d9 7000 	ldr.w	r7, [r9]
 8009f4c:	0c12      	lsrs	r2, r2, #16
 8009f4e:	0c3f      	lsrs	r7, r7, #16
 8009f50:	fb0a 7202 	mla	r2, sl, r2, r7
 8009f54:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f5e:	4565      	cmp	r5, ip
 8009f60:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009f64:	f849 3b04 	str.w	r3, [r9], #4
 8009f68:	d8e4      	bhi.n	8009f34 <__multiply+0xa8>
 8009f6a:	9b01      	ldr	r3, [sp, #4]
 8009f6c:	50e7      	str	r7, [r4, r3]
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	3104      	adds	r1, #4
 8009f72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009f76:	f1b9 0f00 	cmp.w	r9, #0
 8009f7a:	d020      	beq.n	8009fbe <__multiply+0x132>
 8009f7c:	4647      	mov	r7, r8
 8009f7e:	46a4      	mov	ip, r4
 8009f80:	f04f 0a00 	mov.w	sl, #0
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	f8b7 b000 	ldrh.w	fp, [r7]
 8009f8a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	fb09 220b 	mla	r2, r9, fp, r2
 8009f94:	4452      	add	r2, sl
 8009f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f9a:	f84c 3b04 	str.w	r3, [ip], #4
 8009f9e:	f857 3b04 	ldr.w	r3, [r7], #4
 8009fa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fa6:	f8bc 3000 	ldrh.w	r3, [ip]
 8009faa:	42bd      	cmp	r5, r7
 8009fac:	fb09 330a 	mla	r3, r9, sl, r3
 8009fb0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009fb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fb8:	d8e5      	bhi.n	8009f86 <__multiply+0xfa>
 8009fba:	9a01      	ldr	r2, [sp, #4]
 8009fbc:	50a3      	str	r3, [r4, r2]
 8009fbe:	3404      	adds	r4, #4
 8009fc0:	e79f      	b.n	8009f02 <__multiply+0x76>
 8009fc2:	3e01      	subs	r6, #1
 8009fc4:	e7a1      	b.n	8009f0a <__multiply+0x7e>
 8009fc6:	bf00      	nop
 8009fc8:	0800b682 	.word	0x0800b682
 8009fcc:	0800b6f3 	.word	0x0800b6f3

08009fd0 <__pow5mult>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	4615      	mov	r5, r2
 8009fd6:	f012 0203 	ands.w	r2, r2, #3
 8009fda:	4607      	mov	r7, r0
 8009fdc:	460e      	mov	r6, r1
 8009fde:	d007      	beq.n	8009ff0 <__pow5mult+0x20>
 8009fe0:	4c25      	ldr	r4, [pc, #148]	@ (800a078 <__pow5mult+0xa8>)
 8009fe2:	3a01      	subs	r2, #1
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fea:	f7ff fe5d 	bl	8009ca8 <__multadd>
 8009fee:	4606      	mov	r6, r0
 8009ff0:	10ad      	asrs	r5, r5, #2
 8009ff2:	d03d      	beq.n	800a070 <__pow5mult+0xa0>
 8009ff4:	69fc      	ldr	r4, [r7, #28]
 8009ff6:	b97c      	cbnz	r4, 800a018 <__pow5mult+0x48>
 8009ff8:	2010      	movs	r0, #16
 8009ffa:	f7ff fd2b 	bl	8009a54 <malloc>
 8009ffe:	4602      	mov	r2, r0
 800a000:	61f8      	str	r0, [r7, #28]
 800a002:	b928      	cbnz	r0, 800a010 <__pow5mult+0x40>
 800a004:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a008:	4b1c      	ldr	r3, [pc, #112]	@ (800a07c <__pow5mult+0xac>)
 800a00a:	481d      	ldr	r0, [pc, #116]	@ (800a080 <__pow5mult+0xb0>)
 800a00c:	f7fe fb24 	bl	8008658 <__assert_func>
 800a010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a014:	6004      	str	r4, [r0, #0]
 800a016:	60c4      	str	r4, [r0, #12]
 800a018:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a01c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a020:	b94c      	cbnz	r4, 800a036 <__pow5mult+0x66>
 800a022:	f240 2171 	movw	r1, #625	@ 0x271
 800a026:	4638      	mov	r0, r7
 800a028:	f7ff ff1a 	bl	8009e60 <__i2b>
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	f8c8 0008 	str.w	r0, [r8, #8]
 800a034:	6003      	str	r3, [r0, #0]
 800a036:	f04f 0900 	mov.w	r9, #0
 800a03a:	07eb      	lsls	r3, r5, #31
 800a03c:	d50a      	bpl.n	800a054 <__pow5mult+0x84>
 800a03e:	4631      	mov	r1, r6
 800a040:	4622      	mov	r2, r4
 800a042:	4638      	mov	r0, r7
 800a044:	f7ff ff22 	bl	8009e8c <__multiply>
 800a048:	4680      	mov	r8, r0
 800a04a:	4631      	mov	r1, r6
 800a04c:	4638      	mov	r0, r7
 800a04e:	f7ff fe09 	bl	8009c64 <_Bfree>
 800a052:	4646      	mov	r6, r8
 800a054:	106d      	asrs	r5, r5, #1
 800a056:	d00b      	beq.n	800a070 <__pow5mult+0xa0>
 800a058:	6820      	ldr	r0, [r4, #0]
 800a05a:	b938      	cbnz	r0, 800a06c <__pow5mult+0x9c>
 800a05c:	4622      	mov	r2, r4
 800a05e:	4621      	mov	r1, r4
 800a060:	4638      	mov	r0, r7
 800a062:	f7ff ff13 	bl	8009e8c <__multiply>
 800a066:	6020      	str	r0, [r4, #0]
 800a068:	f8c0 9000 	str.w	r9, [r0]
 800a06c:	4604      	mov	r4, r0
 800a06e:	e7e4      	b.n	800a03a <__pow5mult+0x6a>
 800a070:	4630      	mov	r0, r6
 800a072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a076:	bf00      	nop
 800a078:	0800b7b0 	.word	0x0800b7b0
 800a07c:	0800b4da 	.word	0x0800b4da
 800a080:	0800b6f3 	.word	0x0800b6f3

0800a084 <__lshift>:
 800a084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	460c      	mov	r4, r1
 800a08a:	4607      	mov	r7, r0
 800a08c:	4691      	mov	r9, r2
 800a08e:	6923      	ldr	r3, [r4, #16]
 800a090:	6849      	ldr	r1, [r1, #4]
 800a092:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a096:	68a3      	ldr	r3, [r4, #8]
 800a098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a09c:	f108 0601 	add.w	r6, r8, #1
 800a0a0:	42b3      	cmp	r3, r6
 800a0a2:	db0b      	blt.n	800a0bc <__lshift+0x38>
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	f7ff fd9d 	bl	8009be4 <_Balloc>
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	b948      	cbnz	r0, 800a0c2 <__lshift+0x3e>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a0b4:	4b27      	ldr	r3, [pc, #156]	@ (800a154 <__lshift+0xd0>)
 800a0b6:	4828      	ldr	r0, [pc, #160]	@ (800a158 <__lshift+0xd4>)
 800a0b8:	f7fe face 	bl	8008658 <__assert_func>
 800a0bc:	3101      	adds	r1, #1
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	e7ee      	b.n	800a0a0 <__lshift+0x1c>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f100 0114 	add.w	r1, r0, #20
 800a0c8:	f100 0210 	add.w	r2, r0, #16
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	4553      	cmp	r3, sl
 800a0d0:	db33      	blt.n	800a13a <__lshift+0xb6>
 800a0d2:	6920      	ldr	r0, [r4, #16]
 800a0d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0d8:	f104 0314 	add.w	r3, r4, #20
 800a0dc:	f019 091f 	ands.w	r9, r9, #31
 800a0e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0e8:	d02b      	beq.n	800a142 <__lshift+0xbe>
 800a0ea:	468a      	mov	sl, r1
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a0f2:	6818      	ldr	r0, [r3, #0]
 800a0f4:	fa00 f009 	lsl.w	r0, r0, r9
 800a0f8:	4310      	orrs	r0, r2
 800a0fa:	f84a 0b04 	str.w	r0, [sl], #4
 800a0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a102:	459c      	cmp	ip, r3
 800a104:	fa22 f20e 	lsr.w	r2, r2, lr
 800a108:	d8f3      	bhi.n	800a0f2 <__lshift+0x6e>
 800a10a:	ebac 0304 	sub.w	r3, ip, r4
 800a10e:	3b15      	subs	r3, #21
 800a110:	f023 0303 	bic.w	r3, r3, #3
 800a114:	3304      	adds	r3, #4
 800a116:	f104 0015 	add.w	r0, r4, #21
 800a11a:	4560      	cmp	r0, ip
 800a11c:	bf88      	it	hi
 800a11e:	2304      	movhi	r3, #4
 800a120:	50ca      	str	r2, [r1, r3]
 800a122:	b10a      	cbz	r2, 800a128 <__lshift+0xa4>
 800a124:	f108 0602 	add.w	r6, r8, #2
 800a128:	3e01      	subs	r6, #1
 800a12a:	4638      	mov	r0, r7
 800a12c:	4621      	mov	r1, r4
 800a12e:	612e      	str	r6, [r5, #16]
 800a130:	f7ff fd98 	bl	8009c64 <_Bfree>
 800a134:	4628      	mov	r0, r5
 800a136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a13a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a13e:	3301      	adds	r3, #1
 800a140:	e7c5      	b.n	800a0ce <__lshift+0x4a>
 800a142:	3904      	subs	r1, #4
 800a144:	f853 2b04 	ldr.w	r2, [r3], #4
 800a148:	459c      	cmp	ip, r3
 800a14a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a14e:	d8f9      	bhi.n	800a144 <__lshift+0xc0>
 800a150:	e7ea      	b.n	800a128 <__lshift+0xa4>
 800a152:	bf00      	nop
 800a154:	0800b682 	.word	0x0800b682
 800a158:	0800b6f3 	.word	0x0800b6f3

0800a15c <__mcmp>:
 800a15c:	4603      	mov	r3, r0
 800a15e:	690a      	ldr	r2, [r1, #16]
 800a160:	6900      	ldr	r0, [r0, #16]
 800a162:	b530      	push	{r4, r5, lr}
 800a164:	1a80      	subs	r0, r0, r2
 800a166:	d10e      	bne.n	800a186 <__mcmp+0x2a>
 800a168:	3314      	adds	r3, #20
 800a16a:	3114      	adds	r1, #20
 800a16c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a170:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a174:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a178:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a17c:	4295      	cmp	r5, r2
 800a17e:	d003      	beq.n	800a188 <__mcmp+0x2c>
 800a180:	d205      	bcs.n	800a18e <__mcmp+0x32>
 800a182:	f04f 30ff 	mov.w	r0, #4294967295
 800a186:	bd30      	pop	{r4, r5, pc}
 800a188:	42a3      	cmp	r3, r4
 800a18a:	d3f3      	bcc.n	800a174 <__mcmp+0x18>
 800a18c:	e7fb      	b.n	800a186 <__mcmp+0x2a>
 800a18e:	2001      	movs	r0, #1
 800a190:	e7f9      	b.n	800a186 <__mcmp+0x2a>
	...

0800a194 <__mdiff>:
 800a194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	4689      	mov	r9, r1
 800a19a:	4606      	mov	r6, r0
 800a19c:	4611      	mov	r1, r2
 800a19e:	4648      	mov	r0, r9
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	f7ff ffdb 	bl	800a15c <__mcmp>
 800a1a6:	1e05      	subs	r5, r0, #0
 800a1a8:	d112      	bne.n	800a1d0 <__mdiff+0x3c>
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff fd19 	bl	8009be4 <_Balloc>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	b928      	cbnz	r0, 800a1c2 <__mdiff+0x2e>
 800a1b6:	f240 2137 	movw	r1, #567	@ 0x237
 800a1ba:	4b3e      	ldr	r3, [pc, #248]	@ (800a2b4 <__mdiff+0x120>)
 800a1bc:	483e      	ldr	r0, [pc, #248]	@ (800a2b8 <__mdiff+0x124>)
 800a1be:	f7fe fa4b 	bl	8008658 <__assert_func>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	b003      	add	sp, #12
 800a1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d0:	bfbc      	itt	lt
 800a1d2:	464b      	movlt	r3, r9
 800a1d4:	46a1      	movlt	r9, r4
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a1dc:	bfba      	itte	lt
 800a1de:	461c      	movlt	r4, r3
 800a1e0:	2501      	movlt	r5, #1
 800a1e2:	2500      	movge	r5, #0
 800a1e4:	f7ff fcfe 	bl	8009be4 <_Balloc>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	b918      	cbnz	r0, 800a1f4 <__mdiff+0x60>
 800a1ec:	f240 2145 	movw	r1, #581	@ 0x245
 800a1f0:	4b30      	ldr	r3, [pc, #192]	@ (800a2b4 <__mdiff+0x120>)
 800a1f2:	e7e3      	b.n	800a1bc <__mdiff+0x28>
 800a1f4:	f100 0b14 	add.w	fp, r0, #20
 800a1f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a1fc:	f109 0310 	add.w	r3, r9, #16
 800a200:	60c5      	str	r5, [r0, #12]
 800a202:	f04f 0c00 	mov.w	ip, #0
 800a206:	f109 0514 	add.w	r5, r9, #20
 800a20a:	46d9      	mov	r9, fp
 800a20c:	6926      	ldr	r6, [r4, #16]
 800a20e:	f104 0e14 	add.w	lr, r4, #20
 800a212:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a216:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	9b01      	ldr	r3, [sp, #4]
 800a21e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a222:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a226:	b281      	uxth	r1, r0
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	fa1f f38a 	uxth.w	r3, sl
 800a22e:	1a5b      	subs	r3, r3, r1
 800a230:	0c00      	lsrs	r0, r0, #16
 800a232:	4463      	add	r3, ip
 800a234:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a238:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a242:	4576      	cmp	r6, lr
 800a244:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a248:	f849 3b04 	str.w	r3, [r9], #4
 800a24c:	d8e6      	bhi.n	800a21c <__mdiff+0x88>
 800a24e:	1b33      	subs	r3, r6, r4
 800a250:	3b15      	subs	r3, #21
 800a252:	f023 0303 	bic.w	r3, r3, #3
 800a256:	3415      	adds	r4, #21
 800a258:	3304      	adds	r3, #4
 800a25a:	42a6      	cmp	r6, r4
 800a25c:	bf38      	it	cc
 800a25e:	2304      	movcc	r3, #4
 800a260:	441d      	add	r5, r3
 800a262:	445b      	add	r3, fp
 800a264:	461e      	mov	r6, r3
 800a266:	462c      	mov	r4, r5
 800a268:	4544      	cmp	r4, r8
 800a26a:	d30e      	bcc.n	800a28a <__mdiff+0xf6>
 800a26c:	f108 0103 	add.w	r1, r8, #3
 800a270:	1b49      	subs	r1, r1, r5
 800a272:	f021 0103 	bic.w	r1, r1, #3
 800a276:	3d03      	subs	r5, #3
 800a278:	45a8      	cmp	r8, r5
 800a27a:	bf38      	it	cc
 800a27c:	2100      	movcc	r1, #0
 800a27e:	440b      	add	r3, r1
 800a280:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a284:	b199      	cbz	r1, 800a2ae <__mdiff+0x11a>
 800a286:	6117      	str	r7, [r2, #16]
 800a288:	e79e      	b.n	800a1c8 <__mdiff+0x34>
 800a28a:	46e6      	mov	lr, ip
 800a28c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a290:	fa1f fc81 	uxth.w	ip, r1
 800a294:	44f4      	add	ip, lr
 800a296:	0c08      	lsrs	r0, r1, #16
 800a298:	4471      	add	r1, lr
 800a29a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a29e:	b289      	uxth	r1, r1
 800a2a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a2a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a2a8:	f846 1b04 	str.w	r1, [r6], #4
 800a2ac:	e7dc      	b.n	800a268 <__mdiff+0xd4>
 800a2ae:	3f01      	subs	r7, #1
 800a2b0:	e7e6      	b.n	800a280 <__mdiff+0xec>
 800a2b2:	bf00      	nop
 800a2b4:	0800b682 	.word	0x0800b682
 800a2b8:	0800b6f3 	.word	0x0800b6f3

0800a2bc <__ulp>:
 800a2bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a2f8 <__ulp+0x3c>)
 800a2be:	400b      	ands	r3, r1
 800a2c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dc08      	bgt.n	800a2da <__ulp+0x1e>
 800a2c8:	425b      	negs	r3, r3
 800a2ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a2ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a2d2:	da04      	bge.n	800a2de <__ulp+0x22>
 800a2d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a2d8:	4113      	asrs	r3, r2
 800a2da:	2200      	movs	r2, #0
 800a2dc:	e008      	b.n	800a2f0 <__ulp+0x34>
 800a2de:	f1a2 0314 	sub.w	r3, r2, #20
 800a2e2:	2b1e      	cmp	r3, #30
 800a2e4:	bfd6      	itet	le
 800a2e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a2ea:	2201      	movgt	r2, #1
 800a2ec:	40da      	lsrle	r2, r3
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	4610      	mov	r0, r2
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	7ff00000 	.word	0x7ff00000

0800a2fc <__b2d>:
 800a2fc:	6902      	ldr	r2, [r0, #16]
 800a2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a300:	f100 0614 	add.w	r6, r0, #20
 800a304:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a308:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a30c:	4f1e      	ldr	r7, [pc, #120]	@ (800a388 <__b2d+0x8c>)
 800a30e:	4620      	mov	r0, r4
 800a310:	f7ff fd5a 	bl	8009dc8 <__hi0bits>
 800a314:	4603      	mov	r3, r0
 800a316:	f1c0 0020 	rsb	r0, r0, #32
 800a31a:	2b0a      	cmp	r3, #10
 800a31c:	f1a2 0504 	sub.w	r5, r2, #4
 800a320:	6008      	str	r0, [r1, #0]
 800a322:	dc12      	bgt.n	800a34a <__b2d+0x4e>
 800a324:	42ae      	cmp	r6, r5
 800a326:	bf2c      	ite	cs
 800a328:	2200      	movcs	r2, #0
 800a32a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a32e:	f1c3 0c0b 	rsb	ip, r3, #11
 800a332:	3315      	adds	r3, #21
 800a334:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a338:	fa04 f303 	lsl.w	r3, r4, r3
 800a33c:	fa22 f20c 	lsr.w	r2, r2, ip
 800a340:	ea4e 0107 	orr.w	r1, lr, r7
 800a344:	431a      	orrs	r2, r3
 800a346:	4610      	mov	r0, r2
 800a348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a34a:	42ae      	cmp	r6, r5
 800a34c:	bf36      	itet	cc
 800a34e:	f1a2 0508 	subcc.w	r5, r2, #8
 800a352:	2200      	movcs	r2, #0
 800a354:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a358:	3b0b      	subs	r3, #11
 800a35a:	d012      	beq.n	800a382 <__b2d+0x86>
 800a35c:	f1c3 0720 	rsb	r7, r3, #32
 800a360:	fa22 f107 	lsr.w	r1, r2, r7
 800a364:	409c      	lsls	r4, r3
 800a366:	430c      	orrs	r4, r1
 800a368:	42b5      	cmp	r5, r6
 800a36a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a36e:	bf94      	ite	ls
 800a370:	2400      	movls	r4, #0
 800a372:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a376:	409a      	lsls	r2, r3
 800a378:	40fc      	lsrs	r4, r7
 800a37a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a37e:	4322      	orrs	r2, r4
 800a380:	e7e1      	b.n	800a346 <__b2d+0x4a>
 800a382:	ea44 0107 	orr.w	r1, r4, r7
 800a386:	e7de      	b.n	800a346 <__b2d+0x4a>
 800a388:	3ff00000 	.word	0x3ff00000

0800a38c <__d2b>:
 800a38c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a390:	2101      	movs	r1, #1
 800a392:	4690      	mov	r8, r2
 800a394:	4699      	mov	r9, r3
 800a396:	9e08      	ldr	r6, [sp, #32]
 800a398:	f7ff fc24 	bl	8009be4 <_Balloc>
 800a39c:	4604      	mov	r4, r0
 800a39e:	b930      	cbnz	r0, 800a3ae <__d2b+0x22>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	f240 310f 	movw	r1, #783	@ 0x30f
 800a3a6:	4b23      	ldr	r3, [pc, #140]	@ (800a434 <__d2b+0xa8>)
 800a3a8:	4823      	ldr	r0, [pc, #140]	@ (800a438 <__d2b+0xac>)
 800a3aa:	f7fe f955 	bl	8008658 <__assert_func>
 800a3ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a3b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3b6:	b10d      	cbz	r5, 800a3bc <__d2b+0x30>
 800a3b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	f1b8 0300 	subs.w	r3, r8, #0
 800a3c2:	d024      	beq.n	800a40e <__d2b+0x82>
 800a3c4:	4668      	mov	r0, sp
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	f7ff fd1d 	bl	8009e06 <__lo0bits>
 800a3cc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a3d0:	b1d8      	cbz	r0, 800a40a <__d2b+0x7e>
 800a3d2:	f1c0 0320 	rsb	r3, r0, #32
 800a3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	40c2      	lsrs	r2, r0
 800a3de:	6163      	str	r3, [r4, #20]
 800a3e0:	9201      	str	r2, [sp, #4]
 800a3e2:	9b01      	ldr	r3, [sp, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bf0c      	ite	eq
 800a3e8:	2201      	moveq	r2, #1
 800a3ea:	2202      	movne	r2, #2
 800a3ec:	61a3      	str	r3, [r4, #24]
 800a3ee:	6122      	str	r2, [r4, #16]
 800a3f0:	b1ad      	cbz	r5, 800a41e <__d2b+0x92>
 800a3f2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a3f6:	4405      	add	r5, r0
 800a3f8:	6035      	str	r5, [r6, #0]
 800a3fa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a400:	6018      	str	r0, [r3, #0]
 800a402:	4620      	mov	r0, r4
 800a404:	b002      	add	sp, #8
 800a406:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a40a:	6161      	str	r1, [r4, #20]
 800a40c:	e7e9      	b.n	800a3e2 <__d2b+0x56>
 800a40e:	a801      	add	r0, sp, #4
 800a410:	f7ff fcf9 	bl	8009e06 <__lo0bits>
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	6163      	str	r3, [r4, #20]
 800a41a:	3020      	adds	r0, #32
 800a41c:	e7e7      	b.n	800a3ee <__d2b+0x62>
 800a41e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a422:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a426:	6030      	str	r0, [r6, #0]
 800a428:	6918      	ldr	r0, [r3, #16]
 800a42a:	f7ff fccd 	bl	8009dc8 <__hi0bits>
 800a42e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a432:	e7e4      	b.n	800a3fe <__d2b+0x72>
 800a434:	0800b682 	.word	0x0800b682
 800a438:	0800b6f3 	.word	0x0800b6f3

0800a43c <__ratio>:
 800a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a440:	b085      	sub	sp, #20
 800a442:	e9cd 1000 	strd	r1, r0, [sp]
 800a446:	a902      	add	r1, sp, #8
 800a448:	f7ff ff58 	bl	800a2fc <__b2d>
 800a44c:	468b      	mov	fp, r1
 800a44e:	4606      	mov	r6, r0
 800a450:	460f      	mov	r7, r1
 800a452:	9800      	ldr	r0, [sp, #0]
 800a454:	a903      	add	r1, sp, #12
 800a456:	f7ff ff51 	bl	800a2fc <__b2d>
 800a45a:	460d      	mov	r5, r1
 800a45c:	9b01      	ldr	r3, [sp, #4]
 800a45e:	4689      	mov	r9, r1
 800a460:	6919      	ldr	r1, [r3, #16]
 800a462:	9b00      	ldr	r3, [sp, #0]
 800a464:	4604      	mov	r4, r0
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	4630      	mov	r0, r6
 800a46a:	1ac9      	subs	r1, r1, r3
 800a46c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a470:	1a9b      	subs	r3, r3, r2
 800a472:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a476:	2b00      	cmp	r3, #0
 800a478:	bfcd      	iteet	gt
 800a47a:	463a      	movgt	r2, r7
 800a47c:	462a      	movle	r2, r5
 800a47e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a482:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a486:	bfd8      	it	le
 800a488:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a48c:	464b      	mov	r3, r9
 800a48e:	4622      	mov	r2, r4
 800a490:	4659      	mov	r1, fp
 800a492:	f7f6 f94b 	bl	800072c <__aeabi_ddiv>
 800a496:	b005      	add	sp, #20
 800a498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a49c <__copybits>:
 800a49c:	3901      	subs	r1, #1
 800a49e:	b570      	push	{r4, r5, r6, lr}
 800a4a0:	1149      	asrs	r1, r1, #5
 800a4a2:	6914      	ldr	r4, [r2, #16]
 800a4a4:	3101      	adds	r1, #1
 800a4a6:	f102 0314 	add.w	r3, r2, #20
 800a4aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a4ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a4b2:	1f05      	subs	r5, r0, #4
 800a4b4:	42a3      	cmp	r3, r4
 800a4b6:	d30c      	bcc.n	800a4d2 <__copybits+0x36>
 800a4b8:	1aa3      	subs	r3, r4, r2
 800a4ba:	3b11      	subs	r3, #17
 800a4bc:	f023 0303 	bic.w	r3, r3, #3
 800a4c0:	3211      	adds	r2, #17
 800a4c2:	42a2      	cmp	r2, r4
 800a4c4:	bf88      	it	hi
 800a4c6:	2300      	movhi	r3, #0
 800a4c8:	4418      	add	r0, r3
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	4288      	cmp	r0, r1
 800a4ce:	d305      	bcc.n	800a4dc <__copybits+0x40>
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
 800a4d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a4d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a4da:	e7eb      	b.n	800a4b4 <__copybits+0x18>
 800a4dc:	f840 3b04 	str.w	r3, [r0], #4
 800a4e0:	e7f4      	b.n	800a4cc <__copybits+0x30>

0800a4e2 <__any_on>:
 800a4e2:	f100 0214 	add.w	r2, r0, #20
 800a4e6:	6900      	ldr	r0, [r0, #16]
 800a4e8:	114b      	asrs	r3, r1, #5
 800a4ea:	4298      	cmp	r0, r3
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	db11      	blt.n	800a514 <__any_on+0x32>
 800a4f0:	dd0a      	ble.n	800a508 <__any_on+0x26>
 800a4f2:	f011 011f 	ands.w	r1, r1, #31
 800a4f6:	d007      	beq.n	800a508 <__any_on+0x26>
 800a4f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4fc:	fa24 f001 	lsr.w	r0, r4, r1
 800a500:	fa00 f101 	lsl.w	r1, r0, r1
 800a504:	428c      	cmp	r4, r1
 800a506:	d10b      	bne.n	800a520 <__any_on+0x3e>
 800a508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d803      	bhi.n	800a518 <__any_on+0x36>
 800a510:	2000      	movs	r0, #0
 800a512:	bd10      	pop	{r4, pc}
 800a514:	4603      	mov	r3, r0
 800a516:	e7f7      	b.n	800a508 <__any_on+0x26>
 800a518:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a51c:	2900      	cmp	r1, #0
 800a51e:	d0f5      	beq.n	800a50c <__any_on+0x2a>
 800a520:	2001      	movs	r0, #1
 800a522:	e7f6      	b.n	800a512 <__any_on+0x30>

0800a524 <__ascii_wctomb>:
 800a524:	4603      	mov	r3, r0
 800a526:	4608      	mov	r0, r1
 800a528:	b141      	cbz	r1, 800a53c <__ascii_wctomb+0x18>
 800a52a:	2aff      	cmp	r2, #255	@ 0xff
 800a52c:	d904      	bls.n	800a538 <__ascii_wctomb+0x14>
 800a52e:	228a      	movs	r2, #138	@ 0x8a
 800a530:	f04f 30ff 	mov.w	r0, #4294967295
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	4770      	bx	lr
 800a538:	2001      	movs	r0, #1
 800a53a:	700a      	strb	r2, [r1, #0]
 800a53c:	4770      	bx	lr

0800a53e <__ssputs_r>:
 800a53e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a542:	461f      	mov	r7, r3
 800a544:	688e      	ldr	r6, [r1, #8]
 800a546:	4682      	mov	sl, r0
 800a548:	42be      	cmp	r6, r7
 800a54a:	460c      	mov	r4, r1
 800a54c:	4690      	mov	r8, r2
 800a54e:	680b      	ldr	r3, [r1, #0]
 800a550:	d82d      	bhi.n	800a5ae <__ssputs_r+0x70>
 800a552:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a556:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a55a:	d026      	beq.n	800a5aa <__ssputs_r+0x6c>
 800a55c:	6965      	ldr	r5, [r4, #20]
 800a55e:	6909      	ldr	r1, [r1, #16]
 800a560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a564:	eba3 0901 	sub.w	r9, r3, r1
 800a568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a56c:	1c7b      	adds	r3, r7, #1
 800a56e:	444b      	add	r3, r9
 800a570:	106d      	asrs	r5, r5, #1
 800a572:	429d      	cmp	r5, r3
 800a574:	bf38      	it	cc
 800a576:	461d      	movcc	r5, r3
 800a578:	0553      	lsls	r3, r2, #21
 800a57a:	d527      	bpl.n	800a5cc <__ssputs_r+0x8e>
 800a57c:	4629      	mov	r1, r5
 800a57e:	f7ff fa93 	bl	8009aa8 <_malloc_r>
 800a582:	4606      	mov	r6, r0
 800a584:	b360      	cbz	r0, 800a5e0 <__ssputs_r+0xa2>
 800a586:	464a      	mov	r2, r9
 800a588:	6921      	ldr	r1, [r4, #16]
 800a58a:	f7fe f850 	bl	800862e <memcpy>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	6126      	str	r6, [r4, #16]
 800a59c:	444e      	add	r6, r9
 800a59e:	6026      	str	r6, [r4, #0]
 800a5a0:	463e      	mov	r6, r7
 800a5a2:	6165      	str	r5, [r4, #20]
 800a5a4:	eba5 0509 	sub.w	r5, r5, r9
 800a5a8:	60a5      	str	r5, [r4, #8]
 800a5aa:	42be      	cmp	r6, r7
 800a5ac:	d900      	bls.n	800a5b0 <__ssputs_r+0x72>
 800a5ae:	463e      	mov	r6, r7
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	4641      	mov	r1, r8
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	f000 f9d3 	bl	800a960 <memmove>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	68a3      	ldr	r3, [r4, #8]
 800a5be:	1b9b      	subs	r3, r3, r6
 800a5c0:	60a3      	str	r3, [r4, #8]
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	4433      	add	r3, r6
 800a5c6:	6023      	str	r3, [r4, #0]
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	f000 fa0c 	bl	800a9ea <_realloc_r>
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d1e0      	bne.n	800a59a <__ssputs_r+0x5c>
 800a5d8:	4650      	mov	r0, sl
 800a5da:	6921      	ldr	r1, [r4, #16]
 800a5dc:	f7fe feb8 	bl	8009350 <_free_r>
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	f8ca 3000 	str.w	r3, [sl]
 800a5e6:	89a3      	ldrh	r3, [r4, #12]
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	e7e9      	b.n	800a5c8 <__ssputs_r+0x8a>

0800a5f4 <_svfiprintf_r>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	4698      	mov	r8, r3
 800a5fa:	898b      	ldrh	r3, [r1, #12]
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	061b      	lsls	r3, r3, #24
 800a600:	460d      	mov	r5, r1
 800a602:	4614      	mov	r4, r2
 800a604:	b09d      	sub	sp, #116	@ 0x74
 800a606:	d510      	bpl.n	800a62a <_svfiprintf_r+0x36>
 800a608:	690b      	ldr	r3, [r1, #16]
 800a60a:	b973      	cbnz	r3, 800a62a <_svfiprintf_r+0x36>
 800a60c:	2140      	movs	r1, #64	@ 0x40
 800a60e:	f7ff fa4b 	bl	8009aa8 <_malloc_r>
 800a612:	6028      	str	r0, [r5, #0]
 800a614:	6128      	str	r0, [r5, #16]
 800a616:	b930      	cbnz	r0, 800a626 <_svfiprintf_r+0x32>
 800a618:	230c      	movs	r3, #12
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295
 800a620:	b01d      	add	sp, #116	@ 0x74
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a626:	2340      	movs	r3, #64	@ 0x40
 800a628:	616b      	str	r3, [r5, #20]
 800a62a:	2300      	movs	r3, #0
 800a62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a62e:	2320      	movs	r3, #32
 800a630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a634:	2330      	movs	r3, #48	@ 0x30
 800a636:	f04f 0901 	mov.w	r9, #1
 800a63a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a63e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a7d8 <_svfiprintf_r+0x1e4>
 800a642:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a646:	4623      	mov	r3, r4
 800a648:	469a      	mov	sl, r3
 800a64a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64e:	b10a      	cbz	r2, 800a654 <_svfiprintf_r+0x60>
 800a650:	2a25      	cmp	r2, #37	@ 0x25
 800a652:	d1f9      	bne.n	800a648 <_svfiprintf_r+0x54>
 800a654:	ebba 0b04 	subs.w	fp, sl, r4
 800a658:	d00b      	beq.n	800a672 <_svfiprintf_r+0x7e>
 800a65a:	465b      	mov	r3, fp
 800a65c:	4622      	mov	r2, r4
 800a65e:	4629      	mov	r1, r5
 800a660:	4638      	mov	r0, r7
 800a662:	f7ff ff6c 	bl	800a53e <__ssputs_r>
 800a666:	3001      	adds	r0, #1
 800a668:	f000 80a7 	beq.w	800a7ba <_svfiprintf_r+0x1c6>
 800a66c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a66e:	445a      	add	r2, fp
 800a670:	9209      	str	r2, [sp, #36]	@ 0x24
 800a672:	f89a 3000 	ldrb.w	r3, [sl]
 800a676:	2b00      	cmp	r3, #0
 800a678:	f000 809f 	beq.w	800a7ba <_svfiprintf_r+0x1c6>
 800a67c:	2300      	movs	r3, #0
 800a67e:	f04f 32ff 	mov.w	r2, #4294967295
 800a682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a686:	f10a 0a01 	add.w	sl, sl, #1
 800a68a:	9304      	str	r3, [sp, #16]
 800a68c:	9307      	str	r3, [sp, #28]
 800a68e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a692:	931a      	str	r3, [sp, #104]	@ 0x68
 800a694:	4654      	mov	r4, sl
 800a696:	2205      	movs	r2, #5
 800a698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69c:	484e      	ldr	r0, [pc, #312]	@ (800a7d8 <_svfiprintf_r+0x1e4>)
 800a69e:	f7fd ffb8 	bl	8008612 <memchr>
 800a6a2:	9a04      	ldr	r2, [sp, #16]
 800a6a4:	b9d8      	cbnz	r0, 800a6de <_svfiprintf_r+0xea>
 800a6a6:	06d0      	lsls	r0, r2, #27
 800a6a8:	bf44      	itt	mi
 800a6aa:	2320      	movmi	r3, #32
 800a6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6b0:	0711      	lsls	r1, r2, #28
 800a6b2:	bf44      	itt	mi
 800a6b4:	232b      	movmi	r3, #43	@ 0x2b
 800a6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a6be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6c0:	d015      	beq.n	800a6ee <_svfiprintf_r+0xfa>
 800a6c2:	4654      	mov	r4, sl
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f04f 0c0a 	mov.w	ip, #10
 800a6ca:	9a07      	ldr	r2, [sp, #28]
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d2:	3b30      	subs	r3, #48	@ 0x30
 800a6d4:	2b09      	cmp	r3, #9
 800a6d6:	d94b      	bls.n	800a770 <_svfiprintf_r+0x17c>
 800a6d8:	b1b0      	cbz	r0, 800a708 <_svfiprintf_r+0x114>
 800a6da:	9207      	str	r2, [sp, #28]
 800a6dc:	e014      	b.n	800a708 <_svfiprintf_r+0x114>
 800a6de:	eba0 0308 	sub.w	r3, r0, r8
 800a6e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	46a2      	mov	sl, r4
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	e7d2      	b.n	800a694 <_svfiprintf_r+0xa0>
 800a6ee:	9b03      	ldr	r3, [sp, #12]
 800a6f0:	1d19      	adds	r1, r3, #4
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	9103      	str	r1, [sp, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bfbb      	ittet	lt
 800a6fa:	425b      	neglt	r3, r3
 800a6fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a700:	9307      	strge	r3, [sp, #28]
 800a702:	9307      	strlt	r3, [sp, #28]
 800a704:	bfb8      	it	lt
 800a706:	9204      	strlt	r2, [sp, #16]
 800a708:	7823      	ldrb	r3, [r4, #0]
 800a70a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a70c:	d10a      	bne.n	800a724 <_svfiprintf_r+0x130>
 800a70e:	7863      	ldrb	r3, [r4, #1]
 800a710:	2b2a      	cmp	r3, #42	@ 0x2a
 800a712:	d132      	bne.n	800a77a <_svfiprintf_r+0x186>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	3402      	adds	r4, #2
 800a718:	1d1a      	adds	r2, r3, #4
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	9203      	str	r2, [sp, #12]
 800a71e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a722:	9305      	str	r3, [sp, #20]
 800a724:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a7dc <_svfiprintf_r+0x1e8>
 800a728:	2203      	movs	r2, #3
 800a72a:	4650      	mov	r0, sl
 800a72c:	7821      	ldrb	r1, [r4, #0]
 800a72e:	f7fd ff70 	bl	8008612 <memchr>
 800a732:	b138      	cbz	r0, 800a744 <_svfiprintf_r+0x150>
 800a734:	2240      	movs	r2, #64	@ 0x40
 800a736:	9b04      	ldr	r3, [sp, #16]
 800a738:	eba0 000a 	sub.w	r0, r0, sl
 800a73c:	4082      	lsls	r2, r0
 800a73e:	4313      	orrs	r3, r2
 800a740:	3401      	adds	r4, #1
 800a742:	9304      	str	r3, [sp, #16]
 800a744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a748:	2206      	movs	r2, #6
 800a74a:	4825      	ldr	r0, [pc, #148]	@ (800a7e0 <_svfiprintf_r+0x1ec>)
 800a74c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a750:	f7fd ff5f 	bl	8008612 <memchr>
 800a754:	2800      	cmp	r0, #0
 800a756:	d036      	beq.n	800a7c6 <_svfiprintf_r+0x1d2>
 800a758:	4b22      	ldr	r3, [pc, #136]	@ (800a7e4 <_svfiprintf_r+0x1f0>)
 800a75a:	bb1b      	cbnz	r3, 800a7a4 <_svfiprintf_r+0x1b0>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	3307      	adds	r3, #7
 800a760:	f023 0307 	bic.w	r3, r3, #7
 800a764:	3308      	adds	r3, #8
 800a766:	9303      	str	r3, [sp, #12]
 800a768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a76a:	4433      	add	r3, r6
 800a76c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a76e:	e76a      	b.n	800a646 <_svfiprintf_r+0x52>
 800a770:	460c      	mov	r4, r1
 800a772:	2001      	movs	r0, #1
 800a774:	fb0c 3202 	mla	r2, ip, r2, r3
 800a778:	e7a8      	b.n	800a6cc <_svfiprintf_r+0xd8>
 800a77a:	2300      	movs	r3, #0
 800a77c:	f04f 0c0a 	mov.w	ip, #10
 800a780:	4619      	mov	r1, r3
 800a782:	3401      	adds	r4, #1
 800a784:	9305      	str	r3, [sp, #20]
 800a786:	4620      	mov	r0, r4
 800a788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78c:	3a30      	subs	r2, #48	@ 0x30
 800a78e:	2a09      	cmp	r2, #9
 800a790:	d903      	bls.n	800a79a <_svfiprintf_r+0x1a6>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0c6      	beq.n	800a724 <_svfiprintf_r+0x130>
 800a796:	9105      	str	r1, [sp, #20]
 800a798:	e7c4      	b.n	800a724 <_svfiprintf_r+0x130>
 800a79a:	4604      	mov	r4, r0
 800a79c:	2301      	movs	r3, #1
 800a79e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a2:	e7f0      	b.n	800a786 <_svfiprintf_r+0x192>
 800a7a4:	ab03      	add	r3, sp, #12
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	462a      	mov	r2, r5
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e8 <_svfiprintf_r+0x1f4>)
 800a7ae:	a904      	add	r1, sp, #16
 800a7b0:	f7fd f8f8 	bl	80079a4 <_printf_float>
 800a7b4:	1c42      	adds	r2, r0, #1
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	d1d6      	bne.n	800a768 <_svfiprintf_r+0x174>
 800a7ba:	89ab      	ldrh	r3, [r5, #12]
 800a7bc:	065b      	lsls	r3, r3, #25
 800a7be:	f53f af2d 	bmi.w	800a61c <_svfiprintf_r+0x28>
 800a7c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7c4:	e72c      	b.n	800a620 <_svfiprintf_r+0x2c>
 800a7c6:	ab03      	add	r3, sp, #12
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	462a      	mov	r2, r5
 800a7cc:	4638      	mov	r0, r7
 800a7ce:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <_svfiprintf_r+0x1f4>)
 800a7d0:	a904      	add	r1, sp, #16
 800a7d2:	f7fd fb85 	bl	8007ee0 <_printf_i>
 800a7d6:	e7ed      	b.n	800a7b4 <_svfiprintf_r+0x1c0>
 800a7d8:	0800b74c 	.word	0x0800b74c
 800a7dc:	0800b752 	.word	0x0800b752
 800a7e0:	0800b756 	.word	0x0800b756
 800a7e4:	080079a5 	.word	0x080079a5
 800a7e8:	0800a53f 	.word	0x0800a53f

0800a7ec <__sflush_r>:
 800a7ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	0716      	lsls	r6, r2, #28
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	d454      	bmi.n	800a8a4 <__sflush_r+0xb8>
 800a7fa:	684b      	ldr	r3, [r1, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	dc02      	bgt.n	800a806 <__sflush_r+0x1a>
 800a800:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a802:	2b00      	cmp	r3, #0
 800a804:	dd48      	ble.n	800a898 <__sflush_r+0xac>
 800a806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a808:	2e00      	cmp	r6, #0
 800a80a:	d045      	beq.n	800a898 <__sflush_r+0xac>
 800a80c:	2300      	movs	r3, #0
 800a80e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a812:	682f      	ldr	r7, [r5, #0]
 800a814:	6a21      	ldr	r1, [r4, #32]
 800a816:	602b      	str	r3, [r5, #0]
 800a818:	d030      	beq.n	800a87c <__sflush_r+0x90>
 800a81a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	0759      	lsls	r1, r3, #29
 800a820:	d505      	bpl.n	800a82e <__sflush_r+0x42>
 800a822:	6863      	ldr	r3, [r4, #4]
 800a824:	1ad2      	subs	r2, r2, r3
 800a826:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a828:	b10b      	cbz	r3, 800a82e <__sflush_r+0x42>
 800a82a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a82c:	1ad2      	subs	r2, r2, r3
 800a82e:	2300      	movs	r3, #0
 800a830:	4628      	mov	r0, r5
 800a832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a834:	6a21      	ldr	r1, [r4, #32]
 800a836:	47b0      	blx	r6
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	d106      	bne.n	800a84c <__sflush_r+0x60>
 800a83e:	6829      	ldr	r1, [r5, #0]
 800a840:	291d      	cmp	r1, #29
 800a842:	d82b      	bhi.n	800a89c <__sflush_r+0xb0>
 800a844:	4a28      	ldr	r2, [pc, #160]	@ (800a8e8 <__sflush_r+0xfc>)
 800a846:	40ca      	lsrs	r2, r1
 800a848:	07d6      	lsls	r6, r2, #31
 800a84a:	d527      	bpl.n	800a89c <__sflush_r+0xb0>
 800a84c:	2200      	movs	r2, #0
 800a84e:	6062      	str	r2, [r4, #4]
 800a850:	6922      	ldr	r2, [r4, #16]
 800a852:	04d9      	lsls	r1, r3, #19
 800a854:	6022      	str	r2, [r4, #0]
 800a856:	d504      	bpl.n	800a862 <__sflush_r+0x76>
 800a858:	1c42      	adds	r2, r0, #1
 800a85a:	d101      	bne.n	800a860 <__sflush_r+0x74>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b903      	cbnz	r3, 800a862 <__sflush_r+0x76>
 800a860:	6560      	str	r0, [r4, #84]	@ 0x54
 800a862:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a864:	602f      	str	r7, [r5, #0]
 800a866:	b1b9      	cbz	r1, 800a898 <__sflush_r+0xac>
 800a868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a86c:	4299      	cmp	r1, r3
 800a86e:	d002      	beq.n	800a876 <__sflush_r+0x8a>
 800a870:	4628      	mov	r0, r5
 800a872:	f7fe fd6d 	bl	8009350 <_free_r>
 800a876:	2300      	movs	r3, #0
 800a878:	6363      	str	r3, [r4, #52]	@ 0x34
 800a87a:	e00d      	b.n	800a898 <__sflush_r+0xac>
 800a87c:	2301      	movs	r3, #1
 800a87e:	4628      	mov	r0, r5
 800a880:	47b0      	blx	r6
 800a882:	4602      	mov	r2, r0
 800a884:	1c50      	adds	r0, r2, #1
 800a886:	d1c9      	bne.n	800a81c <__sflush_r+0x30>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d0c6      	beq.n	800a81c <__sflush_r+0x30>
 800a88e:	2b1d      	cmp	r3, #29
 800a890:	d001      	beq.n	800a896 <__sflush_r+0xaa>
 800a892:	2b16      	cmp	r3, #22
 800a894:	d11d      	bne.n	800a8d2 <__sflush_r+0xe6>
 800a896:	602f      	str	r7, [r5, #0]
 800a898:	2000      	movs	r0, #0
 800a89a:	e021      	b.n	800a8e0 <__sflush_r+0xf4>
 800a89c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8a0:	b21b      	sxth	r3, r3
 800a8a2:	e01a      	b.n	800a8da <__sflush_r+0xee>
 800a8a4:	690f      	ldr	r7, [r1, #16]
 800a8a6:	2f00      	cmp	r7, #0
 800a8a8:	d0f6      	beq.n	800a898 <__sflush_r+0xac>
 800a8aa:	0793      	lsls	r3, r2, #30
 800a8ac:	bf18      	it	ne
 800a8ae:	2300      	movne	r3, #0
 800a8b0:	680e      	ldr	r6, [r1, #0]
 800a8b2:	bf08      	it	eq
 800a8b4:	694b      	ldreq	r3, [r1, #20]
 800a8b6:	1bf6      	subs	r6, r6, r7
 800a8b8:	600f      	str	r7, [r1, #0]
 800a8ba:	608b      	str	r3, [r1, #8]
 800a8bc:	2e00      	cmp	r6, #0
 800a8be:	ddeb      	ble.n	800a898 <__sflush_r+0xac>
 800a8c0:	4633      	mov	r3, r6
 800a8c2:	463a      	mov	r2, r7
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	6a21      	ldr	r1, [r4, #32]
 800a8c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a8cc:	47e0      	blx	ip
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	dc07      	bgt.n	800a8e2 <__sflush_r+0xf6>
 800a8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8da:	f04f 30ff 	mov.w	r0, #4294967295
 800a8de:	81a3      	strh	r3, [r4, #12]
 800a8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8e2:	4407      	add	r7, r0
 800a8e4:	1a36      	subs	r6, r6, r0
 800a8e6:	e7e9      	b.n	800a8bc <__sflush_r+0xd0>
 800a8e8:	20400001 	.word	0x20400001

0800a8ec <_fflush_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	690b      	ldr	r3, [r1, #16]
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	b913      	cbnz	r3, 800a8fc <_fflush_r+0x10>
 800a8f6:	2500      	movs	r5, #0
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	b118      	cbz	r0, 800a906 <_fflush_r+0x1a>
 800a8fe:	6a03      	ldr	r3, [r0, #32]
 800a900:	b90b      	cbnz	r3, 800a906 <_fflush_r+0x1a>
 800a902:	f7fd fc97 	bl	8008234 <__sinit>
 800a906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0f3      	beq.n	800a8f6 <_fflush_r+0xa>
 800a90e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a910:	07d0      	lsls	r0, r2, #31
 800a912:	d404      	bmi.n	800a91e <_fflush_r+0x32>
 800a914:	0599      	lsls	r1, r3, #22
 800a916:	d402      	bmi.n	800a91e <_fflush_r+0x32>
 800a918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a91a:	f7fd fe70 	bl	80085fe <__retarget_lock_acquire_recursive>
 800a91e:	4628      	mov	r0, r5
 800a920:	4621      	mov	r1, r4
 800a922:	f7ff ff63 	bl	800a7ec <__sflush_r>
 800a926:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a928:	4605      	mov	r5, r0
 800a92a:	07da      	lsls	r2, r3, #31
 800a92c:	d4e4      	bmi.n	800a8f8 <_fflush_r+0xc>
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	059b      	lsls	r3, r3, #22
 800a932:	d4e1      	bmi.n	800a8f8 <_fflush_r+0xc>
 800a934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a936:	f7fd fe63 	bl	8008600 <__retarget_lock_release_recursive>
 800a93a:	e7dd      	b.n	800a8f8 <_fflush_r+0xc>

0800a93c <fiprintf>:
 800a93c:	b40e      	push	{r1, r2, r3}
 800a93e:	b503      	push	{r0, r1, lr}
 800a940:	4601      	mov	r1, r0
 800a942:	ab03      	add	r3, sp, #12
 800a944:	4805      	ldr	r0, [pc, #20]	@ (800a95c <fiprintf+0x20>)
 800a946:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94a:	6800      	ldr	r0, [r0, #0]
 800a94c:	9301      	str	r3, [sp, #4]
 800a94e:	f000 f8a1 	bl	800aa94 <_vfiprintf_r>
 800a952:	b002      	add	sp, #8
 800a954:	f85d eb04 	ldr.w	lr, [sp], #4
 800a958:	b003      	add	sp, #12
 800a95a:	4770      	bx	lr
 800a95c:	200001a4 	.word	0x200001a4

0800a960 <memmove>:
 800a960:	4288      	cmp	r0, r1
 800a962:	b510      	push	{r4, lr}
 800a964:	eb01 0402 	add.w	r4, r1, r2
 800a968:	d902      	bls.n	800a970 <memmove+0x10>
 800a96a:	4284      	cmp	r4, r0
 800a96c:	4623      	mov	r3, r4
 800a96e:	d807      	bhi.n	800a980 <memmove+0x20>
 800a970:	1e43      	subs	r3, r0, #1
 800a972:	42a1      	cmp	r1, r4
 800a974:	d008      	beq.n	800a988 <memmove+0x28>
 800a976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a97e:	e7f8      	b.n	800a972 <memmove+0x12>
 800a980:	4601      	mov	r1, r0
 800a982:	4402      	add	r2, r0
 800a984:	428a      	cmp	r2, r1
 800a986:	d100      	bne.n	800a98a <memmove+0x2a>
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a992:	e7f7      	b.n	800a984 <memmove+0x24>

0800a994 <_sbrk_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	2300      	movs	r3, #0
 800a998:	4d05      	ldr	r5, [pc, #20]	@ (800a9b0 <_sbrk_r+0x1c>)
 800a99a:	4604      	mov	r4, r0
 800a99c:	4608      	mov	r0, r1
 800a99e:	602b      	str	r3, [r5, #0]
 800a9a0:	f7f7 ff8e 	bl	80028c0 <_sbrk>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d102      	bne.n	800a9ae <_sbrk_r+0x1a>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	b103      	cbz	r3, 800a9ae <_sbrk_r+0x1a>
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	20000964 	.word	0x20000964

0800a9b4 <abort>:
 800a9b4:	2006      	movs	r0, #6
 800a9b6:	b508      	push	{r3, lr}
 800a9b8:	f000 fa40 	bl	800ae3c <raise>
 800a9bc:	2001      	movs	r0, #1
 800a9be:	f7f7 ff0a 	bl	80027d6 <_exit>

0800a9c2 <_calloc_r>:
 800a9c2:	b570      	push	{r4, r5, r6, lr}
 800a9c4:	fba1 5402 	umull	r5, r4, r1, r2
 800a9c8:	b934      	cbnz	r4, 800a9d8 <_calloc_r+0x16>
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7ff f86c 	bl	8009aa8 <_malloc_r>
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	b928      	cbnz	r0, 800a9e0 <_calloc_r+0x1e>
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	220c      	movs	r2, #12
 800a9da:	2600      	movs	r6, #0
 800a9dc:	6002      	str	r2, [r0, #0]
 800a9de:	e7f9      	b.n	800a9d4 <_calloc_r+0x12>
 800a9e0:	462a      	mov	r2, r5
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	f7fd fcf7 	bl	80083d6 <memset>
 800a9e8:	e7f4      	b.n	800a9d4 <_calloc_r+0x12>

0800a9ea <_realloc_r>:
 800a9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	4614      	mov	r4, r2
 800a9f2:	460d      	mov	r5, r1
 800a9f4:	b921      	cbnz	r1, 800aa00 <_realloc_r+0x16>
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fc:	f7ff b854 	b.w	8009aa8 <_malloc_r>
 800aa00:	b92a      	cbnz	r2, 800aa0e <_realloc_r+0x24>
 800aa02:	f7fe fca5 	bl	8009350 <_free_r>
 800aa06:	4625      	mov	r5, r4
 800aa08:	4628      	mov	r0, r5
 800aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0e:	f000 fa31 	bl	800ae74 <_malloc_usable_size_r>
 800aa12:	4284      	cmp	r4, r0
 800aa14:	4606      	mov	r6, r0
 800aa16:	d802      	bhi.n	800aa1e <_realloc_r+0x34>
 800aa18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa1c:	d8f4      	bhi.n	800aa08 <_realloc_r+0x1e>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7ff f841 	bl	8009aa8 <_malloc_r>
 800aa26:	4680      	mov	r8, r0
 800aa28:	b908      	cbnz	r0, 800aa2e <_realloc_r+0x44>
 800aa2a:	4645      	mov	r5, r8
 800aa2c:	e7ec      	b.n	800aa08 <_realloc_r+0x1e>
 800aa2e:	42b4      	cmp	r4, r6
 800aa30:	4622      	mov	r2, r4
 800aa32:	4629      	mov	r1, r5
 800aa34:	bf28      	it	cs
 800aa36:	4632      	movcs	r2, r6
 800aa38:	f7fd fdf9 	bl	800862e <memcpy>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f7fe fc86 	bl	8009350 <_free_r>
 800aa44:	e7f1      	b.n	800aa2a <_realloc_r+0x40>

0800aa46 <__sfputc_r>:
 800aa46:	6893      	ldr	r3, [r2, #8]
 800aa48:	b410      	push	{r4}
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	6093      	str	r3, [r2, #8]
 800aa50:	da07      	bge.n	800aa62 <__sfputc_r+0x1c>
 800aa52:	6994      	ldr	r4, [r2, #24]
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	db01      	blt.n	800aa5c <__sfputc_r+0x16>
 800aa58:	290a      	cmp	r1, #10
 800aa5a:	d102      	bne.n	800aa62 <__sfputc_r+0x1c>
 800aa5c:	bc10      	pop	{r4}
 800aa5e:	f000 b931 	b.w	800acc4 <__swbuf_r>
 800aa62:	6813      	ldr	r3, [r2, #0]
 800aa64:	1c58      	adds	r0, r3, #1
 800aa66:	6010      	str	r0, [r2, #0]
 800aa68:	7019      	strb	r1, [r3, #0]
 800aa6a:	4608      	mov	r0, r1
 800aa6c:	bc10      	pop	{r4}
 800aa6e:	4770      	bx	lr

0800aa70 <__sfputs_r>:
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	4606      	mov	r6, r0
 800aa74:	460f      	mov	r7, r1
 800aa76:	4614      	mov	r4, r2
 800aa78:	18d5      	adds	r5, r2, r3
 800aa7a:	42ac      	cmp	r4, r5
 800aa7c:	d101      	bne.n	800aa82 <__sfputs_r+0x12>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e007      	b.n	800aa92 <__sfputs_r+0x22>
 800aa82:	463a      	mov	r2, r7
 800aa84:	4630      	mov	r0, r6
 800aa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8a:	f7ff ffdc 	bl	800aa46 <__sfputc_r>
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	d1f3      	bne.n	800aa7a <__sfputs_r+0xa>
 800aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa94 <_vfiprintf_r>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	460d      	mov	r5, r1
 800aa9a:	4614      	mov	r4, r2
 800aa9c:	4698      	mov	r8, r3
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	b09d      	sub	sp, #116	@ 0x74
 800aaa2:	b118      	cbz	r0, 800aaac <_vfiprintf_r+0x18>
 800aaa4:	6a03      	ldr	r3, [r0, #32]
 800aaa6:	b90b      	cbnz	r3, 800aaac <_vfiprintf_r+0x18>
 800aaa8:	f7fd fbc4 	bl	8008234 <__sinit>
 800aaac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaae:	07d9      	lsls	r1, r3, #31
 800aab0:	d405      	bmi.n	800aabe <_vfiprintf_r+0x2a>
 800aab2:	89ab      	ldrh	r3, [r5, #12]
 800aab4:	059a      	lsls	r2, r3, #22
 800aab6:	d402      	bmi.n	800aabe <_vfiprintf_r+0x2a>
 800aab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaba:	f7fd fda0 	bl	80085fe <__retarget_lock_acquire_recursive>
 800aabe:	89ab      	ldrh	r3, [r5, #12]
 800aac0:	071b      	lsls	r3, r3, #28
 800aac2:	d501      	bpl.n	800aac8 <_vfiprintf_r+0x34>
 800aac4:	692b      	ldr	r3, [r5, #16]
 800aac6:	b99b      	cbnz	r3, 800aaf0 <_vfiprintf_r+0x5c>
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f000 f938 	bl	800ad40 <__swsetup_r>
 800aad0:	b170      	cbz	r0, 800aaf0 <_vfiprintf_r+0x5c>
 800aad2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aad4:	07dc      	lsls	r4, r3, #31
 800aad6:	d504      	bpl.n	800aae2 <_vfiprintf_r+0x4e>
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	b01d      	add	sp, #116	@ 0x74
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	89ab      	ldrh	r3, [r5, #12]
 800aae4:	0598      	lsls	r0, r3, #22
 800aae6:	d4f7      	bmi.n	800aad8 <_vfiprintf_r+0x44>
 800aae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaea:	f7fd fd89 	bl	8008600 <__retarget_lock_release_recursive>
 800aaee:	e7f3      	b.n	800aad8 <_vfiprintf_r+0x44>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf4:	2320      	movs	r3, #32
 800aaf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aafa:	2330      	movs	r3, #48	@ 0x30
 800aafc:	f04f 0901 	mov.w	r9, #1
 800ab00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800acb0 <_vfiprintf_r+0x21c>
 800ab08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab0c:	4623      	mov	r3, r4
 800ab0e:	469a      	mov	sl, r3
 800ab10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab14:	b10a      	cbz	r2, 800ab1a <_vfiprintf_r+0x86>
 800ab16:	2a25      	cmp	r2, #37	@ 0x25
 800ab18:	d1f9      	bne.n	800ab0e <_vfiprintf_r+0x7a>
 800ab1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab1e:	d00b      	beq.n	800ab38 <_vfiprintf_r+0xa4>
 800ab20:	465b      	mov	r3, fp
 800ab22:	4622      	mov	r2, r4
 800ab24:	4629      	mov	r1, r5
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7ff ffa2 	bl	800aa70 <__sfputs_r>
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	f000 80a7 	beq.w	800ac80 <_vfiprintf_r+0x1ec>
 800ab32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab34:	445a      	add	r2, fp
 800ab36:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab38:	f89a 3000 	ldrb.w	r3, [sl]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 809f 	beq.w	800ac80 <_vfiprintf_r+0x1ec>
 800ab42:	2300      	movs	r3, #0
 800ab44:	f04f 32ff 	mov.w	r2, #4294967295
 800ab48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab4c:	f10a 0a01 	add.w	sl, sl, #1
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	9307      	str	r3, [sp, #28]
 800ab54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab58:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab5a:	4654      	mov	r4, sl
 800ab5c:	2205      	movs	r2, #5
 800ab5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab62:	4853      	ldr	r0, [pc, #332]	@ (800acb0 <_vfiprintf_r+0x21c>)
 800ab64:	f7fd fd55 	bl	8008612 <memchr>
 800ab68:	9a04      	ldr	r2, [sp, #16]
 800ab6a:	b9d8      	cbnz	r0, 800aba4 <_vfiprintf_r+0x110>
 800ab6c:	06d1      	lsls	r1, r2, #27
 800ab6e:	bf44      	itt	mi
 800ab70:	2320      	movmi	r3, #32
 800ab72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab76:	0713      	lsls	r3, r2, #28
 800ab78:	bf44      	itt	mi
 800ab7a:	232b      	movmi	r3, #43	@ 0x2b
 800ab7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab80:	f89a 3000 	ldrb.w	r3, [sl]
 800ab84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab86:	d015      	beq.n	800abb4 <_vfiprintf_r+0x120>
 800ab88:	4654      	mov	r4, sl
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f04f 0c0a 	mov.w	ip, #10
 800ab90:	9a07      	ldr	r2, [sp, #28]
 800ab92:	4621      	mov	r1, r4
 800ab94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab98:	3b30      	subs	r3, #48	@ 0x30
 800ab9a:	2b09      	cmp	r3, #9
 800ab9c:	d94b      	bls.n	800ac36 <_vfiprintf_r+0x1a2>
 800ab9e:	b1b0      	cbz	r0, 800abce <_vfiprintf_r+0x13a>
 800aba0:	9207      	str	r2, [sp, #28]
 800aba2:	e014      	b.n	800abce <_vfiprintf_r+0x13a>
 800aba4:	eba0 0308 	sub.w	r3, r0, r8
 800aba8:	fa09 f303 	lsl.w	r3, r9, r3
 800abac:	4313      	orrs	r3, r2
 800abae:	46a2      	mov	sl, r4
 800abb0:	9304      	str	r3, [sp, #16]
 800abb2:	e7d2      	b.n	800ab5a <_vfiprintf_r+0xc6>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	1d19      	adds	r1, r3, #4
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	9103      	str	r1, [sp, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bfbb      	ittet	lt
 800abc0:	425b      	neglt	r3, r3
 800abc2:	f042 0202 	orrlt.w	r2, r2, #2
 800abc6:	9307      	strge	r3, [sp, #28]
 800abc8:	9307      	strlt	r3, [sp, #28]
 800abca:	bfb8      	it	lt
 800abcc:	9204      	strlt	r2, [sp, #16]
 800abce:	7823      	ldrb	r3, [r4, #0]
 800abd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800abd2:	d10a      	bne.n	800abea <_vfiprintf_r+0x156>
 800abd4:	7863      	ldrb	r3, [r4, #1]
 800abd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abd8:	d132      	bne.n	800ac40 <_vfiprintf_r+0x1ac>
 800abda:	9b03      	ldr	r3, [sp, #12]
 800abdc:	3402      	adds	r4, #2
 800abde:	1d1a      	adds	r2, r3, #4
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	9203      	str	r2, [sp, #12]
 800abe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abe8:	9305      	str	r3, [sp, #20]
 800abea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800acb4 <_vfiprintf_r+0x220>
 800abee:	2203      	movs	r2, #3
 800abf0:	4650      	mov	r0, sl
 800abf2:	7821      	ldrb	r1, [r4, #0]
 800abf4:	f7fd fd0d 	bl	8008612 <memchr>
 800abf8:	b138      	cbz	r0, 800ac0a <_vfiprintf_r+0x176>
 800abfa:	2240      	movs	r2, #64	@ 0x40
 800abfc:	9b04      	ldr	r3, [sp, #16]
 800abfe:	eba0 000a 	sub.w	r0, r0, sl
 800ac02:	4082      	lsls	r2, r0
 800ac04:	4313      	orrs	r3, r2
 800ac06:	3401      	adds	r4, #1
 800ac08:	9304      	str	r3, [sp, #16]
 800ac0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac0e:	2206      	movs	r2, #6
 800ac10:	4829      	ldr	r0, [pc, #164]	@ (800acb8 <_vfiprintf_r+0x224>)
 800ac12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac16:	f7fd fcfc 	bl	8008612 <memchr>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d03f      	beq.n	800ac9e <_vfiprintf_r+0x20a>
 800ac1e:	4b27      	ldr	r3, [pc, #156]	@ (800acbc <_vfiprintf_r+0x228>)
 800ac20:	bb1b      	cbnz	r3, 800ac6a <_vfiprintf_r+0x1d6>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	3307      	adds	r3, #7
 800ac26:	f023 0307 	bic.w	r3, r3, #7
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	9303      	str	r3, [sp, #12]
 800ac2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac30:	443b      	add	r3, r7
 800ac32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac34:	e76a      	b.n	800ab0c <_vfiprintf_r+0x78>
 800ac36:	460c      	mov	r4, r1
 800ac38:	2001      	movs	r0, #1
 800ac3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac3e:	e7a8      	b.n	800ab92 <_vfiprintf_r+0xfe>
 800ac40:	2300      	movs	r3, #0
 800ac42:	f04f 0c0a 	mov.w	ip, #10
 800ac46:	4619      	mov	r1, r3
 800ac48:	3401      	adds	r4, #1
 800ac4a:	9305      	str	r3, [sp, #20]
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac52:	3a30      	subs	r2, #48	@ 0x30
 800ac54:	2a09      	cmp	r2, #9
 800ac56:	d903      	bls.n	800ac60 <_vfiprintf_r+0x1cc>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0c6      	beq.n	800abea <_vfiprintf_r+0x156>
 800ac5c:	9105      	str	r1, [sp, #20]
 800ac5e:	e7c4      	b.n	800abea <_vfiprintf_r+0x156>
 800ac60:	4604      	mov	r4, r0
 800ac62:	2301      	movs	r3, #1
 800ac64:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac68:	e7f0      	b.n	800ac4c <_vfiprintf_r+0x1b8>
 800ac6a:	ab03      	add	r3, sp, #12
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	462a      	mov	r2, r5
 800ac70:	4630      	mov	r0, r6
 800ac72:	4b13      	ldr	r3, [pc, #76]	@ (800acc0 <_vfiprintf_r+0x22c>)
 800ac74:	a904      	add	r1, sp, #16
 800ac76:	f7fc fe95 	bl	80079a4 <_printf_float>
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	1c78      	adds	r0, r7, #1
 800ac7e:	d1d6      	bne.n	800ac2e <_vfiprintf_r+0x19a>
 800ac80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac82:	07d9      	lsls	r1, r3, #31
 800ac84:	d405      	bmi.n	800ac92 <_vfiprintf_r+0x1fe>
 800ac86:	89ab      	ldrh	r3, [r5, #12]
 800ac88:	059a      	lsls	r2, r3, #22
 800ac8a:	d402      	bmi.n	800ac92 <_vfiprintf_r+0x1fe>
 800ac8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac8e:	f7fd fcb7 	bl	8008600 <__retarget_lock_release_recursive>
 800ac92:	89ab      	ldrh	r3, [r5, #12]
 800ac94:	065b      	lsls	r3, r3, #25
 800ac96:	f53f af1f 	bmi.w	800aad8 <_vfiprintf_r+0x44>
 800ac9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac9c:	e71e      	b.n	800aadc <_vfiprintf_r+0x48>
 800ac9e:	ab03      	add	r3, sp, #12
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	462a      	mov	r2, r5
 800aca4:	4630      	mov	r0, r6
 800aca6:	4b06      	ldr	r3, [pc, #24]	@ (800acc0 <_vfiprintf_r+0x22c>)
 800aca8:	a904      	add	r1, sp, #16
 800acaa:	f7fd f919 	bl	8007ee0 <_printf_i>
 800acae:	e7e4      	b.n	800ac7a <_vfiprintf_r+0x1e6>
 800acb0:	0800b74c 	.word	0x0800b74c
 800acb4:	0800b752 	.word	0x0800b752
 800acb8:	0800b756 	.word	0x0800b756
 800acbc:	080079a5 	.word	0x080079a5
 800acc0:	0800aa71 	.word	0x0800aa71

0800acc4 <__swbuf_r>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	460e      	mov	r6, r1
 800acc8:	4614      	mov	r4, r2
 800acca:	4605      	mov	r5, r0
 800accc:	b118      	cbz	r0, 800acd6 <__swbuf_r+0x12>
 800acce:	6a03      	ldr	r3, [r0, #32]
 800acd0:	b90b      	cbnz	r3, 800acd6 <__swbuf_r+0x12>
 800acd2:	f7fd faaf 	bl	8008234 <__sinit>
 800acd6:	69a3      	ldr	r3, [r4, #24]
 800acd8:	60a3      	str	r3, [r4, #8]
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	071a      	lsls	r2, r3, #28
 800acde:	d501      	bpl.n	800ace4 <__swbuf_r+0x20>
 800ace0:	6923      	ldr	r3, [r4, #16]
 800ace2:	b943      	cbnz	r3, 800acf6 <__swbuf_r+0x32>
 800ace4:	4621      	mov	r1, r4
 800ace6:	4628      	mov	r0, r5
 800ace8:	f000 f82a 	bl	800ad40 <__swsetup_r>
 800acec:	b118      	cbz	r0, 800acf6 <__swbuf_r+0x32>
 800acee:	f04f 37ff 	mov.w	r7, #4294967295
 800acf2:	4638      	mov	r0, r7
 800acf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf6:	6823      	ldr	r3, [r4, #0]
 800acf8:	6922      	ldr	r2, [r4, #16]
 800acfa:	b2f6      	uxtb	r6, r6
 800acfc:	1a98      	subs	r0, r3, r2
 800acfe:	6963      	ldr	r3, [r4, #20]
 800ad00:	4637      	mov	r7, r6
 800ad02:	4283      	cmp	r3, r0
 800ad04:	dc05      	bgt.n	800ad12 <__swbuf_r+0x4e>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f7ff fdef 	bl	800a8ec <_fflush_r>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d1ed      	bne.n	800acee <__swbuf_r+0x2a>
 800ad12:	68a3      	ldr	r3, [r4, #8]
 800ad14:	3b01      	subs	r3, #1
 800ad16:	60a3      	str	r3, [r4, #8]
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	1c5a      	adds	r2, r3, #1
 800ad1c:	6022      	str	r2, [r4, #0]
 800ad1e:	701e      	strb	r6, [r3, #0]
 800ad20:	6962      	ldr	r2, [r4, #20]
 800ad22:	1c43      	adds	r3, r0, #1
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d004      	beq.n	800ad32 <__swbuf_r+0x6e>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	07db      	lsls	r3, r3, #31
 800ad2c:	d5e1      	bpl.n	800acf2 <__swbuf_r+0x2e>
 800ad2e:	2e0a      	cmp	r6, #10
 800ad30:	d1df      	bne.n	800acf2 <__swbuf_r+0x2e>
 800ad32:	4621      	mov	r1, r4
 800ad34:	4628      	mov	r0, r5
 800ad36:	f7ff fdd9 	bl	800a8ec <_fflush_r>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d0d9      	beq.n	800acf2 <__swbuf_r+0x2e>
 800ad3e:	e7d6      	b.n	800acee <__swbuf_r+0x2a>

0800ad40 <__swsetup_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4b29      	ldr	r3, [pc, #164]	@ (800ade8 <__swsetup_r+0xa8>)
 800ad44:	4605      	mov	r5, r0
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	460c      	mov	r4, r1
 800ad4a:	b118      	cbz	r0, 800ad54 <__swsetup_r+0x14>
 800ad4c:	6a03      	ldr	r3, [r0, #32]
 800ad4e:	b90b      	cbnz	r3, 800ad54 <__swsetup_r+0x14>
 800ad50:	f7fd fa70 	bl	8008234 <__sinit>
 800ad54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad58:	0719      	lsls	r1, r3, #28
 800ad5a:	d422      	bmi.n	800ada2 <__swsetup_r+0x62>
 800ad5c:	06da      	lsls	r2, r3, #27
 800ad5e:	d407      	bmi.n	800ad70 <__swsetup_r+0x30>
 800ad60:	2209      	movs	r2, #9
 800ad62:	602a      	str	r2, [r5, #0]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	e033      	b.n	800add8 <__swsetup_r+0x98>
 800ad70:	0758      	lsls	r0, r3, #29
 800ad72:	d512      	bpl.n	800ad9a <__swsetup_r+0x5a>
 800ad74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad76:	b141      	cbz	r1, 800ad8a <__swsetup_r+0x4a>
 800ad78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad7c:	4299      	cmp	r1, r3
 800ad7e:	d002      	beq.n	800ad86 <__swsetup_r+0x46>
 800ad80:	4628      	mov	r0, r5
 800ad82:	f7fe fae5 	bl	8009350 <_free_r>
 800ad86:	2300      	movs	r3, #0
 800ad88:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad90:	81a3      	strh	r3, [r4, #12]
 800ad92:	2300      	movs	r3, #0
 800ad94:	6063      	str	r3, [r4, #4]
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	f043 0308 	orr.w	r3, r3, #8
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	b94b      	cbnz	r3, 800adba <__swsetup_r+0x7a>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800adac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adb0:	d003      	beq.n	800adba <__swsetup_r+0x7a>
 800adb2:	4621      	mov	r1, r4
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 f88a 	bl	800aece <__smakebuf_r>
 800adba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adbe:	f013 0201 	ands.w	r2, r3, #1
 800adc2:	d00a      	beq.n	800adda <__swsetup_r+0x9a>
 800adc4:	2200      	movs	r2, #0
 800adc6:	60a2      	str	r2, [r4, #8]
 800adc8:	6962      	ldr	r2, [r4, #20]
 800adca:	4252      	negs	r2, r2
 800adcc:	61a2      	str	r2, [r4, #24]
 800adce:	6922      	ldr	r2, [r4, #16]
 800add0:	b942      	cbnz	r2, 800ade4 <__swsetup_r+0xa4>
 800add2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800add6:	d1c5      	bne.n	800ad64 <__swsetup_r+0x24>
 800add8:	bd38      	pop	{r3, r4, r5, pc}
 800adda:	0799      	lsls	r1, r3, #30
 800addc:	bf58      	it	pl
 800adde:	6962      	ldrpl	r2, [r4, #20]
 800ade0:	60a2      	str	r2, [r4, #8]
 800ade2:	e7f4      	b.n	800adce <__swsetup_r+0x8e>
 800ade4:	2000      	movs	r0, #0
 800ade6:	e7f7      	b.n	800add8 <__swsetup_r+0x98>
 800ade8:	200001a4 	.word	0x200001a4

0800adec <_raise_r>:
 800adec:	291f      	cmp	r1, #31
 800adee:	b538      	push	{r3, r4, r5, lr}
 800adf0:	4605      	mov	r5, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	d904      	bls.n	800ae00 <_raise_r+0x14>
 800adf6:	2316      	movs	r3, #22
 800adf8:	6003      	str	r3, [r0, #0]
 800adfa:	f04f 30ff 	mov.w	r0, #4294967295
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae02:	b112      	cbz	r2, 800ae0a <_raise_r+0x1e>
 800ae04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae08:	b94b      	cbnz	r3, 800ae1e <_raise_r+0x32>
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f000 f830 	bl	800ae70 <_getpid_r>
 800ae10:	4622      	mov	r2, r4
 800ae12:	4601      	mov	r1, r0
 800ae14:	4628      	mov	r0, r5
 800ae16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae1a:	f000 b817 	b.w	800ae4c <_kill_r>
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d00a      	beq.n	800ae38 <_raise_r+0x4c>
 800ae22:	1c59      	adds	r1, r3, #1
 800ae24:	d103      	bne.n	800ae2e <_raise_r+0x42>
 800ae26:	2316      	movs	r3, #22
 800ae28:	6003      	str	r3, [r0, #0]
 800ae2a:	2001      	movs	r0, #1
 800ae2c:	e7e7      	b.n	800adfe <_raise_r+0x12>
 800ae2e:	2100      	movs	r1, #0
 800ae30:	4620      	mov	r0, r4
 800ae32:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae36:	4798      	blx	r3
 800ae38:	2000      	movs	r0, #0
 800ae3a:	e7e0      	b.n	800adfe <_raise_r+0x12>

0800ae3c <raise>:
 800ae3c:	4b02      	ldr	r3, [pc, #8]	@ (800ae48 <raise+0xc>)
 800ae3e:	4601      	mov	r1, r0
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	f7ff bfd3 	b.w	800adec <_raise_r>
 800ae46:	bf00      	nop
 800ae48:	200001a4 	.word	0x200001a4

0800ae4c <_kill_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	2300      	movs	r3, #0
 800ae50:	4d06      	ldr	r5, [pc, #24]	@ (800ae6c <_kill_r+0x20>)
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	4611      	mov	r1, r2
 800ae58:	602b      	str	r3, [r5, #0]
 800ae5a:	f7f7 fcac 	bl	80027b6 <_kill>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d102      	bne.n	800ae68 <_kill_r+0x1c>
 800ae62:	682b      	ldr	r3, [r5, #0]
 800ae64:	b103      	cbz	r3, 800ae68 <_kill_r+0x1c>
 800ae66:	6023      	str	r3, [r4, #0]
 800ae68:	bd38      	pop	{r3, r4, r5, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20000964 	.word	0x20000964

0800ae70 <_getpid_r>:
 800ae70:	f7f7 bc9a 	b.w	80027a8 <_getpid>

0800ae74 <_malloc_usable_size_r>:
 800ae74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae78:	1f18      	subs	r0, r3, #4
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	bfbc      	itt	lt
 800ae7e:	580b      	ldrlt	r3, [r1, r0]
 800ae80:	18c0      	addlt	r0, r0, r3
 800ae82:	4770      	bx	lr

0800ae84 <__swhatbuf_r>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	460c      	mov	r4, r1
 800ae88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8c:	4615      	mov	r5, r2
 800ae8e:	2900      	cmp	r1, #0
 800ae90:	461e      	mov	r6, r3
 800ae92:	b096      	sub	sp, #88	@ 0x58
 800ae94:	da0c      	bge.n	800aeb0 <__swhatbuf_r+0x2c>
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	2100      	movs	r1, #0
 800ae9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae9e:	bf14      	ite	ne
 800aea0:	2340      	movne	r3, #64	@ 0x40
 800aea2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aea6:	2000      	movs	r0, #0
 800aea8:	6031      	str	r1, [r6, #0]
 800aeaa:	602b      	str	r3, [r5, #0]
 800aeac:	b016      	add	sp, #88	@ 0x58
 800aeae:	bd70      	pop	{r4, r5, r6, pc}
 800aeb0:	466a      	mov	r2, sp
 800aeb2:	f000 f849 	bl	800af48 <_fstat_r>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	dbed      	blt.n	800ae96 <__swhatbuf_r+0x12>
 800aeba:	9901      	ldr	r1, [sp, #4]
 800aebc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aec0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aec4:	4259      	negs	r1, r3
 800aec6:	4159      	adcs	r1, r3
 800aec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aecc:	e7eb      	b.n	800aea6 <__swhatbuf_r+0x22>

0800aece <__smakebuf_r>:
 800aece:	898b      	ldrh	r3, [r1, #12]
 800aed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aed2:	079d      	lsls	r5, r3, #30
 800aed4:	4606      	mov	r6, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	d507      	bpl.n	800aeea <__smakebuf_r+0x1c>
 800aeda:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	6123      	str	r3, [r4, #16]
 800aee2:	2301      	movs	r3, #1
 800aee4:	6163      	str	r3, [r4, #20]
 800aee6:	b003      	add	sp, #12
 800aee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeea:	466a      	mov	r2, sp
 800aeec:	ab01      	add	r3, sp, #4
 800aeee:	f7ff ffc9 	bl	800ae84 <__swhatbuf_r>
 800aef2:	9f00      	ldr	r7, [sp, #0]
 800aef4:	4605      	mov	r5, r0
 800aef6:	4639      	mov	r1, r7
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7fe fdd5 	bl	8009aa8 <_malloc_r>
 800aefe:	b948      	cbnz	r0, 800af14 <__smakebuf_r+0x46>
 800af00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af04:	059a      	lsls	r2, r3, #22
 800af06:	d4ee      	bmi.n	800aee6 <__smakebuf_r+0x18>
 800af08:	f023 0303 	bic.w	r3, r3, #3
 800af0c:	f043 0302 	orr.w	r3, r3, #2
 800af10:	81a3      	strh	r3, [r4, #12]
 800af12:	e7e2      	b.n	800aeda <__smakebuf_r+0xc>
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af1e:	81a3      	strh	r3, [r4, #12]
 800af20:	9b01      	ldr	r3, [sp, #4]
 800af22:	6020      	str	r0, [r4, #0]
 800af24:	b15b      	cbz	r3, 800af3e <__smakebuf_r+0x70>
 800af26:	4630      	mov	r0, r6
 800af28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af2c:	f000 f81e 	bl	800af6c <_isatty_r>
 800af30:	b128      	cbz	r0, 800af3e <__smakebuf_r+0x70>
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f023 0303 	bic.w	r3, r3, #3
 800af38:	f043 0301 	orr.w	r3, r3, #1
 800af3c:	81a3      	strh	r3, [r4, #12]
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	431d      	orrs	r5, r3
 800af42:	81a5      	strh	r5, [r4, #12]
 800af44:	e7cf      	b.n	800aee6 <__smakebuf_r+0x18>
	...

0800af48 <_fstat_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	2300      	movs	r3, #0
 800af4c:	4d06      	ldr	r5, [pc, #24]	@ (800af68 <_fstat_r+0x20>)
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	4611      	mov	r1, r2
 800af54:	602b      	str	r3, [r5, #0]
 800af56:	f7f7 fc8d 	bl	8002874 <_fstat>
 800af5a:	1c43      	adds	r3, r0, #1
 800af5c:	d102      	bne.n	800af64 <_fstat_r+0x1c>
 800af5e:	682b      	ldr	r3, [r5, #0]
 800af60:	b103      	cbz	r3, 800af64 <_fstat_r+0x1c>
 800af62:	6023      	str	r3, [r4, #0]
 800af64:	bd38      	pop	{r3, r4, r5, pc}
 800af66:	bf00      	nop
 800af68:	20000964 	.word	0x20000964

0800af6c <_isatty_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	2300      	movs	r3, #0
 800af70:	4d05      	ldr	r5, [pc, #20]	@ (800af88 <_isatty_r+0x1c>)
 800af72:	4604      	mov	r4, r0
 800af74:	4608      	mov	r0, r1
 800af76:	602b      	str	r3, [r5, #0]
 800af78:	f7f7 fc8b 	bl	8002892 <_isatty>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d102      	bne.n	800af86 <_isatty_r+0x1a>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	b103      	cbz	r3, 800af86 <_isatty_r+0x1a>
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	20000964 	.word	0x20000964

0800af8c <fmod>:
 800af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af90:	4680      	mov	r8, r0
 800af92:	4689      	mov	r9, r1
 800af94:	4616      	mov	r6, r2
 800af96:	461f      	mov	r7, r3
 800af98:	f000 f820 	bl	800afdc <__ieee754_fmod>
 800af9c:	4632      	mov	r2, r6
 800af9e:	4604      	mov	r4, r0
 800afa0:	460d      	mov	r5, r1
 800afa2:	463b      	mov	r3, r7
 800afa4:	4640      	mov	r0, r8
 800afa6:	4649      	mov	r1, r9
 800afa8:	f7f5 fd30 	bl	8000a0c <__aeabi_dcmpun>
 800afac:	b990      	cbnz	r0, 800afd4 <fmod+0x48>
 800afae:	2200      	movs	r2, #0
 800afb0:	2300      	movs	r3, #0
 800afb2:	4630      	mov	r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	f7f5 fcf7 	bl	80009a8 <__aeabi_dcmpeq>
 800afba:	b158      	cbz	r0, 800afd4 <fmod+0x48>
 800afbc:	f7fd faf4 	bl	80085a8 <__errno>
 800afc0:	2321      	movs	r3, #33	@ 0x21
 800afc2:	2200      	movs	r2, #0
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	2300      	movs	r3, #0
 800afc8:	4610      	mov	r0, r2
 800afca:	4619      	mov	r1, r3
 800afcc:	f7f5 fbae 	bl	800072c <__aeabi_ddiv>
 800afd0:	4604      	mov	r4, r0
 800afd2:	460d      	mov	r5, r1
 800afd4:	4620      	mov	r0, r4
 800afd6:	4629      	mov	r1, r5
 800afd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800afdc <__ieee754_fmod>:
 800afdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe0:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 800afe4:	ea52 0408 	orrs.w	r4, r2, r8
 800afe8:	461e      	mov	r6, r3
 800afea:	4696      	mov	lr, r2
 800afec:	4694      	mov	ip, r2
 800afee:	d00c      	beq.n	800b00a <__ieee754_fmod+0x2e>
 800aff0:	4d75      	ldr	r5, [pc, #468]	@ (800b1c8 <__ieee754_fmod+0x1ec>)
 800aff2:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 800aff6:	45a9      	cmp	r9, r5
 800aff8:	460c      	mov	r4, r1
 800affa:	d806      	bhi.n	800b00a <__ieee754_fmod+0x2e>
 800affc:	4255      	negs	r5, r2
 800affe:	4f73      	ldr	r7, [pc, #460]	@ (800b1cc <__ieee754_fmod+0x1f0>)
 800b000:	4315      	orrs	r5, r2
 800b002:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 800b006:	42bd      	cmp	r5, r7
 800b008:	d907      	bls.n	800b01a <__ieee754_fmod+0x3e>
 800b00a:	f7f5 fa65 	bl	80004d8 <__aeabi_dmul>
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	f7f5 fb8b 	bl	800072c <__aeabi_ddiv>
 800b016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b01a:	45c1      	cmp	r9, r8
 800b01c:	4682      	mov	sl, r0
 800b01e:	4607      	mov	r7, r0
 800b020:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800b024:	dc09      	bgt.n	800b03a <__ieee754_fmod+0x5e>
 800b026:	dbf6      	blt.n	800b016 <__ieee754_fmod+0x3a>
 800b028:	4282      	cmp	r2, r0
 800b02a:	d8f4      	bhi.n	800b016 <__ieee754_fmod+0x3a>
 800b02c:	d105      	bne.n	800b03a <__ieee754_fmod+0x5e>
 800b02e:	4b68      	ldr	r3, [pc, #416]	@ (800b1d0 <__ieee754_fmod+0x1f4>)
 800b030:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800b034:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b038:	e7ed      	b.n	800b016 <__ieee754_fmod+0x3a>
 800b03a:	4964      	ldr	r1, [pc, #400]	@ (800b1cc <__ieee754_fmod+0x1f0>)
 800b03c:	420c      	tst	r4, r1
 800b03e:	d148      	bne.n	800b0d2 <__ieee754_fmod+0xf6>
 800b040:	f1b9 0f00 	cmp.w	r9, #0
 800b044:	d13d      	bne.n	800b0c2 <__ieee754_fmod+0xe6>
 800b046:	4653      	mov	r3, sl
 800b048:	4a62      	ldr	r2, [pc, #392]	@ (800b1d4 <__ieee754_fmod+0x1f8>)
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	dc36      	bgt.n	800b0bc <__ieee754_fmod+0xe0>
 800b04e:	420e      	tst	r6, r1
 800b050:	d14f      	bne.n	800b0f2 <__ieee754_fmod+0x116>
 800b052:	f1b8 0f00 	cmp.w	r8, #0
 800b056:	d144      	bne.n	800b0e2 <__ieee754_fmod+0x106>
 800b058:	4671      	mov	r1, lr
 800b05a:	4b5e      	ldr	r3, [pc, #376]	@ (800b1d4 <__ieee754_fmod+0x1f8>)
 800b05c:	2900      	cmp	r1, #0
 800b05e:	dc3d      	bgt.n	800b0dc <__ieee754_fmod+0x100>
 800b060:	485d      	ldr	r0, [pc, #372]	@ (800b1d8 <__ieee754_fmod+0x1fc>)
 800b062:	4282      	cmp	r2, r0
 800b064:	db4a      	blt.n	800b0fc <__ieee754_fmod+0x120>
 800b066:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800b06a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800b06e:	485a      	ldr	r0, [pc, #360]	@ (800b1d8 <__ieee754_fmod+0x1fc>)
 800b070:	4283      	cmp	r3, r0
 800b072:	db57      	blt.n	800b124 <__ieee754_fmod+0x148>
 800b074:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b078:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800b07c:	1ad0      	subs	r0, r2, r3
 800b07e:	1b8a      	subs	r2, r1, r6
 800b080:	eba7 040c 	sub.w	r4, r7, ip
 800b084:	2800      	cmp	r0, #0
 800b086:	d162      	bne.n	800b14e <__ieee754_fmod+0x172>
 800b088:	4567      	cmp	r7, ip
 800b08a:	bf38      	it	cc
 800b08c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800b090:	2a00      	cmp	r2, #0
 800b092:	bfbc      	itt	lt
 800b094:	463c      	movlt	r4, r7
 800b096:	460a      	movlt	r2, r1
 800b098:	ea52 0104 	orrs.w	r1, r2, r4
 800b09c:	d0c7      	beq.n	800b02e <__ieee754_fmod+0x52>
 800b09e:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800b0a2:	db69      	blt.n	800b178 <__ieee754_fmod+0x19c>
 800b0a4:	494c      	ldr	r1, [pc, #304]	@ (800b1d8 <__ieee754_fmod+0x1fc>)
 800b0a6:	428b      	cmp	r3, r1
 800b0a8:	db6c      	blt.n	800b184 <__ieee754_fmod+0x1a8>
 800b0aa:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800b0ae:	432a      	orrs	r2, r5
 800b0b0:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800b0ba:	e7ac      	b.n	800b016 <__ieee754_fmod+0x3a>
 800b0bc:	3a01      	subs	r2, #1
 800b0be:	005b      	lsls	r3, r3, #1
 800b0c0:	e7c3      	b.n	800b04a <__ieee754_fmod+0x6e>
 800b0c2:	4a45      	ldr	r2, [pc, #276]	@ (800b1d8 <__ieee754_fmod+0x1fc>)
 800b0c4:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	ddc0      	ble.n	800b04e <__ieee754_fmod+0x72>
 800b0cc:	3a01      	subs	r2, #1
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	e7fa      	b.n	800b0c8 <__ieee754_fmod+0xec>
 800b0d2:	ea4f 5229 	mov.w	r2, r9, asr #20
 800b0d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b0da:	e7b8      	b.n	800b04e <__ieee754_fmod+0x72>
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	0049      	lsls	r1, r1, #1
 800b0e0:	e7bc      	b.n	800b05c <__ieee754_fmod+0x80>
 800b0e2:	4b3d      	ldr	r3, [pc, #244]	@ (800b1d8 <__ieee754_fmod+0x1fc>)
 800b0e4:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800b0e8:	2900      	cmp	r1, #0
 800b0ea:	ddb9      	ble.n	800b060 <__ieee754_fmod+0x84>
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	0049      	lsls	r1, r1, #1
 800b0f0:	e7fa      	b.n	800b0e8 <__ieee754_fmod+0x10c>
 800b0f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b0f6:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b0fa:	e7b1      	b.n	800b060 <__ieee754_fmod+0x84>
 800b0fc:	1a80      	subs	r0, r0, r2
 800b0fe:	281f      	cmp	r0, #31
 800b100:	dc0a      	bgt.n	800b118 <__ieee754_fmod+0x13c>
 800b102:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800b106:	fa09 f900 	lsl.w	r9, r9, r0
 800b10a:	fa2a f101 	lsr.w	r1, sl, r1
 800b10e:	ea41 0109 	orr.w	r1, r1, r9
 800b112:	fa0a f700 	lsl.w	r7, sl, r0
 800b116:	e7aa      	b.n	800b06e <__ieee754_fmod+0x92>
 800b118:	4930      	ldr	r1, [pc, #192]	@ (800b1dc <__ieee754_fmod+0x200>)
 800b11a:	2700      	movs	r7, #0
 800b11c:	1a89      	subs	r1, r1, r2
 800b11e:	fa0a f101 	lsl.w	r1, sl, r1
 800b122:	e7a4      	b.n	800b06e <__ieee754_fmod+0x92>
 800b124:	1ac0      	subs	r0, r0, r3
 800b126:	281f      	cmp	r0, #31
 800b128:	dc0a      	bgt.n	800b140 <__ieee754_fmod+0x164>
 800b12a:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800b12e:	fa08 f800 	lsl.w	r8, r8, r0
 800b132:	fa2e f606 	lsr.w	r6, lr, r6
 800b136:	ea46 0608 	orr.w	r6, r6, r8
 800b13a:	fa0e fc00 	lsl.w	ip, lr, r0
 800b13e:	e79d      	b.n	800b07c <__ieee754_fmod+0xa0>
 800b140:	4e26      	ldr	r6, [pc, #152]	@ (800b1dc <__ieee754_fmod+0x200>)
 800b142:	f04f 0c00 	mov.w	ip, #0
 800b146:	1af6      	subs	r6, r6, r3
 800b148:	fa0e f606 	lsl.w	r6, lr, r6
 800b14c:	e796      	b.n	800b07c <__ieee754_fmod+0xa0>
 800b14e:	4567      	cmp	r7, ip
 800b150:	bf38      	it	cc
 800b152:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800b156:	2a00      	cmp	r2, #0
 800b158:	da05      	bge.n	800b166 <__ieee754_fmod+0x18a>
 800b15a:	0ffa      	lsrs	r2, r7, #31
 800b15c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b160:	007f      	lsls	r7, r7, #1
 800b162:	3801      	subs	r0, #1
 800b164:	e78b      	b.n	800b07e <__ieee754_fmod+0xa2>
 800b166:	ea52 0104 	orrs.w	r1, r2, r4
 800b16a:	f43f af60 	beq.w	800b02e <__ieee754_fmod+0x52>
 800b16e:	0fe1      	lsrs	r1, r4, #31
 800b170:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800b174:	0067      	lsls	r7, r4, #1
 800b176:	e7f4      	b.n	800b162 <__ieee754_fmod+0x186>
 800b178:	0fe1      	lsrs	r1, r4, #31
 800b17a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b17e:	0064      	lsls	r4, r4, #1
 800b180:	3b01      	subs	r3, #1
 800b182:	e78c      	b.n	800b09e <__ieee754_fmod+0xc2>
 800b184:	1ac9      	subs	r1, r1, r3
 800b186:	2914      	cmp	r1, #20
 800b188:	dc0a      	bgt.n	800b1a0 <__ieee754_fmod+0x1c4>
 800b18a:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800b18e:	fa02 f303 	lsl.w	r3, r2, r3
 800b192:	40cc      	lsrs	r4, r1
 800b194:	4323      	orrs	r3, r4
 800b196:	410a      	asrs	r2, r1
 800b198:	4618      	mov	r0, r3
 800b19a:	ea42 0105 	orr.w	r1, r2, r5
 800b19e:	e73a      	b.n	800b016 <__ieee754_fmod+0x3a>
 800b1a0:	291f      	cmp	r1, #31
 800b1a2:	dc07      	bgt.n	800b1b4 <__ieee754_fmod+0x1d8>
 800b1a4:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800b1a8:	40cc      	lsrs	r4, r1
 800b1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ae:	4323      	orrs	r3, r4
 800b1b0:	462a      	mov	r2, r5
 800b1b2:	e7f1      	b.n	800b198 <__ieee754_fmod+0x1bc>
 800b1b4:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800b1b8:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800b1bc:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800b1c0:	33e2      	adds	r3, #226	@ 0xe2
 800b1c2:	fa42 f303 	asr.w	r3, r2, r3
 800b1c6:	e7f3      	b.n	800b1b0 <__ieee754_fmod+0x1d4>
 800b1c8:	7fefffff 	.word	0x7fefffff
 800b1cc:	7ff00000 	.word	0x7ff00000
 800b1d0:	0800b9b8 	.word	0x0800b9b8
 800b1d4:	fffffbed 	.word	0xfffffbed
 800b1d8:	fffffc02 	.word	0xfffffc02
 800b1dc:	fffffbe2 	.word	0xfffffbe2

0800b1e0 <_init>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	bf00      	nop
 800b1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1e6:	bc08      	pop	{r3}
 800b1e8:	469e      	mov	lr, r3
 800b1ea:	4770      	bx	lr

0800b1ec <_fini>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	bf00      	nop
 800b1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f2:	bc08      	pop	{r3}
 800b1f4:	469e      	mov	lr, r3
 800b1f6:	4770      	bx	lr
