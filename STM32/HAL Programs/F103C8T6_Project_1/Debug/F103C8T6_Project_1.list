
F103C8T6_Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08009408  08009408  0000a408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a4c  08009a4c  0000b1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009a4c  08009a4c  0000aa4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a54  08009a54  0000b1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a54  08009a54  0000aa54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a58  08009a58  0000aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08009a5c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  200001f4  08009c50  0000b1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  08009c50  0000b958  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e33c  00000000  00000000  0000b21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002414  00000000  00000000  00019559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1a  00000000  00000000  0001c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193c5  00000000  00000000  0001d2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104d4  00000000  00000000  0003668f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091425  00000000  00000000  00046b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7f88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000513c  00000000  00000000  000d7fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000dd108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	080093ec 	.word	0x080093ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	080093ec 	.word	0x080093ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <delay_us>:
#define DHT_PIN GPIO_PIN_6

extern TIM_HandleTypeDef htim2;

void delay_us(uint16_t us)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <delay_us+0x2c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 80010ee:	bf00      	nop
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <delay_us+0x2c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3f9      	bcc.n	80010f0 <delay_us+0x14>
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000240 	.word	0x20000240

0800110c <DHT_Set_Pin_Output>:

void DHT_Set_Pin_Output(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT_PIN;
 800111e:	2340      	movs	r3, #64	@ 0x40
 8001120:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4803      	ldr	r0, [pc, #12]	@ (800113c <DHT_Set_Pin_Output+0x30>)
 8001130:	f001 ff8c 	bl	800304c <HAL_GPIO_Init>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010800 	.word	0x40010800

08001140 <DHT_Set_Pin_Input>:

void DHT_Set_Pin_Input(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT_PIN;
 8001152:	2340      	movs	r3, #64	@ 0x40
 8001154:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4803      	ldr	r0, [pc, #12]	@ (8001170 <DHT_Set_Pin_Input+0x30>)
 8001164:	f001 ff72 	bl	800304c <HAL_GPIO_Init>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010800 	.word	0x40010800

08001174 <DHT11_Read>:

uint8_t DHT11_Read(uint8_t *temp, uint8_t *hum)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
    uint8_t bits[5] = {0};
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	711a      	strb	r2, [r3, #4]
    uint8_t i, j;

    DHT_Set_Pin_Output();
 8001188:	f7ff ffc0 	bl	800110c <DHT_Set_Pin_Output>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2140      	movs	r1, #64	@ 0x40
 8001190:	4853      	ldr	r0, [pc, #332]	@ (80012e0 <DHT11_Read+0x16c>)
 8001192:	f002 f8f6 	bl	8003382 <HAL_GPIO_WritePin>
    HAL_Delay(20); // 18+ ms
 8001196:	2014      	movs	r0, #20
 8001198:	f001 f948 	bl	800242c <HAL_Delay>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2140      	movs	r1, #64	@ 0x40
 80011a0:	484f      	ldr	r0, [pc, #316]	@ (80012e0 <DHT11_Read+0x16c>)
 80011a2:	f002 f8ee 	bl	8003382 <HAL_GPIO_WritePin>
    delay_us(30);
 80011a6:	201e      	movs	r0, #30
 80011a8:	f7ff ff98 	bl	80010dc <delay_us>
    DHT_Set_Pin_Input();
 80011ac:	f7ff ffc8 	bl	8001140 <DHT_Set_Pin_Input>

    // Wait for response
    uint32_t timeout = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 80011b4:	e009      	b.n	80011ca <DHT11_Read+0x56>
        if (++timeout > 10000) return 1;
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	3301      	adds	r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <DHT11_Read+0x56>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e085      	b.n	80012d6 <DHT11_Read+0x162>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 80011ca:	2140      	movs	r1, #64	@ 0x40
 80011cc:	4844      	ldr	r0, [pc, #272]	@ (80012e0 <DHT11_Read+0x16c>)
 80011ce:	f002 f8c1 	bl	8003354 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d0ee      	beq.n	80011b6 <DHT11_Read+0x42>
    timeout = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 80011dc:	e009      	b.n	80011f2 <DHT11_Read+0x7e>
        if (++timeout > 10000) return 1;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	3301      	adds	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d901      	bls.n	80011f2 <DHT11_Read+0x7e>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e071      	b.n	80012d6 <DHT11_Read+0x162>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 80011f2:	2140      	movs	r1, #64	@ 0x40
 80011f4:	483a      	ldr	r0, [pc, #232]	@ (80012e0 <DHT11_Read+0x16c>)
 80011f6:	f002 f8ad 	bl	8003354 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0ee      	beq.n	80011de <DHT11_Read+0x6a>
    timeout = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 8001204:	e009      	b.n	800121a <DHT11_Read+0xa6>
        if (++timeout > 10000) return 1;
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	3301      	adds	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001212:	4293      	cmp	r3, r2
 8001214:	d901      	bls.n	800121a <DHT11_Read+0xa6>
 8001216:	2301      	movs	r3, #1
 8001218:	e05d      	b.n	80012d6 <DHT11_Read+0x162>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 800121a:	2140      	movs	r1, #64	@ 0x40
 800121c:	4830      	ldr	r0, [pc, #192]	@ (80012e0 <DHT11_Read+0x16c>)
 800121e:	f002 f899 	bl	8003354 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d0ee      	beq.n	8001206 <DHT11_Read+0x92>

    // Read 5 bytes
    for (j = 0; j < 5; j++)
 8001228:	2300      	movs	r3, #0
 800122a:	75bb      	strb	r3, [r7, #22]
 800122c:	e03a      	b.n	80012a4 <DHT11_Read+0x130>
    {
        for (i = 0; i < 8; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	e031      	b.n	8001298 <DHT11_Read+0x124>
        {
            while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET);
 8001234:	bf00      	nop
 8001236:	2140      	movs	r1, #64	@ 0x40
 8001238:	4829      	ldr	r0, [pc, #164]	@ (80012e0 <DHT11_Read+0x16c>)
 800123a:	f002 f88b 	bl	8003354 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f8      	beq.n	8001236 <DHT11_Read+0xc2>
            delay_us(40);
 8001244:	2028      	movs	r0, #40	@ 0x28
 8001246:	f7ff ff49 	bl	80010dc <delay_us>
            if (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 800124a:	2140      	movs	r1, #64	@ 0x40
 800124c:	4824      	ldr	r0, [pc, #144]	@ (80012e0 <DHT11_Read+0x16c>)
 800124e:	f002 f881 	bl	8003354 <HAL_GPIO_ReadPin>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d114      	bne.n	8001282 <DHT11_Read+0x10e>
                bits[j] |= (1 << (7 - i));
 8001258:	7dbb      	ldrb	r3, [r7, #22]
 800125a:	3318      	adds	r3, #24
 800125c:	443b      	add	r3, r7
 800125e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001262:	b25a      	sxtb	r2, r3
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	b25b      	sxtb	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b25a      	sxtb	r2, r3
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	3318      	adds	r3, #24
 800127c:	443b      	add	r3, r7
 800127e:	f803 2c10 	strb.w	r2, [r3, #-16]
            while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET);
 8001282:	bf00      	nop
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	4816      	ldr	r0, [pc, #88]	@ (80012e0 <DHT11_Read+0x16c>)
 8001288:	f002 f864 	bl	8003354 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d0f8      	beq.n	8001284 <DHT11_Read+0x110>
        for (i = 0; i < 8; i++)
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	3301      	adds	r3, #1
 8001296:	75fb      	strb	r3, [r7, #23]
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d9ca      	bls.n	8001234 <DHT11_Read+0xc0>
    for (j = 0; j < 5; j++)
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	3301      	adds	r3, #1
 80012a2:	75bb      	strb	r3, [r7, #22]
 80012a4:	7dbb      	ldrb	r3, [r7, #22]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d9c1      	bls.n	800122e <DHT11_Read+0xba>
        }
    }

    if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4])
 80012aa:	7a3a      	ldrb	r2, [r7, #8]
 80012ac:	7a7b      	ldrb	r3, [r7, #9]
 80012ae:	4413      	add	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	7abb      	ldrb	r3, [r7, #10]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	4413      	add	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <DHT11_Read+0x154>
        return 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	e006      	b.n	80012d6 <DHT11_Read+0x162>

    *hum = bits[0];
 80012c8:	7a3a      	ldrb	r2, [r7, #8]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	701a      	strb	r2, [r3, #0]
    *temp = bits[2];
 80012ce:	7aba      	ldrb	r2, [r7, #10]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	701a      	strb	r2, [r3, #0]

    return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010800 	.word	0x40010800

080012e4 <Read_LM35>:
void parse_GNGLL(const char *sentence);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float Read_LM35(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80012ea:	4812      	ldr	r0, [pc, #72]	@ (8001334 <Read_LM35+0x50>)
 80012ec:	f001 f99a 	bl	8002624 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	480f      	ldr	r0, [pc, #60]	@ (8001334 <Read_LM35+0x50>)
 80012f6:	f001 fa43 	bl	8002780 <HAL_ADC_PollForConversion>
	uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <Read_LM35+0x50>)
 80012fc:	f001 fb46 	bl	800298c <HAL_ADC_GetValue>
 8001300:	4603      	mov	r3, r0
 8001302:	80fb      	strh	r3, [r7, #6]
	return ((float) adc_value * 3.3f / 4095.0f) * 100.0f;
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fce4 	bl	8000cd4 <__aeabi_ui2f>
 800130c:	4603      	mov	r3, r0
 800130e:	490a      	ldr	r1, [pc, #40]	@ (8001338 <Read_LM35+0x54>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fd37 	bl	8000d84 <__aeabi_fmul>
 8001316:	4603      	mov	r3, r0
 8001318:	4908      	ldr	r1, [pc, #32]	@ (800133c <Read_LM35+0x58>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fde6 	bl	8000eec <__aeabi_fdiv>
 8001320:	4603      	mov	r3, r0
 8001322:	4907      	ldr	r1, [pc, #28]	@ (8001340 <Read_LM35+0x5c>)
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fd2d 	bl	8000d84 <__aeabi_fmul>
 800132a:	4603      	mov	r3, r0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000210 	.word	0x20000210
 8001338:	40533333 	.word	0x40533333
 800133c:	457ff000 	.word	0x457ff000
 8001340:	42c80000 	.word	0x42c80000

08001344 <GSM_SendSMS>:

void GSM_SendSMS(char *number, char *message) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b09c      	sub	sp, #112	@ 0x70
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	char cmd[100];

	// Initialize GSM Module
	HAL_UART_Transmit(&huart3, (uint8_t*) "AT\r\n", 4, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	2204      	movs	r2, #4
 8001354:	4926      	ldr	r1, [pc, #152]	@ (80013f0 <GSM_SendSMS+0xac>)
 8001356:	4827      	ldr	r0, [pc, #156]	@ (80013f4 <GSM_SendSMS+0xb0>)
 8001358:	f003 f8bc 	bl	80044d4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800135c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001360:	f001 f864 	bl	800242c <HAL_Delay>

	HAL_UART_Transmit(&huart3, (uint8_t*) "AT+CMGF=1\r\n", 11, 1000); // Set to text mode
 8001364:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001368:	220b      	movs	r2, #11
 800136a:	4923      	ldr	r1, [pc, #140]	@ (80013f8 <GSM_SendSMS+0xb4>)
 800136c:	4821      	ldr	r0, [pc, #132]	@ (80013f4 <GSM_SendSMS+0xb0>)
 800136e:	f003 f8b1 	bl	80044d4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001372:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001376:	f001 f859 	bl	800242c <HAL_Delay>

	// Set recipient number
	sprintf(cmd, "AT+CMGS=\"%s\"\r\n", number);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	491e      	ldr	r1, [pc, #120]	@ (80013fc <GSM_SendSMS+0xb8>)
 8001382:	4618      	mov	r0, r3
 8001384:	f005 fa1a 	bl	80067bc <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) cmd, strlen(cmd), 1000);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe fedf 	bl	8000150 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b29a      	uxth	r2, r3
 8001396:	f107 010c 	add.w	r1, r7, #12
 800139a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139e:	4815      	ldr	r0, [pc, #84]	@ (80013f4 <GSM_SendSMS+0xb0>)
 80013a0:	f003 f898 	bl	80044d4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80013a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013a8:	f001 f840 	bl	800242c <HAL_Delay>

	// Send message content
	HAL_UART_Transmit(&huart3, (uint8_t*) message, strlen(message), 1000);
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f7fe fecf 	bl	8000150 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <GSM_SendSMS+0xb0>)
 80013be:	f003 f889 	bl	80044d4 <HAL_UART_Transmit>
	HAL_Delay(500);
 80013c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013c6:	f001 f831 	bl	800242c <HAL_Delay>

	// Send Ctrl+Z to send the SMS
	uint8_t end_code = 0x1A; // ASCII for Ctrl+Z
 80013ca:	231a      	movs	r3, #26
 80013cc:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart3, &end_code, 1, 1000);
 80013ce:	f107 010b 	add.w	r1, r7, #11
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	2201      	movs	r2, #1
 80013d8:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <GSM_SendSMS+0xb0>)
 80013da:	f003 f87b 	bl	80044d4 <HAL_UART_Transmit>

	HAL_Delay(3000); // Wait until SMS is sent
 80013de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013e2:	f001 f823 	bl	800242c <HAL_Delay>
}
 80013e6:	bf00      	nop
 80013e8:	3770      	adds	r7, #112	@ 0x70
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08009408 	.word	0x08009408
 80013f4:	20000318 	.word	0x20000318
 80013f8:	08009410 	.word	0x08009410
 80013fc:	0800941c 	.word	0x0800941c

08001400 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001404:	b0a1      	sub	sp, #132	@ 0x84
 8001406:	af0c      	add	r7, sp, #48	@ 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001408:	f000 ffae 	bl	8002368 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800140c:	f000 f9c4 	bl	8001798 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001410:	f000 fb26 	bl	8001a60 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001414:	f000 fa5a 	bl	80018cc <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001418:	f000 faa4 	bl	8001964 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800141c:	f000 fa18 	bl	8001850 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8001420:	f000 faca 	bl	80019b8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001424:	f000 faf2 	bl	8001a0c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8001428:	488b      	ldr	r0, [pc, #556]	@ (8001658 <main+0x258>)
 800142a:	f002 fd8f 	bl	8003f4c <HAL_TIM_Base_Start>
	HAL_ADC_Start(&hadc1);
 800142e:	488b      	ldr	r0, [pc, #556]	@ (800165c <main+0x25c>)
 8001430:	f001 f8f8 	bl	8002624 <HAL_ADC_Start>

	HAL_UART_Transmit(&huart1, (uint8_t*) "Hello from STM32 UART1\r\n", 25,
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	2219      	movs	r2, #25
 800143a:	4989      	ldr	r1, [pc, #548]	@ (8001660 <main+0x260>)
 800143c:	4889      	ldr	r0, [pc, #548]	@ (8001664 <main+0x264>)
 800143e:	f003 f849 	bl	80044d4 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart1, &bp_rx_byte, 1); // Start ESP32 reception
 8001442:	2201      	movs	r2, #1
 8001444:	4988      	ldr	r1, [pc, #544]	@ (8001668 <main+0x268>)
 8001446:	4887      	ldr	r0, [pc, #540]	@ (8001664 <main+0x264>)
 8001448:	f003 f8cf 	bl	80045ea <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);   // Start GPS reception
 800144c:	2201      	movs	r2, #1
 800144e:	4987      	ldr	r1, [pc, #540]	@ (800166c <main+0x26c>)
 8001450:	4887      	ldr	r0, [pc, #540]	@ (8001670 <main+0x270>)
 8001452:	f003 f8ca 	bl	80045ea <HAL_UART_Receive_IT>
	/* USER CODE BEGIN WHILE */
	/* USER CODE BEGIN 3 */
	/* USER CODE BEGIN 3 */
	while (1) {
		// --- 1. Continuous live printing every 1 second using TIM2 flag ---
		if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE)) {
 8001456:	4b80      	ldr	r3, [pc, #512]	@ (8001658 <main+0x258>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b01      	cmp	r3, #1
 8001462:	f040 8099 	bne.w	8001598 <main+0x198>
			if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 8001466:	4b7c      	ldr	r3, [pc, #496]	@ (8001658 <main+0x258>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 8091 	bne.w	8001598 <main+0x198>
				__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001476:	4b78      	ldr	r3, [pc, #480]	@ (8001658 <main+0x258>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f06f 0201 	mvn.w	r2, #1
 800147e:	611a      	str	r2, [r3, #16]

				// Check if a full BP packet is ready
				if (bp_ready) {
 8001480:	4b7c      	ldr	r3, [pc, #496]	@ (8001674 <main+0x274>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d021      	beq.n	80014ce <main+0xce>
					char dbg[64];
					sprintf(dbg, "RX Packet: %02X %02X %02X %02X\r\n",
							bp_packet[0], bp_packet[1], bp_packet[2],
 800148a:	4b7b      	ldr	r3, [pc, #492]	@ (8001678 <main+0x278>)
 800148c:	781b      	ldrb	r3, [r3, #0]
					sprintf(dbg, "RX Packet: %02X %02X %02X %02X\r\n",
 800148e:	4619      	mov	r1, r3
							bp_packet[0], bp_packet[1], bp_packet[2],
 8001490:	4b79      	ldr	r3, [pc, #484]	@ (8001678 <main+0x278>)
 8001492:	785b      	ldrb	r3, [r3, #1]
					sprintf(dbg, "RX Packet: %02X %02X %02X %02X\r\n",
 8001494:	461c      	mov	r4, r3
							bp_packet[0], bp_packet[1], bp_packet[2],
 8001496:	4b78      	ldr	r3, [pc, #480]	@ (8001678 <main+0x278>)
 8001498:	789b      	ldrb	r3, [r3, #2]
					sprintf(dbg, "RX Packet: %02X %02X %02X %02X\r\n",
 800149a:	461a      	mov	r2, r3
							bp_packet[3]);
 800149c:	4b76      	ldr	r3, [pc, #472]	@ (8001678 <main+0x278>)
 800149e:	78db      	ldrb	r3, [r3, #3]
					sprintf(dbg, "RX Packet: %02X %02X %02X %02X\r\n",
 80014a0:	f107 000c 	add.w	r0, r7, #12
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	9200      	str	r2, [sp, #0]
 80014a8:	4623      	mov	r3, r4
 80014aa:	460a      	mov	r2, r1
 80014ac:	4973      	ldr	r1, [pc, #460]	@ (800167c <main+0x27c>)
 80014ae:	f005 f985 	bl	80067bc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) dbg, strlen(dbg),
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe fe4a 	bl	8000150 <strlen>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29a      	uxth	r2, r3
 80014c0:	f107 010c 	add.w	r1, r7, #12
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	4866      	ldr	r0, [pc, #408]	@ (8001664 <main+0x264>)
 80014ca:	f003 f803 	bl	80044d4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
				}

				// Compose live UART string
				snprintf(uart_buffer, sizeof(uart_buffer),
 80014ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001680 <main+0x280>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4698      	mov	r8, r3
 80014d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001684 <main+0x284>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461d      	mov	r5, r3
 80014da:	4b6b      	ldr	r3, [pc, #428]	@ (8001688 <main+0x288>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ffa2 	bl	8000428 <__aeabi_f2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4968      	ldr	r1, [pc, #416]	@ (800168c <main+0x28c>)
 80014ea:	6809      	ldr	r1, [r1, #0]
 80014ec:	4868      	ldr	r0, [pc, #416]	@ (8001690 <main+0x290>)
 80014ee:	6800      	ldr	r0, [r0, #0]
 80014f0:	4c68      	ldr	r4, [pc, #416]	@ (8001694 <main+0x294>)
 80014f2:	7824      	ldrb	r4, [r4, #0]
 80014f4:	4626      	mov	r6, r4
 80014f6:	4c68      	ldr	r4, [pc, #416]	@ (8001698 <main+0x298>)
 80014f8:	7824      	ldrb	r4, [r4, #0]
 80014fa:	607c      	str	r4, [r7, #4]
 80014fc:	4c67      	ldr	r4, [pc, #412]	@ (800169c <main+0x29c>)
 80014fe:	7824      	ldrb	r4, [r4, #0]
 8001500:	940a      	str	r4, [sp, #40]	@ 0x28
 8001502:	687c      	ldr	r4, [r7, #4]
 8001504:	9409      	str	r4, [sp, #36]	@ 0x24
 8001506:	9608      	str	r6, [sp, #32]
 8001508:	4c65      	ldr	r4, [pc, #404]	@ (80016a0 <main+0x2a0>)
 800150a:	9407      	str	r4, [sp, #28]
 800150c:	4c65      	ldr	r4, [pc, #404]	@ (80016a4 <main+0x2a4>)
 800150e:	9406      	str	r4, [sp, #24]
 8001510:	9005      	str	r0, [sp, #20]
 8001512:	9104      	str	r1, [sp, #16]
 8001514:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001518:	9500      	str	r5, [sp, #0]
 800151a:	4643      	mov	r3, r8
 800151c:	4a62      	ldr	r2, [pc, #392]	@ (80016a8 <main+0x2a8>)
 800151e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001522:	4862      	ldr	r0, [pc, #392]	@ (80016ac <main+0x2ac>)
 8001524:	f005 f914 	bl	8006750 <sniprintf>
						"DHT11: T=%dC H=%d%% | LM35: %.2fC | MAX30102: RED=%lu IR=%lu | GPS: Lat=%s Lon=%s | BP: SYS=%d DIA=%d BPM=%d\r\n",
						temp, hum, tempC, red, ir, latitude, longitude, sys,
						dia, bpm);

				snprintf(sms_message, sizeof(sms_message),
 8001528:	4b55      	ldr	r3, [pc, #340]	@ (8001680 <main+0x280>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4698      	mov	r8, r3
 800152e:	4b55      	ldr	r3, [pc, #340]	@ (8001684 <main+0x284>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461d      	mov	r5, r3
 8001534:	4b54      	ldr	r3, [pc, #336]	@ (8001688 <main+0x288>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff75 	bl	8000428 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4952      	ldr	r1, [pc, #328]	@ (800168c <main+0x28c>)
 8001544:	6809      	ldr	r1, [r1, #0]
 8001546:	4852      	ldr	r0, [pc, #328]	@ (8001690 <main+0x290>)
 8001548:	6800      	ldr	r0, [r0, #0]
 800154a:	4c52      	ldr	r4, [pc, #328]	@ (8001694 <main+0x294>)
 800154c:	7824      	ldrb	r4, [r4, #0]
 800154e:	4626      	mov	r6, r4
 8001550:	4c51      	ldr	r4, [pc, #324]	@ (8001698 <main+0x298>)
 8001552:	7824      	ldrb	r4, [r4, #0]
 8001554:	607c      	str	r4, [r7, #4]
 8001556:	4c51      	ldr	r4, [pc, #324]	@ (800169c <main+0x29c>)
 8001558:	7824      	ldrb	r4, [r4, #0]
 800155a:	940a      	str	r4, [sp, #40]	@ 0x28
 800155c:	687c      	ldr	r4, [r7, #4]
 800155e:	9409      	str	r4, [sp, #36]	@ 0x24
 8001560:	9608      	str	r6, [sp, #32]
 8001562:	4c4f      	ldr	r4, [pc, #316]	@ (80016a0 <main+0x2a0>)
 8001564:	9407      	str	r4, [sp, #28]
 8001566:	4c4f      	ldr	r4, [pc, #316]	@ (80016a4 <main+0x2a4>)
 8001568:	9406      	str	r4, [sp, #24]
 800156a:	9005      	str	r0, [sp, #20]
 800156c:	9104      	str	r1, [sp, #16]
 800156e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001572:	9500      	str	r5, [sp, #0]
 8001574:	4643      	mov	r3, r8
 8001576:	4a4e      	ldr	r2, [pc, #312]	@ (80016b0 <main+0x2b0>)
 8001578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800157c:	484d      	ldr	r0, [pc, #308]	@ (80016b4 <main+0x2b4>)
 800157e:	f005 f8e7 	bl	8006750 <sniprintf>
						"DHT11: T=%dC H=%d%%\nLM35: %.2fC\nMAX30102: RED=%lu IR=%lu\nGPS: Lat=%s Lon=%s\nBP: SYS=%d DIA=%d BPM=%d",
						temp, hum, tempC, red, ir, latitude, longitude, sys,
						dia, bpm);

				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer,
						strlen(uart_buffer), HAL_MAX_DELAY);
 8001582:	484a      	ldr	r0, [pc, #296]	@ (80016ac <main+0x2ac>)
 8001584:	f7fe fde4 	bl	8000150 <strlen>
 8001588:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer,
 800158a:	b29a      	uxth	r2, r3
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	4946      	ldr	r1, [pc, #280]	@ (80016ac <main+0x2ac>)
 8001592:	4834      	ldr	r0, [pc, #208]	@ (8001664 <main+0x264>)
 8001594:	f002 ff9e 	bl	80044d4 <HAL_UART_Transmit>
			}
		}

		// --- 2. Check push button for SMS sending ---
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_RESET) {
 8001598:	2120      	movs	r1, #32
 800159a:	4847      	ldr	r0, [pc, #284]	@ (80016b8 <main+0x2b8>)
 800159c:	f001 feda 	bl	8003354 <HAL_GPIO_ReadPin>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 80d7 	bne.w	8001756 <main+0x356>
			// --- Read sensors ---
			success = 0;
 80015a8:	4b44      	ldr	r3, [pc, #272]	@ (80016bc <main+0x2bc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < MAX_DHT_ATTEMPTS; i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015b2:	e010      	b.n	80015d6 <main+0x1d6>
				if (DHT11_Read(&temp, &hum) == 0) {
 80015b4:	4933      	ldr	r1, [pc, #204]	@ (8001684 <main+0x284>)
 80015b6:	4832      	ldr	r0, [pc, #200]	@ (8001680 <main+0x280>)
 80015b8:	f7ff fddc 	bl	8001174 <DHT11_Read>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <main+0x1ca>
					success = 1;
 80015c2:	4b3e      	ldr	r3, [pc, #248]	@ (80016bc <main+0x2bc>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
					break;
 80015c8:	e008      	b.n	80015dc <main+0x1dc>
				}
				HAL_Delay(100);
 80015ca:	2064      	movs	r0, #100	@ 0x64
 80015cc:	f000 ff2e 	bl	800242c <HAL_Delay>
			for (int i = 0; i < MAX_DHT_ATTEMPTS; i++) {
 80015d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015d2:	3301      	adds	r3, #1
 80015d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015d8:	2b02      	cmp	r3, #2
 80015da:	ddeb      	ble.n	80015b4 <main+0x1b4>
			}

			tempC = Read_LM35();  // LM35 temperature
 80015dc:	f7ff fe82 	bl	80012e4 <Read_LM35>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a29      	ldr	r2, [pc, #164]	@ (8001688 <main+0x288>)
 80015e4:	6013      	str	r3, [r2, #0]

			if (gps_ready) {
 80015e6:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <main+0x2c0>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00e      	beq.n	800160e <main+0x20e>
				gps_ready = 0;
 80015f0:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <main+0x2c0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
				if (strncmp(gps_buffer, "$GNGLL", 6) == 0) {
 80015f6:	2206      	movs	r2, #6
 80015f8:	4932      	ldr	r1, [pc, #200]	@ (80016c4 <main+0x2c4>)
 80015fa:	4833      	ldr	r0, [pc, #204]	@ (80016c8 <main+0x2c8>)
 80015fc:	f005 f94b 	bl	8006896 <strncmp>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d113      	bne.n	800162e <main+0x22e>
					parse_GNGLL(gps_buffer);  // update latitude and longitude
 8001606:	4830      	ldr	r0, [pc, #192]	@ (80016c8 <main+0x2c8>)
 8001608:	f000 fa8c 	bl	8001b24 <parse_GNGLL>
 800160c:	e00f      	b.n	800162e <main+0x22e>
				}
			} else {
				strcpy(latitude, "NA");
 800160e:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <main+0x2a4>)
 8001610:	4a2e      	ldr	r2, [pc, #184]	@ (80016cc <main+0x2cc>)
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	4611      	mov	r1, r2
 8001616:	8019      	strh	r1, [r3, #0]
 8001618:	3302      	adds	r3, #2
 800161a:	0c12      	lsrs	r2, r2, #16
 800161c:	701a      	strb	r2, [r3, #0]
				strcpy(longitude, "NA");
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <main+0x2a0>)
 8001620:	4a2a      	ldr	r2, [pc, #168]	@ (80016cc <main+0x2cc>)
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	4611      	mov	r1, r2
 8001626:	8019      	strh	r1, [r3, #0]
 8001628:	3302      	adds	r3, #2
 800162a:	0c12      	lsrs	r2, r2, #16
 800162c:	701a      	strb	r2, [r3, #0]
			}

			// Use latest BP values if available
			if (bp_ready) {
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <main+0x274>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d04b      	beq.n	80016d0 <main+0x2d0>
				sys = bp_packet[1];
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <main+0x278>)
 800163a:	785a      	ldrb	r2, [r3, #1]
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <main+0x294>)
 800163e:	701a      	strb	r2, [r3, #0]
				dia = bp_packet[2];
 8001640:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <main+0x278>)
 8001642:	789a      	ldrb	r2, [r3, #2]
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <main+0x298>)
 8001646:	701a      	strb	r2, [r3, #0]
				bpm = bp_packet[3];
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <main+0x278>)
 800164a:	78da      	ldrb	r2, [r3, #3]
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <main+0x29c>)
 800164e:	701a      	strb	r2, [r3, #0]
				bp_ready = 0; // reset flag
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <main+0x274>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e044      	b.n	80016e2 <main+0x2e2>
 8001658:	20000240 	.word	0x20000240
 800165c:	20000210 	.word	0x20000210
 8001660:	0800942c 	.word	0x0800942c
 8001664:	20000288 	.word	0x20000288
 8001668:	200007f4 	.word	0x200007f4
 800166c:	200005f1 	.word	0x200005f1
 8001670:	200002d0 	.word	0x200002d0
 8001674:	200007fd 	.word	0x200007fd
 8001678:	200007f8 	.word	0x200007f8
 800167c:	08009448 	.word	0x08009448
 8001680:	20000360 	.word	0x20000360
 8001684:	20000361 	.word	0x20000361
 8001688:	20000364 	.word	0x20000364
 800168c:	20000368 	.word	0x20000368
 8001690:	2000036c 	.word	0x2000036c
 8001694:	200007ff 	.word	0x200007ff
 8001698:	20000800 	.word	0x20000800
 800169c:	20000801 	.word	0x20000801
 80016a0:	20000010 	.word	0x20000010
 80016a4:	20000000 	.word	0x20000000
 80016a8:	0800946c 	.word	0x0800946c
 80016ac:	20000370 	.word	0x20000370
 80016b0:	080094dc 	.word	0x080094dc
 80016b4:	200005f4 	.word	0x200005f4
 80016b8:	40010800 	.word	0x40010800
 80016bc:	200007fe 	.word	0x200007fe
 80016c0:	200005f0 	.word	0x200005f0
 80016c4:	08009544 	.word	0x08009544
 80016c8:	20000570 	.word	0x20000570
 80016cc:	0800954c 	.word	0x0800954c
			} else {
				sys = 20;
 80016d0:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <main+0x360>)
 80016d2:	2214      	movs	r2, #20
 80016d4:	701a      	strb	r2, [r3, #0]
				dia = 30;
 80016d6:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <main+0x364>)
 80016d8:	221e      	movs	r2, #30
 80016da:	701a      	strb	r2, [r3, #0]
				bpm = 40;
 80016dc:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <main+0x368>)
 80016de:	2228      	movs	r2, #40	@ 0x28
 80016e0:	701a      	strb	r2, [r3, #0]
			}

			// Compose SMS content
			sprintf(sms_message,
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <main+0x36c>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4698      	mov	r8, r3
 80016e8:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <main+0x370>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4699      	mov	r9, r3
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <main+0x374>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fe98 	bl	8000428 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	491e      	ldr	r1, [pc, #120]	@ (8001778 <main+0x378>)
 80016fe:	6809      	ldr	r1, [r1, #0]
 8001700:	481e      	ldr	r0, [pc, #120]	@ (800177c <main+0x37c>)
 8001702:	6800      	ldr	r0, [r0, #0]
 8001704:	4c16      	ldr	r4, [pc, #88]	@ (8001760 <main+0x360>)
 8001706:	7824      	ldrb	r4, [r4, #0]
 8001708:	4625      	mov	r5, r4
 800170a:	4c16      	ldr	r4, [pc, #88]	@ (8001764 <main+0x364>)
 800170c:	7824      	ldrb	r4, [r4, #0]
 800170e:	4626      	mov	r6, r4
 8001710:	4c15      	ldr	r4, [pc, #84]	@ (8001768 <main+0x368>)
 8001712:	7824      	ldrb	r4, [r4, #0]
 8001714:	9408      	str	r4, [sp, #32]
 8001716:	9607      	str	r6, [sp, #28]
 8001718:	9506      	str	r5, [sp, #24]
 800171a:	4c19      	ldr	r4, [pc, #100]	@ (8001780 <main+0x380>)
 800171c:	9405      	str	r4, [sp, #20]
 800171e:	4c19      	ldr	r4, [pc, #100]	@ (8001784 <main+0x384>)
 8001720:	9404      	str	r4, [sp, #16]
 8001722:	9003      	str	r0, [sp, #12]
 8001724:	9102      	str	r1, [sp, #8]
 8001726:	e9cd 2300 	strd	r2, r3, [sp]
 800172a:	464b      	mov	r3, r9
 800172c:	4642      	mov	r2, r8
 800172e:	4916      	ldr	r1, [pc, #88]	@ (8001788 <main+0x388>)
 8001730:	4816      	ldr	r0, [pc, #88]	@ (800178c <main+0x38c>)
 8001732:	f005 f843 	bl	80067bc <siprintf>
					"DHT11: T=%dC H=%d%%\nLM35: %.2fC\nMAX30102: RED=%lu IR=%lu\nGPS: Lat=%s Lon=%s\nBP: SYS=%d DIA=%d BPM=%d",
					temp, hum, tempC, red, ir, latitude, longitude, sys, dia,
					bpm);

			// Send SMS
			GSM_SendSMS("+919985798499", sms_message);
 8001736:	4915      	ldr	r1, [pc, #84]	@ (800178c <main+0x38c>)
 8001738:	4815      	ldr	r0, [pc, #84]	@ (8001790 <main+0x390>)
 800173a:	f7ff fe03 	bl	8001344 <GSM_SendSMS>

			// --- Debounce ---
			while (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_RESET)
 800173e:	bf00      	nop
 8001740:	2120      	movs	r1, #32
 8001742:	4814      	ldr	r0, [pc, #80]	@ (8001794 <main+0x394>)
 8001744:	f001 fe06 	bl	8003354 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f8      	beq.n	8001740 <main+0x340>
				;
			HAL_Delay(300);
 800174e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001752:	f000 fe6b 	bl	800242c <HAL_Delay>
		}

		// --- 3. Optional small delay for CPU relief ---
		HAL_Delay(10);
 8001756:	200a      	movs	r0, #10
 8001758:	f000 fe68 	bl	800242c <HAL_Delay>
		if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE)) {
 800175c:	e67b      	b.n	8001456 <main+0x56>
 800175e:	bf00      	nop
 8001760:	200007ff 	.word	0x200007ff
 8001764:	20000800 	.word	0x20000800
 8001768:	20000801 	.word	0x20000801
 800176c:	20000360 	.word	0x20000360
 8001770:	20000361 	.word	0x20000361
 8001774:	20000364 	.word	0x20000364
 8001778:	20000368 	.word	0x20000368
 800177c:	2000036c 	.word	0x2000036c
 8001780:	20000010 	.word	0x20000010
 8001784:	20000000 	.word	0x20000000
 8001788:	080094dc 	.word	0x080094dc
 800178c:	200005f4 	.word	0x200005f4
 8001790:	08009550 	.word	0x08009550
 8001794:	40010800 	.word	0x40010800

08001798 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	@ 0x50
 800179c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800179e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a2:	2228      	movs	r2, #40	@ 0x28
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 f86d 	bl	8006886 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d6:	2301      	movs	r3, #1
 80017d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2302      	movs	r3, #2
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017e2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80017e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fde0 	bl	80033b4 <HAL_RCC_OscConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0x66>
		Error_Handler();
 80017fa:	f000 fb27 	bl	8001e4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017fe:	230f      	movs	r3, #15
 8001800:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800180a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800180e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2102      	movs	r1, #2
 800181a:	4618      	mov	r0, r3
 800181c:	f002 f84c 	bl	80038b8 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0x92>
		Error_Handler();
 8001826:	f000 fb11 	bl	8001e4c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800182a:	2302      	movs	r3, #2
 800182c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800182e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001832:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	4618      	mov	r0, r3
 8001838:	f002 f9cc 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0xae>
		Error_Handler();
 8001842:	f000 fb03 	bl	8001e4c <Error_Handler>
	}
}
 8001846:	bf00      	nop
 8001848:	3750      	adds	r7, #80	@ 0x50
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_ADC1_Init+0x74>)
 8001862:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <MX_ADC1_Init+0x78>)
 8001864:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <MX_ADC1_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_ADC1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <MX_ADC1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <MX_ADC1_Init+0x74>)
 800187a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800187e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <MX_ADC1_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001886:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <MX_ADC1_Init+0x74>)
 8001888:	2201      	movs	r2, #1
 800188a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800188c:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <MX_ADC1_Init+0x74>)
 800188e:	f000 fdf1 	bl	8002474 <HAL_ADC_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001898:	f000 fad8 	bl	8001e4c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800189c:	2307      	movs	r3, #7
 800189e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80018a4:	2307      	movs	r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_ADC1_Init+0x74>)
 80018ae:	f001 f879 	bl	80029a4 <HAL_ADC_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC1_Init+0x6c>
		Error_Handler();
 80018b8:	f000 fac8 	bl	8001e4c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000210 	.word	0x20000210
 80018c8:	40012400 	.word	0x40012400

080018cc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <MX_TIM2_Init+0x94>)
 80018ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ee:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 71;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <MX_TIM2_Init+0x94>)
 80018f2:	2247      	movs	r2, #71	@ 0x47
 80018f4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_TIM2_Init+0x94>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <MX_TIM2_Init+0x94>)
 80018fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001902:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <MX_TIM2_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <MX_TIM2_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001910:	4813      	ldr	r0, [pc, #76]	@ (8001960 <MX_TIM2_Init+0x94>)
 8001912:	f002 facb 	bl	8003eac <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x54>
		Error_Handler();
 800191c:	f000 fa96 	bl	8001e4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001924:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <MX_TIM2_Init+0x94>)
 800192e:	f002 fb57 	bl	8003fe0 <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x70>
		Error_Handler();
 8001938:	f000 fa88 	bl	8001e4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_TIM2_Init+0x94>)
 800194a:	f002 fd15 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001954:	f000 fa7a 	bl	8001e4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000240 	.word	0x20000240

08001964 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <MX_USART1_UART_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001970:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001974:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800199a:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800199c:	f002 fd4a 	bl	8004434 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80019a6:	f000 fa51 	bl	8001e4c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000288 	.word	0x20000288
 80019b4:	40013800 	.word	0x40013800

080019b8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019be:	4a12      	ldr	r2, [pc, #72]	@ (8001a08 <MX_USART2_UART_Init+0x50>)
 80019c0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019c8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019f0:	f002 fd20 	bl	8004434 <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80019fa:	f000 fa27 	bl	8001e4c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002d0 	.word	0x200002d0
 8001a08:	40004400 	.word	0x40004400

08001a0c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <MX_USART3_UART_Init+0x50>)
 8001a14:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a1c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001a42:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a44:	f002 fcf6 	bl	8004434 <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001a4e:	f000 f9fd 	bl	8001e4c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000318 	.word	0x20000318
 8001a5c:	40004800 	.word	0x40004800

08001a60 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a74:	4b29      	ldr	r3, [pc, #164]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a28      	ldr	r2, [pc, #160]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001a7a:	f043 0310 	orr.w	r3, r3, #16
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8c:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a22      	ldr	r2, [pc, #136]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001a92:	f043 0320 	orr.w	r3, r3, #32
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a16      	ldr	r2, [pc, #88]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <MX_GPIO_Init+0xbc>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2140      	movs	r1, #64	@ 0x40
 8001ad8:	4811      	ldr	r0, [pc, #68]	@ (8001b20 <MX_GPIO_Init+0xc0>)
 8001ada:	f001 fc52 	bl	8003382 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	4619      	mov	r1, r3
 8001af0:	480b      	ldr	r0, [pc, #44]	@ (8001b20 <MX_GPIO_Init+0xc0>)
 8001af2:	f001 faab 	bl	800304c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af6:	2340      	movs	r3, #64	@ 0x40
 8001af8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <MX_GPIO_Init+0xc0>)
 8001b0e:	f001 fa9d 	bl	800304c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001b12:	bf00      	nop
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010800 	.word	0x40010800

08001b24 <parse_GNGLL>:
//			}
//		}
//		HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // Continue reception
//	}
//}
void parse_GNGLL(const char *sentence) {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b0db      	sub	sp, #364	@ 0x16c
 8001b28:	af04      	add	r7, sp, #16
 8001b2a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001b2e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b32:	6018      	str	r0, [r3, #0]
	char buffer[128];
	strcpy(buffer, sentence);
 8001b34:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001b38:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b3c:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	4610      	mov	r0, r2
 8001b44:	f004 ff8d 	bl	8006a62 <strcpy>

	char *token;
	char *fields[10] = { 0 };
 8001b48:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001b4c:	2228      	movs	r2, #40	@ 0x28
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 fe98 	bl	8006886 <memset>
	int i = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

	token = strtok(buffer, ",");
 8001b5c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001b60:	4973      	ldr	r1, [pc, #460]	@ (8001d30 <parse_GNGLL+0x20c>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 feaa 	bl	80068bc <strtok>
 8001b68:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	while (token && i < 10) {
 8001b6c:	e012      	b.n	8001b94 <parse_GNGLL+0x70>
		fields[i++] = token;
 8001b6e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001b7e:	443b      	add	r3, r7
 8001b80:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8001b84:	f843 2cd0 	str.w	r2, [r3, #-208]
		token = strtok(NULL, ",");
 8001b88:	4969      	ldr	r1, [pc, #420]	@ (8001d30 <parse_GNGLL+0x20c>)
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f004 fe96 	bl	80068bc <strtok>
 8001b90:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	while (token && i < 10) {
 8001b94:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <parse_GNGLL+0x80>
 8001b9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	dde4      	ble.n	8001b6e <parse_GNGLL+0x4a>
	}

	if (i < 6 || !fields[1] || !fields[3])
 8001ba4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	f340 80bc 	ble.w	8001d26 <parse_GNGLL+0x202>
 8001bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80b7 	beq.w	8001d26 <parse_GNGLL+0x202>
 8001bb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80b2 	beq.w	8001d26 <parse_GNGLL+0x202>
		return;

	float raw_lat = atof(fields[1]);
 8001bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fa9e 	bl	8005108 <atof>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe ff78 	bl	8000ac8 <__aeabi_d2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	float raw_lon = atof(fields[3]);
 8001bde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fa90 	bl	8005108 <atof>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ff6a 	bl	8000ac8 <__aeabi_d2f>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	int lat_deg = (int) (raw_lat / 100);
 8001bfa:	494e      	ldr	r1, [pc, #312]	@ (8001d34 <parse_GNGLL+0x210>)
 8001bfc:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8001c00:	f7ff f974 	bl	8000eec <__aeabi_fdiv>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fa0c 	bl	8001024 <__aeabi_f2iz>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	float lat_min = raw_lat - (lat_deg * 100);
 8001c12:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001c16:	2264      	movs	r2, #100	@ 0x64
 8001c18:	fb02 f303 	mul.w	r3, r2, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f85d 	bl	8000cdc <__aeabi_i2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4619      	mov	r1, r3
 8001c26:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8001c2a:	f7fe ffa1 	bl	8000b70 <__aeabi_fsub>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	float lat_decimal = lat_deg + (lat_min / 60.0f);
 8001c34:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8001c38:	f7ff f850 	bl	8000cdc <__aeabi_i2f>
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	493e      	ldr	r1, [pc, #248]	@ (8001d38 <parse_GNGLL+0x214>)
 8001c40:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 8001c44:	f7ff f952 	bl	8000eec <__aeabi_fdiv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7fe ff91 	bl	8000b74 <__addsf3>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	int lon_deg = (int) (raw_lon / 100);
 8001c58:	4936      	ldr	r1, [pc, #216]	@ (8001d34 <parse_GNGLL+0x210>)
 8001c5a:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8001c5e:	f7ff f945 	bl	8000eec <__aeabi_fdiv>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f9dd 	bl	8001024 <__aeabi_f2iz>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	float lon_min = raw_lon - (lon_deg * 100);
 8001c70:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c74:	2264      	movs	r2, #100	@ 0x64
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f82e 	bl	8000cdc <__aeabi_i2f>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8001c88:	f7fe ff72 	bl	8000b70 <__aeabi_fsub>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	float lon_decimal = lon_deg + (lon_min / 60.0f);
 8001c92:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001c96:	f7ff f821 	bl	8000cdc <__aeabi_i2f>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4926      	ldr	r1, [pc, #152]	@ (8001d38 <parse_GNGLL+0x214>)
 8001c9e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8001ca2:	f7ff f923 	bl	8000eec <__aeabi_fdiv>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7fe ff62 	bl	8000b74 <__addsf3>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	snprintf(latitude, sizeof(latitude), "%.5f%s", lat_decimal, fields[2]);
 8001cb6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001cba:	f7fe fbb5 	bl	8000428 <__aeabi_f2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001cc6:	9102      	str	r1, [sp, #8]
 8001cc8:	e9cd 2300 	strd	r2, r3, [sp]
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d3c <parse_GNGLL+0x218>)
 8001cce:	2110      	movs	r1, #16
 8001cd0:	481b      	ldr	r0, [pc, #108]	@ (8001d40 <parse_GNGLL+0x21c>)
 8001cd2:	f004 fd3d 	bl	8006750 <sniprintf>
	snprintf(longitude, sizeof(longitude), "%.5f%s", lon_decimal, fields[4]);
 8001cd6:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001cda:	f7fe fba5 	bl	8000428 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001ce6:	9102      	str	r1, [sp, #8]
 8001ce8:	e9cd 2300 	strd	r2, r3, [sp]
 8001cec:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <parse_GNGLL+0x218>)
 8001cee:	2110      	movs	r1, #16
 8001cf0:	4814      	ldr	r0, [pc, #80]	@ (8001d44 <parse_GNGLL+0x220>)
 8001cf2:	f004 fd2d 	bl	8006750 <sniprintf>

	char result[128];
	snprintf(result, sizeof(result), "Latitude: %s\r\nLongitude: %s\r\n\r\n",
 8001cf6:	f107 0008 	add.w	r0, r7, #8
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <parse_GNGLL+0x220>)
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <parse_GNGLL+0x21c>)
 8001d00:	4a11      	ldr	r2, [pc, #68]	@ (8001d48 <parse_GNGLL+0x224>)
 8001d02:	2180      	movs	r1, #128	@ 0x80
 8001d04:	f004 fd24 	bl	8006750 <sniprintf>
			latitude, longitude);
	HAL_UART_Transmit(&huart1, (uint8_t*) result, strlen(result),
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fa1f 	bl	8000150 <strlen>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f107 0108 	add.w	r1, r7, #8
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <parse_GNGLL+0x228>)
 8001d20:	f002 fbd8 	bl	80044d4 <HAL_UART_Transmit>
 8001d24:	e000      	b.n	8001d28 <parse_GNGLL+0x204>
		return;
 8001d26:	bf00      	nop
	HAL_MAX_DELAY);
}
 8001d28:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	08009560 	.word	0x08009560
 8001d34:	42c80000 	.word	0x42c80000
 8001d38:	42700000 	.word	0x42700000
 8001d3c:	08009564 	.word	0x08009564
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000010 	.word	0x20000010
 8001d48:	0800956c 	.word	0x0800956c
 8001d4c:	20000288 	.word	0x20000288

08001d50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) { // ESP32 BP
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e1c <HAL_UART_RxCpltCallback+0xcc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d12d      	bne.n	8001dbe <HAL_UART_RxCpltCallback+0x6e>
		// Simple state machine
		if (bp_index == 0) {
 8001d62:	4b2f      	ldr	r3, [pc, #188]	@ (8001e20 <HAL_UART_RxCpltCallback+0xd0>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_UART_RxCpltCallback+0x3a>
			if (bp_rx_byte == BP_HEADER) {
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <HAL_UART_RxCpltCallback+0xd4>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2baa      	cmp	r3, #170	@ 0xaa
 8001d70:	d120      	bne.n	8001db4 <HAL_UART_RxCpltCallback+0x64>
				bp_packet[bp_index++] = bp_rx_byte;
 8001d72:	4b2b      	ldr	r3, [pc, #172]	@ (8001e20 <HAL_UART_RxCpltCallback+0xd0>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	b2d1      	uxtb	r1, r2
 8001d7a:	4a29      	ldr	r2, [pc, #164]	@ (8001e20 <HAL_UART_RxCpltCallback+0xd0>)
 8001d7c:	7011      	strb	r1, [r2, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b28      	ldr	r3, [pc, #160]	@ (8001e24 <HAL_UART_RxCpltCallback+0xd4>)
 8001d82:	7819      	ldrb	r1, [r3, #0]
 8001d84:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <HAL_UART_RxCpltCallback+0xd8>)
 8001d86:	5499      	strb	r1, [r3, r2]
 8001d88:	e014      	b.n	8001db4 <HAL_UART_RxCpltCallback+0x64>
			}
		} else {
			bp_packet[bp_index++] = bp_rx_byte;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	@ (8001e20 <HAL_UART_RxCpltCallback+0xd0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	b2d1      	uxtb	r1, r2
 8001d92:	4a23      	ldr	r2, [pc, #140]	@ (8001e20 <HAL_UART_RxCpltCallback+0xd0>)
 8001d94:	7011      	strb	r1, [r2, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <HAL_UART_RxCpltCallback+0xd4>)
 8001d9a:	7819      	ldrb	r1, [r3, #0]
 8001d9c:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <HAL_UART_RxCpltCallback+0xd8>)
 8001d9e:	5499      	strb	r1, [r3, r2]
			if (bp_index >= 4) { // header + 3 bytes
 8001da0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <HAL_UART_RxCpltCallback+0xd0>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d905      	bls.n	8001db4 <HAL_UART_RxCpltCallback+0x64>
				bp_index = 0;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <HAL_UART_RxCpltCallback+0xd0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
				bp_ready = 1; // packet complete
 8001dae:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <HAL_UART_RxCpltCallback+0xdc>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart1, &bp_rx_byte, 1); // restart reception
 8001db4:	2201      	movs	r2, #1
 8001db6:	491b      	ldr	r1, [pc, #108]	@ (8001e24 <HAL_UART_RxCpltCallback+0xd4>)
 8001db8:	481d      	ldr	r0, [pc, #116]	@ (8001e30 <HAL_UART_RxCpltCallback+0xe0>)
 8001dba:	f002 fc16 	bl	80045ea <HAL_UART_Receive_IT>
	}

	if (huart->Instance == USART2) { // GPS
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e34 <HAL_UART_RxCpltCallback+0xe4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d124      	bne.n	8001e12 <HAL_UART_RxCpltCallback+0xc2>
		if (rx_index < sizeof(gps_buffer) - 1) {
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <HAL_UART_RxCpltCallback+0xe8>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b7e      	cmp	r3, #126	@ 0x7e
 8001dce:	d81b      	bhi.n	8001e08 <HAL_UART_RxCpltCallback+0xb8>
			if (rx_data == '\n') {
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <HAL_UART_RxCpltCallback+0xec>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b0a      	cmp	r3, #10
 8001dd6:	d10c      	bne.n	8001df2 <HAL_UART_RxCpltCallback+0xa2>
				gps_buffer[rx_index] = '\0';
 8001dd8:	4b17      	ldr	r3, [pc, #92]	@ (8001e38 <HAL_UART_RxCpltCallback+0xe8>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <HAL_UART_RxCpltCallback+0xf0>)
 8001de0:	2100      	movs	r1, #0
 8001de2:	5499      	strb	r1, [r3, r2]
				gps_ready = 1;
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_UART_RxCpltCallback+0xf4>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
				rx_index = 0;
 8001dea:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <HAL_UART_RxCpltCallback+0xe8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e00a      	b.n	8001e08 <HAL_UART_RxCpltCallback+0xb8>
			} else {
				gps_buffer[rx_index++] = rx_data;
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_UART_RxCpltCallback+0xe8>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	b2d1      	uxtb	r1, r2
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001e38 <HAL_UART_RxCpltCallback+0xe8>)
 8001dfc:	7011      	strb	r1, [r2, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_UART_RxCpltCallback+0xec>)
 8001e02:	7819      	ldrb	r1, [r3, #0]
 8001e04:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <HAL_UART_RxCpltCallback+0xf0>)
 8001e06:	5499      	strb	r1, [r3, r2]
			}
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <HAL_UART_RxCpltCallback+0xec>)
 8001e0c:	480e      	ldr	r0, [pc, #56]	@ (8001e48 <HAL_UART_RxCpltCallback+0xf8>)
 8001e0e:	f002 fbec 	bl	80045ea <HAL_UART_Receive_IT>
	}
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	200007fc 	.word	0x200007fc
 8001e24:	200007f4 	.word	0x200007f4
 8001e28:	200007f8 	.word	0x200007f8
 8001e2c:	200007fd 	.word	0x200007fd
 8001e30:	20000288 	.word	0x20000288
 8001e34:	40004400 	.word	0x40004400
 8001e38:	200005f2 	.word	0x200005f2
 8001e3c:	200005f1 	.word	0x200005f1
 8001e40:	20000570 	.word	0x20000570
 8001e44:	200005f0 	.word	0x200005f0
 8001e48:	200002d0 	.word	0x200002d0

08001e4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <Error_Handler+0x8>

08001e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_MspInit+0x5c>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <HAL_MspInit+0x5c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6193      	str	r3, [r2, #24]
 8001e6a:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_MspInit+0x5c>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_MspInit+0x5c>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <HAL_MspInit+0x5c>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <HAL_MspInit+0x5c>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_MspInit+0x60>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_MspInit+0x60>)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000

08001ebc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a14      	ldr	r2, [pc, #80]	@ (8001f28 <HAL_ADC_MspInit+0x6c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d121      	bne.n	8001f20 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_ADC_MspInit+0x70>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <HAL_ADC_MspInit+0x70>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <HAL_ADC_MspInit+0x70>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <HAL_ADC_MspInit+0x70>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8001f2c <HAL_ADC_MspInit+0x70>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <HAL_ADC_MspInit+0x70>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f10:	2303      	movs	r3, #3
 8001f12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4805      	ldr	r0, [pc, #20]	@ (8001f30 <HAL_ADC_MspInit+0x74>)
 8001f1c:	f001 f896 	bl	800304c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f20:	bf00      	nop
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40012400 	.word	0x40012400
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010800 	.word	0x40010800

08001f34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f44:	d10b      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_TIM_Base_MspInit+0x34>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a07      	ldr	r2, [pc, #28]	@ (8001f68 <HAL_TIM_Base_MspInit+0x34>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	61d3      	str	r3, [r2, #28]
 8001f52:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_TIM_Base_MspInit+0x34>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	@ 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a5b      	ldr	r2, [pc, #364]	@ (80020f4 <HAL_UART_MspInit+0x188>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d13a      	bne.n	8002002 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a59      	ldr	r2, [pc, #356]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8001f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b57      	ldr	r3, [pc, #348]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa4:	4b54      	ldr	r3, [pc, #336]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a53      	ldr	r2, [pc, #332]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b51      	ldr	r3, [pc, #324]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	4619      	mov	r1, r3
 8001fd0:	484a      	ldr	r0, [pc, #296]	@ (80020fc <HAL_UART_MspInit+0x190>)
 8001fd2:	f001 f83b 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 0320 	add.w	r3, r7, #32
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4844      	ldr	r0, [pc, #272]	@ (80020fc <HAL_UART_MspInit+0x190>)
 8001fec:	f001 f82e 	bl	800304c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2025      	movs	r0, #37	@ 0x25
 8001ff6:	f000 ff40 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ffa:	2025      	movs	r0, #37	@ 0x25
 8001ffc:	f000 ff59 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002000:	e074      	b.n	80020ec <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a3e      	ldr	r2, [pc, #248]	@ (8002100 <HAL_UART_MspInit+0x194>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d138      	bne.n	800207e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800200c:	4b3a      	ldr	r3, [pc, #232]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	4a39      	ldr	r2, [pc, #228]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8002012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002016:	61d3      	str	r3, [r2, #28]
 8002018:	4b37      	ldr	r3, [pc, #220]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	4b34      	ldr	r3, [pc, #208]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a33      	ldr	r2, [pc, #204]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b31      	ldr	r3, [pc, #196]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800203c:	2304      	movs	r3, #4
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0320 	add.w	r3, r7, #32
 800204c:	4619      	mov	r1, r3
 800204e:	482b      	ldr	r0, [pc, #172]	@ (80020fc <HAL_UART_MspInit+0x190>)
 8002050:	f000 fffc 	bl	800304c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002054:	2308      	movs	r3, #8
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	4619      	mov	r1, r3
 8002066:	4825      	ldr	r0, [pc, #148]	@ (80020fc <HAL_UART_MspInit+0x190>)
 8002068:	f000 fff0 	bl	800304c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	2026      	movs	r0, #38	@ 0x26
 8002072:	f000 ff02 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002076:	2026      	movs	r0, #38	@ 0x26
 8002078:	f000 ff1b 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
}
 800207c:	e036      	b.n	80020ec <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a20      	ldr	r2, [pc, #128]	@ (8002104 <HAL_UART_MspInit+0x198>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d131      	bne.n	80020ec <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002088:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	4a1a      	ldr	r2, [pc, #104]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 800208e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002092:	61d3      	str	r3, [r2, #28]
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 80020a6:	f043 0308 	orr.w	r3, r3, #8
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_UART_MspInit+0x18c>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 0320 	add.w	r3, r7, #32
 80020ca:	4619      	mov	r1, r3
 80020cc:	480e      	ldr	r0, [pc, #56]	@ (8002108 <HAL_UART_MspInit+0x19c>)
 80020ce:	f000 ffbd 	bl	800304c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 0320 	add.w	r3, r7, #32
 80020e4:	4619      	mov	r1, r3
 80020e6:	4808      	ldr	r0, [pc, #32]	@ (8002108 <HAL_UART_MspInit+0x19c>)
 80020e8:	f000 ffb0 	bl	800304c <HAL_GPIO_Init>
}
 80020ec:	bf00      	nop
 80020ee:	3730      	adds	r7, #48	@ 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40013800 	.word	0x40013800
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010800 	.word	0x40010800
 8002100:	40004400 	.word	0x40004400
 8002104:	40004800 	.word	0x40004800
 8002108:	40010c00 	.word	0x40010c00

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <NMI_Handler+0x4>

08002114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <MemManage_Handler+0x4>

08002124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <UsageFault_Handler+0x4>

08002134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215c:	f000 f94a 	bl	80023f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <USART1_IRQHandler+0x10>)
 800216a:	f002 fa63 	bl	8004634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000288 	.word	0x20000288

08002178 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <USART2_IRQHandler+0x10>)
 800217e:	f002 fa59 	bl	8004634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200002d0 	.word	0x200002d0

0800218c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return 1;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <_kill>:

int _kill(int pid, int sig)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021a4:	f004 fc30 	bl	8006a08 <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2216      	movs	r2, #22
 80021ac:	601a      	str	r2, [r3, #0]
  return -1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_exit>:

void _exit (int status)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021c2:	f04f 31ff 	mov.w	r1, #4294967295
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffe7 	bl	800219a <_kill>
  while (1) {}    /* Make sure we hang here */
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <_exit+0x12>

080021d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	e00a      	b.n	80021f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021e2:	f3af 8000 	nop.w
 80021e6:	4601      	mov	r1, r0
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	60ba      	str	r2, [r7, #8]
 80021ee:	b2ca      	uxtb	r2, r1
 80021f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dbf0      	blt.n	80021e2 <_read+0x12>
  }

  return len;
 8002200:	687b      	ldr	r3, [r7, #4]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e009      	b.n	8002230 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	60ba      	str	r2, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	dbf1      	blt.n	800221c <_write+0x12>
  }
  return len;
 8002238:	687b      	ldr	r3, [r7, #4]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_close>:

int _close(int file)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002268:	605a      	str	r2, [r3, #4]
  return 0;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <_isatty>:

int _isatty(int file)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
	...

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	@ (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f004 fb98 	bl	8006a08 <__errno>
 80022d8:	4603      	mov	r3, r0
 80022da:	220c      	movs	r2, #12
 80022dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20005000 	.word	0x20005000
 8002304:	00000400 	.word	0x00000400
 8002308:	20000804 	.word	0x20000804
 800230c:	20000958 	.word	0x20000958

08002310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800231c:	f7ff fff8 	bl	8002310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002320:	480b      	ldr	r0, [pc, #44]	@ (8002350 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002322:	490c      	ldr	r1, [pc, #48]	@ (8002354 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002324:	4a0c      	ldr	r2, [pc, #48]	@ (8002358 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a09      	ldr	r2, [pc, #36]	@ (800235c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002338:	4c09      	ldr	r4, [pc, #36]	@ (8002360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002346:	f004 fb65 	bl	8006a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800234a:	f7ff f859 	bl	8001400 <main>
  bx lr
 800234e:	4770      	bx	lr
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002358:	08009a5c 	.word	0x08009a5c
  ldr r2, =_sbss
 800235c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002360:	20000958 	.word	0x20000958

08002364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC1_2_IRQHandler>
	...

08002368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_Init+0x28>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <HAL_Init+0x28>)
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 fd73 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237e:	200f      	movs	r0, #15
 8002380:	f000 f808 	bl	8002394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002384:	f7ff fd68 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000

08002394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_InitTick+0x54>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <HAL_InitTick+0x58>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fd8b 	bl	8002ece <HAL_SYSTICK_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00e      	b.n	80023e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d80a      	bhi.n	80023de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c8:	2200      	movs	r2, #0
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f000 fd53 	bl	8002e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d4:	4a06      	ldr	r2, [pc, #24]	@ (80023f0 <HAL_InitTick+0x5c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000020 	.word	0x20000020
 80023ec:	20000028 	.word	0x20000028
 80023f0:	20000024 	.word	0x20000024

080023f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_IncTick+0x1c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_IncTick+0x20>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a03      	ldr	r2, [pc, #12]	@ (8002414 <HAL_IncTick+0x20>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000028 	.word	0x20000028
 8002414:	20000808 	.word	0x20000808

08002418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b02      	ldr	r3, [pc, #8]	@ (8002428 <HAL_GetTick+0x10>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	20000808 	.word	0x20000808

0800242c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff fff0 	bl	8002418 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d005      	beq.n	8002452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_Delay+0x44>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002452:	bf00      	nop
 8002454:	f7ff ffe0 	bl	8002418 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d8f7      	bhi.n	8002454 <HAL_Delay+0x28>
  {
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000028 	.word	0x20000028

08002474 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0be      	b.n	8002614 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fd02 	bl	8001ebc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fbc5 	bl	8002c48 <ADC_ConversionStop_Disable>
 80024be:	4603      	mov	r3, r0
 80024c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 8099 	bne.w	8002602 <HAL_ADC_Init+0x18e>
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 8095 	bne.w	8002602 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024e0:	f023 0302 	bic.w	r3, r3, #2
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7b1b      	ldrb	r3, [r3, #12]
 80024fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	4313      	orrs	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250c:	d003      	beq.n	8002516 <HAL_ADC_Init+0xa2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_ADC_Init+0xa8>
 8002516:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800251a:	e000      	b.n	800251e <HAL_ADC_Init+0xaa>
 800251c:	2300      	movs	r3, #0
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7d1b      	ldrb	r3, [r3, #20]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d119      	bne.n	8002560 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	3b01      	subs	r3, #1
 800253a:	035a      	lsls	r2, r3, #13
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	e00b      	b.n	8002560 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	4b28      	ldr	r3, [pc, #160]	@ (800261c <HAL_ADC_Init+0x1a8>)
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	430b      	orrs	r3, r1
 8002586:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002590:	d003      	beq.n	800259a <HAL_ADC_Init+0x126>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d104      	bne.n	80025a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	3b01      	subs	r3, #1
 80025a0:	051b      	lsls	r3, r3, #20
 80025a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_ADC_Init+0x1ac>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d10b      	bne.n	80025e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d2:	f023 0303 	bic.w	r3, r3, #3
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025de:	e018      	b.n	8002612 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	f023 0312 	bic.w	r3, r3, #18
 80025e8:	f043 0210 	orr.w	r2, r3, #16
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002600:	e007      	b.n	8002612 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	f043 0210 	orr.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002612:	7dfb      	ldrb	r3, [r7, #23]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	ffe1f7fd 	.word	0xffe1f7fd
 8002620:	ff1f0efe 	.word	0xff1f0efe

08002624 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_ADC_Start+0x1a>
 800263a:	2302      	movs	r3, #2
 800263c:	e098      	b.n	8002770 <HAL_ADC_Start+0x14c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 faa4 	bl	8002b94 <ADC_Enable>
 800264c:	4603      	mov	r3, r0
 800264e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 8087 	bne.w	8002766 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a41      	ldr	r2, [pc, #260]	@ (8002778 <HAL_ADC_Start+0x154>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d105      	bne.n	8002682 <HAL_ADC_Start+0x5e>
 8002676:	4b41      	ldr	r3, [pc, #260]	@ (800277c <HAL_ADC_Start+0x158>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002686:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d026      	beq.n	80026ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ac:	e01d      	b.n	80026ea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2f      	ldr	r2, [pc, #188]	@ (800277c <HAL_ADC_Start+0x158>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d004      	beq.n	80026ce <HAL_ADC_Start+0xaa>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002778 <HAL_ADC_Start+0x154>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10d      	bne.n	80026ea <HAL_ADC_Start+0xc6>
 80026ce:	4b2b      	ldr	r3, [pc, #172]	@ (800277c <HAL_ADC_Start+0x158>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	f023 0206 	bic.w	r2, r3, #6
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002702:	e002      	b.n	800270a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f06f 0202 	mvn.w	r2, #2
 800271a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002726:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800272a:	d113      	bne.n	8002754 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002730:	4a11      	ldr	r2, [pc, #68]	@ (8002778 <HAL_ADC_Start+0x154>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d105      	bne.n	8002742 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002736:	4b11      	ldr	r3, [pc, #68]	@ (800277c <HAL_ADC_Start+0x158>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	e00c      	b.n	800276e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	e003      	b.n	800276e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40012800 	.word	0x40012800
 800277c:	40012400 	.word	0x40012400

08002780 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002796:	f7ff fe3f 	bl	8002418 <HAL_GetTick>
 800279a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e0d3      	b.n	800296a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d131      	bne.n	8002834 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d12a      	bne.n	8002834 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027de:	e021      	b.n	8002824 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d01d      	beq.n	8002824 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_ADC_PollForConversion+0x7e>
 80027ee:	f7ff fe13 	bl	8002418 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d212      	bcs.n	8002824 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	f043 0204 	orr.w	r2, r3, #4
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0a2      	b.n	800296a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0d6      	beq.n	80027e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002832:	e070      	b.n	8002916 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002834:	4b4f      	ldr	r3, [pc, #316]	@ (8002974 <HAL_ADC_PollForConversion+0x1f4>)
 8002836:	681c      	ldr	r4, [r3, #0]
 8002838:	2002      	movs	r0, #2
 800283a:	f001 fa81 	bl	8003d40 <HAL_RCCEx_GetPeriphCLKFreq>
 800283e:	4603      	mov	r3, r0
 8002840:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6919      	ldr	r1, [r3, #16]
 800284a:	4b4b      	ldr	r3, [pc, #300]	@ (8002978 <HAL_ADC_PollForConversion+0x1f8>)
 800284c:	400b      	ands	r3, r1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d118      	bne.n	8002884 <HAL_ADC_PollForConversion+0x104>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68d9      	ldr	r1, [r3, #12]
 8002858:	4b48      	ldr	r3, [pc, #288]	@ (800297c <HAL_ADC_PollForConversion+0x1fc>)
 800285a:	400b      	ands	r3, r1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_ADC_PollForConversion+0x104>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6919      	ldr	r1, [r3, #16]
 8002866:	4b46      	ldr	r3, [pc, #280]	@ (8002980 <HAL_ADC_PollForConversion+0x200>)
 8002868:	400b      	ands	r3, r1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <HAL_ADC_PollForConversion+0x100>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68d9      	ldr	r1, [r3, #12]
 8002874:	4b43      	ldr	r3, [pc, #268]	@ (8002984 <HAL_ADC_PollForConversion+0x204>)
 8002876:	400b      	ands	r3, r1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_PollForConversion+0x100>
 800287c:	2314      	movs	r3, #20
 800287e:	e020      	b.n	80028c2 <HAL_ADC_PollForConversion+0x142>
 8002880:	2329      	movs	r3, #41	@ 0x29
 8002882:	e01e      	b.n	80028c2 <HAL_ADC_PollForConversion+0x142>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6919      	ldr	r1, [r3, #16]
 800288a:	4b3d      	ldr	r3, [pc, #244]	@ (8002980 <HAL_ADC_PollForConversion+0x200>)
 800288c:	400b      	ands	r3, r1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_ADC_PollForConversion+0x120>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68d9      	ldr	r1, [r3, #12]
 8002898:	4b3a      	ldr	r3, [pc, #232]	@ (8002984 <HAL_ADC_PollForConversion+0x204>)
 800289a:	400b      	ands	r3, r1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00d      	beq.n	80028bc <HAL_ADC_PollForConversion+0x13c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6919      	ldr	r1, [r3, #16]
 80028a6:	4b38      	ldr	r3, [pc, #224]	@ (8002988 <HAL_ADC_PollForConversion+0x208>)
 80028a8:	400b      	ands	r3, r1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <HAL_ADC_PollForConversion+0x140>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68d9      	ldr	r1, [r3, #12]
 80028b4:	4b34      	ldr	r3, [pc, #208]	@ (8002988 <HAL_ADC_PollForConversion+0x208>)
 80028b6:	400b      	ands	r3, r1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_PollForConversion+0x140>
 80028bc:	2354      	movs	r3, #84	@ 0x54
 80028be:	e000      	b.n	80028c2 <HAL_ADC_PollForConversion+0x142>
 80028c0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028c8:	e021      	b.n	800290e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d01a      	beq.n	8002908 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_ADC_PollForConversion+0x168>
 80028d8:	f7ff fd9e 	bl	8002418 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d20f      	bcs.n	8002908 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d90b      	bls.n	8002908 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e030      	b.n	800296a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3301      	adds	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	429a      	cmp	r2, r3
 8002914:	d8d9      	bhi.n	80028ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f06f 0212 	mvn.w	r2, #18
 800291e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002936:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800293a:	d115      	bne.n	8002968 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002940:	2b00      	cmp	r3, #0
 8002942:	d111      	bne.n	8002968 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	20000020 	.word	0x20000020
 8002978:	24924924 	.word	0x24924924
 800297c:	00924924 	.word	0x00924924
 8002980:	12492492 	.word	0x12492492
 8002984:	00492492 	.word	0x00492492
 8002988:	00249249 	.word	0x00249249

0800298c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x20>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e0dc      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1da>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b06      	cmp	r3, #6
 80029d2:	d81c      	bhi.n	8002a0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	3b05      	subs	r3, #5
 80029e6:	221f      	movs	r2, #31
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	4019      	ands	r1, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	3b05      	subs	r3, #5
 8002a00:	fa00 f203 	lsl.w	r2, r0, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a0c:	e03c      	b.n	8002a88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d81c      	bhi.n	8002a50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	3b23      	subs	r3, #35	@ 0x23
 8002a28:	221f      	movs	r2, #31
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	4019      	ands	r1, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b23      	subs	r3, #35	@ 0x23
 8002a42:	fa00 f203 	lsl.w	r2, r0, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a4e:	e01b      	b.n	8002a88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b41      	subs	r3, #65	@ 0x41
 8002a62:	221f      	movs	r2, #31
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	4019      	ands	r1, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b41      	subs	r3, #65	@ 0x41
 8002a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b09      	cmp	r3, #9
 8002a8e:	d91c      	bls.n	8002aca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68d9      	ldr	r1, [r3, #12]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b1e      	subs	r3, #30
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	4019      	ands	r1, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	6898      	ldr	r0, [r3, #8]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b1e      	subs	r3, #30
 8002abc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	e019      	b.n	8002afe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6919      	ldr	r1, [r3, #16]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	2207      	movs	r2, #7
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	4019      	ands	r1, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6898      	ldr	r0, [r3, #8]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	fa00 f203 	lsl.w	r2, r0, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	d003      	beq.n	8002b0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b0a:	2b11      	cmp	r3, #17
 8002b0c:	d132      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d125      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d126      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d11a      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b3e:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <HAL_ADC_ConfigChannel+0x1e8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a13      	ldr	r2, [pc, #76]	@ (8002b90 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	0c9a      	lsrs	r2, r3, #18
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b54:	e002      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f9      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x1b2>
 8002b62:	e007      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40012400 	.word	0x40012400
 8002b8c:	20000020 	.word	0x20000020
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d040      	beq.n	8002c34 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c40 <ADC_Enable+0xac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c44 <ADC_Enable+0xb0>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	0c9b      	lsrs	r3, r3, #18
 8002bce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bd0:	e002      	b.n	8002bd8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bde:	f7ff fc1b 	bl	8002418 <HAL_GetTick>
 8002be2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002be4:	e01f      	b.n	8002c26 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002be6:	f7ff fc17 	bl	8002418 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d918      	bls.n	8002c26 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d011      	beq.n	8002c26 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e007      	b.n	8002c36 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d1d8      	bne.n	8002be6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000020 	.word	0x20000020
 8002c44:	431bde83 	.word	0x431bde83

08002c48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d12e      	bne.n	8002cc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c72:	f7ff fbd1 	bl	8002418 <HAL_GetTick>
 8002c76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c78:	e01b      	b.n	8002cb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c7a:	f7ff fbcd 	bl	8002418 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d914      	bls.n	8002cb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d10d      	bne.n	8002cb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	f043 0210 	orr.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d0dc      	beq.n	8002c7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4906      	ldr	r1, [pc, #24]	@ (8002d64 <__NVIC_EnableIRQ+0x34>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	@ (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	@ (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	@ 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
         );
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	@ 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f7ff ff90 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff2d 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff42 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff90 	bl	8002dbc <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5f 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff35 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa2 	bl	8002e20 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d008      	beq.n	8002f10 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2204      	movs	r2, #4
 8002f02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e020      	b.n	8002f52 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 020e 	bic.w	r2, r2, #14
 8002f1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f38:	2101      	movs	r1, #1
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d005      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2204      	movs	r2, #4
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	e051      	b.n	8003024 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 020e 	bic.w	r2, r2, #14
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a22      	ldr	r2, [pc, #136]	@ (8003030 <HAL_DMA_Abort_IT+0xd4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d029      	beq.n	8002ffe <HAL_DMA_Abort_IT+0xa2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a21      	ldr	r2, [pc, #132]	@ (8003034 <HAL_DMA_Abort_IT+0xd8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_Abort_IT+0x9e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_DMA_Abort_IT+0xdc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_Abort_IT+0x98>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_DMA_Abort_IT+0xe0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d012      	beq.n	8002fee <HAL_DMA_Abort_IT+0x92>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003040 <HAL_DMA_Abort_IT+0xe4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_DMA_Abort_IT+0x8c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <HAL_DMA_Abort_IT+0xe8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d102      	bne.n	8002fe2 <HAL_DMA_Abort_IT+0x86>
 8002fdc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002fe0:	e00e      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002fe2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fe6:	e00b      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002fe8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fec:	e008      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ff2:	e005      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002ff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ff8:	e002      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	e000      	b.n	8003000 <HAL_DMA_Abort_IT+0xa4>
 8002ffe:	2301      	movs	r3, #1
 8003000:	4a11      	ldr	r2, [pc, #68]	@ (8003048 <HAL_DMA_Abort_IT+0xec>)
 8003002:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
    } 
  }
  return status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40020008 	.word	0x40020008
 8003034:	4002001c 	.word	0x4002001c
 8003038:	40020030 	.word	0x40020030
 800303c:	40020044 	.word	0x40020044
 8003040:	40020058 	.word	0x40020058
 8003044:	4002006c 	.word	0x4002006c
 8003048:	40020000 	.word	0x40020000

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b08b      	sub	sp, #44	@ 0x2c
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305e:	e169      	b.n	8003334 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003060:	2201      	movs	r2, #1
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	429a      	cmp	r2, r3
 800307a:	f040 8158 	bne.w	800332e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a9a      	ldr	r2, [pc, #616]	@ (80032ec <HAL_GPIO_Init+0x2a0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d05e      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 8003088:	4a98      	ldr	r2, [pc, #608]	@ (80032ec <HAL_GPIO_Init+0x2a0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d875      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 800308e:	4a98      	ldr	r2, [pc, #608]	@ (80032f0 <HAL_GPIO_Init+0x2a4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d058      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 8003094:	4a96      	ldr	r2, [pc, #600]	@ (80032f0 <HAL_GPIO_Init+0x2a4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d86f      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 800309a:	4a96      	ldr	r2, [pc, #600]	@ (80032f4 <HAL_GPIO_Init+0x2a8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d052      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 80030a0:	4a94      	ldr	r2, [pc, #592]	@ (80032f4 <HAL_GPIO_Init+0x2a8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d869      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030a6:	4a94      	ldr	r2, [pc, #592]	@ (80032f8 <HAL_GPIO_Init+0x2ac>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d04c      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 80030ac:	4a92      	ldr	r2, [pc, #584]	@ (80032f8 <HAL_GPIO_Init+0x2ac>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d863      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030b2:	4a92      	ldr	r2, [pc, #584]	@ (80032fc <HAL_GPIO_Init+0x2b0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d046      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 80030b8:	4a90      	ldr	r2, [pc, #576]	@ (80032fc <HAL_GPIO_Init+0x2b0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d85d      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030be:	2b12      	cmp	r3, #18
 80030c0:	d82a      	bhi.n	8003118 <HAL_GPIO_Init+0xcc>
 80030c2:	2b12      	cmp	r3, #18
 80030c4:	d859      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030c6:	a201      	add	r2, pc, #4	@ (adr r2, 80030cc <HAL_GPIO_Init+0x80>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	08003147 	.word	0x08003147
 80030d0:	08003121 	.word	0x08003121
 80030d4:	08003133 	.word	0x08003133
 80030d8:	08003175 	.word	0x08003175
 80030dc:	0800317b 	.word	0x0800317b
 80030e0:	0800317b 	.word	0x0800317b
 80030e4:	0800317b 	.word	0x0800317b
 80030e8:	0800317b 	.word	0x0800317b
 80030ec:	0800317b 	.word	0x0800317b
 80030f0:	0800317b 	.word	0x0800317b
 80030f4:	0800317b 	.word	0x0800317b
 80030f8:	0800317b 	.word	0x0800317b
 80030fc:	0800317b 	.word	0x0800317b
 8003100:	0800317b 	.word	0x0800317b
 8003104:	0800317b 	.word	0x0800317b
 8003108:	0800317b 	.word	0x0800317b
 800310c:	0800317b 	.word	0x0800317b
 8003110:	08003129 	.word	0x08003129
 8003114:	0800313d 	.word	0x0800313d
 8003118:	4a79      	ldr	r2, [pc, #484]	@ (8003300 <HAL_GPIO_Init+0x2b4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800311e:	e02c      	b.n	800317a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	623b      	str	r3, [r7, #32]
          break;
 8003126:	e029      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	3304      	adds	r3, #4
 800312e:	623b      	str	r3, [r7, #32]
          break;
 8003130:	e024      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	3308      	adds	r3, #8
 8003138:	623b      	str	r3, [r7, #32]
          break;
 800313a:	e01f      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	330c      	adds	r3, #12
 8003142:	623b      	str	r3, [r7, #32]
          break;
 8003144:	e01a      	b.n	800317c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800314e:	2304      	movs	r3, #4
 8003150:	623b      	str	r3, [r7, #32]
          break;
 8003152:	e013      	b.n	800317c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800315c:	2308      	movs	r3, #8
 800315e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	611a      	str	r2, [r3, #16]
          break;
 8003166:	e009      	b.n	800317c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003168:	2308      	movs	r3, #8
 800316a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	615a      	str	r2, [r3, #20]
          break;
 8003172:	e003      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
          break;
 8003178:	e000      	b.n	800317c <HAL_GPIO_Init+0x130>
          break;
 800317a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2bff      	cmp	r3, #255	@ 0xff
 8003180:	d801      	bhi.n	8003186 <HAL_GPIO_Init+0x13a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	e001      	b.n	800318a <HAL_GPIO_Init+0x13e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2bff      	cmp	r3, #255	@ 0xff
 8003190:	d802      	bhi.n	8003198 <HAL_GPIO_Init+0x14c>
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	e002      	b.n	800319e <HAL_GPIO_Init+0x152>
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	3b08      	subs	r3, #8
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	210f      	movs	r1, #15
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	6a39      	ldr	r1, [r7, #32]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	431a      	orrs	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80b1 	beq.w	800332e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003304 <HAL_GPIO_Init+0x2b8>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003304 <HAL_GPIO_Init+0x2b8>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003304 <HAL_GPIO_Init+0x2b8>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031e4:	4a48      	ldr	r2, [pc, #288]	@ (8003308 <HAL_GPIO_Init+0x2bc>)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	3302      	adds	r3, #2
 80031ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a40      	ldr	r2, [pc, #256]	@ (800330c <HAL_GPIO_Init+0x2c0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_GPIO_Init+0x1ec>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a3f      	ldr	r2, [pc, #252]	@ (8003310 <HAL_GPIO_Init+0x2c4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00d      	beq.n	8003234 <HAL_GPIO_Init+0x1e8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3e      	ldr	r2, [pc, #248]	@ (8003314 <HAL_GPIO_Init+0x2c8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <HAL_GPIO_Init+0x1e4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3d      	ldr	r2, [pc, #244]	@ (8003318 <HAL_GPIO_Init+0x2cc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_GPIO_Init+0x1e0>
 8003228:	2303      	movs	r3, #3
 800322a:	e006      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 800322c:	2304      	movs	r3, #4
 800322e:	e004      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 8003230:	2302      	movs	r3, #2
 8003232:	e002      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 8003238:	2300      	movs	r3, #0
 800323a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323c:	f002 0203 	and.w	r2, r2, #3
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4093      	lsls	r3, r2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800324a:	492f      	ldr	r1, [pc, #188]	@ (8003308 <HAL_GPIO_Init+0x2bc>)
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	089b      	lsrs	r3, r3, #2
 8003250:	3302      	adds	r3, #2
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d006      	beq.n	8003272 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003264:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	492c      	ldr	r1, [pc, #176]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	608b      	str	r3, [r1, #8]
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003272:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	43db      	mvns	r3, r3
 800327a:	4928      	ldr	r1, [pc, #160]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 800327c:	4013      	ands	r3, r2
 800327e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d006      	beq.n	800329a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800328c:	4b23      	ldr	r3, [pc, #140]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4922      	ldr	r1, [pc, #136]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	60cb      	str	r3, [r1, #12]
 8003298:	e006      	b.n	80032a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800329a:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	491e      	ldr	r1, [pc, #120]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032b4:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4918      	ldr	r1, [pc, #96]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032c2:	4b16      	ldr	r3, [pc, #88]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4914      	ldr	r1, [pc, #80]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d021      	beq.n	8003320 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032dc:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	490e      	ldr	r1, [pc, #56]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	e021      	b.n	800332e <HAL_GPIO_Init+0x2e2>
 80032ea:	bf00      	nop
 80032ec:	10320000 	.word	0x10320000
 80032f0:	10310000 	.word	0x10310000
 80032f4:	10220000 	.word	0x10220000
 80032f8:	10210000 	.word	0x10210000
 80032fc:	10120000 	.word	0x10120000
 8003300:	10110000 	.word	0x10110000
 8003304:	40021000 	.word	0x40021000
 8003308:	40010000 	.word	0x40010000
 800330c:	40010800 	.word	0x40010800
 8003310:	40010c00 	.word	0x40010c00
 8003314:	40011000 	.word	0x40011000
 8003318:	40011400 	.word	0x40011400
 800331c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_GPIO_Init+0x304>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	43db      	mvns	r3, r3
 8003328:	4909      	ldr	r1, [pc, #36]	@ (8003350 <HAL_GPIO_Init+0x304>)
 800332a:	4013      	ands	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	3301      	adds	r3, #1
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	fa22 f303 	lsr.w	r3, r2, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	f47f ae8e 	bne.w	8003060 <HAL_GPIO_Init+0x14>
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	372c      	adds	r7, #44	@ 0x2c
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40010400 	.word	0x40010400

08003354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e001      	b.n	8003376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	807b      	strh	r3, [r7, #2]
 800338e:	4613      	mov	r3, r2
 8003390:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003392:	787b      	ldrb	r3, [r7, #1]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800339e:	e003      	b.n	80033a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	041a      	lsls	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	611a      	str	r2, [r3, #16]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e272      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8087 	beq.w	80034e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d4:	4b92      	ldr	r3, [pc, #584]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d00c      	beq.n	80033fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d112      	bne.n	8003412 <HAL_RCC_OscConfig+0x5e>
 80033ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f8:	d10b      	bne.n	8003412 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fa:	4b89      	ldr	r3, [pc, #548]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d06c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x12c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d168      	bne.n	80034e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e24c      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x76>
 800341c:	4b80      	ldr	r3, [pc, #512]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a7f      	ldr	r2, [pc, #508]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	e02e      	b.n	8003488 <HAL_RCC_OscConfig+0xd4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x98>
 8003432:	4b7b      	ldr	r3, [pc, #492]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7a      	ldr	r2, [pc, #488]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b78      	ldr	r3, [pc, #480]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a77      	ldr	r2, [pc, #476]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003444:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e01d      	b.n	8003488 <HAL_RCC_OscConfig+0xd4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0xbc>
 8003456:	4b72      	ldr	r3, [pc, #456]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a71      	ldr	r2, [pc, #452]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b6f      	ldr	r3, [pc, #444]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6e      	ldr	r2, [pc, #440]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xd4>
 8003470:	4b6b      	ldr	r3, [pc, #428]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a6a      	ldr	r2, [pc, #424]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b68      	ldr	r3, [pc, #416]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a67      	ldr	r2, [pc, #412]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003486:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe ffc2 	bl	8002418 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003498:	f7fe ffbe 	bl	8002418 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	@ 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e200      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0xe4>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe ffae 	bl	8002418 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe ffaa 	bl	8002418 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	@ 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1ec      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	4b53      	ldr	r3, [pc, #332]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x10c>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d063      	beq.n	80035b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034fa:	4b49      	ldr	r3, [pc, #292]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b08      	cmp	r3, #8
 8003504:	d11c      	bne.n	8003540 <HAL_RCC_OscConfig+0x18c>
 8003506:	4b46      	ldr	r3, [pc, #280]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d116      	bne.n	8003540 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	4b43      	ldr	r3, [pc, #268]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_RCC_OscConfig+0x176>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d001      	beq.n	800352a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e1c0      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b3d      	ldr	r3, [pc, #244]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4939      	ldr	r1, [pc, #228]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	e03a      	b.n	80035b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003548:	4b36      	ldr	r3, [pc, #216]	@ (8003624 <HAL_RCC_OscConfig+0x270>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fe ff63 	bl	8002418 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003556:	f7fe ff5f 	bl	8002418 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1a1      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	4b2d      	ldr	r3, [pc, #180]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b2a      	ldr	r3, [pc, #168]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4927      	ldr	r1, [pc, #156]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <HAL_RCC_OscConfig+0x270>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe ff42 	bl	8002418 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003598:	f7fe ff3e 	bl	8002418 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e180      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03a      	beq.n	8003638 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d019      	beq.n	80035fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ca:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <HAL_RCC_OscConfig+0x274>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d0:	f7fe ff22 	bl	8002418 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d8:	f7fe ff1e 	bl	8002418 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e160      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003620 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035f6:	2001      	movs	r0, #1
 80035f8:	f000 face 	bl	8003b98 <RCC_Delay>
 80035fc:	e01c      	b.n	8003638 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <HAL_RCC_OscConfig+0x274>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fe ff08 	bl	8002418 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360a:	e00f      	b.n	800362c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800360c:	f7fe ff04 	bl	8002418 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d908      	bls.n	800362c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e146      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	42420000 	.word	0x42420000
 8003628:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	4b92      	ldr	r3, [pc, #584]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e9      	bne.n	800360c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a6 	beq.w	8003792 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364a:	4b8b      	ldr	r3, [pc, #556]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10d      	bne.n	8003672 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	4b88      	ldr	r3, [pc, #544]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a87      	ldr	r2, [pc, #540]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003660:	61d3      	str	r3, [r2, #28]
 8003662:	4b85      	ldr	r3, [pc, #532]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366e:	2301      	movs	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	4b82      	ldr	r3, [pc, #520]	@ (800387c <HAL_RCC_OscConfig+0x4c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d118      	bne.n	80036b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367e:	4b7f      	ldr	r3, [pc, #508]	@ (800387c <HAL_RCC_OscConfig+0x4c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7e      	ldr	r2, [pc, #504]	@ (800387c <HAL_RCC_OscConfig+0x4c8>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368a:	f7fe fec5 	bl	8002418 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003692:	f7fe fec1 	bl	8002418 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	@ 0x64
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e103      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	4b75      	ldr	r3, [pc, #468]	@ (800387c <HAL_RCC_OscConfig+0x4c8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d106      	bne.n	80036c6 <HAL_RCC_OscConfig+0x312>
 80036b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6213      	str	r3, [r2, #32]
 80036c4:	e02d      	b.n	8003722 <HAL_RCC_OscConfig+0x36e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x334>
 80036ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4a69      	ldr	r2, [pc, #420]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6213      	str	r3, [r2, #32]
 80036da:	4b67      	ldr	r3, [pc, #412]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a66      	ldr	r2, [pc, #408]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6213      	str	r3, [r2, #32]
 80036e6:	e01c      	b.n	8003722 <HAL_RCC_OscConfig+0x36e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d10c      	bne.n	800370a <HAL_RCC_OscConfig+0x356>
 80036f0:	4b61      	ldr	r3, [pc, #388]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	4a60      	ldr	r2, [pc, #384]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6213      	str	r3, [r2, #32]
 80036fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4a5d      	ldr	r2, [pc, #372]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6213      	str	r3, [r2, #32]
 8003708:	e00b      	b.n	8003722 <HAL_RCC_OscConfig+0x36e>
 800370a:	4b5b      	ldr	r3, [pc, #364]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4a5a      	ldr	r2, [pc, #360]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6213      	str	r3, [r2, #32]
 8003716:	4b58      	ldr	r3, [pc, #352]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a57      	ldr	r2, [pc, #348]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d015      	beq.n	8003756 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372a:	f7fe fe75 	bl	8002418 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe fe71 	bl	8002418 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0b1      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	4b4b      	ldr	r3, [pc, #300]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ee      	beq.n	8003732 <HAL_RCC_OscConfig+0x37e>
 8003754:	e014      	b.n	8003780 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fe fe5f 	bl	8002418 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe fe5b 	bl	8002418 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e09b      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003774:	4b40      	ldr	r3, [pc, #256]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ee      	bne.n	800375e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003786:	4b3c      	ldr	r3, [pc, #240]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a3b      	ldr	r2, [pc, #236]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003790:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8087 	beq.w	80038aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800379c:	4b36      	ldr	r3, [pc, #216]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d061      	beq.n	800386c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d146      	bne.n	800383e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b33      	ldr	r3, [pc, #204]	@ (8003880 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe fe2f 	bl	8002418 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe fe2b 	bl	8002418 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e06d      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d0:	4b29      	ldr	r3, [pc, #164]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e4:	d108      	bne.n	80037f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037e6:	4b24      	ldr	r3, [pc, #144]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	4921      	ldr	r1, [pc, #132]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a19      	ldr	r1, [r3, #32]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	430b      	orrs	r3, r1
 800380a:	491b      	ldr	r1, [pc, #108]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003810:	4b1b      	ldr	r3, [pc, #108]	@ (8003880 <HAL_RCC_OscConfig+0x4cc>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003816:	f7fe fdff 	bl	8002418 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381e:	f7fe fdfb 	bl	8002418 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e03d      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003830:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x46a>
 800383c:	e035      	b.n	80038aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	4b10      	ldr	r3, [pc, #64]	@ (8003880 <HAL_RCC_OscConfig+0x4cc>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fde8 	bl	8002418 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7fe fde4 	bl	8002418 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e026      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x498>
 800386a:	e01e      	b.n	80038aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e019      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
 8003878:	40021000 	.word	0x40021000
 800387c:	40007000 	.word	0x40007000
 8003880:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003884:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <HAL_RCC_OscConfig+0x500>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	429a      	cmp	r2, r3
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000

080038b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0d0      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d910      	bls.n	80038fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b67      	ldr	r3, [pc, #412]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	4965      	ldr	r1, [pc, #404]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a58      	ldr	r2, [pc, #352]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800391e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a52      	ldr	r2, [pc, #328]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003936:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d040      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d115      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003976:	4b41      	ldr	r3, [pc, #260]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e073      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003986:	4b3d      	ldr	r3, [pc, #244]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e06b      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003996:	4b39      	ldr	r3, [pc, #228]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4936      	ldr	r1, [pc, #216]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a8:	f7fe fd36 	bl	8002418 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f7fe fd32 	bl	8002418 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e053      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 020c 	and.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1eb      	bne.n	80039b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d8:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d210      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b24      	ldr	r3, [pc, #144]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 0207 	bic.w	r2, r3, #7
 80039ee:	4922      	ldr	r1, [pc, #136]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a32:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490a      	ldr	r1, [pc, #40]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c8>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	@ (8003a84 <HAL_RCC_ClockConfig+0x1cc>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCC_ClockConfig+0x1d0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fc94 	bl	8002394 <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40022000 	.word	0x40022000
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	0800958c 	.word	0x0800958c
 8003a84:	20000020 	.word	0x20000020
 8003a88:	20000024 	.word	0x20000024

08003a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x30>
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x36>
 8003aba:	e027      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003abc:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003abe:	613b      	str	r3, [r7, #16]
      break;
 8003ac0:	e027      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	0c9b      	lsrs	r3, r3, #18
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	4a17      	ldr	r2, [pc, #92]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003acc:	5cd3      	ldrb	r3, [r2, r3]
 8003ace:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d010      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ada:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	0c5b      	lsrs	r3, r3, #17
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	4a11      	ldr	r2, [pc, #68]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aee:	fb03 f202 	mul.w	r2, r3, r2
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e004      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a0c      	ldr	r2, [pc, #48]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b00:	fb02 f303 	mul.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	613b      	str	r3, [r7, #16]
      break;
 8003b0a:	e002      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b0e:	613b      	str	r3, [r7, #16]
      break;
 8003b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b12:	693b      	ldr	r3, [r7, #16]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	007a1200 	.word	0x007a1200
 8003b28:	080095a4 	.word	0x080095a4
 8003b2c:	080095b4 	.word	0x080095b4
 8003b30:	003d0900 	.word	0x003d0900

08003b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b38:	4b02      	ldr	r3, [pc, #8]	@ (8003b44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	20000020 	.word	0x20000020

08003b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b4c:	f7ff fff2 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	4903      	ldr	r1, [pc, #12]	@ (8003b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	0800959c 	.word	0x0800959c

08003b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b74:	f7ff ffde 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	0adb      	lsrs	r3, r3, #11
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	4903      	ldr	r1, [pc, #12]	@ (8003b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	0800959c 	.word	0x0800959c

08003b98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <RCC_Delay+0x34>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd0 <RCC_Delay+0x38>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0a5b      	lsrs	r3, r3, #9
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bb4:	bf00      	nop
  }
  while (Delay --);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1e5a      	subs	r2, r3, #1
 8003bba:	60fa      	str	r2, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f9      	bne.n	8003bb4 <RCC_Delay+0x1c>
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	20000020 	.word	0x20000020
 8003bd0:	10624dd3 	.word	0x10624dd3

08003bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d07d      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c00:	4b4c      	ldr	r3, [pc, #304]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	4a4b      	ldr	r2, [pc, #300]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	61d3      	str	r3, [r2, #28]
 8003c0c:	4b49      	ldr	r3, [pc, #292]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b46      	ldr	r3, [pc, #280]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d118      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c28:	4b43      	ldr	r3, [pc, #268]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a42      	ldr	r2, [pc, #264]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c34:	f7fe fbf0 	bl	8002418 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3a:	e008      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3c:	f7fe fbec 	bl	8002418 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	@ 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e06d      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c5a:	4b36      	ldr	r3, [pc, #216]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d02e      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d027      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c78:	4b2e      	ldr	r3, [pc, #184]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c82:	4b2e      	ldr	r3, [pc, #184]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c88:	4b2c      	ldr	r3, [pc, #176]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c8e:	4a29      	ldr	r2, [pc, #164]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d014      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fe fbbb 	bl	8002418 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca6:	f7fe fbb7 	bl	8002418 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e036      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ee      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4917      	ldr	r1, [pc, #92]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d105      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce0:	4b14      	ldr	r3, [pc, #80]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	4a13      	ldr	r2, [pc, #76]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	490b      	ldr	r1, [pc, #44]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d008      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d16:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	4904      	ldr	r1, [pc, #16]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	42420440 	.word	0x42420440

08003d40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	f200 808a 	bhi.w	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d045      	beq.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d075      	beq.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d76:	e082      	b.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003d78:	4b46      	ldr	r3, [pc, #280]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d7e:	4b45      	ldr	r3, [pc, #276]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d07b      	beq.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	0c9b      	lsrs	r3, r3, #18
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	4a41      	ldr	r2, [pc, #260]	@ (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
 8003d96:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d015      	beq.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003da2:	4b3c      	ldr	r3, [pc, #240]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	0c5b      	lsrs	r3, r3, #17
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	4a3b      	ldr	r2, [pc, #236]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003dbc:	4a38      	ldr	r2, [pc, #224]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4a34      	ldr	r2, [pc, #208]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de4:	d102      	bne.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	61bb      	str	r3, [r7, #24]
      break;
 8003dea:	e04a      	b.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	61bb      	str	r3, [r7, #24]
      break;
 8003dfa:	e042      	b.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003dfc:	4b25      	ldr	r3, [pc, #148]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0c:	d108      	bne.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003e18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	e01f      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e2a:	d109      	bne.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003e2c:	4b19      	ldr	r3, [pc, #100]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003e38:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e00f      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e4a:	d11c      	bne.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e4c:	4b11      	ldr	r3, [pc, #68]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d016      	beq.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003e58:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003e5c:	61bb      	str	r3, [r7, #24]
      break;
 8003e5e:	e012      	b.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e60:	e011      	b.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e62:	f7ff fe85 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
 8003e66:	4602      	mov	r2, r0
 8003e68:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	0b9b      	lsrs	r3, r3, #14
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	3301      	adds	r3, #1
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	61bb      	str	r3, [r7, #24]
      break;
 8003e7c:	e004      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e002      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e86:	bf00      	nop
    }
  }
  return (frequency);
 8003e88:	69bb      	ldr	r3, [r7, #24]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	080095b8 	.word	0x080095b8
 8003e9c:	080095c8 	.word	0x080095c8
 8003ea0:	007a1200 	.word	0x007a1200
 8003ea4:	003d0900 	.word	0x003d0900
 8003ea8:	aaaaaaab 	.word	0xaaaaaaab

08003eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e041      	b.n	8003f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fe f82e 	bl	8001f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f000 f940 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d001      	beq.n	8003f64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e032      	b.n	8003fca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a18      	ldr	r2, [pc, #96]	@ (8003fd4 <HAL_TIM_Base_Start+0x88>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_TIM_Base_Start+0x48>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7e:	d009      	beq.n	8003f94 <HAL_TIM_Base_Start+0x48>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <HAL_TIM_Base_Start+0x8c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_TIM_Base_Start+0x48>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a13      	ldr	r2, [pc, #76]	@ (8003fdc <HAL_TIM_Base_Start+0x90>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d111      	bne.n	8003fb8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d010      	beq.n	8003fc8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb6:	e007      	b.n	8003fc8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800

08003fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_TIM_ConfigClockSource+0x1c>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e0b4      	b.n	8004166 <HAL_TIM_ConfigClockSource+0x186>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800401a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004034:	d03e      	beq.n	80040b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800403a:	f200 8087 	bhi.w	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004042:	f000 8086 	beq.w	8004152 <HAL_TIM_ConfigClockSource+0x172>
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404a:	d87f      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b70      	cmp	r3, #112	@ 0x70
 800404e:	d01a      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0xa6>
 8004050:	2b70      	cmp	r3, #112	@ 0x70
 8004052:	d87b      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 8004054:	2b60      	cmp	r3, #96	@ 0x60
 8004056:	d050      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x11a>
 8004058:	2b60      	cmp	r3, #96	@ 0x60
 800405a:	d877      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b50      	cmp	r3, #80	@ 0x50
 800405e:	d03c      	beq.n	80040da <HAL_TIM_ConfigClockSource+0xfa>
 8004060:	2b50      	cmp	r3, #80	@ 0x50
 8004062:	d873      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b40      	cmp	r3, #64	@ 0x40
 8004066:	d058      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x13a>
 8004068:	2b40      	cmp	r3, #64	@ 0x40
 800406a:	d86f      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b30      	cmp	r3, #48	@ 0x30
 800406e:	d064      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x15a>
 8004070:	2b30      	cmp	r3, #48	@ 0x30
 8004072:	d86b      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b20      	cmp	r3, #32
 8004076:	d060      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x15a>
 8004078:	2b20      	cmp	r3, #32
 800407a:	d867      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d05c      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x15a>
 8004080:	2b10      	cmp	r3, #16
 8004082:	d05a      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x15a>
 8004084:	e062      	b.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004096:	f000 f950 	bl	800433a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	609a      	str	r2, [r3, #8]
      break;
 80040b2:	e04f      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040c4:	f000 f939 	bl	800433a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040d6:	609a      	str	r2, [r3, #8]
      break;
 80040d8:	e03c      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e6:	461a      	mov	r2, r3
 80040e8:	f000 f8b0 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2150      	movs	r1, #80	@ 0x50
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f907 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 80040f8:	e02c      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004106:	461a      	mov	r2, r3
 8004108:	f000 f8ce 	bl	80042a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2160      	movs	r1, #96	@ 0x60
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f8f7 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004118:	e01c      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004126:	461a      	mov	r2, r3
 8004128:	f000 f890 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2140      	movs	r1, #64	@ 0x40
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f8e7 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004138:	e00c      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f000 f8de 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 800414a:	e003      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      break;
 8004150:	e000      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a2f      	ldr	r2, [pc, #188]	@ (8004240 <TIM_Base_SetConfig+0xd0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00b      	beq.n	80041a0 <TIM_Base_SetConfig+0x30>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418e:	d007      	beq.n	80041a0 <TIM_Base_SetConfig+0x30>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a2c      	ldr	r2, [pc, #176]	@ (8004244 <TIM_Base_SetConfig+0xd4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_Base_SetConfig+0x30>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a2b      	ldr	r2, [pc, #172]	@ (8004248 <TIM_Base_SetConfig+0xd8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d108      	bne.n	80041b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a22      	ldr	r2, [pc, #136]	@ (8004240 <TIM_Base_SetConfig+0xd0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <TIM_Base_SetConfig+0x62>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c0:	d007      	beq.n	80041d2 <TIM_Base_SetConfig+0x62>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004244 <TIM_Base_SetConfig+0xd4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_Base_SetConfig+0x62>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <TIM_Base_SetConfig+0xd8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d108      	bne.n	80041e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a0d      	ldr	r2, [pc, #52]	@ (8004240 <TIM_Base_SetConfig+0xd0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]
  }
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800

0800424c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 030a 	bic.w	r3, r3, #10
 8004288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0210 	bic.w	r2, r3, #16
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	031b      	lsls	r3, r3, #12
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	621a      	str	r2, [r3, #32]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 0307 	orr.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004354:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	021a      	lsls	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	431a      	orrs	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4313      	orrs	r3, r2
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	609a      	str	r2, [r3, #8]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e046      	b.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a16      	ldr	r2, [pc, #88]	@ (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00e      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043dc:	d009      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a12      	ldr	r2, [pc, #72]	@ (800442c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a10      	ldr	r2, [pc, #64]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10c      	bne.n	800440c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4313      	orrs	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800

08004434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd fd86 	bl	8001f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	@ 0x24
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fdb7 	bl	8004fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800448c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800449c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08a      	sub	sp, #40	@ 0x28
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d175      	bne.n	80045e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_UART_Transmit+0x2c>
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e06e      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2221      	movs	r2, #33	@ 0x21
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004512:	f7fd ff81 	bl	8002418 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452c:	d108      	bne.n	8004540 <HAL_UART_Transmit+0x6c>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	e003      	b.n	8004548 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004548:	e02e      	b.n	80045a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	2180      	movs	r1, #128	@ 0x80
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fb1c 	bl	8004b92 <UART_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e03a      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	3302      	adds	r3, #2
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e007      	b.n	800459a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1cb      	bne.n	800454a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2140      	movs	r1, #64	@ 0x40
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fae8 	bl	8004b92 <UART_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b20      	cmp	r3, #32
 8004602:	d112      	bne.n	800462a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_UART_Receive_IT+0x26>
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e00b      	b.n	800462c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	461a      	mov	r2, r3
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fb0f 	bl	8004c44 <UART_Start_Receive_IT>
 8004626:	4603      	mov	r3, r0
 8004628:	e000      	b.n	800462c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b0ba      	sub	sp, #232	@ 0xe8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800467a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_UART_IRQHandler+0x66>
 8004686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fbec 	bl	8004e70 <UART_Receive_IT>
      return;
 8004698:	e25b      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800469a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80de 	beq.w	8004860 <HAL_UART_IRQHandler+0x22c>
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80d1 	beq.w	8004860 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_UART_IRQHandler+0xae>
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_UART_IRQHandler+0xd2>
 80046ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_UART_IRQHandler+0xf6>
 8004712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d011      	beq.n	800475a <HAL_UART_IRQHandler+0x126>
 8004736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	f043 0208 	orr.w	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 81f2 	beq.w	8004b48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_UART_IRQHandler+0x14e>
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb77 	bl	8004e70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <HAL_UART_IRQHandler+0x17a>
 80047a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04f      	beq.n	800484e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa81 	bl	8004cb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d041      	beq.n	8004846 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1d9      	bne.n	80047c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d013      	beq.n	800483e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a14 <HAL_UART_IRQHandler+0x3e0>)
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe fb9a 	bl	8002f5c <HAL_DMA_Abort_IT>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d016      	beq.n	800485c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004838:	4610      	mov	r0, r2
 800483a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e00e      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f993 	bl	8004b6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e00a      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f98f 	bl	8004b6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e006      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f98b 	bl	8004b6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800485a:	e175      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	bf00      	nop
    return;
 800485e:	e173      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	2b01      	cmp	r3, #1
 8004866:	f040 814f 	bne.w	8004b08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8148 	beq.w	8004b08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8141 	beq.w	8004b08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80b6 	beq.w	8004a18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8145 	beq.w	8004b4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048ca:	429a      	cmp	r2, r3
 80048cc:	f080 813e 	bcs.w	8004b4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b20      	cmp	r3, #32
 80048e0:	f000 8088 	beq.w	80049f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004910:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004914:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800491c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1d9      	bne.n	80048e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3314      	adds	r3, #20
 8004936:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004940:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004954:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004958:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800495c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e1      	bne.n	8004930 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800497c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800497e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004990:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004992:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004996:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800499e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e3      	bne.n	800496c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c4:	f023 0310 	bic.w	r3, r3, #16
 80049c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049d8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e3      	bne.n	80049b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fa79 	bl	8002ee6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8b6 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a10:	e09c      	b.n	8004b4c <HAL_UART_IRQHandler+0x518>
 8004a12:	bf00      	nop
 8004a14:	08004d7b 	.word	0x08004d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 808e 	beq.w	8004b50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8089 	beq.w	8004b50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a62:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e3      	bne.n	8004a3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3314      	adds	r3, #20
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	623b      	str	r3, [r7, #32]
   return(result);
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e3      	bne.n	8004a76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0310 	bic.w	r3, r3, #16
 8004ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ae0:	61fa      	str	r2, [r7, #28]
 8004ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	617b      	str	r3, [r7, #20]
   return(result);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e3      	bne.n	8004abc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004afa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f83b 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b06:	e023      	b.n	8004b50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d009      	beq.n	8004b28 <HAL_UART_IRQHandler+0x4f4>
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f93e 	bl	8004da2 <UART_Transmit_IT>
    return;
 8004b26:	e014      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00e      	beq.n	8004b52 <HAL_UART_IRQHandler+0x51e>
 8004b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f97d 	bl	8004e40 <UART_EndTransmit_IT>
    return;
 8004b46:	e004      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b48:	bf00      	nop
 8004b4a:	e002      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b4c:	bf00      	nop
 8004b4e:	e000      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b50:	bf00      	nop
  }
}
 8004b52:	37e8      	adds	r7, #232	@ 0xe8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba2:	e03b      	b.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d037      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fd fc34 	bl	8002418 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	6a3a      	ldr	r2, [r7, #32]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e03a      	b.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d023      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b80      	cmp	r3, #128	@ 0x80
 8004bd8:	d020      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d01d      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d116      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f856 	bl	8004cb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e00f      	b.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d0b4      	beq.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	88fa      	ldrh	r2, [r7, #6]
 8004c5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2222      	movs	r2, #34	@ 0x22
 8004c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0201 	orr.w	r2, r2, #1
 8004c98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0220 	orr.w	r2, r2, #32
 8004ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b095      	sub	sp, #84	@ 0x54
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cde:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e5      	bne.n	8004cbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e5      	bne.n	8004cf2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d119      	bne.n	8004d62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0310 	bic.w	r3, r3, #16
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d4e:	61ba      	str	r2, [r7, #24]
 8004d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d70:	bf00      	nop
 8004d72:	3754      	adds	r7, #84	@ 0x54
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fee8 	bl	8004b6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b21      	cmp	r3, #33	@ 0x21
 8004db4:	d13e      	bne.n	8004e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dbe:	d114      	bne.n	8004dea <UART_Transmit_IT+0x48>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d110      	bne.n	8004dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	621a      	str	r2, [r3, #32]
 8004de8:	e008      	b.n	8004dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6211      	str	r1, [r2, #32]
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10f      	bne.n	8004e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fe79 	bl	8004b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08c      	sub	sp, #48	@ 0x30
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b22      	cmp	r3, #34	@ 0x22
 8004e82:	f040 80ae 	bne.w	8004fe2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8e:	d117      	bne.n	8004ec0 <UART_Receive_IT+0x50>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d113      	bne.n	8004ec0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ebe:	e026      	b.n	8004f0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed2:	d007      	beq.n	8004ee4 <UART_Receive_IT+0x74>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <UART_Receive_IT+0x82>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e008      	b.n	8004f04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d15d      	bne.n	8004fde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0220 	bic.w	r2, r2, #32
 8004f30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d135      	bne.n	8004fd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f023 0310 	bic.w	r3, r3, #16
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8e:	623a      	str	r2, [r7, #32]
 8004f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	69f9      	ldr	r1, [r7, #28]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e5      	bne.n	8004f6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d10a      	bne.n	8004fc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fdd5 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
 8004fd2:	e002      	b.n	8004fda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fc febb 	bl	8001d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e002      	b.n	8004fe4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3730      	adds	r7, #48	@ 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005026:	f023 030c 	bic.w	r3, r3, #12
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	430b      	orrs	r3, r1
 8005032:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2c      	ldr	r2, [pc, #176]	@ (8005100 <UART_SetConfig+0x114>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d103      	bne.n	800505c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005054:	f7fe fd8c 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	e002      	b.n	8005062 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800505c:	f7fe fd74 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8005060:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009a      	lsls	r2, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	4a22      	ldr	r2, [pc, #136]	@ (8005104 <UART_SetConfig+0x118>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	0119      	lsls	r1, r3, #4
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009a      	lsls	r2, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	fbb2 f2f3 	udiv	r2, r2, r3
 8005098:	4b1a      	ldr	r3, [pc, #104]	@ (8005104 <UART_SetConfig+0x118>)
 800509a:	fba3 0302 	umull	r0, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	2064      	movs	r0, #100	@ 0x64
 80050a2:	fb00 f303 	mul.w	r3, r0, r3
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	3332      	adds	r3, #50	@ 0x32
 80050ac:	4a15      	ldr	r2, [pc, #84]	@ (8005104 <UART_SetConfig+0x118>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050b8:	4419      	add	r1, r3
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009a      	lsls	r2, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <UART_SetConfig+0x118>)
 80050d2:	fba3 0302 	umull	r0, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2064      	movs	r0, #100	@ 0x64
 80050da:	fb00 f303 	mul.w	r3, r0, r3
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	3332      	adds	r3, #50	@ 0x32
 80050e4:	4a07      	ldr	r2, [pc, #28]	@ (8005104 <UART_SetConfig+0x118>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f003 020f 	and.w	r2, r3, #15
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	440a      	add	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40013800 	.word	0x40013800
 8005104:	51eb851f 	.word	0x51eb851f

08005108 <atof>:
 8005108:	2100      	movs	r1, #0
 800510a:	f000 bdf9 	b.w	8005d00 <strtod>

0800510e <sulp>:
 800510e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005112:	460f      	mov	r7, r1
 8005114:	4690      	mov	r8, r2
 8005116:	f003 fb01 	bl	800871c <__ulp>
 800511a:	4604      	mov	r4, r0
 800511c:	460d      	mov	r5, r1
 800511e:	f1b8 0f00 	cmp.w	r8, #0
 8005122:	d011      	beq.n	8005148 <sulp+0x3a>
 8005124:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005128:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800512c:	2b00      	cmp	r3, #0
 800512e:	dd0b      	ble.n	8005148 <sulp+0x3a>
 8005130:	2400      	movs	r4, #0
 8005132:	051b      	lsls	r3, r3, #20
 8005134:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005138:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800513c:	4622      	mov	r2, r4
 800513e:	462b      	mov	r3, r5
 8005140:	f7fb f9ca 	bl	80004d8 <__aeabi_dmul>
 8005144:	4604      	mov	r4, r0
 8005146:	460d      	mov	r5, r1
 8005148:	4620      	mov	r0, r4
 800514a:	4629      	mov	r1, r5
 800514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005150 <_strtod_l>:
 8005150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005154:	b09f      	sub	sp, #124	@ 0x7c
 8005156:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005158:	2200      	movs	r2, #0
 800515a:	460c      	mov	r4, r1
 800515c:	921a      	str	r2, [sp, #104]	@ 0x68
 800515e:	f04f 0a00 	mov.w	sl, #0
 8005162:	f04f 0b00 	mov.w	fp, #0
 8005166:	460a      	mov	r2, r1
 8005168:	9005      	str	r0, [sp, #20]
 800516a:	9219      	str	r2, [sp, #100]	@ 0x64
 800516c:	7811      	ldrb	r1, [r2, #0]
 800516e:	292b      	cmp	r1, #43	@ 0x2b
 8005170:	d048      	beq.n	8005204 <_strtod_l+0xb4>
 8005172:	d836      	bhi.n	80051e2 <_strtod_l+0x92>
 8005174:	290d      	cmp	r1, #13
 8005176:	d830      	bhi.n	80051da <_strtod_l+0x8a>
 8005178:	2908      	cmp	r1, #8
 800517a:	d830      	bhi.n	80051de <_strtod_l+0x8e>
 800517c:	2900      	cmp	r1, #0
 800517e:	d039      	beq.n	80051f4 <_strtod_l+0xa4>
 8005180:	2200      	movs	r2, #0
 8005182:	920e      	str	r2, [sp, #56]	@ 0x38
 8005184:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005186:	782a      	ldrb	r2, [r5, #0]
 8005188:	2a30      	cmp	r2, #48	@ 0x30
 800518a:	f040 80b0 	bne.w	80052ee <_strtod_l+0x19e>
 800518e:	786a      	ldrb	r2, [r5, #1]
 8005190:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005194:	2a58      	cmp	r2, #88	@ 0x58
 8005196:	d16c      	bne.n	8005272 <_strtod_l+0x122>
 8005198:	9302      	str	r3, [sp, #8]
 800519a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800519c:	4a8f      	ldr	r2, [pc, #572]	@ (80053dc <_strtod_l+0x28c>)
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	ab1a      	add	r3, sp, #104	@ 0x68
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	9805      	ldr	r0, [sp, #20]
 80051a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80051a8:	a919      	add	r1, sp, #100	@ 0x64
 80051aa:	f002 fbb1 	bl	8007910 <__gethex>
 80051ae:	f010 060f 	ands.w	r6, r0, #15
 80051b2:	4604      	mov	r4, r0
 80051b4:	d005      	beq.n	80051c2 <_strtod_l+0x72>
 80051b6:	2e06      	cmp	r6, #6
 80051b8:	d126      	bne.n	8005208 <_strtod_l+0xb8>
 80051ba:	2300      	movs	r3, #0
 80051bc:	3501      	adds	r5, #1
 80051be:	9519      	str	r5, [sp, #100]	@ 0x64
 80051c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80051c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f040 8582 	bne.w	8005cce <_strtod_l+0xb7e>
 80051ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051cc:	b1bb      	cbz	r3, 80051fe <_strtod_l+0xae>
 80051ce:	4650      	mov	r0, sl
 80051d0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80051d4:	b01f      	add	sp, #124	@ 0x7c
 80051d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051da:	2920      	cmp	r1, #32
 80051dc:	d1d0      	bne.n	8005180 <_strtod_l+0x30>
 80051de:	3201      	adds	r2, #1
 80051e0:	e7c3      	b.n	800516a <_strtod_l+0x1a>
 80051e2:	292d      	cmp	r1, #45	@ 0x2d
 80051e4:	d1cc      	bne.n	8005180 <_strtod_l+0x30>
 80051e6:	2101      	movs	r1, #1
 80051e8:	910e      	str	r1, [sp, #56]	@ 0x38
 80051ea:	1c51      	adds	r1, r2, #1
 80051ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80051ee:	7852      	ldrb	r2, [r2, #1]
 80051f0:	2a00      	cmp	r2, #0
 80051f2:	d1c7      	bne.n	8005184 <_strtod_l+0x34>
 80051f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051f6:	9419      	str	r4, [sp, #100]	@ 0x64
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 8566 	bne.w	8005cca <_strtod_l+0xb7a>
 80051fe:	4650      	mov	r0, sl
 8005200:	4659      	mov	r1, fp
 8005202:	e7e7      	b.n	80051d4 <_strtod_l+0x84>
 8005204:	2100      	movs	r1, #0
 8005206:	e7ef      	b.n	80051e8 <_strtod_l+0x98>
 8005208:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800520a:	b13a      	cbz	r2, 800521c <_strtod_l+0xcc>
 800520c:	2135      	movs	r1, #53	@ 0x35
 800520e:	a81c      	add	r0, sp, #112	@ 0x70
 8005210:	f003 fb74 	bl	80088fc <__copybits>
 8005214:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005216:	9805      	ldr	r0, [sp, #20]
 8005218:	f002 ff54 	bl	80080c4 <_Bfree>
 800521c:	3e01      	subs	r6, #1
 800521e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005220:	2e04      	cmp	r6, #4
 8005222:	d806      	bhi.n	8005232 <_strtod_l+0xe2>
 8005224:	e8df f006 	tbb	[pc, r6]
 8005228:	201d0314 	.word	0x201d0314
 800522c:	14          	.byte	0x14
 800522d:	00          	.byte	0x00
 800522e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005232:	05e1      	lsls	r1, r4, #23
 8005234:	bf48      	it	mi
 8005236:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800523a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800523e:	0d1b      	lsrs	r3, r3, #20
 8005240:	051b      	lsls	r3, r3, #20
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1bd      	bne.n	80051c2 <_strtod_l+0x72>
 8005246:	f001 fbdf 	bl	8006a08 <__errno>
 800524a:	2322      	movs	r3, #34	@ 0x22
 800524c:	6003      	str	r3, [r0, #0]
 800524e:	e7b8      	b.n	80051c2 <_strtod_l+0x72>
 8005250:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005254:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005258:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800525c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005260:	e7e7      	b.n	8005232 <_strtod_l+0xe2>
 8005262:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80053e0 <_strtod_l+0x290>
 8005266:	e7e4      	b.n	8005232 <_strtod_l+0xe2>
 8005268:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800526c:	f04f 3aff 	mov.w	sl, #4294967295
 8005270:	e7df      	b.n	8005232 <_strtod_l+0xe2>
 8005272:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	9219      	str	r2, [sp, #100]	@ 0x64
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	2b30      	cmp	r3, #48	@ 0x30
 800527c:	d0f9      	beq.n	8005272 <_strtod_l+0x122>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d09f      	beq.n	80051c2 <_strtod_l+0x72>
 8005282:	2301      	movs	r3, #1
 8005284:	2700      	movs	r7, #0
 8005286:	220a      	movs	r2, #10
 8005288:	46b9      	mov	r9, r7
 800528a:	9308      	str	r3, [sp, #32]
 800528c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800528e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005290:	930c      	str	r3, [sp, #48]	@ 0x30
 8005292:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005294:	7805      	ldrb	r5, [r0, #0]
 8005296:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800529a:	b2d9      	uxtb	r1, r3
 800529c:	2909      	cmp	r1, #9
 800529e:	d928      	bls.n	80052f2 <_strtod_l+0x1a2>
 80052a0:	2201      	movs	r2, #1
 80052a2:	4950      	ldr	r1, [pc, #320]	@ (80053e4 <_strtod_l+0x294>)
 80052a4:	f001 faf7 	bl	8006896 <strncmp>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d032      	beq.n	8005312 <_strtod_l+0x1c2>
 80052ac:	2000      	movs	r0, #0
 80052ae:	462a      	mov	r2, r5
 80052b0:	4603      	mov	r3, r0
 80052b2:	464d      	mov	r5, r9
 80052b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80052b6:	2a65      	cmp	r2, #101	@ 0x65
 80052b8:	d001      	beq.n	80052be <_strtod_l+0x16e>
 80052ba:	2a45      	cmp	r2, #69	@ 0x45
 80052bc:	d114      	bne.n	80052e8 <_strtod_l+0x198>
 80052be:	b91d      	cbnz	r5, 80052c8 <_strtod_l+0x178>
 80052c0:	9a08      	ldr	r2, [sp, #32]
 80052c2:	4302      	orrs	r2, r0
 80052c4:	d096      	beq.n	80051f4 <_strtod_l+0xa4>
 80052c6:	2500      	movs	r5, #0
 80052c8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80052ca:	1c62      	adds	r2, r4, #1
 80052cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80052ce:	7862      	ldrb	r2, [r4, #1]
 80052d0:	2a2b      	cmp	r2, #43	@ 0x2b
 80052d2:	d07a      	beq.n	80053ca <_strtod_l+0x27a>
 80052d4:	2a2d      	cmp	r2, #45	@ 0x2d
 80052d6:	d07e      	beq.n	80053d6 <_strtod_l+0x286>
 80052d8:	f04f 0c00 	mov.w	ip, #0
 80052dc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80052e0:	2909      	cmp	r1, #9
 80052e2:	f240 8085 	bls.w	80053f0 <_strtod_l+0x2a0>
 80052e6:	9419      	str	r4, [sp, #100]	@ 0x64
 80052e8:	f04f 0800 	mov.w	r8, #0
 80052ec:	e0a5      	b.n	800543a <_strtod_l+0x2ea>
 80052ee:	2300      	movs	r3, #0
 80052f0:	e7c8      	b.n	8005284 <_strtod_l+0x134>
 80052f2:	f1b9 0f08 	cmp.w	r9, #8
 80052f6:	bfd8      	it	le
 80052f8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80052fa:	f100 0001 	add.w	r0, r0, #1
 80052fe:	bfd6      	itet	le
 8005300:	fb02 3301 	mlale	r3, r2, r1, r3
 8005304:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005308:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800530a:	f109 0901 	add.w	r9, r9, #1
 800530e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005310:	e7bf      	b.n	8005292 <_strtod_l+0x142>
 8005312:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	9219      	str	r2, [sp, #100]	@ 0x64
 8005318:	785a      	ldrb	r2, [r3, #1]
 800531a:	f1b9 0f00 	cmp.w	r9, #0
 800531e:	d03b      	beq.n	8005398 <_strtod_l+0x248>
 8005320:	464d      	mov	r5, r9
 8005322:	900a      	str	r0, [sp, #40]	@ 0x28
 8005324:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005328:	2b09      	cmp	r3, #9
 800532a:	d912      	bls.n	8005352 <_strtod_l+0x202>
 800532c:	2301      	movs	r3, #1
 800532e:	e7c2      	b.n	80052b6 <_strtod_l+0x166>
 8005330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005332:	3001      	adds	r0, #1
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	9219      	str	r2, [sp, #100]	@ 0x64
 8005338:	785a      	ldrb	r2, [r3, #1]
 800533a:	2a30      	cmp	r2, #48	@ 0x30
 800533c:	d0f8      	beq.n	8005330 <_strtod_l+0x1e0>
 800533e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005342:	2b08      	cmp	r3, #8
 8005344:	f200 84c8 	bhi.w	8005cd8 <_strtod_l+0xb88>
 8005348:	900a      	str	r0, [sp, #40]	@ 0x28
 800534a:	2000      	movs	r0, #0
 800534c:	4605      	mov	r5, r0
 800534e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005350:	930c      	str	r3, [sp, #48]	@ 0x30
 8005352:	3a30      	subs	r2, #48	@ 0x30
 8005354:	f100 0301 	add.w	r3, r0, #1
 8005358:	d018      	beq.n	800538c <_strtod_l+0x23c>
 800535a:	462e      	mov	r6, r5
 800535c:	f04f 0e0a 	mov.w	lr, #10
 8005360:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005362:	4419      	add	r1, r3
 8005364:	910a      	str	r1, [sp, #40]	@ 0x28
 8005366:	1c71      	adds	r1, r6, #1
 8005368:	eba1 0c05 	sub.w	ip, r1, r5
 800536c:	4563      	cmp	r3, ip
 800536e:	dc15      	bgt.n	800539c <_strtod_l+0x24c>
 8005370:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005374:	182b      	adds	r3, r5, r0
 8005376:	2b08      	cmp	r3, #8
 8005378:	f105 0501 	add.w	r5, r5, #1
 800537c:	4405      	add	r5, r0
 800537e:	dc1a      	bgt.n	80053b6 <_strtod_l+0x266>
 8005380:	230a      	movs	r3, #10
 8005382:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005384:	fb03 2301 	mla	r3, r3, r1, r2
 8005388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800538a:	2300      	movs	r3, #0
 800538c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800538e:	4618      	mov	r0, r3
 8005390:	1c51      	adds	r1, r2, #1
 8005392:	9119      	str	r1, [sp, #100]	@ 0x64
 8005394:	7852      	ldrb	r2, [r2, #1]
 8005396:	e7c5      	b.n	8005324 <_strtod_l+0x1d4>
 8005398:	4648      	mov	r0, r9
 800539a:	e7ce      	b.n	800533a <_strtod_l+0x1ea>
 800539c:	2e08      	cmp	r6, #8
 800539e:	dc05      	bgt.n	80053ac <_strtod_l+0x25c>
 80053a0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80053a2:	fb0e f606 	mul.w	r6, lr, r6
 80053a6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80053a8:	460e      	mov	r6, r1
 80053aa:	e7dc      	b.n	8005366 <_strtod_l+0x216>
 80053ac:	2910      	cmp	r1, #16
 80053ae:	bfd8      	it	le
 80053b0:	fb0e f707 	mulle.w	r7, lr, r7
 80053b4:	e7f8      	b.n	80053a8 <_strtod_l+0x258>
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	bfdc      	itt	le
 80053ba:	230a      	movle	r3, #10
 80053bc:	fb03 2707 	mlale	r7, r3, r7, r2
 80053c0:	e7e3      	b.n	800538a <_strtod_l+0x23a>
 80053c2:	2300      	movs	r3, #0
 80053c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80053c6:	2301      	movs	r3, #1
 80053c8:	e77a      	b.n	80052c0 <_strtod_l+0x170>
 80053ca:	f04f 0c00 	mov.w	ip, #0
 80053ce:	1ca2      	adds	r2, r4, #2
 80053d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80053d2:	78a2      	ldrb	r2, [r4, #2]
 80053d4:	e782      	b.n	80052dc <_strtod_l+0x18c>
 80053d6:	f04f 0c01 	mov.w	ip, #1
 80053da:	e7f8      	b.n	80053ce <_strtod_l+0x27e>
 80053dc:	0800980c 	.word	0x0800980c
 80053e0:	7ff00000 	.word	0x7ff00000
 80053e4:	080095ca 	.word	0x080095ca
 80053e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80053ea:	1c51      	adds	r1, r2, #1
 80053ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80053ee:	7852      	ldrb	r2, [r2, #1]
 80053f0:	2a30      	cmp	r2, #48	@ 0x30
 80053f2:	d0f9      	beq.n	80053e8 <_strtod_l+0x298>
 80053f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80053f8:	2908      	cmp	r1, #8
 80053fa:	f63f af75 	bhi.w	80052e8 <_strtod_l+0x198>
 80053fe:	f04f 080a 	mov.w	r8, #10
 8005402:	3a30      	subs	r2, #48	@ 0x30
 8005404:	9209      	str	r2, [sp, #36]	@ 0x24
 8005406:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005408:	920f      	str	r2, [sp, #60]	@ 0x3c
 800540a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800540c:	1c56      	adds	r6, r2, #1
 800540e:	9619      	str	r6, [sp, #100]	@ 0x64
 8005410:	7852      	ldrb	r2, [r2, #1]
 8005412:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005416:	f1be 0f09 	cmp.w	lr, #9
 800541a:	d939      	bls.n	8005490 <_strtod_l+0x340>
 800541c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800541e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005422:	1a76      	subs	r6, r6, r1
 8005424:	2e08      	cmp	r6, #8
 8005426:	dc03      	bgt.n	8005430 <_strtod_l+0x2e0>
 8005428:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800542a:	4588      	cmp	r8, r1
 800542c:	bfa8      	it	ge
 800542e:	4688      	movge	r8, r1
 8005430:	f1bc 0f00 	cmp.w	ip, #0
 8005434:	d001      	beq.n	800543a <_strtod_l+0x2ea>
 8005436:	f1c8 0800 	rsb	r8, r8, #0
 800543a:	2d00      	cmp	r5, #0
 800543c:	d14e      	bne.n	80054dc <_strtod_l+0x38c>
 800543e:	9908      	ldr	r1, [sp, #32]
 8005440:	4308      	orrs	r0, r1
 8005442:	f47f aebe 	bne.w	80051c2 <_strtod_l+0x72>
 8005446:	2b00      	cmp	r3, #0
 8005448:	f47f aed4 	bne.w	80051f4 <_strtod_l+0xa4>
 800544c:	2a69      	cmp	r2, #105	@ 0x69
 800544e:	d028      	beq.n	80054a2 <_strtod_l+0x352>
 8005450:	dc25      	bgt.n	800549e <_strtod_l+0x34e>
 8005452:	2a49      	cmp	r2, #73	@ 0x49
 8005454:	d025      	beq.n	80054a2 <_strtod_l+0x352>
 8005456:	2a4e      	cmp	r2, #78	@ 0x4e
 8005458:	f47f aecc 	bne.w	80051f4 <_strtod_l+0xa4>
 800545c:	4999      	ldr	r1, [pc, #612]	@ (80056c4 <_strtod_l+0x574>)
 800545e:	a819      	add	r0, sp, #100	@ 0x64
 8005460:	f002 fc78 	bl	8007d54 <__match>
 8005464:	2800      	cmp	r0, #0
 8005466:	f43f aec5 	beq.w	80051f4 <_strtod_l+0xa4>
 800546a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b28      	cmp	r3, #40	@ 0x28
 8005470:	d12e      	bne.n	80054d0 <_strtod_l+0x380>
 8005472:	4995      	ldr	r1, [pc, #596]	@ (80056c8 <_strtod_l+0x578>)
 8005474:	aa1c      	add	r2, sp, #112	@ 0x70
 8005476:	a819      	add	r0, sp, #100	@ 0x64
 8005478:	f002 fc80 	bl	8007d7c <__hexnan>
 800547c:	2805      	cmp	r0, #5
 800547e:	d127      	bne.n	80054d0 <_strtod_l+0x380>
 8005480:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005482:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005486:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800548a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800548e:	e698      	b.n	80051c2 <_strtod_l+0x72>
 8005490:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005492:	fb08 2101 	mla	r1, r8, r1, r2
 8005496:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800549a:	9209      	str	r2, [sp, #36]	@ 0x24
 800549c:	e7b5      	b.n	800540a <_strtod_l+0x2ba>
 800549e:	2a6e      	cmp	r2, #110	@ 0x6e
 80054a0:	e7da      	b.n	8005458 <_strtod_l+0x308>
 80054a2:	498a      	ldr	r1, [pc, #552]	@ (80056cc <_strtod_l+0x57c>)
 80054a4:	a819      	add	r0, sp, #100	@ 0x64
 80054a6:	f002 fc55 	bl	8007d54 <__match>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	f43f aea2 	beq.w	80051f4 <_strtod_l+0xa4>
 80054b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054b2:	4987      	ldr	r1, [pc, #540]	@ (80056d0 <_strtod_l+0x580>)
 80054b4:	3b01      	subs	r3, #1
 80054b6:	a819      	add	r0, sp, #100	@ 0x64
 80054b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80054ba:	f002 fc4b 	bl	8007d54 <__match>
 80054be:	b910      	cbnz	r0, 80054c6 <_strtod_l+0x376>
 80054c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054c2:	3301      	adds	r3, #1
 80054c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80054c6:	f04f 0a00 	mov.w	sl, #0
 80054ca:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80056d4 <_strtod_l+0x584>
 80054ce:	e678      	b.n	80051c2 <_strtod_l+0x72>
 80054d0:	4881      	ldr	r0, [pc, #516]	@ (80056d8 <_strtod_l+0x588>)
 80054d2:	f001 faeb 	bl	8006aac <nan>
 80054d6:	4682      	mov	sl, r0
 80054d8:	468b      	mov	fp, r1
 80054da:	e672      	b.n	80051c2 <_strtod_l+0x72>
 80054dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054de:	f1b9 0f00 	cmp.w	r9, #0
 80054e2:	bf08      	it	eq
 80054e4:	46a9      	moveq	r9, r5
 80054e6:	eba8 0303 	sub.w	r3, r8, r3
 80054ea:	2d10      	cmp	r5, #16
 80054ec:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80054ee:	462c      	mov	r4, r5
 80054f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f2:	bfa8      	it	ge
 80054f4:	2410      	movge	r4, #16
 80054f6:	f7fa ff75 	bl	80003e4 <__aeabi_ui2d>
 80054fa:	2d09      	cmp	r5, #9
 80054fc:	4682      	mov	sl, r0
 80054fe:	468b      	mov	fp, r1
 8005500:	dc11      	bgt.n	8005526 <_strtod_l+0x3d6>
 8005502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005504:	2b00      	cmp	r3, #0
 8005506:	f43f ae5c 	beq.w	80051c2 <_strtod_l+0x72>
 800550a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800550c:	dd76      	ble.n	80055fc <_strtod_l+0x4ac>
 800550e:	2b16      	cmp	r3, #22
 8005510:	dc5d      	bgt.n	80055ce <_strtod_l+0x47e>
 8005512:	4972      	ldr	r1, [pc, #456]	@ (80056dc <_strtod_l+0x58c>)
 8005514:	4652      	mov	r2, sl
 8005516:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800551a:	465b      	mov	r3, fp
 800551c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005520:	f7fa ffda 	bl	80004d8 <__aeabi_dmul>
 8005524:	e7d7      	b.n	80054d6 <_strtod_l+0x386>
 8005526:	4b6d      	ldr	r3, [pc, #436]	@ (80056dc <_strtod_l+0x58c>)
 8005528:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800552c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005530:	f7fa ffd2 	bl	80004d8 <__aeabi_dmul>
 8005534:	4682      	mov	sl, r0
 8005536:	4638      	mov	r0, r7
 8005538:	468b      	mov	fp, r1
 800553a:	f7fa ff53 	bl	80003e4 <__aeabi_ui2d>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4650      	mov	r0, sl
 8005544:	4659      	mov	r1, fp
 8005546:	f7fa fe11 	bl	800016c <__adddf3>
 800554a:	2d0f      	cmp	r5, #15
 800554c:	4682      	mov	sl, r0
 800554e:	468b      	mov	fp, r1
 8005550:	ddd7      	ble.n	8005502 <_strtod_l+0x3b2>
 8005552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005554:	1b2c      	subs	r4, r5, r4
 8005556:	441c      	add	r4, r3
 8005558:	2c00      	cmp	r4, #0
 800555a:	f340 8093 	ble.w	8005684 <_strtod_l+0x534>
 800555e:	f014 030f 	ands.w	r3, r4, #15
 8005562:	d00a      	beq.n	800557a <_strtod_l+0x42a>
 8005564:	495d      	ldr	r1, [pc, #372]	@ (80056dc <_strtod_l+0x58c>)
 8005566:	4652      	mov	r2, sl
 8005568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800556c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005570:	465b      	mov	r3, fp
 8005572:	f7fa ffb1 	bl	80004d8 <__aeabi_dmul>
 8005576:	4682      	mov	sl, r0
 8005578:	468b      	mov	fp, r1
 800557a:	f034 040f 	bics.w	r4, r4, #15
 800557e:	d073      	beq.n	8005668 <_strtod_l+0x518>
 8005580:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005584:	dd49      	ble.n	800561a <_strtod_l+0x4ca>
 8005586:	2400      	movs	r4, #0
 8005588:	46a0      	mov	r8, r4
 800558a:	46a1      	mov	r9, r4
 800558c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800558e:	2322      	movs	r3, #34	@ 0x22
 8005590:	f04f 0a00 	mov.w	sl, #0
 8005594:	9a05      	ldr	r2, [sp, #20]
 8005596:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80056d4 <_strtod_l+0x584>
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f43f ae0f 	beq.w	80051c2 <_strtod_l+0x72>
 80055a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055a6:	9805      	ldr	r0, [sp, #20]
 80055a8:	f002 fd8c 	bl	80080c4 <_Bfree>
 80055ac:	4649      	mov	r1, r9
 80055ae:	9805      	ldr	r0, [sp, #20]
 80055b0:	f002 fd88 	bl	80080c4 <_Bfree>
 80055b4:	4641      	mov	r1, r8
 80055b6:	9805      	ldr	r0, [sp, #20]
 80055b8:	f002 fd84 	bl	80080c4 <_Bfree>
 80055bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80055be:	9805      	ldr	r0, [sp, #20]
 80055c0:	f002 fd80 	bl	80080c4 <_Bfree>
 80055c4:	4621      	mov	r1, r4
 80055c6:	9805      	ldr	r0, [sp, #20]
 80055c8:	f002 fd7c 	bl	80080c4 <_Bfree>
 80055cc:	e5f9      	b.n	80051c2 <_strtod_l+0x72>
 80055ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80055d4:	4293      	cmp	r3, r2
 80055d6:	dbbc      	blt.n	8005552 <_strtod_l+0x402>
 80055d8:	4c40      	ldr	r4, [pc, #256]	@ (80056dc <_strtod_l+0x58c>)
 80055da:	f1c5 050f 	rsb	r5, r5, #15
 80055de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80055e2:	4652      	mov	r2, sl
 80055e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055e8:	465b      	mov	r3, fp
 80055ea:	f7fa ff75 	bl	80004d8 <__aeabi_dmul>
 80055ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f0:	1b5d      	subs	r5, r3, r5
 80055f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80055f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80055fa:	e791      	b.n	8005520 <_strtod_l+0x3d0>
 80055fc:	3316      	adds	r3, #22
 80055fe:	dba8      	blt.n	8005552 <_strtod_l+0x402>
 8005600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005602:	4650      	mov	r0, sl
 8005604:	eba3 0808 	sub.w	r8, r3, r8
 8005608:	4b34      	ldr	r3, [pc, #208]	@ (80056dc <_strtod_l+0x58c>)
 800560a:	4659      	mov	r1, fp
 800560c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005610:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005614:	f7fb f88a 	bl	800072c <__aeabi_ddiv>
 8005618:	e75d      	b.n	80054d6 <_strtod_l+0x386>
 800561a:	2300      	movs	r3, #0
 800561c:	4650      	mov	r0, sl
 800561e:	4659      	mov	r1, fp
 8005620:	461e      	mov	r6, r3
 8005622:	4f2f      	ldr	r7, [pc, #188]	@ (80056e0 <_strtod_l+0x590>)
 8005624:	1124      	asrs	r4, r4, #4
 8005626:	2c01      	cmp	r4, #1
 8005628:	dc21      	bgt.n	800566e <_strtod_l+0x51e>
 800562a:	b10b      	cbz	r3, 8005630 <_strtod_l+0x4e0>
 800562c:	4682      	mov	sl, r0
 800562e:	468b      	mov	fp, r1
 8005630:	492b      	ldr	r1, [pc, #172]	@ (80056e0 <_strtod_l+0x590>)
 8005632:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005636:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800563a:	4652      	mov	r2, sl
 800563c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005640:	465b      	mov	r3, fp
 8005642:	f7fa ff49 	bl	80004d8 <__aeabi_dmul>
 8005646:	4b23      	ldr	r3, [pc, #140]	@ (80056d4 <_strtod_l+0x584>)
 8005648:	460a      	mov	r2, r1
 800564a:	400b      	ands	r3, r1
 800564c:	4925      	ldr	r1, [pc, #148]	@ (80056e4 <_strtod_l+0x594>)
 800564e:	4682      	mov	sl, r0
 8005650:	428b      	cmp	r3, r1
 8005652:	d898      	bhi.n	8005586 <_strtod_l+0x436>
 8005654:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005658:	428b      	cmp	r3, r1
 800565a:	bf86      	itte	hi
 800565c:	f04f 3aff 	movhi.w	sl, #4294967295
 8005660:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80056e8 <_strtod_l+0x598>
 8005664:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005668:	2300      	movs	r3, #0
 800566a:	9308      	str	r3, [sp, #32]
 800566c:	e076      	b.n	800575c <_strtod_l+0x60c>
 800566e:	07e2      	lsls	r2, r4, #31
 8005670:	d504      	bpl.n	800567c <_strtod_l+0x52c>
 8005672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005676:	f7fa ff2f 	bl	80004d8 <__aeabi_dmul>
 800567a:	2301      	movs	r3, #1
 800567c:	3601      	adds	r6, #1
 800567e:	1064      	asrs	r4, r4, #1
 8005680:	3708      	adds	r7, #8
 8005682:	e7d0      	b.n	8005626 <_strtod_l+0x4d6>
 8005684:	d0f0      	beq.n	8005668 <_strtod_l+0x518>
 8005686:	4264      	negs	r4, r4
 8005688:	f014 020f 	ands.w	r2, r4, #15
 800568c:	d00a      	beq.n	80056a4 <_strtod_l+0x554>
 800568e:	4b13      	ldr	r3, [pc, #76]	@ (80056dc <_strtod_l+0x58c>)
 8005690:	4650      	mov	r0, sl
 8005692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005696:	4659      	mov	r1, fp
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f7fb f846 	bl	800072c <__aeabi_ddiv>
 80056a0:	4682      	mov	sl, r0
 80056a2:	468b      	mov	fp, r1
 80056a4:	1124      	asrs	r4, r4, #4
 80056a6:	d0df      	beq.n	8005668 <_strtod_l+0x518>
 80056a8:	2c1f      	cmp	r4, #31
 80056aa:	dd1f      	ble.n	80056ec <_strtod_l+0x59c>
 80056ac:	2400      	movs	r4, #0
 80056ae:	46a0      	mov	r8, r4
 80056b0:	46a1      	mov	r9, r4
 80056b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80056b4:	2322      	movs	r3, #34	@ 0x22
 80056b6:	9a05      	ldr	r2, [sp, #20]
 80056b8:	f04f 0a00 	mov.w	sl, #0
 80056bc:	f04f 0b00 	mov.w	fp, #0
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e76b      	b.n	800559c <_strtod_l+0x44c>
 80056c4:	080095d9 	.word	0x080095d9
 80056c8:	080097f8 	.word	0x080097f8
 80056cc:	080095d1 	.word	0x080095d1
 80056d0:	080096b8 	.word	0x080096b8
 80056d4:	7ff00000 	.word	0x7ff00000
 80056d8:	080096b4 	.word	0x080096b4
 80056dc:	08009880 	.word	0x08009880
 80056e0:	08009858 	.word	0x08009858
 80056e4:	7ca00000 	.word	0x7ca00000
 80056e8:	7fefffff 	.word	0x7fefffff
 80056ec:	f014 0310 	ands.w	r3, r4, #16
 80056f0:	bf18      	it	ne
 80056f2:	236a      	movne	r3, #106	@ 0x6a
 80056f4:	4650      	mov	r0, sl
 80056f6:	9308      	str	r3, [sp, #32]
 80056f8:	4659      	mov	r1, fp
 80056fa:	2300      	movs	r3, #0
 80056fc:	4e77      	ldr	r6, [pc, #476]	@ (80058dc <_strtod_l+0x78c>)
 80056fe:	07e7      	lsls	r7, r4, #31
 8005700:	d504      	bpl.n	800570c <_strtod_l+0x5bc>
 8005702:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005706:	f7fa fee7 	bl	80004d8 <__aeabi_dmul>
 800570a:	2301      	movs	r3, #1
 800570c:	1064      	asrs	r4, r4, #1
 800570e:	f106 0608 	add.w	r6, r6, #8
 8005712:	d1f4      	bne.n	80056fe <_strtod_l+0x5ae>
 8005714:	b10b      	cbz	r3, 800571a <_strtod_l+0x5ca>
 8005716:	4682      	mov	sl, r0
 8005718:	468b      	mov	fp, r1
 800571a:	9b08      	ldr	r3, [sp, #32]
 800571c:	b1b3      	cbz	r3, 800574c <_strtod_l+0x5fc>
 800571e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005722:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005726:	2b00      	cmp	r3, #0
 8005728:	4659      	mov	r1, fp
 800572a:	dd0f      	ble.n	800574c <_strtod_l+0x5fc>
 800572c:	2b1f      	cmp	r3, #31
 800572e:	dd58      	ble.n	80057e2 <_strtod_l+0x692>
 8005730:	2b34      	cmp	r3, #52	@ 0x34
 8005732:	bfd8      	it	le
 8005734:	f04f 33ff 	movle.w	r3, #4294967295
 8005738:	f04f 0a00 	mov.w	sl, #0
 800573c:	bfcf      	iteee	gt
 800573e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005742:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005746:	4093      	lslle	r3, r2
 8005748:	ea03 0b01 	andle.w	fp, r3, r1
 800574c:	2200      	movs	r2, #0
 800574e:	2300      	movs	r3, #0
 8005750:	4650      	mov	r0, sl
 8005752:	4659      	mov	r1, fp
 8005754:	f7fb f928 	bl	80009a8 <__aeabi_dcmpeq>
 8005758:	2800      	cmp	r0, #0
 800575a:	d1a7      	bne.n	80056ac <_strtod_l+0x55c>
 800575c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800575e:	464a      	mov	r2, r9
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005764:	462b      	mov	r3, r5
 8005766:	9805      	ldr	r0, [sp, #20]
 8005768:	f002 fd14 	bl	8008194 <__s2b>
 800576c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f af09 	beq.w	8005586 <_strtod_l+0x436>
 8005774:	2400      	movs	r4, #0
 8005776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800577a:	2a00      	cmp	r2, #0
 800577c:	eba3 0308 	sub.w	r3, r3, r8
 8005780:	bfa8      	it	ge
 8005782:	2300      	movge	r3, #0
 8005784:	46a0      	mov	r8, r4
 8005786:	9312      	str	r3, [sp, #72]	@ 0x48
 8005788:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800578c:	9316      	str	r3, [sp, #88]	@ 0x58
 800578e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005790:	9805      	ldr	r0, [sp, #20]
 8005792:	6859      	ldr	r1, [r3, #4]
 8005794:	f002 fc56 	bl	8008044 <_Balloc>
 8005798:	4681      	mov	r9, r0
 800579a:	2800      	cmp	r0, #0
 800579c:	f43f aef7 	beq.w	800558e <_strtod_l+0x43e>
 80057a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057a2:	300c      	adds	r0, #12
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	f103 010c 	add.w	r1, r3, #12
 80057aa:	3202      	adds	r2, #2
 80057ac:	0092      	lsls	r2, r2, #2
 80057ae:	f001 f96e 	bl	8006a8e <memcpy>
 80057b2:	ab1c      	add	r3, sp, #112	@ 0x70
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	4652      	mov	r2, sl
 80057bc:	465b      	mov	r3, fp
 80057be:	9805      	ldr	r0, [sp, #20]
 80057c0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80057c4:	f003 f812 	bl	80087ec <__d2b>
 80057c8:	901a      	str	r0, [sp, #104]	@ 0x68
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f43f aedf 	beq.w	800558e <_strtod_l+0x43e>
 80057d0:	2101      	movs	r1, #1
 80057d2:	9805      	ldr	r0, [sp, #20]
 80057d4:	f002 fd74 	bl	80082c0 <__i2b>
 80057d8:	4680      	mov	r8, r0
 80057da:	b948      	cbnz	r0, 80057f0 <_strtod_l+0x6a0>
 80057dc:	f04f 0800 	mov.w	r8, #0
 80057e0:	e6d5      	b.n	800558e <_strtod_l+0x43e>
 80057e2:	f04f 32ff 	mov.w	r2, #4294967295
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	ea03 0a0a 	and.w	sl, r3, sl
 80057ee:	e7ad      	b.n	800574c <_strtod_l+0x5fc>
 80057f0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80057f2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80057f4:	2d00      	cmp	r5, #0
 80057f6:	bfab      	itete	ge
 80057f8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80057fa:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80057fc:	18ef      	addge	r7, r5, r3
 80057fe:	1b5e      	sublt	r6, r3, r5
 8005800:	9b08      	ldr	r3, [sp, #32]
 8005802:	bfa8      	it	ge
 8005804:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005806:	eba5 0503 	sub.w	r5, r5, r3
 800580a:	4415      	add	r5, r2
 800580c:	4b34      	ldr	r3, [pc, #208]	@ (80058e0 <_strtod_l+0x790>)
 800580e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005812:	bfb8      	it	lt
 8005814:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005816:	429d      	cmp	r5, r3
 8005818:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800581c:	da50      	bge.n	80058c0 <_strtod_l+0x770>
 800581e:	1b5b      	subs	r3, r3, r5
 8005820:	2b1f      	cmp	r3, #31
 8005822:	f04f 0101 	mov.w	r1, #1
 8005826:	eba2 0203 	sub.w	r2, r2, r3
 800582a:	dc3d      	bgt.n	80058a8 <_strtod_l+0x758>
 800582c:	fa01 f303 	lsl.w	r3, r1, r3
 8005830:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005832:	2300      	movs	r3, #0
 8005834:	9310      	str	r3, [sp, #64]	@ 0x40
 8005836:	18bd      	adds	r5, r7, r2
 8005838:	9b08      	ldr	r3, [sp, #32]
 800583a:	42af      	cmp	r7, r5
 800583c:	4416      	add	r6, r2
 800583e:	441e      	add	r6, r3
 8005840:	463b      	mov	r3, r7
 8005842:	bfa8      	it	ge
 8005844:	462b      	movge	r3, r5
 8005846:	42b3      	cmp	r3, r6
 8005848:	bfa8      	it	ge
 800584a:	4633      	movge	r3, r6
 800584c:	2b00      	cmp	r3, #0
 800584e:	bfc2      	ittt	gt
 8005850:	1aed      	subgt	r5, r5, r3
 8005852:	1af6      	subgt	r6, r6, r3
 8005854:	1aff      	subgt	r7, r7, r3
 8005856:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005858:	2b00      	cmp	r3, #0
 800585a:	dd16      	ble.n	800588a <_strtod_l+0x73a>
 800585c:	4641      	mov	r1, r8
 800585e:	461a      	mov	r2, r3
 8005860:	9805      	ldr	r0, [sp, #20]
 8005862:	f002 fde5 	bl	8008430 <__pow5mult>
 8005866:	4680      	mov	r8, r0
 8005868:	2800      	cmp	r0, #0
 800586a:	d0b7      	beq.n	80057dc <_strtod_l+0x68c>
 800586c:	4601      	mov	r1, r0
 800586e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005870:	9805      	ldr	r0, [sp, #20]
 8005872:	f002 fd3b 	bl	80082ec <__multiply>
 8005876:	900a      	str	r0, [sp, #40]	@ 0x28
 8005878:	2800      	cmp	r0, #0
 800587a:	f43f ae88 	beq.w	800558e <_strtod_l+0x43e>
 800587e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005880:	9805      	ldr	r0, [sp, #20]
 8005882:	f002 fc1f 	bl	80080c4 <_Bfree>
 8005886:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005888:	931a      	str	r3, [sp, #104]	@ 0x68
 800588a:	2d00      	cmp	r5, #0
 800588c:	dc1d      	bgt.n	80058ca <_strtod_l+0x77a>
 800588e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	dd27      	ble.n	80058e4 <_strtod_l+0x794>
 8005894:	4649      	mov	r1, r9
 8005896:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005898:	9805      	ldr	r0, [sp, #20]
 800589a:	f002 fdc9 	bl	8008430 <__pow5mult>
 800589e:	4681      	mov	r9, r0
 80058a0:	bb00      	cbnz	r0, 80058e4 <_strtod_l+0x794>
 80058a2:	f04f 0900 	mov.w	r9, #0
 80058a6:	e672      	b.n	800558e <_strtod_l+0x43e>
 80058a8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80058ac:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80058b0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80058b4:	35e2      	adds	r5, #226	@ 0xe2
 80058b6:	fa01 f305 	lsl.w	r3, r1, r5
 80058ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80058bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80058be:	e7ba      	b.n	8005836 <_strtod_l+0x6e6>
 80058c0:	2300      	movs	r3, #0
 80058c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80058c4:	2301      	movs	r3, #1
 80058c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058c8:	e7b5      	b.n	8005836 <_strtod_l+0x6e6>
 80058ca:	462a      	mov	r2, r5
 80058cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058ce:	9805      	ldr	r0, [sp, #20]
 80058d0:	f002 fe08 	bl	80084e4 <__lshift>
 80058d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d1d9      	bne.n	800588e <_strtod_l+0x73e>
 80058da:	e658      	b.n	800558e <_strtod_l+0x43e>
 80058dc:	08009820 	.word	0x08009820
 80058e0:	fffffc02 	.word	0xfffffc02
 80058e4:	2e00      	cmp	r6, #0
 80058e6:	dd07      	ble.n	80058f8 <_strtod_l+0x7a8>
 80058e8:	4649      	mov	r1, r9
 80058ea:	4632      	mov	r2, r6
 80058ec:	9805      	ldr	r0, [sp, #20]
 80058ee:	f002 fdf9 	bl	80084e4 <__lshift>
 80058f2:	4681      	mov	r9, r0
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d0d4      	beq.n	80058a2 <_strtod_l+0x752>
 80058f8:	2f00      	cmp	r7, #0
 80058fa:	dd08      	ble.n	800590e <_strtod_l+0x7be>
 80058fc:	4641      	mov	r1, r8
 80058fe:	463a      	mov	r2, r7
 8005900:	9805      	ldr	r0, [sp, #20]
 8005902:	f002 fdef 	bl	80084e4 <__lshift>
 8005906:	4680      	mov	r8, r0
 8005908:	2800      	cmp	r0, #0
 800590a:	f43f ae40 	beq.w	800558e <_strtod_l+0x43e>
 800590e:	464a      	mov	r2, r9
 8005910:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005912:	9805      	ldr	r0, [sp, #20]
 8005914:	f002 fe6e 	bl	80085f4 <__mdiff>
 8005918:	4604      	mov	r4, r0
 800591a:	2800      	cmp	r0, #0
 800591c:	f43f ae37 	beq.w	800558e <_strtod_l+0x43e>
 8005920:	68c3      	ldr	r3, [r0, #12]
 8005922:	4641      	mov	r1, r8
 8005924:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005926:	2300      	movs	r3, #0
 8005928:	60c3      	str	r3, [r0, #12]
 800592a:	f002 fe47 	bl	80085bc <__mcmp>
 800592e:	2800      	cmp	r0, #0
 8005930:	da3d      	bge.n	80059ae <_strtod_l+0x85e>
 8005932:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005934:	ea53 030a 	orrs.w	r3, r3, sl
 8005938:	d163      	bne.n	8005a02 <_strtod_l+0x8b2>
 800593a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800593e:	2b00      	cmp	r3, #0
 8005940:	d15f      	bne.n	8005a02 <_strtod_l+0x8b2>
 8005942:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005946:	0d1b      	lsrs	r3, r3, #20
 8005948:	051b      	lsls	r3, r3, #20
 800594a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800594e:	d958      	bls.n	8005a02 <_strtod_l+0x8b2>
 8005950:	6963      	ldr	r3, [r4, #20]
 8005952:	b913      	cbnz	r3, 800595a <_strtod_l+0x80a>
 8005954:	6923      	ldr	r3, [r4, #16]
 8005956:	2b01      	cmp	r3, #1
 8005958:	dd53      	ble.n	8005a02 <_strtod_l+0x8b2>
 800595a:	4621      	mov	r1, r4
 800595c:	2201      	movs	r2, #1
 800595e:	9805      	ldr	r0, [sp, #20]
 8005960:	f002 fdc0 	bl	80084e4 <__lshift>
 8005964:	4641      	mov	r1, r8
 8005966:	4604      	mov	r4, r0
 8005968:	f002 fe28 	bl	80085bc <__mcmp>
 800596c:	2800      	cmp	r0, #0
 800596e:	dd48      	ble.n	8005a02 <_strtod_l+0x8b2>
 8005970:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005974:	9a08      	ldr	r2, [sp, #32]
 8005976:	0d1b      	lsrs	r3, r3, #20
 8005978:	051b      	lsls	r3, r3, #20
 800597a:	2a00      	cmp	r2, #0
 800597c:	d062      	beq.n	8005a44 <_strtod_l+0x8f4>
 800597e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005982:	d85f      	bhi.n	8005a44 <_strtod_l+0x8f4>
 8005984:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005988:	f67f ae94 	bls.w	80056b4 <_strtod_l+0x564>
 800598c:	4650      	mov	r0, sl
 800598e:	4659      	mov	r1, fp
 8005990:	4ba3      	ldr	r3, [pc, #652]	@ (8005c20 <_strtod_l+0xad0>)
 8005992:	2200      	movs	r2, #0
 8005994:	f7fa fda0 	bl	80004d8 <__aeabi_dmul>
 8005998:	4ba2      	ldr	r3, [pc, #648]	@ (8005c24 <_strtod_l+0xad4>)
 800599a:	4682      	mov	sl, r0
 800599c:	400b      	ands	r3, r1
 800599e:	468b      	mov	fp, r1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f47f adff 	bne.w	80055a4 <_strtod_l+0x454>
 80059a6:	2322      	movs	r3, #34	@ 0x22
 80059a8:	9a05      	ldr	r2, [sp, #20]
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e5fa      	b.n	80055a4 <_strtod_l+0x454>
 80059ae:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80059b2:	d165      	bne.n	8005a80 <_strtod_l+0x930>
 80059b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80059b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059ba:	b35a      	cbz	r2, 8005a14 <_strtod_l+0x8c4>
 80059bc:	4a9a      	ldr	r2, [pc, #616]	@ (8005c28 <_strtod_l+0xad8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d12b      	bne.n	8005a1a <_strtod_l+0x8ca>
 80059c2:	9b08      	ldr	r3, [sp, #32]
 80059c4:	4651      	mov	r1, sl
 80059c6:	b303      	cbz	r3, 8005a0a <_strtod_l+0x8ba>
 80059c8:	465a      	mov	r2, fp
 80059ca:	4b96      	ldr	r3, [pc, #600]	@ (8005c24 <_strtod_l+0xad4>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295
 80059d6:	d81b      	bhi.n	8005a10 <_strtod_l+0x8c0>
 80059d8:	0d1b      	lsrs	r3, r3, #20
 80059da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d119      	bne.n	8005a1a <_strtod_l+0x8ca>
 80059e6:	4b91      	ldr	r3, [pc, #580]	@ (8005c2c <_strtod_l+0xadc>)
 80059e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d102      	bne.n	80059f4 <_strtod_l+0x8a4>
 80059ee:	3101      	adds	r1, #1
 80059f0:	f43f adcd 	beq.w	800558e <_strtod_l+0x43e>
 80059f4:	f04f 0a00 	mov.w	sl, #0
 80059f8:	4b8a      	ldr	r3, [pc, #552]	@ (8005c24 <_strtod_l+0xad4>)
 80059fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059fc:	401a      	ands	r2, r3
 80059fe:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005a02:	9b08      	ldr	r3, [sp, #32]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1c1      	bne.n	800598c <_strtod_l+0x83c>
 8005a08:	e5cc      	b.n	80055a4 <_strtod_l+0x454>
 8005a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0e:	e7e8      	b.n	80059e2 <_strtod_l+0x892>
 8005a10:	4613      	mov	r3, r2
 8005a12:	e7e6      	b.n	80059e2 <_strtod_l+0x892>
 8005a14:	ea53 030a 	orrs.w	r3, r3, sl
 8005a18:	d0aa      	beq.n	8005970 <_strtod_l+0x820>
 8005a1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a1c:	b1db      	cbz	r3, 8005a56 <_strtod_l+0x906>
 8005a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a20:	4213      	tst	r3, r2
 8005a22:	d0ee      	beq.n	8005a02 <_strtod_l+0x8b2>
 8005a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a26:	4650      	mov	r0, sl
 8005a28:	4659      	mov	r1, fp
 8005a2a:	9a08      	ldr	r2, [sp, #32]
 8005a2c:	b1bb      	cbz	r3, 8005a5e <_strtod_l+0x90e>
 8005a2e:	f7ff fb6e 	bl	800510e <sulp>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a3a:	f7fa fb97 	bl	800016c <__adddf3>
 8005a3e:	4682      	mov	sl, r0
 8005a40:	468b      	mov	fp, r1
 8005a42:	e7de      	b.n	8005a02 <_strtod_l+0x8b2>
 8005a44:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005a48:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a4c:	f04f 3aff 	mov.w	sl, #4294967295
 8005a50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a54:	e7d5      	b.n	8005a02 <_strtod_l+0x8b2>
 8005a56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005a58:	ea13 0f0a 	tst.w	r3, sl
 8005a5c:	e7e1      	b.n	8005a22 <_strtod_l+0x8d2>
 8005a5e:	f7ff fb56 	bl	800510e <sulp>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a6a:	f7fa fb7d 	bl	8000168 <__aeabi_dsub>
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2300      	movs	r3, #0
 8005a72:	4682      	mov	sl, r0
 8005a74:	468b      	mov	fp, r1
 8005a76:	f7fa ff97 	bl	80009a8 <__aeabi_dcmpeq>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d0c1      	beq.n	8005a02 <_strtod_l+0x8b2>
 8005a7e:	e619      	b.n	80056b4 <_strtod_l+0x564>
 8005a80:	4641      	mov	r1, r8
 8005a82:	4620      	mov	r0, r4
 8005a84:	f002 ff0a 	bl	800889c <__ratio>
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005a8e:	4606      	mov	r6, r0
 8005a90:	460f      	mov	r7, r1
 8005a92:	f7fa ff9d 	bl	80009d0 <__aeabi_dcmple>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d06d      	beq.n	8005b76 <_strtod_l+0xa26>
 8005a9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d178      	bne.n	8005b92 <_strtod_l+0xa42>
 8005aa0:	f1ba 0f00 	cmp.w	sl, #0
 8005aa4:	d156      	bne.n	8005b54 <_strtod_l+0xa04>
 8005aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d158      	bne.n	8005b62 <_strtod_l+0xa12>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	4b5e      	ldr	r3, [pc, #376]	@ (8005c30 <_strtod_l+0xae0>)
 8005ab8:	f7fa ff80 	bl	80009bc <__aeabi_dcmplt>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d157      	bne.n	8005b70 <_strtod_l+0xa20>
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8005c34 <_strtod_l+0xae4>)
 8005ac8:	f7fa fd06 	bl	80004d8 <__aeabi_dmul>
 8005acc:	4606      	mov	r6, r0
 8005ace:	460f      	mov	r7, r1
 8005ad0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005ad4:	9606      	str	r6, [sp, #24]
 8005ad6:	9307      	str	r3, [sp, #28]
 8005ad8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005adc:	4d51      	ldr	r5, [pc, #324]	@ (8005c24 <_strtod_l+0xad4>)
 8005ade:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005ae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ae4:	401d      	ands	r5, r3
 8005ae6:	4b54      	ldr	r3, [pc, #336]	@ (8005c38 <_strtod_l+0xae8>)
 8005ae8:	429d      	cmp	r5, r3
 8005aea:	f040 80ab 	bne.w	8005c44 <_strtod_l+0xaf4>
 8005aee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005af0:	4650      	mov	r0, sl
 8005af2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005af6:	4659      	mov	r1, fp
 8005af8:	f002 fe10 	bl	800871c <__ulp>
 8005afc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b00:	f7fa fcea 	bl	80004d8 <__aeabi_dmul>
 8005b04:	4652      	mov	r2, sl
 8005b06:	465b      	mov	r3, fp
 8005b08:	f7fa fb30 	bl	800016c <__adddf3>
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4945      	ldr	r1, [pc, #276]	@ (8005c24 <_strtod_l+0xad4>)
 8005b10:	4a4a      	ldr	r2, [pc, #296]	@ (8005c3c <_strtod_l+0xaec>)
 8005b12:	4019      	ands	r1, r3
 8005b14:	4291      	cmp	r1, r2
 8005b16:	4682      	mov	sl, r0
 8005b18:	d942      	bls.n	8005ba0 <_strtod_l+0xa50>
 8005b1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b1c:	4b43      	ldr	r3, [pc, #268]	@ (8005c2c <_strtod_l+0xadc>)
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d103      	bne.n	8005b2a <_strtod_l+0x9da>
 8005b22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b24:	3301      	adds	r3, #1
 8005b26:	f43f ad32 	beq.w	800558e <_strtod_l+0x43e>
 8005b2a:	f04f 3aff 	mov.w	sl, #4294967295
 8005b2e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8005c2c <_strtod_l+0xadc>
 8005b32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b34:	9805      	ldr	r0, [sp, #20]
 8005b36:	f002 fac5 	bl	80080c4 <_Bfree>
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	9805      	ldr	r0, [sp, #20]
 8005b3e:	f002 fac1 	bl	80080c4 <_Bfree>
 8005b42:	4641      	mov	r1, r8
 8005b44:	9805      	ldr	r0, [sp, #20]
 8005b46:	f002 fabd 	bl	80080c4 <_Bfree>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	9805      	ldr	r0, [sp, #20]
 8005b4e:	f002 fab9 	bl	80080c4 <_Bfree>
 8005b52:	e61c      	b.n	800578e <_strtod_l+0x63e>
 8005b54:	f1ba 0f01 	cmp.w	sl, #1
 8005b58:	d103      	bne.n	8005b62 <_strtod_l+0xa12>
 8005b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f43f ada9 	beq.w	80056b4 <_strtod_l+0x564>
 8005b62:	2200      	movs	r2, #0
 8005b64:	4b36      	ldr	r3, [pc, #216]	@ (8005c40 <_strtod_l+0xaf0>)
 8005b66:	2600      	movs	r6, #0
 8005b68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b6c:	4f30      	ldr	r7, [pc, #192]	@ (8005c30 <_strtod_l+0xae0>)
 8005b6e:	e7b3      	b.n	8005ad8 <_strtod_l+0x988>
 8005b70:	2600      	movs	r6, #0
 8005b72:	4f30      	ldr	r7, [pc, #192]	@ (8005c34 <_strtod_l+0xae4>)
 8005b74:	e7ac      	b.n	8005ad0 <_strtod_l+0x980>
 8005b76:	4630      	mov	r0, r6
 8005b78:	4639      	mov	r1, r7
 8005b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005c34 <_strtod_l+0xae4>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f7fa fcab 	bl	80004d8 <__aeabi_dmul>
 8005b82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b84:	4606      	mov	r6, r0
 8005b86:	460f      	mov	r7, r1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0a1      	beq.n	8005ad0 <_strtod_l+0x980>
 8005b8c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005b90:	e7a2      	b.n	8005ad8 <_strtod_l+0x988>
 8005b92:	2200      	movs	r2, #0
 8005b94:	4b26      	ldr	r3, [pc, #152]	@ (8005c30 <_strtod_l+0xae0>)
 8005b96:	4616      	mov	r6, r2
 8005b98:	461f      	mov	r7, r3
 8005b9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b9e:	e79b      	b.n	8005ad8 <_strtod_l+0x988>
 8005ba0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005ba4:	9b08      	ldr	r3, [sp, #32]
 8005ba6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1c1      	bne.n	8005b32 <_strtod_l+0x9e2>
 8005bae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005bb2:	0d1b      	lsrs	r3, r3, #20
 8005bb4:	051b      	lsls	r3, r3, #20
 8005bb6:	429d      	cmp	r5, r3
 8005bb8:	d1bb      	bne.n	8005b32 <_strtod_l+0x9e2>
 8005bba:	4630      	mov	r0, r6
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	f7fb fa57 	bl	8001070 <__aeabi_d2lz>
 8005bc2:	f7fa fc5b 	bl	800047c <__aeabi_l2d>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4630      	mov	r0, r6
 8005bcc:	4639      	mov	r1, r7
 8005bce:	f7fa facb 	bl	8000168 <__aeabi_dsub>
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005bda:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005bde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005be0:	ea46 060a 	orr.w	r6, r6, sl
 8005be4:	431e      	orrs	r6, r3
 8005be6:	d06a      	beq.n	8005cbe <_strtod_l+0xb6e>
 8005be8:	a309      	add	r3, pc, #36	@ (adr r3, 8005c10 <_strtod_l+0xac0>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fee5 	bl	80009bc <__aeabi_dcmplt>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f47f acd6 	bne.w	80055a4 <_strtod_l+0x454>
 8005bf8:	a307      	add	r3, pc, #28	@ (adr r3, 8005c18 <_strtod_l+0xac8>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c02:	f7fa fef9 	bl	80009f8 <__aeabi_dcmpgt>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d093      	beq.n	8005b32 <_strtod_l+0x9e2>
 8005c0a:	e4cb      	b.n	80055a4 <_strtod_l+0x454>
 8005c0c:	f3af 8000 	nop.w
 8005c10:	94a03595 	.word	0x94a03595
 8005c14:	3fdfffff 	.word	0x3fdfffff
 8005c18:	35afe535 	.word	0x35afe535
 8005c1c:	3fe00000 	.word	0x3fe00000
 8005c20:	39500000 	.word	0x39500000
 8005c24:	7ff00000 	.word	0x7ff00000
 8005c28:	000fffff 	.word	0x000fffff
 8005c2c:	7fefffff 	.word	0x7fefffff
 8005c30:	3ff00000 	.word	0x3ff00000
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	7fe00000 	.word	0x7fe00000
 8005c3c:	7c9fffff 	.word	0x7c9fffff
 8005c40:	bff00000 	.word	0xbff00000
 8005c44:	9b08      	ldr	r3, [sp, #32]
 8005c46:	b323      	cbz	r3, 8005c92 <_strtod_l+0xb42>
 8005c48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005c4c:	d821      	bhi.n	8005c92 <_strtod_l+0xb42>
 8005c4e:	a328      	add	r3, pc, #160	@ (adr r3, 8005cf0 <_strtod_l+0xba0>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	f7fa feba 	bl	80009d0 <__aeabi_dcmple>
 8005c5c:	b1a0      	cbz	r0, 8005c88 <_strtod_l+0xb38>
 8005c5e:	4639      	mov	r1, r7
 8005c60:	4630      	mov	r0, r6
 8005c62:	f7fa ff11 	bl	8000a88 <__aeabi_d2uiz>
 8005c66:	2801      	cmp	r0, #1
 8005c68:	bf38      	it	cc
 8005c6a:	2001      	movcc	r0, #1
 8005c6c:	f7fa fbba 	bl	80003e4 <__aeabi_ui2d>
 8005c70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c72:	4606      	mov	r6, r0
 8005c74:	460f      	mov	r7, r1
 8005c76:	b9fb      	cbnz	r3, 8005cb8 <_strtod_l+0xb68>
 8005c78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8005c7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8005c80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005c84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005c88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005c8e:	1b5b      	subs	r3, r3, r5
 8005c90:	9311      	str	r3, [sp, #68]	@ 0x44
 8005c92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005c9a:	f002 fd3f 	bl	800871c <__ulp>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	f7fa fc17 	bl	80004d8 <__aeabi_dmul>
 8005caa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005cae:	f7fa fa5d 	bl	800016c <__adddf3>
 8005cb2:	4682      	mov	sl, r0
 8005cb4:	468b      	mov	fp, r1
 8005cb6:	e775      	b.n	8005ba4 <_strtod_l+0xa54>
 8005cb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005cbc:	e7e0      	b.n	8005c80 <_strtod_l+0xb30>
 8005cbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8005cf8 <_strtod_l+0xba8>)
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f7fa fe7a 	bl	80009bc <__aeabi_dcmplt>
 8005cc8:	e79d      	b.n	8005c06 <_strtod_l+0xab6>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	930e      	str	r3, [sp, #56]	@ 0x38
 8005cce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cd0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	f7ff ba79 	b.w	80051ca <_strtod_l+0x7a>
 8005cd8:	2a65      	cmp	r2, #101	@ 0x65
 8005cda:	f43f ab72 	beq.w	80053c2 <_strtod_l+0x272>
 8005cde:	2a45      	cmp	r2, #69	@ 0x45
 8005ce0:	f43f ab6f 	beq.w	80053c2 <_strtod_l+0x272>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f7ff bbaa 	b.w	800543e <_strtod_l+0x2ee>
 8005cea:	bf00      	nop
 8005cec:	f3af 8000 	nop.w
 8005cf0:	ffc00000 	.word	0xffc00000
 8005cf4:	41dfffff 	.word	0x41dfffff
 8005cf8:	94a03595 	.word	0x94a03595
 8005cfc:	3fcfffff 	.word	0x3fcfffff

08005d00 <strtod>:
 8005d00:	460a      	mov	r2, r1
 8005d02:	4601      	mov	r1, r0
 8005d04:	4802      	ldr	r0, [pc, #8]	@ (8005d10 <strtod+0x10>)
 8005d06:	4b03      	ldr	r3, [pc, #12]	@ (8005d14 <strtod+0x14>)
 8005d08:	6800      	ldr	r0, [r0, #0]
 8005d0a:	f7ff ba21 	b.w	8005150 <_strtod_l>
 8005d0e:	bf00      	nop
 8005d10:	200001a4 	.word	0x200001a4
 8005d14:	20000038 	.word	0x20000038

08005d18 <__cvt>:
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d1e:	461d      	mov	r5, r3
 8005d20:	bfbb      	ittet	lt
 8005d22:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005d26:	461d      	movlt	r5, r3
 8005d28:	2300      	movge	r3, #0
 8005d2a:	232d      	movlt	r3, #45	@ 0x2d
 8005d2c:	b088      	sub	sp, #32
 8005d2e:	4614      	mov	r4, r2
 8005d30:	bfb8      	it	lt
 8005d32:	4614      	movlt	r4, r2
 8005d34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d36:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005d38:	7013      	strb	r3, [r2, #0]
 8005d3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005d40:	f023 0820 	bic.w	r8, r3, #32
 8005d44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d48:	d005      	beq.n	8005d56 <__cvt+0x3e>
 8005d4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d4e:	d100      	bne.n	8005d52 <__cvt+0x3a>
 8005d50:	3601      	adds	r6, #1
 8005d52:	2302      	movs	r3, #2
 8005d54:	e000      	b.n	8005d58 <__cvt+0x40>
 8005d56:	2303      	movs	r3, #3
 8005d58:	aa07      	add	r2, sp, #28
 8005d5a:	9204      	str	r2, [sp, #16]
 8005d5c:	aa06      	add	r2, sp, #24
 8005d5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d62:	e9cd 3600 	strd	r3, r6, [sp]
 8005d66:	4622      	mov	r2, r4
 8005d68:	462b      	mov	r3, r5
 8005d6a:	f000 ff4d 	bl	8006c08 <_dtoa_r>
 8005d6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d72:	4607      	mov	r7, r0
 8005d74:	d119      	bne.n	8005daa <__cvt+0x92>
 8005d76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d78:	07db      	lsls	r3, r3, #31
 8005d7a:	d50e      	bpl.n	8005d9a <__cvt+0x82>
 8005d7c:	eb00 0906 	add.w	r9, r0, r6
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	4620      	mov	r0, r4
 8005d86:	4629      	mov	r1, r5
 8005d88:	f7fa fe0e 	bl	80009a8 <__aeabi_dcmpeq>
 8005d8c:	b108      	cbz	r0, 8005d92 <__cvt+0x7a>
 8005d8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d92:	2230      	movs	r2, #48	@ 0x30
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	454b      	cmp	r3, r9
 8005d98:	d31e      	bcc.n	8005dd8 <__cvt+0xc0>
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	9b07      	ldr	r3, [sp, #28]
 8005d9e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005da0:	1bdb      	subs	r3, r3, r7
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	b008      	add	sp, #32
 8005da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005daa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dae:	eb00 0906 	add.w	r9, r0, r6
 8005db2:	d1e5      	bne.n	8005d80 <__cvt+0x68>
 8005db4:	7803      	ldrb	r3, [r0, #0]
 8005db6:	2b30      	cmp	r3, #48	@ 0x30
 8005db8:	d10a      	bne.n	8005dd0 <__cvt+0xb8>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	f7fa fdf1 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc6:	b918      	cbnz	r0, 8005dd0 <__cvt+0xb8>
 8005dc8:	f1c6 0601 	rsb	r6, r6, #1
 8005dcc:	f8ca 6000 	str.w	r6, [sl]
 8005dd0:	f8da 3000 	ldr.w	r3, [sl]
 8005dd4:	4499      	add	r9, r3
 8005dd6:	e7d3      	b.n	8005d80 <__cvt+0x68>
 8005dd8:	1c59      	adds	r1, r3, #1
 8005dda:	9107      	str	r1, [sp, #28]
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e7d9      	b.n	8005d94 <__cvt+0x7c>

08005de0 <__exponent>:
 8005de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005de2:	2900      	cmp	r1, #0
 8005de4:	bfb6      	itet	lt
 8005de6:	232d      	movlt	r3, #45	@ 0x2d
 8005de8:	232b      	movge	r3, #43	@ 0x2b
 8005dea:	4249      	neglt	r1, r1
 8005dec:	2909      	cmp	r1, #9
 8005dee:	7002      	strb	r2, [r0, #0]
 8005df0:	7043      	strb	r3, [r0, #1]
 8005df2:	dd29      	ble.n	8005e48 <__exponent+0x68>
 8005df4:	f10d 0307 	add.w	r3, sp, #7
 8005df8:	461d      	mov	r5, r3
 8005dfa:	270a      	movs	r7, #10
 8005dfc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e00:	461a      	mov	r2, r3
 8005e02:	fb07 1416 	mls	r4, r7, r6, r1
 8005e06:	3430      	adds	r4, #48	@ 0x30
 8005e08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	2c63      	cmp	r4, #99	@ 0x63
 8005e10:	4631      	mov	r1, r6
 8005e12:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e16:	dcf1      	bgt.n	8005dfc <__exponent+0x1c>
 8005e18:	3130      	adds	r1, #48	@ 0x30
 8005e1a:	1e94      	subs	r4, r2, #2
 8005e1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e20:	4623      	mov	r3, r4
 8005e22:	1c41      	adds	r1, r0, #1
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	d30a      	bcc.n	8005e3e <__exponent+0x5e>
 8005e28:	f10d 0309 	add.w	r3, sp, #9
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	42ac      	cmp	r4, r5
 8005e30:	bf88      	it	hi
 8005e32:	2300      	movhi	r3, #0
 8005e34:	3302      	adds	r3, #2
 8005e36:	4403      	add	r3, r0
 8005e38:	1a18      	subs	r0, r3, r0
 8005e3a:	b003      	add	sp, #12
 8005e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e46:	e7ed      	b.n	8005e24 <__exponent+0x44>
 8005e48:	2330      	movs	r3, #48	@ 0x30
 8005e4a:	3130      	adds	r1, #48	@ 0x30
 8005e4c:	7083      	strb	r3, [r0, #2]
 8005e4e:	70c1      	strb	r1, [r0, #3]
 8005e50:	1d03      	adds	r3, r0, #4
 8005e52:	e7f1      	b.n	8005e38 <__exponent+0x58>

08005e54 <_printf_float>:
 8005e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	b091      	sub	sp, #68	@ 0x44
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005e60:	4616      	mov	r6, r2
 8005e62:	461f      	mov	r7, r3
 8005e64:	4605      	mov	r5, r0
 8005e66:	f000 fd85 	bl	8006974 <_localeconv_r>
 8005e6a:	6803      	ldr	r3, [r0, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	9308      	str	r3, [sp, #32]
 8005e70:	f7fa f96e 	bl	8000150 <strlen>
 8005e74:	2300      	movs	r3, #0
 8005e76:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e78:	f8d8 3000 	ldr.w	r3, [r8]
 8005e7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005e7e:	3307      	adds	r3, #7
 8005e80:	f023 0307 	bic.w	r3, r3, #7
 8005e84:	f103 0208 	add.w	r2, r3, #8
 8005e88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005e90:	f8c8 2000 	str.w	r2, [r8]
 8005e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e9e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005eaa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005eae:	4b9c      	ldr	r3, [pc, #624]	@ (8006120 <_printf_float+0x2cc>)
 8005eb0:	f7fa fdac 	bl	8000a0c <__aeabi_dcmpun>
 8005eb4:	bb70      	cbnz	r0, 8005f14 <_printf_float+0xc0>
 8005eb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebe:	4b98      	ldr	r3, [pc, #608]	@ (8006120 <_printf_float+0x2cc>)
 8005ec0:	f7fa fd86 	bl	80009d0 <__aeabi_dcmple>
 8005ec4:	bb30      	cbnz	r0, 8005f14 <_printf_float+0xc0>
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4640      	mov	r0, r8
 8005ecc:	4649      	mov	r1, r9
 8005ece:	f7fa fd75 	bl	80009bc <__aeabi_dcmplt>
 8005ed2:	b110      	cbz	r0, 8005eda <_printf_float+0x86>
 8005ed4:	232d      	movs	r3, #45	@ 0x2d
 8005ed6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eda:	4a92      	ldr	r2, [pc, #584]	@ (8006124 <_printf_float+0x2d0>)
 8005edc:	4b92      	ldr	r3, [pc, #584]	@ (8006128 <_printf_float+0x2d4>)
 8005ede:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ee2:	bf8c      	ite	hi
 8005ee4:	4690      	movhi	r8, r2
 8005ee6:	4698      	movls	r8, r3
 8005ee8:	2303      	movs	r3, #3
 8005eea:	f04f 0900 	mov.w	r9, #0
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	f02b 0304 	bic.w	r3, fp, #4
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	4633      	mov	r3, r6
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4628      	mov	r0, r5
 8005efc:	9700      	str	r7, [sp, #0]
 8005efe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005f00:	f000 f9d4 	bl	80062ac <_printf_common>
 8005f04:	3001      	adds	r0, #1
 8005f06:	f040 8090 	bne.w	800602a <_printf_float+0x1d6>
 8005f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0e:	b011      	add	sp, #68	@ 0x44
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa fd76 	bl	8000a0c <__aeabi_dcmpun>
 8005f20:	b148      	cbz	r0, 8005f36 <_printf_float+0xe2>
 8005f22:	464b      	mov	r3, r9
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bfb8      	it	lt
 8005f28:	232d      	movlt	r3, #45	@ 0x2d
 8005f2a:	4a80      	ldr	r2, [pc, #512]	@ (800612c <_printf_float+0x2d8>)
 8005f2c:	bfb8      	it	lt
 8005f2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f32:	4b7f      	ldr	r3, [pc, #508]	@ (8006130 <_printf_float+0x2dc>)
 8005f34:	e7d3      	b.n	8005ede <_printf_float+0x8a>
 8005f36:	6863      	ldr	r3, [r4, #4]
 8005f38:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	d13f      	bne.n	8005fc0 <_printf_float+0x16c>
 8005f40:	2306      	movs	r3, #6
 8005f42:	6063      	str	r3, [r4, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	9206      	str	r2, [sp, #24]
 8005f4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005f50:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005f54:	aa0d      	add	r2, sp, #52	@ 0x34
 8005f56:	9203      	str	r2, [sp, #12]
 8005f58:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005f5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f60:	6863      	ldr	r3, [r4, #4]
 8005f62:	4642      	mov	r2, r8
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	4628      	mov	r0, r5
 8005f68:	464b      	mov	r3, r9
 8005f6a:	910a      	str	r1, [sp, #40]	@ 0x28
 8005f6c:	f7ff fed4 	bl	8005d18 <__cvt>
 8005f70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f72:	4680      	mov	r8, r0
 8005f74:	2947      	cmp	r1, #71	@ 0x47
 8005f76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005f78:	d128      	bne.n	8005fcc <_printf_float+0x178>
 8005f7a:	1cc8      	adds	r0, r1, #3
 8005f7c:	db02      	blt.n	8005f84 <_printf_float+0x130>
 8005f7e:	6863      	ldr	r3, [r4, #4]
 8005f80:	4299      	cmp	r1, r3
 8005f82:	dd40      	ble.n	8006006 <_printf_float+0x1b2>
 8005f84:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f88:	fa5f fa8a 	uxtb.w	sl, sl
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	3901      	subs	r1, #1
 8005f90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f94:	910d      	str	r1, [sp, #52]	@ 0x34
 8005f96:	f7ff ff23 	bl	8005de0 <__exponent>
 8005f9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f9c:	4681      	mov	r9, r0
 8005f9e:	1813      	adds	r3, r2, r0
 8005fa0:	2a01      	cmp	r2, #1
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	dc02      	bgt.n	8005fac <_printf_float+0x158>
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	07d2      	lsls	r2, r2, #31
 8005faa:	d501      	bpl.n	8005fb0 <_printf_float+0x15c>
 8005fac:	3301      	adds	r3, #1
 8005fae:	6123      	str	r3, [r4, #16]
 8005fb0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d09e      	beq.n	8005ef6 <_printf_float+0xa2>
 8005fb8:	232d      	movs	r3, #45	@ 0x2d
 8005fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fbe:	e79a      	b.n	8005ef6 <_printf_float+0xa2>
 8005fc0:	2947      	cmp	r1, #71	@ 0x47
 8005fc2:	d1bf      	bne.n	8005f44 <_printf_float+0xf0>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1bd      	bne.n	8005f44 <_printf_float+0xf0>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e7ba      	b.n	8005f42 <_printf_float+0xee>
 8005fcc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fd0:	d9dc      	bls.n	8005f8c <_printf_float+0x138>
 8005fd2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005fd6:	d118      	bne.n	800600a <_printf_float+0x1b6>
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	6863      	ldr	r3, [r4, #4]
 8005fdc:	dd0b      	ble.n	8005ff6 <_printf_float+0x1a2>
 8005fde:	6121      	str	r1, [r4, #16]
 8005fe0:	b913      	cbnz	r3, 8005fe8 <_printf_float+0x194>
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	07d0      	lsls	r0, r2, #31
 8005fe6:	d502      	bpl.n	8005fee <_printf_float+0x19a>
 8005fe8:	3301      	adds	r3, #1
 8005fea:	440b      	add	r3, r1
 8005fec:	6123      	str	r3, [r4, #16]
 8005fee:	f04f 0900 	mov.w	r9, #0
 8005ff2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005ff4:	e7dc      	b.n	8005fb0 <_printf_float+0x15c>
 8005ff6:	b913      	cbnz	r3, 8005ffe <_printf_float+0x1aa>
 8005ff8:	6822      	ldr	r2, [r4, #0]
 8005ffa:	07d2      	lsls	r2, r2, #31
 8005ffc:	d501      	bpl.n	8006002 <_printf_float+0x1ae>
 8005ffe:	3302      	adds	r3, #2
 8006000:	e7f4      	b.n	8005fec <_printf_float+0x198>
 8006002:	2301      	movs	r3, #1
 8006004:	e7f2      	b.n	8005fec <_printf_float+0x198>
 8006006:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800600a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800600c:	4299      	cmp	r1, r3
 800600e:	db05      	blt.n	800601c <_printf_float+0x1c8>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	6121      	str	r1, [r4, #16]
 8006014:	07d8      	lsls	r0, r3, #31
 8006016:	d5ea      	bpl.n	8005fee <_printf_float+0x19a>
 8006018:	1c4b      	adds	r3, r1, #1
 800601a:	e7e7      	b.n	8005fec <_printf_float+0x198>
 800601c:	2900      	cmp	r1, #0
 800601e:	bfcc      	ite	gt
 8006020:	2201      	movgt	r2, #1
 8006022:	f1c1 0202 	rsble	r2, r1, #2
 8006026:	4413      	add	r3, r2
 8006028:	e7e0      	b.n	8005fec <_printf_float+0x198>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	055a      	lsls	r2, r3, #21
 800602e:	d407      	bmi.n	8006040 <_printf_float+0x1ec>
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	4642      	mov	r2, r8
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	d12b      	bne.n	8006096 <_printf_float+0x242>
 800603e:	e764      	b.n	8005f0a <_printf_float+0xb6>
 8006040:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006044:	f240 80dc 	bls.w	8006200 <_printf_float+0x3ac>
 8006048:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800604c:	2200      	movs	r2, #0
 800604e:	2300      	movs	r3, #0
 8006050:	f7fa fcaa 	bl	80009a8 <__aeabi_dcmpeq>
 8006054:	2800      	cmp	r0, #0
 8006056:	d033      	beq.n	80060c0 <_printf_float+0x26c>
 8006058:	2301      	movs	r3, #1
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	4a35      	ldr	r2, [pc, #212]	@ (8006134 <_printf_float+0x2e0>)
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	f43f af51 	beq.w	8005f0a <_printf_float+0xb6>
 8006068:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800606c:	4543      	cmp	r3, r8
 800606e:	db02      	blt.n	8006076 <_printf_float+0x222>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	07d8      	lsls	r0, r3, #31
 8006074:	d50f      	bpl.n	8006096 <_printf_float+0x242>
 8006076:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f af42 	beq.w	8005f0a <_printf_float+0xb6>
 8006086:	f04f 0900 	mov.w	r9, #0
 800608a:	f108 38ff 	add.w	r8, r8, #4294967295
 800608e:	f104 0a1a 	add.w	sl, r4, #26
 8006092:	45c8      	cmp	r8, r9
 8006094:	dc09      	bgt.n	80060aa <_printf_float+0x256>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	079b      	lsls	r3, r3, #30
 800609a:	f100 8102 	bmi.w	80062a2 <_printf_float+0x44e>
 800609e:	68e0      	ldr	r0, [r4, #12]
 80060a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060a2:	4298      	cmp	r0, r3
 80060a4:	bfb8      	it	lt
 80060a6:	4618      	movlt	r0, r3
 80060a8:	e731      	b.n	8005f0e <_printf_float+0xba>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4652      	mov	r2, sl
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	f43f af28 	beq.w	8005f0a <_printf_float+0xb6>
 80060ba:	f109 0901 	add.w	r9, r9, #1
 80060be:	e7e8      	b.n	8006092 <_printf_float+0x23e>
 80060c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dc38      	bgt.n	8006138 <_printf_float+0x2e4>
 80060c6:	2301      	movs	r3, #1
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	4a19      	ldr	r2, [pc, #100]	@ (8006134 <_printf_float+0x2e0>)
 80060ce:	47b8      	blx	r7
 80060d0:	3001      	adds	r0, #1
 80060d2:	f43f af1a 	beq.w	8005f0a <_printf_float+0xb6>
 80060d6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80060da:	ea59 0303 	orrs.w	r3, r9, r3
 80060de:	d102      	bne.n	80060e6 <_printf_float+0x292>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	d5d7      	bpl.n	8006096 <_printf_float+0x242>
 80060e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	f43f af0a 	beq.w	8005f0a <_printf_float+0xb6>
 80060f6:	f04f 0a00 	mov.w	sl, #0
 80060fa:	f104 0b1a 	add.w	fp, r4, #26
 80060fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006100:	425b      	negs	r3, r3
 8006102:	4553      	cmp	r3, sl
 8006104:	dc01      	bgt.n	800610a <_printf_float+0x2b6>
 8006106:	464b      	mov	r3, r9
 8006108:	e793      	b.n	8006032 <_printf_float+0x1de>
 800610a:	2301      	movs	r3, #1
 800610c:	465a      	mov	r2, fp
 800610e:	4631      	mov	r1, r6
 8006110:	4628      	mov	r0, r5
 8006112:	47b8      	blx	r7
 8006114:	3001      	adds	r0, #1
 8006116:	f43f aef8 	beq.w	8005f0a <_printf_float+0xb6>
 800611a:	f10a 0a01 	add.w	sl, sl, #1
 800611e:	e7ee      	b.n	80060fe <_printf_float+0x2aa>
 8006120:	7fefffff 	.word	0x7fefffff
 8006124:	080095d0 	.word	0x080095d0
 8006128:	080095cc 	.word	0x080095cc
 800612c:	080095d8 	.word	0x080095d8
 8006130:	080095d4 	.word	0x080095d4
 8006134:	080095dc 	.word	0x080095dc
 8006138:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800613a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800613e:	4553      	cmp	r3, sl
 8006140:	bfa8      	it	ge
 8006142:	4653      	movge	r3, sl
 8006144:	2b00      	cmp	r3, #0
 8006146:	4699      	mov	r9, r3
 8006148:	dc36      	bgt.n	80061b8 <_printf_float+0x364>
 800614a:	f04f 0b00 	mov.w	fp, #0
 800614e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006152:	f104 021a 	add.w	r2, r4, #26
 8006156:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006158:	930a      	str	r3, [sp, #40]	@ 0x28
 800615a:	eba3 0309 	sub.w	r3, r3, r9
 800615e:	455b      	cmp	r3, fp
 8006160:	dc31      	bgt.n	80061c6 <_printf_float+0x372>
 8006162:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006164:	459a      	cmp	sl, r3
 8006166:	dc3a      	bgt.n	80061de <_printf_float+0x38a>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	07da      	lsls	r2, r3, #31
 800616c:	d437      	bmi.n	80061de <_printf_float+0x38a>
 800616e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006170:	ebaa 0903 	sub.w	r9, sl, r3
 8006174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006176:	ebaa 0303 	sub.w	r3, sl, r3
 800617a:	4599      	cmp	r9, r3
 800617c:	bfa8      	it	ge
 800617e:	4699      	movge	r9, r3
 8006180:	f1b9 0f00 	cmp.w	r9, #0
 8006184:	dc33      	bgt.n	80061ee <_printf_float+0x39a>
 8006186:	f04f 0800 	mov.w	r8, #0
 800618a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800618e:	f104 0b1a 	add.w	fp, r4, #26
 8006192:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006194:	ebaa 0303 	sub.w	r3, sl, r3
 8006198:	eba3 0309 	sub.w	r3, r3, r9
 800619c:	4543      	cmp	r3, r8
 800619e:	f77f af7a 	ble.w	8006096 <_printf_float+0x242>
 80061a2:	2301      	movs	r3, #1
 80061a4:	465a      	mov	r2, fp
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	f43f aeac 	beq.w	8005f0a <_printf_float+0xb6>
 80061b2:	f108 0801 	add.w	r8, r8, #1
 80061b6:	e7ec      	b.n	8006192 <_printf_float+0x33e>
 80061b8:	4642      	mov	r2, r8
 80061ba:	4631      	mov	r1, r6
 80061bc:	4628      	mov	r0, r5
 80061be:	47b8      	blx	r7
 80061c0:	3001      	adds	r0, #1
 80061c2:	d1c2      	bne.n	800614a <_printf_float+0x2f6>
 80061c4:	e6a1      	b.n	8005f0a <_printf_float+0xb6>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4631      	mov	r1, r6
 80061ca:	4628      	mov	r0, r5
 80061cc:	920a      	str	r2, [sp, #40]	@ 0x28
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f ae9a 	beq.w	8005f0a <_printf_float+0xb6>
 80061d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061d8:	f10b 0b01 	add.w	fp, fp, #1
 80061dc:	e7bb      	b.n	8006156 <_printf_float+0x302>
 80061de:	4631      	mov	r1, r6
 80061e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061e4:	4628      	mov	r0, r5
 80061e6:	47b8      	blx	r7
 80061e8:	3001      	adds	r0, #1
 80061ea:	d1c0      	bne.n	800616e <_printf_float+0x31a>
 80061ec:	e68d      	b.n	8005f0a <_printf_float+0xb6>
 80061ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061f0:	464b      	mov	r3, r9
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	4442      	add	r2, r8
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	d1c3      	bne.n	8006186 <_printf_float+0x332>
 80061fe:	e684      	b.n	8005f0a <_printf_float+0xb6>
 8006200:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006204:	f1ba 0f01 	cmp.w	sl, #1
 8006208:	dc01      	bgt.n	800620e <_printf_float+0x3ba>
 800620a:	07db      	lsls	r3, r3, #31
 800620c:	d536      	bpl.n	800627c <_printf_float+0x428>
 800620e:	2301      	movs	r3, #1
 8006210:	4642      	mov	r2, r8
 8006212:	4631      	mov	r1, r6
 8006214:	4628      	mov	r0, r5
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	f43f ae76 	beq.w	8005f0a <_printf_float+0xb6>
 800621e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006222:	4631      	mov	r1, r6
 8006224:	4628      	mov	r0, r5
 8006226:	47b8      	blx	r7
 8006228:	3001      	adds	r0, #1
 800622a:	f43f ae6e 	beq.w	8005f0a <_printf_float+0xb6>
 800622e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006232:	2200      	movs	r2, #0
 8006234:	2300      	movs	r3, #0
 8006236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800623a:	f7fa fbb5 	bl	80009a8 <__aeabi_dcmpeq>
 800623e:	b9c0      	cbnz	r0, 8006272 <_printf_float+0x41e>
 8006240:	4653      	mov	r3, sl
 8006242:	f108 0201 	add.w	r2, r8, #1
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	d10c      	bne.n	800626a <_printf_float+0x416>
 8006250:	e65b      	b.n	8005f0a <_printf_float+0xb6>
 8006252:	2301      	movs	r3, #1
 8006254:	465a      	mov	r2, fp
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	f43f ae54 	beq.w	8005f0a <_printf_float+0xb6>
 8006262:	f108 0801 	add.w	r8, r8, #1
 8006266:	45d0      	cmp	r8, sl
 8006268:	dbf3      	blt.n	8006252 <_printf_float+0x3fe>
 800626a:	464b      	mov	r3, r9
 800626c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006270:	e6e0      	b.n	8006034 <_printf_float+0x1e0>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	f104 0b1a 	add.w	fp, r4, #26
 800627a:	e7f4      	b.n	8006266 <_printf_float+0x412>
 800627c:	2301      	movs	r3, #1
 800627e:	4642      	mov	r2, r8
 8006280:	e7e1      	b.n	8006246 <_printf_float+0x3f2>
 8006282:	2301      	movs	r3, #1
 8006284:	464a      	mov	r2, r9
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	f43f ae3c 	beq.w	8005f0a <_printf_float+0xb6>
 8006292:	f108 0801 	add.w	r8, r8, #1
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800629a:	1a5b      	subs	r3, r3, r1
 800629c:	4543      	cmp	r3, r8
 800629e:	dcf0      	bgt.n	8006282 <_printf_float+0x42e>
 80062a0:	e6fd      	b.n	800609e <_printf_float+0x24a>
 80062a2:	f04f 0800 	mov.w	r8, #0
 80062a6:	f104 0919 	add.w	r9, r4, #25
 80062aa:	e7f4      	b.n	8006296 <_printf_float+0x442>

080062ac <_printf_common>:
 80062ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b0:	4616      	mov	r6, r2
 80062b2:	4698      	mov	r8, r3
 80062b4:	688a      	ldr	r2, [r1, #8]
 80062b6:	690b      	ldr	r3, [r1, #16]
 80062b8:	4607      	mov	r7, r0
 80062ba:	4293      	cmp	r3, r2
 80062bc:	bfb8      	it	lt
 80062be:	4613      	movlt	r3, r2
 80062c0:	6033      	str	r3, [r6, #0]
 80062c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062c6:	460c      	mov	r4, r1
 80062c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062cc:	b10a      	cbz	r2, 80062d2 <_printf_common+0x26>
 80062ce:	3301      	adds	r3, #1
 80062d0:	6033      	str	r3, [r6, #0]
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	0699      	lsls	r1, r3, #26
 80062d6:	bf42      	ittt	mi
 80062d8:	6833      	ldrmi	r3, [r6, #0]
 80062da:	3302      	addmi	r3, #2
 80062dc:	6033      	strmi	r3, [r6, #0]
 80062de:	6825      	ldr	r5, [r4, #0]
 80062e0:	f015 0506 	ands.w	r5, r5, #6
 80062e4:	d106      	bne.n	80062f4 <_printf_common+0x48>
 80062e6:	f104 0a19 	add.w	sl, r4, #25
 80062ea:	68e3      	ldr	r3, [r4, #12]
 80062ec:	6832      	ldr	r2, [r6, #0]
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dc2b      	bgt.n	800634c <_printf_common+0xa0>
 80062f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	3b00      	subs	r3, #0
 80062fc:	bf18      	it	ne
 80062fe:	2301      	movne	r3, #1
 8006300:	0692      	lsls	r2, r2, #26
 8006302:	d430      	bmi.n	8006366 <_printf_common+0xba>
 8006304:	4641      	mov	r1, r8
 8006306:	4638      	mov	r0, r7
 8006308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800630c:	47c8      	blx	r9
 800630e:	3001      	adds	r0, #1
 8006310:	d023      	beq.n	800635a <_printf_common+0xae>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	6922      	ldr	r2, [r4, #16]
 8006316:	f003 0306 	and.w	r3, r3, #6
 800631a:	2b04      	cmp	r3, #4
 800631c:	bf14      	ite	ne
 800631e:	2500      	movne	r5, #0
 8006320:	6833      	ldreq	r3, [r6, #0]
 8006322:	f04f 0600 	mov.w	r6, #0
 8006326:	bf08      	it	eq
 8006328:	68e5      	ldreq	r5, [r4, #12]
 800632a:	f104 041a 	add.w	r4, r4, #26
 800632e:	bf08      	it	eq
 8006330:	1aed      	subeq	r5, r5, r3
 8006332:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006336:	bf08      	it	eq
 8006338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800633c:	4293      	cmp	r3, r2
 800633e:	bfc4      	itt	gt
 8006340:	1a9b      	subgt	r3, r3, r2
 8006342:	18ed      	addgt	r5, r5, r3
 8006344:	42b5      	cmp	r5, r6
 8006346:	d11a      	bne.n	800637e <_printf_common+0xd2>
 8006348:	2000      	movs	r0, #0
 800634a:	e008      	b.n	800635e <_printf_common+0xb2>
 800634c:	2301      	movs	r3, #1
 800634e:	4652      	mov	r2, sl
 8006350:	4641      	mov	r1, r8
 8006352:	4638      	mov	r0, r7
 8006354:	47c8      	blx	r9
 8006356:	3001      	adds	r0, #1
 8006358:	d103      	bne.n	8006362 <_printf_common+0xb6>
 800635a:	f04f 30ff 	mov.w	r0, #4294967295
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006362:	3501      	adds	r5, #1
 8006364:	e7c1      	b.n	80062ea <_printf_common+0x3e>
 8006366:	2030      	movs	r0, #48	@ 0x30
 8006368:	18e1      	adds	r1, r4, r3
 800636a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006374:	4422      	add	r2, r4
 8006376:	3302      	adds	r3, #2
 8006378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800637c:	e7c2      	b.n	8006304 <_printf_common+0x58>
 800637e:	2301      	movs	r3, #1
 8006380:	4622      	mov	r2, r4
 8006382:	4641      	mov	r1, r8
 8006384:	4638      	mov	r0, r7
 8006386:	47c8      	blx	r9
 8006388:	3001      	adds	r0, #1
 800638a:	d0e6      	beq.n	800635a <_printf_common+0xae>
 800638c:	3601      	adds	r6, #1
 800638e:	e7d9      	b.n	8006344 <_printf_common+0x98>

08006390 <_printf_i>:
 8006390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006394:	7e0f      	ldrb	r7, [r1, #24]
 8006396:	4691      	mov	r9, r2
 8006398:	2f78      	cmp	r7, #120	@ 0x78
 800639a:	4680      	mov	r8, r0
 800639c:	460c      	mov	r4, r1
 800639e:	469a      	mov	sl, r3
 80063a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063a6:	d807      	bhi.n	80063b8 <_printf_i+0x28>
 80063a8:	2f62      	cmp	r7, #98	@ 0x62
 80063aa:	d80a      	bhi.n	80063c2 <_printf_i+0x32>
 80063ac:	2f00      	cmp	r7, #0
 80063ae:	f000 80d1 	beq.w	8006554 <_printf_i+0x1c4>
 80063b2:	2f58      	cmp	r7, #88	@ 0x58
 80063b4:	f000 80b8 	beq.w	8006528 <_printf_i+0x198>
 80063b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063c0:	e03a      	b.n	8006438 <_printf_i+0xa8>
 80063c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063c6:	2b15      	cmp	r3, #21
 80063c8:	d8f6      	bhi.n	80063b8 <_printf_i+0x28>
 80063ca:	a101      	add	r1, pc, #4	@ (adr r1, 80063d0 <_printf_i+0x40>)
 80063cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063d0:	08006429 	.word	0x08006429
 80063d4:	0800643d 	.word	0x0800643d
 80063d8:	080063b9 	.word	0x080063b9
 80063dc:	080063b9 	.word	0x080063b9
 80063e0:	080063b9 	.word	0x080063b9
 80063e4:	080063b9 	.word	0x080063b9
 80063e8:	0800643d 	.word	0x0800643d
 80063ec:	080063b9 	.word	0x080063b9
 80063f0:	080063b9 	.word	0x080063b9
 80063f4:	080063b9 	.word	0x080063b9
 80063f8:	080063b9 	.word	0x080063b9
 80063fc:	0800653b 	.word	0x0800653b
 8006400:	08006467 	.word	0x08006467
 8006404:	080064f5 	.word	0x080064f5
 8006408:	080063b9 	.word	0x080063b9
 800640c:	080063b9 	.word	0x080063b9
 8006410:	0800655d 	.word	0x0800655d
 8006414:	080063b9 	.word	0x080063b9
 8006418:	08006467 	.word	0x08006467
 800641c:	080063b9 	.word	0x080063b9
 8006420:	080063b9 	.word	0x080063b9
 8006424:	080064fd 	.word	0x080064fd
 8006428:	6833      	ldr	r3, [r6, #0]
 800642a:	1d1a      	adds	r2, r3, #4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6032      	str	r2, [r6, #0]
 8006430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006434:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006438:	2301      	movs	r3, #1
 800643a:	e09c      	b.n	8006576 <_printf_i+0x1e6>
 800643c:	6833      	ldr	r3, [r6, #0]
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	1d19      	adds	r1, r3, #4
 8006442:	6031      	str	r1, [r6, #0]
 8006444:	0606      	lsls	r6, r0, #24
 8006446:	d501      	bpl.n	800644c <_printf_i+0xbc>
 8006448:	681d      	ldr	r5, [r3, #0]
 800644a:	e003      	b.n	8006454 <_printf_i+0xc4>
 800644c:	0645      	lsls	r5, r0, #25
 800644e:	d5fb      	bpl.n	8006448 <_printf_i+0xb8>
 8006450:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006454:	2d00      	cmp	r5, #0
 8006456:	da03      	bge.n	8006460 <_printf_i+0xd0>
 8006458:	232d      	movs	r3, #45	@ 0x2d
 800645a:	426d      	negs	r5, r5
 800645c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006460:	230a      	movs	r3, #10
 8006462:	4858      	ldr	r0, [pc, #352]	@ (80065c4 <_printf_i+0x234>)
 8006464:	e011      	b.n	800648a <_printf_i+0xfa>
 8006466:	6821      	ldr	r1, [r4, #0]
 8006468:	6833      	ldr	r3, [r6, #0]
 800646a:	0608      	lsls	r0, r1, #24
 800646c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006470:	d402      	bmi.n	8006478 <_printf_i+0xe8>
 8006472:	0649      	lsls	r1, r1, #25
 8006474:	bf48      	it	mi
 8006476:	b2ad      	uxthmi	r5, r5
 8006478:	2f6f      	cmp	r7, #111	@ 0x6f
 800647a:	6033      	str	r3, [r6, #0]
 800647c:	bf14      	ite	ne
 800647e:	230a      	movne	r3, #10
 8006480:	2308      	moveq	r3, #8
 8006482:	4850      	ldr	r0, [pc, #320]	@ (80065c4 <_printf_i+0x234>)
 8006484:	2100      	movs	r1, #0
 8006486:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800648a:	6866      	ldr	r6, [r4, #4]
 800648c:	2e00      	cmp	r6, #0
 800648e:	60a6      	str	r6, [r4, #8]
 8006490:	db05      	blt.n	800649e <_printf_i+0x10e>
 8006492:	6821      	ldr	r1, [r4, #0]
 8006494:	432e      	orrs	r6, r5
 8006496:	f021 0104 	bic.w	r1, r1, #4
 800649a:	6021      	str	r1, [r4, #0]
 800649c:	d04b      	beq.n	8006536 <_printf_i+0x1a6>
 800649e:	4616      	mov	r6, r2
 80064a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80064a4:	fb03 5711 	mls	r7, r3, r1, r5
 80064a8:	5dc7      	ldrb	r7, [r0, r7]
 80064aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064ae:	462f      	mov	r7, r5
 80064b0:	42bb      	cmp	r3, r7
 80064b2:	460d      	mov	r5, r1
 80064b4:	d9f4      	bls.n	80064a0 <_printf_i+0x110>
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d10b      	bne.n	80064d2 <_printf_i+0x142>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	07df      	lsls	r7, r3, #31
 80064be:	d508      	bpl.n	80064d2 <_printf_i+0x142>
 80064c0:	6923      	ldr	r3, [r4, #16]
 80064c2:	6861      	ldr	r1, [r4, #4]
 80064c4:	4299      	cmp	r1, r3
 80064c6:	bfde      	ittt	le
 80064c8:	2330      	movle	r3, #48	@ 0x30
 80064ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064d2:	1b92      	subs	r2, r2, r6
 80064d4:	6122      	str	r2, [r4, #16]
 80064d6:	464b      	mov	r3, r9
 80064d8:	4621      	mov	r1, r4
 80064da:	4640      	mov	r0, r8
 80064dc:	f8cd a000 	str.w	sl, [sp]
 80064e0:	aa03      	add	r2, sp, #12
 80064e2:	f7ff fee3 	bl	80062ac <_printf_common>
 80064e6:	3001      	adds	r0, #1
 80064e8:	d14a      	bne.n	8006580 <_printf_i+0x1f0>
 80064ea:	f04f 30ff 	mov.w	r0, #4294967295
 80064ee:	b004      	add	sp, #16
 80064f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	f043 0320 	orr.w	r3, r3, #32
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	2778      	movs	r7, #120	@ 0x78
 80064fe:	4832      	ldr	r0, [pc, #200]	@ (80065c8 <_printf_i+0x238>)
 8006500:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	6831      	ldr	r1, [r6, #0]
 8006508:	061f      	lsls	r7, r3, #24
 800650a:	f851 5b04 	ldr.w	r5, [r1], #4
 800650e:	d402      	bmi.n	8006516 <_printf_i+0x186>
 8006510:	065f      	lsls	r7, r3, #25
 8006512:	bf48      	it	mi
 8006514:	b2ad      	uxthmi	r5, r5
 8006516:	6031      	str	r1, [r6, #0]
 8006518:	07d9      	lsls	r1, r3, #31
 800651a:	bf44      	itt	mi
 800651c:	f043 0320 	orrmi.w	r3, r3, #32
 8006520:	6023      	strmi	r3, [r4, #0]
 8006522:	b11d      	cbz	r5, 800652c <_printf_i+0x19c>
 8006524:	2310      	movs	r3, #16
 8006526:	e7ad      	b.n	8006484 <_printf_i+0xf4>
 8006528:	4826      	ldr	r0, [pc, #152]	@ (80065c4 <_printf_i+0x234>)
 800652a:	e7e9      	b.n	8006500 <_printf_i+0x170>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	f023 0320 	bic.w	r3, r3, #32
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	e7f6      	b.n	8006524 <_printf_i+0x194>
 8006536:	4616      	mov	r6, r2
 8006538:	e7bd      	b.n	80064b6 <_printf_i+0x126>
 800653a:	6833      	ldr	r3, [r6, #0]
 800653c:	6825      	ldr	r5, [r4, #0]
 800653e:	1d18      	adds	r0, r3, #4
 8006540:	6961      	ldr	r1, [r4, #20]
 8006542:	6030      	str	r0, [r6, #0]
 8006544:	062e      	lsls	r6, r5, #24
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	d501      	bpl.n	800654e <_printf_i+0x1be>
 800654a:	6019      	str	r1, [r3, #0]
 800654c:	e002      	b.n	8006554 <_printf_i+0x1c4>
 800654e:	0668      	lsls	r0, r5, #25
 8006550:	d5fb      	bpl.n	800654a <_printf_i+0x1ba>
 8006552:	8019      	strh	r1, [r3, #0]
 8006554:	2300      	movs	r3, #0
 8006556:	4616      	mov	r6, r2
 8006558:	6123      	str	r3, [r4, #16]
 800655a:	e7bc      	b.n	80064d6 <_printf_i+0x146>
 800655c:	6833      	ldr	r3, [r6, #0]
 800655e:	2100      	movs	r1, #0
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	6032      	str	r2, [r6, #0]
 8006564:	681e      	ldr	r6, [r3, #0]
 8006566:	6862      	ldr	r2, [r4, #4]
 8006568:	4630      	mov	r0, r6
 800656a:	f000 fa82 	bl	8006a72 <memchr>
 800656e:	b108      	cbz	r0, 8006574 <_printf_i+0x1e4>
 8006570:	1b80      	subs	r0, r0, r6
 8006572:	6060      	str	r0, [r4, #4]
 8006574:	6863      	ldr	r3, [r4, #4]
 8006576:	6123      	str	r3, [r4, #16]
 8006578:	2300      	movs	r3, #0
 800657a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800657e:	e7aa      	b.n	80064d6 <_printf_i+0x146>
 8006580:	4632      	mov	r2, r6
 8006582:	4649      	mov	r1, r9
 8006584:	4640      	mov	r0, r8
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	47d0      	blx	sl
 800658a:	3001      	adds	r0, #1
 800658c:	d0ad      	beq.n	80064ea <_printf_i+0x15a>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	079b      	lsls	r3, r3, #30
 8006592:	d413      	bmi.n	80065bc <_printf_i+0x22c>
 8006594:	68e0      	ldr	r0, [r4, #12]
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	4298      	cmp	r0, r3
 800659a:	bfb8      	it	lt
 800659c:	4618      	movlt	r0, r3
 800659e:	e7a6      	b.n	80064ee <_printf_i+0x15e>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4632      	mov	r2, r6
 80065a4:	4649      	mov	r1, r9
 80065a6:	4640      	mov	r0, r8
 80065a8:	47d0      	blx	sl
 80065aa:	3001      	adds	r0, #1
 80065ac:	d09d      	beq.n	80064ea <_printf_i+0x15a>
 80065ae:	3501      	adds	r5, #1
 80065b0:	68e3      	ldr	r3, [r4, #12]
 80065b2:	9903      	ldr	r1, [sp, #12]
 80065b4:	1a5b      	subs	r3, r3, r1
 80065b6:	42ab      	cmp	r3, r5
 80065b8:	dcf2      	bgt.n	80065a0 <_printf_i+0x210>
 80065ba:	e7eb      	b.n	8006594 <_printf_i+0x204>
 80065bc:	2500      	movs	r5, #0
 80065be:	f104 0619 	add.w	r6, r4, #25
 80065c2:	e7f5      	b.n	80065b0 <_printf_i+0x220>
 80065c4:	080095de 	.word	0x080095de
 80065c8:	080095ef 	.word	0x080095ef

080065cc <std>:
 80065cc:	2300      	movs	r3, #0
 80065ce:	b510      	push	{r4, lr}
 80065d0:	4604      	mov	r4, r0
 80065d2:	e9c0 3300 	strd	r3, r3, [r0]
 80065d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065da:	6083      	str	r3, [r0, #8]
 80065dc:	8181      	strh	r1, [r0, #12]
 80065de:	6643      	str	r3, [r0, #100]	@ 0x64
 80065e0:	81c2      	strh	r2, [r0, #14]
 80065e2:	6183      	str	r3, [r0, #24]
 80065e4:	4619      	mov	r1, r3
 80065e6:	2208      	movs	r2, #8
 80065e8:	305c      	adds	r0, #92	@ 0x5c
 80065ea:	f000 f94c 	bl	8006886 <memset>
 80065ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006624 <std+0x58>)
 80065f0:	6224      	str	r4, [r4, #32]
 80065f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80065f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <std+0x5c>)
 80065f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065f8:	4b0c      	ldr	r3, [pc, #48]	@ (800662c <std+0x60>)
 80065fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006630 <std+0x64>)
 80065fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8006600:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <std+0x68>)
 8006602:	429c      	cmp	r4, r3
 8006604:	d006      	beq.n	8006614 <std+0x48>
 8006606:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800660a:	4294      	cmp	r4, r2
 800660c:	d002      	beq.n	8006614 <std+0x48>
 800660e:	33d0      	adds	r3, #208	@ 0xd0
 8006610:	429c      	cmp	r4, r3
 8006612:	d105      	bne.n	8006620 <std+0x54>
 8006614:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800661c:	f000 ba1e 	b.w	8006a5c <__retarget_lock_init_recursive>
 8006620:	bd10      	pop	{r4, pc}
 8006622:	bf00      	nop
 8006624:	08006801 	.word	0x08006801
 8006628:	08006823 	.word	0x08006823
 800662c:	0800685b 	.word	0x0800685b
 8006630:	0800687f 	.word	0x0800687f
 8006634:	2000080c 	.word	0x2000080c

08006638 <stdio_exit_handler>:
 8006638:	4a02      	ldr	r2, [pc, #8]	@ (8006644 <stdio_exit_handler+0xc>)
 800663a:	4903      	ldr	r1, [pc, #12]	@ (8006648 <stdio_exit_handler+0x10>)
 800663c:	4803      	ldr	r0, [pc, #12]	@ (800664c <stdio_exit_handler+0x14>)
 800663e:	f000 b869 	b.w	8006714 <_fwalk_sglue>
 8006642:	bf00      	nop
 8006644:	2000002c 	.word	0x2000002c
 8006648:	08008d4d 	.word	0x08008d4d
 800664c:	200001a8 	.word	0x200001a8

08006650 <cleanup_stdio>:
 8006650:	6841      	ldr	r1, [r0, #4]
 8006652:	4b0c      	ldr	r3, [pc, #48]	@ (8006684 <cleanup_stdio+0x34>)
 8006654:	b510      	push	{r4, lr}
 8006656:	4299      	cmp	r1, r3
 8006658:	4604      	mov	r4, r0
 800665a:	d001      	beq.n	8006660 <cleanup_stdio+0x10>
 800665c:	f002 fb76 	bl	8008d4c <_fflush_r>
 8006660:	68a1      	ldr	r1, [r4, #8]
 8006662:	4b09      	ldr	r3, [pc, #36]	@ (8006688 <cleanup_stdio+0x38>)
 8006664:	4299      	cmp	r1, r3
 8006666:	d002      	beq.n	800666e <cleanup_stdio+0x1e>
 8006668:	4620      	mov	r0, r4
 800666a:	f002 fb6f 	bl	8008d4c <_fflush_r>
 800666e:	68e1      	ldr	r1, [r4, #12]
 8006670:	4b06      	ldr	r3, [pc, #24]	@ (800668c <cleanup_stdio+0x3c>)
 8006672:	4299      	cmp	r1, r3
 8006674:	d004      	beq.n	8006680 <cleanup_stdio+0x30>
 8006676:	4620      	mov	r0, r4
 8006678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800667c:	f002 bb66 	b.w	8008d4c <_fflush_r>
 8006680:	bd10      	pop	{r4, pc}
 8006682:	bf00      	nop
 8006684:	2000080c 	.word	0x2000080c
 8006688:	20000874 	.word	0x20000874
 800668c:	200008dc 	.word	0x200008dc

08006690 <global_stdio_init.part.0>:
 8006690:	b510      	push	{r4, lr}
 8006692:	4b0b      	ldr	r3, [pc, #44]	@ (80066c0 <global_stdio_init.part.0+0x30>)
 8006694:	4c0b      	ldr	r4, [pc, #44]	@ (80066c4 <global_stdio_init.part.0+0x34>)
 8006696:	4a0c      	ldr	r2, [pc, #48]	@ (80066c8 <global_stdio_init.part.0+0x38>)
 8006698:	4620      	mov	r0, r4
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	2104      	movs	r1, #4
 800669e:	2200      	movs	r2, #0
 80066a0:	f7ff ff94 	bl	80065cc <std>
 80066a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066a8:	2201      	movs	r2, #1
 80066aa:	2109      	movs	r1, #9
 80066ac:	f7ff ff8e 	bl	80065cc <std>
 80066b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066b4:	2202      	movs	r2, #2
 80066b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ba:	2112      	movs	r1, #18
 80066bc:	f7ff bf86 	b.w	80065cc <std>
 80066c0:	20000944 	.word	0x20000944
 80066c4:	2000080c 	.word	0x2000080c
 80066c8:	08006639 	.word	0x08006639

080066cc <__sfp_lock_acquire>:
 80066cc:	4801      	ldr	r0, [pc, #4]	@ (80066d4 <__sfp_lock_acquire+0x8>)
 80066ce:	f000 b9c6 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 80066d2:	bf00      	nop
 80066d4:	2000094d 	.word	0x2000094d

080066d8 <__sfp_lock_release>:
 80066d8:	4801      	ldr	r0, [pc, #4]	@ (80066e0 <__sfp_lock_release+0x8>)
 80066da:	f000 b9c1 	b.w	8006a60 <__retarget_lock_release_recursive>
 80066de:	bf00      	nop
 80066e0:	2000094d 	.word	0x2000094d

080066e4 <__sinit>:
 80066e4:	b510      	push	{r4, lr}
 80066e6:	4604      	mov	r4, r0
 80066e8:	f7ff fff0 	bl	80066cc <__sfp_lock_acquire>
 80066ec:	6a23      	ldr	r3, [r4, #32]
 80066ee:	b11b      	cbz	r3, 80066f8 <__sinit+0x14>
 80066f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f4:	f7ff bff0 	b.w	80066d8 <__sfp_lock_release>
 80066f8:	4b04      	ldr	r3, [pc, #16]	@ (800670c <__sinit+0x28>)
 80066fa:	6223      	str	r3, [r4, #32]
 80066fc:	4b04      	ldr	r3, [pc, #16]	@ (8006710 <__sinit+0x2c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1f5      	bne.n	80066f0 <__sinit+0xc>
 8006704:	f7ff ffc4 	bl	8006690 <global_stdio_init.part.0>
 8006708:	e7f2      	b.n	80066f0 <__sinit+0xc>
 800670a:	bf00      	nop
 800670c:	08006651 	.word	0x08006651
 8006710:	20000944 	.word	0x20000944

08006714 <_fwalk_sglue>:
 8006714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006718:	4607      	mov	r7, r0
 800671a:	4688      	mov	r8, r1
 800671c:	4614      	mov	r4, r2
 800671e:	2600      	movs	r6, #0
 8006720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006724:	f1b9 0901 	subs.w	r9, r9, #1
 8006728:	d505      	bpl.n	8006736 <_fwalk_sglue+0x22>
 800672a:	6824      	ldr	r4, [r4, #0]
 800672c:	2c00      	cmp	r4, #0
 800672e:	d1f7      	bne.n	8006720 <_fwalk_sglue+0xc>
 8006730:	4630      	mov	r0, r6
 8006732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006736:	89ab      	ldrh	r3, [r5, #12]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d907      	bls.n	800674c <_fwalk_sglue+0x38>
 800673c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006740:	3301      	adds	r3, #1
 8006742:	d003      	beq.n	800674c <_fwalk_sglue+0x38>
 8006744:	4629      	mov	r1, r5
 8006746:	4638      	mov	r0, r7
 8006748:	47c0      	blx	r8
 800674a:	4306      	orrs	r6, r0
 800674c:	3568      	adds	r5, #104	@ 0x68
 800674e:	e7e9      	b.n	8006724 <_fwalk_sglue+0x10>

08006750 <sniprintf>:
 8006750:	b40c      	push	{r2, r3}
 8006752:	b530      	push	{r4, r5, lr}
 8006754:	4b18      	ldr	r3, [pc, #96]	@ (80067b8 <sniprintf+0x68>)
 8006756:	1e0c      	subs	r4, r1, #0
 8006758:	681d      	ldr	r5, [r3, #0]
 800675a:	b09d      	sub	sp, #116	@ 0x74
 800675c:	da08      	bge.n	8006770 <sniprintf+0x20>
 800675e:	238b      	movs	r3, #139	@ 0x8b
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	602b      	str	r3, [r5, #0]
 8006766:	b01d      	add	sp, #116	@ 0x74
 8006768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800676c:	b002      	add	sp, #8
 800676e:	4770      	bx	lr
 8006770:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006774:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800677e:	bf0c      	ite	eq
 8006780:	4623      	moveq	r3, r4
 8006782:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006786:	9304      	str	r3, [sp, #16]
 8006788:	9307      	str	r3, [sp, #28]
 800678a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800678e:	9002      	str	r0, [sp, #8]
 8006790:	9006      	str	r0, [sp, #24]
 8006792:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006796:	4628      	mov	r0, r5
 8006798:	ab21      	add	r3, sp, #132	@ 0x84
 800679a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800679c:	a902      	add	r1, sp, #8
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	f002 f958 	bl	8008a54 <_svfiprintf_r>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	bfbc      	itt	lt
 80067a8:	238b      	movlt	r3, #139	@ 0x8b
 80067aa:	602b      	strlt	r3, [r5, #0]
 80067ac:	2c00      	cmp	r4, #0
 80067ae:	d0da      	beq.n	8006766 <sniprintf+0x16>
 80067b0:	2200      	movs	r2, #0
 80067b2:	9b02      	ldr	r3, [sp, #8]
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e7d6      	b.n	8006766 <sniprintf+0x16>
 80067b8:	200001a4 	.word	0x200001a4

080067bc <siprintf>:
 80067bc:	b40e      	push	{r1, r2, r3}
 80067be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067c2:	b510      	push	{r4, lr}
 80067c4:	2400      	movs	r4, #0
 80067c6:	b09d      	sub	sp, #116	@ 0x74
 80067c8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80067ca:	9002      	str	r0, [sp, #8]
 80067cc:	9006      	str	r0, [sp, #24]
 80067ce:	9107      	str	r1, [sp, #28]
 80067d0:	9104      	str	r1, [sp, #16]
 80067d2:	4809      	ldr	r0, [pc, #36]	@ (80067f8 <siprintf+0x3c>)
 80067d4:	4909      	ldr	r1, [pc, #36]	@ (80067fc <siprintf+0x40>)
 80067d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067da:	9105      	str	r1, [sp, #20]
 80067dc:	6800      	ldr	r0, [r0, #0]
 80067de:	a902      	add	r1, sp, #8
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80067e4:	f002 f936 	bl	8008a54 <_svfiprintf_r>
 80067e8:	9b02      	ldr	r3, [sp, #8]
 80067ea:	701c      	strb	r4, [r3, #0]
 80067ec:	b01d      	add	sp, #116	@ 0x74
 80067ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f2:	b003      	add	sp, #12
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	200001a4 	.word	0x200001a4
 80067fc:	ffff0208 	.word	0xffff0208

08006800 <__sread>:
 8006800:	b510      	push	{r4, lr}
 8006802:	460c      	mov	r4, r1
 8006804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006808:	f000 f8da 	bl	80069c0 <_read_r>
 800680c:	2800      	cmp	r0, #0
 800680e:	bfab      	itete	ge
 8006810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006812:	89a3      	ldrhlt	r3, [r4, #12]
 8006814:	181b      	addge	r3, r3, r0
 8006816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800681a:	bfac      	ite	ge
 800681c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800681e:	81a3      	strhlt	r3, [r4, #12]
 8006820:	bd10      	pop	{r4, pc}

08006822 <__swrite>:
 8006822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006826:	461f      	mov	r7, r3
 8006828:	898b      	ldrh	r3, [r1, #12]
 800682a:	4605      	mov	r5, r0
 800682c:	05db      	lsls	r3, r3, #23
 800682e:	460c      	mov	r4, r1
 8006830:	4616      	mov	r6, r2
 8006832:	d505      	bpl.n	8006840 <__swrite+0x1e>
 8006834:	2302      	movs	r3, #2
 8006836:	2200      	movs	r2, #0
 8006838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683c:	f000 f8ae 	bl	800699c <_lseek_r>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	4632      	mov	r2, r6
 8006844:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006848:	81a3      	strh	r3, [r4, #12]
 800684a:	4628      	mov	r0, r5
 800684c:	463b      	mov	r3, r7
 800684e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006856:	f000 b8c5 	b.w	80069e4 <_write_r>

0800685a <__sseek>:
 800685a:	b510      	push	{r4, lr}
 800685c:	460c      	mov	r4, r1
 800685e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006862:	f000 f89b 	bl	800699c <_lseek_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	bf15      	itete	ne
 800686c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800686e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006876:	81a3      	strheq	r3, [r4, #12]
 8006878:	bf18      	it	ne
 800687a:	81a3      	strhne	r3, [r4, #12]
 800687c:	bd10      	pop	{r4, pc}

0800687e <__sclose>:
 800687e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006882:	f000 b87b 	b.w	800697c <_close_r>

08006886 <memset>:
 8006886:	4603      	mov	r3, r0
 8006888:	4402      	add	r2, r0
 800688a:	4293      	cmp	r3, r2
 800688c:	d100      	bne.n	8006890 <memset+0xa>
 800688e:	4770      	bx	lr
 8006890:	f803 1b01 	strb.w	r1, [r3], #1
 8006894:	e7f9      	b.n	800688a <memset+0x4>

08006896 <strncmp>:
 8006896:	b510      	push	{r4, lr}
 8006898:	b16a      	cbz	r2, 80068b6 <strncmp+0x20>
 800689a:	3901      	subs	r1, #1
 800689c:	1884      	adds	r4, r0, r2
 800689e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d103      	bne.n	80068b2 <strncmp+0x1c>
 80068aa:	42a0      	cmp	r0, r4
 80068ac:	d001      	beq.n	80068b2 <strncmp+0x1c>
 80068ae:	2a00      	cmp	r2, #0
 80068b0:	d1f5      	bne.n	800689e <strncmp+0x8>
 80068b2:	1ad0      	subs	r0, r2, r3
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	4610      	mov	r0, r2
 80068b8:	e7fc      	b.n	80068b4 <strncmp+0x1e>
	...

080068bc <strtok>:
 80068bc:	4b16      	ldr	r3, [pc, #88]	@ (8006918 <strtok+0x5c>)
 80068be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c2:	681f      	ldr	r7, [r3, #0]
 80068c4:	4605      	mov	r5, r0
 80068c6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80068c8:	460e      	mov	r6, r1
 80068ca:	b9ec      	cbnz	r4, 8006908 <strtok+0x4c>
 80068cc:	2050      	movs	r0, #80	@ 0x50
 80068ce:	f001 faf1 	bl	8007eb4 <malloc>
 80068d2:	4602      	mov	r2, r0
 80068d4:	6478      	str	r0, [r7, #68]	@ 0x44
 80068d6:	b920      	cbnz	r0, 80068e2 <strtok+0x26>
 80068d8:	215b      	movs	r1, #91	@ 0x5b
 80068da:	4b10      	ldr	r3, [pc, #64]	@ (800691c <strtok+0x60>)
 80068dc:	4810      	ldr	r0, [pc, #64]	@ (8006920 <strtok+0x64>)
 80068de:	f000 f8eb 	bl	8006ab8 <__assert_func>
 80068e2:	e9c0 4400 	strd	r4, r4, [r0]
 80068e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80068ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80068ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80068f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80068f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80068fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80068fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006902:	6184      	str	r4, [r0, #24]
 8006904:	7704      	strb	r4, [r0, #28]
 8006906:	6244      	str	r4, [r0, #36]	@ 0x24
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800690e:	2301      	movs	r3, #1
 8006910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006914:	f000 b806 	b.w	8006924 <__strtok_r>
 8006918:	200001a4 	.word	0x200001a4
 800691c:	08009600 	.word	0x08009600
 8006920:	08009617 	.word	0x08009617

08006924 <__strtok_r>:
 8006924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006926:	4604      	mov	r4, r0
 8006928:	b908      	cbnz	r0, 800692e <__strtok_r+0xa>
 800692a:	6814      	ldr	r4, [r2, #0]
 800692c:	b144      	cbz	r4, 8006940 <__strtok_r+0x1c>
 800692e:	460f      	mov	r7, r1
 8006930:	4620      	mov	r0, r4
 8006932:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006936:	f817 6b01 	ldrb.w	r6, [r7], #1
 800693a:	b91e      	cbnz	r6, 8006944 <__strtok_r+0x20>
 800693c:	b965      	cbnz	r5, 8006958 <__strtok_r+0x34>
 800693e:	6015      	str	r5, [r2, #0]
 8006940:	2000      	movs	r0, #0
 8006942:	e005      	b.n	8006950 <__strtok_r+0x2c>
 8006944:	42b5      	cmp	r5, r6
 8006946:	d1f6      	bne.n	8006936 <__strtok_r+0x12>
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1f0      	bne.n	800692e <__strtok_r+0xa>
 800694c:	6014      	str	r4, [r2, #0]
 800694e:	7003      	strb	r3, [r0, #0]
 8006950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006952:	461c      	mov	r4, r3
 8006954:	e00c      	b.n	8006970 <__strtok_r+0x4c>
 8006956:	b91d      	cbnz	r5, 8006960 <__strtok_r+0x3c>
 8006958:	460e      	mov	r6, r1
 800695a:	4627      	mov	r7, r4
 800695c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006960:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006964:	42ab      	cmp	r3, r5
 8006966:	d1f6      	bne.n	8006956 <__strtok_r+0x32>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0f2      	beq.n	8006952 <__strtok_r+0x2e>
 800696c:	2300      	movs	r3, #0
 800696e:	703b      	strb	r3, [r7, #0]
 8006970:	6014      	str	r4, [r2, #0]
 8006972:	e7ed      	b.n	8006950 <__strtok_r+0x2c>

08006974 <_localeconv_r>:
 8006974:	4800      	ldr	r0, [pc, #0]	@ (8006978 <_localeconv_r+0x4>)
 8006976:	4770      	bx	lr
 8006978:	20000128 	.word	0x20000128

0800697c <_close_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	2300      	movs	r3, #0
 8006980:	4d05      	ldr	r5, [pc, #20]	@ (8006998 <_close_r+0x1c>)
 8006982:	4604      	mov	r4, r0
 8006984:	4608      	mov	r0, r1
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	f7fb fc5b 	bl	8002242 <_close>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_close_r+0x1a>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_close_r+0x1a>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	20000948 	.word	0x20000948

0800699c <_lseek_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4604      	mov	r4, r0
 80069a0:	4608      	mov	r0, r1
 80069a2:	4611      	mov	r1, r2
 80069a4:	2200      	movs	r2, #0
 80069a6:	4d05      	ldr	r5, [pc, #20]	@ (80069bc <_lseek_r+0x20>)
 80069a8:	602a      	str	r2, [r5, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f7fb fc6d 	bl	800228a <_lseek>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_lseek_r+0x1e>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_lseek_r+0x1e>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20000948 	.word	0x20000948

080069c0 <_read_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4604      	mov	r4, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	2200      	movs	r2, #0
 80069ca:	4d05      	ldr	r5, [pc, #20]	@ (80069e0 <_read_r+0x20>)
 80069cc:	602a      	str	r2, [r5, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f7fb fbfe 	bl	80021d0 <_read>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_read_r+0x1e>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_read_r+0x1e>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	20000948 	.word	0x20000948

080069e4 <_write_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	4611      	mov	r1, r2
 80069ec:	2200      	movs	r2, #0
 80069ee:	4d05      	ldr	r5, [pc, #20]	@ (8006a04 <_write_r+0x20>)
 80069f0:	602a      	str	r2, [r5, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f7fb fc09 	bl	800220a <_write>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_write_r+0x1e>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_write_r+0x1e>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	20000948 	.word	0x20000948

08006a08 <__errno>:
 8006a08:	4b01      	ldr	r3, [pc, #4]	@ (8006a10 <__errno+0x8>)
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	200001a4 	.word	0x200001a4

08006a14 <__libc_init_array>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	2600      	movs	r6, #0
 8006a18:	4d0c      	ldr	r5, [pc, #48]	@ (8006a4c <__libc_init_array+0x38>)
 8006a1a:	4c0d      	ldr	r4, [pc, #52]	@ (8006a50 <__libc_init_array+0x3c>)
 8006a1c:	1b64      	subs	r4, r4, r5
 8006a1e:	10a4      	asrs	r4, r4, #2
 8006a20:	42a6      	cmp	r6, r4
 8006a22:	d109      	bne.n	8006a38 <__libc_init_array+0x24>
 8006a24:	f002 fce2 	bl	80093ec <_init>
 8006a28:	2600      	movs	r6, #0
 8006a2a:	4d0a      	ldr	r5, [pc, #40]	@ (8006a54 <__libc_init_array+0x40>)
 8006a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8006a58 <__libc_init_array+0x44>)
 8006a2e:	1b64      	subs	r4, r4, r5
 8006a30:	10a4      	asrs	r4, r4, #2
 8006a32:	42a6      	cmp	r6, r4
 8006a34:	d105      	bne.n	8006a42 <__libc_init_array+0x2e>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3c:	4798      	blx	r3
 8006a3e:	3601      	adds	r6, #1
 8006a40:	e7ee      	b.n	8006a20 <__libc_init_array+0xc>
 8006a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a46:	4798      	blx	r3
 8006a48:	3601      	adds	r6, #1
 8006a4a:	e7f2      	b.n	8006a32 <__libc_init_array+0x1e>
 8006a4c:	08009a54 	.word	0x08009a54
 8006a50:	08009a54 	.word	0x08009a54
 8006a54:	08009a54 	.word	0x08009a54
 8006a58:	08009a58 	.word	0x08009a58

08006a5c <__retarget_lock_init_recursive>:
 8006a5c:	4770      	bx	lr

08006a5e <__retarget_lock_acquire_recursive>:
 8006a5e:	4770      	bx	lr

08006a60 <__retarget_lock_release_recursive>:
 8006a60:	4770      	bx	lr

08006a62 <strcpy>:
 8006a62:	4603      	mov	r3, r0
 8006a64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a68:	f803 2b01 	strb.w	r2, [r3], #1
 8006a6c:	2a00      	cmp	r2, #0
 8006a6e:	d1f9      	bne.n	8006a64 <strcpy+0x2>
 8006a70:	4770      	bx	lr

08006a72 <memchr>:
 8006a72:	4603      	mov	r3, r0
 8006a74:	b510      	push	{r4, lr}
 8006a76:	b2c9      	uxtb	r1, r1
 8006a78:	4402      	add	r2, r0
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	d101      	bne.n	8006a84 <memchr+0x12>
 8006a80:	2000      	movs	r0, #0
 8006a82:	e003      	b.n	8006a8c <memchr+0x1a>
 8006a84:	7804      	ldrb	r4, [r0, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	428c      	cmp	r4, r1
 8006a8a:	d1f6      	bne.n	8006a7a <memchr+0x8>
 8006a8c:	bd10      	pop	{r4, pc}

08006a8e <memcpy>:
 8006a8e:	440a      	add	r2, r1
 8006a90:	4291      	cmp	r1, r2
 8006a92:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a96:	d100      	bne.n	8006a9a <memcpy+0xc>
 8006a98:	4770      	bx	lr
 8006a9a:	b510      	push	{r4, lr}
 8006a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa0:	4291      	cmp	r1, r2
 8006aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa6:	d1f9      	bne.n	8006a9c <memcpy+0xe>
 8006aa8:	bd10      	pop	{r4, pc}
	...

08006aac <nan>:
 8006aac:	2000      	movs	r0, #0
 8006aae:	4901      	ldr	r1, [pc, #4]	@ (8006ab4 <nan+0x8>)
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	7ff80000 	.word	0x7ff80000

08006ab8 <__assert_func>:
 8006ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aba:	4614      	mov	r4, r2
 8006abc:	461a      	mov	r2, r3
 8006abe:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <__assert_func+0x2c>)
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68d8      	ldr	r0, [r3, #12]
 8006ac6:	b14c      	cbz	r4, 8006adc <__assert_func+0x24>
 8006ac8:	4b07      	ldr	r3, [pc, #28]	@ (8006ae8 <__assert_func+0x30>)
 8006aca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ace:	9100      	str	r1, [sp, #0]
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	4906      	ldr	r1, [pc, #24]	@ (8006aec <__assert_func+0x34>)
 8006ad4:	f002 f962 	bl	8008d9c <fiprintf>
 8006ad8:	f002 f99c 	bl	8008e14 <abort>
 8006adc:	4b04      	ldr	r3, [pc, #16]	@ (8006af0 <__assert_func+0x38>)
 8006ade:	461c      	mov	r4, r3
 8006ae0:	e7f3      	b.n	8006aca <__assert_func+0x12>
 8006ae2:	bf00      	nop
 8006ae4:	200001a4 	.word	0x200001a4
 8006ae8:	08009679 	.word	0x08009679
 8006aec:	08009686 	.word	0x08009686
 8006af0:	080096b4 	.word	0x080096b4

08006af4 <quorem>:
 8006af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af8:	6903      	ldr	r3, [r0, #16]
 8006afa:	690c      	ldr	r4, [r1, #16]
 8006afc:	4607      	mov	r7, r0
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	db7e      	blt.n	8006c00 <quorem+0x10c>
 8006b02:	3c01      	subs	r4, #1
 8006b04:	00a3      	lsls	r3, r4, #2
 8006b06:	f100 0514 	add.w	r5, r0, #20
 8006b0a:	f101 0814 	add.w	r8, r1, #20
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	429a      	cmp	r2, r3
 8006b22:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b2a:	d32e      	bcc.n	8006b8a <quorem+0x96>
 8006b2c:	f04f 0a00 	mov.w	sl, #0
 8006b30:	46c4      	mov	ip, r8
 8006b32:	46ae      	mov	lr, r5
 8006b34:	46d3      	mov	fp, sl
 8006b36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b3a:	b298      	uxth	r0, r3
 8006b3c:	fb06 a000 	mla	r0, r6, r0, sl
 8006b40:	0c1b      	lsrs	r3, r3, #16
 8006b42:	0c02      	lsrs	r2, r0, #16
 8006b44:	fb06 2303 	mla	r3, r6, r3, r2
 8006b48:	f8de 2000 	ldr.w	r2, [lr]
 8006b4c:	b280      	uxth	r0, r0
 8006b4e:	b292      	uxth	r2, r2
 8006b50:	1a12      	subs	r2, r2, r0
 8006b52:	445a      	add	r2, fp
 8006b54:	f8de 0000 	ldr.w	r0, [lr]
 8006b58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b66:	b292      	uxth	r2, r2
 8006b68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b6c:	45e1      	cmp	r9, ip
 8006b6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b72:	f84e 2b04 	str.w	r2, [lr], #4
 8006b76:	d2de      	bcs.n	8006b36 <quorem+0x42>
 8006b78:	9b00      	ldr	r3, [sp, #0]
 8006b7a:	58eb      	ldr	r3, [r5, r3]
 8006b7c:	b92b      	cbnz	r3, 8006b8a <quorem+0x96>
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	429d      	cmp	r5, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	d32f      	bcc.n	8006be8 <quorem+0xf4>
 8006b88:	613c      	str	r4, [r7, #16]
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f001 fd16 	bl	80085bc <__mcmp>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	db25      	blt.n	8006be0 <quorem+0xec>
 8006b94:	4629      	mov	r1, r5
 8006b96:	2000      	movs	r0, #0
 8006b98:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b9c:	f8d1 c000 	ldr.w	ip, [r1]
 8006ba0:	fa1f fe82 	uxth.w	lr, r2
 8006ba4:	fa1f f38c 	uxth.w	r3, ip
 8006ba8:	eba3 030e 	sub.w	r3, r3, lr
 8006bac:	4403      	add	r3, r0
 8006bae:	0c12      	lsrs	r2, r2, #16
 8006bb0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006bb4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bbe:	45c1      	cmp	r9, r8
 8006bc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bc4:	f841 3b04 	str.w	r3, [r1], #4
 8006bc8:	d2e6      	bcs.n	8006b98 <quorem+0xa4>
 8006bca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bd2:	b922      	cbnz	r2, 8006bde <quorem+0xea>
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	429d      	cmp	r5, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	d30b      	bcc.n	8006bf4 <quorem+0x100>
 8006bdc:	613c      	str	r4, [r7, #16]
 8006bde:	3601      	adds	r6, #1
 8006be0:	4630      	mov	r0, r6
 8006be2:	b003      	add	sp, #12
 8006be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	3b04      	subs	r3, #4
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	d1cb      	bne.n	8006b88 <quorem+0x94>
 8006bf0:	3c01      	subs	r4, #1
 8006bf2:	e7c6      	b.n	8006b82 <quorem+0x8e>
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	3b04      	subs	r3, #4
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	d1ef      	bne.n	8006bdc <quorem+0xe8>
 8006bfc:	3c01      	subs	r4, #1
 8006bfe:	e7ea      	b.n	8006bd6 <quorem+0xe2>
 8006c00:	2000      	movs	r0, #0
 8006c02:	e7ee      	b.n	8006be2 <quorem+0xee>
 8006c04:	0000      	movs	r0, r0
	...

08006c08 <_dtoa_r>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	461d      	mov	r5, r3
 8006c10:	69c7      	ldr	r7, [r0, #28]
 8006c12:	b097      	sub	sp, #92	@ 0x5c
 8006c14:	4681      	mov	r9, r0
 8006c16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006c1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006c1c:	b97f      	cbnz	r7, 8006c3e <_dtoa_r+0x36>
 8006c1e:	2010      	movs	r0, #16
 8006c20:	f001 f948 	bl	8007eb4 <malloc>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f8c9 001c 	str.w	r0, [r9, #28]
 8006c2a:	b920      	cbnz	r0, 8006c36 <_dtoa_r+0x2e>
 8006c2c:	21ef      	movs	r1, #239	@ 0xef
 8006c2e:	4bac      	ldr	r3, [pc, #688]	@ (8006ee0 <_dtoa_r+0x2d8>)
 8006c30:	48ac      	ldr	r0, [pc, #688]	@ (8006ee4 <_dtoa_r+0x2dc>)
 8006c32:	f7ff ff41 	bl	8006ab8 <__assert_func>
 8006c36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c3a:	6007      	str	r7, [r0, #0]
 8006c3c:	60c7      	str	r7, [r0, #12]
 8006c3e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	b159      	cbz	r1, 8006c5e <_dtoa_r+0x56>
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4093      	lsls	r3, r2
 8006c4c:	604a      	str	r2, [r1, #4]
 8006c4e:	608b      	str	r3, [r1, #8]
 8006c50:	4648      	mov	r0, r9
 8006c52:	f001 fa37 	bl	80080c4 <_Bfree>
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	1e2b      	subs	r3, r5, #0
 8006c60:	bfaf      	iteee	ge
 8006c62:	2300      	movge	r3, #0
 8006c64:	2201      	movlt	r2, #1
 8006c66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c6a:	9307      	strlt	r3, [sp, #28]
 8006c6c:	bfa8      	it	ge
 8006c6e:	6033      	strge	r3, [r6, #0]
 8006c70:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006c74:	4b9c      	ldr	r3, [pc, #624]	@ (8006ee8 <_dtoa_r+0x2e0>)
 8006c76:	bfb8      	it	lt
 8006c78:	6032      	strlt	r2, [r6, #0]
 8006c7a:	ea33 0308 	bics.w	r3, r3, r8
 8006c7e:	d112      	bne.n	8006ca6 <_dtoa_r+0x9e>
 8006c80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c8c:	4323      	orrs	r3, r4
 8006c8e:	f000 855e 	beq.w	800774e <_dtoa_r+0xb46>
 8006c92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006eec <_dtoa_r+0x2e4>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 8560 	beq.w	800775e <_dtoa_r+0xb56>
 8006c9e:	f10a 0303 	add.w	r3, sl, #3
 8006ca2:	f000 bd5a 	b.w	800775a <_dtoa_r+0xb52>
 8006ca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006caa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f7f9 fe77 	bl	80009a8 <__aeabi_dcmpeq>
 8006cba:	4607      	mov	r7, r0
 8006cbc:	b158      	cbz	r0, 8006cd6 <_dtoa_r+0xce>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cc6:	b113      	cbz	r3, 8006cce <_dtoa_r+0xc6>
 8006cc8:	4b89      	ldr	r3, [pc, #548]	@ (8006ef0 <_dtoa_r+0x2e8>)
 8006cca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006ef4 <_dtoa_r+0x2ec>
 8006cd2:	f000 bd44 	b.w	800775e <_dtoa_r+0xb56>
 8006cd6:	ab14      	add	r3, sp, #80	@ 0x50
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	ab15      	add	r3, sp, #84	@ 0x54
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4648      	mov	r0, r9
 8006ce0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006ce4:	f001 fd82 	bl	80087ec <__d2b>
 8006ce8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006cec:	9003      	str	r0, [sp, #12]
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	d078      	beq.n	8006de4 <_dtoa_r+0x1dc>
 8006cf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cf8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d08:	9712      	str	r7, [sp, #72]	@ 0x48
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8006ef8 <_dtoa_r+0x2f0>)
 8006d10:	f7f9 fa2a 	bl	8000168 <__aeabi_dsub>
 8006d14:	a36c      	add	r3, pc, #432	@ (adr r3, 8006ec8 <_dtoa_r+0x2c0>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fbdd 	bl	80004d8 <__aeabi_dmul>
 8006d1e:	a36c      	add	r3, pc, #432	@ (adr r3, 8006ed0 <_dtoa_r+0x2c8>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 fa22 	bl	800016c <__adddf3>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	f7f9 fb69 	bl	8000404 <__aeabi_i2d>
 8006d32:	a369      	add	r3, pc, #420	@ (adr r3, 8006ed8 <_dtoa_r+0x2d0>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f7f9 fbce 	bl	80004d8 <__aeabi_dmul>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4620      	mov	r0, r4
 8006d42:	4629      	mov	r1, r5
 8006d44:	f7f9 fa12 	bl	800016c <__adddf3>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	f7f9 fe74 	bl	8000a38 <__aeabi_d2iz>
 8006d50:	2200      	movs	r2, #0
 8006d52:	4607      	mov	r7, r0
 8006d54:	2300      	movs	r3, #0
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 fe2f 	bl	80009bc <__aeabi_dcmplt>
 8006d5e:	b140      	cbz	r0, 8006d72 <_dtoa_r+0x16a>
 8006d60:	4638      	mov	r0, r7
 8006d62:	f7f9 fb4f 	bl	8000404 <__aeabi_i2d>
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	f7f9 fe1d 	bl	80009a8 <__aeabi_dcmpeq>
 8006d6e:	b900      	cbnz	r0, 8006d72 <_dtoa_r+0x16a>
 8006d70:	3f01      	subs	r7, #1
 8006d72:	2f16      	cmp	r7, #22
 8006d74:	d854      	bhi.n	8006e20 <_dtoa_r+0x218>
 8006d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d7a:	4b60      	ldr	r3, [pc, #384]	@ (8006efc <_dtoa_r+0x2f4>)
 8006d7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f7f9 fe1a 	bl	80009bc <__aeabi_dcmplt>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d04b      	beq.n	8006e24 <_dtoa_r+0x21c>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	3f01      	subs	r7, #1
 8006d90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d94:	1b9b      	subs	r3, r3, r6
 8006d96:	1e5a      	subs	r2, r3, #1
 8006d98:	bf49      	itett	mi
 8006d9a:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d9e:	2300      	movpl	r3, #0
 8006da0:	9304      	strmi	r3, [sp, #16]
 8006da2:	2300      	movmi	r3, #0
 8006da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006da6:	bf54      	ite	pl
 8006da8:	9304      	strpl	r3, [sp, #16]
 8006daa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	db3b      	blt.n	8006e28 <_dtoa_r+0x220>
 8006db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db2:	970e      	str	r7, [sp, #56]	@ 0x38
 8006db4:	443b      	add	r3, r7
 8006db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006db8:	2300      	movs	r3, #0
 8006dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dbc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dbe:	2b09      	cmp	r3, #9
 8006dc0:	d865      	bhi.n	8006e8e <_dtoa_r+0x286>
 8006dc2:	2b05      	cmp	r3, #5
 8006dc4:	bfc4      	itt	gt
 8006dc6:	3b04      	subgt	r3, #4
 8006dc8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006dca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dcc:	bfc8      	it	gt
 8006dce:	2400      	movgt	r4, #0
 8006dd0:	f1a3 0302 	sub.w	r3, r3, #2
 8006dd4:	bfd8      	it	le
 8006dd6:	2401      	movle	r4, #1
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d864      	bhi.n	8006ea6 <_dtoa_r+0x29e>
 8006ddc:	e8df f003 	tbb	[pc, r3]
 8006de0:	2c385553 	.word	0x2c385553
 8006de4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006de8:	441e      	add	r6, r3
 8006dea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	bfc1      	itttt	gt
 8006df2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006df6:	fa08 f803 	lslgt.w	r8, r8, r3
 8006dfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006dfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e02:	bfd6      	itet	le
 8006e04:	f1c3 0320 	rsble	r3, r3, #32
 8006e08:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e0c:	fa04 f003 	lslle.w	r0, r4, r3
 8006e10:	f7f9 fae8 	bl	80003e4 <__aeabi_ui2d>
 8006e14:	2201      	movs	r2, #1
 8006e16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e1a:	3e01      	subs	r6, #1
 8006e1c:	9212      	str	r2, [sp, #72]	@ 0x48
 8006e1e:	e774      	b.n	8006d0a <_dtoa_r+0x102>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e7b5      	b.n	8006d90 <_dtoa_r+0x188>
 8006e24:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006e26:	e7b4      	b.n	8006d92 <_dtoa_r+0x18a>
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	1bdb      	subs	r3, r3, r7
 8006e2c:	9304      	str	r3, [sp, #16]
 8006e2e:	427b      	negs	r3, r7
 8006e30:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e32:	2300      	movs	r3, #0
 8006e34:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e36:	e7c1      	b.n	8006dbc <_dtoa_r+0x1b4>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e3e:	eb07 0b03 	add.w	fp, r7, r3
 8006e42:	f10b 0301 	add.w	r3, fp, #1
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	9308      	str	r3, [sp, #32]
 8006e4a:	bfb8      	it	lt
 8006e4c:	2301      	movlt	r3, #1
 8006e4e:	e006      	b.n	8006e5e <_dtoa_r+0x256>
 8006e50:	2301      	movs	r3, #1
 8006e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dd28      	ble.n	8006eac <_dtoa_r+0x2a4>
 8006e5a:	469b      	mov	fp, r3
 8006e5c:	9308      	str	r3, [sp, #32]
 8006e5e:	2100      	movs	r1, #0
 8006e60:	2204      	movs	r2, #4
 8006e62:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006e66:	f102 0514 	add.w	r5, r2, #20
 8006e6a:	429d      	cmp	r5, r3
 8006e6c:	d926      	bls.n	8006ebc <_dtoa_r+0x2b4>
 8006e6e:	6041      	str	r1, [r0, #4]
 8006e70:	4648      	mov	r0, r9
 8006e72:	f001 f8e7 	bl	8008044 <_Balloc>
 8006e76:	4682      	mov	sl, r0
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d143      	bne.n	8006f04 <_dtoa_r+0x2fc>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e82:	4b1f      	ldr	r3, [pc, #124]	@ (8006f00 <_dtoa_r+0x2f8>)
 8006e84:	e6d4      	b.n	8006c30 <_dtoa_r+0x28>
 8006e86:	2300      	movs	r3, #0
 8006e88:	e7e3      	b.n	8006e52 <_dtoa_r+0x24a>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e7d5      	b.n	8006e3a <_dtoa_r+0x232>
 8006e8e:	2401      	movs	r4, #1
 8006e90:	2300      	movs	r3, #0
 8006e92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e94:	9320      	str	r3, [sp, #128]	@ 0x80
 8006e96:	f04f 3bff 	mov.w	fp, #4294967295
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2312      	movs	r3, #18
 8006e9e:	f8cd b020 	str.w	fp, [sp, #32]
 8006ea2:	9221      	str	r2, [sp, #132]	@ 0x84
 8006ea4:	e7db      	b.n	8006e5e <_dtoa_r+0x256>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eaa:	e7f4      	b.n	8006e96 <_dtoa_r+0x28e>
 8006eac:	f04f 0b01 	mov.w	fp, #1
 8006eb0:	465b      	mov	r3, fp
 8006eb2:	f8cd b020 	str.w	fp, [sp, #32]
 8006eb6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006eba:	e7d0      	b.n	8006e5e <_dtoa_r+0x256>
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	0052      	lsls	r2, r2, #1
 8006ec0:	e7d1      	b.n	8006e66 <_dtoa_r+0x25e>
 8006ec2:	bf00      	nop
 8006ec4:	f3af 8000 	nop.w
 8006ec8:	636f4361 	.word	0x636f4361
 8006ecc:	3fd287a7 	.word	0x3fd287a7
 8006ed0:	8b60c8b3 	.word	0x8b60c8b3
 8006ed4:	3fc68a28 	.word	0x3fc68a28
 8006ed8:	509f79fb 	.word	0x509f79fb
 8006edc:	3fd34413 	.word	0x3fd34413
 8006ee0:	08009600 	.word	0x08009600
 8006ee4:	080096c2 	.word	0x080096c2
 8006ee8:	7ff00000 	.word	0x7ff00000
 8006eec:	080096be 	.word	0x080096be
 8006ef0:	080095dd 	.word	0x080095dd
 8006ef4:	080095dc 	.word	0x080095dc
 8006ef8:	3ff80000 	.word	0x3ff80000
 8006efc:	08009880 	.word	0x08009880
 8006f00:	0800971a 	.word	0x0800971a
 8006f04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f08:	6018      	str	r0, [r3, #0]
 8006f0a:	9b08      	ldr	r3, [sp, #32]
 8006f0c:	2b0e      	cmp	r3, #14
 8006f0e:	f200 80a1 	bhi.w	8007054 <_dtoa_r+0x44c>
 8006f12:	2c00      	cmp	r4, #0
 8006f14:	f000 809e 	beq.w	8007054 <_dtoa_r+0x44c>
 8006f18:	2f00      	cmp	r7, #0
 8006f1a:	dd33      	ble.n	8006f84 <_dtoa_r+0x37c>
 8006f1c:	4b9c      	ldr	r3, [pc, #624]	@ (8007190 <_dtoa_r+0x588>)
 8006f1e:	f007 020f 	and.w	r2, r7, #15
 8006f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f26:	05f8      	lsls	r0, r7, #23
 8006f28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006f30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f34:	d516      	bpl.n	8006f64 <_dtoa_r+0x35c>
 8006f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f3a:	4b96      	ldr	r3, [pc, #600]	@ (8007194 <_dtoa_r+0x58c>)
 8006f3c:	2603      	movs	r6, #3
 8006f3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f42:	f7f9 fbf3 	bl	800072c <__aeabi_ddiv>
 8006f46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f4a:	f004 040f 	and.w	r4, r4, #15
 8006f4e:	4d91      	ldr	r5, [pc, #580]	@ (8007194 <_dtoa_r+0x58c>)
 8006f50:	b954      	cbnz	r4, 8006f68 <_dtoa_r+0x360>
 8006f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f5a:	f7f9 fbe7 	bl	800072c <__aeabi_ddiv>
 8006f5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f62:	e028      	b.n	8006fb6 <_dtoa_r+0x3ae>
 8006f64:	2602      	movs	r6, #2
 8006f66:	e7f2      	b.n	8006f4e <_dtoa_r+0x346>
 8006f68:	07e1      	lsls	r1, r4, #31
 8006f6a:	d508      	bpl.n	8006f7e <_dtoa_r+0x376>
 8006f6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f74:	f7f9 fab0 	bl	80004d8 <__aeabi_dmul>
 8006f78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	1064      	asrs	r4, r4, #1
 8006f80:	3508      	adds	r5, #8
 8006f82:	e7e5      	b.n	8006f50 <_dtoa_r+0x348>
 8006f84:	f000 80af 	beq.w	80070e6 <_dtoa_r+0x4de>
 8006f88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f8c:	427c      	negs	r4, r7
 8006f8e:	4b80      	ldr	r3, [pc, #512]	@ (8007190 <_dtoa_r+0x588>)
 8006f90:	f004 020f 	and.w	r2, r4, #15
 8006f94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fa9c 	bl	80004d8 <__aeabi_dmul>
 8006fa0:	2602      	movs	r6, #2
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fa8:	4d7a      	ldr	r5, [pc, #488]	@ (8007194 <_dtoa_r+0x58c>)
 8006faa:	1124      	asrs	r4, r4, #4
 8006fac:	2c00      	cmp	r4, #0
 8006fae:	f040 808f 	bne.w	80070d0 <_dtoa_r+0x4c8>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1d3      	bne.n	8006f5e <_dtoa_r+0x356>
 8006fb6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006fba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8094 	beq.w	80070ea <_dtoa_r+0x4e2>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4b73      	ldr	r3, [pc, #460]	@ (8007198 <_dtoa_r+0x590>)
 8006fca:	f7f9 fcf7 	bl	80009bc <__aeabi_dcmplt>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f000 808b 	beq.w	80070ea <_dtoa_r+0x4e2>
 8006fd4:	9b08      	ldr	r3, [sp, #32]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 8087 	beq.w	80070ea <_dtoa_r+0x4e2>
 8006fdc:	f1bb 0f00 	cmp.w	fp, #0
 8006fe0:	dd34      	ble.n	800704c <_dtoa_r+0x444>
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800719c <_dtoa_r+0x594>)
 8006fea:	f7f9 fa75 	bl	80004d8 <__aeabi_dmul>
 8006fee:	465c      	mov	r4, fp
 8006ff0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ff4:	f107 38ff 	add.w	r8, r7, #4294967295
 8006ff8:	3601      	adds	r6, #1
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7f9 fa02 	bl	8000404 <__aeabi_i2d>
 8007000:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007004:	f7f9 fa68 	bl	80004d8 <__aeabi_dmul>
 8007008:	2200      	movs	r2, #0
 800700a:	4b65      	ldr	r3, [pc, #404]	@ (80071a0 <_dtoa_r+0x598>)
 800700c:	f7f9 f8ae 	bl	800016c <__adddf3>
 8007010:	4605      	mov	r5, r0
 8007012:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007016:	2c00      	cmp	r4, #0
 8007018:	d16a      	bne.n	80070f0 <_dtoa_r+0x4e8>
 800701a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800701e:	2200      	movs	r2, #0
 8007020:	4b60      	ldr	r3, [pc, #384]	@ (80071a4 <_dtoa_r+0x59c>)
 8007022:	f7f9 f8a1 	bl	8000168 <__aeabi_dsub>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800702e:	462a      	mov	r2, r5
 8007030:	4633      	mov	r3, r6
 8007032:	f7f9 fce1 	bl	80009f8 <__aeabi_dcmpgt>
 8007036:	2800      	cmp	r0, #0
 8007038:	f040 8298 	bne.w	800756c <_dtoa_r+0x964>
 800703c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007040:	462a      	mov	r2, r5
 8007042:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007046:	f7f9 fcb9 	bl	80009bc <__aeabi_dcmplt>
 800704a:	bb38      	cbnz	r0, 800709c <_dtoa_r+0x494>
 800704c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007050:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007054:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007056:	2b00      	cmp	r3, #0
 8007058:	f2c0 8157 	blt.w	800730a <_dtoa_r+0x702>
 800705c:	2f0e      	cmp	r7, #14
 800705e:	f300 8154 	bgt.w	800730a <_dtoa_r+0x702>
 8007062:	4b4b      	ldr	r3, [pc, #300]	@ (8007190 <_dtoa_r+0x588>)
 8007064:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007068:	e9d3 3400 	ldrd	r3, r4, [r3]
 800706c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007070:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007072:	2b00      	cmp	r3, #0
 8007074:	f280 80e5 	bge.w	8007242 <_dtoa_r+0x63a>
 8007078:	9b08      	ldr	r3, [sp, #32]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f300 80e1 	bgt.w	8007242 <_dtoa_r+0x63a>
 8007080:	d10c      	bne.n	800709c <_dtoa_r+0x494>
 8007082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007086:	2200      	movs	r2, #0
 8007088:	4b46      	ldr	r3, [pc, #280]	@ (80071a4 <_dtoa_r+0x59c>)
 800708a:	f7f9 fa25 	bl	80004d8 <__aeabi_dmul>
 800708e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007092:	f7f9 fca7 	bl	80009e4 <__aeabi_dcmpge>
 8007096:	2800      	cmp	r0, #0
 8007098:	f000 8266 	beq.w	8007568 <_dtoa_r+0x960>
 800709c:	2400      	movs	r4, #0
 800709e:	4625      	mov	r5, r4
 80070a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070a2:	4656      	mov	r6, sl
 80070a4:	ea6f 0803 	mvn.w	r8, r3
 80070a8:	2700      	movs	r7, #0
 80070aa:	4621      	mov	r1, r4
 80070ac:	4648      	mov	r0, r9
 80070ae:	f001 f809 	bl	80080c4 <_Bfree>
 80070b2:	2d00      	cmp	r5, #0
 80070b4:	f000 80bd 	beq.w	8007232 <_dtoa_r+0x62a>
 80070b8:	b12f      	cbz	r7, 80070c6 <_dtoa_r+0x4be>
 80070ba:	42af      	cmp	r7, r5
 80070bc:	d003      	beq.n	80070c6 <_dtoa_r+0x4be>
 80070be:	4639      	mov	r1, r7
 80070c0:	4648      	mov	r0, r9
 80070c2:	f000 ffff 	bl	80080c4 <_Bfree>
 80070c6:	4629      	mov	r1, r5
 80070c8:	4648      	mov	r0, r9
 80070ca:	f000 fffb 	bl	80080c4 <_Bfree>
 80070ce:	e0b0      	b.n	8007232 <_dtoa_r+0x62a>
 80070d0:	07e2      	lsls	r2, r4, #31
 80070d2:	d505      	bpl.n	80070e0 <_dtoa_r+0x4d8>
 80070d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070d8:	f7f9 f9fe 	bl	80004d8 <__aeabi_dmul>
 80070dc:	2301      	movs	r3, #1
 80070de:	3601      	adds	r6, #1
 80070e0:	1064      	asrs	r4, r4, #1
 80070e2:	3508      	adds	r5, #8
 80070e4:	e762      	b.n	8006fac <_dtoa_r+0x3a4>
 80070e6:	2602      	movs	r6, #2
 80070e8:	e765      	b.n	8006fb6 <_dtoa_r+0x3ae>
 80070ea:	46b8      	mov	r8, r7
 80070ec:	9c08      	ldr	r4, [sp, #32]
 80070ee:	e784      	b.n	8006ffa <_dtoa_r+0x3f2>
 80070f0:	4b27      	ldr	r3, [pc, #156]	@ (8007190 <_dtoa_r+0x588>)
 80070f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070fc:	4454      	add	r4, sl
 80070fe:	2900      	cmp	r1, #0
 8007100:	d054      	beq.n	80071ac <_dtoa_r+0x5a4>
 8007102:	2000      	movs	r0, #0
 8007104:	4928      	ldr	r1, [pc, #160]	@ (80071a8 <_dtoa_r+0x5a0>)
 8007106:	f7f9 fb11 	bl	800072c <__aeabi_ddiv>
 800710a:	4633      	mov	r3, r6
 800710c:	462a      	mov	r2, r5
 800710e:	f7f9 f82b 	bl	8000168 <__aeabi_dsub>
 8007112:	4656      	mov	r6, sl
 8007114:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007118:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800711c:	f7f9 fc8c 	bl	8000a38 <__aeabi_d2iz>
 8007120:	4605      	mov	r5, r0
 8007122:	f7f9 f96f 	bl	8000404 <__aeabi_i2d>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800712e:	f7f9 f81b 	bl	8000168 <__aeabi_dsub>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	3530      	adds	r5, #48	@ 0x30
 8007138:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800713c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007140:	f806 5b01 	strb.w	r5, [r6], #1
 8007144:	f7f9 fc3a 	bl	80009bc <__aeabi_dcmplt>
 8007148:	2800      	cmp	r0, #0
 800714a:	d172      	bne.n	8007232 <_dtoa_r+0x62a>
 800714c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007150:	2000      	movs	r0, #0
 8007152:	4911      	ldr	r1, [pc, #68]	@ (8007198 <_dtoa_r+0x590>)
 8007154:	f7f9 f808 	bl	8000168 <__aeabi_dsub>
 8007158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800715c:	f7f9 fc2e 	bl	80009bc <__aeabi_dcmplt>
 8007160:	2800      	cmp	r0, #0
 8007162:	f040 80b4 	bne.w	80072ce <_dtoa_r+0x6c6>
 8007166:	42a6      	cmp	r6, r4
 8007168:	f43f af70 	beq.w	800704c <_dtoa_r+0x444>
 800716c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007170:	2200      	movs	r2, #0
 8007172:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <_dtoa_r+0x594>)
 8007174:	f7f9 f9b0 	bl	80004d8 <__aeabi_dmul>
 8007178:	2200      	movs	r2, #0
 800717a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800717e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007182:	4b06      	ldr	r3, [pc, #24]	@ (800719c <_dtoa_r+0x594>)
 8007184:	f7f9 f9a8 	bl	80004d8 <__aeabi_dmul>
 8007188:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800718c:	e7c4      	b.n	8007118 <_dtoa_r+0x510>
 800718e:	bf00      	nop
 8007190:	08009880 	.word	0x08009880
 8007194:	08009858 	.word	0x08009858
 8007198:	3ff00000 	.word	0x3ff00000
 800719c:	40240000 	.word	0x40240000
 80071a0:	401c0000 	.word	0x401c0000
 80071a4:	40140000 	.word	0x40140000
 80071a8:	3fe00000 	.word	0x3fe00000
 80071ac:	4631      	mov	r1, r6
 80071ae:	4628      	mov	r0, r5
 80071b0:	f7f9 f992 	bl	80004d8 <__aeabi_dmul>
 80071b4:	4656      	mov	r6, sl
 80071b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071ba:	9413      	str	r4, [sp, #76]	@ 0x4c
 80071bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071c0:	f7f9 fc3a 	bl	8000a38 <__aeabi_d2iz>
 80071c4:	4605      	mov	r5, r0
 80071c6:	f7f9 f91d 	bl	8000404 <__aeabi_i2d>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071d2:	f7f8 ffc9 	bl	8000168 <__aeabi_dsub>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	3530      	adds	r5, #48	@ 0x30
 80071dc:	f806 5b01 	strb.w	r5, [r6], #1
 80071e0:	42a6      	cmp	r6, r4
 80071e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	d124      	bne.n	8007236 <_dtoa_r+0x62e>
 80071ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071f0:	4bae      	ldr	r3, [pc, #696]	@ (80074ac <_dtoa_r+0x8a4>)
 80071f2:	f7f8 ffbb 	bl	800016c <__adddf3>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071fe:	f7f9 fbfb 	bl	80009f8 <__aeabi_dcmpgt>
 8007202:	2800      	cmp	r0, #0
 8007204:	d163      	bne.n	80072ce <_dtoa_r+0x6c6>
 8007206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800720a:	2000      	movs	r0, #0
 800720c:	49a7      	ldr	r1, [pc, #668]	@ (80074ac <_dtoa_r+0x8a4>)
 800720e:	f7f8 ffab 	bl	8000168 <__aeabi_dsub>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800721a:	f7f9 fbcf 	bl	80009bc <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	f43f af14 	beq.w	800704c <_dtoa_r+0x444>
 8007224:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007226:	1e73      	subs	r3, r6, #1
 8007228:	9313      	str	r3, [sp, #76]	@ 0x4c
 800722a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800722e:	2b30      	cmp	r3, #48	@ 0x30
 8007230:	d0f8      	beq.n	8007224 <_dtoa_r+0x61c>
 8007232:	4647      	mov	r7, r8
 8007234:	e03b      	b.n	80072ae <_dtoa_r+0x6a6>
 8007236:	4b9e      	ldr	r3, [pc, #632]	@ (80074b0 <_dtoa_r+0x8a8>)
 8007238:	f7f9 f94e 	bl	80004d8 <__aeabi_dmul>
 800723c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007240:	e7bc      	b.n	80071bc <_dtoa_r+0x5b4>
 8007242:	4656      	mov	r6, sl
 8007244:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800724c:	4620      	mov	r0, r4
 800724e:	4629      	mov	r1, r5
 8007250:	f7f9 fa6c 	bl	800072c <__aeabi_ddiv>
 8007254:	f7f9 fbf0 	bl	8000a38 <__aeabi_d2iz>
 8007258:	4680      	mov	r8, r0
 800725a:	f7f9 f8d3 	bl	8000404 <__aeabi_i2d>
 800725e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007262:	f7f9 f939 	bl	80004d8 <__aeabi_dmul>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4620      	mov	r0, r4
 800726c:	4629      	mov	r1, r5
 800726e:	f7f8 ff7b 	bl	8000168 <__aeabi_dsub>
 8007272:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007276:	9d08      	ldr	r5, [sp, #32]
 8007278:	f806 4b01 	strb.w	r4, [r6], #1
 800727c:	eba6 040a 	sub.w	r4, r6, sl
 8007280:	42a5      	cmp	r5, r4
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	d133      	bne.n	80072f0 <_dtoa_r+0x6e8>
 8007288:	f7f8 ff70 	bl	800016c <__adddf3>
 800728c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007290:	4604      	mov	r4, r0
 8007292:	460d      	mov	r5, r1
 8007294:	f7f9 fbb0 	bl	80009f8 <__aeabi_dcmpgt>
 8007298:	b9c0      	cbnz	r0, 80072cc <_dtoa_r+0x6c4>
 800729a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800729e:	4620      	mov	r0, r4
 80072a0:	4629      	mov	r1, r5
 80072a2:	f7f9 fb81 	bl	80009a8 <__aeabi_dcmpeq>
 80072a6:	b110      	cbz	r0, 80072ae <_dtoa_r+0x6a6>
 80072a8:	f018 0f01 	tst.w	r8, #1
 80072ac:	d10e      	bne.n	80072cc <_dtoa_r+0x6c4>
 80072ae:	4648      	mov	r0, r9
 80072b0:	9903      	ldr	r1, [sp, #12]
 80072b2:	f000 ff07 	bl	80080c4 <_Bfree>
 80072b6:	2300      	movs	r3, #0
 80072b8:	7033      	strb	r3, [r6, #0]
 80072ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80072bc:	3701      	adds	r7, #1
 80072be:	601f      	str	r7, [r3, #0]
 80072c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 824b 	beq.w	800775e <_dtoa_r+0xb56>
 80072c8:	601e      	str	r6, [r3, #0]
 80072ca:	e248      	b.n	800775e <_dtoa_r+0xb56>
 80072cc:	46b8      	mov	r8, r7
 80072ce:	4633      	mov	r3, r6
 80072d0:	461e      	mov	r6, r3
 80072d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072d6:	2a39      	cmp	r2, #57	@ 0x39
 80072d8:	d106      	bne.n	80072e8 <_dtoa_r+0x6e0>
 80072da:	459a      	cmp	sl, r3
 80072dc:	d1f8      	bne.n	80072d0 <_dtoa_r+0x6c8>
 80072de:	2230      	movs	r2, #48	@ 0x30
 80072e0:	f108 0801 	add.w	r8, r8, #1
 80072e4:	f88a 2000 	strb.w	r2, [sl]
 80072e8:	781a      	ldrb	r2, [r3, #0]
 80072ea:	3201      	adds	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	e7a0      	b.n	8007232 <_dtoa_r+0x62a>
 80072f0:	2200      	movs	r2, #0
 80072f2:	4b6f      	ldr	r3, [pc, #444]	@ (80074b0 <_dtoa_r+0x8a8>)
 80072f4:	f7f9 f8f0 	bl	80004d8 <__aeabi_dmul>
 80072f8:	2200      	movs	r2, #0
 80072fa:	2300      	movs	r3, #0
 80072fc:	4604      	mov	r4, r0
 80072fe:	460d      	mov	r5, r1
 8007300:	f7f9 fb52 	bl	80009a8 <__aeabi_dcmpeq>
 8007304:	2800      	cmp	r0, #0
 8007306:	d09f      	beq.n	8007248 <_dtoa_r+0x640>
 8007308:	e7d1      	b.n	80072ae <_dtoa_r+0x6a6>
 800730a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800730c:	2a00      	cmp	r2, #0
 800730e:	f000 80ea 	beq.w	80074e6 <_dtoa_r+0x8de>
 8007312:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007314:	2a01      	cmp	r2, #1
 8007316:	f300 80cd 	bgt.w	80074b4 <_dtoa_r+0x8ac>
 800731a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800731c:	2a00      	cmp	r2, #0
 800731e:	f000 80c1 	beq.w	80074a4 <_dtoa_r+0x89c>
 8007322:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007326:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007328:	9e04      	ldr	r6, [sp, #16]
 800732a:	9a04      	ldr	r2, [sp, #16]
 800732c:	2101      	movs	r1, #1
 800732e:	441a      	add	r2, r3
 8007330:	9204      	str	r2, [sp, #16]
 8007332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007334:	4648      	mov	r0, r9
 8007336:	441a      	add	r2, r3
 8007338:	9209      	str	r2, [sp, #36]	@ 0x24
 800733a:	f000 ffc1 	bl	80082c0 <__i2b>
 800733e:	4605      	mov	r5, r0
 8007340:	b166      	cbz	r6, 800735c <_dtoa_r+0x754>
 8007342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	dd09      	ble.n	800735c <_dtoa_r+0x754>
 8007348:	42b3      	cmp	r3, r6
 800734a:	bfa8      	it	ge
 800734c:	4633      	movge	r3, r6
 800734e:	9a04      	ldr	r2, [sp, #16]
 8007350:	1af6      	subs	r6, r6, r3
 8007352:	1ad2      	subs	r2, r2, r3
 8007354:	9204      	str	r2, [sp, #16]
 8007356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	9309      	str	r3, [sp, #36]	@ 0x24
 800735c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800735e:	b30b      	cbz	r3, 80073a4 <_dtoa_r+0x79c>
 8007360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 80c6 	beq.w	80074f4 <_dtoa_r+0x8ec>
 8007368:	2c00      	cmp	r4, #0
 800736a:	f000 80c0 	beq.w	80074ee <_dtoa_r+0x8e6>
 800736e:	4629      	mov	r1, r5
 8007370:	4622      	mov	r2, r4
 8007372:	4648      	mov	r0, r9
 8007374:	f001 f85c 	bl	8008430 <__pow5mult>
 8007378:	9a03      	ldr	r2, [sp, #12]
 800737a:	4601      	mov	r1, r0
 800737c:	4605      	mov	r5, r0
 800737e:	4648      	mov	r0, r9
 8007380:	f000 ffb4 	bl	80082ec <__multiply>
 8007384:	9903      	ldr	r1, [sp, #12]
 8007386:	4680      	mov	r8, r0
 8007388:	4648      	mov	r0, r9
 800738a:	f000 fe9b 	bl	80080c4 <_Bfree>
 800738e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007390:	1b1b      	subs	r3, r3, r4
 8007392:	930a      	str	r3, [sp, #40]	@ 0x28
 8007394:	f000 80b1 	beq.w	80074fa <_dtoa_r+0x8f2>
 8007398:	4641      	mov	r1, r8
 800739a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800739c:	4648      	mov	r0, r9
 800739e:	f001 f847 	bl	8008430 <__pow5mult>
 80073a2:	9003      	str	r0, [sp, #12]
 80073a4:	2101      	movs	r1, #1
 80073a6:	4648      	mov	r0, r9
 80073a8:	f000 ff8a 	bl	80082c0 <__i2b>
 80073ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ae:	4604      	mov	r4, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 81d8 	beq.w	8007766 <_dtoa_r+0xb5e>
 80073b6:	461a      	mov	r2, r3
 80073b8:	4601      	mov	r1, r0
 80073ba:	4648      	mov	r0, r9
 80073bc:	f001 f838 	bl	8008430 <__pow5mult>
 80073c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073c2:	4604      	mov	r4, r0
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	f300 809f 	bgt.w	8007508 <_dtoa_r+0x900>
 80073ca:	9b06      	ldr	r3, [sp, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 8097 	bne.w	8007500 <_dtoa_r+0x8f8>
 80073d2:	9b07      	ldr	r3, [sp, #28]
 80073d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f040 8093 	bne.w	8007504 <_dtoa_r+0x8fc>
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073e4:	0d1b      	lsrs	r3, r3, #20
 80073e6:	051b      	lsls	r3, r3, #20
 80073e8:	b133      	cbz	r3, 80073f8 <_dtoa_r+0x7f0>
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	3301      	adds	r3, #1
 80073ee:	9304      	str	r3, [sp, #16]
 80073f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f2:	3301      	adds	r3, #1
 80073f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f6:	2301      	movs	r3, #1
 80073f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80073fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 81b8 	beq.w	8007772 <_dtoa_r+0xb6a>
 8007402:	6923      	ldr	r3, [r4, #16]
 8007404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007408:	6918      	ldr	r0, [r3, #16]
 800740a:	f000 ff0d 	bl	8008228 <__hi0bits>
 800740e:	f1c0 0020 	rsb	r0, r0, #32
 8007412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007414:	4418      	add	r0, r3
 8007416:	f010 001f 	ands.w	r0, r0, #31
 800741a:	f000 8082 	beq.w	8007522 <_dtoa_r+0x91a>
 800741e:	f1c0 0320 	rsb	r3, r0, #32
 8007422:	2b04      	cmp	r3, #4
 8007424:	dd73      	ble.n	800750e <_dtoa_r+0x906>
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	f1c0 001c 	rsb	r0, r0, #28
 800742c:	4403      	add	r3, r0
 800742e:	9304      	str	r3, [sp, #16]
 8007430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007432:	4406      	add	r6, r0
 8007434:	4403      	add	r3, r0
 8007436:	9309      	str	r3, [sp, #36]	@ 0x24
 8007438:	9b04      	ldr	r3, [sp, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	dd05      	ble.n	800744a <_dtoa_r+0x842>
 800743e:	461a      	mov	r2, r3
 8007440:	4648      	mov	r0, r9
 8007442:	9903      	ldr	r1, [sp, #12]
 8007444:	f001 f84e 	bl	80084e4 <__lshift>
 8007448:	9003      	str	r0, [sp, #12]
 800744a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	dd05      	ble.n	800745c <_dtoa_r+0x854>
 8007450:	4621      	mov	r1, r4
 8007452:	461a      	mov	r2, r3
 8007454:	4648      	mov	r0, r9
 8007456:	f001 f845 	bl	80084e4 <__lshift>
 800745a:	4604      	mov	r4, r0
 800745c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800745e:	2b00      	cmp	r3, #0
 8007460:	d061      	beq.n	8007526 <_dtoa_r+0x91e>
 8007462:	4621      	mov	r1, r4
 8007464:	9803      	ldr	r0, [sp, #12]
 8007466:	f001 f8a9 	bl	80085bc <__mcmp>
 800746a:	2800      	cmp	r0, #0
 800746c:	da5b      	bge.n	8007526 <_dtoa_r+0x91e>
 800746e:	2300      	movs	r3, #0
 8007470:	220a      	movs	r2, #10
 8007472:	4648      	mov	r0, r9
 8007474:	9903      	ldr	r1, [sp, #12]
 8007476:	f000 fe47 	bl	8008108 <__multadd>
 800747a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800747c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007480:	9003      	str	r0, [sp, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8177 	beq.w	8007776 <_dtoa_r+0xb6e>
 8007488:	4629      	mov	r1, r5
 800748a:	2300      	movs	r3, #0
 800748c:	220a      	movs	r2, #10
 800748e:	4648      	mov	r0, r9
 8007490:	f000 fe3a 	bl	8008108 <__multadd>
 8007494:	f1bb 0f00 	cmp.w	fp, #0
 8007498:	4605      	mov	r5, r0
 800749a:	dc6f      	bgt.n	800757c <_dtoa_r+0x974>
 800749c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800749e:	2b02      	cmp	r3, #2
 80074a0:	dc49      	bgt.n	8007536 <_dtoa_r+0x92e>
 80074a2:	e06b      	b.n	800757c <_dtoa_r+0x974>
 80074a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80074aa:	e73c      	b.n	8007326 <_dtoa_r+0x71e>
 80074ac:	3fe00000 	.word	0x3fe00000
 80074b0:	40240000 	.word	0x40240000
 80074b4:	9b08      	ldr	r3, [sp, #32]
 80074b6:	1e5c      	subs	r4, r3, #1
 80074b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ba:	42a3      	cmp	r3, r4
 80074bc:	db09      	blt.n	80074d2 <_dtoa_r+0x8ca>
 80074be:	1b1c      	subs	r4, r3, r4
 80074c0:	9b08      	ldr	r3, [sp, #32]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f6bf af30 	bge.w	8007328 <_dtoa_r+0x720>
 80074c8:	9b04      	ldr	r3, [sp, #16]
 80074ca:	9a08      	ldr	r2, [sp, #32]
 80074cc:	1a9e      	subs	r6, r3, r2
 80074ce:	2300      	movs	r3, #0
 80074d0:	e72b      	b.n	800732a <_dtoa_r+0x722>
 80074d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074d6:	1ae3      	subs	r3, r4, r3
 80074d8:	441a      	add	r2, r3
 80074da:	940a      	str	r4, [sp, #40]	@ 0x28
 80074dc:	9e04      	ldr	r6, [sp, #16]
 80074de:	2400      	movs	r4, #0
 80074e0:	9b08      	ldr	r3, [sp, #32]
 80074e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80074e4:	e721      	b.n	800732a <_dtoa_r+0x722>
 80074e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074e8:	9e04      	ldr	r6, [sp, #16]
 80074ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80074ec:	e728      	b.n	8007340 <_dtoa_r+0x738>
 80074ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80074f2:	e751      	b.n	8007398 <_dtoa_r+0x790>
 80074f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074f6:	9903      	ldr	r1, [sp, #12]
 80074f8:	e750      	b.n	800739c <_dtoa_r+0x794>
 80074fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80074fe:	e751      	b.n	80073a4 <_dtoa_r+0x79c>
 8007500:	2300      	movs	r3, #0
 8007502:	e779      	b.n	80073f8 <_dtoa_r+0x7f0>
 8007504:	9b06      	ldr	r3, [sp, #24]
 8007506:	e777      	b.n	80073f8 <_dtoa_r+0x7f0>
 8007508:	2300      	movs	r3, #0
 800750a:	930a      	str	r3, [sp, #40]	@ 0x28
 800750c:	e779      	b.n	8007402 <_dtoa_r+0x7fa>
 800750e:	d093      	beq.n	8007438 <_dtoa_r+0x830>
 8007510:	9a04      	ldr	r2, [sp, #16]
 8007512:	331c      	adds	r3, #28
 8007514:	441a      	add	r2, r3
 8007516:	9204      	str	r2, [sp, #16]
 8007518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800751a:	441e      	add	r6, r3
 800751c:	441a      	add	r2, r3
 800751e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007520:	e78a      	b.n	8007438 <_dtoa_r+0x830>
 8007522:	4603      	mov	r3, r0
 8007524:	e7f4      	b.n	8007510 <_dtoa_r+0x908>
 8007526:	9b08      	ldr	r3, [sp, #32]
 8007528:	46b8      	mov	r8, r7
 800752a:	2b00      	cmp	r3, #0
 800752c:	dc20      	bgt.n	8007570 <_dtoa_r+0x968>
 800752e:	469b      	mov	fp, r3
 8007530:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007532:	2b02      	cmp	r3, #2
 8007534:	dd1e      	ble.n	8007574 <_dtoa_r+0x96c>
 8007536:	f1bb 0f00 	cmp.w	fp, #0
 800753a:	f47f adb1 	bne.w	80070a0 <_dtoa_r+0x498>
 800753e:	4621      	mov	r1, r4
 8007540:	465b      	mov	r3, fp
 8007542:	2205      	movs	r2, #5
 8007544:	4648      	mov	r0, r9
 8007546:	f000 fddf 	bl	8008108 <__multadd>
 800754a:	4601      	mov	r1, r0
 800754c:	4604      	mov	r4, r0
 800754e:	9803      	ldr	r0, [sp, #12]
 8007550:	f001 f834 	bl	80085bc <__mcmp>
 8007554:	2800      	cmp	r0, #0
 8007556:	f77f ada3 	ble.w	80070a0 <_dtoa_r+0x498>
 800755a:	4656      	mov	r6, sl
 800755c:	2331      	movs	r3, #49	@ 0x31
 800755e:	f108 0801 	add.w	r8, r8, #1
 8007562:	f806 3b01 	strb.w	r3, [r6], #1
 8007566:	e59f      	b.n	80070a8 <_dtoa_r+0x4a0>
 8007568:	46b8      	mov	r8, r7
 800756a:	9c08      	ldr	r4, [sp, #32]
 800756c:	4625      	mov	r5, r4
 800756e:	e7f4      	b.n	800755a <_dtoa_r+0x952>
 8007570:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 8101 	beq.w	800777e <_dtoa_r+0xb76>
 800757c:	2e00      	cmp	r6, #0
 800757e:	dd05      	ble.n	800758c <_dtoa_r+0x984>
 8007580:	4629      	mov	r1, r5
 8007582:	4632      	mov	r2, r6
 8007584:	4648      	mov	r0, r9
 8007586:	f000 ffad 	bl	80084e4 <__lshift>
 800758a:	4605      	mov	r5, r0
 800758c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800758e:	2b00      	cmp	r3, #0
 8007590:	d05c      	beq.n	800764c <_dtoa_r+0xa44>
 8007592:	4648      	mov	r0, r9
 8007594:	6869      	ldr	r1, [r5, #4]
 8007596:	f000 fd55 	bl	8008044 <_Balloc>
 800759a:	4606      	mov	r6, r0
 800759c:	b928      	cbnz	r0, 80075aa <_dtoa_r+0x9a2>
 800759e:	4602      	mov	r2, r0
 80075a0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80075a4:	4b80      	ldr	r3, [pc, #512]	@ (80077a8 <_dtoa_r+0xba0>)
 80075a6:	f7ff bb43 	b.w	8006c30 <_dtoa_r+0x28>
 80075aa:	692a      	ldr	r2, [r5, #16]
 80075ac:	f105 010c 	add.w	r1, r5, #12
 80075b0:	3202      	adds	r2, #2
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	300c      	adds	r0, #12
 80075b6:	f7ff fa6a 	bl	8006a8e <memcpy>
 80075ba:	2201      	movs	r2, #1
 80075bc:	4631      	mov	r1, r6
 80075be:	4648      	mov	r0, r9
 80075c0:	f000 ff90 	bl	80084e4 <__lshift>
 80075c4:	462f      	mov	r7, r5
 80075c6:	4605      	mov	r5, r0
 80075c8:	f10a 0301 	add.w	r3, sl, #1
 80075cc:	9304      	str	r3, [sp, #16]
 80075ce:	eb0a 030b 	add.w	r3, sl, fp
 80075d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075d4:	9b06      	ldr	r3, [sp, #24]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	9309      	str	r3, [sp, #36]	@ 0x24
 80075dc:	9b04      	ldr	r3, [sp, #16]
 80075de:	4621      	mov	r1, r4
 80075e0:	9803      	ldr	r0, [sp, #12]
 80075e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80075e6:	f7ff fa85 	bl	8006af4 <quorem>
 80075ea:	4603      	mov	r3, r0
 80075ec:	4639      	mov	r1, r7
 80075ee:	3330      	adds	r3, #48	@ 0x30
 80075f0:	9006      	str	r0, [sp, #24]
 80075f2:	9803      	ldr	r0, [sp, #12]
 80075f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075f6:	f000 ffe1 	bl	80085bc <__mcmp>
 80075fa:	462a      	mov	r2, r5
 80075fc:	9008      	str	r0, [sp, #32]
 80075fe:	4621      	mov	r1, r4
 8007600:	4648      	mov	r0, r9
 8007602:	f000 fff7 	bl	80085f4 <__mdiff>
 8007606:	68c2      	ldr	r2, [r0, #12]
 8007608:	4606      	mov	r6, r0
 800760a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800760c:	bb02      	cbnz	r2, 8007650 <_dtoa_r+0xa48>
 800760e:	4601      	mov	r1, r0
 8007610:	9803      	ldr	r0, [sp, #12]
 8007612:	f000 ffd3 	bl	80085bc <__mcmp>
 8007616:	4602      	mov	r2, r0
 8007618:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800761a:	4631      	mov	r1, r6
 800761c:	4648      	mov	r0, r9
 800761e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007622:	f000 fd4f 	bl	80080c4 <_Bfree>
 8007626:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007628:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800762a:	9e04      	ldr	r6, [sp, #16]
 800762c:	ea42 0103 	orr.w	r1, r2, r3
 8007630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007632:	4319      	orrs	r1, r3
 8007634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007636:	d10d      	bne.n	8007654 <_dtoa_r+0xa4c>
 8007638:	2b39      	cmp	r3, #57	@ 0x39
 800763a:	d027      	beq.n	800768c <_dtoa_r+0xa84>
 800763c:	9a08      	ldr	r2, [sp, #32]
 800763e:	2a00      	cmp	r2, #0
 8007640:	dd01      	ble.n	8007646 <_dtoa_r+0xa3e>
 8007642:	9b06      	ldr	r3, [sp, #24]
 8007644:	3331      	adds	r3, #49	@ 0x31
 8007646:	f88b 3000 	strb.w	r3, [fp]
 800764a:	e52e      	b.n	80070aa <_dtoa_r+0x4a2>
 800764c:	4628      	mov	r0, r5
 800764e:	e7b9      	b.n	80075c4 <_dtoa_r+0x9bc>
 8007650:	2201      	movs	r2, #1
 8007652:	e7e2      	b.n	800761a <_dtoa_r+0xa12>
 8007654:	9908      	ldr	r1, [sp, #32]
 8007656:	2900      	cmp	r1, #0
 8007658:	db04      	blt.n	8007664 <_dtoa_r+0xa5c>
 800765a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800765c:	4301      	orrs	r1, r0
 800765e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007660:	4301      	orrs	r1, r0
 8007662:	d120      	bne.n	80076a6 <_dtoa_r+0xa9e>
 8007664:	2a00      	cmp	r2, #0
 8007666:	ddee      	ble.n	8007646 <_dtoa_r+0xa3e>
 8007668:	2201      	movs	r2, #1
 800766a:	9903      	ldr	r1, [sp, #12]
 800766c:	4648      	mov	r0, r9
 800766e:	9304      	str	r3, [sp, #16]
 8007670:	f000 ff38 	bl	80084e4 <__lshift>
 8007674:	4621      	mov	r1, r4
 8007676:	9003      	str	r0, [sp, #12]
 8007678:	f000 ffa0 	bl	80085bc <__mcmp>
 800767c:	2800      	cmp	r0, #0
 800767e:	9b04      	ldr	r3, [sp, #16]
 8007680:	dc02      	bgt.n	8007688 <_dtoa_r+0xa80>
 8007682:	d1e0      	bne.n	8007646 <_dtoa_r+0xa3e>
 8007684:	07da      	lsls	r2, r3, #31
 8007686:	d5de      	bpl.n	8007646 <_dtoa_r+0xa3e>
 8007688:	2b39      	cmp	r3, #57	@ 0x39
 800768a:	d1da      	bne.n	8007642 <_dtoa_r+0xa3a>
 800768c:	2339      	movs	r3, #57	@ 0x39
 800768e:	f88b 3000 	strb.w	r3, [fp]
 8007692:	4633      	mov	r3, r6
 8007694:	461e      	mov	r6, r3
 8007696:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800769a:	3b01      	subs	r3, #1
 800769c:	2a39      	cmp	r2, #57	@ 0x39
 800769e:	d04e      	beq.n	800773e <_dtoa_r+0xb36>
 80076a0:	3201      	adds	r2, #1
 80076a2:	701a      	strb	r2, [r3, #0]
 80076a4:	e501      	b.n	80070aa <_dtoa_r+0x4a2>
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	dd03      	ble.n	80076b2 <_dtoa_r+0xaaa>
 80076aa:	2b39      	cmp	r3, #57	@ 0x39
 80076ac:	d0ee      	beq.n	800768c <_dtoa_r+0xa84>
 80076ae:	3301      	adds	r3, #1
 80076b0:	e7c9      	b.n	8007646 <_dtoa_r+0xa3e>
 80076b2:	9a04      	ldr	r2, [sp, #16]
 80076b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076ba:	428a      	cmp	r2, r1
 80076bc:	d028      	beq.n	8007710 <_dtoa_r+0xb08>
 80076be:	2300      	movs	r3, #0
 80076c0:	220a      	movs	r2, #10
 80076c2:	9903      	ldr	r1, [sp, #12]
 80076c4:	4648      	mov	r0, r9
 80076c6:	f000 fd1f 	bl	8008108 <__multadd>
 80076ca:	42af      	cmp	r7, r5
 80076cc:	9003      	str	r0, [sp, #12]
 80076ce:	f04f 0300 	mov.w	r3, #0
 80076d2:	f04f 020a 	mov.w	r2, #10
 80076d6:	4639      	mov	r1, r7
 80076d8:	4648      	mov	r0, r9
 80076da:	d107      	bne.n	80076ec <_dtoa_r+0xae4>
 80076dc:	f000 fd14 	bl	8008108 <__multadd>
 80076e0:	4607      	mov	r7, r0
 80076e2:	4605      	mov	r5, r0
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	3301      	adds	r3, #1
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	e777      	b.n	80075dc <_dtoa_r+0x9d4>
 80076ec:	f000 fd0c 	bl	8008108 <__multadd>
 80076f0:	4629      	mov	r1, r5
 80076f2:	4607      	mov	r7, r0
 80076f4:	2300      	movs	r3, #0
 80076f6:	220a      	movs	r2, #10
 80076f8:	4648      	mov	r0, r9
 80076fa:	f000 fd05 	bl	8008108 <__multadd>
 80076fe:	4605      	mov	r5, r0
 8007700:	e7f0      	b.n	80076e4 <_dtoa_r+0xadc>
 8007702:	f1bb 0f00 	cmp.w	fp, #0
 8007706:	bfcc      	ite	gt
 8007708:	465e      	movgt	r6, fp
 800770a:	2601      	movle	r6, #1
 800770c:	2700      	movs	r7, #0
 800770e:	4456      	add	r6, sl
 8007710:	2201      	movs	r2, #1
 8007712:	9903      	ldr	r1, [sp, #12]
 8007714:	4648      	mov	r0, r9
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	f000 fee4 	bl	80084e4 <__lshift>
 800771c:	4621      	mov	r1, r4
 800771e:	9003      	str	r0, [sp, #12]
 8007720:	f000 ff4c 	bl	80085bc <__mcmp>
 8007724:	2800      	cmp	r0, #0
 8007726:	dcb4      	bgt.n	8007692 <_dtoa_r+0xa8a>
 8007728:	d102      	bne.n	8007730 <_dtoa_r+0xb28>
 800772a:	9b04      	ldr	r3, [sp, #16]
 800772c:	07db      	lsls	r3, r3, #31
 800772e:	d4b0      	bmi.n	8007692 <_dtoa_r+0xa8a>
 8007730:	4633      	mov	r3, r6
 8007732:	461e      	mov	r6, r3
 8007734:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007738:	2a30      	cmp	r2, #48	@ 0x30
 800773a:	d0fa      	beq.n	8007732 <_dtoa_r+0xb2a>
 800773c:	e4b5      	b.n	80070aa <_dtoa_r+0x4a2>
 800773e:	459a      	cmp	sl, r3
 8007740:	d1a8      	bne.n	8007694 <_dtoa_r+0xa8c>
 8007742:	2331      	movs	r3, #49	@ 0x31
 8007744:	f108 0801 	add.w	r8, r8, #1
 8007748:	f88a 3000 	strb.w	r3, [sl]
 800774c:	e4ad      	b.n	80070aa <_dtoa_r+0x4a2>
 800774e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007750:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80077ac <_dtoa_r+0xba4>
 8007754:	b11b      	cbz	r3, 800775e <_dtoa_r+0xb56>
 8007756:	f10a 0308 	add.w	r3, sl, #8
 800775a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	4650      	mov	r0, sl
 8007760:	b017      	add	sp, #92	@ 0x5c
 8007762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007766:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007768:	2b01      	cmp	r3, #1
 800776a:	f77f ae2e 	ble.w	80073ca <_dtoa_r+0x7c2>
 800776e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007770:	930a      	str	r3, [sp, #40]	@ 0x28
 8007772:	2001      	movs	r0, #1
 8007774:	e64d      	b.n	8007412 <_dtoa_r+0x80a>
 8007776:	f1bb 0f00 	cmp.w	fp, #0
 800777a:	f77f aed9 	ble.w	8007530 <_dtoa_r+0x928>
 800777e:	4656      	mov	r6, sl
 8007780:	4621      	mov	r1, r4
 8007782:	9803      	ldr	r0, [sp, #12]
 8007784:	f7ff f9b6 	bl	8006af4 <quorem>
 8007788:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800778c:	f806 3b01 	strb.w	r3, [r6], #1
 8007790:	eba6 020a 	sub.w	r2, r6, sl
 8007794:	4593      	cmp	fp, r2
 8007796:	ddb4      	ble.n	8007702 <_dtoa_r+0xafa>
 8007798:	2300      	movs	r3, #0
 800779a:	220a      	movs	r2, #10
 800779c:	4648      	mov	r0, r9
 800779e:	9903      	ldr	r1, [sp, #12]
 80077a0:	f000 fcb2 	bl	8008108 <__multadd>
 80077a4:	9003      	str	r0, [sp, #12]
 80077a6:	e7eb      	b.n	8007780 <_dtoa_r+0xb78>
 80077a8:	0800971a 	.word	0x0800971a
 80077ac:	080096b5 	.word	0x080096b5

080077b0 <_free_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4605      	mov	r5, r0
 80077b4:	2900      	cmp	r1, #0
 80077b6:	d040      	beq.n	800783a <_free_r+0x8a>
 80077b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077bc:	1f0c      	subs	r4, r1, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bfb8      	it	lt
 80077c2:	18e4      	addlt	r4, r4, r3
 80077c4:	f000 fc32 	bl	800802c <__malloc_lock>
 80077c8:	4a1c      	ldr	r2, [pc, #112]	@ (800783c <_free_r+0x8c>)
 80077ca:	6813      	ldr	r3, [r2, #0]
 80077cc:	b933      	cbnz	r3, 80077dc <_free_r+0x2c>
 80077ce:	6063      	str	r3, [r4, #4]
 80077d0:	6014      	str	r4, [r2, #0]
 80077d2:	4628      	mov	r0, r5
 80077d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077d8:	f000 bc2e 	b.w	8008038 <__malloc_unlock>
 80077dc:	42a3      	cmp	r3, r4
 80077de:	d908      	bls.n	80077f2 <_free_r+0x42>
 80077e0:	6820      	ldr	r0, [r4, #0]
 80077e2:	1821      	adds	r1, r4, r0
 80077e4:	428b      	cmp	r3, r1
 80077e6:	bf01      	itttt	eq
 80077e8:	6819      	ldreq	r1, [r3, #0]
 80077ea:	685b      	ldreq	r3, [r3, #4]
 80077ec:	1809      	addeq	r1, r1, r0
 80077ee:	6021      	streq	r1, [r4, #0]
 80077f0:	e7ed      	b.n	80077ce <_free_r+0x1e>
 80077f2:	461a      	mov	r2, r3
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	b10b      	cbz	r3, 80077fc <_free_r+0x4c>
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	d9fa      	bls.n	80077f2 <_free_r+0x42>
 80077fc:	6811      	ldr	r1, [r2, #0]
 80077fe:	1850      	adds	r0, r2, r1
 8007800:	42a0      	cmp	r0, r4
 8007802:	d10b      	bne.n	800781c <_free_r+0x6c>
 8007804:	6820      	ldr	r0, [r4, #0]
 8007806:	4401      	add	r1, r0
 8007808:	1850      	adds	r0, r2, r1
 800780a:	4283      	cmp	r3, r0
 800780c:	6011      	str	r1, [r2, #0]
 800780e:	d1e0      	bne.n	80077d2 <_free_r+0x22>
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	4408      	add	r0, r1
 8007816:	6010      	str	r0, [r2, #0]
 8007818:	6053      	str	r3, [r2, #4]
 800781a:	e7da      	b.n	80077d2 <_free_r+0x22>
 800781c:	d902      	bls.n	8007824 <_free_r+0x74>
 800781e:	230c      	movs	r3, #12
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	e7d6      	b.n	80077d2 <_free_r+0x22>
 8007824:	6820      	ldr	r0, [r4, #0]
 8007826:	1821      	adds	r1, r4, r0
 8007828:	428b      	cmp	r3, r1
 800782a:	bf01      	itttt	eq
 800782c:	6819      	ldreq	r1, [r3, #0]
 800782e:	685b      	ldreq	r3, [r3, #4]
 8007830:	1809      	addeq	r1, r1, r0
 8007832:	6021      	streq	r1, [r4, #0]
 8007834:	6063      	str	r3, [r4, #4]
 8007836:	6054      	str	r4, [r2, #4]
 8007838:	e7cb      	b.n	80077d2 <_free_r+0x22>
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20000954 	.word	0x20000954

08007840 <rshift>:
 8007840:	6903      	ldr	r3, [r0, #16]
 8007842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007846:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800784a:	f100 0414 	add.w	r4, r0, #20
 800784e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007852:	dd46      	ble.n	80078e2 <rshift+0xa2>
 8007854:	f011 011f 	ands.w	r1, r1, #31
 8007858:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800785c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007860:	d10c      	bne.n	800787c <rshift+0x3c>
 8007862:	4629      	mov	r1, r5
 8007864:	f100 0710 	add.w	r7, r0, #16
 8007868:	42b1      	cmp	r1, r6
 800786a:	d335      	bcc.n	80078d8 <rshift+0x98>
 800786c:	1a9b      	subs	r3, r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	1eea      	subs	r2, r5, #3
 8007872:	4296      	cmp	r6, r2
 8007874:	bf38      	it	cc
 8007876:	2300      	movcc	r3, #0
 8007878:	4423      	add	r3, r4
 800787a:	e015      	b.n	80078a8 <rshift+0x68>
 800787c:	46a1      	mov	r9, r4
 800787e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007882:	f1c1 0820 	rsb	r8, r1, #32
 8007886:	40cf      	lsrs	r7, r1
 8007888:	f105 0e04 	add.w	lr, r5, #4
 800788c:	4576      	cmp	r6, lr
 800788e:	46f4      	mov	ip, lr
 8007890:	d816      	bhi.n	80078c0 <rshift+0x80>
 8007892:	1a9a      	subs	r2, r3, r2
 8007894:	0092      	lsls	r2, r2, #2
 8007896:	3a04      	subs	r2, #4
 8007898:	3501      	adds	r5, #1
 800789a:	42ae      	cmp	r6, r5
 800789c:	bf38      	it	cc
 800789e:	2200      	movcc	r2, #0
 80078a0:	18a3      	adds	r3, r4, r2
 80078a2:	50a7      	str	r7, [r4, r2]
 80078a4:	b107      	cbz	r7, 80078a8 <rshift+0x68>
 80078a6:	3304      	adds	r3, #4
 80078a8:	42a3      	cmp	r3, r4
 80078aa:	eba3 0204 	sub.w	r2, r3, r4
 80078ae:	bf08      	it	eq
 80078b0:	2300      	moveq	r3, #0
 80078b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078b6:	6102      	str	r2, [r0, #16]
 80078b8:	bf08      	it	eq
 80078ba:	6143      	streq	r3, [r0, #20]
 80078bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078c0:	f8dc c000 	ldr.w	ip, [ip]
 80078c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80078c8:	ea4c 0707 	orr.w	r7, ip, r7
 80078cc:	f849 7b04 	str.w	r7, [r9], #4
 80078d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078d4:	40cf      	lsrs	r7, r1
 80078d6:	e7d9      	b.n	800788c <rshift+0x4c>
 80078d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80078dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80078e0:	e7c2      	b.n	8007868 <rshift+0x28>
 80078e2:	4623      	mov	r3, r4
 80078e4:	e7e0      	b.n	80078a8 <rshift+0x68>

080078e6 <__hexdig_fun>:
 80078e6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80078ea:	2b09      	cmp	r3, #9
 80078ec:	d802      	bhi.n	80078f4 <__hexdig_fun+0xe>
 80078ee:	3820      	subs	r0, #32
 80078f0:	b2c0      	uxtb	r0, r0
 80078f2:	4770      	bx	lr
 80078f4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d801      	bhi.n	8007900 <__hexdig_fun+0x1a>
 80078fc:	3847      	subs	r0, #71	@ 0x47
 80078fe:	e7f7      	b.n	80078f0 <__hexdig_fun+0xa>
 8007900:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007904:	2b05      	cmp	r3, #5
 8007906:	d801      	bhi.n	800790c <__hexdig_fun+0x26>
 8007908:	3827      	subs	r0, #39	@ 0x27
 800790a:	e7f1      	b.n	80078f0 <__hexdig_fun+0xa>
 800790c:	2000      	movs	r0, #0
 800790e:	4770      	bx	lr

08007910 <__gethex>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	468a      	mov	sl, r1
 8007916:	4690      	mov	r8, r2
 8007918:	b085      	sub	sp, #20
 800791a:	9302      	str	r3, [sp, #8]
 800791c:	680b      	ldr	r3, [r1, #0]
 800791e:	9001      	str	r0, [sp, #4]
 8007920:	1c9c      	adds	r4, r3, #2
 8007922:	46a1      	mov	r9, r4
 8007924:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007928:	2830      	cmp	r0, #48	@ 0x30
 800792a:	d0fa      	beq.n	8007922 <__gethex+0x12>
 800792c:	eba9 0303 	sub.w	r3, r9, r3
 8007930:	f1a3 0b02 	sub.w	fp, r3, #2
 8007934:	f7ff ffd7 	bl	80078e6 <__hexdig_fun>
 8007938:	4605      	mov	r5, r0
 800793a:	2800      	cmp	r0, #0
 800793c:	d168      	bne.n	8007a10 <__gethex+0x100>
 800793e:	2201      	movs	r2, #1
 8007940:	4648      	mov	r0, r9
 8007942:	499f      	ldr	r1, [pc, #636]	@ (8007bc0 <__gethex+0x2b0>)
 8007944:	f7fe ffa7 	bl	8006896 <strncmp>
 8007948:	4607      	mov	r7, r0
 800794a:	2800      	cmp	r0, #0
 800794c:	d167      	bne.n	8007a1e <__gethex+0x10e>
 800794e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007952:	4626      	mov	r6, r4
 8007954:	f7ff ffc7 	bl	80078e6 <__hexdig_fun>
 8007958:	2800      	cmp	r0, #0
 800795a:	d062      	beq.n	8007a22 <__gethex+0x112>
 800795c:	4623      	mov	r3, r4
 800795e:	7818      	ldrb	r0, [r3, #0]
 8007960:	4699      	mov	r9, r3
 8007962:	2830      	cmp	r0, #48	@ 0x30
 8007964:	f103 0301 	add.w	r3, r3, #1
 8007968:	d0f9      	beq.n	800795e <__gethex+0x4e>
 800796a:	f7ff ffbc 	bl	80078e6 <__hexdig_fun>
 800796e:	fab0 f580 	clz	r5, r0
 8007972:	f04f 0b01 	mov.w	fp, #1
 8007976:	096d      	lsrs	r5, r5, #5
 8007978:	464a      	mov	r2, r9
 800797a:	4616      	mov	r6, r2
 800797c:	7830      	ldrb	r0, [r6, #0]
 800797e:	3201      	adds	r2, #1
 8007980:	f7ff ffb1 	bl	80078e6 <__hexdig_fun>
 8007984:	2800      	cmp	r0, #0
 8007986:	d1f8      	bne.n	800797a <__gethex+0x6a>
 8007988:	2201      	movs	r2, #1
 800798a:	4630      	mov	r0, r6
 800798c:	498c      	ldr	r1, [pc, #560]	@ (8007bc0 <__gethex+0x2b0>)
 800798e:	f7fe ff82 	bl	8006896 <strncmp>
 8007992:	2800      	cmp	r0, #0
 8007994:	d13f      	bne.n	8007a16 <__gethex+0x106>
 8007996:	b944      	cbnz	r4, 80079aa <__gethex+0x9a>
 8007998:	1c74      	adds	r4, r6, #1
 800799a:	4622      	mov	r2, r4
 800799c:	4616      	mov	r6, r2
 800799e:	7830      	ldrb	r0, [r6, #0]
 80079a0:	3201      	adds	r2, #1
 80079a2:	f7ff ffa0 	bl	80078e6 <__hexdig_fun>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d1f8      	bne.n	800799c <__gethex+0x8c>
 80079aa:	1ba4      	subs	r4, r4, r6
 80079ac:	00a7      	lsls	r7, r4, #2
 80079ae:	7833      	ldrb	r3, [r6, #0]
 80079b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80079b4:	2b50      	cmp	r3, #80	@ 0x50
 80079b6:	d13e      	bne.n	8007a36 <__gethex+0x126>
 80079b8:	7873      	ldrb	r3, [r6, #1]
 80079ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80079bc:	d033      	beq.n	8007a26 <__gethex+0x116>
 80079be:	2b2d      	cmp	r3, #45	@ 0x2d
 80079c0:	d034      	beq.n	8007a2c <__gethex+0x11c>
 80079c2:	2400      	movs	r4, #0
 80079c4:	1c71      	adds	r1, r6, #1
 80079c6:	7808      	ldrb	r0, [r1, #0]
 80079c8:	f7ff ff8d 	bl	80078e6 <__hexdig_fun>
 80079cc:	1e43      	subs	r3, r0, #1
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b18      	cmp	r3, #24
 80079d2:	d830      	bhi.n	8007a36 <__gethex+0x126>
 80079d4:	f1a0 0210 	sub.w	r2, r0, #16
 80079d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80079dc:	f7ff ff83 	bl	80078e6 <__hexdig_fun>
 80079e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80079e4:	fa5f fc8c 	uxtb.w	ip, ip
 80079e8:	f1bc 0f18 	cmp.w	ip, #24
 80079ec:	f04f 030a 	mov.w	r3, #10
 80079f0:	d91e      	bls.n	8007a30 <__gethex+0x120>
 80079f2:	b104      	cbz	r4, 80079f6 <__gethex+0xe6>
 80079f4:	4252      	negs	r2, r2
 80079f6:	4417      	add	r7, r2
 80079f8:	f8ca 1000 	str.w	r1, [sl]
 80079fc:	b1ed      	cbz	r5, 8007a3a <__gethex+0x12a>
 80079fe:	f1bb 0f00 	cmp.w	fp, #0
 8007a02:	bf0c      	ite	eq
 8007a04:	2506      	moveq	r5, #6
 8007a06:	2500      	movne	r5, #0
 8007a08:	4628      	mov	r0, r5
 8007a0a:	b005      	add	sp, #20
 8007a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a10:	2500      	movs	r5, #0
 8007a12:	462c      	mov	r4, r5
 8007a14:	e7b0      	b.n	8007978 <__gethex+0x68>
 8007a16:	2c00      	cmp	r4, #0
 8007a18:	d1c7      	bne.n	80079aa <__gethex+0x9a>
 8007a1a:	4627      	mov	r7, r4
 8007a1c:	e7c7      	b.n	80079ae <__gethex+0x9e>
 8007a1e:	464e      	mov	r6, r9
 8007a20:	462f      	mov	r7, r5
 8007a22:	2501      	movs	r5, #1
 8007a24:	e7c3      	b.n	80079ae <__gethex+0x9e>
 8007a26:	2400      	movs	r4, #0
 8007a28:	1cb1      	adds	r1, r6, #2
 8007a2a:	e7cc      	b.n	80079c6 <__gethex+0xb6>
 8007a2c:	2401      	movs	r4, #1
 8007a2e:	e7fb      	b.n	8007a28 <__gethex+0x118>
 8007a30:	fb03 0002 	mla	r0, r3, r2, r0
 8007a34:	e7ce      	b.n	80079d4 <__gethex+0xc4>
 8007a36:	4631      	mov	r1, r6
 8007a38:	e7de      	b.n	80079f8 <__gethex+0xe8>
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	eba6 0309 	sub.w	r3, r6, r9
 8007a40:	3b01      	subs	r3, #1
 8007a42:	2b07      	cmp	r3, #7
 8007a44:	dc0a      	bgt.n	8007a5c <__gethex+0x14c>
 8007a46:	9801      	ldr	r0, [sp, #4]
 8007a48:	f000 fafc 	bl	8008044 <_Balloc>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	b940      	cbnz	r0, 8007a62 <__gethex+0x152>
 8007a50:	4602      	mov	r2, r0
 8007a52:	21e4      	movs	r1, #228	@ 0xe4
 8007a54:	4b5b      	ldr	r3, [pc, #364]	@ (8007bc4 <__gethex+0x2b4>)
 8007a56:	485c      	ldr	r0, [pc, #368]	@ (8007bc8 <__gethex+0x2b8>)
 8007a58:	f7ff f82e 	bl	8006ab8 <__assert_func>
 8007a5c:	3101      	adds	r1, #1
 8007a5e:	105b      	asrs	r3, r3, #1
 8007a60:	e7ef      	b.n	8007a42 <__gethex+0x132>
 8007a62:	2300      	movs	r3, #0
 8007a64:	f100 0a14 	add.w	sl, r0, #20
 8007a68:	4655      	mov	r5, sl
 8007a6a:	469b      	mov	fp, r3
 8007a6c:	45b1      	cmp	r9, r6
 8007a6e:	d337      	bcc.n	8007ae0 <__gethex+0x1d0>
 8007a70:	f845 bb04 	str.w	fp, [r5], #4
 8007a74:	eba5 050a 	sub.w	r5, r5, sl
 8007a78:	10ad      	asrs	r5, r5, #2
 8007a7a:	6125      	str	r5, [r4, #16]
 8007a7c:	4658      	mov	r0, fp
 8007a7e:	f000 fbd3 	bl	8008228 <__hi0bits>
 8007a82:	016d      	lsls	r5, r5, #5
 8007a84:	f8d8 6000 	ldr.w	r6, [r8]
 8007a88:	1a2d      	subs	r5, r5, r0
 8007a8a:	42b5      	cmp	r5, r6
 8007a8c:	dd54      	ble.n	8007b38 <__gethex+0x228>
 8007a8e:	1bad      	subs	r5, r5, r6
 8007a90:	4629      	mov	r1, r5
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 ff55 	bl	8008942 <__any_on>
 8007a98:	4681      	mov	r9, r0
 8007a9a:	b178      	cbz	r0, 8007abc <__gethex+0x1ac>
 8007a9c:	f04f 0901 	mov.w	r9, #1
 8007aa0:	1e6b      	subs	r3, r5, #1
 8007aa2:	1159      	asrs	r1, r3, #5
 8007aa4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007aa8:	f003 021f 	and.w	r2, r3, #31
 8007aac:	fa09 f202 	lsl.w	r2, r9, r2
 8007ab0:	420a      	tst	r2, r1
 8007ab2:	d003      	beq.n	8007abc <__gethex+0x1ac>
 8007ab4:	454b      	cmp	r3, r9
 8007ab6:	dc36      	bgt.n	8007b26 <__gethex+0x216>
 8007ab8:	f04f 0902 	mov.w	r9, #2
 8007abc:	4629      	mov	r1, r5
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f7ff febe 	bl	8007840 <rshift>
 8007ac4:	442f      	add	r7, r5
 8007ac6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007aca:	42bb      	cmp	r3, r7
 8007acc:	da42      	bge.n	8007b54 <__gethex+0x244>
 8007ace:	4621      	mov	r1, r4
 8007ad0:	9801      	ldr	r0, [sp, #4]
 8007ad2:	f000 faf7 	bl	80080c4 <_Bfree>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ada:	25a3      	movs	r5, #163	@ 0xa3
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	e793      	b.n	8007a08 <__gethex+0xf8>
 8007ae0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007ae4:	2a2e      	cmp	r2, #46	@ 0x2e
 8007ae6:	d012      	beq.n	8007b0e <__gethex+0x1fe>
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d104      	bne.n	8007af6 <__gethex+0x1e6>
 8007aec:	f845 bb04 	str.w	fp, [r5], #4
 8007af0:	f04f 0b00 	mov.w	fp, #0
 8007af4:	465b      	mov	r3, fp
 8007af6:	7830      	ldrb	r0, [r6, #0]
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	f7ff fef4 	bl	80078e6 <__hexdig_fun>
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	f000 000f 	and.w	r0, r0, #15
 8007b04:	4098      	lsls	r0, r3
 8007b06:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	e7ae      	b.n	8007a6c <__gethex+0x15c>
 8007b0e:	45b1      	cmp	r9, r6
 8007b10:	d8ea      	bhi.n	8007ae8 <__gethex+0x1d8>
 8007b12:	2201      	movs	r2, #1
 8007b14:	4630      	mov	r0, r6
 8007b16:	492a      	ldr	r1, [pc, #168]	@ (8007bc0 <__gethex+0x2b0>)
 8007b18:	9303      	str	r3, [sp, #12]
 8007b1a:	f7fe febc 	bl	8006896 <strncmp>
 8007b1e:	9b03      	ldr	r3, [sp, #12]
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d1e1      	bne.n	8007ae8 <__gethex+0x1d8>
 8007b24:	e7a2      	b.n	8007a6c <__gethex+0x15c>
 8007b26:	4620      	mov	r0, r4
 8007b28:	1ea9      	subs	r1, r5, #2
 8007b2a:	f000 ff0a 	bl	8008942 <__any_on>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d0c2      	beq.n	8007ab8 <__gethex+0x1a8>
 8007b32:	f04f 0903 	mov.w	r9, #3
 8007b36:	e7c1      	b.n	8007abc <__gethex+0x1ac>
 8007b38:	da09      	bge.n	8007b4e <__gethex+0x23e>
 8007b3a:	1b75      	subs	r5, r6, r5
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	462a      	mov	r2, r5
 8007b40:	9801      	ldr	r0, [sp, #4]
 8007b42:	f000 fccf 	bl	80084e4 <__lshift>
 8007b46:	4604      	mov	r4, r0
 8007b48:	1b7f      	subs	r7, r7, r5
 8007b4a:	f100 0a14 	add.w	sl, r0, #20
 8007b4e:	f04f 0900 	mov.w	r9, #0
 8007b52:	e7b8      	b.n	8007ac6 <__gethex+0x1b6>
 8007b54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b58:	42bd      	cmp	r5, r7
 8007b5a:	dd6f      	ble.n	8007c3c <__gethex+0x32c>
 8007b5c:	1bed      	subs	r5, r5, r7
 8007b5e:	42ae      	cmp	r6, r5
 8007b60:	dc34      	bgt.n	8007bcc <__gethex+0x2bc>
 8007b62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d022      	beq.n	8007bb0 <__gethex+0x2a0>
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d024      	beq.n	8007bb8 <__gethex+0x2a8>
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d115      	bne.n	8007b9e <__gethex+0x28e>
 8007b72:	42ae      	cmp	r6, r5
 8007b74:	d113      	bne.n	8007b9e <__gethex+0x28e>
 8007b76:	2e01      	cmp	r6, #1
 8007b78:	d10b      	bne.n	8007b92 <__gethex+0x282>
 8007b7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b7e:	9a02      	ldr	r2, [sp, #8]
 8007b80:	2562      	movs	r5, #98	@ 0x62
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	2301      	movs	r3, #1
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	f8ca 3000 	str.w	r3, [sl]
 8007b8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b8e:	601c      	str	r4, [r3, #0]
 8007b90:	e73a      	b.n	8007a08 <__gethex+0xf8>
 8007b92:	4620      	mov	r0, r4
 8007b94:	1e71      	subs	r1, r6, #1
 8007b96:	f000 fed4 	bl	8008942 <__any_on>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d1ed      	bne.n	8007b7a <__gethex+0x26a>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	9801      	ldr	r0, [sp, #4]
 8007ba2:	f000 fa8f 	bl	80080c4 <_Bfree>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007baa:	2550      	movs	r5, #80	@ 0x50
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	e72b      	b.n	8007a08 <__gethex+0xf8>
 8007bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f3      	bne.n	8007b9e <__gethex+0x28e>
 8007bb6:	e7e0      	b.n	8007b7a <__gethex+0x26a>
 8007bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1dd      	bne.n	8007b7a <__gethex+0x26a>
 8007bbe:	e7ee      	b.n	8007b9e <__gethex+0x28e>
 8007bc0:	080095ca 	.word	0x080095ca
 8007bc4:	0800971a 	.word	0x0800971a
 8007bc8:	0800972b 	.word	0x0800972b
 8007bcc:	1e6f      	subs	r7, r5, #1
 8007bce:	f1b9 0f00 	cmp.w	r9, #0
 8007bd2:	d130      	bne.n	8007c36 <__gethex+0x326>
 8007bd4:	b127      	cbz	r7, 8007be0 <__gethex+0x2d0>
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 feb2 	bl	8008942 <__any_on>
 8007bde:	4681      	mov	r9, r0
 8007be0:	2301      	movs	r3, #1
 8007be2:	4629      	mov	r1, r5
 8007be4:	1b76      	subs	r6, r6, r5
 8007be6:	2502      	movs	r5, #2
 8007be8:	117a      	asrs	r2, r7, #5
 8007bea:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007bee:	f007 071f 	and.w	r7, r7, #31
 8007bf2:	40bb      	lsls	r3, r7
 8007bf4:	4213      	tst	r3, r2
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	bf18      	it	ne
 8007bfa:	f049 0902 	orrne.w	r9, r9, #2
 8007bfe:	f7ff fe1f 	bl	8007840 <rshift>
 8007c02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007c06:	f1b9 0f00 	cmp.w	r9, #0
 8007c0a:	d047      	beq.n	8007c9c <__gethex+0x38c>
 8007c0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d015      	beq.n	8007c40 <__gethex+0x330>
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d017      	beq.n	8007c48 <__gethex+0x338>
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d109      	bne.n	8007c30 <__gethex+0x320>
 8007c1c:	f019 0f02 	tst.w	r9, #2
 8007c20:	d006      	beq.n	8007c30 <__gethex+0x320>
 8007c22:	f8da 3000 	ldr.w	r3, [sl]
 8007c26:	ea49 0903 	orr.w	r9, r9, r3
 8007c2a:	f019 0f01 	tst.w	r9, #1
 8007c2e:	d10e      	bne.n	8007c4e <__gethex+0x33e>
 8007c30:	f045 0510 	orr.w	r5, r5, #16
 8007c34:	e032      	b.n	8007c9c <__gethex+0x38c>
 8007c36:	f04f 0901 	mov.w	r9, #1
 8007c3a:	e7d1      	b.n	8007be0 <__gethex+0x2d0>
 8007c3c:	2501      	movs	r5, #1
 8007c3e:	e7e2      	b.n	8007c06 <__gethex+0x2f6>
 8007c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c42:	f1c3 0301 	rsb	r3, r3, #1
 8007c46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0f0      	beq.n	8007c30 <__gethex+0x320>
 8007c4e:	f04f 0c00 	mov.w	ip, #0
 8007c52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c56:	f104 0314 	add.w	r3, r4, #20
 8007c5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c62:	4618      	mov	r0, r3
 8007c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c68:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c6c:	d01b      	beq.n	8007ca6 <__gethex+0x396>
 8007c6e:	3201      	adds	r2, #1
 8007c70:	6002      	str	r2, [r0, #0]
 8007c72:	2d02      	cmp	r5, #2
 8007c74:	f104 0314 	add.w	r3, r4, #20
 8007c78:	d13c      	bne.n	8007cf4 <__gethex+0x3e4>
 8007c7a:	f8d8 2000 	ldr.w	r2, [r8]
 8007c7e:	3a01      	subs	r2, #1
 8007c80:	42b2      	cmp	r2, r6
 8007c82:	d109      	bne.n	8007c98 <__gethex+0x388>
 8007c84:	2201      	movs	r2, #1
 8007c86:	1171      	asrs	r1, r6, #5
 8007c88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c8c:	f006 061f 	and.w	r6, r6, #31
 8007c90:	fa02 f606 	lsl.w	r6, r2, r6
 8007c94:	421e      	tst	r6, r3
 8007c96:	d13a      	bne.n	8007d0e <__gethex+0x3fe>
 8007c98:	f045 0520 	orr.w	r5, r5, #32
 8007c9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c9e:	601c      	str	r4, [r3, #0]
 8007ca0:	9b02      	ldr	r3, [sp, #8]
 8007ca2:	601f      	str	r7, [r3, #0]
 8007ca4:	e6b0      	b.n	8007a08 <__gethex+0xf8>
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	f843 cc04 	str.w	ip, [r3, #-4]
 8007cac:	d8d9      	bhi.n	8007c62 <__gethex+0x352>
 8007cae:	68a3      	ldr	r3, [r4, #8]
 8007cb0:	459b      	cmp	fp, r3
 8007cb2:	db17      	blt.n	8007ce4 <__gethex+0x3d4>
 8007cb4:	6861      	ldr	r1, [r4, #4]
 8007cb6:	9801      	ldr	r0, [sp, #4]
 8007cb8:	3101      	adds	r1, #1
 8007cba:	f000 f9c3 	bl	8008044 <_Balloc>
 8007cbe:	4681      	mov	r9, r0
 8007cc0:	b918      	cbnz	r0, 8007cca <__gethex+0x3ba>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	2184      	movs	r1, #132	@ 0x84
 8007cc6:	4b19      	ldr	r3, [pc, #100]	@ (8007d2c <__gethex+0x41c>)
 8007cc8:	e6c5      	b.n	8007a56 <__gethex+0x146>
 8007cca:	6922      	ldr	r2, [r4, #16]
 8007ccc:	f104 010c 	add.w	r1, r4, #12
 8007cd0:	3202      	adds	r2, #2
 8007cd2:	0092      	lsls	r2, r2, #2
 8007cd4:	300c      	adds	r0, #12
 8007cd6:	f7fe feda 	bl	8006a8e <memcpy>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	9801      	ldr	r0, [sp, #4]
 8007cde:	f000 f9f1 	bl	80080c4 <_Bfree>
 8007ce2:	464c      	mov	r4, r9
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	6122      	str	r2, [r4, #16]
 8007cea:	2201      	movs	r2, #1
 8007cec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cf0:	615a      	str	r2, [r3, #20]
 8007cf2:	e7be      	b.n	8007c72 <__gethex+0x362>
 8007cf4:	6922      	ldr	r2, [r4, #16]
 8007cf6:	455a      	cmp	r2, fp
 8007cf8:	dd0b      	ble.n	8007d12 <__gethex+0x402>
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f7ff fd9f 	bl	8007840 <rshift>
 8007d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d06:	3701      	adds	r7, #1
 8007d08:	42bb      	cmp	r3, r7
 8007d0a:	f6ff aee0 	blt.w	8007ace <__gethex+0x1be>
 8007d0e:	2501      	movs	r5, #1
 8007d10:	e7c2      	b.n	8007c98 <__gethex+0x388>
 8007d12:	f016 061f 	ands.w	r6, r6, #31
 8007d16:	d0fa      	beq.n	8007d0e <__gethex+0x3fe>
 8007d18:	4453      	add	r3, sl
 8007d1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d1e:	f000 fa83 	bl	8008228 <__hi0bits>
 8007d22:	f1c6 0620 	rsb	r6, r6, #32
 8007d26:	42b0      	cmp	r0, r6
 8007d28:	dbe7      	blt.n	8007cfa <__gethex+0x3ea>
 8007d2a:	e7f0      	b.n	8007d0e <__gethex+0x3fe>
 8007d2c:	0800971a 	.word	0x0800971a

08007d30 <L_shift>:
 8007d30:	f1c2 0208 	rsb	r2, r2, #8
 8007d34:	0092      	lsls	r2, r2, #2
 8007d36:	b570      	push	{r4, r5, r6, lr}
 8007d38:	f1c2 0620 	rsb	r6, r2, #32
 8007d3c:	6843      	ldr	r3, [r0, #4]
 8007d3e:	6804      	ldr	r4, [r0, #0]
 8007d40:	fa03 f506 	lsl.w	r5, r3, r6
 8007d44:	432c      	orrs	r4, r5
 8007d46:	40d3      	lsrs	r3, r2
 8007d48:	6004      	str	r4, [r0, #0]
 8007d4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d4e:	4288      	cmp	r0, r1
 8007d50:	d3f4      	bcc.n	8007d3c <L_shift+0xc>
 8007d52:	bd70      	pop	{r4, r5, r6, pc}

08007d54 <__match>:
 8007d54:	b530      	push	{r4, r5, lr}
 8007d56:	6803      	ldr	r3, [r0, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d5e:	b914      	cbnz	r4, 8007d66 <__match+0x12>
 8007d60:	6003      	str	r3, [r0, #0]
 8007d62:	2001      	movs	r0, #1
 8007d64:	bd30      	pop	{r4, r5, pc}
 8007d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d6a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007d6e:	2d19      	cmp	r5, #25
 8007d70:	bf98      	it	ls
 8007d72:	3220      	addls	r2, #32
 8007d74:	42a2      	cmp	r2, r4
 8007d76:	d0f0      	beq.n	8007d5a <__match+0x6>
 8007d78:	2000      	movs	r0, #0
 8007d7a:	e7f3      	b.n	8007d64 <__match+0x10>

08007d7c <__hexnan>:
 8007d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	2500      	movs	r5, #0
 8007d82:	680b      	ldr	r3, [r1, #0]
 8007d84:	4682      	mov	sl, r0
 8007d86:	115e      	asrs	r6, r3, #5
 8007d88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d8c:	f013 031f 	ands.w	r3, r3, #31
 8007d90:	bf18      	it	ne
 8007d92:	3604      	addne	r6, #4
 8007d94:	1f37      	subs	r7, r6, #4
 8007d96:	4690      	mov	r8, r2
 8007d98:	46b9      	mov	r9, r7
 8007d9a:	463c      	mov	r4, r7
 8007d9c:	46ab      	mov	fp, r5
 8007d9e:	b087      	sub	sp, #28
 8007da0:	6801      	ldr	r1, [r0, #0]
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	f846 5c04 	str.w	r5, [r6, #-4]
 8007da8:	9502      	str	r5, [sp, #8]
 8007daa:	784a      	ldrb	r2, [r1, #1]
 8007dac:	1c4b      	adds	r3, r1, #1
 8007dae:	9303      	str	r3, [sp, #12]
 8007db0:	b342      	cbz	r2, 8007e04 <__hexnan+0x88>
 8007db2:	4610      	mov	r0, r2
 8007db4:	9105      	str	r1, [sp, #20]
 8007db6:	9204      	str	r2, [sp, #16]
 8007db8:	f7ff fd95 	bl	80078e6 <__hexdig_fun>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d151      	bne.n	8007e64 <__hexnan+0xe8>
 8007dc0:	9a04      	ldr	r2, [sp, #16]
 8007dc2:	9905      	ldr	r1, [sp, #20]
 8007dc4:	2a20      	cmp	r2, #32
 8007dc6:	d818      	bhi.n	8007dfa <__hexnan+0x7e>
 8007dc8:	9b02      	ldr	r3, [sp, #8]
 8007dca:	459b      	cmp	fp, r3
 8007dcc:	dd13      	ble.n	8007df6 <__hexnan+0x7a>
 8007dce:	454c      	cmp	r4, r9
 8007dd0:	d206      	bcs.n	8007de0 <__hexnan+0x64>
 8007dd2:	2d07      	cmp	r5, #7
 8007dd4:	dc04      	bgt.n	8007de0 <__hexnan+0x64>
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	4649      	mov	r1, r9
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff ffa8 	bl	8007d30 <L_shift>
 8007de0:	4544      	cmp	r4, r8
 8007de2:	d952      	bls.n	8007e8a <__hexnan+0x10e>
 8007de4:	2300      	movs	r3, #0
 8007de6:	f1a4 0904 	sub.w	r9, r4, #4
 8007dea:	f844 3c04 	str.w	r3, [r4, #-4]
 8007dee:	461d      	mov	r5, r3
 8007df0:	464c      	mov	r4, r9
 8007df2:	f8cd b008 	str.w	fp, [sp, #8]
 8007df6:	9903      	ldr	r1, [sp, #12]
 8007df8:	e7d7      	b.n	8007daa <__hexnan+0x2e>
 8007dfa:	2a29      	cmp	r2, #41	@ 0x29
 8007dfc:	d157      	bne.n	8007eae <__hexnan+0x132>
 8007dfe:	3102      	adds	r1, #2
 8007e00:	f8ca 1000 	str.w	r1, [sl]
 8007e04:	f1bb 0f00 	cmp.w	fp, #0
 8007e08:	d051      	beq.n	8007eae <__hexnan+0x132>
 8007e0a:	454c      	cmp	r4, r9
 8007e0c:	d206      	bcs.n	8007e1c <__hexnan+0xa0>
 8007e0e:	2d07      	cmp	r5, #7
 8007e10:	dc04      	bgt.n	8007e1c <__hexnan+0xa0>
 8007e12:	462a      	mov	r2, r5
 8007e14:	4649      	mov	r1, r9
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7ff ff8a 	bl	8007d30 <L_shift>
 8007e1c:	4544      	cmp	r4, r8
 8007e1e:	d936      	bls.n	8007e8e <__hexnan+0x112>
 8007e20:	4623      	mov	r3, r4
 8007e22:	f1a8 0204 	sub.w	r2, r8, #4
 8007e26:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e2a:	429f      	cmp	r7, r3
 8007e2c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e30:	d2f9      	bcs.n	8007e26 <__hexnan+0xaa>
 8007e32:	1b3b      	subs	r3, r7, r4
 8007e34:	f023 0303 	bic.w	r3, r3, #3
 8007e38:	3304      	adds	r3, #4
 8007e3a:	3401      	adds	r4, #1
 8007e3c:	3e03      	subs	r6, #3
 8007e3e:	42b4      	cmp	r4, r6
 8007e40:	bf88      	it	hi
 8007e42:	2304      	movhi	r3, #4
 8007e44:	2200      	movs	r2, #0
 8007e46:	4443      	add	r3, r8
 8007e48:	f843 2b04 	str.w	r2, [r3], #4
 8007e4c:	429f      	cmp	r7, r3
 8007e4e:	d2fb      	bcs.n	8007e48 <__hexnan+0xcc>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	b91b      	cbnz	r3, 8007e5c <__hexnan+0xe0>
 8007e54:	4547      	cmp	r7, r8
 8007e56:	d128      	bne.n	8007eaa <__hexnan+0x12e>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	2005      	movs	r0, #5
 8007e5e:	b007      	add	sp, #28
 8007e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e64:	3501      	adds	r5, #1
 8007e66:	2d08      	cmp	r5, #8
 8007e68:	f10b 0b01 	add.w	fp, fp, #1
 8007e6c:	dd06      	ble.n	8007e7c <__hexnan+0x100>
 8007e6e:	4544      	cmp	r4, r8
 8007e70:	d9c1      	bls.n	8007df6 <__hexnan+0x7a>
 8007e72:	2300      	movs	r3, #0
 8007e74:	2501      	movs	r5, #1
 8007e76:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e7a:	3c04      	subs	r4, #4
 8007e7c:	6822      	ldr	r2, [r4, #0]
 8007e7e:	f000 000f 	and.w	r0, r0, #15
 8007e82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007e86:	6020      	str	r0, [r4, #0]
 8007e88:	e7b5      	b.n	8007df6 <__hexnan+0x7a>
 8007e8a:	2508      	movs	r5, #8
 8007e8c:	e7b3      	b.n	8007df6 <__hexnan+0x7a>
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0dd      	beq.n	8007e50 <__hexnan+0xd4>
 8007e94:	f04f 32ff 	mov.w	r2, #4294967295
 8007e98:	f1c3 0320 	rsb	r3, r3, #32
 8007e9c:	40da      	lsrs	r2, r3
 8007e9e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ea8:	e7d2      	b.n	8007e50 <__hexnan+0xd4>
 8007eaa:	3f04      	subs	r7, #4
 8007eac:	e7d0      	b.n	8007e50 <__hexnan+0xd4>
 8007eae:	2004      	movs	r0, #4
 8007eb0:	e7d5      	b.n	8007e5e <__hexnan+0xe2>
	...

08007eb4 <malloc>:
 8007eb4:	4b02      	ldr	r3, [pc, #8]	@ (8007ec0 <malloc+0xc>)
 8007eb6:	4601      	mov	r1, r0
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	f000 b825 	b.w	8007f08 <_malloc_r>
 8007ebe:	bf00      	nop
 8007ec0:	200001a4 	.word	0x200001a4

08007ec4 <sbrk_aligned>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8007f04 <sbrk_aligned+0x40>)
 8007ec8:	460c      	mov	r4, r1
 8007eca:	6831      	ldr	r1, [r6, #0]
 8007ecc:	4605      	mov	r5, r0
 8007ece:	b911      	cbnz	r1, 8007ed6 <sbrk_aligned+0x12>
 8007ed0:	f000 ff90 	bl	8008df4 <_sbrk_r>
 8007ed4:	6030      	str	r0, [r6, #0]
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 ff8b 	bl	8008df4 <_sbrk_r>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	d103      	bne.n	8007eea <sbrk_aligned+0x26>
 8007ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
 8007eea:	1cc4      	adds	r4, r0, #3
 8007eec:	f024 0403 	bic.w	r4, r4, #3
 8007ef0:	42a0      	cmp	r0, r4
 8007ef2:	d0f8      	beq.n	8007ee6 <sbrk_aligned+0x22>
 8007ef4:	1a21      	subs	r1, r4, r0
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 ff7c 	bl	8008df4 <_sbrk_r>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d1f2      	bne.n	8007ee6 <sbrk_aligned+0x22>
 8007f00:	e7ef      	b.n	8007ee2 <sbrk_aligned+0x1e>
 8007f02:	bf00      	nop
 8007f04:	20000950 	.word	0x20000950

08007f08 <_malloc_r>:
 8007f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	1ccd      	adds	r5, r1, #3
 8007f0e:	f025 0503 	bic.w	r5, r5, #3
 8007f12:	3508      	adds	r5, #8
 8007f14:	2d0c      	cmp	r5, #12
 8007f16:	bf38      	it	cc
 8007f18:	250c      	movcc	r5, #12
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	db01      	blt.n	8007f24 <_malloc_r+0x1c>
 8007f20:	42a9      	cmp	r1, r5
 8007f22:	d904      	bls.n	8007f2e <_malloc_r+0x26>
 8007f24:	230c      	movs	r3, #12
 8007f26:	6033      	str	r3, [r6, #0]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008004 <_malloc_r+0xfc>
 8007f32:	f000 f87b 	bl	800802c <__malloc_lock>
 8007f36:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3a:	461c      	mov	r4, r3
 8007f3c:	bb44      	cbnz	r4, 8007f90 <_malloc_r+0x88>
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4630      	mov	r0, r6
 8007f42:	f7ff ffbf 	bl	8007ec4 <sbrk_aligned>
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	4604      	mov	r4, r0
 8007f4a:	d158      	bne.n	8007ffe <_malloc_r+0xf6>
 8007f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f50:	4627      	mov	r7, r4
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	d143      	bne.n	8007fde <_malloc_r+0xd6>
 8007f56:	2c00      	cmp	r4, #0
 8007f58:	d04b      	beq.n	8007ff2 <_malloc_r+0xea>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4630      	mov	r0, r6
 8007f60:	eb04 0903 	add.w	r9, r4, r3
 8007f64:	f000 ff46 	bl	8008df4 <_sbrk_r>
 8007f68:	4581      	cmp	r9, r0
 8007f6a:	d142      	bne.n	8007ff2 <_malloc_r+0xea>
 8007f6c:	6821      	ldr	r1, [r4, #0]
 8007f6e:	4630      	mov	r0, r6
 8007f70:	1a6d      	subs	r5, r5, r1
 8007f72:	4629      	mov	r1, r5
 8007f74:	f7ff ffa6 	bl	8007ec4 <sbrk_aligned>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d03a      	beq.n	8007ff2 <_malloc_r+0xea>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	442b      	add	r3, r5
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	f8d8 3000 	ldr.w	r3, [r8]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	bb62      	cbnz	r2, 8007fe4 <_malloc_r+0xdc>
 8007f8a:	f8c8 7000 	str.w	r7, [r8]
 8007f8e:	e00f      	b.n	8007fb0 <_malloc_r+0xa8>
 8007f90:	6822      	ldr	r2, [r4, #0]
 8007f92:	1b52      	subs	r2, r2, r5
 8007f94:	d420      	bmi.n	8007fd8 <_malloc_r+0xd0>
 8007f96:	2a0b      	cmp	r2, #11
 8007f98:	d917      	bls.n	8007fca <_malloc_r+0xc2>
 8007f9a:	1961      	adds	r1, r4, r5
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	6025      	str	r5, [r4, #0]
 8007fa0:	bf18      	it	ne
 8007fa2:	6059      	strne	r1, [r3, #4]
 8007fa4:	6863      	ldr	r3, [r4, #4]
 8007fa6:	bf08      	it	eq
 8007fa8:	f8c8 1000 	streq.w	r1, [r8]
 8007fac:	5162      	str	r2, [r4, r5]
 8007fae:	604b      	str	r3, [r1, #4]
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 f841 	bl	8008038 <__malloc_unlock>
 8007fb6:	f104 000b 	add.w	r0, r4, #11
 8007fba:	1d23      	adds	r3, r4, #4
 8007fbc:	f020 0007 	bic.w	r0, r0, #7
 8007fc0:	1ac2      	subs	r2, r0, r3
 8007fc2:	bf1c      	itt	ne
 8007fc4:	1a1b      	subne	r3, r3, r0
 8007fc6:	50a3      	strne	r3, [r4, r2]
 8007fc8:	e7af      	b.n	8007f2a <_malloc_r+0x22>
 8007fca:	6862      	ldr	r2, [r4, #4]
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	bf0c      	ite	eq
 8007fd0:	f8c8 2000 	streq.w	r2, [r8]
 8007fd4:	605a      	strne	r2, [r3, #4]
 8007fd6:	e7eb      	b.n	8007fb0 <_malloc_r+0xa8>
 8007fd8:	4623      	mov	r3, r4
 8007fda:	6864      	ldr	r4, [r4, #4]
 8007fdc:	e7ae      	b.n	8007f3c <_malloc_r+0x34>
 8007fde:	463c      	mov	r4, r7
 8007fe0:	687f      	ldr	r7, [r7, #4]
 8007fe2:	e7b6      	b.n	8007f52 <_malloc_r+0x4a>
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d1fb      	bne.n	8007fe4 <_malloc_r+0xdc>
 8007fec:	2300      	movs	r3, #0
 8007fee:	6053      	str	r3, [r2, #4]
 8007ff0:	e7de      	b.n	8007fb0 <_malloc_r+0xa8>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	6033      	str	r3, [r6, #0]
 8007ff8:	f000 f81e 	bl	8008038 <__malloc_unlock>
 8007ffc:	e794      	b.n	8007f28 <_malloc_r+0x20>
 8007ffe:	6005      	str	r5, [r0, #0]
 8008000:	e7d6      	b.n	8007fb0 <_malloc_r+0xa8>
 8008002:	bf00      	nop
 8008004:	20000954 	.word	0x20000954

08008008 <__ascii_mbtowc>:
 8008008:	b082      	sub	sp, #8
 800800a:	b901      	cbnz	r1, 800800e <__ascii_mbtowc+0x6>
 800800c:	a901      	add	r1, sp, #4
 800800e:	b142      	cbz	r2, 8008022 <__ascii_mbtowc+0x1a>
 8008010:	b14b      	cbz	r3, 8008026 <__ascii_mbtowc+0x1e>
 8008012:	7813      	ldrb	r3, [r2, #0]
 8008014:	600b      	str	r3, [r1, #0]
 8008016:	7812      	ldrb	r2, [r2, #0]
 8008018:	1e10      	subs	r0, r2, #0
 800801a:	bf18      	it	ne
 800801c:	2001      	movne	r0, #1
 800801e:	b002      	add	sp, #8
 8008020:	4770      	bx	lr
 8008022:	4610      	mov	r0, r2
 8008024:	e7fb      	b.n	800801e <__ascii_mbtowc+0x16>
 8008026:	f06f 0001 	mvn.w	r0, #1
 800802a:	e7f8      	b.n	800801e <__ascii_mbtowc+0x16>

0800802c <__malloc_lock>:
 800802c:	4801      	ldr	r0, [pc, #4]	@ (8008034 <__malloc_lock+0x8>)
 800802e:	f7fe bd16 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 8008032:	bf00      	nop
 8008034:	2000094c 	.word	0x2000094c

08008038 <__malloc_unlock>:
 8008038:	4801      	ldr	r0, [pc, #4]	@ (8008040 <__malloc_unlock+0x8>)
 800803a:	f7fe bd11 	b.w	8006a60 <__retarget_lock_release_recursive>
 800803e:	bf00      	nop
 8008040:	2000094c 	.word	0x2000094c

08008044 <_Balloc>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	69c6      	ldr	r6, [r0, #28]
 8008048:	4604      	mov	r4, r0
 800804a:	460d      	mov	r5, r1
 800804c:	b976      	cbnz	r6, 800806c <_Balloc+0x28>
 800804e:	2010      	movs	r0, #16
 8008050:	f7ff ff30 	bl	8007eb4 <malloc>
 8008054:	4602      	mov	r2, r0
 8008056:	61e0      	str	r0, [r4, #28]
 8008058:	b920      	cbnz	r0, 8008064 <_Balloc+0x20>
 800805a:	216b      	movs	r1, #107	@ 0x6b
 800805c:	4b17      	ldr	r3, [pc, #92]	@ (80080bc <_Balloc+0x78>)
 800805e:	4818      	ldr	r0, [pc, #96]	@ (80080c0 <_Balloc+0x7c>)
 8008060:	f7fe fd2a 	bl	8006ab8 <__assert_func>
 8008064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008068:	6006      	str	r6, [r0, #0]
 800806a:	60c6      	str	r6, [r0, #12]
 800806c:	69e6      	ldr	r6, [r4, #28]
 800806e:	68f3      	ldr	r3, [r6, #12]
 8008070:	b183      	cbz	r3, 8008094 <_Balloc+0x50>
 8008072:	69e3      	ldr	r3, [r4, #28]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800807a:	b9b8      	cbnz	r0, 80080ac <_Balloc+0x68>
 800807c:	2101      	movs	r1, #1
 800807e:	fa01 f605 	lsl.w	r6, r1, r5
 8008082:	1d72      	adds	r2, r6, #5
 8008084:	4620      	mov	r0, r4
 8008086:	0092      	lsls	r2, r2, #2
 8008088:	f000 fecb 	bl	8008e22 <_calloc_r>
 800808c:	b160      	cbz	r0, 80080a8 <_Balloc+0x64>
 800808e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008092:	e00e      	b.n	80080b2 <_Balloc+0x6e>
 8008094:	2221      	movs	r2, #33	@ 0x21
 8008096:	2104      	movs	r1, #4
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fec2 	bl	8008e22 <_calloc_r>
 800809e:	69e3      	ldr	r3, [r4, #28]
 80080a0:	60f0      	str	r0, [r6, #12]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e4      	bne.n	8008072 <_Balloc+0x2e>
 80080a8:	2000      	movs	r0, #0
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	6802      	ldr	r2, [r0, #0]
 80080ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080b2:	2300      	movs	r3, #0
 80080b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080b8:	e7f7      	b.n	80080aa <_Balloc+0x66>
 80080ba:	bf00      	nop
 80080bc:	08009600 	.word	0x08009600
 80080c0:	0800978b 	.word	0x0800978b

080080c4 <_Bfree>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	69c6      	ldr	r6, [r0, #28]
 80080c8:	4605      	mov	r5, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	b976      	cbnz	r6, 80080ec <_Bfree+0x28>
 80080ce:	2010      	movs	r0, #16
 80080d0:	f7ff fef0 	bl	8007eb4 <malloc>
 80080d4:	4602      	mov	r2, r0
 80080d6:	61e8      	str	r0, [r5, #28]
 80080d8:	b920      	cbnz	r0, 80080e4 <_Bfree+0x20>
 80080da:	218f      	movs	r1, #143	@ 0x8f
 80080dc:	4b08      	ldr	r3, [pc, #32]	@ (8008100 <_Bfree+0x3c>)
 80080de:	4809      	ldr	r0, [pc, #36]	@ (8008104 <_Bfree+0x40>)
 80080e0:	f7fe fcea 	bl	8006ab8 <__assert_func>
 80080e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080e8:	6006      	str	r6, [r0, #0]
 80080ea:	60c6      	str	r6, [r0, #12]
 80080ec:	b13c      	cbz	r4, 80080fe <_Bfree+0x3a>
 80080ee:	69eb      	ldr	r3, [r5, #28]
 80080f0:	6862      	ldr	r2, [r4, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080f8:	6021      	str	r1, [r4, #0]
 80080fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	08009600 	.word	0x08009600
 8008104:	0800978b 	.word	0x0800978b

08008108 <__multadd>:
 8008108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810c:	4607      	mov	r7, r0
 800810e:	460c      	mov	r4, r1
 8008110:	461e      	mov	r6, r3
 8008112:	2000      	movs	r0, #0
 8008114:	690d      	ldr	r5, [r1, #16]
 8008116:	f101 0c14 	add.w	ip, r1, #20
 800811a:	f8dc 3000 	ldr.w	r3, [ip]
 800811e:	3001      	adds	r0, #1
 8008120:	b299      	uxth	r1, r3
 8008122:	fb02 6101 	mla	r1, r2, r1, r6
 8008126:	0c1e      	lsrs	r6, r3, #16
 8008128:	0c0b      	lsrs	r3, r1, #16
 800812a:	fb02 3306 	mla	r3, r2, r6, r3
 800812e:	b289      	uxth	r1, r1
 8008130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008134:	4285      	cmp	r5, r0
 8008136:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800813a:	f84c 1b04 	str.w	r1, [ip], #4
 800813e:	dcec      	bgt.n	800811a <__multadd+0x12>
 8008140:	b30e      	cbz	r6, 8008186 <__multadd+0x7e>
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	42ab      	cmp	r3, r5
 8008146:	dc19      	bgt.n	800817c <__multadd+0x74>
 8008148:	6861      	ldr	r1, [r4, #4]
 800814a:	4638      	mov	r0, r7
 800814c:	3101      	adds	r1, #1
 800814e:	f7ff ff79 	bl	8008044 <_Balloc>
 8008152:	4680      	mov	r8, r0
 8008154:	b928      	cbnz	r0, 8008162 <__multadd+0x5a>
 8008156:	4602      	mov	r2, r0
 8008158:	21ba      	movs	r1, #186	@ 0xba
 800815a:	4b0c      	ldr	r3, [pc, #48]	@ (800818c <__multadd+0x84>)
 800815c:	480c      	ldr	r0, [pc, #48]	@ (8008190 <__multadd+0x88>)
 800815e:	f7fe fcab 	bl	8006ab8 <__assert_func>
 8008162:	6922      	ldr	r2, [r4, #16]
 8008164:	f104 010c 	add.w	r1, r4, #12
 8008168:	3202      	adds	r2, #2
 800816a:	0092      	lsls	r2, r2, #2
 800816c:	300c      	adds	r0, #12
 800816e:	f7fe fc8e 	bl	8006a8e <memcpy>
 8008172:	4621      	mov	r1, r4
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff ffa5 	bl	80080c4 <_Bfree>
 800817a:	4644      	mov	r4, r8
 800817c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008180:	3501      	adds	r5, #1
 8008182:	615e      	str	r6, [r3, #20]
 8008184:	6125      	str	r5, [r4, #16]
 8008186:	4620      	mov	r0, r4
 8008188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800818c:	0800971a 	.word	0x0800971a
 8008190:	0800978b 	.word	0x0800978b

08008194 <__s2b>:
 8008194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008198:	4615      	mov	r5, r2
 800819a:	2209      	movs	r2, #9
 800819c:	461f      	mov	r7, r3
 800819e:	3308      	adds	r3, #8
 80081a0:	460c      	mov	r4, r1
 80081a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80081a6:	4606      	mov	r6, r0
 80081a8:	2201      	movs	r2, #1
 80081aa:	2100      	movs	r1, #0
 80081ac:	429a      	cmp	r2, r3
 80081ae:	db09      	blt.n	80081c4 <__s2b+0x30>
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff ff47 	bl	8008044 <_Balloc>
 80081b6:	b940      	cbnz	r0, 80081ca <__s2b+0x36>
 80081b8:	4602      	mov	r2, r0
 80081ba:	21d3      	movs	r1, #211	@ 0xd3
 80081bc:	4b18      	ldr	r3, [pc, #96]	@ (8008220 <__s2b+0x8c>)
 80081be:	4819      	ldr	r0, [pc, #100]	@ (8008224 <__s2b+0x90>)
 80081c0:	f7fe fc7a 	bl	8006ab8 <__assert_func>
 80081c4:	0052      	lsls	r2, r2, #1
 80081c6:	3101      	adds	r1, #1
 80081c8:	e7f0      	b.n	80081ac <__s2b+0x18>
 80081ca:	9b08      	ldr	r3, [sp, #32]
 80081cc:	2d09      	cmp	r5, #9
 80081ce:	6143      	str	r3, [r0, #20]
 80081d0:	f04f 0301 	mov.w	r3, #1
 80081d4:	6103      	str	r3, [r0, #16]
 80081d6:	dd16      	ble.n	8008206 <__s2b+0x72>
 80081d8:	f104 0909 	add.w	r9, r4, #9
 80081dc:	46c8      	mov	r8, r9
 80081de:	442c      	add	r4, r5
 80081e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80081e4:	4601      	mov	r1, r0
 80081e6:	220a      	movs	r2, #10
 80081e8:	4630      	mov	r0, r6
 80081ea:	3b30      	subs	r3, #48	@ 0x30
 80081ec:	f7ff ff8c 	bl	8008108 <__multadd>
 80081f0:	45a0      	cmp	r8, r4
 80081f2:	d1f5      	bne.n	80081e0 <__s2b+0x4c>
 80081f4:	f1a5 0408 	sub.w	r4, r5, #8
 80081f8:	444c      	add	r4, r9
 80081fa:	1b2d      	subs	r5, r5, r4
 80081fc:	1963      	adds	r3, r4, r5
 80081fe:	42bb      	cmp	r3, r7
 8008200:	db04      	blt.n	800820c <__s2b+0x78>
 8008202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008206:	2509      	movs	r5, #9
 8008208:	340a      	adds	r4, #10
 800820a:	e7f6      	b.n	80081fa <__s2b+0x66>
 800820c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008210:	4601      	mov	r1, r0
 8008212:	220a      	movs	r2, #10
 8008214:	4630      	mov	r0, r6
 8008216:	3b30      	subs	r3, #48	@ 0x30
 8008218:	f7ff ff76 	bl	8008108 <__multadd>
 800821c:	e7ee      	b.n	80081fc <__s2b+0x68>
 800821e:	bf00      	nop
 8008220:	0800971a 	.word	0x0800971a
 8008224:	0800978b 	.word	0x0800978b

08008228 <__hi0bits>:
 8008228:	4603      	mov	r3, r0
 800822a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800822e:	bf3a      	itte	cc
 8008230:	0403      	lslcc	r3, r0, #16
 8008232:	2010      	movcc	r0, #16
 8008234:	2000      	movcs	r0, #0
 8008236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800823a:	bf3c      	itt	cc
 800823c:	021b      	lslcc	r3, r3, #8
 800823e:	3008      	addcc	r0, #8
 8008240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008244:	bf3c      	itt	cc
 8008246:	011b      	lslcc	r3, r3, #4
 8008248:	3004      	addcc	r0, #4
 800824a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800824e:	bf3c      	itt	cc
 8008250:	009b      	lslcc	r3, r3, #2
 8008252:	3002      	addcc	r0, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	db05      	blt.n	8008264 <__hi0bits+0x3c>
 8008258:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800825c:	f100 0001 	add.w	r0, r0, #1
 8008260:	bf08      	it	eq
 8008262:	2020      	moveq	r0, #32
 8008264:	4770      	bx	lr

08008266 <__lo0bits>:
 8008266:	6803      	ldr	r3, [r0, #0]
 8008268:	4602      	mov	r2, r0
 800826a:	f013 0007 	ands.w	r0, r3, #7
 800826e:	d00b      	beq.n	8008288 <__lo0bits+0x22>
 8008270:	07d9      	lsls	r1, r3, #31
 8008272:	d421      	bmi.n	80082b8 <__lo0bits+0x52>
 8008274:	0798      	lsls	r0, r3, #30
 8008276:	bf49      	itett	mi
 8008278:	085b      	lsrmi	r3, r3, #1
 800827a:	089b      	lsrpl	r3, r3, #2
 800827c:	2001      	movmi	r0, #1
 800827e:	6013      	strmi	r3, [r2, #0]
 8008280:	bf5c      	itt	pl
 8008282:	2002      	movpl	r0, #2
 8008284:	6013      	strpl	r3, [r2, #0]
 8008286:	4770      	bx	lr
 8008288:	b299      	uxth	r1, r3
 800828a:	b909      	cbnz	r1, 8008290 <__lo0bits+0x2a>
 800828c:	2010      	movs	r0, #16
 800828e:	0c1b      	lsrs	r3, r3, #16
 8008290:	b2d9      	uxtb	r1, r3
 8008292:	b909      	cbnz	r1, 8008298 <__lo0bits+0x32>
 8008294:	3008      	adds	r0, #8
 8008296:	0a1b      	lsrs	r3, r3, #8
 8008298:	0719      	lsls	r1, r3, #28
 800829a:	bf04      	itt	eq
 800829c:	091b      	lsreq	r3, r3, #4
 800829e:	3004      	addeq	r0, #4
 80082a0:	0799      	lsls	r1, r3, #30
 80082a2:	bf04      	itt	eq
 80082a4:	089b      	lsreq	r3, r3, #2
 80082a6:	3002      	addeq	r0, #2
 80082a8:	07d9      	lsls	r1, r3, #31
 80082aa:	d403      	bmi.n	80082b4 <__lo0bits+0x4e>
 80082ac:	085b      	lsrs	r3, r3, #1
 80082ae:	f100 0001 	add.w	r0, r0, #1
 80082b2:	d003      	beq.n	80082bc <__lo0bits+0x56>
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	4770      	bx	lr
 80082b8:	2000      	movs	r0, #0
 80082ba:	4770      	bx	lr
 80082bc:	2020      	movs	r0, #32
 80082be:	4770      	bx	lr

080082c0 <__i2b>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	2101      	movs	r1, #1
 80082c6:	f7ff febd 	bl	8008044 <_Balloc>
 80082ca:	4602      	mov	r2, r0
 80082cc:	b928      	cbnz	r0, 80082da <__i2b+0x1a>
 80082ce:	f240 1145 	movw	r1, #325	@ 0x145
 80082d2:	4b04      	ldr	r3, [pc, #16]	@ (80082e4 <__i2b+0x24>)
 80082d4:	4804      	ldr	r0, [pc, #16]	@ (80082e8 <__i2b+0x28>)
 80082d6:	f7fe fbef 	bl	8006ab8 <__assert_func>
 80082da:	2301      	movs	r3, #1
 80082dc:	6144      	str	r4, [r0, #20]
 80082de:	6103      	str	r3, [r0, #16]
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	0800971a 	.word	0x0800971a
 80082e8:	0800978b 	.word	0x0800978b

080082ec <__multiply>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	4617      	mov	r7, r2
 80082f2:	690a      	ldr	r2, [r1, #16]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	4689      	mov	r9, r1
 80082f8:	429a      	cmp	r2, r3
 80082fa:	bfa2      	ittt	ge
 80082fc:	463b      	movge	r3, r7
 80082fe:	460f      	movge	r7, r1
 8008300:	4699      	movge	r9, r3
 8008302:	693d      	ldr	r5, [r7, #16]
 8008304:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	6879      	ldr	r1, [r7, #4]
 800830c:	eb05 060a 	add.w	r6, r5, sl
 8008310:	42b3      	cmp	r3, r6
 8008312:	b085      	sub	sp, #20
 8008314:	bfb8      	it	lt
 8008316:	3101      	addlt	r1, #1
 8008318:	f7ff fe94 	bl	8008044 <_Balloc>
 800831c:	b930      	cbnz	r0, 800832c <__multiply+0x40>
 800831e:	4602      	mov	r2, r0
 8008320:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008324:	4b40      	ldr	r3, [pc, #256]	@ (8008428 <__multiply+0x13c>)
 8008326:	4841      	ldr	r0, [pc, #260]	@ (800842c <__multiply+0x140>)
 8008328:	f7fe fbc6 	bl	8006ab8 <__assert_func>
 800832c:	f100 0414 	add.w	r4, r0, #20
 8008330:	4623      	mov	r3, r4
 8008332:	2200      	movs	r2, #0
 8008334:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008338:	4573      	cmp	r3, lr
 800833a:	d320      	bcc.n	800837e <__multiply+0x92>
 800833c:	f107 0814 	add.w	r8, r7, #20
 8008340:	f109 0114 	add.w	r1, r9, #20
 8008344:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008348:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800834c:	9302      	str	r3, [sp, #8]
 800834e:	1beb      	subs	r3, r5, r7
 8008350:	3b15      	subs	r3, #21
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	3304      	adds	r3, #4
 8008358:	3715      	adds	r7, #21
 800835a:	42bd      	cmp	r5, r7
 800835c:	bf38      	it	cc
 800835e:	2304      	movcc	r3, #4
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	9b02      	ldr	r3, [sp, #8]
 8008364:	9103      	str	r1, [sp, #12]
 8008366:	428b      	cmp	r3, r1
 8008368:	d80c      	bhi.n	8008384 <__multiply+0x98>
 800836a:	2e00      	cmp	r6, #0
 800836c:	dd03      	ble.n	8008376 <__multiply+0x8a>
 800836e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008372:	2b00      	cmp	r3, #0
 8008374:	d055      	beq.n	8008422 <__multiply+0x136>
 8008376:	6106      	str	r6, [r0, #16]
 8008378:	b005      	add	sp, #20
 800837a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837e:	f843 2b04 	str.w	r2, [r3], #4
 8008382:	e7d9      	b.n	8008338 <__multiply+0x4c>
 8008384:	f8b1 a000 	ldrh.w	sl, [r1]
 8008388:	f1ba 0f00 	cmp.w	sl, #0
 800838c:	d01f      	beq.n	80083ce <__multiply+0xe2>
 800838e:	46c4      	mov	ip, r8
 8008390:	46a1      	mov	r9, r4
 8008392:	2700      	movs	r7, #0
 8008394:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008398:	f8d9 3000 	ldr.w	r3, [r9]
 800839c:	fa1f fb82 	uxth.w	fp, r2
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	fb0a 330b 	mla	r3, sl, fp, r3
 80083a6:	443b      	add	r3, r7
 80083a8:	f8d9 7000 	ldr.w	r7, [r9]
 80083ac:	0c12      	lsrs	r2, r2, #16
 80083ae:	0c3f      	lsrs	r7, r7, #16
 80083b0:	fb0a 7202 	mla	r2, sl, r2, r7
 80083b4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083be:	4565      	cmp	r5, ip
 80083c0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80083c4:	f849 3b04 	str.w	r3, [r9], #4
 80083c8:	d8e4      	bhi.n	8008394 <__multiply+0xa8>
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	50e7      	str	r7, [r4, r3]
 80083ce:	9b03      	ldr	r3, [sp, #12]
 80083d0:	3104      	adds	r1, #4
 80083d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80083d6:	f1b9 0f00 	cmp.w	r9, #0
 80083da:	d020      	beq.n	800841e <__multiply+0x132>
 80083dc:	4647      	mov	r7, r8
 80083de:	46a4      	mov	ip, r4
 80083e0:	f04f 0a00 	mov.w	sl, #0
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	f8b7 b000 	ldrh.w	fp, [r7]
 80083ea:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	fb09 220b 	mla	r2, r9, fp, r2
 80083f4:	4452      	add	r2, sl
 80083f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083fa:	f84c 3b04 	str.w	r3, [ip], #4
 80083fe:	f857 3b04 	ldr.w	r3, [r7], #4
 8008402:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008406:	f8bc 3000 	ldrh.w	r3, [ip]
 800840a:	42bd      	cmp	r5, r7
 800840c:	fb09 330a 	mla	r3, r9, sl, r3
 8008410:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008418:	d8e5      	bhi.n	80083e6 <__multiply+0xfa>
 800841a:	9a01      	ldr	r2, [sp, #4]
 800841c:	50a3      	str	r3, [r4, r2]
 800841e:	3404      	adds	r4, #4
 8008420:	e79f      	b.n	8008362 <__multiply+0x76>
 8008422:	3e01      	subs	r6, #1
 8008424:	e7a1      	b.n	800836a <__multiply+0x7e>
 8008426:	bf00      	nop
 8008428:	0800971a 	.word	0x0800971a
 800842c:	0800978b 	.word	0x0800978b

08008430 <__pow5mult>:
 8008430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008434:	4615      	mov	r5, r2
 8008436:	f012 0203 	ands.w	r2, r2, #3
 800843a:	4607      	mov	r7, r0
 800843c:	460e      	mov	r6, r1
 800843e:	d007      	beq.n	8008450 <__pow5mult+0x20>
 8008440:	4c25      	ldr	r4, [pc, #148]	@ (80084d8 <__pow5mult+0xa8>)
 8008442:	3a01      	subs	r2, #1
 8008444:	2300      	movs	r3, #0
 8008446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800844a:	f7ff fe5d 	bl	8008108 <__multadd>
 800844e:	4606      	mov	r6, r0
 8008450:	10ad      	asrs	r5, r5, #2
 8008452:	d03d      	beq.n	80084d0 <__pow5mult+0xa0>
 8008454:	69fc      	ldr	r4, [r7, #28]
 8008456:	b97c      	cbnz	r4, 8008478 <__pow5mult+0x48>
 8008458:	2010      	movs	r0, #16
 800845a:	f7ff fd2b 	bl	8007eb4 <malloc>
 800845e:	4602      	mov	r2, r0
 8008460:	61f8      	str	r0, [r7, #28]
 8008462:	b928      	cbnz	r0, 8008470 <__pow5mult+0x40>
 8008464:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008468:	4b1c      	ldr	r3, [pc, #112]	@ (80084dc <__pow5mult+0xac>)
 800846a:	481d      	ldr	r0, [pc, #116]	@ (80084e0 <__pow5mult+0xb0>)
 800846c:	f7fe fb24 	bl	8006ab8 <__assert_func>
 8008470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008474:	6004      	str	r4, [r0, #0]
 8008476:	60c4      	str	r4, [r0, #12]
 8008478:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800847c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008480:	b94c      	cbnz	r4, 8008496 <__pow5mult+0x66>
 8008482:	f240 2171 	movw	r1, #625	@ 0x271
 8008486:	4638      	mov	r0, r7
 8008488:	f7ff ff1a 	bl	80082c0 <__i2b>
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	f8c8 0008 	str.w	r0, [r8, #8]
 8008494:	6003      	str	r3, [r0, #0]
 8008496:	f04f 0900 	mov.w	r9, #0
 800849a:	07eb      	lsls	r3, r5, #31
 800849c:	d50a      	bpl.n	80084b4 <__pow5mult+0x84>
 800849e:	4631      	mov	r1, r6
 80084a0:	4622      	mov	r2, r4
 80084a2:	4638      	mov	r0, r7
 80084a4:	f7ff ff22 	bl	80082ec <__multiply>
 80084a8:	4680      	mov	r8, r0
 80084aa:	4631      	mov	r1, r6
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7ff fe09 	bl	80080c4 <_Bfree>
 80084b2:	4646      	mov	r6, r8
 80084b4:	106d      	asrs	r5, r5, #1
 80084b6:	d00b      	beq.n	80084d0 <__pow5mult+0xa0>
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	b938      	cbnz	r0, 80084cc <__pow5mult+0x9c>
 80084bc:	4622      	mov	r2, r4
 80084be:	4621      	mov	r1, r4
 80084c0:	4638      	mov	r0, r7
 80084c2:	f7ff ff13 	bl	80082ec <__multiply>
 80084c6:	6020      	str	r0, [r4, #0]
 80084c8:	f8c0 9000 	str.w	r9, [r0]
 80084cc:	4604      	mov	r4, r0
 80084ce:	e7e4      	b.n	800849a <__pow5mult+0x6a>
 80084d0:	4630      	mov	r0, r6
 80084d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d6:	bf00      	nop
 80084d8:	08009848 	.word	0x08009848
 80084dc:	08009600 	.word	0x08009600
 80084e0:	0800978b 	.word	0x0800978b

080084e4 <__lshift>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	460c      	mov	r4, r1
 80084ea:	4607      	mov	r7, r0
 80084ec:	4691      	mov	r9, r2
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	6849      	ldr	r1, [r1, #4]
 80084f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084fc:	f108 0601 	add.w	r6, r8, #1
 8008500:	42b3      	cmp	r3, r6
 8008502:	db0b      	blt.n	800851c <__lshift+0x38>
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff fd9d 	bl	8008044 <_Balloc>
 800850a:	4605      	mov	r5, r0
 800850c:	b948      	cbnz	r0, 8008522 <__lshift+0x3e>
 800850e:	4602      	mov	r2, r0
 8008510:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008514:	4b27      	ldr	r3, [pc, #156]	@ (80085b4 <__lshift+0xd0>)
 8008516:	4828      	ldr	r0, [pc, #160]	@ (80085b8 <__lshift+0xd4>)
 8008518:	f7fe face 	bl	8006ab8 <__assert_func>
 800851c:	3101      	adds	r1, #1
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	e7ee      	b.n	8008500 <__lshift+0x1c>
 8008522:	2300      	movs	r3, #0
 8008524:	f100 0114 	add.w	r1, r0, #20
 8008528:	f100 0210 	add.w	r2, r0, #16
 800852c:	4618      	mov	r0, r3
 800852e:	4553      	cmp	r3, sl
 8008530:	db33      	blt.n	800859a <__lshift+0xb6>
 8008532:	6920      	ldr	r0, [r4, #16]
 8008534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008538:	f104 0314 	add.w	r3, r4, #20
 800853c:	f019 091f 	ands.w	r9, r9, #31
 8008540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008544:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008548:	d02b      	beq.n	80085a2 <__lshift+0xbe>
 800854a:	468a      	mov	sl, r1
 800854c:	2200      	movs	r2, #0
 800854e:	f1c9 0e20 	rsb	lr, r9, #32
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	fa00 f009 	lsl.w	r0, r0, r9
 8008558:	4310      	orrs	r0, r2
 800855a:	f84a 0b04 	str.w	r0, [sl], #4
 800855e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008562:	459c      	cmp	ip, r3
 8008564:	fa22 f20e 	lsr.w	r2, r2, lr
 8008568:	d8f3      	bhi.n	8008552 <__lshift+0x6e>
 800856a:	ebac 0304 	sub.w	r3, ip, r4
 800856e:	3b15      	subs	r3, #21
 8008570:	f023 0303 	bic.w	r3, r3, #3
 8008574:	3304      	adds	r3, #4
 8008576:	f104 0015 	add.w	r0, r4, #21
 800857a:	4560      	cmp	r0, ip
 800857c:	bf88      	it	hi
 800857e:	2304      	movhi	r3, #4
 8008580:	50ca      	str	r2, [r1, r3]
 8008582:	b10a      	cbz	r2, 8008588 <__lshift+0xa4>
 8008584:	f108 0602 	add.w	r6, r8, #2
 8008588:	3e01      	subs	r6, #1
 800858a:	4638      	mov	r0, r7
 800858c:	4621      	mov	r1, r4
 800858e:	612e      	str	r6, [r5, #16]
 8008590:	f7ff fd98 	bl	80080c4 <_Bfree>
 8008594:	4628      	mov	r0, r5
 8008596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859a:	f842 0f04 	str.w	r0, [r2, #4]!
 800859e:	3301      	adds	r3, #1
 80085a0:	e7c5      	b.n	800852e <__lshift+0x4a>
 80085a2:	3904      	subs	r1, #4
 80085a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a8:	459c      	cmp	ip, r3
 80085aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80085ae:	d8f9      	bhi.n	80085a4 <__lshift+0xc0>
 80085b0:	e7ea      	b.n	8008588 <__lshift+0xa4>
 80085b2:	bf00      	nop
 80085b4:	0800971a 	.word	0x0800971a
 80085b8:	0800978b 	.word	0x0800978b

080085bc <__mcmp>:
 80085bc:	4603      	mov	r3, r0
 80085be:	690a      	ldr	r2, [r1, #16]
 80085c0:	6900      	ldr	r0, [r0, #16]
 80085c2:	b530      	push	{r4, r5, lr}
 80085c4:	1a80      	subs	r0, r0, r2
 80085c6:	d10e      	bne.n	80085e6 <__mcmp+0x2a>
 80085c8:	3314      	adds	r3, #20
 80085ca:	3114      	adds	r1, #20
 80085cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085dc:	4295      	cmp	r5, r2
 80085de:	d003      	beq.n	80085e8 <__mcmp+0x2c>
 80085e0:	d205      	bcs.n	80085ee <__mcmp+0x32>
 80085e2:	f04f 30ff 	mov.w	r0, #4294967295
 80085e6:	bd30      	pop	{r4, r5, pc}
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	d3f3      	bcc.n	80085d4 <__mcmp+0x18>
 80085ec:	e7fb      	b.n	80085e6 <__mcmp+0x2a>
 80085ee:	2001      	movs	r0, #1
 80085f0:	e7f9      	b.n	80085e6 <__mcmp+0x2a>
	...

080085f4 <__mdiff>:
 80085f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	4689      	mov	r9, r1
 80085fa:	4606      	mov	r6, r0
 80085fc:	4611      	mov	r1, r2
 80085fe:	4648      	mov	r0, r9
 8008600:	4614      	mov	r4, r2
 8008602:	f7ff ffdb 	bl	80085bc <__mcmp>
 8008606:	1e05      	subs	r5, r0, #0
 8008608:	d112      	bne.n	8008630 <__mdiff+0x3c>
 800860a:	4629      	mov	r1, r5
 800860c:	4630      	mov	r0, r6
 800860e:	f7ff fd19 	bl	8008044 <_Balloc>
 8008612:	4602      	mov	r2, r0
 8008614:	b928      	cbnz	r0, 8008622 <__mdiff+0x2e>
 8008616:	f240 2137 	movw	r1, #567	@ 0x237
 800861a:	4b3e      	ldr	r3, [pc, #248]	@ (8008714 <__mdiff+0x120>)
 800861c:	483e      	ldr	r0, [pc, #248]	@ (8008718 <__mdiff+0x124>)
 800861e:	f7fe fa4b 	bl	8006ab8 <__assert_func>
 8008622:	2301      	movs	r3, #1
 8008624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008628:	4610      	mov	r0, r2
 800862a:	b003      	add	sp, #12
 800862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008630:	bfbc      	itt	lt
 8008632:	464b      	movlt	r3, r9
 8008634:	46a1      	movlt	r9, r4
 8008636:	4630      	mov	r0, r6
 8008638:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800863c:	bfba      	itte	lt
 800863e:	461c      	movlt	r4, r3
 8008640:	2501      	movlt	r5, #1
 8008642:	2500      	movge	r5, #0
 8008644:	f7ff fcfe 	bl	8008044 <_Balloc>
 8008648:	4602      	mov	r2, r0
 800864a:	b918      	cbnz	r0, 8008654 <__mdiff+0x60>
 800864c:	f240 2145 	movw	r1, #581	@ 0x245
 8008650:	4b30      	ldr	r3, [pc, #192]	@ (8008714 <__mdiff+0x120>)
 8008652:	e7e3      	b.n	800861c <__mdiff+0x28>
 8008654:	f100 0b14 	add.w	fp, r0, #20
 8008658:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800865c:	f109 0310 	add.w	r3, r9, #16
 8008660:	60c5      	str	r5, [r0, #12]
 8008662:	f04f 0c00 	mov.w	ip, #0
 8008666:	f109 0514 	add.w	r5, r9, #20
 800866a:	46d9      	mov	r9, fp
 800866c:	6926      	ldr	r6, [r4, #16]
 800866e:	f104 0e14 	add.w	lr, r4, #20
 8008672:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008676:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008682:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008686:	b281      	uxth	r1, r0
 8008688:	9301      	str	r3, [sp, #4]
 800868a:	fa1f f38a 	uxth.w	r3, sl
 800868e:	1a5b      	subs	r3, r3, r1
 8008690:	0c00      	lsrs	r0, r0, #16
 8008692:	4463      	add	r3, ip
 8008694:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008698:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086a2:	4576      	cmp	r6, lr
 80086a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086a8:	f849 3b04 	str.w	r3, [r9], #4
 80086ac:	d8e6      	bhi.n	800867c <__mdiff+0x88>
 80086ae:	1b33      	subs	r3, r6, r4
 80086b0:	3b15      	subs	r3, #21
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	3415      	adds	r4, #21
 80086b8:	3304      	adds	r3, #4
 80086ba:	42a6      	cmp	r6, r4
 80086bc:	bf38      	it	cc
 80086be:	2304      	movcc	r3, #4
 80086c0:	441d      	add	r5, r3
 80086c2:	445b      	add	r3, fp
 80086c4:	461e      	mov	r6, r3
 80086c6:	462c      	mov	r4, r5
 80086c8:	4544      	cmp	r4, r8
 80086ca:	d30e      	bcc.n	80086ea <__mdiff+0xf6>
 80086cc:	f108 0103 	add.w	r1, r8, #3
 80086d0:	1b49      	subs	r1, r1, r5
 80086d2:	f021 0103 	bic.w	r1, r1, #3
 80086d6:	3d03      	subs	r5, #3
 80086d8:	45a8      	cmp	r8, r5
 80086da:	bf38      	it	cc
 80086dc:	2100      	movcc	r1, #0
 80086de:	440b      	add	r3, r1
 80086e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086e4:	b199      	cbz	r1, 800870e <__mdiff+0x11a>
 80086e6:	6117      	str	r7, [r2, #16]
 80086e8:	e79e      	b.n	8008628 <__mdiff+0x34>
 80086ea:	46e6      	mov	lr, ip
 80086ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80086f0:	fa1f fc81 	uxth.w	ip, r1
 80086f4:	44f4      	add	ip, lr
 80086f6:	0c08      	lsrs	r0, r1, #16
 80086f8:	4471      	add	r1, lr
 80086fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80086fe:	b289      	uxth	r1, r1
 8008700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008704:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008708:	f846 1b04 	str.w	r1, [r6], #4
 800870c:	e7dc      	b.n	80086c8 <__mdiff+0xd4>
 800870e:	3f01      	subs	r7, #1
 8008710:	e7e6      	b.n	80086e0 <__mdiff+0xec>
 8008712:	bf00      	nop
 8008714:	0800971a 	.word	0x0800971a
 8008718:	0800978b 	.word	0x0800978b

0800871c <__ulp>:
 800871c:	4b0e      	ldr	r3, [pc, #56]	@ (8008758 <__ulp+0x3c>)
 800871e:	400b      	ands	r3, r1
 8008720:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008724:	2b00      	cmp	r3, #0
 8008726:	dc08      	bgt.n	800873a <__ulp+0x1e>
 8008728:	425b      	negs	r3, r3
 800872a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800872e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008732:	da04      	bge.n	800873e <__ulp+0x22>
 8008734:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008738:	4113      	asrs	r3, r2
 800873a:	2200      	movs	r2, #0
 800873c:	e008      	b.n	8008750 <__ulp+0x34>
 800873e:	f1a2 0314 	sub.w	r3, r2, #20
 8008742:	2b1e      	cmp	r3, #30
 8008744:	bfd6      	itet	le
 8008746:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800874a:	2201      	movgt	r2, #1
 800874c:	40da      	lsrle	r2, r3
 800874e:	2300      	movs	r3, #0
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	7ff00000 	.word	0x7ff00000

0800875c <__b2d>:
 800875c:	6902      	ldr	r2, [r0, #16]
 800875e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008760:	f100 0614 	add.w	r6, r0, #20
 8008764:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008768:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800876c:	4f1e      	ldr	r7, [pc, #120]	@ (80087e8 <__b2d+0x8c>)
 800876e:	4620      	mov	r0, r4
 8008770:	f7ff fd5a 	bl	8008228 <__hi0bits>
 8008774:	4603      	mov	r3, r0
 8008776:	f1c0 0020 	rsb	r0, r0, #32
 800877a:	2b0a      	cmp	r3, #10
 800877c:	f1a2 0504 	sub.w	r5, r2, #4
 8008780:	6008      	str	r0, [r1, #0]
 8008782:	dc12      	bgt.n	80087aa <__b2d+0x4e>
 8008784:	42ae      	cmp	r6, r5
 8008786:	bf2c      	ite	cs
 8008788:	2200      	movcs	r2, #0
 800878a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800878e:	f1c3 0c0b 	rsb	ip, r3, #11
 8008792:	3315      	adds	r3, #21
 8008794:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008798:	fa04 f303 	lsl.w	r3, r4, r3
 800879c:	fa22 f20c 	lsr.w	r2, r2, ip
 80087a0:	ea4e 0107 	orr.w	r1, lr, r7
 80087a4:	431a      	orrs	r2, r3
 80087a6:	4610      	mov	r0, r2
 80087a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087aa:	42ae      	cmp	r6, r5
 80087ac:	bf36      	itet	cc
 80087ae:	f1a2 0508 	subcc.w	r5, r2, #8
 80087b2:	2200      	movcs	r2, #0
 80087b4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80087b8:	3b0b      	subs	r3, #11
 80087ba:	d012      	beq.n	80087e2 <__b2d+0x86>
 80087bc:	f1c3 0720 	rsb	r7, r3, #32
 80087c0:	fa22 f107 	lsr.w	r1, r2, r7
 80087c4:	409c      	lsls	r4, r3
 80087c6:	430c      	orrs	r4, r1
 80087c8:	42b5      	cmp	r5, r6
 80087ca:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80087ce:	bf94      	ite	ls
 80087d0:	2400      	movls	r4, #0
 80087d2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80087d6:	409a      	lsls	r2, r3
 80087d8:	40fc      	lsrs	r4, r7
 80087da:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80087de:	4322      	orrs	r2, r4
 80087e0:	e7e1      	b.n	80087a6 <__b2d+0x4a>
 80087e2:	ea44 0107 	orr.w	r1, r4, r7
 80087e6:	e7de      	b.n	80087a6 <__b2d+0x4a>
 80087e8:	3ff00000 	.word	0x3ff00000

080087ec <__d2b>:
 80087ec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80087f0:	2101      	movs	r1, #1
 80087f2:	4690      	mov	r8, r2
 80087f4:	4699      	mov	r9, r3
 80087f6:	9e08      	ldr	r6, [sp, #32]
 80087f8:	f7ff fc24 	bl	8008044 <_Balloc>
 80087fc:	4604      	mov	r4, r0
 80087fe:	b930      	cbnz	r0, 800880e <__d2b+0x22>
 8008800:	4602      	mov	r2, r0
 8008802:	f240 310f 	movw	r1, #783	@ 0x30f
 8008806:	4b23      	ldr	r3, [pc, #140]	@ (8008894 <__d2b+0xa8>)
 8008808:	4823      	ldr	r0, [pc, #140]	@ (8008898 <__d2b+0xac>)
 800880a:	f7fe f955 	bl	8006ab8 <__assert_func>
 800880e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008812:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008816:	b10d      	cbz	r5, 800881c <__d2b+0x30>
 8008818:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	f1b8 0300 	subs.w	r3, r8, #0
 8008822:	d024      	beq.n	800886e <__d2b+0x82>
 8008824:	4668      	mov	r0, sp
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	f7ff fd1d 	bl	8008266 <__lo0bits>
 800882c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008830:	b1d8      	cbz	r0, 800886a <__d2b+0x7e>
 8008832:	f1c0 0320 	rsb	r3, r0, #32
 8008836:	fa02 f303 	lsl.w	r3, r2, r3
 800883a:	430b      	orrs	r3, r1
 800883c:	40c2      	lsrs	r2, r0
 800883e:	6163      	str	r3, [r4, #20]
 8008840:	9201      	str	r2, [sp, #4]
 8008842:	9b01      	ldr	r3, [sp, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	bf0c      	ite	eq
 8008848:	2201      	moveq	r2, #1
 800884a:	2202      	movne	r2, #2
 800884c:	61a3      	str	r3, [r4, #24]
 800884e:	6122      	str	r2, [r4, #16]
 8008850:	b1ad      	cbz	r5, 800887e <__d2b+0x92>
 8008852:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008856:	4405      	add	r5, r0
 8008858:	6035      	str	r5, [r6, #0]
 800885a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800885e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008860:	6018      	str	r0, [r3, #0]
 8008862:	4620      	mov	r0, r4
 8008864:	b002      	add	sp, #8
 8008866:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800886a:	6161      	str	r1, [r4, #20]
 800886c:	e7e9      	b.n	8008842 <__d2b+0x56>
 800886e:	a801      	add	r0, sp, #4
 8008870:	f7ff fcf9 	bl	8008266 <__lo0bits>
 8008874:	9b01      	ldr	r3, [sp, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	6163      	str	r3, [r4, #20]
 800887a:	3020      	adds	r0, #32
 800887c:	e7e7      	b.n	800884e <__d2b+0x62>
 800887e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008882:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008886:	6030      	str	r0, [r6, #0]
 8008888:	6918      	ldr	r0, [r3, #16]
 800888a:	f7ff fccd 	bl	8008228 <__hi0bits>
 800888e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008892:	e7e4      	b.n	800885e <__d2b+0x72>
 8008894:	0800971a 	.word	0x0800971a
 8008898:	0800978b 	.word	0x0800978b

0800889c <__ratio>:
 800889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a0:	b085      	sub	sp, #20
 80088a2:	e9cd 1000 	strd	r1, r0, [sp]
 80088a6:	a902      	add	r1, sp, #8
 80088a8:	f7ff ff58 	bl	800875c <__b2d>
 80088ac:	468b      	mov	fp, r1
 80088ae:	4606      	mov	r6, r0
 80088b0:	460f      	mov	r7, r1
 80088b2:	9800      	ldr	r0, [sp, #0]
 80088b4:	a903      	add	r1, sp, #12
 80088b6:	f7ff ff51 	bl	800875c <__b2d>
 80088ba:	460d      	mov	r5, r1
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	4689      	mov	r9, r1
 80088c0:	6919      	ldr	r1, [r3, #16]
 80088c2:	9b00      	ldr	r3, [sp, #0]
 80088c4:	4604      	mov	r4, r0
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	4630      	mov	r0, r6
 80088ca:	1ac9      	subs	r1, r1, r3
 80088cc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80088d0:	1a9b      	subs	r3, r3, r2
 80088d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bfcd      	iteet	gt
 80088da:	463a      	movgt	r2, r7
 80088dc:	462a      	movle	r2, r5
 80088de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088e2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80088e6:	bfd8      	it	le
 80088e8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80088ec:	464b      	mov	r3, r9
 80088ee:	4622      	mov	r2, r4
 80088f0:	4659      	mov	r1, fp
 80088f2:	f7f7 ff1b 	bl	800072c <__aeabi_ddiv>
 80088f6:	b005      	add	sp, #20
 80088f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088fc <__copybits>:
 80088fc:	3901      	subs	r1, #1
 80088fe:	b570      	push	{r4, r5, r6, lr}
 8008900:	1149      	asrs	r1, r1, #5
 8008902:	6914      	ldr	r4, [r2, #16]
 8008904:	3101      	adds	r1, #1
 8008906:	f102 0314 	add.w	r3, r2, #20
 800890a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800890e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008912:	1f05      	subs	r5, r0, #4
 8008914:	42a3      	cmp	r3, r4
 8008916:	d30c      	bcc.n	8008932 <__copybits+0x36>
 8008918:	1aa3      	subs	r3, r4, r2
 800891a:	3b11      	subs	r3, #17
 800891c:	f023 0303 	bic.w	r3, r3, #3
 8008920:	3211      	adds	r2, #17
 8008922:	42a2      	cmp	r2, r4
 8008924:	bf88      	it	hi
 8008926:	2300      	movhi	r3, #0
 8008928:	4418      	add	r0, r3
 800892a:	2300      	movs	r3, #0
 800892c:	4288      	cmp	r0, r1
 800892e:	d305      	bcc.n	800893c <__copybits+0x40>
 8008930:	bd70      	pop	{r4, r5, r6, pc}
 8008932:	f853 6b04 	ldr.w	r6, [r3], #4
 8008936:	f845 6f04 	str.w	r6, [r5, #4]!
 800893a:	e7eb      	b.n	8008914 <__copybits+0x18>
 800893c:	f840 3b04 	str.w	r3, [r0], #4
 8008940:	e7f4      	b.n	800892c <__copybits+0x30>

08008942 <__any_on>:
 8008942:	f100 0214 	add.w	r2, r0, #20
 8008946:	6900      	ldr	r0, [r0, #16]
 8008948:	114b      	asrs	r3, r1, #5
 800894a:	4298      	cmp	r0, r3
 800894c:	b510      	push	{r4, lr}
 800894e:	db11      	blt.n	8008974 <__any_on+0x32>
 8008950:	dd0a      	ble.n	8008968 <__any_on+0x26>
 8008952:	f011 011f 	ands.w	r1, r1, #31
 8008956:	d007      	beq.n	8008968 <__any_on+0x26>
 8008958:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800895c:	fa24 f001 	lsr.w	r0, r4, r1
 8008960:	fa00 f101 	lsl.w	r1, r0, r1
 8008964:	428c      	cmp	r4, r1
 8008966:	d10b      	bne.n	8008980 <__any_on+0x3e>
 8008968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800896c:	4293      	cmp	r3, r2
 800896e:	d803      	bhi.n	8008978 <__any_on+0x36>
 8008970:	2000      	movs	r0, #0
 8008972:	bd10      	pop	{r4, pc}
 8008974:	4603      	mov	r3, r0
 8008976:	e7f7      	b.n	8008968 <__any_on+0x26>
 8008978:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800897c:	2900      	cmp	r1, #0
 800897e:	d0f5      	beq.n	800896c <__any_on+0x2a>
 8008980:	2001      	movs	r0, #1
 8008982:	e7f6      	b.n	8008972 <__any_on+0x30>

08008984 <__ascii_wctomb>:
 8008984:	4603      	mov	r3, r0
 8008986:	4608      	mov	r0, r1
 8008988:	b141      	cbz	r1, 800899c <__ascii_wctomb+0x18>
 800898a:	2aff      	cmp	r2, #255	@ 0xff
 800898c:	d904      	bls.n	8008998 <__ascii_wctomb+0x14>
 800898e:	228a      	movs	r2, #138	@ 0x8a
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	4770      	bx	lr
 8008998:	2001      	movs	r0, #1
 800899a:	700a      	strb	r2, [r1, #0]
 800899c:	4770      	bx	lr

0800899e <__ssputs_r>:
 800899e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a2:	461f      	mov	r7, r3
 80089a4:	688e      	ldr	r6, [r1, #8]
 80089a6:	4682      	mov	sl, r0
 80089a8:	42be      	cmp	r6, r7
 80089aa:	460c      	mov	r4, r1
 80089ac:	4690      	mov	r8, r2
 80089ae:	680b      	ldr	r3, [r1, #0]
 80089b0:	d82d      	bhi.n	8008a0e <__ssputs_r+0x70>
 80089b2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089b6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089ba:	d026      	beq.n	8008a0a <__ssputs_r+0x6c>
 80089bc:	6965      	ldr	r5, [r4, #20]
 80089be:	6909      	ldr	r1, [r1, #16]
 80089c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089c4:	eba3 0901 	sub.w	r9, r3, r1
 80089c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089cc:	1c7b      	adds	r3, r7, #1
 80089ce:	444b      	add	r3, r9
 80089d0:	106d      	asrs	r5, r5, #1
 80089d2:	429d      	cmp	r5, r3
 80089d4:	bf38      	it	cc
 80089d6:	461d      	movcc	r5, r3
 80089d8:	0553      	lsls	r3, r2, #21
 80089da:	d527      	bpl.n	8008a2c <__ssputs_r+0x8e>
 80089dc:	4629      	mov	r1, r5
 80089de:	f7ff fa93 	bl	8007f08 <_malloc_r>
 80089e2:	4606      	mov	r6, r0
 80089e4:	b360      	cbz	r0, 8008a40 <__ssputs_r+0xa2>
 80089e6:	464a      	mov	r2, r9
 80089e8:	6921      	ldr	r1, [r4, #16]
 80089ea:	f7fe f850 	bl	8006a8e <memcpy>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	6126      	str	r6, [r4, #16]
 80089fc:	444e      	add	r6, r9
 80089fe:	6026      	str	r6, [r4, #0]
 8008a00:	463e      	mov	r6, r7
 8008a02:	6165      	str	r5, [r4, #20]
 8008a04:	eba5 0509 	sub.w	r5, r5, r9
 8008a08:	60a5      	str	r5, [r4, #8]
 8008a0a:	42be      	cmp	r6, r7
 8008a0c:	d900      	bls.n	8008a10 <__ssputs_r+0x72>
 8008a0e:	463e      	mov	r6, r7
 8008a10:	4632      	mov	r2, r6
 8008a12:	4641      	mov	r1, r8
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	f000 f9d3 	bl	8008dc0 <memmove>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	68a3      	ldr	r3, [r4, #8]
 8008a1e:	1b9b      	subs	r3, r3, r6
 8008a20:	60a3      	str	r3, [r4, #8]
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	4433      	add	r3, r6
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	f000 fa0c 	bl	8008e4a <_realloc_r>
 8008a32:	4606      	mov	r6, r0
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1e0      	bne.n	80089fa <__ssputs_r+0x5c>
 8008a38:	4650      	mov	r0, sl
 8008a3a:	6921      	ldr	r1, [r4, #16]
 8008a3c:	f7fe feb8 	bl	80077b0 <_free_r>
 8008a40:	230c      	movs	r3, #12
 8008a42:	f8ca 3000 	str.w	r3, [sl]
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	e7e9      	b.n	8008a28 <__ssputs_r+0x8a>

08008a54 <_svfiprintf_r>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	4698      	mov	r8, r3
 8008a5a:	898b      	ldrh	r3, [r1, #12]
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	061b      	lsls	r3, r3, #24
 8008a60:	460d      	mov	r5, r1
 8008a62:	4614      	mov	r4, r2
 8008a64:	b09d      	sub	sp, #116	@ 0x74
 8008a66:	d510      	bpl.n	8008a8a <_svfiprintf_r+0x36>
 8008a68:	690b      	ldr	r3, [r1, #16]
 8008a6a:	b973      	cbnz	r3, 8008a8a <_svfiprintf_r+0x36>
 8008a6c:	2140      	movs	r1, #64	@ 0x40
 8008a6e:	f7ff fa4b 	bl	8007f08 <_malloc_r>
 8008a72:	6028      	str	r0, [r5, #0]
 8008a74:	6128      	str	r0, [r5, #16]
 8008a76:	b930      	cbnz	r0, 8008a86 <_svfiprintf_r+0x32>
 8008a78:	230c      	movs	r3, #12
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	b01d      	add	sp, #116	@ 0x74
 8008a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a86:	2340      	movs	r3, #64	@ 0x40
 8008a88:	616b      	str	r3, [r5, #20]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a8e:	2320      	movs	r3, #32
 8008a90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a94:	2330      	movs	r3, #48	@ 0x30
 8008a96:	f04f 0901 	mov.w	r9, #1
 8008a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a9e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008c38 <_svfiprintf_r+0x1e4>
 8008aa2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aa6:	4623      	mov	r3, r4
 8008aa8:	469a      	mov	sl, r3
 8008aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aae:	b10a      	cbz	r2, 8008ab4 <_svfiprintf_r+0x60>
 8008ab0:	2a25      	cmp	r2, #37	@ 0x25
 8008ab2:	d1f9      	bne.n	8008aa8 <_svfiprintf_r+0x54>
 8008ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ab8:	d00b      	beq.n	8008ad2 <_svfiprintf_r+0x7e>
 8008aba:	465b      	mov	r3, fp
 8008abc:	4622      	mov	r2, r4
 8008abe:	4629      	mov	r1, r5
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	f7ff ff6c 	bl	800899e <__ssputs_r>
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f000 80a7 	beq.w	8008c1a <_svfiprintf_r+0x1c6>
 8008acc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ace:	445a      	add	r2, fp
 8008ad0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 809f 	beq.w	8008c1a <_svfiprintf_r+0x1c6>
 8008adc:	2300      	movs	r3, #0
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ae6:	f10a 0a01 	add.w	sl, sl, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	9307      	str	r3, [sp, #28]
 8008aee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008af2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008af4:	4654      	mov	r4, sl
 8008af6:	2205      	movs	r2, #5
 8008af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afc:	484e      	ldr	r0, [pc, #312]	@ (8008c38 <_svfiprintf_r+0x1e4>)
 8008afe:	f7fd ffb8 	bl	8006a72 <memchr>
 8008b02:	9a04      	ldr	r2, [sp, #16]
 8008b04:	b9d8      	cbnz	r0, 8008b3e <_svfiprintf_r+0xea>
 8008b06:	06d0      	lsls	r0, r2, #27
 8008b08:	bf44      	itt	mi
 8008b0a:	2320      	movmi	r3, #32
 8008b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b10:	0711      	lsls	r1, r2, #28
 8008b12:	bf44      	itt	mi
 8008b14:	232b      	movmi	r3, #43	@ 0x2b
 8008b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b20:	d015      	beq.n	8008b4e <_svfiprintf_r+0xfa>
 8008b22:	4654      	mov	r4, sl
 8008b24:	2000      	movs	r0, #0
 8008b26:	f04f 0c0a 	mov.w	ip, #10
 8008b2a:	9a07      	ldr	r2, [sp, #28]
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b32:	3b30      	subs	r3, #48	@ 0x30
 8008b34:	2b09      	cmp	r3, #9
 8008b36:	d94b      	bls.n	8008bd0 <_svfiprintf_r+0x17c>
 8008b38:	b1b0      	cbz	r0, 8008b68 <_svfiprintf_r+0x114>
 8008b3a:	9207      	str	r2, [sp, #28]
 8008b3c:	e014      	b.n	8008b68 <_svfiprintf_r+0x114>
 8008b3e:	eba0 0308 	sub.w	r3, r0, r8
 8008b42:	fa09 f303 	lsl.w	r3, r9, r3
 8008b46:	4313      	orrs	r3, r2
 8008b48:	46a2      	mov	sl, r4
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	e7d2      	b.n	8008af4 <_svfiprintf_r+0xa0>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	1d19      	adds	r1, r3, #4
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	9103      	str	r1, [sp, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	bfbb      	ittet	lt
 8008b5a:	425b      	neglt	r3, r3
 8008b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b60:	9307      	strge	r3, [sp, #28]
 8008b62:	9307      	strlt	r3, [sp, #28]
 8008b64:	bfb8      	it	lt
 8008b66:	9204      	strlt	r2, [sp, #16]
 8008b68:	7823      	ldrb	r3, [r4, #0]
 8008b6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b6c:	d10a      	bne.n	8008b84 <_svfiprintf_r+0x130>
 8008b6e:	7863      	ldrb	r3, [r4, #1]
 8008b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b72:	d132      	bne.n	8008bda <_svfiprintf_r+0x186>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	3402      	adds	r4, #2
 8008b78:	1d1a      	adds	r2, r3, #4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	9203      	str	r2, [sp, #12]
 8008b7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b82:	9305      	str	r3, [sp, #20]
 8008b84:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008c3c <_svfiprintf_r+0x1e8>
 8008b88:	2203      	movs	r2, #3
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	7821      	ldrb	r1, [r4, #0]
 8008b8e:	f7fd ff70 	bl	8006a72 <memchr>
 8008b92:	b138      	cbz	r0, 8008ba4 <_svfiprintf_r+0x150>
 8008b94:	2240      	movs	r2, #64	@ 0x40
 8008b96:	9b04      	ldr	r3, [sp, #16]
 8008b98:	eba0 000a 	sub.w	r0, r0, sl
 8008b9c:	4082      	lsls	r2, r0
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	3401      	adds	r4, #1
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba8:	2206      	movs	r2, #6
 8008baa:	4825      	ldr	r0, [pc, #148]	@ (8008c40 <_svfiprintf_r+0x1ec>)
 8008bac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bb0:	f7fd ff5f 	bl	8006a72 <memchr>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d036      	beq.n	8008c26 <_svfiprintf_r+0x1d2>
 8008bb8:	4b22      	ldr	r3, [pc, #136]	@ (8008c44 <_svfiprintf_r+0x1f0>)
 8008bba:	bb1b      	cbnz	r3, 8008c04 <_svfiprintf_r+0x1b0>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	3307      	adds	r3, #7
 8008bc0:	f023 0307 	bic.w	r3, r3, #7
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	9303      	str	r3, [sp, #12]
 8008bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bca:	4433      	add	r3, r6
 8008bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bce:	e76a      	b.n	8008aa6 <_svfiprintf_r+0x52>
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd8:	e7a8      	b.n	8008b2c <_svfiprintf_r+0xd8>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f04f 0c0a 	mov.w	ip, #10
 8008be0:	4619      	mov	r1, r3
 8008be2:	3401      	adds	r4, #1
 8008be4:	9305      	str	r3, [sp, #20]
 8008be6:	4620      	mov	r0, r4
 8008be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bec:	3a30      	subs	r2, #48	@ 0x30
 8008bee:	2a09      	cmp	r2, #9
 8008bf0:	d903      	bls.n	8008bfa <_svfiprintf_r+0x1a6>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0c6      	beq.n	8008b84 <_svfiprintf_r+0x130>
 8008bf6:	9105      	str	r1, [sp, #20]
 8008bf8:	e7c4      	b.n	8008b84 <_svfiprintf_r+0x130>
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c02:	e7f0      	b.n	8008be6 <_svfiprintf_r+0x192>
 8008c04:	ab03      	add	r3, sp, #12
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	462a      	mov	r2, r5
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c48 <_svfiprintf_r+0x1f4>)
 8008c0e:	a904      	add	r1, sp, #16
 8008c10:	f7fd f920 	bl	8005e54 <_printf_float>
 8008c14:	1c42      	adds	r2, r0, #1
 8008c16:	4606      	mov	r6, r0
 8008c18:	d1d6      	bne.n	8008bc8 <_svfiprintf_r+0x174>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	065b      	lsls	r3, r3, #25
 8008c1e:	f53f af2d 	bmi.w	8008a7c <_svfiprintf_r+0x28>
 8008c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c24:	e72c      	b.n	8008a80 <_svfiprintf_r+0x2c>
 8008c26:	ab03      	add	r3, sp, #12
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	462a      	mov	r2, r5
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	4b06      	ldr	r3, [pc, #24]	@ (8008c48 <_svfiprintf_r+0x1f4>)
 8008c30:	a904      	add	r1, sp, #16
 8008c32:	f7fd fbad 	bl	8006390 <_printf_i>
 8008c36:	e7ed      	b.n	8008c14 <_svfiprintf_r+0x1c0>
 8008c38:	080097e4 	.word	0x080097e4
 8008c3c:	080097ea 	.word	0x080097ea
 8008c40:	080097ee 	.word	0x080097ee
 8008c44:	08005e55 	.word	0x08005e55
 8008c48:	0800899f 	.word	0x0800899f

08008c4c <__sflush_r>:
 8008c4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	0716      	lsls	r6, r2, #28
 8008c54:	4605      	mov	r5, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	d454      	bmi.n	8008d04 <__sflush_r+0xb8>
 8008c5a:	684b      	ldr	r3, [r1, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dc02      	bgt.n	8008c66 <__sflush_r+0x1a>
 8008c60:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	dd48      	ble.n	8008cf8 <__sflush_r+0xac>
 8008c66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c68:	2e00      	cmp	r6, #0
 8008c6a:	d045      	beq.n	8008cf8 <__sflush_r+0xac>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c72:	682f      	ldr	r7, [r5, #0]
 8008c74:	6a21      	ldr	r1, [r4, #32]
 8008c76:	602b      	str	r3, [r5, #0]
 8008c78:	d030      	beq.n	8008cdc <__sflush_r+0x90>
 8008c7a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	0759      	lsls	r1, r3, #29
 8008c80:	d505      	bpl.n	8008c8e <__sflush_r+0x42>
 8008c82:	6863      	ldr	r3, [r4, #4]
 8008c84:	1ad2      	subs	r2, r2, r3
 8008c86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c88:	b10b      	cbz	r3, 8008c8e <__sflush_r+0x42>
 8008c8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c8c:	1ad2      	subs	r2, r2, r3
 8008c8e:	2300      	movs	r3, #0
 8008c90:	4628      	mov	r0, r5
 8008c92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c94:	6a21      	ldr	r1, [r4, #32]
 8008c96:	47b0      	blx	r6
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	d106      	bne.n	8008cac <__sflush_r+0x60>
 8008c9e:	6829      	ldr	r1, [r5, #0]
 8008ca0:	291d      	cmp	r1, #29
 8008ca2:	d82b      	bhi.n	8008cfc <__sflush_r+0xb0>
 8008ca4:	4a28      	ldr	r2, [pc, #160]	@ (8008d48 <__sflush_r+0xfc>)
 8008ca6:	40ca      	lsrs	r2, r1
 8008ca8:	07d6      	lsls	r6, r2, #31
 8008caa:	d527      	bpl.n	8008cfc <__sflush_r+0xb0>
 8008cac:	2200      	movs	r2, #0
 8008cae:	6062      	str	r2, [r4, #4]
 8008cb0:	6922      	ldr	r2, [r4, #16]
 8008cb2:	04d9      	lsls	r1, r3, #19
 8008cb4:	6022      	str	r2, [r4, #0]
 8008cb6:	d504      	bpl.n	8008cc2 <__sflush_r+0x76>
 8008cb8:	1c42      	adds	r2, r0, #1
 8008cba:	d101      	bne.n	8008cc0 <__sflush_r+0x74>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	b903      	cbnz	r3, 8008cc2 <__sflush_r+0x76>
 8008cc0:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cc4:	602f      	str	r7, [r5, #0]
 8008cc6:	b1b9      	cbz	r1, 8008cf8 <__sflush_r+0xac>
 8008cc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ccc:	4299      	cmp	r1, r3
 8008cce:	d002      	beq.n	8008cd6 <__sflush_r+0x8a>
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f7fe fd6d 	bl	80077b0 <_free_r>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cda:	e00d      	b.n	8008cf8 <__sflush_r+0xac>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	4628      	mov	r0, r5
 8008ce0:	47b0      	blx	r6
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	1c50      	adds	r0, r2, #1
 8008ce6:	d1c9      	bne.n	8008c7c <__sflush_r+0x30>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0c6      	beq.n	8008c7c <__sflush_r+0x30>
 8008cee:	2b1d      	cmp	r3, #29
 8008cf0:	d001      	beq.n	8008cf6 <__sflush_r+0xaa>
 8008cf2:	2b16      	cmp	r3, #22
 8008cf4:	d11d      	bne.n	8008d32 <__sflush_r+0xe6>
 8008cf6:	602f      	str	r7, [r5, #0]
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e021      	b.n	8008d40 <__sflush_r+0xf4>
 8008cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d00:	b21b      	sxth	r3, r3
 8008d02:	e01a      	b.n	8008d3a <__sflush_r+0xee>
 8008d04:	690f      	ldr	r7, [r1, #16]
 8008d06:	2f00      	cmp	r7, #0
 8008d08:	d0f6      	beq.n	8008cf8 <__sflush_r+0xac>
 8008d0a:	0793      	lsls	r3, r2, #30
 8008d0c:	bf18      	it	ne
 8008d0e:	2300      	movne	r3, #0
 8008d10:	680e      	ldr	r6, [r1, #0]
 8008d12:	bf08      	it	eq
 8008d14:	694b      	ldreq	r3, [r1, #20]
 8008d16:	1bf6      	subs	r6, r6, r7
 8008d18:	600f      	str	r7, [r1, #0]
 8008d1a:	608b      	str	r3, [r1, #8]
 8008d1c:	2e00      	cmp	r6, #0
 8008d1e:	ddeb      	ble.n	8008cf8 <__sflush_r+0xac>
 8008d20:	4633      	mov	r3, r6
 8008d22:	463a      	mov	r2, r7
 8008d24:	4628      	mov	r0, r5
 8008d26:	6a21      	ldr	r1, [r4, #32]
 8008d28:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008d2c:	47e0      	blx	ip
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	dc07      	bgt.n	8008d42 <__sflush_r+0xf6>
 8008d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d42:	4407      	add	r7, r0
 8008d44:	1a36      	subs	r6, r6, r0
 8008d46:	e7e9      	b.n	8008d1c <__sflush_r+0xd0>
 8008d48:	20400001 	.word	0x20400001

08008d4c <_fflush_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	690b      	ldr	r3, [r1, #16]
 8008d50:	4605      	mov	r5, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	b913      	cbnz	r3, 8008d5c <_fflush_r+0x10>
 8008d56:	2500      	movs	r5, #0
 8008d58:	4628      	mov	r0, r5
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	b118      	cbz	r0, 8008d66 <_fflush_r+0x1a>
 8008d5e:	6a03      	ldr	r3, [r0, #32]
 8008d60:	b90b      	cbnz	r3, 8008d66 <_fflush_r+0x1a>
 8008d62:	f7fd fcbf 	bl	80066e4 <__sinit>
 8008d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f3      	beq.n	8008d56 <_fflush_r+0xa>
 8008d6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d70:	07d0      	lsls	r0, r2, #31
 8008d72:	d404      	bmi.n	8008d7e <_fflush_r+0x32>
 8008d74:	0599      	lsls	r1, r3, #22
 8008d76:	d402      	bmi.n	8008d7e <_fflush_r+0x32>
 8008d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d7a:	f7fd fe70 	bl	8006a5e <__retarget_lock_acquire_recursive>
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4621      	mov	r1, r4
 8008d82:	f7ff ff63 	bl	8008c4c <__sflush_r>
 8008d86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d88:	4605      	mov	r5, r0
 8008d8a:	07da      	lsls	r2, r3, #31
 8008d8c:	d4e4      	bmi.n	8008d58 <_fflush_r+0xc>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	059b      	lsls	r3, r3, #22
 8008d92:	d4e1      	bmi.n	8008d58 <_fflush_r+0xc>
 8008d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d96:	f7fd fe63 	bl	8006a60 <__retarget_lock_release_recursive>
 8008d9a:	e7dd      	b.n	8008d58 <_fflush_r+0xc>

08008d9c <fiprintf>:
 8008d9c:	b40e      	push	{r1, r2, r3}
 8008d9e:	b503      	push	{r0, r1, lr}
 8008da0:	4601      	mov	r1, r0
 8008da2:	ab03      	add	r3, sp, #12
 8008da4:	4805      	ldr	r0, [pc, #20]	@ (8008dbc <fiprintf+0x20>)
 8008da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008daa:	6800      	ldr	r0, [r0, #0]
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	f000 f8a1 	bl	8008ef4 <_vfiprintf_r>
 8008db2:	b002      	add	sp, #8
 8008db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db8:	b003      	add	sp, #12
 8008dba:	4770      	bx	lr
 8008dbc:	200001a4 	.word	0x200001a4

08008dc0 <memmove>:
 8008dc0:	4288      	cmp	r0, r1
 8008dc2:	b510      	push	{r4, lr}
 8008dc4:	eb01 0402 	add.w	r4, r1, r2
 8008dc8:	d902      	bls.n	8008dd0 <memmove+0x10>
 8008dca:	4284      	cmp	r4, r0
 8008dcc:	4623      	mov	r3, r4
 8008dce:	d807      	bhi.n	8008de0 <memmove+0x20>
 8008dd0:	1e43      	subs	r3, r0, #1
 8008dd2:	42a1      	cmp	r1, r4
 8008dd4:	d008      	beq.n	8008de8 <memmove+0x28>
 8008dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dde:	e7f8      	b.n	8008dd2 <memmove+0x12>
 8008de0:	4601      	mov	r1, r0
 8008de2:	4402      	add	r2, r0
 8008de4:	428a      	cmp	r2, r1
 8008de6:	d100      	bne.n	8008dea <memmove+0x2a>
 8008de8:	bd10      	pop	{r4, pc}
 8008dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008df2:	e7f7      	b.n	8008de4 <memmove+0x24>

08008df4 <_sbrk_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	2300      	movs	r3, #0
 8008df8:	4d05      	ldr	r5, [pc, #20]	@ (8008e10 <_sbrk_r+0x1c>)
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	602b      	str	r3, [r5, #0]
 8008e00:	f7f9 fa50 	bl	80022a4 <_sbrk>
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	d102      	bne.n	8008e0e <_sbrk_r+0x1a>
 8008e08:	682b      	ldr	r3, [r5, #0]
 8008e0a:	b103      	cbz	r3, 8008e0e <_sbrk_r+0x1a>
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	bd38      	pop	{r3, r4, r5, pc}
 8008e10:	20000948 	.word	0x20000948

08008e14 <abort>:
 8008e14:	2006      	movs	r0, #6
 8008e16:	b508      	push	{r3, lr}
 8008e18:	f000 fa40 	bl	800929c <raise>
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	f7f9 f9cc 	bl	80021ba <_exit>

08008e22 <_calloc_r>:
 8008e22:	b570      	push	{r4, r5, r6, lr}
 8008e24:	fba1 5402 	umull	r5, r4, r1, r2
 8008e28:	b934      	cbnz	r4, 8008e38 <_calloc_r+0x16>
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	f7ff f86c 	bl	8007f08 <_malloc_r>
 8008e30:	4606      	mov	r6, r0
 8008e32:	b928      	cbnz	r0, 8008e40 <_calloc_r+0x1e>
 8008e34:	4630      	mov	r0, r6
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	220c      	movs	r2, #12
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	6002      	str	r2, [r0, #0]
 8008e3e:	e7f9      	b.n	8008e34 <_calloc_r+0x12>
 8008e40:	462a      	mov	r2, r5
 8008e42:	4621      	mov	r1, r4
 8008e44:	f7fd fd1f 	bl	8006886 <memset>
 8008e48:	e7f4      	b.n	8008e34 <_calloc_r+0x12>

08008e4a <_realloc_r>:
 8008e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4e:	4607      	mov	r7, r0
 8008e50:	4614      	mov	r4, r2
 8008e52:	460d      	mov	r5, r1
 8008e54:	b921      	cbnz	r1, 8008e60 <_realloc_r+0x16>
 8008e56:	4611      	mov	r1, r2
 8008e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5c:	f7ff b854 	b.w	8007f08 <_malloc_r>
 8008e60:	b92a      	cbnz	r2, 8008e6e <_realloc_r+0x24>
 8008e62:	f7fe fca5 	bl	80077b0 <_free_r>
 8008e66:	4625      	mov	r5, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e6e:	f000 fa31 	bl	80092d4 <_malloc_usable_size_r>
 8008e72:	4284      	cmp	r4, r0
 8008e74:	4606      	mov	r6, r0
 8008e76:	d802      	bhi.n	8008e7e <_realloc_r+0x34>
 8008e78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e7c:	d8f4      	bhi.n	8008e68 <_realloc_r+0x1e>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4638      	mov	r0, r7
 8008e82:	f7ff f841 	bl	8007f08 <_malloc_r>
 8008e86:	4680      	mov	r8, r0
 8008e88:	b908      	cbnz	r0, 8008e8e <_realloc_r+0x44>
 8008e8a:	4645      	mov	r5, r8
 8008e8c:	e7ec      	b.n	8008e68 <_realloc_r+0x1e>
 8008e8e:	42b4      	cmp	r4, r6
 8008e90:	4622      	mov	r2, r4
 8008e92:	4629      	mov	r1, r5
 8008e94:	bf28      	it	cs
 8008e96:	4632      	movcs	r2, r6
 8008e98:	f7fd fdf9 	bl	8006a8e <memcpy>
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f7fe fc86 	bl	80077b0 <_free_r>
 8008ea4:	e7f1      	b.n	8008e8a <_realloc_r+0x40>

08008ea6 <__sfputc_r>:
 8008ea6:	6893      	ldr	r3, [r2, #8]
 8008ea8:	b410      	push	{r4}
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	6093      	str	r3, [r2, #8]
 8008eb0:	da07      	bge.n	8008ec2 <__sfputc_r+0x1c>
 8008eb2:	6994      	ldr	r4, [r2, #24]
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	db01      	blt.n	8008ebc <__sfputc_r+0x16>
 8008eb8:	290a      	cmp	r1, #10
 8008eba:	d102      	bne.n	8008ec2 <__sfputc_r+0x1c>
 8008ebc:	bc10      	pop	{r4}
 8008ebe:	f000 b931 	b.w	8009124 <__swbuf_r>
 8008ec2:	6813      	ldr	r3, [r2, #0]
 8008ec4:	1c58      	adds	r0, r3, #1
 8008ec6:	6010      	str	r0, [r2, #0]
 8008ec8:	7019      	strb	r1, [r3, #0]
 8008eca:	4608      	mov	r0, r1
 8008ecc:	bc10      	pop	{r4}
 8008ece:	4770      	bx	lr

08008ed0 <__sfputs_r>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	4614      	mov	r4, r2
 8008ed8:	18d5      	adds	r5, r2, r3
 8008eda:	42ac      	cmp	r4, r5
 8008edc:	d101      	bne.n	8008ee2 <__sfputs_r+0x12>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e007      	b.n	8008ef2 <__sfputs_r+0x22>
 8008ee2:	463a      	mov	r2, r7
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eea:	f7ff ffdc 	bl	8008ea6 <__sfputc_r>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d1f3      	bne.n	8008eda <__sfputs_r+0xa>
 8008ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ef4 <_vfiprintf_r>:
 8008ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	460d      	mov	r5, r1
 8008efa:	4614      	mov	r4, r2
 8008efc:	4698      	mov	r8, r3
 8008efe:	4606      	mov	r6, r0
 8008f00:	b09d      	sub	sp, #116	@ 0x74
 8008f02:	b118      	cbz	r0, 8008f0c <_vfiprintf_r+0x18>
 8008f04:	6a03      	ldr	r3, [r0, #32]
 8008f06:	b90b      	cbnz	r3, 8008f0c <_vfiprintf_r+0x18>
 8008f08:	f7fd fbec 	bl	80066e4 <__sinit>
 8008f0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f0e:	07d9      	lsls	r1, r3, #31
 8008f10:	d405      	bmi.n	8008f1e <_vfiprintf_r+0x2a>
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	059a      	lsls	r2, r3, #22
 8008f16:	d402      	bmi.n	8008f1e <_vfiprintf_r+0x2a>
 8008f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f1a:	f7fd fda0 	bl	8006a5e <__retarget_lock_acquire_recursive>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	071b      	lsls	r3, r3, #28
 8008f22:	d501      	bpl.n	8008f28 <_vfiprintf_r+0x34>
 8008f24:	692b      	ldr	r3, [r5, #16]
 8008f26:	b99b      	cbnz	r3, 8008f50 <_vfiprintf_r+0x5c>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f000 f938 	bl	80091a0 <__swsetup_r>
 8008f30:	b170      	cbz	r0, 8008f50 <_vfiprintf_r+0x5c>
 8008f32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f34:	07dc      	lsls	r4, r3, #31
 8008f36:	d504      	bpl.n	8008f42 <_vfiprintf_r+0x4e>
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	b01d      	add	sp, #116	@ 0x74
 8008f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f42:	89ab      	ldrh	r3, [r5, #12]
 8008f44:	0598      	lsls	r0, r3, #22
 8008f46:	d4f7      	bmi.n	8008f38 <_vfiprintf_r+0x44>
 8008f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f4a:	f7fd fd89 	bl	8006a60 <__retarget_lock_release_recursive>
 8008f4e:	e7f3      	b.n	8008f38 <_vfiprintf_r+0x44>
 8008f50:	2300      	movs	r3, #0
 8008f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f54:	2320      	movs	r3, #32
 8008f56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f5a:	2330      	movs	r3, #48	@ 0x30
 8008f5c:	f04f 0901 	mov.w	r9, #1
 8008f60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f64:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009110 <_vfiprintf_r+0x21c>
 8008f68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f6c:	4623      	mov	r3, r4
 8008f6e:	469a      	mov	sl, r3
 8008f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f74:	b10a      	cbz	r2, 8008f7a <_vfiprintf_r+0x86>
 8008f76:	2a25      	cmp	r2, #37	@ 0x25
 8008f78:	d1f9      	bne.n	8008f6e <_vfiprintf_r+0x7a>
 8008f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f7e:	d00b      	beq.n	8008f98 <_vfiprintf_r+0xa4>
 8008f80:	465b      	mov	r3, fp
 8008f82:	4622      	mov	r2, r4
 8008f84:	4629      	mov	r1, r5
 8008f86:	4630      	mov	r0, r6
 8008f88:	f7ff ffa2 	bl	8008ed0 <__sfputs_r>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f000 80a7 	beq.w	80090e0 <_vfiprintf_r+0x1ec>
 8008f92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f94:	445a      	add	r2, fp
 8008f96:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f98:	f89a 3000 	ldrb.w	r3, [sl]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 809f 	beq.w	80090e0 <_vfiprintf_r+0x1ec>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fac:	f10a 0a01 	add.w	sl, sl, #1
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	9307      	str	r3, [sp, #28]
 8008fb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fba:	4654      	mov	r4, sl
 8008fbc:	2205      	movs	r2, #5
 8008fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc2:	4853      	ldr	r0, [pc, #332]	@ (8009110 <_vfiprintf_r+0x21c>)
 8008fc4:	f7fd fd55 	bl	8006a72 <memchr>
 8008fc8:	9a04      	ldr	r2, [sp, #16]
 8008fca:	b9d8      	cbnz	r0, 8009004 <_vfiprintf_r+0x110>
 8008fcc:	06d1      	lsls	r1, r2, #27
 8008fce:	bf44      	itt	mi
 8008fd0:	2320      	movmi	r3, #32
 8008fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fd6:	0713      	lsls	r3, r2, #28
 8008fd8:	bf44      	itt	mi
 8008fda:	232b      	movmi	r3, #43	@ 0x2b
 8008fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fe6:	d015      	beq.n	8009014 <_vfiprintf_r+0x120>
 8008fe8:	4654      	mov	r4, sl
 8008fea:	2000      	movs	r0, #0
 8008fec:	f04f 0c0a 	mov.w	ip, #10
 8008ff0:	9a07      	ldr	r2, [sp, #28]
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff8:	3b30      	subs	r3, #48	@ 0x30
 8008ffa:	2b09      	cmp	r3, #9
 8008ffc:	d94b      	bls.n	8009096 <_vfiprintf_r+0x1a2>
 8008ffe:	b1b0      	cbz	r0, 800902e <_vfiprintf_r+0x13a>
 8009000:	9207      	str	r2, [sp, #28]
 8009002:	e014      	b.n	800902e <_vfiprintf_r+0x13a>
 8009004:	eba0 0308 	sub.w	r3, r0, r8
 8009008:	fa09 f303 	lsl.w	r3, r9, r3
 800900c:	4313      	orrs	r3, r2
 800900e:	46a2      	mov	sl, r4
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	e7d2      	b.n	8008fba <_vfiprintf_r+0xc6>
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	1d19      	adds	r1, r3, #4
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	9103      	str	r1, [sp, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	bfbb      	ittet	lt
 8009020:	425b      	neglt	r3, r3
 8009022:	f042 0202 	orrlt.w	r2, r2, #2
 8009026:	9307      	strge	r3, [sp, #28]
 8009028:	9307      	strlt	r3, [sp, #28]
 800902a:	bfb8      	it	lt
 800902c:	9204      	strlt	r2, [sp, #16]
 800902e:	7823      	ldrb	r3, [r4, #0]
 8009030:	2b2e      	cmp	r3, #46	@ 0x2e
 8009032:	d10a      	bne.n	800904a <_vfiprintf_r+0x156>
 8009034:	7863      	ldrb	r3, [r4, #1]
 8009036:	2b2a      	cmp	r3, #42	@ 0x2a
 8009038:	d132      	bne.n	80090a0 <_vfiprintf_r+0x1ac>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	3402      	adds	r4, #2
 800903e:	1d1a      	adds	r2, r3, #4
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	9203      	str	r2, [sp, #12]
 8009044:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009048:	9305      	str	r3, [sp, #20]
 800904a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009114 <_vfiprintf_r+0x220>
 800904e:	2203      	movs	r2, #3
 8009050:	4650      	mov	r0, sl
 8009052:	7821      	ldrb	r1, [r4, #0]
 8009054:	f7fd fd0d 	bl	8006a72 <memchr>
 8009058:	b138      	cbz	r0, 800906a <_vfiprintf_r+0x176>
 800905a:	2240      	movs	r2, #64	@ 0x40
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	eba0 000a 	sub.w	r0, r0, sl
 8009062:	4082      	lsls	r2, r0
 8009064:	4313      	orrs	r3, r2
 8009066:	3401      	adds	r4, #1
 8009068:	9304      	str	r3, [sp, #16]
 800906a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906e:	2206      	movs	r2, #6
 8009070:	4829      	ldr	r0, [pc, #164]	@ (8009118 <_vfiprintf_r+0x224>)
 8009072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009076:	f7fd fcfc 	bl	8006a72 <memchr>
 800907a:	2800      	cmp	r0, #0
 800907c:	d03f      	beq.n	80090fe <_vfiprintf_r+0x20a>
 800907e:	4b27      	ldr	r3, [pc, #156]	@ (800911c <_vfiprintf_r+0x228>)
 8009080:	bb1b      	cbnz	r3, 80090ca <_vfiprintf_r+0x1d6>
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	3307      	adds	r3, #7
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	3308      	adds	r3, #8
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009090:	443b      	add	r3, r7
 8009092:	9309      	str	r3, [sp, #36]	@ 0x24
 8009094:	e76a      	b.n	8008f6c <_vfiprintf_r+0x78>
 8009096:	460c      	mov	r4, r1
 8009098:	2001      	movs	r0, #1
 800909a:	fb0c 3202 	mla	r2, ip, r2, r3
 800909e:	e7a8      	b.n	8008ff2 <_vfiprintf_r+0xfe>
 80090a0:	2300      	movs	r3, #0
 80090a2:	f04f 0c0a 	mov.w	ip, #10
 80090a6:	4619      	mov	r1, r3
 80090a8:	3401      	adds	r4, #1
 80090aa:	9305      	str	r3, [sp, #20]
 80090ac:	4620      	mov	r0, r4
 80090ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b2:	3a30      	subs	r2, #48	@ 0x30
 80090b4:	2a09      	cmp	r2, #9
 80090b6:	d903      	bls.n	80090c0 <_vfiprintf_r+0x1cc>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d0c6      	beq.n	800904a <_vfiprintf_r+0x156>
 80090bc:	9105      	str	r1, [sp, #20]
 80090be:	e7c4      	b.n	800904a <_vfiprintf_r+0x156>
 80090c0:	4604      	mov	r4, r0
 80090c2:	2301      	movs	r3, #1
 80090c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c8:	e7f0      	b.n	80090ac <_vfiprintf_r+0x1b8>
 80090ca:	ab03      	add	r3, sp, #12
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	462a      	mov	r2, r5
 80090d0:	4630      	mov	r0, r6
 80090d2:	4b13      	ldr	r3, [pc, #76]	@ (8009120 <_vfiprintf_r+0x22c>)
 80090d4:	a904      	add	r1, sp, #16
 80090d6:	f7fc febd 	bl	8005e54 <_printf_float>
 80090da:	4607      	mov	r7, r0
 80090dc:	1c78      	adds	r0, r7, #1
 80090de:	d1d6      	bne.n	800908e <_vfiprintf_r+0x19a>
 80090e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090e2:	07d9      	lsls	r1, r3, #31
 80090e4:	d405      	bmi.n	80090f2 <_vfiprintf_r+0x1fe>
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	059a      	lsls	r2, r3, #22
 80090ea:	d402      	bmi.n	80090f2 <_vfiprintf_r+0x1fe>
 80090ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ee:	f7fd fcb7 	bl	8006a60 <__retarget_lock_release_recursive>
 80090f2:	89ab      	ldrh	r3, [r5, #12]
 80090f4:	065b      	lsls	r3, r3, #25
 80090f6:	f53f af1f 	bmi.w	8008f38 <_vfiprintf_r+0x44>
 80090fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090fc:	e71e      	b.n	8008f3c <_vfiprintf_r+0x48>
 80090fe:	ab03      	add	r3, sp, #12
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	462a      	mov	r2, r5
 8009104:	4630      	mov	r0, r6
 8009106:	4b06      	ldr	r3, [pc, #24]	@ (8009120 <_vfiprintf_r+0x22c>)
 8009108:	a904      	add	r1, sp, #16
 800910a:	f7fd f941 	bl	8006390 <_printf_i>
 800910e:	e7e4      	b.n	80090da <_vfiprintf_r+0x1e6>
 8009110:	080097e4 	.word	0x080097e4
 8009114:	080097ea 	.word	0x080097ea
 8009118:	080097ee 	.word	0x080097ee
 800911c:	08005e55 	.word	0x08005e55
 8009120:	08008ed1 	.word	0x08008ed1

08009124 <__swbuf_r>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	460e      	mov	r6, r1
 8009128:	4614      	mov	r4, r2
 800912a:	4605      	mov	r5, r0
 800912c:	b118      	cbz	r0, 8009136 <__swbuf_r+0x12>
 800912e:	6a03      	ldr	r3, [r0, #32]
 8009130:	b90b      	cbnz	r3, 8009136 <__swbuf_r+0x12>
 8009132:	f7fd fad7 	bl	80066e4 <__sinit>
 8009136:	69a3      	ldr	r3, [r4, #24]
 8009138:	60a3      	str	r3, [r4, #8]
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	071a      	lsls	r2, r3, #28
 800913e:	d501      	bpl.n	8009144 <__swbuf_r+0x20>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	b943      	cbnz	r3, 8009156 <__swbuf_r+0x32>
 8009144:	4621      	mov	r1, r4
 8009146:	4628      	mov	r0, r5
 8009148:	f000 f82a 	bl	80091a0 <__swsetup_r>
 800914c:	b118      	cbz	r0, 8009156 <__swbuf_r+0x32>
 800914e:	f04f 37ff 	mov.w	r7, #4294967295
 8009152:	4638      	mov	r0, r7
 8009154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	6922      	ldr	r2, [r4, #16]
 800915a:	b2f6      	uxtb	r6, r6
 800915c:	1a98      	subs	r0, r3, r2
 800915e:	6963      	ldr	r3, [r4, #20]
 8009160:	4637      	mov	r7, r6
 8009162:	4283      	cmp	r3, r0
 8009164:	dc05      	bgt.n	8009172 <__swbuf_r+0x4e>
 8009166:	4621      	mov	r1, r4
 8009168:	4628      	mov	r0, r5
 800916a:	f7ff fdef 	bl	8008d4c <_fflush_r>
 800916e:	2800      	cmp	r0, #0
 8009170:	d1ed      	bne.n	800914e <__swbuf_r+0x2a>
 8009172:	68a3      	ldr	r3, [r4, #8]
 8009174:	3b01      	subs	r3, #1
 8009176:	60a3      	str	r3, [r4, #8]
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	6022      	str	r2, [r4, #0]
 800917e:	701e      	strb	r6, [r3, #0]
 8009180:	6962      	ldr	r2, [r4, #20]
 8009182:	1c43      	adds	r3, r0, #1
 8009184:	429a      	cmp	r2, r3
 8009186:	d004      	beq.n	8009192 <__swbuf_r+0x6e>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	07db      	lsls	r3, r3, #31
 800918c:	d5e1      	bpl.n	8009152 <__swbuf_r+0x2e>
 800918e:	2e0a      	cmp	r6, #10
 8009190:	d1df      	bne.n	8009152 <__swbuf_r+0x2e>
 8009192:	4621      	mov	r1, r4
 8009194:	4628      	mov	r0, r5
 8009196:	f7ff fdd9 	bl	8008d4c <_fflush_r>
 800919a:	2800      	cmp	r0, #0
 800919c:	d0d9      	beq.n	8009152 <__swbuf_r+0x2e>
 800919e:	e7d6      	b.n	800914e <__swbuf_r+0x2a>

080091a0 <__swsetup_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4b29      	ldr	r3, [pc, #164]	@ (8009248 <__swsetup_r+0xa8>)
 80091a4:	4605      	mov	r5, r0
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	460c      	mov	r4, r1
 80091aa:	b118      	cbz	r0, 80091b4 <__swsetup_r+0x14>
 80091ac:	6a03      	ldr	r3, [r0, #32]
 80091ae:	b90b      	cbnz	r3, 80091b4 <__swsetup_r+0x14>
 80091b0:	f7fd fa98 	bl	80066e4 <__sinit>
 80091b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b8:	0719      	lsls	r1, r3, #28
 80091ba:	d422      	bmi.n	8009202 <__swsetup_r+0x62>
 80091bc:	06da      	lsls	r2, r3, #27
 80091be:	d407      	bmi.n	80091d0 <__swsetup_r+0x30>
 80091c0:	2209      	movs	r2, #9
 80091c2:	602a      	str	r2, [r5, #0]
 80091c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	e033      	b.n	8009238 <__swsetup_r+0x98>
 80091d0:	0758      	lsls	r0, r3, #29
 80091d2:	d512      	bpl.n	80091fa <__swsetup_r+0x5a>
 80091d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091d6:	b141      	cbz	r1, 80091ea <__swsetup_r+0x4a>
 80091d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091dc:	4299      	cmp	r1, r3
 80091de:	d002      	beq.n	80091e6 <__swsetup_r+0x46>
 80091e0:	4628      	mov	r0, r5
 80091e2:	f7fe fae5 	bl	80077b0 <_free_r>
 80091e6:	2300      	movs	r3, #0
 80091e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	2300      	movs	r3, #0
 80091f4:	6063      	str	r3, [r4, #4]
 80091f6:	6923      	ldr	r3, [r4, #16]
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f043 0308 	orr.w	r3, r3, #8
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	b94b      	cbnz	r3, 800921a <__swsetup_r+0x7a>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800920c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009210:	d003      	beq.n	800921a <__swsetup_r+0x7a>
 8009212:	4621      	mov	r1, r4
 8009214:	4628      	mov	r0, r5
 8009216:	f000 f88a 	bl	800932e <__smakebuf_r>
 800921a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800921e:	f013 0201 	ands.w	r2, r3, #1
 8009222:	d00a      	beq.n	800923a <__swsetup_r+0x9a>
 8009224:	2200      	movs	r2, #0
 8009226:	60a2      	str	r2, [r4, #8]
 8009228:	6962      	ldr	r2, [r4, #20]
 800922a:	4252      	negs	r2, r2
 800922c:	61a2      	str	r2, [r4, #24]
 800922e:	6922      	ldr	r2, [r4, #16]
 8009230:	b942      	cbnz	r2, 8009244 <__swsetup_r+0xa4>
 8009232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009236:	d1c5      	bne.n	80091c4 <__swsetup_r+0x24>
 8009238:	bd38      	pop	{r3, r4, r5, pc}
 800923a:	0799      	lsls	r1, r3, #30
 800923c:	bf58      	it	pl
 800923e:	6962      	ldrpl	r2, [r4, #20]
 8009240:	60a2      	str	r2, [r4, #8]
 8009242:	e7f4      	b.n	800922e <__swsetup_r+0x8e>
 8009244:	2000      	movs	r0, #0
 8009246:	e7f7      	b.n	8009238 <__swsetup_r+0x98>
 8009248:	200001a4 	.word	0x200001a4

0800924c <_raise_r>:
 800924c:	291f      	cmp	r1, #31
 800924e:	b538      	push	{r3, r4, r5, lr}
 8009250:	4605      	mov	r5, r0
 8009252:	460c      	mov	r4, r1
 8009254:	d904      	bls.n	8009260 <_raise_r+0x14>
 8009256:	2316      	movs	r3, #22
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	f04f 30ff 	mov.w	r0, #4294967295
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009262:	b112      	cbz	r2, 800926a <_raise_r+0x1e>
 8009264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009268:	b94b      	cbnz	r3, 800927e <_raise_r+0x32>
 800926a:	4628      	mov	r0, r5
 800926c:	f000 f830 	bl	80092d0 <_getpid_r>
 8009270:	4622      	mov	r2, r4
 8009272:	4601      	mov	r1, r0
 8009274:	4628      	mov	r0, r5
 8009276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800927a:	f000 b817 	b.w	80092ac <_kill_r>
 800927e:	2b01      	cmp	r3, #1
 8009280:	d00a      	beq.n	8009298 <_raise_r+0x4c>
 8009282:	1c59      	adds	r1, r3, #1
 8009284:	d103      	bne.n	800928e <_raise_r+0x42>
 8009286:	2316      	movs	r3, #22
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	2001      	movs	r0, #1
 800928c:	e7e7      	b.n	800925e <_raise_r+0x12>
 800928e:	2100      	movs	r1, #0
 8009290:	4620      	mov	r0, r4
 8009292:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009296:	4798      	blx	r3
 8009298:	2000      	movs	r0, #0
 800929a:	e7e0      	b.n	800925e <_raise_r+0x12>

0800929c <raise>:
 800929c:	4b02      	ldr	r3, [pc, #8]	@ (80092a8 <raise+0xc>)
 800929e:	4601      	mov	r1, r0
 80092a0:	6818      	ldr	r0, [r3, #0]
 80092a2:	f7ff bfd3 	b.w	800924c <_raise_r>
 80092a6:	bf00      	nop
 80092a8:	200001a4 	.word	0x200001a4

080092ac <_kill_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	2300      	movs	r3, #0
 80092b0:	4d06      	ldr	r5, [pc, #24]	@ (80092cc <_kill_r+0x20>)
 80092b2:	4604      	mov	r4, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	4611      	mov	r1, r2
 80092b8:	602b      	str	r3, [r5, #0]
 80092ba:	f7f8 ff6e 	bl	800219a <_kill>
 80092be:	1c43      	adds	r3, r0, #1
 80092c0:	d102      	bne.n	80092c8 <_kill_r+0x1c>
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	b103      	cbz	r3, 80092c8 <_kill_r+0x1c>
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	bd38      	pop	{r3, r4, r5, pc}
 80092ca:	bf00      	nop
 80092cc:	20000948 	.word	0x20000948

080092d0 <_getpid_r>:
 80092d0:	f7f8 bf5c 	b.w	800218c <_getpid>

080092d4 <_malloc_usable_size_r>:
 80092d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d8:	1f18      	subs	r0, r3, #4
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bfbc      	itt	lt
 80092de:	580b      	ldrlt	r3, [r1, r0]
 80092e0:	18c0      	addlt	r0, r0, r3
 80092e2:	4770      	bx	lr

080092e4 <__swhatbuf_r>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	460c      	mov	r4, r1
 80092e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ec:	4615      	mov	r5, r2
 80092ee:	2900      	cmp	r1, #0
 80092f0:	461e      	mov	r6, r3
 80092f2:	b096      	sub	sp, #88	@ 0x58
 80092f4:	da0c      	bge.n	8009310 <__swhatbuf_r+0x2c>
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	2100      	movs	r1, #0
 80092fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092fe:	bf14      	ite	ne
 8009300:	2340      	movne	r3, #64	@ 0x40
 8009302:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009306:	2000      	movs	r0, #0
 8009308:	6031      	str	r1, [r6, #0]
 800930a:	602b      	str	r3, [r5, #0]
 800930c:	b016      	add	sp, #88	@ 0x58
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	466a      	mov	r2, sp
 8009312:	f000 f849 	bl	80093a8 <_fstat_r>
 8009316:	2800      	cmp	r0, #0
 8009318:	dbed      	blt.n	80092f6 <__swhatbuf_r+0x12>
 800931a:	9901      	ldr	r1, [sp, #4]
 800931c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009320:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009324:	4259      	negs	r1, r3
 8009326:	4159      	adcs	r1, r3
 8009328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800932c:	e7eb      	b.n	8009306 <__swhatbuf_r+0x22>

0800932e <__smakebuf_r>:
 800932e:	898b      	ldrh	r3, [r1, #12]
 8009330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009332:	079d      	lsls	r5, r3, #30
 8009334:	4606      	mov	r6, r0
 8009336:	460c      	mov	r4, r1
 8009338:	d507      	bpl.n	800934a <__smakebuf_r+0x1c>
 800933a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	6123      	str	r3, [r4, #16]
 8009342:	2301      	movs	r3, #1
 8009344:	6163      	str	r3, [r4, #20]
 8009346:	b003      	add	sp, #12
 8009348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800934a:	466a      	mov	r2, sp
 800934c:	ab01      	add	r3, sp, #4
 800934e:	f7ff ffc9 	bl	80092e4 <__swhatbuf_r>
 8009352:	9f00      	ldr	r7, [sp, #0]
 8009354:	4605      	mov	r5, r0
 8009356:	4639      	mov	r1, r7
 8009358:	4630      	mov	r0, r6
 800935a:	f7fe fdd5 	bl	8007f08 <_malloc_r>
 800935e:	b948      	cbnz	r0, 8009374 <__smakebuf_r+0x46>
 8009360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009364:	059a      	lsls	r2, r3, #22
 8009366:	d4ee      	bmi.n	8009346 <__smakebuf_r+0x18>
 8009368:	f023 0303 	bic.w	r3, r3, #3
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	e7e2      	b.n	800933a <__smakebuf_r+0xc>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800937a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	9b01      	ldr	r3, [sp, #4]
 8009382:	6020      	str	r0, [r4, #0]
 8009384:	b15b      	cbz	r3, 800939e <__smakebuf_r+0x70>
 8009386:	4630      	mov	r0, r6
 8009388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800938c:	f000 f81e 	bl	80093cc <_isatty_r>
 8009390:	b128      	cbz	r0, 800939e <__smakebuf_r+0x70>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f023 0303 	bic.w	r3, r3, #3
 8009398:	f043 0301 	orr.w	r3, r3, #1
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	431d      	orrs	r5, r3
 80093a2:	81a5      	strh	r5, [r4, #12]
 80093a4:	e7cf      	b.n	8009346 <__smakebuf_r+0x18>
	...

080093a8 <_fstat_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	2300      	movs	r3, #0
 80093ac:	4d06      	ldr	r5, [pc, #24]	@ (80093c8 <_fstat_r+0x20>)
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	4611      	mov	r1, r2
 80093b4:	602b      	str	r3, [r5, #0]
 80093b6:	f7f8 ff4f 	bl	8002258 <_fstat>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	d102      	bne.n	80093c4 <_fstat_r+0x1c>
 80093be:	682b      	ldr	r3, [r5, #0]
 80093c0:	b103      	cbz	r3, 80093c4 <_fstat_r+0x1c>
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	bd38      	pop	{r3, r4, r5, pc}
 80093c6:	bf00      	nop
 80093c8:	20000948 	.word	0x20000948

080093cc <_isatty_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	2300      	movs	r3, #0
 80093d0:	4d05      	ldr	r5, [pc, #20]	@ (80093e8 <_isatty_r+0x1c>)
 80093d2:	4604      	mov	r4, r0
 80093d4:	4608      	mov	r0, r1
 80093d6:	602b      	str	r3, [r5, #0]
 80093d8:	f7f8 ff4d 	bl	8002276 <_isatty>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_isatty_r+0x1a>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_isatty_r+0x1a>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	20000948 	.word	0x20000948

080093ec <_init>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	bf00      	nop
 80093f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f2:	bc08      	pop	{r3}
 80093f4:	469e      	mov	lr, r3
 80093f6:	4770      	bx	lr

080093f8 <_fini>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	bf00      	nop
 80093fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fe:	bc08      	pop	{r3}
 8009400:	469e      	mov	lr, r3
 8009402:	4770      	bx	lr
