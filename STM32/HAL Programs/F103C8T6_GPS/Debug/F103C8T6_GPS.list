
F103C8T6_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080078c0  080078c0  000088c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007db4  08007db4  000091f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dbc  08007dbc  000091f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dbc  08007dbc  00008dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007dc0  08007dc0  00008dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08007dc4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001f4  08007fb8  000091f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08007fb8  00009578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a53  00000000  00000000  0000921d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001831  00000000  00000000  00010c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  000124a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000598  00000000  00000000  00012c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a24  00000000  00000000  000131a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e87  00000000  00000000  0002abc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f26  00000000  00000000  00033a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003260  00000000  00000000  000b79b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000bac14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	080078a4 	.word	0x080078a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	080078a4 	.word	0x080078a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001160 <HAL_UART_RxCpltCallback+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d134      	bne.n	8001158 <HAL_UART_RxCpltCallback+0x7c>
		// Store received byte in gps_line buffer
		if (gps_c == '\n' || gps_c == '\r') {
 80010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <HAL_UART_RxCpltCallback+0x88>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d003      	beq.n	80010fe <HAL_UART_RxCpltCallback+0x22>
 80010f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <HAL_UART_RxCpltCallback+0x88>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b0d      	cmp	r3, #13
 80010fc:	d112      	bne.n	8001124 <HAL_UART_RxCpltCallback+0x48>
			if (gps_idx > 0) {
 80010fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <HAL_UART_RxCpltCallback+0x8c>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d022      	beq.n	800114e <HAL_UART_RxCpltCallback+0x72>
				gps_line[gps_idx] = '\0';
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_UART_RxCpltCallback+0x8c>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <HAL_UART_RxCpltCallback+0x90>)
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]
				gps_idx = 0;
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <HAL_UART_RxCpltCallback+0x8c>)
 8001118:	2200      	movs	r2, #0
 800111a:	801a      	strh	r2, [r3, #0]
				gps_ready = 1;
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_UART_RxCpltCallback+0x94>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
			if (gps_idx > 0) {
 8001122:	e014      	b.n	800114e <HAL_UART_RxCpltCallback+0x72>
			}
		} else {
			if (gps_idx < GPS_LINE_MAX - 1)
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_UART_RxCpltCallback+0x8c>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	2b7e      	cmp	r3, #126	@ 0x7e
 800112c:	d80c      	bhi.n	8001148 <HAL_UART_RxCpltCallback+0x6c>
				gps_line[gps_idx++] = gps_c;
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_UART_RxCpltCallback+0x8c>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	b291      	uxth	r1, r2
 8001138:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <HAL_UART_RxCpltCallback+0x8c>)
 800113a:	8011      	strh	r1, [r2, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_UART_RxCpltCallback+0x88>)
 8001140:	7819      	ldrb	r1, [r3, #0]
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <HAL_UART_RxCpltCallback+0x90>)
 8001144:	5499      	strb	r1, [r3, r2]
 8001146:	e002      	b.n	800114e <HAL_UART_RxCpltCallback+0x72>
			else
				gps_idx = 0; // overflow
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <HAL_UART_RxCpltCallback+0x8c>)
 800114a:	2200      	movs	r2, #0
 800114c:	801a      	strh	r2, [r3, #0]
		}

		// Restart interrupt for next byte
		HAL_UART_Receive_IT(&huart2, (uint8_t*) &gps_c, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	4904      	ldr	r1, [pc, #16]	@ (8001164 <HAL_UART_RxCpltCallback+0x88>)
 8001152:	4808      	ldr	r0, [pc, #32]	@ (8001174 <HAL_UART_RxCpltCallback+0x98>)
 8001154:	f001 fcaf 	bl	8002ab6 <HAL_UART_Receive_IT>
	}
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40004400 	.word	0x40004400
 8001164:	20000323 	.word	0x20000323
 8001168:	20000320 	.word	0x20000320
 800116c:	200002a0 	.word	0x200002a0
 8001170:	20000322 	.word	0x20000322
 8001174:	20000258 	.word	0x20000258

08001178 <parse_GPRMC>:
void parse_GPRMC(void) {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b0bb      	sub	sp, #236	@ 0xec
 800117c:	af04      	add	r7, sp, #16
	if (strstr((char*) gps_line, "$GPRMC")) {
 800117e:	4970      	ldr	r1, [pc, #448]	@ (8001340 <parse_GPRMC+0x1c8>)
 8001180:	4870      	ldr	r0, [pc, #448]	@ (8001344 <parse_GPRMC+0x1cc>)
 8001182:	f003 fe3d 	bl	8004e00 <strstr>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80d5 	beq.w	8001338 <parse_GPRMC+0x1c0>
		char *fields[12] = { 0 };
 800118e:	463b      	mov	r3, r7
 8001190:	2230      	movs	r2, #48	@ 0x30
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fdbc 	bl	8004d12 <memset>
		int j = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		char buf[128];
		strcpy(buf, (char*) gps_line);
 80011a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a4:	4967      	ldr	r1, [pc, #412]	@ (8001344 <parse_GPRMC+0x1cc>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 feb7 	bl	8004f1a <strcpy>

		char *token = strtok(buf, ",");
 80011ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b0:	4965      	ldr	r1, [pc, #404]	@ (8001348 <parse_GPRMC+0x1d0>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fdc8 	bl	8004d48 <strtok>
 80011b8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		while (token && j < 12) {
 80011bc:	e011      	b.n	80011e2 <parse_GPRMC+0x6a>
			fields[j++] = token;
 80011be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	33d8      	adds	r3, #216	@ 0xd8
 80011cc:	443b      	add	r3, r7
 80011ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80011d2:	f843 2cd8 	str.w	r2, [r3, #-216]
			token = strtok(NULL, ",");
 80011d6:	495c      	ldr	r1, [pc, #368]	@ (8001348 <parse_GPRMC+0x1d0>)
 80011d8:	2000      	movs	r0, #0
 80011da:	f003 fdb5 	bl	8004d48 <strtok>
 80011de:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		while (token && j < 12) {
 80011e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <parse_GPRMC+0x7a>
 80011ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011ee:	2b0b      	cmp	r3, #11
 80011f0:	dde5      	ble.n	80011be <parse_GPRMC+0x46>
		}

		if (j >= 6 && fields[3] && fields[5]) {
 80011f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	f340 809e 	ble.w	8001338 <parse_GPRMC+0x1c0>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 809a 	beq.w	8001338 <parse_GPRMC+0x1c0>
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8096 	beq.w	8001338 <parse_GPRMC+0x1c0>
			float raw_lat = atof(fields[3]);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	f002 f9e0 	bl	80035d4 <atof>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fc54 	bl	8000ac8 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			float raw_lon = atof(fields[5]);
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	4618      	mov	r0, r3
 800122a:	f002 f9d3 	bl	80035d4 <atof>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc47 	bl	8000ac8 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

			int lat_deg = (int) (raw_lat / 100);
 8001240:	4942      	ldr	r1, [pc, #264]	@ (800134c <parse_GPRMC+0x1d4>)
 8001242:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001246:	f7ff fe51 	bl	8000eec <__aeabi_fdiv>
 800124a:	4603      	mov	r3, r0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fee9 	bl	8001024 <__aeabi_f2iz>
 8001252:	4603      	mov	r3, r0
 8001254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			int lon_deg = (int) (raw_lon / 100);
 8001258:	493c      	ldr	r1, [pc, #240]	@ (800134c <parse_GPRMC+0x1d4>)
 800125a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800125e:	f7ff fe45 	bl	8000eec <__aeabi_fdiv>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fedd 	bl	8001024 <__aeabi_f2iz>
 800126a:	4603      	mov	r3, r0
 800126c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			float lat_min = raw_lat - lat_deg * 100;
 8001270:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001274:	2264      	movs	r2, #100	@ 0x64
 8001276:	fb02 f303 	mul.w	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fd2e 	bl	8000cdc <__aeabi_i2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4619      	mov	r1, r3
 8001284:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001288:	f7ff fc72 	bl	8000b70 <__aeabi_fsub>
 800128c:	4603      	mov	r3, r0
 800128e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			float lon_min = raw_lon - lon_deg * 100;
 8001292:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001296:	2264      	movs	r2, #100	@ 0x64
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fd1d 	bl	8000cdc <__aeabi_i2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4619      	mov	r1, r3
 80012a6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80012aa:	f7ff fc61 	bl	8000b70 <__aeabi_fsub>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

			float lat_dec = lat_deg + lat_min / 60.0f;
 80012b4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80012b8:	f7ff fd10 	bl	8000cdc <__aeabi_i2f>
 80012bc:	4604      	mov	r4, r0
 80012be:	4924      	ldr	r1, [pc, #144]	@ (8001350 <parse_GPRMC+0x1d8>)
 80012c0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80012c4:	f7ff fe12 	bl	8000eec <__aeabi_fdiv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4620      	mov	r0, r4
 80012ce:	f7ff fc51 	bl	8000b74 <__addsf3>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			float lon_dec = lon_deg + lon_min / 60.0f;
 80012d8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80012dc:	f7ff fcfe 	bl	8000cdc <__aeabi_i2f>
 80012e0:	4604      	mov	r4, r0
 80012e2:	491b      	ldr	r1, [pc, #108]	@ (8001350 <parse_GPRMC+0x1d8>)
 80012e4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80012e8:	f7ff fe00 	bl	8000eec <__aeabi_fdiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4619      	mov	r1, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f7ff fc3f 	bl	8000b74 <__addsf3>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

			snprintf(latitude, sizeof(latitude), "%.5f%s", lat_dec, fields[4]);
 80012fc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001300:	f7ff f892 	bl	8000428 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	9102      	str	r1, [sp, #8]
 800130c:	e9cd 2300 	strd	r2, r3, [sp]
 8001310:	4a10      	ldr	r2, [pc, #64]	@ (8001354 <parse_GPRMC+0x1dc>)
 8001312:	2110      	movs	r1, #16
 8001314:	4810      	ldr	r0, [pc, #64]	@ (8001358 <parse_GPRMC+0x1e0>)
 8001316:	f003 fc83 	bl	8004c20 <sniprintf>
			snprintf(longitude, sizeof(longitude), "%.5f%s", lon_dec,
 800131a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800131e:	f7ff f883 	bl	8000428 <__aeabi_f2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	9102      	str	r1, [sp, #8]
 800132a:	e9cd 2300 	strd	r2, r3, [sp]
 800132e:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <parse_GPRMC+0x1dc>)
 8001330:	2110      	movs	r1, #16
 8001332:	480a      	ldr	r0, [pc, #40]	@ (800135c <parse_GPRMC+0x1e4>)
 8001334:	f003 fc74 	bl	8004c20 <sniprintf>
					fields[6]);
		}
	}
}
 8001338:	bf00      	nop
 800133a:	37dc      	adds	r7, #220	@ 0xdc
 800133c:	46bd      	mov	sp, r7
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	080078c0 	.word	0x080078c0
 8001344:	200002a0 	.word	0x200002a0
 8001348:	080078c8 	.word	0x080078c8
 800134c:	42c80000 	.word	0x42c80000
 8001350:	42700000 	.word	0x42700000
 8001354:	080078cc 	.word	0x080078cc
 8001358:	20000000 	.word	0x20000000
 800135c:	20000010 	.word	0x20000010

08001360 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001366:	f000 fb15 	bl	8001994 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800136a:	f000 f851 	bl	8001410 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800136e:	f000 f8e9 	bl	8001544 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001372:	f000 f893 	bl	800149c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001376:	f000 f8bb 	bl	80014f0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	// Start receiving 1 byte interrupt for GPS
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &gps_c, 1);
 800137a:	2201      	movs	r2, #1
 800137c:	491a      	ldr	r1, [pc, #104]	@ (80013e8 <main+0x88>)
 800137e:	481b      	ldr	r0, [pc, #108]	@ (80013ec <main+0x8c>)
 8001380:	f001 fb99 	bl	8002ab6 <HAL_UART_Receive_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (gps_ready) {
 8001384:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <main+0x90>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0fa      	beq.n	8001384 <main+0x24>
			gps_ready = 0;
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <main+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]

			// Print full GPRMC line
			snprintf(uart_buf, sizeof(uart_buf), "Full GPRMC: %s\r\n",
 8001394:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <main+0x94>)
 8001396:	4a18      	ldr	r2, [pc, #96]	@ (80013f8 <main+0x98>)
 8001398:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800139c:	4817      	ldr	r0, [pc, #92]	@ (80013fc <main+0x9c>)
 800139e:	f003 fc3f 	bl	8004c20 <sniprintf>
					gps_line);
			HAL_UART_Transmit(&huart1, (uint8_t*) uart_buf, strlen(uart_buf),
 80013a2:	4816      	ldr	r0, [pc, #88]	@ (80013fc <main+0x9c>)
 80013a4:	f7fe fed4 	bl	8000150 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	4912      	ldr	r1, [pc, #72]	@ (80013fc <main+0x9c>)
 80013b2:	4813      	ldr	r0, [pc, #76]	@ (8001400 <main+0xa0>)
 80013b4:	f001 faf4 	bl	80029a0 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			// Parse latitude and longitude
			parse_GPRMC();
 80013b8:	f7ff fede 	bl	8001178 <parse_GPRMC>

			snprintf(uart_buf, sizeof(uart_buf),
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <main+0xa4>)
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <main+0xa8>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	@ (800140c <main+0xac>)
 80013c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <main+0x9c>)
 80013ca:	f003 fc29 	bl	8004c20 <sniprintf>
					"Latitude: %s, Longitude: %s\r\n", latitude, longitude);
			HAL_UART_Transmit(&huart1, (uint8_t*) uart_buf, strlen(uart_buf),
 80013ce:	480b      	ldr	r0, [pc, #44]	@ (80013fc <main+0x9c>)
 80013d0:	f7fe febe 	bl	8000150 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	4907      	ldr	r1, [pc, #28]	@ (80013fc <main+0x9c>)
 80013de:	4808      	ldr	r0, [pc, #32]	@ (8001400 <main+0xa0>)
 80013e0:	f001 fade 	bl	80029a0 <HAL_UART_Transmit>
		if (gps_ready) {
 80013e4:	e7ce      	b.n	8001384 <main+0x24>
 80013e6:	bf00      	nop
 80013e8:	20000323 	.word	0x20000323
 80013ec:	20000258 	.word	0x20000258
 80013f0:	20000322 	.word	0x20000322
 80013f4:	200002a0 	.word	0x200002a0
 80013f8:	080078d4 	.word	0x080078d4
 80013fc:	20000324 	.word	0x20000324
 8001400:	20000210 	.word	0x20000210
 8001404:	20000010 	.word	0x20000010
 8001408:	20000000 	.word	0x20000000
 800140c:	080078e8 	.word	0x080078e8

08001410 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b090      	sub	sp, #64	@ 0x40
 8001414:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2228      	movs	r2, #40	@ 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fc77 	bl	8004d12 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001432:	2301      	movs	r3, #1
 8001434:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001436:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800143a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001440:	2301      	movs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2302      	movs	r3, #2
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001448:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800144c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800144e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001452:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fe41 	bl	80020e0 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x58>
		Error_Handler();
 8001464:	f000 f89c 	bl	80015a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001474:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001478:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2102      	movs	r1, #2
 8001482:	4618      	mov	r0, r3
 8001484:	f001 f8ae 	bl	80025e4 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x82>
		Error_Handler();
 800148e:	f000 f887 	bl	80015a0 <Error_Handler>
	}
}
 8001492:	bf00      	nop
 8001494:	3740      	adds	r7, #64	@ 0x40
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_USART1_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014ac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014d4:	f001 fa14 	bl	8002900 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80014de:	f000 f85f 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000210 	.word	0x20000210
 80014ec:	40013800 	.word	0x40013800

080014f0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <MX_USART2_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 80014fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001500:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001528:	f001 f9ea 	bl	8002900 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001532:	f000 f835 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000258 	.word	0x20000258
 8001540:	40004400 	.word	0x40004400

08001544 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_GPIO_Init+0x58>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a13      	ldr	r2, [pc, #76]	@ (800159c <MX_GPIO_Init+0x58>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_GPIO_Init+0x58>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_GPIO_Init+0x58>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a0d      	ldr	r2, [pc, #52]	@ (800159c <MX_GPIO_Init+0x58>)
 8001568:	f043 0320 	orr.w	r3, r3, #32
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <MX_GPIO_Init+0x58>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <MX_GPIO_Init+0x58>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	4a07      	ldr	r2, [pc, #28]	@ (800159c <MX_GPIO_Init+0x58>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6193      	str	r3, [r2, #24]
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <MX_GPIO_Init+0x58>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000

080015a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <Error_Handler+0x8>

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <HAL_MspInit+0x5c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_MspInit+0x5c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_MspInit+0x60>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_MspInit+0x60>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a3f      	ldr	r2, [pc, #252]	@ (8001728 <HAL_UART_MspInit+0x118>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d13a      	bne.n	80016a6 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001630:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <HAL_UART_MspInit+0x11c>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a3d      	ldr	r2, [pc, #244]	@ (800172c <HAL_UART_MspInit+0x11c>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_UART_MspInit+0x11c>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b38      	ldr	r3, [pc, #224]	@ (800172c <HAL_UART_MspInit+0x11c>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a37      	ldr	r2, [pc, #220]	@ (800172c <HAL_UART_MspInit+0x11c>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b35      	ldr	r3, [pc, #212]	@ (800172c <HAL_UART_MspInit+0x11c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0318 	add.w	r3, r7, #24
 8001672:	4619      	mov	r1, r3
 8001674:	482e      	ldr	r0, [pc, #184]	@ (8001730 <HAL_UART_MspInit+0x120>)
 8001676:	f000 fbaf 	bl	8001dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800167a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	4619      	mov	r1, r3
 800168e:	4828      	ldr	r0, [pc, #160]	@ (8001730 <HAL_UART_MspInit+0x120>)
 8001690:	f000 fba2 	bl	8001dd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2025      	movs	r0, #37	@ 0x25
 800169a:	f000 fab4 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800169e:	2025      	movs	r0, #37	@ 0x25
 80016a0:	f000 facd 	bl	8001c3e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80016a4:	e03c      	b.n	8001720 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a22      	ldr	r2, [pc, #136]	@ (8001734 <HAL_UART_MspInit+0x124>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d137      	bne.n	8001720 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b0:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <HAL_UART_MspInit+0x11c>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	4a1d      	ldr	r2, [pc, #116]	@ (800172c <HAL_UART_MspInit+0x11c>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ba:	61d3      	str	r3, [r2, #28]
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_UART_MspInit+0x11c>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b18      	ldr	r3, [pc, #96]	@ (800172c <HAL_UART_MspInit+0x11c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a17      	ldr	r2, [pc, #92]	@ (800172c <HAL_UART_MspInit+0x11c>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b15      	ldr	r3, [pc, #84]	@ (800172c <HAL_UART_MspInit+0x11c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016e0:	2304      	movs	r3, #4
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	4619      	mov	r1, r3
 80016f2:	480f      	ldr	r0, [pc, #60]	@ (8001730 <HAL_UART_MspInit+0x120>)
 80016f4:	f000 fb70 	bl	8001dd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f8:	2308      	movs	r3, #8
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0318 	add.w	r3, r7, #24
 8001708:	4619      	mov	r1, r3
 800170a:	4809      	ldr	r0, [pc, #36]	@ (8001730 <HAL_UART_MspInit+0x120>)
 800170c:	f000 fb64 	bl	8001dd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2026      	movs	r0, #38	@ 0x26
 8001716:	f000 fa76 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800171a:	2026      	movs	r0, #38	@ 0x26
 800171c:	f000 fa8f 	bl	8001c3e <HAL_NVIC_EnableIRQ>
}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	@ 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40013800 	.word	0x40013800
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800
 8001734:	40004400 	.word	0x40004400

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 f94a 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <USART1_IRQHandler+0x10>)
 8001796:	f001 f9b3 	bl	8002b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000210 	.word	0x20000210

080017a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <USART2_IRQHandler+0x10>)
 80017aa:	f001 f9a9 	bl	8002b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000258 	.word	0x20000258

080017b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return 1;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <_kill>:

int _kill(int pid, int sig)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017d0:	f003 fb76 	bl	8004ec0 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2216      	movs	r2, #22
 80017d8:	601a      	str	r2, [r3, #0]
  return -1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_exit>:

void _exit (int status)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017ee:	f04f 31ff 	mov.w	r1, #4294967295
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffe7 	bl	80017c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <_exit+0x12>

080017fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00a      	b.n	8001824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180e:	f3af 8000 	nop.w
 8001812:	4601      	mov	r1, r0
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf0      	blt.n	800180e <_read+0x12>
  }

  return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e009      	b.n	800185c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf1      	blt.n	8001848 <_write+0x12>
  }
  return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_close>:

int _close(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001894:	605a      	str	r2, [r3, #4]
  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
	...

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	@ (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f003 fade 	bl	8004ec0 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20005000 	.word	0x20005000
 8001930:	00000400 	.word	0x00000400
 8001934:	20000424 	.word	0x20000424
 8001938:	20000578 	.word	0x20000578

0800193c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001948:	f7ff fff8 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800194c:	480b      	ldr	r0, [pc, #44]	@ (800197c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800194e:	490c      	ldr	r1, [pc, #48]	@ (8001980 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001950:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a09      	ldr	r2, [pc, #36]	@ (8001988 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001964:	4c09      	ldr	r4, [pc, #36]	@ (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f003 faab 	bl	8004ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001976:	f7ff fcf3 	bl	8001360 <main>
  bx lr
 800197a:	4770      	bx	lr
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001984:	08007dc4 	.word	0x08007dc4
  ldr r2, =_sbss
 8001988:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800198c:	20000578 	.word	0x20000578

08001990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_2_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_Init+0x28>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_Init+0x28>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f923 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fdfc 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40022000 	.word	0x40022000

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f93b 	bl	8001c5a <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 f903 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000020 	.word	0x20000020
 8001a18:	20000028 	.word	0x20000028
 8001a1c:	20000024 	.word	0x20000024

08001a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_IncTick+0x1c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_IncTick+0x20>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a03      	ldr	r2, [pc, #12]	@ (8001a40 <HAL_IncTick+0x20>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000028 	.word	0x20000028
 8001a40:	20000428 	.word	0x20000428

08001a44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b02      	ldr	r3, [pc, #8]	@ (8001a54 <HAL_GetTick+0x10>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	20000428 	.word	0x20000428

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4906      	ldr	r1, [pc, #24]	@ (8001af0 <__NVIC_EnableIRQ+0x34>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	@ (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	@ (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	@ 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff90 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff2d 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff42 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff90 	bl	8001b48 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5f 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff35 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d008      	beq.n	8001c9c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e020      	b.n	8001cde <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 020e 	bic.w	r2, r2, #14
 8001caa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d005      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2204      	movs	r2, #4
 8001d04:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	e051      	b.n	8001db0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 020e 	bic.w	r2, r2, #14
 8001d1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a22      	ldr	r2, [pc, #136]	@ (8001dbc <HAL_DMA_Abort_IT+0xd4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d029      	beq.n	8001d8a <HAL_DMA_Abort_IT+0xa2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a21      	ldr	r2, [pc, #132]	@ (8001dc0 <HAL_DMA_Abort_IT+0xd8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <HAL_DMA_Abort_IT+0x9e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc4 <HAL_DMA_Abort_IT+0xdc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01a      	beq.n	8001d80 <HAL_DMA_Abort_IT+0x98>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc8 <HAL_DMA_Abort_IT+0xe0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d012      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x92>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1c      	ldr	r2, [pc, #112]	@ (8001dcc <HAL_DMA_Abort_IT+0xe4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00a      	beq.n	8001d74 <HAL_DMA_Abort_IT+0x8c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd0 <HAL_DMA_Abort_IT+0xe8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d102      	bne.n	8001d6e <HAL_DMA_Abort_IT+0x86>
 8001d68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d6c:	e00e      	b.n	8001d8c <HAL_DMA_Abort_IT+0xa4>
 8001d6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d72:	e00b      	b.n	8001d8c <HAL_DMA_Abort_IT+0xa4>
 8001d74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d78:	e008      	b.n	8001d8c <HAL_DMA_Abort_IT+0xa4>
 8001d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7e:	e005      	b.n	8001d8c <HAL_DMA_Abort_IT+0xa4>
 8001d80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d84:	e002      	b.n	8001d8c <HAL_DMA_Abort_IT+0xa4>
 8001d86:	2310      	movs	r3, #16
 8001d88:	e000      	b.n	8001d8c <HAL_DMA_Abort_IT+0xa4>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	4a11      	ldr	r2, [pc, #68]	@ (8001dd4 <HAL_DMA_Abort_IT+0xec>)
 8001d8e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
    } 
  }
  return status;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40020008 	.word	0x40020008
 8001dc0:	4002001c 	.word	0x4002001c
 8001dc4:	40020030 	.word	0x40020030
 8001dc8:	40020044 	.word	0x40020044
 8001dcc:	40020058 	.word	0x40020058
 8001dd0:	4002006c 	.word	0x4002006c
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b08b      	sub	sp, #44	@ 0x2c
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dea:	e169      	b.n	80020c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dec:	2201      	movs	r2, #1
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	f040 8158 	bne.w	80020ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4a9a      	ldr	r2, [pc, #616]	@ (8002078 <HAL_GPIO_Init+0x2a0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d05e      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e14:	4a98      	ldr	r2, [pc, #608]	@ (8002078 <HAL_GPIO_Init+0x2a0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d875      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e1a:	4a98      	ldr	r2, [pc, #608]	@ (800207c <HAL_GPIO_Init+0x2a4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d058      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e20:	4a96      	ldr	r2, [pc, #600]	@ (800207c <HAL_GPIO_Init+0x2a4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d86f      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e26:	4a96      	ldr	r2, [pc, #600]	@ (8002080 <HAL_GPIO_Init+0x2a8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d052      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e2c:	4a94      	ldr	r2, [pc, #592]	@ (8002080 <HAL_GPIO_Init+0x2a8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d869      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e32:	4a94      	ldr	r2, [pc, #592]	@ (8002084 <HAL_GPIO_Init+0x2ac>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d04c      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e38:	4a92      	ldr	r2, [pc, #584]	@ (8002084 <HAL_GPIO_Init+0x2ac>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d863      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e3e:	4a92      	ldr	r2, [pc, #584]	@ (8002088 <HAL_GPIO_Init+0x2b0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d046      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e44:	4a90      	ldr	r2, [pc, #576]	@ (8002088 <HAL_GPIO_Init+0x2b0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d85d      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d82a      	bhi.n	8001ea4 <HAL_GPIO_Init+0xcc>
 8001e4e:	2b12      	cmp	r3, #18
 8001e50:	d859      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e52:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <HAL_GPIO_Init+0x80>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001ed3 	.word	0x08001ed3
 8001e5c:	08001ead 	.word	0x08001ead
 8001e60:	08001ebf 	.word	0x08001ebf
 8001e64:	08001f01 	.word	0x08001f01
 8001e68:	08001f07 	.word	0x08001f07
 8001e6c:	08001f07 	.word	0x08001f07
 8001e70:	08001f07 	.word	0x08001f07
 8001e74:	08001f07 	.word	0x08001f07
 8001e78:	08001f07 	.word	0x08001f07
 8001e7c:	08001f07 	.word	0x08001f07
 8001e80:	08001f07 	.word	0x08001f07
 8001e84:	08001f07 	.word	0x08001f07
 8001e88:	08001f07 	.word	0x08001f07
 8001e8c:	08001f07 	.word	0x08001f07
 8001e90:	08001f07 	.word	0x08001f07
 8001e94:	08001f07 	.word	0x08001f07
 8001e98:	08001f07 	.word	0x08001f07
 8001e9c:	08001eb5 	.word	0x08001eb5
 8001ea0:	08001ec9 	.word	0x08001ec9
 8001ea4:	4a79      	ldr	r2, [pc, #484]	@ (800208c <HAL_GPIO_Init+0x2b4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eaa:	e02c      	b.n	8001f06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e029      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	623b      	str	r3, [r7, #32]
          break;
 8001ebc:	e024      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	623b      	str	r3, [r7, #32]
          break;
 8001ec6:	e01f      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	330c      	adds	r3, #12
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	e01a      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eda:	2304      	movs	r3, #4
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e013      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	611a      	str	r2, [r3, #16]
          break;
 8001ef2:	e009      	b.n	8001f08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	615a      	str	r2, [r3, #20]
          break;
 8001efe:	e003      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          break;
 8001f06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2bff      	cmp	r3, #255	@ 0xff
 8001f0c:	d801      	bhi.n	8001f12 <HAL_GPIO_Init+0x13a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	e001      	b.n	8001f16 <HAL_GPIO_Init+0x13e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2bff      	cmp	r3, #255	@ 0xff
 8001f1c:	d802      	bhi.n	8001f24 <HAL_GPIO_Init+0x14c>
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x152>
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	3b08      	subs	r3, #8
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	210f      	movs	r1, #15
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	6a39      	ldr	r1, [r7, #32]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80b1 	beq.w	80020ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f58:	4b4d      	ldr	r3, [pc, #308]	@ (8002090 <HAL_GPIO_Init+0x2b8>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002090 <HAL_GPIO_Init+0x2b8>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b4a      	ldr	r3, [pc, #296]	@ (8002090 <HAL_GPIO_Init+0x2b8>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f70:	4a48      	ldr	r2, [pc, #288]	@ (8002094 <HAL_GPIO_Init+0x2bc>)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a40      	ldr	r2, [pc, #256]	@ (8002098 <HAL_GPIO_Init+0x2c0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_GPIO_Init+0x1ec>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3f      	ldr	r2, [pc, #252]	@ (800209c <HAL_GPIO_Init+0x2c4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_GPIO_Init+0x1e8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80020a0 <HAL_GPIO_Init+0x2c8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <HAL_GPIO_Init+0x1e4>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3d      	ldr	r2, [pc, #244]	@ (80020a4 <HAL_GPIO_Init+0x2cc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_GPIO_Init+0x1e0>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e006      	b.n	8001fc6 <HAL_GPIO_Init+0x1ee>
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e004      	b.n	8001fc6 <HAL_GPIO_Init+0x1ee>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x1ee>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_GPIO_Init+0x1ee>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc8:	f002 0203 	and.w	r2, r2, #3
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fd6:	492f      	ldr	r1, [pc, #188]	@ (8002094 <HAL_GPIO_Init+0x2bc>)
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	492c      	ldr	r1, [pc, #176]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	4928      	ldr	r1, [pc, #160]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002008:	4013      	ands	r3, r2
 800200a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002018:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	4922      	ldr	r1, [pc, #136]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	60cb      	str	r3, [r1, #12]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002026:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	491e      	ldr	r1, [pc, #120]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002030:	4013      	ands	r3, r2
 8002032:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002040:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4918      	ldr	r1, [pc, #96]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204e:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	43db      	mvns	r3, r3
 8002056:	4914      	ldr	r1, [pc, #80]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002058:	4013      	ands	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d021      	beq.n	80020ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002068:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	490e      	ldr	r1, [pc, #56]	@ (80020a8 <HAL_GPIO_Init+0x2d0>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]
 8002074:	e021      	b.n	80020ba <HAL_GPIO_Init+0x2e2>
 8002076:	bf00      	nop
 8002078:	10320000 	.word	0x10320000
 800207c:	10310000 	.word	0x10310000
 8002080:	10220000 	.word	0x10220000
 8002084:	10210000 	.word	0x10210000
 8002088:	10120000 	.word	0x10120000
 800208c:	10110000 	.word	0x10110000
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000
 8002098:	40010800 	.word	0x40010800
 800209c:	40010c00 	.word	0x40010c00
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40011400 	.word	0x40011400
 80020a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_GPIO_Init+0x304>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	4909      	ldr	r1, [pc, #36]	@ (80020dc <HAL_GPIO_Init+0x304>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	3301      	adds	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f47f ae8e 	bne.w	8001dec <HAL_GPIO_Init+0x14>
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	372c      	adds	r7, #44	@ 0x2c
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e272      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8087 	beq.w	800220e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002100:	4b92      	ldr	r3, [pc, #584]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b04      	cmp	r3, #4
 800210a:	d00c      	beq.n	8002126 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800210c:	4b8f      	ldr	r3, [pc, #572]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d112      	bne.n	800213e <HAL_RCC_OscConfig+0x5e>
 8002118:	4b8c      	ldr	r3, [pc, #560]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002124:	d10b      	bne.n	800213e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4b89      	ldr	r3, [pc, #548]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d06c      	beq.n	800220c <HAL_RCC_OscConfig+0x12c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d168      	bne.n	800220c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e24c      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x76>
 8002148:	4b80      	ldr	r3, [pc, #512]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a7f      	ldr	r2, [pc, #508]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e02e      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x98>
 800215e:	4b7b      	ldr	r3, [pc, #492]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7a      	ldr	r2, [pc, #488]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b78      	ldr	r3, [pc, #480]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a77      	ldr	r2, [pc, #476]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e01d      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0xbc>
 8002182:	4b72      	ldr	r3, [pc, #456]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a71      	ldr	r2, [pc, #452]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b6f      	ldr	r3, [pc, #444]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6e      	ldr	r2, [pc, #440]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 800219c:	4b6b      	ldr	r3, [pc, #428]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6a      	ldr	r2, [pc, #424]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b68      	ldr	r3, [pc, #416]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a67      	ldr	r2, [pc, #412]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fc42 	bl	8001a44 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff fc3e 	bl	8001a44 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	@ 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e200      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b5d      	ldr	r3, [pc, #372]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0xe4>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff fc2e 	bl	8001a44 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff fc2a 	bl	8001a44 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	@ 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1ec      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	4b53      	ldr	r3, [pc, #332]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x10c>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d063      	beq.n	80022e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221a:	4b4c      	ldr	r3, [pc, #304]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002226:	4b49      	ldr	r3, [pc, #292]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d11c      	bne.n	800226c <HAL_RCC_OscConfig+0x18c>
 8002232:	4b46      	ldr	r3, [pc, #280]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	4b43      	ldr	r3, [pc, #268]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RCC_OscConfig+0x176>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1c0      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4939      	ldr	r1, [pc, #228]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	e03a      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002274:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <HAL_RCC_OscConfig+0x270>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fbe3 	bl	8001a44 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7ff fbdf 	bl	8001a44 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1a1      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4927      	ldr	r1, [pc, #156]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b26      	ldr	r3, [pc, #152]	@ (8002350 <HAL_RCC_OscConfig+0x270>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fbc2 	bl	8001a44 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7ff fbbe 	bl	8001a44 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e180      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d03a      	beq.n	8002364 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d019      	beq.n	800232a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <HAL_RCC_OscConfig+0x274>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fba2 	bl	8001a44 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff fb9e 	bl	8001a44 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e160      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HAL_RCC_OscConfig+0x26c>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002322:	2001      	movs	r0, #1
 8002324:	f000 face 	bl	80028c4 <RCC_Delay>
 8002328:	e01c      	b.n	8002364 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_RCC_OscConfig+0x274>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7ff fb88 	bl	8001a44 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002336:	e00f      	b.n	8002358 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff fb84 	bl	8001a44 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d908      	bls.n	8002358 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e146      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	42420000 	.word	0x42420000
 8002354:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	4b92      	ldr	r3, [pc, #584]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e9      	bne.n	8002338 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a6 	beq.w	80024be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4b8b      	ldr	r3, [pc, #556]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	4b88      	ldr	r3, [pc, #544]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a87      	ldr	r2, [pc, #540]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238c:	61d3      	str	r3, [r2, #28]
 800238e:	4b85      	ldr	r3, [pc, #532]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b82      	ldr	r3, [pc, #520]	@ (80025a8 <HAL_RCC_OscConfig+0x4c8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b7f      	ldr	r3, [pc, #508]	@ (80025a8 <HAL_RCC_OscConfig+0x4c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7e      	ldr	r2, [pc, #504]	@ (80025a8 <HAL_RCC_OscConfig+0x4c8>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7ff fb45 	bl	8001a44 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7ff fb41 	bl	8001a44 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	@ 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e103      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b75      	ldr	r3, [pc, #468]	@ (80025a8 <HAL_RCC_OscConfig+0x4c8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x312>
 80023e4:	4b6f      	ldr	r3, [pc, #444]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a6e      	ldr	r2, [pc, #440]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	e02d      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x334>
 80023fa:	4b6a      	ldr	r3, [pc, #424]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a69      	ldr	r2, [pc, #420]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b67      	ldr	r3, [pc, #412]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a66      	ldr	r2, [pc, #408]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	e01c      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0x356>
 800241c:	4b61      	ldr	r3, [pc, #388]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a60      	ldr	r2, [pc, #384]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	4b5e      	ldr	r3, [pc, #376]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a5d      	ldr	r2, [pc, #372]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	e00b      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 8002436:	4b5b      	ldr	r3, [pc, #364]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a5a      	ldr	r2, [pc, #360]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b58      	ldr	r3, [pc, #352]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a57      	ldr	r2, [pc, #348]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d015      	beq.n	8002482 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7ff faf5 	bl	8001a44 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7ff faf1 	bl	8001a44 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0b1      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	4b4b      	ldr	r3, [pc, #300]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <HAL_RCC_OscConfig+0x37e>
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7ff fadf 	bl	8001a44 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7ff fadb 	bl	8001a44 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e09b      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	4b40      	ldr	r3, [pc, #256]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b3c      	ldr	r3, [pc, #240]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a3b      	ldr	r2, [pc, #236]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8087 	beq.w	80025d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	4b36      	ldr	r3, [pc, #216]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d061      	beq.n	8002598 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d146      	bne.n	800256a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024dc:	4b33      	ldr	r3, [pc, #204]	@ (80025ac <HAL_RCC_OscConfig+0x4cc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7ff faaf 	bl	8001a44 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7ff faab 	bl	8001a44 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e06d      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fc:	4b29      	ldr	r3, [pc, #164]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002510:	d108      	bne.n	8002524 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002512:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4921      	ldr	r1, [pc, #132]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002524:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a19      	ldr	r1, [r3, #32]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	430b      	orrs	r3, r1
 8002536:	491b      	ldr	r1, [pc, #108]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_RCC_OscConfig+0x4cc>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7ff fa7f 	bl	8001a44 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7ff fa7b 	bl	8001a44 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e03d      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x46a>
 8002568:	e035      	b.n	80025d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_RCC_OscConfig+0x4cc>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff fa68 	bl	8001a44 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7ff fa64 	bl	8001a44 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e026      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x498>
 8002596:	e01e      	b.n	80025d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e019      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b0:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_RCC_OscConfig+0x500>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d0      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b6a      	ldr	r3, [pc, #424]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d910      	bls.n	8002628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b67      	ldr	r3, [pc, #412]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4965      	ldr	r1, [pc, #404]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b63      	ldr	r3, [pc, #396]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b8      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002640:	4b59      	ldr	r3, [pc, #356]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a58      	ldr	r2, [pc, #352]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800264a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002658:	4b53      	ldr	r3, [pc, #332]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a52      	ldr	r2, [pc, #328]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002662:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b50      	ldr	r3, [pc, #320]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	494d      	ldr	r1, [pc, #308]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d040      	beq.n	8002704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b47      	ldr	r3, [pc, #284]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d115      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07f      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	4b41      	ldr	r3, [pc, #260]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e073      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06b      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c2:	4b39      	ldr	r3, [pc, #228]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f023 0203 	bic.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4936      	ldr	r1, [pc, #216]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d4:	f7ff f9b6 	bl	8001a44 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026dc:	f7ff f9b2 	bl	8001a44 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e053      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 020c 	and.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	429a      	cmp	r2, r3
 8002702:	d1eb      	bne.n	80026dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d210      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4922      	ldr	r1, [pc, #136]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e032      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4916      	ldr	r1, [pc, #88]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275e:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	490e      	ldr	r1, [pc, #56]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002772:	f000 f821 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490a      	ldr	r1, [pc, #40]	@ (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a09      	ldr	r2, [pc, #36]	@ (80027b0 <HAL_RCC_ClockConfig+0x1cc>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278e:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f914 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08007908 	.word	0x08007908
 80027b0:	20000020 	.word	0x20000020
 80027b4:	20000024 	.word	0x20000024

080027b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027d2:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <HAL_RCC_GetSysClockFreq+0x94>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x30>
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x36>
 80027e6:	e027      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ea:	613b      	str	r3, [r7, #16]
      break;
 80027ec:	e027      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	0c9b      	lsrs	r3, r3, #18
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	4a17      	ldr	r2, [pc, #92]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027f8:	5cd3      	ldrb	r3, [r2, r3]
 80027fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d010      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_RCC_GetSysClockFreq+0x94>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0c5b      	lsrs	r3, r3, #17
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	4a11      	ldr	r2, [pc, #68]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x98>)
 800281a:	fb03 f202 	mul.w	r2, r3, r2
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e004      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0c      	ldr	r2, [pc, #48]	@ (800285c <HAL_RCC_GetSysClockFreq+0xa4>)
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	613b      	str	r3, [r7, #16]
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	613b      	str	r3, [r7, #16]
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	693b      	ldr	r3, [r7, #16]
}
 8002840:	4618      	mov	r0, r3
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	007a1200 	.word	0x007a1200
 8002854:	08007920 	.word	0x08007920
 8002858:	08007930 	.word	0x08007930
 800285c:	003d0900 	.word	0x003d0900

08002860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b02      	ldr	r3, [pc, #8]	@ (8002870 <HAL_RCC_GetHCLKFreq+0x10>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	20000020 	.word	0x20000020

08002874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002878:	f7ff fff2 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4903      	ldr	r1, [pc, #12]	@ (8002898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800288a:	5ccb      	ldrb	r3, [r1, r3]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	08007918 	.word	0x08007918

0800289c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a0:	f7ff ffde 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0adb      	lsrs	r3, r3, #11
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	@ (80028c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	08007918 	.word	0x08007918

080028c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028cc:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <RCC_Delay+0x34>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <RCC_Delay+0x38>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a5b      	lsrs	r3, r3, #9
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e0:	bf00      	nop
  }
  while (Delay --);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	60fa      	str	r2, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f9      	bne.n	80028e0 <RCC_Delay+0x1c>
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000020 	.word	0x20000020
 80028fc:	10624dd3 	.word	0x10624dd3

08002900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e042      	b.n	8002998 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fe72 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	@ 0x24
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fdb7 	bl	80034b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	@ 0x28
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d175      	bne.n	8002aac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_UART_Transmit+0x2c>
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e06e      	b.n	8002aae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2221      	movs	r2, #33	@ 0x21
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029de:	f7ff f831 	bl	8001a44 <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	88fa      	ldrh	r2, [r7, #6]
 80029e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f8:	d108      	bne.n	8002a0c <HAL_UART_Transmit+0x6c>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d104      	bne.n	8002a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e003      	b.n	8002a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a14:	e02e      	b.n	8002a74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2180      	movs	r1, #128	@ 0x80
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fb1c 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e03a      	b.n	8002aae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10b      	bne.n	8002a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	3302      	adds	r3, #2
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	e007      	b.n	8002a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	3301      	adds	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1cb      	bne.n	8002a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2140      	movs	r1, #64	@ 0x40
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fae8 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e006      	b.n	8002aae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
  }
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d112      	bne.n	8002af6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_UART_Receive_IT+0x26>
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e00b      	b.n	8002af8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fb0f 	bl	8003110 <UART_Start_Receive_IT>
 8002af2:	4603      	mov	r3, r0
 8002af4:	e000      	b.n	8002af8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
  }
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0ba      	sub	sp, #232	@ 0xe8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10f      	bne.n	8002b66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_UART_IRQHandler+0x66>
 8002b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fbec 	bl	800333c <UART_Receive_IT>
      return;
 8002b64:	e25b      	b.n	800301e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80de 	beq.w	8002d2c <HAL_UART_IRQHandler+0x22c>
 8002b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80d1 	beq.w	8002d2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_UART_IRQHandler+0xae>
 8002b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xd2>
 8002bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	f043 0202 	orr.w	r2, r3, #2
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_UART_IRQHandler+0xf6>
 8002bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	f043 0204 	orr.w	r2, r3, #4
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d011      	beq.n	8002c26 <HAL_UART_IRQHandler+0x126>
 8002c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f043 0208 	orr.w	r2, r3, #8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 81f2 	beq.w	8003014 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_UART_IRQHandler+0x14e>
 8002c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fb77 	bl	800333c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <HAL_UART_IRQHandler+0x17a>
 8002c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d04f      	beq.n	8002d1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fa81 	bl	8003182 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d041      	beq.n	8002d12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3314      	adds	r3, #20
 8002c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3314      	adds	r3, #20
 8002cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002cba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1d9      	bne.n	8002c8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d013      	beq.n	8002d0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ee0 <HAL_UART_IRQHandler+0x3e0>)
 8002ce8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fffa 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d04:	4610      	mov	r0, r2
 8002d06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	e00e      	b.n	8002d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f993 	bl	8003036 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	e00a      	b.n	8002d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f98f 	bl	8003036 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	e006      	b.n	8002d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f98b 	bl	8003036 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d26:	e175      	b.n	8003014 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	bf00      	nop
    return;
 8002d2a:	e173      	b.n	8003014 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	f040 814f 	bne.w	8002fd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 8148 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8141 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80b6 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8145 	beq.w	8003018 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d96:	429a      	cmp	r2, r3
 8002d98:	f080 813e 	bcs.w	8003018 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002da2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	f000 8088 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	330c      	adds	r3, #12
 8002db6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ddc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002de8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1d9      	bne.n	8002db0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3314      	adds	r3, #20
 8002e02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e20:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e26:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e1      	bne.n	8002dfc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3314      	adds	r3, #20
 8002e3e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e5c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e3      	bne.n	8002e38 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e88:	e853 3f00 	ldrex	r3, [r3]
 8002e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e90:	f023 0310 	bic.w	r3, r3, #16
 8002e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ea2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ea4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ea8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e3      	bne.n	8002e7e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fed9 	bl	8001c72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8b6 	bl	8003048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002edc:	e09c      	b.n	8003018 <HAL_UART_IRQHandler+0x518>
 8002ede:	bf00      	nop
 8002ee0:	08003247 	.word	0x08003247
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 808e 	beq.w	800301c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8089 	beq.w	800301c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	e853 3f00 	ldrex	r3, [r3]
 8002f18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002f2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e3      	bne.n	8002f0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3314      	adds	r3, #20
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	623b      	str	r3, [r7, #32]
   return(result);
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3314      	adds	r3, #20
 8002f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f66:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e3      	bne.n	8002f42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0310 	bic.w	r3, r3, #16
 8002f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fac:	61fa      	str	r2, [r7, #28]
 8002fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	69b9      	ldr	r1, [r7, #24]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e3      	bne.n	8002f88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f83b 	bl	8003048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fd2:	e023      	b.n	800301c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x4f4>
 8002fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f93e 	bl	800326e <UART_Transmit_IT>
    return;
 8002ff2:	e014      	b.n	800301e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <HAL_UART_IRQHandler+0x51e>
 8003000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f97d 	bl	800330c <UART_EndTransmit_IT>
    return;
 8003012:	e004      	b.n	800301e <HAL_UART_IRQHandler+0x51e>
    return;
 8003014:	bf00      	nop
 8003016:	e002      	b.n	800301e <HAL_UART_IRQHandler+0x51e>
      return;
 8003018:	bf00      	nop
 800301a:	e000      	b.n	800301e <HAL_UART_IRQHandler+0x51e>
      return;
 800301c:	bf00      	nop
  }
}
 800301e:	37e8      	adds	r7, #232	@ 0xe8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	e03b      	b.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d037      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7fe fce4 	bl	8001a44 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	429a      	cmp	r2, r3
 8003086:	d302      	bcc.n	800308e <UART_WaitOnFlagUntilTimeout+0x30>
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e03a      	b.n	8003108 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d023      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b80      	cmp	r3, #128	@ 0x80
 80030a4:	d020      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d01d      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d116      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f856 	bl	8003182 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2208      	movs	r2, #8
 80030da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e00f      	b.n	8003108 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	429a      	cmp	r2, r3
 8003104:	d0b4      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	88fa      	ldrh	r2, [r7, #6]
 800312e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2222      	movs	r2, #34	@ 0x22
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003154:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0220 	orr.w	r2, r2, #32
 8003174:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003182:	b480      	push	{r7}
 8003184:	b095      	sub	sp, #84	@ 0x54
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80031ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e5      	bne.n	800318a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3314      	adds	r3, #20
 80031dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d119      	bne.n	800322e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	60bb      	str	r3, [r7, #8]
   return(result);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f023 0310 	bic.w	r3, r3, #16
 8003210:	647b      	str	r3, [r7, #68]	@ 0x44
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800321a:	61ba      	str	r2, [r7, #24]
 800321c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	6979      	ldr	r1, [r7, #20]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	613b      	str	r3, [r7, #16]
   return(result);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e5      	bne.n	80031fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800323c:	bf00      	nop
 800323e:	3754      	adds	r7, #84	@ 0x54
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f7ff fee8 	bl	8003036 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b21      	cmp	r3, #33	@ 0x21
 8003280:	d13e      	bne.n	8003300 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800328a:	d114      	bne.n	80032b6 <UART_Transmit_IT+0x48>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d110      	bne.n	80032b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	1c9a      	adds	r2, r3, #2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	621a      	str	r2, [r3, #32]
 80032b4:	e008      	b.n	80032c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	1c59      	adds	r1, r3, #1
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6211      	str	r1, [r2, #32]
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4619      	mov	r1, r3
 80032d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10f      	bne.n	80032fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003322:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fe79 	bl	8003024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	@ 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b22      	cmp	r3, #34	@ 0x22
 800334e:	f040 80ae 	bne.w	80034ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800335a:	d117      	bne.n	800338c <UART_Receive_IT+0x50>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d113      	bne.n	800338c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	b29a      	uxth	r2, r3
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	1c9a      	adds	r2, r3, #2
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	@ 0x28
 800338a:	e026      	b.n	80033da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339e:	d007      	beq.n	80033b0 <UART_Receive_IT+0x74>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <UART_Receive_IT+0x82>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e008      	b.n	80033d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4619      	mov	r1, r3
 80033e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d15d      	bne.n	80034aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0220 	bic.w	r2, r2, #32
 80033fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800340c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	2b01      	cmp	r3, #1
 8003432:	d135      	bne.n	80034a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	613b      	str	r3, [r7, #16]
   return(result);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f023 0310 	bic.w	r3, r3, #16
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345a:	623a      	str	r2, [r7, #32]
 800345c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	69f9      	ldr	r1, [r7, #28]
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	61bb      	str	r3, [r7, #24]
   return(result);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e5      	bne.n	800343a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d10a      	bne.n	8003492 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fdd5 	bl	8003048 <HAL_UARTEx_RxEventCallback>
 800349e:	e002      	b.n	80034a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fd fe1b 	bl	80010dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e002      	b.n	80034b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
  }
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3730      	adds	r7, #48	@ 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034f2:	f023 030c 	bic.w	r3, r3, #12
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2c      	ldr	r2, [pc, #176]	@ (80035cc <UART_SetConfig+0x114>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d103      	bne.n	8003528 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003520:	f7ff f9bc 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	e002      	b.n	800352e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003528:	f7ff f9a4 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 800352c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009a      	lsls	r2, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	4a22      	ldr	r2, [pc, #136]	@ (80035d0 <UART_SetConfig+0x118>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	0119      	lsls	r1, r3, #4
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	009a      	lsls	r2, r3, #2
 8003558:	441a      	add	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	fbb2 f2f3 	udiv	r2, r2, r3
 8003564:	4b1a      	ldr	r3, [pc, #104]	@ (80035d0 <UART_SetConfig+0x118>)
 8003566:	fba3 0302 	umull	r0, r3, r3, r2
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2064      	movs	r0, #100	@ 0x64
 800356e:	fb00 f303 	mul.w	r3, r0, r3
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	3332      	adds	r3, #50	@ 0x32
 8003578:	4a15      	ldr	r2, [pc, #84]	@ (80035d0 <UART_SetConfig+0x118>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003584:	4419      	add	r1, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	fbb2 f2f3 	udiv	r2, r2, r3
 800359c:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <UART_SetConfig+0x118>)
 800359e:	fba3 0302 	umull	r0, r3, r3, r2
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	2064      	movs	r0, #100	@ 0x64
 80035a6:	fb00 f303 	mul.w	r3, r0, r3
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	3332      	adds	r3, #50	@ 0x32
 80035b0:	4a07      	ldr	r2, [pc, #28]	@ (80035d0 <UART_SetConfig+0x118>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	440a      	add	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40013800 	.word	0x40013800
 80035d0:	51eb851f 	.word	0x51eb851f

080035d4 <atof>:
 80035d4:	2100      	movs	r1, #0
 80035d6:	f000 bdfb 	b.w	80041d0 <strtod>

080035da <sulp>:
 80035da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035de:	460f      	mov	r7, r1
 80035e0:	4690      	mov	r8, r2
 80035e2:	f003 faf7 	bl	8006bd4 <__ulp>
 80035e6:	4604      	mov	r4, r0
 80035e8:	460d      	mov	r5, r1
 80035ea:	f1b8 0f00 	cmp.w	r8, #0
 80035ee:	d011      	beq.n	8003614 <sulp+0x3a>
 80035f0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80035f4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	dd0b      	ble.n	8003614 <sulp+0x3a>
 80035fc:	2400      	movs	r4, #0
 80035fe:	051b      	lsls	r3, r3, #20
 8003600:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8003604:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8003608:	4622      	mov	r2, r4
 800360a:	462b      	mov	r3, r5
 800360c:	f7fc ff64 	bl	80004d8 <__aeabi_dmul>
 8003610:	4604      	mov	r4, r0
 8003612:	460d      	mov	r5, r1
 8003614:	4620      	mov	r0, r4
 8003616:	4629      	mov	r1, r5
 8003618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800361c:	0000      	movs	r0, r0
	...

08003620 <_strtod_l>:
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	b09f      	sub	sp, #124	@ 0x7c
 8003626:	9217      	str	r2, [sp, #92]	@ 0x5c
 8003628:	2200      	movs	r2, #0
 800362a:	460c      	mov	r4, r1
 800362c:	921a      	str	r2, [sp, #104]	@ 0x68
 800362e:	f04f 0a00 	mov.w	sl, #0
 8003632:	f04f 0b00 	mov.w	fp, #0
 8003636:	460a      	mov	r2, r1
 8003638:	9005      	str	r0, [sp, #20]
 800363a:	9219      	str	r2, [sp, #100]	@ 0x64
 800363c:	7811      	ldrb	r1, [r2, #0]
 800363e:	292b      	cmp	r1, #43	@ 0x2b
 8003640:	d048      	beq.n	80036d4 <_strtod_l+0xb4>
 8003642:	d836      	bhi.n	80036b2 <_strtod_l+0x92>
 8003644:	290d      	cmp	r1, #13
 8003646:	d830      	bhi.n	80036aa <_strtod_l+0x8a>
 8003648:	2908      	cmp	r1, #8
 800364a:	d830      	bhi.n	80036ae <_strtod_l+0x8e>
 800364c:	2900      	cmp	r1, #0
 800364e:	d039      	beq.n	80036c4 <_strtod_l+0xa4>
 8003650:	2200      	movs	r2, #0
 8003652:	920e      	str	r2, [sp, #56]	@ 0x38
 8003654:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8003656:	782a      	ldrb	r2, [r5, #0]
 8003658:	2a30      	cmp	r2, #48	@ 0x30
 800365a:	f040 80b0 	bne.w	80037be <_strtod_l+0x19e>
 800365e:	786a      	ldrb	r2, [r5, #1]
 8003660:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003664:	2a58      	cmp	r2, #88	@ 0x58
 8003666:	d16c      	bne.n	8003742 <_strtod_l+0x122>
 8003668:	9302      	str	r3, [sp, #8]
 800366a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800366c:	4a8f      	ldr	r2, [pc, #572]	@ (80038ac <_strtod_l+0x28c>)
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	ab1a      	add	r3, sp, #104	@ 0x68
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	9805      	ldr	r0, [sp, #20]
 8003676:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003678:	a919      	add	r1, sp, #100	@ 0x64
 800367a:	f002 fba5 	bl	8005dc8 <__gethex>
 800367e:	f010 060f 	ands.w	r6, r0, #15
 8003682:	4604      	mov	r4, r0
 8003684:	d005      	beq.n	8003692 <_strtod_l+0x72>
 8003686:	2e06      	cmp	r6, #6
 8003688:	d126      	bne.n	80036d8 <_strtod_l+0xb8>
 800368a:	2300      	movs	r3, #0
 800368c:	3501      	adds	r5, #1
 800368e:	9519      	str	r5, [sp, #100]	@ 0x64
 8003690:	930e      	str	r3, [sp, #56]	@ 0x38
 8003692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 8582 	bne.w	800419e <_strtod_l+0xb7e>
 800369a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800369c:	b1bb      	cbz	r3, 80036ce <_strtod_l+0xae>
 800369e:	4650      	mov	r0, sl
 80036a0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80036a4:	b01f      	add	sp, #124	@ 0x7c
 80036a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036aa:	2920      	cmp	r1, #32
 80036ac:	d1d0      	bne.n	8003650 <_strtod_l+0x30>
 80036ae:	3201      	adds	r2, #1
 80036b0:	e7c3      	b.n	800363a <_strtod_l+0x1a>
 80036b2:	292d      	cmp	r1, #45	@ 0x2d
 80036b4:	d1cc      	bne.n	8003650 <_strtod_l+0x30>
 80036b6:	2101      	movs	r1, #1
 80036b8:	910e      	str	r1, [sp, #56]	@ 0x38
 80036ba:	1c51      	adds	r1, r2, #1
 80036bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80036be:	7852      	ldrb	r2, [r2, #1]
 80036c0:	2a00      	cmp	r2, #0
 80036c2:	d1c7      	bne.n	8003654 <_strtod_l+0x34>
 80036c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80036c6:	9419      	str	r4, [sp, #100]	@ 0x64
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 8566 	bne.w	800419a <_strtod_l+0xb7a>
 80036ce:	4650      	mov	r0, sl
 80036d0:	4659      	mov	r1, fp
 80036d2:	e7e7      	b.n	80036a4 <_strtod_l+0x84>
 80036d4:	2100      	movs	r1, #0
 80036d6:	e7ef      	b.n	80036b8 <_strtod_l+0x98>
 80036d8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80036da:	b13a      	cbz	r2, 80036ec <_strtod_l+0xcc>
 80036dc:	2135      	movs	r1, #53	@ 0x35
 80036de:	a81c      	add	r0, sp, #112	@ 0x70
 80036e0:	f003 fb68 	bl	8006db4 <__copybits>
 80036e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80036e6:	9805      	ldr	r0, [sp, #20]
 80036e8:	f002 ff48 	bl	800657c <_Bfree>
 80036ec:	3e01      	subs	r6, #1
 80036ee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80036f0:	2e04      	cmp	r6, #4
 80036f2:	d806      	bhi.n	8003702 <_strtod_l+0xe2>
 80036f4:	e8df f006 	tbb	[pc, r6]
 80036f8:	201d0314 	.word	0x201d0314
 80036fc:	14          	.byte	0x14
 80036fd:	00          	.byte	0x00
 80036fe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8003702:	05e1      	lsls	r1, r4, #23
 8003704:	bf48      	it	mi
 8003706:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800370a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800370e:	0d1b      	lsrs	r3, r3, #20
 8003710:	051b      	lsls	r3, r3, #20
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1bd      	bne.n	8003692 <_strtod_l+0x72>
 8003716:	f001 fbd3 	bl	8004ec0 <__errno>
 800371a:	2322      	movs	r3, #34	@ 0x22
 800371c:	6003      	str	r3, [r0, #0]
 800371e:	e7b8      	b.n	8003692 <_strtod_l+0x72>
 8003720:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8003724:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8003728:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800372c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003730:	e7e7      	b.n	8003702 <_strtod_l+0xe2>
 8003732:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80038b0 <_strtod_l+0x290>
 8003736:	e7e4      	b.n	8003702 <_strtod_l+0xe2>
 8003738:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800373c:	f04f 3aff 	mov.w	sl, #4294967295
 8003740:	e7df      	b.n	8003702 <_strtod_l+0xe2>
 8003742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	9219      	str	r2, [sp, #100]	@ 0x64
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	2b30      	cmp	r3, #48	@ 0x30
 800374c:	d0f9      	beq.n	8003742 <_strtod_l+0x122>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d09f      	beq.n	8003692 <_strtod_l+0x72>
 8003752:	2301      	movs	r3, #1
 8003754:	2700      	movs	r7, #0
 8003756:	220a      	movs	r2, #10
 8003758:	46b9      	mov	r9, r7
 800375a:	9308      	str	r3, [sp, #32]
 800375c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800375e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8003760:	930c      	str	r3, [sp, #48]	@ 0x30
 8003762:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8003764:	7805      	ldrb	r5, [r0, #0]
 8003766:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800376a:	b2d9      	uxtb	r1, r3
 800376c:	2909      	cmp	r1, #9
 800376e:	d928      	bls.n	80037c2 <_strtod_l+0x1a2>
 8003770:	2201      	movs	r2, #1
 8003772:	4950      	ldr	r1, [pc, #320]	@ (80038b4 <_strtod_l+0x294>)
 8003774:	f001 fad5 	bl	8004d22 <strncmp>
 8003778:	2800      	cmp	r0, #0
 800377a:	d032      	beq.n	80037e2 <_strtod_l+0x1c2>
 800377c:	2000      	movs	r0, #0
 800377e:	462a      	mov	r2, r5
 8003780:	4603      	mov	r3, r0
 8003782:	464d      	mov	r5, r9
 8003784:	900a      	str	r0, [sp, #40]	@ 0x28
 8003786:	2a65      	cmp	r2, #101	@ 0x65
 8003788:	d001      	beq.n	800378e <_strtod_l+0x16e>
 800378a:	2a45      	cmp	r2, #69	@ 0x45
 800378c:	d114      	bne.n	80037b8 <_strtod_l+0x198>
 800378e:	b91d      	cbnz	r5, 8003798 <_strtod_l+0x178>
 8003790:	9a08      	ldr	r2, [sp, #32]
 8003792:	4302      	orrs	r2, r0
 8003794:	d096      	beq.n	80036c4 <_strtod_l+0xa4>
 8003796:	2500      	movs	r5, #0
 8003798:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800379a:	1c62      	adds	r2, r4, #1
 800379c:	9219      	str	r2, [sp, #100]	@ 0x64
 800379e:	7862      	ldrb	r2, [r4, #1]
 80037a0:	2a2b      	cmp	r2, #43	@ 0x2b
 80037a2:	d07a      	beq.n	800389a <_strtod_l+0x27a>
 80037a4:	2a2d      	cmp	r2, #45	@ 0x2d
 80037a6:	d07e      	beq.n	80038a6 <_strtod_l+0x286>
 80037a8:	f04f 0c00 	mov.w	ip, #0
 80037ac:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80037b0:	2909      	cmp	r1, #9
 80037b2:	f240 8085 	bls.w	80038c0 <_strtod_l+0x2a0>
 80037b6:	9419      	str	r4, [sp, #100]	@ 0x64
 80037b8:	f04f 0800 	mov.w	r8, #0
 80037bc:	e0a5      	b.n	800390a <_strtod_l+0x2ea>
 80037be:	2300      	movs	r3, #0
 80037c0:	e7c8      	b.n	8003754 <_strtod_l+0x134>
 80037c2:	f1b9 0f08 	cmp.w	r9, #8
 80037c6:	bfd8      	it	le
 80037c8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80037ca:	f100 0001 	add.w	r0, r0, #1
 80037ce:	bfd6      	itet	le
 80037d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80037d4:	fb02 3707 	mlagt	r7, r2, r7, r3
 80037d8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80037da:	f109 0901 	add.w	r9, r9, #1
 80037de:	9019      	str	r0, [sp, #100]	@ 0x64
 80037e0:	e7bf      	b.n	8003762 <_strtod_l+0x142>
 80037e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80037e8:	785a      	ldrb	r2, [r3, #1]
 80037ea:	f1b9 0f00 	cmp.w	r9, #0
 80037ee:	d03b      	beq.n	8003868 <_strtod_l+0x248>
 80037f0:	464d      	mov	r5, r9
 80037f2:	900a      	str	r0, [sp, #40]	@ 0x28
 80037f4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d912      	bls.n	8003822 <_strtod_l+0x202>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e7c2      	b.n	8003786 <_strtod_l+0x166>
 8003800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003802:	3001      	adds	r0, #1
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	9219      	str	r2, [sp, #100]	@ 0x64
 8003808:	785a      	ldrb	r2, [r3, #1]
 800380a:	2a30      	cmp	r2, #48	@ 0x30
 800380c:	d0f8      	beq.n	8003800 <_strtod_l+0x1e0>
 800380e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8003812:	2b08      	cmp	r3, #8
 8003814:	f200 84c8 	bhi.w	80041a8 <_strtod_l+0xb88>
 8003818:	900a      	str	r0, [sp, #40]	@ 0x28
 800381a:	2000      	movs	r0, #0
 800381c:	4605      	mov	r5, r0
 800381e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003820:	930c      	str	r3, [sp, #48]	@ 0x30
 8003822:	3a30      	subs	r2, #48	@ 0x30
 8003824:	f100 0301 	add.w	r3, r0, #1
 8003828:	d018      	beq.n	800385c <_strtod_l+0x23c>
 800382a:	462e      	mov	r6, r5
 800382c:	f04f 0e0a 	mov.w	lr, #10
 8003830:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003832:	4419      	add	r1, r3
 8003834:	910a      	str	r1, [sp, #40]	@ 0x28
 8003836:	1c71      	adds	r1, r6, #1
 8003838:	eba1 0c05 	sub.w	ip, r1, r5
 800383c:	4563      	cmp	r3, ip
 800383e:	dc15      	bgt.n	800386c <_strtod_l+0x24c>
 8003840:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8003844:	182b      	adds	r3, r5, r0
 8003846:	2b08      	cmp	r3, #8
 8003848:	f105 0501 	add.w	r5, r5, #1
 800384c:	4405      	add	r5, r0
 800384e:	dc1a      	bgt.n	8003886 <_strtod_l+0x266>
 8003850:	230a      	movs	r3, #10
 8003852:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003854:	fb03 2301 	mla	r3, r3, r1, r2
 8003858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800385a:	2300      	movs	r3, #0
 800385c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800385e:	4618      	mov	r0, r3
 8003860:	1c51      	adds	r1, r2, #1
 8003862:	9119      	str	r1, [sp, #100]	@ 0x64
 8003864:	7852      	ldrb	r2, [r2, #1]
 8003866:	e7c5      	b.n	80037f4 <_strtod_l+0x1d4>
 8003868:	4648      	mov	r0, r9
 800386a:	e7ce      	b.n	800380a <_strtod_l+0x1ea>
 800386c:	2e08      	cmp	r6, #8
 800386e:	dc05      	bgt.n	800387c <_strtod_l+0x25c>
 8003870:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8003872:	fb0e f606 	mul.w	r6, lr, r6
 8003876:	960b      	str	r6, [sp, #44]	@ 0x2c
 8003878:	460e      	mov	r6, r1
 800387a:	e7dc      	b.n	8003836 <_strtod_l+0x216>
 800387c:	2910      	cmp	r1, #16
 800387e:	bfd8      	it	le
 8003880:	fb0e f707 	mulle.w	r7, lr, r7
 8003884:	e7f8      	b.n	8003878 <_strtod_l+0x258>
 8003886:	2b0f      	cmp	r3, #15
 8003888:	bfdc      	itt	le
 800388a:	230a      	movle	r3, #10
 800388c:	fb03 2707 	mlale	r7, r3, r7, r2
 8003890:	e7e3      	b.n	800385a <_strtod_l+0x23a>
 8003892:	2300      	movs	r3, #0
 8003894:	930a      	str	r3, [sp, #40]	@ 0x28
 8003896:	2301      	movs	r3, #1
 8003898:	e77a      	b.n	8003790 <_strtod_l+0x170>
 800389a:	f04f 0c00 	mov.w	ip, #0
 800389e:	1ca2      	adds	r2, r4, #2
 80038a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80038a2:	78a2      	ldrb	r2, [r4, #2]
 80038a4:	e782      	b.n	80037ac <_strtod_l+0x18c>
 80038a6:	f04f 0c01 	mov.w	ip, #1
 80038aa:	e7f8      	b.n	800389e <_strtod_l+0x27e>
 80038ac:	08007b74 	.word	0x08007b74
 80038b0:	7ff00000 	.word	0x7ff00000
 80038b4:	08007932 	.word	0x08007932
 80038b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80038ba:	1c51      	adds	r1, r2, #1
 80038bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80038be:	7852      	ldrb	r2, [r2, #1]
 80038c0:	2a30      	cmp	r2, #48	@ 0x30
 80038c2:	d0f9      	beq.n	80038b8 <_strtod_l+0x298>
 80038c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80038c8:	2908      	cmp	r1, #8
 80038ca:	f63f af75 	bhi.w	80037b8 <_strtod_l+0x198>
 80038ce:	f04f 080a 	mov.w	r8, #10
 80038d2:	3a30      	subs	r2, #48	@ 0x30
 80038d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80038d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80038d8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80038da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80038dc:	1c56      	adds	r6, r2, #1
 80038de:	9619      	str	r6, [sp, #100]	@ 0x64
 80038e0:	7852      	ldrb	r2, [r2, #1]
 80038e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80038e6:	f1be 0f09 	cmp.w	lr, #9
 80038ea:	d939      	bls.n	8003960 <_strtod_l+0x340>
 80038ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80038ee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80038f2:	1a76      	subs	r6, r6, r1
 80038f4:	2e08      	cmp	r6, #8
 80038f6:	dc03      	bgt.n	8003900 <_strtod_l+0x2e0>
 80038f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80038fa:	4588      	cmp	r8, r1
 80038fc:	bfa8      	it	ge
 80038fe:	4688      	movge	r8, r1
 8003900:	f1bc 0f00 	cmp.w	ip, #0
 8003904:	d001      	beq.n	800390a <_strtod_l+0x2ea>
 8003906:	f1c8 0800 	rsb	r8, r8, #0
 800390a:	2d00      	cmp	r5, #0
 800390c:	d14e      	bne.n	80039ac <_strtod_l+0x38c>
 800390e:	9908      	ldr	r1, [sp, #32]
 8003910:	4308      	orrs	r0, r1
 8003912:	f47f aebe 	bne.w	8003692 <_strtod_l+0x72>
 8003916:	2b00      	cmp	r3, #0
 8003918:	f47f aed4 	bne.w	80036c4 <_strtod_l+0xa4>
 800391c:	2a69      	cmp	r2, #105	@ 0x69
 800391e:	d028      	beq.n	8003972 <_strtod_l+0x352>
 8003920:	dc25      	bgt.n	800396e <_strtod_l+0x34e>
 8003922:	2a49      	cmp	r2, #73	@ 0x49
 8003924:	d025      	beq.n	8003972 <_strtod_l+0x352>
 8003926:	2a4e      	cmp	r2, #78	@ 0x4e
 8003928:	f47f aecc 	bne.w	80036c4 <_strtod_l+0xa4>
 800392c:	4999      	ldr	r1, [pc, #612]	@ (8003b94 <_strtod_l+0x574>)
 800392e:	a819      	add	r0, sp, #100	@ 0x64
 8003930:	f002 fc6c 	bl	800620c <__match>
 8003934:	2800      	cmp	r0, #0
 8003936:	f43f aec5 	beq.w	80036c4 <_strtod_l+0xa4>
 800393a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b28      	cmp	r3, #40	@ 0x28
 8003940:	d12e      	bne.n	80039a0 <_strtod_l+0x380>
 8003942:	4995      	ldr	r1, [pc, #596]	@ (8003b98 <_strtod_l+0x578>)
 8003944:	aa1c      	add	r2, sp, #112	@ 0x70
 8003946:	a819      	add	r0, sp, #100	@ 0x64
 8003948:	f002 fc74 	bl	8006234 <__hexnan>
 800394c:	2805      	cmp	r0, #5
 800394e:	d127      	bne.n	80039a0 <_strtod_l+0x380>
 8003950:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8003952:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8003956:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800395a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800395e:	e698      	b.n	8003692 <_strtod_l+0x72>
 8003960:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003962:	fb08 2101 	mla	r1, r8, r1, r2
 8003966:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800396a:	9209      	str	r2, [sp, #36]	@ 0x24
 800396c:	e7b5      	b.n	80038da <_strtod_l+0x2ba>
 800396e:	2a6e      	cmp	r2, #110	@ 0x6e
 8003970:	e7da      	b.n	8003928 <_strtod_l+0x308>
 8003972:	498a      	ldr	r1, [pc, #552]	@ (8003b9c <_strtod_l+0x57c>)
 8003974:	a819      	add	r0, sp, #100	@ 0x64
 8003976:	f002 fc49 	bl	800620c <__match>
 800397a:	2800      	cmp	r0, #0
 800397c:	f43f aea2 	beq.w	80036c4 <_strtod_l+0xa4>
 8003980:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003982:	4987      	ldr	r1, [pc, #540]	@ (8003ba0 <_strtod_l+0x580>)
 8003984:	3b01      	subs	r3, #1
 8003986:	a819      	add	r0, sp, #100	@ 0x64
 8003988:	9319      	str	r3, [sp, #100]	@ 0x64
 800398a:	f002 fc3f 	bl	800620c <__match>
 800398e:	b910      	cbnz	r0, 8003996 <_strtod_l+0x376>
 8003990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003992:	3301      	adds	r3, #1
 8003994:	9319      	str	r3, [sp, #100]	@ 0x64
 8003996:	f04f 0a00 	mov.w	sl, #0
 800399a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8003ba4 <_strtod_l+0x584>
 800399e:	e678      	b.n	8003692 <_strtod_l+0x72>
 80039a0:	4881      	ldr	r0, [pc, #516]	@ (8003ba8 <_strtod_l+0x588>)
 80039a2:	f001 fadf 	bl	8004f64 <nan>
 80039a6:	4682      	mov	sl, r0
 80039a8:	468b      	mov	fp, r1
 80039aa:	e672      	b.n	8003692 <_strtod_l+0x72>
 80039ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039ae:	f1b9 0f00 	cmp.w	r9, #0
 80039b2:	bf08      	it	eq
 80039b4:	46a9      	moveq	r9, r5
 80039b6:	eba8 0303 	sub.w	r3, r8, r3
 80039ba:	2d10      	cmp	r5, #16
 80039bc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80039be:	462c      	mov	r4, r5
 80039c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80039c2:	bfa8      	it	ge
 80039c4:	2410      	movge	r4, #16
 80039c6:	f7fc fd0d 	bl	80003e4 <__aeabi_ui2d>
 80039ca:	2d09      	cmp	r5, #9
 80039cc:	4682      	mov	sl, r0
 80039ce:	468b      	mov	fp, r1
 80039d0:	dc11      	bgt.n	80039f6 <_strtod_l+0x3d6>
 80039d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f43f ae5c 	beq.w	8003692 <_strtod_l+0x72>
 80039da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039dc:	dd76      	ble.n	8003acc <_strtod_l+0x4ac>
 80039de:	2b16      	cmp	r3, #22
 80039e0:	dc5d      	bgt.n	8003a9e <_strtod_l+0x47e>
 80039e2:	4972      	ldr	r1, [pc, #456]	@ (8003bac <_strtod_l+0x58c>)
 80039e4:	4652      	mov	r2, sl
 80039e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80039ea:	465b      	mov	r3, fp
 80039ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039f0:	f7fc fd72 	bl	80004d8 <__aeabi_dmul>
 80039f4:	e7d7      	b.n	80039a6 <_strtod_l+0x386>
 80039f6:	4b6d      	ldr	r3, [pc, #436]	@ (8003bac <_strtod_l+0x58c>)
 80039f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80039fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8003a00:	f7fc fd6a 	bl	80004d8 <__aeabi_dmul>
 8003a04:	4682      	mov	sl, r0
 8003a06:	4638      	mov	r0, r7
 8003a08:	468b      	mov	fp, r1
 8003a0a:	f7fc fceb 	bl	80003e4 <__aeabi_ui2d>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4650      	mov	r0, sl
 8003a14:	4659      	mov	r1, fp
 8003a16:	f7fc fba9 	bl	800016c <__adddf3>
 8003a1a:	2d0f      	cmp	r5, #15
 8003a1c:	4682      	mov	sl, r0
 8003a1e:	468b      	mov	fp, r1
 8003a20:	ddd7      	ble.n	80039d2 <_strtod_l+0x3b2>
 8003a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a24:	1b2c      	subs	r4, r5, r4
 8003a26:	441c      	add	r4, r3
 8003a28:	2c00      	cmp	r4, #0
 8003a2a:	f340 8093 	ble.w	8003b54 <_strtod_l+0x534>
 8003a2e:	f014 030f 	ands.w	r3, r4, #15
 8003a32:	d00a      	beq.n	8003a4a <_strtod_l+0x42a>
 8003a34:	495d      	ldr	r1, [pc, #372]	@ (8003bac <_strtod_l+0x58c>)
 8003a36:	4652      	mov	r2, sl
 8003a38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a40:	465b      	mov	r3, fp
 8003a42:	f7fc fd49 	bl	80004d8 <__aeabi_dmul>
 8003a46:	4682      	mov	sl, r0
 8003a48:	468b      	mov	fp, r1
 8003a4a:	f034 040f 	bics.w	r4, r4, #15
 8003a4e:	d073      	beq.n	8003b38 <_strtod_l+0x518>
 8003a50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8003a54:	dd49      	ble.n	8003aea <_strtod_l+0x4ca>
 8003a56:	2400      	movs	r4, #0
 8003a58:	46a0      	mov	r8, r4
 8003a5a:	46a1      	mov	r9, r4
 8003a5c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003a5e:	2322      	movs	r3, #34	@ 0x22
 8003a60:	f04f 0a00 	mov.w	sl, #0
 8003a64:	9a05      	ldr	r2, [sp, #20]
 8003a66:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8003ba4 <_strtod_l+0x584>
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f43f ae0f 	beq.w	8003692 <_strtod_l+0x72>
 8003a74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003a76:	9805      	ldr	r0, [sp, #20]
 8003a78:	f002 fd80 	bl	800657c <_Bfree>
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	9805      	ldr	r0, [sp, #20]
 8003a80:	f002 fd7c 	bl	800657c <_Bfree>
 8003a84:	4641      	mov	r1, r8
 8003a86:	9805      	ldr	r0, [sp, #20]
 8003a88:	f002 fd78 	bl	800657c <_Bfree>
 8003a8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003a8e:	9805      	ldr	r0, [sp, #20]
 8003a90:	f002 fd74 	bl	800657c <_Bfree>
 8003a94:	4621      	mov	r1, r4
 8003a96:	9805      	ldr	r0, [sp, #20]
 8003a98:	f002 fd70 	bl	800657c <_Bfree>
 8003a9c:	e5f9      	b.n	8003692 <_strtod_l+0x72>
 8003a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aa0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	dbbc      	blt.n	8003a22 <_strtod_l+0x402>
 8003aa8:	4c40      	ldr	r4, [pc, #256]	@ (8003bac <_strtod_l+0x58c>)
 8003aaa:	f1c5 050f 	rsb	r5, r5, #15
 8003aae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003ab2:	4652      	mov	r2, sl
 8003ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ab8:	465b      	mov	r3, fp
 8003aba:	f7fc fd0d 	bl	80004d8 <__aeabi_dmul>
 8003abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ac0:	1b5d      	subs	r5, r3, r5
 8003ac2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003ac6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003aca:	e791      	b.n	80039f0 <_strtod_l+0x3d0>
 8003acc:	3316      	adds	r3, #22
 8003ace:	dba8      	blt.n	8003a22 <_strtod_l+0x402>
 8003ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ad2:	4650      	mov	r0, sl
 8003ad4:	eba3 0808 	sub.w	r8, r3, r8
 8003ad8:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <_strtod_l+0x58c>)
 8003ada:	4659      	mov	r1, fp
 8003adc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8003ae0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003ae4:	f7fc fe22 	bl	800072c <__aeabi_ddiv>
 8003ae8:	e75d      	b.n	80039a6 <_strtod_l+0x386>
 8003aea:	2300      	movs	r3, #0
 8003aec:	4650      	mov	r0, sl
 8003aee:	4659      	mov	r1, fp
 8003af0:	461e      	mov	r6, r3
 8003af2:	4f2f      	ldr	r7, [pc, #188]	@ (8003bb0 <_strtod_l+0x590>)
 8003af4:	1124      	asrs	r4, r4, #4
 8003af6:	2c01      	cmp	r4, #1
 8003af8:	dc21      	bgt.n	8003b3e <_strtod_l+0x51e>
 8003afa:	b10b      	cbz	r3, 8003b00 <_strtod_l+0x4e0>
 8003afc:	4682      	mov	sl, r0
 8003afe:	468b      	mov	fp, r1
 8003b00:	492b      	ldr	r1, [pc, #172]	@ (8003bb0 <_strtod_l+0x590>)
 8003b02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8003b06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003b0a:	4652      	mov	r2, sl
 8003b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b10:	465b      	mov	r3, fp
 8003b12:	f7fc fce1 	bl	80004d8 <__aeabi_dmul>
 8003b16:	4b23      	ldr	r3, [pc, #140]	@ (8003ba4 <_strtod_l+0x584>)
 8003b18:	460a      	mov	r2, r1
 8003b1a:	400b      	ands	r3, r1
 8003b1c:	4925      	ldr	r1, [pc, #148]	@ (8003bb4 <_strtod_l+0x594>)
 8003b1e:	4682      	mov	sl, r0
 8003b20:	428b      	cmp	r3, r1
 8003b22:	d898      	bhi.n	8003a56 <_strtod_l+0x436>
 8003b24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	bf86      	itte	hi
 8003b2c:	f04f 3aff 	movhi.w	sl, #4294967295
 8003b30:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8003bb8 <_strtod_l+0x598>
 8003b34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9308      	str	r3, [sp, #32]
 8003b3c:	e076      	b.n	8003c2c <_strtod_l+0x60c>
 8003b3e:	07e2      	lsls	r2, r4, #31
 8003b40:	d504      	bpl.n	8003b4c <_strtod_l+0x52c>
 8003b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b46:	f7fc fcc7 	bl	80004d8 <__aeabi_dmul>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	3601      	adds	r6, #1
 8003b4e:	1064      	asrs	r4, r4, #1
 8003b50:	3708      	adds	r7, #8
 8003b52:	e7d0      	b.n	8003af6 <_strtod_l+0x4d6>
 8003b54:	d0f0      	beq.n	8003b38 <_strtod_l+0x518>
 8003b56:	4264      	negs	r4, r4
 8003b58:	f014 020f 	ands.w	r2, r4, #15
 8003b5c:	d00a      	beq.n	8003b74 <_strtod_l+0x554>
 8003b5e:	4b13      	ldr	r3, [pc, #76]	@ (8003bac <_strtod_l+0x58c>)
 8003b60:	4650      	mov	r0, sl
 8003b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b66:	4659      	mov	r1, fp
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f7fc fdde 	bl	800072c <__aeabi_ddiv>
 8003b70:	4682      	mov	sl, r0
 8003b72:	468b      	mov	fp, r1
 8003b74:	1124      	asrs	r4, r4, #4
 8003b76:	d0df      	beq.n	8003b38 <_strtod_l+0x518>
 8003b78:	2c1f      	cmp	r4, #31
 8003b7a:	dd1f      	ble.n	8003bbc <_strtod_l+0x59c>
 8003b7c:	2400      	movs	r4, #0
 8003b7e:	46a0      	mov	r8, r4
 8003b80:	46a1      	mov	r9, r4
 8003b82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003b84:	2322      	movs	r3, #34	@ 0x22
 8003b86:	9a05      	ldr	r2, [sp, #20]
 8003b88:	f04f 0a00 	mov.w	sl, #0
 8003b8c:	f04f 0b00 	mov.w	fp, #0
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e76b      	b.n	8003a6c <_strtod_l+0x44c>
 8003b94:	08007941 	.word	0x08007941
 8003b98:	08007b60 	.word	0x08007b60
 8003b9c:	08007939 	.word	0x08007939
 8003ba0:	08007a20 	.word	0x08007a20
 8003ba4:	7ff00000 	.word	0x7ff00000
 8003ba8:	08007a1c 	.word	0x08007a1c
 8003bac:	08007be8 	.word	0x08007be8
 8003bb0:	08007bc0 	.word	0x08007bc0
 8003bb4:	7ca00000 	.word	0x7ca00000
 8003bb8:	7fefffff 	.word	0x7fefffff
 8003bbc:	f014 0310 	ands.w	r3, r4, #16
 8003bc0:	bf18      	it	ne
 8003bc2:	236a      	movne	r3, #106	@ 0x6a
 8003bc4:	4650      	mov	r0, sl
 8003bc6:	9308      	str	r3, [sp, #32]
 8003bc8:	4659      	mov	r1, fp
 8003bca:	2300      	movs	r3, #0
 8003bcc:	4e77      	ldr	r6, [pc, #476]	@ (8003dac <_strtod_l+0x78c>)
 8003bce:	07e7      	lsls	r7, r4, #31
 8003bd0:	d504      	bpl.n	8003bdc <_strtod_l+0x5bc>
 8003bd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003bd6:	f7fc fc7f 	bl	80004d8 <__aeabi_dmul>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	1064      	asrs	r4, r4, #1
 8003bde:	f106 0608 	add.w	r6, r6, #8
 8003be2:	d1f4      	bne.n	8003bce <_strtod_l+0x5ae>
 8003be4:	b10b      	cbz	r3, 8003bea <_strtod_l+0x5ca>
 8003be6:	4682      	mov	sl, r0
 8003be8:	468b      	mov	fp, r1
 8003bea:	9b08      	ldr	r3, [sp, #32]
 8003bec:	b1b3      	cbz	r3, 8003c1c <_strtod_l+0x5fc>
 8003bee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003bf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	dd0f      	ble.n	8003c1c <_strtod_l+0x5fc>
 8003bfc:	2b1f      	cmp	r3, #31
 8003bfe:	dd58      	ble.n	8003cb2 <_strtod_l+0x692>
 8003c00:	2b34      	cmp	r3, #52	@ 0x34
 8003c02:	bfd8      	it	le
 8003c04:	f04f 33ff 	movle.w	r3, #4294967295
 8003c08:	f04f 0a00 	mov.w	sl, #0
 8003c0c:	bfcf      	iteee	gt
 8003c0e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8003c12:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8003c16:	4093      	lslle	r3, r2
 8003c18:	ea03 0b01 	andle.w	fp, r3, r1
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2300      	movs	r3, #0
 8003c20:	4650      	mov	r0, sl
 8003c22:	4659      	mov	r1, fp
 8003c24:	f7fc fec0 	bl	80009a8 <__aeabi_dcmpeq>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d1a7      	bne.n	8003b7c <_strtod_l+0x55c>
 8003c2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c2e:	464a      	mov	r2, r9
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003c34:	462b      	mov	r3, r5
 8003c36:	9805      	ldr	r0, [sp, #20]
 8003c38:	f002 fd08 	bl	800664c <__s2b>
 8003c3c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	f43f af09 	beq.w	8003a56 <_strtod_l+0x436>
 8003c44:	2400      	movs	r4, #0
 8003c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c4a:	2a00      	cmp	r2, #0
 8003c4c:	eba3 0308 	sub.w	r3, r3, r8
 8003c50:	bfa8      	it	ge
 8003c52:	2300      	movge	r3, #0
 8003c54:	46a0      	mov	r8, r4
 8003c56:	9312      	str	r3, [sp, #72]	@ 0x48
 8003c58:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003c5c:	9316      	str	r3, [sp, #88]	@ 0x58
 8003c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c60:	9805      	ldr	r0, [sp, #20]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	f002 fc4a 	bl	80064fc <_Balloc>
 8003c68:	4681      	mov	r9, r0
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	f43f aef7 	beq.w	8003a5e <_strtod_l+0x43e>
 8003c70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c72:	300c      	adds	r0, #12
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	f103 010c 	add.w	r1, r3, #12
 8003c7a:	3202      	adds	r2, #2
 8003c7c:	0092      	lsls	r2, r2, #2
 8003c7e:	f001 f962 	bl	8004f46 <memcpy>
 8003c82:	ab1c      	add	r3, sp, #112	@ 0x70
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	4652      	mov	r2, sl
 8003c8c:	465b      	mov	r3, fp
 8003c8e:	9805      	ldr	r0, [sp, #20]
 8003c90:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8003c94:	f003 f806 	bl	8006ca4 <__d2b>
 8003c98:	901a      	str	r0, [sp, #104]	@ 0x68
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	f43f aedf 	beq.w	8003a5e <_strtod_l+0x43e>
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	9805      	ldr	r0, [sp, #20]
 8003ca4:	f002 fd68 	bl	8006778 <__i2b>
 8003ca8:	4680      	mov	r8, r0
 8003caa:	b948      	cbnz	r0, 8003cc0 <_strtod_l+0x6a0>
 8003cac:	f04f 0800 	mov.w	r8, #0
 8003cb0:	e6d5      	b.n	8003a5e <_strtod_l+0x43e>
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	ea03 0a0a 	and.w	sl, r3, sl
 8003cbe:	e7ad      	b.n	8003c1c <_strtod_l+0x5fc>
 8003cc0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8003cc2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	bfab      	itete	ge
 8003cc8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8003cca:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8003ccc:	18ef      	addge	r7, r5, r3
 8003cce:	1b5e      	sublt	r6, r3, r5
 8003cd0:	9b08      	ldr	r3, [sp, #32]
 8003cd2:	bfa8      	it	ge
 8003cd4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8003cd6:	eba5 0503 	sub.w	r5, r5, r3
 8003cda:	4415      	add	r5, r2
 8003cdc:	4b34      	ldr	r3, [pc, #208]	@ (8003db0 <_strtod_l+0x790>)
 8003cde:	f105 35ff 	add.w	r5, r5, #4294967295
 8003ce2:	bfb8      	it	lt
 8003ce4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8003ce6:	429d      	cmp	r5, r3
 8003ce8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8003cec:	da50      	bge.n	8003d90 <_strtod_l+0x770>
 8003cee:	1b5b      	subs	r3, r3, r5
 8003cf0:	2b1f      	cmp	r3, #31
 8003cf2:	f04f 0101 	mov.w	r1, #1
 8003cf6:	eba2 0203 	sub.w	r2, r2, r3
 8003cfa:	dc3d      	bgt.n	8003d78 <_strtod_l+0x758>
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d02:	2300      	movs	r3, #0
 8003d04:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d06:	18bd      	adds	r5, r7, r2
 8003d08:	9b08      	ldr	r3, [sp, #32]
 8003d0a:	42af      	cmp	r7, r5
 8003d0c:	4416      	add	r6, r2
 8003d0e:	441e      	add	r6, r3
 8003d10:	463b      	mov	r3, r7
 8003d12:	bfa8      	it	ge
 8003d14:	462b      	movge	r3, r5
 8003d16:	42b3      	cmp	r3, r6
 8003d18:	bfa8      	it	ge
 8003d1a:	4633      	movge	r3, r6
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bfc2      	ittt	gt
 8003d20:	1aed      	subgt	r5, r5, r3
 8003d22:	1af6      	subgt	r6, r6, r3
 8003d24:	1aff      	subgt	r7, r7, r3
 8003d26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	dd16      	ble.n	8003d5a <_strtod_l+0x73a>
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	461a      	mov	r2, r3
 8003d30:	9805      	ldr	r0, [sp, #20]
 8003d32:	f002 fdd9 	bl	80068e8 <__pow5mult>
 8003d36:	4680      	mov	r8, r0
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d0b7      	beq.n	8003cac <_strtod_l+0x68c>
 8003d3c:	4601      	mov	r1, r0
 8003d3e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003d40:	9805      	ldr	r0, [sp, #20]
 8003d42:	f002 fd2f 	bl	80067a4 <__multiply>
 8003d46:	900a      	str	r0, [sp, #40]	@ 0x28
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	f43f ae88 	beq.w	8003a5e <_strtod_l+0x43e>
 8003d4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003d50:	9805      	ldr	r0, [sp, #20]
 8003d52:	f002 fc13 	bl	800657c <_Bfree>
 8003d56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d58:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d5a:	2d00      	cmp	r5, #0
 8003d5c:	dc1d      	bgt.n	8003d9a <_strtod_l+0x77a>
 8003d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	dd27      	ble.n	8003db4 <_strtod_l+0x794>
 8003d64:	4649      	mov	r1, r9
 8003d66:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003d68:	9805      	ldr	r0, [sp, #20]
 8003d6a:	f002 fdbd 	bl	80068e8 <__pow5mult>
 8003d6e:	4681      	mov	r9, r0
 8003d70:	bb00      	cbnz	r0, 8003db4 <_strtod_l+0x794>
 8003d72:	f04f 0900 	mov.w	r9, #0
 8003d76:	e672      	b.n	8003a5e <_strtod_l+0x43e>
 8003d78:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8003d7c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8003d80:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8003d84:	35e2      	adds	r5, #226	@ 0xe2
 8003d86:	fa01 f305 	lsl.w	r3, r1, r5
 8003d8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d8c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8003d8e:	e7ba      	b.n	8003d06 <_strtod_l+0x6e6>
 8003d90:	2300      	movs	r3, #0
 8003d92:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d94:	2301      	movs	r3, #1
 8003d96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d98:	e7b5      	b.n	8003d06 <_strtod_l+0x6e6>
 8003d9a:	462a      	mov	r2, r5
 8003d9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003d9e:	9805      	ldr	r0, [sp, #20]
 8003da0:	f002 fdfc 	bl	800699c <__lshift>
 8003da4:	901a      	str	r0, [sp, #104]	@ 0x68
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d1d9      	bne.n	8003d5e <_strtod_l+0x73e>
 8003daa:	e658      	b.n	8003a5e <_strtod_l+0x43e>
 8003dac:	08007b88 	.word	0x08007b88
 8003db0:	fffffc02 	.word	0xfffffc02
 8003db4:	2e00      	cmp	r6, #0
 8003db6:	dd07      	ble.n	8003dc8 <_strtod_l+0x7a8>
 8003db8:	4649      	mov	r1, r9
 8003dba:	4632      	mov	r2, r6
 8003dbc:	9805      	ldr	r0, [sp, #20]
 8003dbe:	f002 fded 	bl	800699c <__lshift>
 8003dc2:	4681      	mov	r9, r0
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d0d4      	beq.n	8003d72 <_strtod_l+0x752>
 8003dc8:	2f00      	cmp	r7, #0
 8003dca:	dd08      	ble.n	8003dde <_strtod_l+0x7be>
 8003dcc:	4641      	mov	r1, r8
 8003dce:	463a      	mov	r2, r7
 8003dd0:	9805      	ldr	r0, [sp, #20]
 8003dd2:	f002 fde3 	bl	800699c <__lshift>
 8003dd6:	4680      	mov	r8, r0
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	f43f ae40 	beq.w	8003a5e <_strtod_l+0x43e>
 8003dde:	464a      	mov	r2, r9
 8003de0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003de2:	9805      	ldr	r0, [sp, #20]
 8003de4:	f002 fe62 	bl	8006aac <__mdiff>
 8003de8:	4604      	mov	r4, r0
 8003dea:	2800      	cmp	r0, #0
 8003dec:	f43f ae37 	beq.w	8003a5e <_strtod_l+0x43e>
 8003df0:	68c3      	ldr	r3, [r0, #12]
 8003df2:	4641      	mov	r1, r8
 8003df4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003df6:	2300      	movs	r3, #0
 8003df8:	60c3      	str	r3, [r0, #12]
 8003dfa:	f002 fe3b 	bl	8006a74 <__mcmp>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	da3d      	bge.n	8003e7e <_strtod_l+0x85e>
 8003e02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e04:	ea53 030a 	orrs.w	r3, r3, sl
 8003e08:	d163      	bne.n	8003ed2 <_strtod_l+0x8b2>
 8003e0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d15f      	bne.n	8003ed2 <_strtod_l+0x8b2>
 8003e12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003e16:	0d1b      	lsrs	r3, r3, #20
 8003e18:	051b      	lsls	r3, r3, #20
 8003e1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003e1e:	d958      	bls.n	8003ed2 <_strtod_l+0x8b2>
 8003e20:	6963      	ldr	r3, [r4, #20]
 8003e22:	b913      	cbnz	r3, 8003e2a <_strtod_l+0x80a>
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	dd53      	ble.n	8003ed2 <_strtod_l+0x8b2>
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	9805      	ldr	r0, [sp, #20]
 8003e30:	f002 fdb4 	bl	800699c <__lshift>
 8003e34:	4641      	mov	r1, r8
 8003e36:	4604      	mov	r4, r0
 8003e38:	f002 fe1c 	bl	8006a74 <__mcmp>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	dd48      	ble.n	8003ed2 <_strtod_l+0x8b2>
 8003e40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003e44:	9a08      	ldr	r2, [sp, #32]
 8003e46:	0d1b      	lsrs	r3, r3, #20
 8003e48:	051b      	lsls	r3, r3, #20
 8003e4a:	2a00      	cmp	r2, #0
 8003e4c:	d062      	beq.n	8003f14 <_strtod_l+0x8f4>
 8003e4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003e52:	d85f      	bhi.n	8003f14 <_strtod_l+0x8f4>
 8003e54:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8003e58:	f67f ae94 	bls.w	8003b84 <_strtod_l+0x564>
 8003e5c:	4650      	mov	r0, sl
 8003e5e:	4659      	mov	r1, fp
 8003e60:	4ba3      	ldr	r3, [pc, #652]	@ (80040f0 <_strtod_l+0xad0>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	f7fc fb38 	bl	80004d8 <__aeabi_dmul>
 8003e68:	4ba2      	ldr	r3, [pc, #648]	@ (80040f4 <_strtod_l+0xad4>)
 8003e6a:	4682      	mov	sl, r0
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	468b      	mov	fp, r1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f47f adff 	bne.w	8003a74 <_strtod_l+0x454>
 8003e76:	2322      	movs	r3, #34	@ 0x22
 8003e78:	9a05      	ldr	r2, [sp, #20]
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e5fa      	b.n	8003a74 <_strtod_l+0x454>
 8003e7e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8003e82:	d165      	bne.n	8003f50 <_strtod_l+0x930>
 8003e84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003e86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003e8a:	b35a      	cbz	r2, 8003ee4 <_strtod_l+0x8c4>
 8003e8c:	4a9a      	ldr	r2, [pc, #616]	@ (80040f8 <_strtod_l+0xad8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d12b      	bne.n	8003eea <_strtod_l+0x8ca>
 8003e92:	9b08      	ldr	r3, [sp, #32]
 8003e94:	4651      	mov	r1, sl
 8003e96:	b303      	cbz	r3, 8003eda <_strtod_l+0x8ba>
 8003e98:	465a      	mov	r2, fp
 8003e9a:	4b96      	ldr	r3, [pc, #600]	@ (80040f4 <_strtod_l+0xad4>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea6:	d81b      	bhi.n	8003ee0 <_strtod_l+0x8c0>
 8003ea8:	0d1b      	lsrs	r3, r3, #20
 8003eaa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	4299      	cmp	r1, r3
 8003eb4:	d119      	bne.n	8003eea <_strtod_l+0x8ca>
 8003eb6:	4b91      	ldr	r3, [pc, #580]	@ (80040fc <_strtod_l+0xadc>)
 8003eb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d102      	bne.n	8003ec4 <_strtod_l+0x8a4>
 8003ebe:	3101      	adds	r1, #1
 8003ec0:	f43f adcd 	beq.w	8003a5e <_strtod_l+0x43e>
 8003ec4:	f04f 0a00 	mov.w	sl, #0
 8003ec8:	4b8a      	ldr	r3, [pc, #552]	@ (80040f4 <_strtod_l+0xad4>)
 8003eca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ecc:	401a      	ands	r2, r3
 8003ece:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8003ed2:	9b08      	ldr	r3, [sp, #32]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1c1      	bne.n	8003e5c <_strtod_l+0x83c>
 8003ed8:	e5cc      	b.n	8003a74 <_strtod_l+0x454>
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e7e8      	b.n	8003eb2 <_strtod_l+0x892>
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	e7e6      	b.n	8003eb2 <_strtod_l+0x892>
 8003ee4:	ea53 030a 	orrs.w	r3, r3, sl
 8003ee8:	d0aa      	beq.n	8003e40 <_strtod_l+0x820>
 8003eea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003eec:	b1db      	cbz	r3, 8003f26 <_strtod_l+0x906>
 8003eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ef0:	4213      	tst	r3, r2
 8003ef2:	d0ee      	beq.n	8003ed2 <_strtod_l+0x8b2>
 8003ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ef6:	4650      	mov	r0, sl
 8003ef8:	4659      	mov	r1, fp
 8003efa:	9a08      	ldr	r2, [sp, #32]
 8003efc:	b1bb      	cbz	r3, 8003f2e <_strtod_l+0x90e>
 8003efe:	f7ff fb6c 	bl	80035da <sulp>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f0a:	f7fc f92f 	bl	800016c <__adddf3>
 8003f0e:	4682      	mov	sl, r0
 8003f10:	468b      	mov	fp, r1
 8003f12:	e7de      	b.n	8003ed2 <_strtod_l+0x8b2>
 8003f14:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8003f18:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003f1c:	f04f 3aff 	mov.w	sl, #4294967295
 8003f20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003f24:	e7d5      	b.n	8003ed2 <_strtod_l+0x8b2>
 8003f26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003f28:	ea13 0f0a 	tst.w	r3, sl
 8003f2c:	e7e1      	b.n	8003ef2 <_strtod_l+0x8d2>
 8003f2e:	f7ff fb54 	bl	80035da <sulp>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f3a:	f7fc f915 	bl	8000168 <__aeabi_dsub>
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2300      	movs	r3, #0
 8003f42:	4682      	mov	sl, r0
 8003f44:	468b      	mov	fp, r1
 8003f46:	f7fc fd2f 	bl	80009a8 <__aeabi_dcmpeq>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d0c1      	beq.n	8003ed2 <_strtod_l+0x8b2>
 8003f4e:	e619      	b.n	8003b84 <_strtod_l+0x564>
 8003f50:	4641      	mov	r1, r8
 8003f52:	4620      	mov	r0, r4
 8003f54:	f002 fefe 	bl	8006d54 <__ratio>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003f5e:	4606      	mov	r6, r0
 8003f60:	460f      	mov	r7, r1
 8003f62:	f7fc fd35 	bl	80009d0 <__aeabi_dcmple>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d06d      	beq.n	8004046 <_strtod_l+0xa26>
 8003f6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d178      	bne.n	8004062 <_strtod_l+0xa42>
 8003f70:	f1ba 0f00 	cmp.w	sl, #0
 8003f74:	d156      	bne.n	8004024 <_strtod_l+0xa04>
 8003f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d158      	bne.n	8004032 <_strtod_l+0xa12>
 8003f80:	2200      	movs	r2, #0
 8003f82:	4630      	mov	r0, r6
 8003f84:	4639      	mov	r1, r7
 8003f86:	4b5e      	ldr	r3, [pc, #376]	@ (8004100 <_strtod_l+0xae0>)
 8003f88:	f7fc fd18 	bl	80009bc <__aeabi_dcmplt>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d157      	bne.n	8004040 <_strtod_l+0xa20>
 8003f90:	4630      	mov	r0, r6
 8003f92:	4639      	mov	r1, r7
 8003f94:	2200      	movs	r2, #0
 8003f96:	4b5b      	ldr	r3, [pc, #364]	@ (8004104 <_strtod_l+0xae4>)
 8003f98:	f7fc fa9e 	bl	80004d8 <__aeabi_dmul>
 8003f9c:	4606      	mov	r6, r0
 8003f9e:	460f      	mov	r7, r1
 8003fa0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8003fa4:	9606      	str	r6, [sp, #24]
 8003fa6:	9307      	str	r3, [sp, #28]
 8003fa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fac:	4d51      	ldr	r5, [pc, #324]	@ (80040f4 <_strtod_l+0xad4>)
 8003fae:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fb4:	401d      	ands	r5, r3
 8003fb6:	4b54      	ldr	r3, [pc, #336]	@ (8004108 <_strtod_l+0xae8>)
 8003fb8:	429d      	cmp	r5, r3
 8003fba:	f040 80ab 	bne.w	8004114 <_strtod_l+0xaf4>
 8003fbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fc0:	4650      	mov	r0, sl
 8003fc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8003fc6:	4659      	mov	r1, fp
 8003fc8:	f002 fe04 	bl	8006bd4 <__ulp>
 8003fcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fd0:	f7fc fa82 	bl	80004d8 <__aeabi_dmul>
 8003fd4:	4652      	mov	r2, sl
 8003fd6:	465b      	mov	r3, fp
 8003fd8:	f7fc f8c8 	bl	800016c <__adddf3>
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4945      	ldr	r1, [pc, #276]	@ (80040f4 <_strtod_l+0xad4>)
 8003fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800410c <_strtod_l+0xaec>)
 8003fe2:	4019      	ands	r1, r3
 8003fe4:	4291      	cmp	r1, r2
 8003fe6:	4682      	mov	sl, r0
 8003fe8:	d942      	bls.n	8004070 <_strtod_l+0xa50>
 8003fea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003fec:	4b43      	ldr	r3, [pc, #268]	@ (80040fc <_strtod_l+0xadc>)
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d103      	bne.n	8003ffa <_strtod_l+0x9da>
 8003ff2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f43f ad32 	beq.w	8003a5e <_strtod_l+0x43e>
 8003ffa:	f04f 3aff 	mov.w	sl, #4294967295
 8003ffe:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80040fc <_strtod_l+0xadc>
 8004002:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004004:	9805      	ldr	r0, [sp, #20]
 8004006:	f002 fab9 	bl	800657c <_Bfree>
 800400a:	4649      	mov	r1, r9
 800400c:	9805      	ldr	r0, [sp, #20]
 800400e:	f002 fab5 	bl	800657c <_Bfree>
 8004012:	4641      	mov	r1, r8
 8004014:	9805      	ldr	r0, [sp, #20]
 8004016:	f002 fab1 	bl	800657c <_Bfree>
 800401a:	4621      	mov	r1, r4
 800401c:	9805      	ldr	r0, [sp, #20]
 800401e:	f002 faad 	bl	800657c <_Bfree>
 8004022:	e61c      	b.n	8003c5e <_strtod_l+0x63e>
 8004024:	f1ba 0f01 	cmp.w	sl, #1
 8004028:	d103      	bne.n	8004032 <_strtod_l+0xa12>
 800402a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f43f ada9 	beq.w	8003b84 <_strtod_l+0x564>
 8004032:	2200      	movs	r2, #0
 8004034:	4b36      	ldr	r3, [pc, #216]	@ (8004110 <_strtod_l+0xaf0>)
 8004036:	2600      	movs	r6, #0
 8004038:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800403c:	4f30      	ldr	r7, [pc, #192]	@ (8004100 <_strtod_l+0xae0>)
 800403e:	e7b3      	b.n	8003fa8 <_strtod_l+0x988>
 8004040:	2600      	movs	r6, #0
 8004042:	4f30      	ldr	r7, [pc, #192]	@ (8004104 <_strtod_l+0xae4>)
 8004044:	e7ac      	b.n	8003fa0 <_strtod_l+0x980>
 8004046:	4630      	mov	r0, r6
 8004048:	4639      	mov	r1, r7
 800404a:	4b2e      	ldr	r3, [pc, #184]	@ (8004104 <_strtod_l+0xae4>)
 800404c:	2200      	movs	r2, #0
 800404e:	f7fc fa43 	bl	80004d8 <__aeabi_dmul>
 8004052:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004054:	4606      	mov	r6, r0
 8004056:	460f      	mov	r7, r1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0a1      	beq.n	8003fa0 <_strtod_l+0x980>
 800405c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004060:	e7a2      	b.n	8003fa8 <_strtod_l+0x988>
 8004062:	2200      	movs	r2, #0
 8004064:	4b26      	ldr	r3, [pc, #152]	@ (8004100 <_strtod_l+0xae0>)
 8004066:	4616      	mov	r6, r2
 8004068:	461f      	mov	r7, r3
 800406a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800406e:	e79b      	b.n	8003fa8 <_strtod_l+0x988>
 8004070:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8004074:	9b08      	ldr	r3, [sp, #32]
 8004076:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1c1      	bne.n	8004002 <_strtod_l+0x9e2>
 800407e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004082:	0d1b      	lsrs	r3, r3, #20
 8004084:	051b      	lsls	r3, r3, #20
 8004086:	429d      	cmp	r5, r3
 8004088:	d1bb      	bne.n	8004002 <_strtod_l+0x9e2>
 800408a:	4630      	mov	r0, r6
 800408c:	4639      	mov	r1, r7
 800408e:	f7fc ffef 	bl	8001070 <__aeabi_d2lz>
 8004092:	f7fc f9f3 	bl	800047c <__aeabi_l2d>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4630      	mov	r0, r6
 800409c:	4639      	mov	r1, r7
 800409e:	f7fc f863 	bl	8000168 <__aeabi_dsub>
 80040a2:	460b      	mov	r3, r1
 80040a4:	4602      	mov	r2, r0
 80040a6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80040aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80040ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040b0:	ea46 060a 	orr.w	r6, r6, sl
 80040b4:	431e      	orrs	r6, r3
 80040b6:	d06a      	beq.n	800418e <_strtod_l+0xb6e>
 80040b8:	a309      	add	r3, pc, #36	@ (adr r3, 80040e0 <_strtod_l+0xac0>)
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f7fc fc7d 	bl	80009bc <__aeabi_dcmplt>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	f47f acd6 	bne.w	8003a74 <_strtod_l+0x454>
 80040c8:	a307      	add	r3, pc, #28	@ (adr r3, 80040e8 <_strtod_l+0xac8>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040d2:	f7fc fc91 	bl	80009f8 <__aeabi_dcmpgt>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d093      	beq.n	8004002 <_strtod_l+0x9e2>
 80040da:	e4cb      	b.n	8003a74 <_strtod_l+0x454>
 80040dc:	f3af 8000 	nop.w
 80040e0:	94a03595 	.word	0x94a03595
 80040e4:	3fdfffff 	.word	0x3fdfffff
 80040e8:	35afe535 	.word	0x35afe535
 80040ec:	3fe00000 	.word	0x3fe00000
 80040f0:	39500000 	.word	0x39500000
 80040f4:	7ff00000 	.word	0x7ff00000
 80040f8:	000fffff 	.word	0x000fffff
 80040fc:	7fefffff 	.word	0x7fefffff
 8004100:	3ff00000 	.word	0x3ff00000
 8004104:	3fe00000 	.word	0x3fe00000
 8004108:	7fe00000 	.word	0x7fe00000
 800410c:	7c9fffff 	.word	0x7c9fffff
 8004110:	bff00000 	.word	0xbff00000
 8004114:	9b08      	ldr	r3, [sp, #32]
 8004116:	b323      	cbz	r3, 8004162 <_strtod_l+0xb42>
 8004118:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800411c:	d821      	bhi.n	8004162 <_strtod_l+0xb42>
 800411e:	a328      	add	r3, pc, #160	@ (adr r3, 80041c0 <_strtod_l+0xba0>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	4630      	mov	r0, r6
 8004126:	4639      	mov	r1, r7
 8004128:	f7fc fc52 	bl	80009d0 <__aeabi_dcmple>
 800412c:	b1a0      	cbz	r0, 8004158 <_strtod_l+0xb38>
 800412e:	4639      	mov	r1, r7
 8004130:	4630      	mov	r0, r6
 8004132:	f7fc fca9 	bl	8000a88 <__aeabi_d2uiz>
 8004136:	2801      	cmp	r0, #1
 8004138:	bf38      	it	cc
 800413a:	2001      	movcc	r0, #1
 800413c:	f7fc f952 	bl	80003e4 <__aeabi_ui2d>
 8004140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004142:	4606      	mov	r6, r0
 8004144:	460f      	mov	r7, r1
 8004146:	b9fb      	cbnz	r3, 8004188 <_strtod_l+0xb68>
 8004148:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800414c:	9014      	str	r0, [sp, #80]	@ 0x50
 800414e:	9315      	str	r3, [sp, #84]	@ 0x54
 8004150:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8004154:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004158:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800415a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800415e:	1b5b      	subs	r3, r3, r5
 8004160:	9311      	str	r3, [sp, #68]	@ 0x44
 8004162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004166:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800416a:	f002 fd33 	bl	8006bd4 <__ulp>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4650      	mov	r0, sl
 8004174:	4659      	mov	r1, fp
 8004176:	f7fc f9af 	bl	80004d8 <__aeabi_dmul>
 800417a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800417e:	f7fb fff5 	bl	800016c <__adddf3>
 8004182:	4682      	mov	sl, r0
 8004184:	468b      	mov	fp, r1
 8004186:	e775      	b.n	8004074 <_strtod_l+0xa54>
 8004188:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800418c:	e7e0      	b.n	8004150 <_strtod_l+0xb30>
 800418e:	a30e      	add	r3, pc, #56	@ (adr r3, 80041c8 <_strtod_l+0xba8>)
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f7fc fc12 	bl	80009bc <__aeabi_dcmplt>
 8004198:	e79d      	b.n	80040d6 <_strtod_l+0xab6>
 800419a:	2300      	movs	r3, #0
 800419c:	930e      	str	r3, [sp, #56]	@ 0x38
 800419e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80041a0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	f7ff ba79 	b.w	800369a <_strtod_l+0x7a>
 80041a8:	2a65      	cmp	r2, #101	@ 0x65
 80041aa:	f43f ab72 	beq.w	8003892 <_strtod_l+0x272>
 80041ae:	2a45      	cmp	r2, #69	@ 0x45
 80041b0:	f43f ab6f 	beq.w	8003892 <_strtod_l+0x272>
 80041b4:	2301      	movs	r3, #1
 80041b6:	f7ff bbaa 	b.w	800390e <_strtod_l+0x2ee>
 80041ba:	bf00      	nop
 80041bc:	f3af 8000 	nop.w
 80041c0:	ffc00000 	.word	0xffc00000
 80041c4:	41dfffff 	.word	0x41dfffff
 80041c8:	94a03595 	.word	0x94a03595
 80041cc:	3fcfffff 	.word	0x3fcfffff

080041d0 <strtod>:
 80041d0:	460a      	mov	r2, r1
 80041d2:	4601      	mov	r1, r0
 80041d4:	4802      	ldr	r0, [pc, #8]	@ (80041e0 <strtod+0x10>)
 80041d6:	4b03      	ldr	r3, [pc, #12]	@ (80041e4 <strtod+0x14>)
 80041d8:	6800      	ldr	r0, [r0, #0]
 80041da:	f7ff ba21 	b.w	8003620 <_strtod_l>
 80041de:	bf00      	nop
 80041e0:	200001a4 	.word	0x200001a4
 80041e4:	20000038 	.word	0x20000038

080041e8 <__cvt>:
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ee:	461d      	mov	r5, r3
 80041f0:	bfbb      	ittet	lt
 80041f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80041f6:	461d      	movlt	r5, r3
 80041f8:	2300      	movge	r3, #0
 80041fa:	232d      	movlt	r3, #45	@ 0x2d
 80041fc:	b088      	sub	sp, #32
 80041fe:	4614      	mov	r4, r2
 8004200:	bfb8      	it	lt
 8004202:	4614      	movlt	r4, r2
 8004204:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004206:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004208:	7013      	strb	r3, [r2, #0]
 800420a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800420c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004210:	f023 0820 	bic.w	r8, r3, #32
 8004214:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004218:	d005      	beq.n	8004226 <__cvt+0x3e>
 800421a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800421e:	d100      	bne.n	8004222 <__cvt+0x3a>
 8004220:	3601      	adds	r6, #1
 8004222:	2302      	movs	r3, #2
 8004224:	e000      	b.n	8004228 <__cvt+0x40>
 8004226:	2303      	movs	r3, #3
 8004228:	aa07      	add	r2, sp, #28
 800422a:	9204      	str	r2, [sp, #16]
 800422c:	aa06      	add	r2, sp, #24
 800422e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004232:	e9cd 3600 	strd	r3, r6, [sp]
 8004236:	4622      	mov	r2, r4
 8004238:	462b      	mov	r3, r5
 800423a:	f000 ff41 	bl	80050c0 <_dtoa_r>
 800423e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004242:	4607      	mov	r7, r0
 8004244:	d119      	bne.n	800427a <__cvt+0x92>
 8004246:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004248:	07db      	lsls	r3, r3, #31
 800424a:	d50e      	bpl.n	800426a <__cvt+0x82>
 800424c:	eb00 0906 	add.w	r9, r0, r6
 8004250:	2200      	movs	r2, #0
 8004252:	2300      	movs	r3, #0
 8004254:	4620      	mov	r0, r4
 8004256:	4629      	mov	r1, r5
 8004258:	f7fc fba6 	bl	80009a8 <__aeabi_dcmpeq>
 800425c:	b108      	cbz	r0, 8004262 <__cvt+0x7a>
 800425e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004262:	2230      	movs	r2, #48	@ 0x30
 8004264:	9b07      	ldr	r3, [sp, #28]
 8004266:	454b      	cmp	r3, r9
 8004268:	d31e      	bcc.n	80042a8 <__cvt+0xc0>
 800426a:	4638      	mov	r0, r7
 800426c:	9b07      	ldr	r3, [sp, #28]
 800426e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004270:	1bdb      	subs	r3, r3, r7
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	b008      	add	sp, #32
 8004276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800427e:	eb00 0906 	add.w	r9, r0, r6
 8004282:	d1e5      	bne.n	8004250 <__cvt+0x68>
 8004284:	7803      	ldrb	r3, [r0, #0]
 8004286:	2b30      	cmp	r3, #48	@ 0x30
 8004288:	d10a      	bne.n	80042a0 <__cvt+0xb8>
 800428a:	2200      	movs	r2, #0
 800428c:	2300      	movs	r3, #0
 800428e:	4620      	mov	r0, r4
 8004290:	4629      	mov	r1, r5
 8004292:	f7fc fb89 	bl	80009a8 <__aeabi_dcmpeq>
 8004296:	b918      	cbnz	r0, 80042a0 <__cvt+0xb8>
 8004298:	f1c6 0601 	rsb	r6, r6, #1
 800429c:	f8ca 6000 	str.w	r6, [sl]
 80042a0:	f8da 3000 	ldr.w	r3, [sl]
 80042a4:	4499      	add	r9, r3
 80042a6:	e7d3      	b.n	8004250 <__cvt+0x68>
 80042a8:	1c59      	adds	r1, r3, #1
 80042aa:	9107      	str	r1, [sp, #28]
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e7d9      	b.n	8004264 <__cvt+0x7c>

080042b0 <__exponent>:
 80042b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042b2:	2900      	cmp	r1, #0
 80042b4:	bfb6      	itet	lt
 80042b6:	232d      	movlt	r3, #45	@ 0x2d
 80042b8:	232b      	movge	r3, #43	@ 0x2b
 80042ba:	4249      	neglt	r1, r1
 80042bc:	2909      	cmp	r1, #9
 80042be:	7002      	strb	r2, [r0, #0]
 80042c0:	7043      	strb	r3, [r0, #1]
 80042c2:	dd29      	ble.n	8004318 <__exponent+0x68>
 80042c4:	f10d 0307 	add.w	r3, sp, #7
 80042c8:	461d      	mov	r5, r3
 80042ca:	270a      	movs	r7, #10
 80042cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80042d0:	461a      	mov	r2, r3
 80042d2:	fb07 1416 	mls	r4, r7, r6, r1
 80042d6:	3430      	adds	r4, #48	@ 0x30
 80042d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80042dc:	460c      	mov	r4, r1
 80042de:	2c63      	cmp	r4, #99	@ 0x63
 80042e0:	4631      	mov	r1, r6
 80042e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80042e6:	dcf1      	bgt.n	80042cc <__exponent+0x1c>
 80042e8:	3130      	adds	r1, #48	@ 0x30
 80042ea:	1e94      	subs	r4, r2, #2
 80042ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80042f0:	4623      	mov	r3, r4
 80042f2:	1c41      	adds	r1, r0, #1
 80042f4:	42ab      	cmp	r3, r5
 80042f6:	d30a      	bcc.n	800430e <__exponent+0x5e>
 80042f8:	f10d 0309 	add.w	r3, sp, #9
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	42ac      	cmp	r4, r5
 8004300:	bf88      	it	hi
 8004302:	2300      	movhi	r3, #0
 8004304:	3302      	adds	r3, #2
 8004306:	4403      	add	r3, r0
 8004308:	1a18      	subs	r0, r3, r0
 800430a:	b003      	add	sp, #12
 800430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800430e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004312:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004316:	e7ed      	b.n	80042f4 <__exponent+0x44>
 8004318:	2330      	movs	r3, #48	@ 0x30
 800431a:	3130      	adds	r1, #48	@ 0x30
 800431c:	7083      	strb	r3, [r0, #2]
 800431e:	70c1      	strb	r1, [r0, #3]
 8004320:	1d03      	adds	r3, r0, #4
 8004322:	e7f1      	b.n	8004308 <__exponent+0x58>

08004324 <_printf_float>:
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004328:	b091      	sub	sp, #68	@ 0x44
 800432a:	460c      	mov	r4, r1
 800432c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004330:	4616      	mov	r6, r2
 8004332:	461f      	mov	r7, r3
 8004334:	4605      	mov	r5, r0
 8004336:	f000 fd79 	bl	8004e2c <_localeconv_r>
 800433a:	6803      	ldr	r3, [r0, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	9308      	str	r3, [sp, #32]
 8004340:	f7fb ff06 	bl	8000150 <strlen>
 8004344:	2300      	movs	r3, #0
 8004346:	930e      	str	r3, [sp, #56]	@ 0x38
 8004348:	f8d8 3000 	ldr.w	r3, [r8]
 800434c:	9009      	str	r0, [sp, #36]	@ 0x24
 800434e:	3307      	adds	r3, #7
 8004350:	f023 0307 	bic.w	r3, r3, #7
 8004354:	f103 0208 	add.w	r2, r3, #8
 8004358:	f894 a018 	ldrb.w	sl, [r4, #24]
 800435c:	f8d4 b000 	ldr.w	fp, [r4]
 8004360:	f8c8 2000 	str.w	r2, [r8]
 8004364:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004368:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800436c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800436e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004372:	f04f 32ff 	mov.w	r2, #4294967295
 8004376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800437a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800437e:	4b9c      	ldr	r3, [pc, #624]	@ (80045f0 <_printf_float+0x2cc>)
 8004380:	f7fc fb44 	bl	8000a0c <__aeabi_dcmpun>
 8004384:	bb70      	cbnz	r0, 80043e4 <_printf_float+0xc0>
 8004386:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	4b98      	ldr	r3, [pc, #608]	@ (80045f0 <_printf_float+0x2cc>)
 8004390:	f7fc fb1e 	bl	80009d0 <__aeabi_dcmple>
 8004394:	bb30      	cbnz	r0, 80043e4 <_printf_float+0xc0>
 8004396:	2200      	movs	r2, #0
 8004398:	2300      	movs	r3, #0
 800439a:	4640      	mov	r0, r8
 800439c:	4649      	mov	r1, r9
 800439e:	f7fc fb0d 	bl	80009bc <__aeabi_dcmplt>
 80043a2:	b110      	cbz	r0, 80043aa <_printf_float+0x86>
 80043a4:	232d      	movs	r3, #45	@ 0x2d
 80043a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043aa:	4a92      	ldr	r2, [pc, #584]	@ (80045f4 <_printf_float+0x2d0>)
 80043ac:	4b92      	ldr	r3, [pc, #584]	@ (80045f8 <_printf_float+0x2d4>)
 80043ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80043b2:	bf8c      	ite	hi
 80043b4:	4690      	movhi	r8, r2
 80043b6:	4698      	movls	r8, r3
 80043b8:	2303      	movs	r3, #3
 80043ba:	f04f 0900 	mov.w	r9, #0
 80043be:	6123      	str	r3, [r4, #16]
 80043c0:	f02b 0304 	bic.w	r3, fp, #4
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	4633      	mov	r3, r6
 80043c8:	4621      	mov	r1, r4
 80043ca:	4628      	mov	r0, r5
 80043cc:	9700      	str	r7, [sp, #0]
 80043ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 80043d0:	f000 f9d4 	bl	800477c <_printf_common>
 80043d4:	3001      	adds	r0, #1
 80043d6:	f040 8090 	bne.w	80044fa <_printf_float+0x1d6>
 80043da:	f04f 30ff 	mov.w	r0, #4294967295
 80043de:	b011      	add	sp, #68	@ 0x44
 80043e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e4:	4642      	mov	r2, r8
 80043e6:	464b      	mov	r3, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	4649      	mov	r1, r9
 80043ec:	f7fc fb0e 	bl	8000a0c <__aeabi_dcmpun>
 80043f0:	b148      	cbz	r0, 8004406 <_printf_float+0xe2>
 80043f2:	464b      	mov	r3, r9
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bfb8      	it	lt
 80043f8:	232d      	movlt	r3, #45	@ 0x2d
 80043fa:	4a80      	ldr	r2, [pc, #512]	@ (80045fc <_printf_float+0x2d8>)
 80043fc:	bfb8      	it	lt
 80043fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004402:	4b7f      	ldr	r3, [pc, #508]	@ (8004600 <_printf_float+0x2dc>)
 8004404:	e7d3      	b.n	80043ae <_printf_float+0x8a>
 8004406:	6863      	ldr	r3, [r4, #4]
 8004408:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	d13f      	bne.n	8004490 <_printf_float+0x16c>
 8004410:	2306      	movs	r3, #6
 8004412:	6063      	str	r3, [r4, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800441a:	6023      	str	r3, [r4, #0]
 800441c:	9206      	str	r2, [sp, #24]
 800441e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004420:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004424:	aa0d      	add	r2, sp, #52	@ 0x34
 8004426:	9203      	str	r2, [sp, #12]
 8004428:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800442c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004430:	6863      	ldr	r3, [r4, #4]
 8004432:	4642      	mov	r2, r8
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	4628      	mov	r0, r5
 8004438:	464b      	mov	r3, r9
 800443a:	910a      	str	r1, [sp, #40]	@ 0x28
 800443c:	f7ff fed4 	bl	80041e8 <__cvt>
 8004440:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004442:	4680      	mov	r8, r0
 8004444:	2947      	cmp	r1, #71	@ 0x47
 8004446:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004448:	d128      	bne.n	800449c <_printf_float+0x178>
 800444a:	1cc8      	adds	r0, r1, #3
 800444c:	db02      	blt.n	8004454 <_printf_float+0x130>
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	4299      	cmp	r1, r3
 8004452:	dd40      	ble.n	80044d6 <_printf_float+0x1b2>
 8004454:	f1aa 0a02 	sub.w	sl, sl, #2
 8004458:	fa5f fa8a 	uxtb.w	sl, sl
 800445c:	4652      	mov	r2, sl
 800445e:	3901      	subs	r1, #1
 8004460:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004464:	910d      	str	r1, [sp, #52]	@ 0x34
 8004466:	f7ff ff23 	bl	80042b0 <__exponent>
 800446a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800446c:	4681      	mov	r9, r0
 800446e:	1813      	adds	r3, r2, r0
 8004470:	2a01      	cmp	r2, #1
 8004472:	6123      	str	r3, [r4, #16]
 8004474:	dc02      	bgt.n	800447c <_printf_float+0x158>
 8004476:	6822      	ldr	r2, [r4, #0]
 8004478:	07d2      	lsls	r2, r2, #31
 800447a:	d501      	bpl.n	8004480 <_printf_float+0x15c>
 800447c:	3301      	adds	r3, #1
 800447e:	6123      	str	r3, [r4, #16]
 8004480:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004484:	2b00      	cmp	r3, #0
 8004486:	d09e      	beq.n	80043c6 <_printf_float+0xa2>
 8004488:	232d      	movs	r3, #45	@ 0x2d
 800448a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800448e:	e79a      	b.n	80043c6 <_printf_float+0xa2>
 8004490:	2947      	cmp	r1, #71	@ 0x47
 8004492:	d1bf      	bne.n	8004414 <_printf_float+0xf0>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1bd      	bne.n	8004414 <_printf_float+0xf0>
 8004498:	2301      	movs	r3, #1
 800449a:	e7ba      	b.n	8004412 <_printf_float+0xee>
 800449c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80044a0:	d9dc      	bls.n	800445c <_printf_float+0x138>
 80044a2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80044a6:	d118      	bne.n	80044da <_printf_float+0x1b6>
 80044a8:	2900      	cmp	r1, #0
 80044aa:	6863      	ldr	r3, [r4, #4]
 80044ac:	dd0b      	ble.n	80044c6 <_printf_float+0x1a2>
 80044ae:	6121      	str	r1, [r4, #16]
 80044b0:	b913      	cbnz	r3, 80044b8 <_printf_float+0x194>
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	07d0      	lsls	r0, r2, #31
 80044b6:	d502      	bpl.n	80044be <_printf_float+0x19a>
 80044b8:	3301      	adds	r3, #1
 80044ba:	440b      	add	r3, r1
 80044bc:	6123      	str	r3, [r4, #16]
 80044be:	f04f 0900 	mov.w	r9, #0
 80044c2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80044c4:	e7dc      	b.n	8004480 <_printf_float+0x15c>
 80044c6:	b913      	cbnz	r3, 80044ce <_printf_float+0x1aa>
 80044c8:	6822      	ldr	r2, [r4, #0]
 80044ca:	07d2      	lsls	r2, r2, #31
 80044cc:	d501      	bpl.n	80044d2 <_printf_float+0x1ae>
 80044ce:	3302      	adds	r3, #2
 80044d0:	e7f4      	b.n	80044bc <_printf_float+0x198>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e7f2      	b.n	80044bc <_printf_float+0x198>
 80044d6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80044da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044dc:	4299      	cmp	r1, r3
 80044de:	db05      	blt.n	80044ec <_printf_float+0x1c8>
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	6121      	str	r1, [r4, #16]
 80044e4:	07d8      	lsls	r0, r3, #31
 80044e6:	d5ea      	bpl.n	80044be <_printf_float+0x19a>
 80044e8:	1c4b      	adds	r3, r1, #1
 80044ea:	e7e7      	b.n	80044bc <_printf_float+0x198>
 80044ec:	2900      	cmp	r1, #0
 80044ee:	bfcc      	ite	gt
 80044f0:	2201      	movgt	r2, #1
 80044f2:	f1c1 0202 	rsble	r2, r1, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	e7e0      	b.n	80044bc <_printf_float+0x198>
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	055a      	lsls	r2, r3, #21
 80044fe:	d407      	bmi.n	8004510 <_printf_float+0x1ec>
 8004500:	6923      	ldr	r3, [r4, #16]
 8004502:	4642      	mov	r2, r8
 8004504:	4631      	mov	r1, r6
 8004506:	4628      	mov	r0, r5
 8004508:	47b8      	blx	r7
 800450a:	3001      	adds	r0, #1
 800450c:	d12b      	bne.n	8004566 <_printf_float+0x242>
 800450e:	e764      	b.n	80043da <_printf_float+0xb6>
 8004510:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004514:	f240 80dc 	bls.w	80046d0 <_printf_float+0x3ac>
 8004518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800451c:	2200      	movs	r2, #0
 800451e:	2300      	movs	r3, #0
 8004520:	f7fc fa42 	bl	80009a8 <__aeabi_dcmpeq>
 8004524:	2800      	cmp	r0, #0
 8004526:	d033      	beq.n	8004590 <_printf_float+0x26c>
 8004528:	2301      	movs	r3, #1
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	4a35      	ldr	r2, [pc, #212]	@ (8004604 <_printf_float+0x2e0>)
 8004530:	47b8      	blx	r7
 8004532:	3001      	adds	r0, #1
 8004534:	f43f af51 	beq.w	80043da <_printf_float+0xb6>
 8004538:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800453c:	4543      	cmp	r3, r8
 800453e:	db02      	blt.n	8004546 <_printf_float+0x222>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	07d8      	lsls	r0, r3, #31
 8004544:	d50f      	bpl.n	8004566 <_printf_float+0x242>
 8004546:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f af42 	beq.w	80043da <_printf_float+0xb6>
 8004556:	f04f 0900 	mov.w	r9, #0
 800455a:	f108 38ff 	add.w	r8, r8, #4294967295
 800455e:	f104 0a1a 	add.w	sl, r4, #26
 8004562:	45c8      	cmp	r8, r9
 8004564:	dc09      	bgt.n	800457a <_printf_float+0x256>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	079b      	lsls	r3, r3, #30
 800456a:	f100 8102 	bmi.w	8004772 <_printf_float+0x44e>
 800456e:	68e0      	ldr	r0, [r4, #12]
 8004570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004572:	4298      	cmp	r0, r3
 8004574:	bfb8      	it	lt
 8004576:	4618      	movlt	r0, r3
 8004578:	e731      	b.n	80043de <_printf_float+0xba>
 800457a:	2301      	movs	r3, #1
 800457c:	4652      	mov	r2, sl
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	47b8      	blx	r7
 8004584:	3001      	adds	r0, #1
 8004586:	f43f af28 	beq.w	80043da <_printf_float+0xb6>
 800458a:	f109 0901 	add.w	r9, r9, #1
 800458e:	e7e8      	b.n	8004562 <_printf_float+0x23e>
 8004590:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004592:	2b00      	cmp	r3, #0
 8004594:	dc38      	bgt.n	8004608 <_printf_float+0x2e4>
 8004596:	2301      	movs	r3, #1
 8004598:	4631      	mov	r1, r6
 800459a:	4628      	mov	r0, r5
 800459c:	4a19      	ldr	r2, [pc, #100]	@ (8004604 <_printf_float+0x2e0>)
 800459e:	47b8      	blx	r7
 80045a0:	3001      	adds	r0, #1
 80045a2:	f43f af1a 	beq.w	80043da <_printf_float+0xb6>
 80045a6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80045aa:	ea59 0303 	orrs.w	r3, r9, r3
 80045ae:	d102      	bne.n	80045b6 <_printf_float+0x292>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	07d9      	lsls	r1, r3, #31
 80045b4:	d5d7      	bpl.n	8004566 <_printf_float+0x242>
 80045b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	f43f af0a 	beq.w	80043da <_printf_float+0xb6>
 80045c6:	f04f 0a00 	mov.w	sl, #0
 80045ca:	f104 0b1a 	add.w	fp, r4, #26
 80045ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045d0:	425b      	negs	r3, r3
 80045d2:	4553      	cmp	r3, sl
 80045d4:	dc01      	bgt.n	80045da <_printf_float+0x2b6>
 80045d6:	464b      	mov	r3, r9
 80045d8:	e793      	b.n	8004502 <_printf_float+0x1de>
 80045da:	2301      	movs	r3, #1
 80045dc:	465a      	mov	r2, fp
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b8      	blx	r7
 80045e4:	3001      	adds	r0, #1
 80045e6:	f43f aef8 	beq.w	80043da <_printf_float+0xb6>
 80045ea:	f10a 0a01 	add.w	sl, sl, #1
 80045ee:	e7ee      	b.n	80045ce <_printf_float+0x2aa>
 80045f0:	7fefffff 	.word	0x7fefffff
 80045f4:	08007938 	.word	0x08007938
 80045f8:	08007934 	.word	0x08007934
 80045fc:	08007940 	.word	0x08007940
 8004600:	0800793c 	.word	0x0800793c
 8004604:	08007944 	.word	0x08007944
 8004608:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800460a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800460e:	4553      	cmp	r3, sl
 8004610:	bfa8      	it	ge
 8004612:	4653      	movge	r3, sl
 8004614:	2b00      	cmp	r3, #0
 8004616:	4699      	mov	r9, r3
 8004618:	dc36      	bgt.n	8004688 <_printf_float+0x364>
 800461a:	f04f 0b00 	mov.w	fp, #0
 800461e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004622:	f104 021a 	add.w	r2, r4, #26
 8004626:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004628:	930a      	str	r3, [sp, #40]	@ 0x28
 800462a:	eba3 0309 	sub.w	r3, r3, r9
 800462e:	455b      	cmp	r3, fp
 8004630:	dc31      	bgt.n	8004696 <_printf_float+0x372>
 8004632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004634:	459a      	cmp	sl, r3
 8004636:	dc3a      	bgt.n	80046ae <_printf_float+0x38a>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	07da      	lsls	r2, r3, #31
 800463c:	d437      	bmi.n	80046ae <_printf_float+0x38a>
 800463e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004640:	ebaa 0903 	sub.w	r9, sl, r3
 8004644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004646:	ebaa 0303 	sub.w	r3, sl, r3
 800464a:	4599      	cmp	r9, r3
 800464c:	bfa8      	it	ge
 800464e:	4699      	movge	r9, r3
 8004650:	f1b9 0f00 	cmp.w	r9, #0
 8004654:	dc33      	bgt.n	80046be <_printf_float+0x39a>
 8004656:	f04f 0800 	mov.w	r8, #0
 800465a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800465e:	f104 0b1a 	add.w	fp, r4, #26
 8004662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004664:	ebaa 0303 	sub.w	r3, sl, r3
 8004668:	eba3 0309 	sub.w	r3, r3, r9
 800466c:	4543      	cmp	r3, r8
 800466e:	f77f af7a 	ble.w	8004566 <_printf_float+0x242>
 8004672:	2301      	movs	r3, #1
 8004674:	465a      	mov	r2, fp
 8004676:	4631      	mov	r1, r6
 8004678:	4628      	mov	r0, r5
 800467a:	47b8      	blx	r7
 800467c:	3001      	adds	r0, #1
 800467e:	f43f aeac 	beq.w	80043da <_printf_float+0xb6>
 8004682:	f108 0801 	add.w	r8, r8, #1
 8004686:	e7ec      	b.n	8004662 <_printf_float+0x33e>
 8004688:	4642      	mov	r2, r8
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	d1c2      	bne.n	800461a <_printf_float+0x2f6>
 8004694:	e6a1      	b.n	80043da <_printf_float+0xb6>
 8004696:	2301      	movs	r3, #1
 8004698:	4631      	mov	r1, r6
 800469a:	4628      	mov	r0, r5
 800469c:	920a      	str	r2, [sp, #40]	@ 0x28
 800469e:	47b8      	blx	r7
 80046a0:	3001      	adds	r0, #1
 80046a2:	f43f ae9a 	beq.w	80043da <_printf_float+0xb6>
 80046a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80046a8:	f10b 0b01 	add.w	fp, fp, #1
 80046ac:	e7bb      	b.n	8004626 <_printf_float+0x302>
 80046ae:	4631      	mov	r1, r6
 80046b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046b4:	4628      	mov	r0, r5
 80046b6:	47b8      	blx	r7
 80046b8:	3001      	adds	r0, #1
 80046ba:	d1c0      	bne.n	800463e <_printf_float+0x31a>
 80046bc:	e68d      	b.n	80043da <_printf_float+0xb6>
 80046be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80046c0:	464b      	mov	r3, r9
 80046c2:	4631      	mov	r1, r6
 80046c4:	4628      	mov	r0, r5
 80046c6:	4442      	add	r2, r8
 80046c8:	47b8      	blx	r7
 80046ca:	3001      	adds	r0, #1
 80046cc:	d1c3      	bne.n	8004656 <_printf_float+0x332>
 80046ce:	e684      	b.n	80043da <_printf_float+0xb6>
 80046d0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80046d4:	f1ba 0f01 	cmp.w	sl, #1
 80046d8:	dc01      	bgt.n	80046de <_printf_float+0x3ba>
 80046da:	07db      	lsls	r3, r3, #31
 80046dc:	d536      	bpl.n	800474c <_printf_float+0x428>
 80046de:	2301      	movs	r3, #1
 80046e0:	4642      	mov	r2, r8
 80046e2:	4631      	mov	r1, r6
 80046e4:	4628      	mov	r0, r5
 80046e6:	47b8      	blx	r7
 80046e8:	3001      	adds	r0, #1
 80046ea:	f43f ae76 	beq.w	80043da <_printf_float+0xb6>
 80046ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046f2:	4631      	mov	r1, r6
 80046f4:	4628      	mov	r0, r5
 80046f6:	47b8      	blx	r7
 80046f8:	3001      	adds	r0, #1
 80046fa:	f43f ae6e 	beq.w	80043da <_printf_float+0xb6>
 80046fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004702:	2200      	movs	r2, #0
 8004704:	2300      	movs	r3, #0
 8004706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800470a:	f7fc f94d 	bl	80009a8 <__aeabi_dcmpeq>
 800470e:	b9c0      	cbnz	r0, 8004742 <_printf_float+0x41e>
 8004710:	4653      	mov	r3, sl
 8004712:	f108 0201 	add.w	r2, r8, #1
 8004716:	4631      	mov	r1, r6
 8004718:	4628      	mov	r0, r5
 800471a:	47b8      	blx	r7
 800471c:	3001      	adds	r0, #1
 800471e:	d10c      	bne.n	800473a <_printf_float+0x416>
 8004720:	e65b      	b.n	80043da <_printf_float+0xb6>
 8004722:	2301      	movs	r3, #1
 8004724:	465a      	mov	r2, fp
 8004726:	4631      	mov	r1, r6
 8004728:	4628      	mov	r0, r5
 800472a:	47b8      	blx	r7
 800472c:	3001      	adds	r0, #1
 800472e:	f43f ae54 	beq.w	80043da <_printf_float+0xb6>
 8004732:	f108 0801 	add.w	r8, r8, #1
 8004736:	45d0      	cmp	r8, sl
 8004738:	dbf3      	blt.n	8004722 <_printf_float+0x3fe>
 800473a:	464b      	mov	r3, r9
 800473c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004740:	e6e0      	b.n	8004504 <_printf_float+0x1e0>
 8004742:	f04f 0800 	mov.w	r8, #0
 8004746:	f104 0b1a 	add.w	fp, r4, #26
 800474a:	e7f4      	b.n	8004736 <_printf_float+0x412>
 800474c:	2301      	movs	r3, #1
 800474e:	4642      	mov	r2, r8
 8004750:	e7e1      	b.n	8004716 <_printf_float+0x3f2>
 8004752:	2301      	movs	r3, #1
 8004754:	464a      	mov	r2, r9
 8004756:	4631      	mov	r1, r6
 8004758:	4628      	mov	r0, r5
 800475a:	47b8      	blx	r7
 800475c:	3001      	adds	r0, #1
 800475e:	f43f ae3c 	beq.w	80043da <_printf_float+0xb6>
 8004762:	f108 0801 	add.w	r8, r8, #1
 8004766:	68e3      	ldr	r3, [r4, #12]
 8004768:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800476a:	1a5b      	subs	r3, r3, r1
 800476c:	4543      	cmp	r3, r8
 800476e:	dcf0      	bgt.n	8004752 <_printf_float+0x42e>
 8004770:	e6fd      	b.n	800456e <_printf_float+0x24a>
 8004772:	f04f 0800 	mov.w	r8, #0
 8004776:	f104 0919 	add.w	r9, r4, #25
 800477a:	e7f4      	b.n	8004766 <_printf_float+0x442>

0800477c <_printf_common>:
 800477c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004780:	4616      	mov	r6, r2
 8004782:	4698      	mov	r8, r3
 8004784:	688a      	ldr	r2, [r1, #8]
 8004786:	690b      	ldr	r3, [r1, #16]
 8004788:	4607      	mov	r7, r0
 800478a:	4293      	cmp	r3, r2
 800478c:	bfb8      	it	lt
 800478e:	4613      	movlt	r3, r2
 8004790:	6033      	str	r3, [r6, #0]
 8004792:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004796:	460c      	mov	r4, r1
 8004798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800479c:	b10a      	cbz	r2, 80047a2 <_printf_common+0x26>
 800479e:	3301      	adds	r3, #1
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	0699      	lsls	r1, r3, #26
 80047a6:	bf42      	ittt	mi
 80047a8:	6833      	ldrmi	r3, [r6, #0]
 80047aa:	3302      	addmi	r3, #2
 80047ac:	6033      	strmi	r3, [r6, #0]
 80047ae:	6825      	ldr	r5, [r4, #0]
 80047b0:	f015 0506 	ands.w	r5, r5, #6
 80047b4:	d106      	bne.n	80047c4 <_printf_common+0x48>
 80047b6:	f104 0a19 	add.w	sl, r4, #25
 80047ba:	68e3      	ldr	r3, [r4, #12]
 80047bc:	6832      	ldr	r2, [r6, #0]
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	42ab      	cmp	r3, r5
 80047c2:	dc2b      	bgt.n	800481c <_printf_common+0xa0>
 80047c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	3b00      	subs	r3, #0
 80047cc:	bf18      	it	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	0692      	lsls	r2, r2, #26
 80047d2:	d430      	bmi.n	8004836 <_printf_common+0xba>
 80047d4:	4641      	mov	r1, r8
 80047d6:	4638      	mov	r0, r7
 80047d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047dc:	47c8      	blx	r9
 80047de:	3001      	adds	r0, #1
 80047e0:	d023      	beq.n	800482a <_printf_common+0xae>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	6922      	ldr	r2, [r4, #16]
 80047e6:	f003 0306 	and.w	r3, r3, #6
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	bf14      	ite	ne
 80047ee:	2500      	movne	r5, #0
 80047f0:	6833      	ldreq	r3, [r6, #0]
 80047f2:	f04f 0600 	mov.w	r6, #0
 80047f6:	bf08      	it	eq
 80047f8:	68e5      	ldreq	r5, [r4, #12]
 80047fa:	f104 041a 	add.w	r4, r4, #26
 80047fe:	bf08      	it	eq
 8004800:	1aed      	subeq	r5, r5, r3
 8004802:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004806:	bf08      	it	eq
 8004808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800480c:	4293      	cmp	r3, r2
 800480e:	bfc4      	itt	gt
 8004810:	1a9b      	subgt	r3, r3, r2
 8004812:	18ed      	addgt	r5, r5, r3
 8004814:	42b5      	cmp	r5, r6
 8004816:	d11a      	bne.n	800484e <_printf_common+0xd2>
 8004818:	2000      	movs	r0, #0
 800481a:	e008      	b.n	800482e <_printf_common+0xb2>
 800481c:	2301      	movs	r3, #1
 800481e:	4652      	mov	r2, sl
 8004820:	4641      	mov	r1, r8
 8004822:	4638      	mov	r0, r7
 8004824:	47c8      	blx	r9
 8004826:	3001      	adds	r0, #1
 8004828:	d103      	bne.n	8004832 <_printf_common+0xb6>
 800482a:	f04f 30ff 	mov.w	r0, #4294967295
 800482e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004832:	3501      	adds	r5, #1
 8004834:	e7c1      	b.n	80047ba <_printf_common+0x3e>
 8004836:	2030      	movs	r0, #48	@ 0x30
 8004838:	18e1      	adds	r1, r4, r3
 800483a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004844:	4422      	add	r2, r4
 8004846:	3302      	adds	r3, #2
 8004848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800484c:	e7c2      	b.n	80047d4 <_printf_common+0x58>
 800484e:	2301      	movs	r3, #1
 8004850:	4622      	mov	r2, r4
 8004852:	4641      	mov	r1, r8
 8004854:	4638      	mov	r0, r7
 8004856:	47c8      	blx	r9
 8004858:	3001      	adds	r0, #1
 800485a:	d0e6      	beq.n	800482a <_printf_common+0xae>
 800485c:	3601      	adds	r6, #1
 800485e:	e7d9      	b.n	8004814 <_printf_common+0x98>

08004860 <_printf_i>:
 8004860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004864:	7e0f      	ldrb	r7, [r1, #24]
 8004866:	4691      	mov	r9, r2
 8004868:	2f78      	cmp	r7, #120	@ 0x78
 800486a:	4680      	mov	r8, r0
 800486c:	460c      	mov	r4, r1
 800486e:	469a      	mov	sl, r3
 8004870:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004872:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004876:	d807      	bhi.n	8004888 <_printf_i+0x28>
 8004878:	2f62      	cmp	r7, #98	@ 0x62
 800487a:	d80a      	bhi.n	8004892 <_printf_i+0x32>
 800487c:	2f00      	cmp	r7, #0
 800487e:	f000 80d1 	beq.w	8004a24 <_printf_i+0x1c4>
 8004882:	2f58      	cmp	r7, #88	@ 0x58
 8004884:	f000 80b8 	beq.w	80049f8 <_printf_i+0x198>
 8004888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800488c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004890:	e03a      	b.n	8004908 <_printf_i+0xa8>
 8004892:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004896:	2b15      	cmp	r3, #21
 8004898:	d8f6      	bhi.n	8004888 <_printf_i+0x28>
 800489a:	a101      	add	r1, pc, #4	@ (adr r1, 80048a0 <_printf_i+0x40>)
 800489c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048a0:	080048f9 	.word	0x080048f9
 80048a4:	0800490d 	.word	0x0800490d
 80048a8:	08004889 	.word	0x08004889
 80048ac:	08004889 	.word	0x08004889
 80048b0:	08004889 	.word	0x08004889
 80048b4:	08004889 	.word	0x08004889
 80048b8:	0800490d 	.word	0x0800490d
 80048bc:	08004889 	.word	0x08004889
 80048c0:	08004889 	.word	0x08004889
 80048c4:	08004889 	.word	0x08004889
 80048c8:	08004889 	.word	0x08004889
 80048cc:	08004a0b 	.word	0x08004a0b
 80048d0:	08004937 	.word	0x08004937
 80048d4:	080049c5 	.word	0x080049c5
 80048d8:	08004889 	.word	0x08004889
 80048dc:	08004889 	.word	0x08004889
 80048e0:	08004a2d 	.word	0x08004a2d
 80048e4:	08004889 	.word	0x08004889
 80048e8:	08004937 	.word	0x08004937
 80048ec:	08004889 	.word	0x08004889
 80048f0:	08004889 	.word	0x08004889
 80048f4:	080049cd 	.word	0x080049cd
 80048f8:	6833      	ldr	r3, [r6, #0]
 80048fa:	1d1a      	adds	r2, r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6032      	str	r2, [r6, #0]
 8004900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004904:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004908:	2301      	movs	r3, #1
 800490a:	e09c      	b.n	8004a46 <_printf_i+0x1e6>
 800490c:	6833      	ldr	r3, [r6, #0]
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	1d19      	adds	r1, r3, #4
 8004912:	6031      	str	r1, [r6, #0]
 8004914:	0606      	lsls	r6, r0, #24
 8004916:	d501      	bpl.n	800491c <_printf_i+0xbc>
 8004918:	681d      	ldr	r5, [r3, #0]
 800491a:	e003      	b.n	8004924 <_printf_i+0xc4>
 800491c:	0645      	lsls	r5, r0, #25
 800491e:	d5fb      	bpl.n	8004918 <_printf_i+0xb8>
 8004920:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004924:	2d00      	cmp	r5, #0
 8004926:	da03      	bge.n	8004930 <_printf_i+0xd0>
 8004928:	232d      	movs	r3, #45	@ 0x2d
 800492a:	426d      	negs	r5, r5
 800492c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004930:	230a      	movs	r3, #10
 8004932:	4858      	ldr	r0, [pc, #352]	@ (8004a94 <_printf_i+0x234>)
 8004934:	e011      	b.n	800495a <_printf_i+0xfa>
 8004936:	6821      	ldr	r1, [r4, #0]
 8004938:	6833      	ldr	r3, [r6, #0]
 800493a:	0608      	lsls	r0, r1, #24
 800493c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004940:	d402      	bmi.n	8004948 <_printf_i+0xe8>
 8004942:	0649      	lsls	r1, r1, #25
 8004944:	bf48      	it	mi
 8004946:	b2ad      	uxthmi	r5, r5
 8004948:	2f6f      	cmp	r7, #111	@ 0x6f
 800494a:	6033      	str	r3, [r6, #0]
 800494c:	bf14      	ite	ne
 800494e:	230a      	movne	r3, #10
 8004950:	2308      	moveq	r3, #8
 8004952:	4850      	ldr	r0, [pc, #320]	@ (8004a94 <_printf_i+0x234>)
 8004954:	2100      	movs	r1, #0
 8004956:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800495a:	6866      	ldr	r6, [r4, #4]
 800495c:	2e00      	cmp	r6, #0
 800495e:	60a6      	str	r6, [r4, #8]
 8004960:	db05      	blt.n	800496e <_printf_i+0x10e>
 8004962:	6821      	ldr	r1, [r4, #0]
 8004964:	432e      	orrs	r6, r5
 8004966:	f021 0104 	bic.w	r1, r1, #4
 800496a:	6021      	str	r1, [r4, #0]
 800496c:	d04b      	beq.n	8004a06 <_printf_i+0x1a6>
 800496e:	4616      	mov	r6, r2
 8004970:	fbb5 f1f3 	udiv	r1, r5, r3
 8004974:	fb03 5711 	mls	r7, r3, r1, r5
 8004978:	5dc7      	ldrb	r7, [r0, r7]
 800497a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800497e:	462f      	mov	r7, r5
 8004980:	42bb      	cmp	r3, r7
 8004982:	460d      	mov	r5, r1
 8004984:	d9f4      	bls.n	8004970 <_printf_i+0x110>
 8004986:	2b08      	cmp	r3, #8
 8004988:	d10b      	bne.n	80049a2 <_printf_i+0x142>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	07df      	lsls	r7, r3, #31
 800498e:	d508      	bpl.n	80049a2 <_printf_i+0x142>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	6861      	ldr	r1, [r4, #4]
 8004994:	4299      	cmp	r1, r3
 8004996:	bfde      	ittt	le
 8004998:	2330      	movle	r3, #48	@ 0x30
 800499a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800499e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049a2:	1b92      	subs	r2, r2, r6
 80049a4:	6122      	str	r2, [r4, #16]
 80049a6:	464b      	mov	r3, r9
 80049a8:	4621      	mov	r1, r4
 80049aa:	4640      	mov	r0, r8
 80049ac:	f8cd a000 	str.w	sl, [sp]
 80049b0:	aa03      	add	r2, sp, #12
 80049b2:	f7ff fee3 	bl	800477c <_printf_common>
 80049b6:	3001      	adds	r0, #1
 80049b8:	d14a      	bne.n	8004a50 <_printf_i+0x1f0>
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295
 80049be:	b004      	add	sp, #16
 80049c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	f043 0320 	orr.w	r3, r3, #32
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	2778      	movs	r7, #120	@ 0x78
 80049ce:	4832      	ldr	r0, [pc, #200]	@ (8004a98 <_printf_i+0x238>)
 80049d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	6831      	ldr	r1, [r6, #0]
 80049d8:	061f      	lsls	r7, r3, #24
 80049da:	f851 5b04 	ldr.w	r5, [r1], #4
 80049de:	d402      	bmi.n	80049e6 <_printf_i+0x186>
 80049e0:	065f      	lsls	r7, r3, #25
 80049e2:	bf48      	it	mi
 80049e4:	b2ad      	uxthmi	r5, r5
 80049e6:	6031      	str	r1, [r6, #0]
 80049e8:	07d9      	lsls	r1, r3, #31
 80049ea:	bf44      	itt	mi
 80049ec:	f043 0320 	orrmi.w	r3, r3, #32
 80049f0:	6023      	strmi	r3, [r4, #0]
 80049f2:	b11d      	cbz	r5, 80049fc <_printf_i+0x19c>
 80049f4:	2310      	movs	r3, #16
 80049f6:	e7ad      	b.n	8004954 <_printf_i+0xf4>
 80049f8:	4826      	ldr	r0, [pc, #152]	@ (8004a94 <_printf_i+0x234>)
 80049fa:	e7e9      	b.n	80049d0 <_printf_i+0x170>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	f023 0320 	bic.w	r3, r3, #32
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	e7f6      	b.n	80049f4 <_printf_i+0x194>
 8004a06:	4616      	mov	r6, r2
 8004a08:	e7bd      	b.n	8004986 <_printf_i+0x126>
 8004a0a:	6833      	ldr	r3, [r6, #0]
 8004a0c:	6825      	ldr	r5, [r4, #0]
 8004a0e:	1d18      	adds	r0, r3, #4
 8004a10:	6961      	ldr	r1, [r4, #20]
 8004a12:	6030      	str	r0, [r6, #0]
 8004a14:	062e      	lsls	r6, r5, #24
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	d501      	bpl.n	8004a1e <_printf_i+0x1be>
 8004a1a:	6019      	str	r1, [r3, #0]
 8004a1c:	e002      	b.n	8004a24 <_printf_i+0x1c4>
 8004a1e:	0668      	lsls	r0, r5, #25
 8004a20:	d5fb      	bpl.n	8004a1a <_printf_i+0x1ba>
 8004a22:	8019      	strh	r1, [r3, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	4616      	mov	r6, r2
 8004a28:	6123      	str	r3, [r4, #16]
 8004a2a:	e7bc      	b.n	80049a6 <_printf_i+0x146>
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	2100      	movs	r1, #0
 8004a30:	1d1a      	adds	r2, r3, #4
 8004a32:	6032      	str	r2, [r6, #0]
 8004a34:	681e      	ldr	r6, [r3, #0]
 8004a36:	6862      	ldr	r2, [r4, #4]
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f000 fa76 	bl	8004f2a <memchr>
 8004a3e:	b108      	cbz	r0, 8004a44 <_printf_i+0x1e4>
 8004a40:	1b80      	subs	r0, r0, r6
 8004a42:	6060      	str	r0, [r4, #4]
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	6123      	str	r3, [r4, #16]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a4e:	e7aa      	b.n	80049a6 <_printf_i+0x146>
 8004a50:	4632      	mov	r2, r6
 8004a52:	4649      	mov	r1, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	47d0      	blx	sl
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d0ad      	beq.n	80049ba <_printf_i+0x15a>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	079b      	lsls	r3, r3, #30
 8004a62:	d413      	bmi.n	8004a8c <_printf_i+0x22c>
 8004a64:	68e0      	ldr	r0, [r4, #12]
 8004a66:	9b03      	ldr	r3, [sp, #12]
 8004a68:	4298      	cmp	r0, r3
 8004a6a:	bfb8      	it	lt
 8004a6c:	4618      	movlt	r0, r3
 8004a6e:	e7a6      	b.n	80049be <_printf_i+0x15e>
 8004a70:	2301      	movs	r3, #1
 8004a72:	4632      	mov	r2, r6
 8004a74:	4649      	mov	r1, r9
 8004a76:	4640      	mov	r0, r8
 8004a78:	47d0      	blx	sl
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d09d      	beq.n	80049ba <_printf_i+0x15a>
 8004a7e:	3501      	adds	r5, #1
 8004a80:	68e3      	ldr	r3, [r4, #12]
 8004a82:	9903      	ldr	r1, [sp, #12]
 8004a84:	1a5b      	subs	r3, r3, r1
 8004a86:	42ab      	cmp	r3, r5
 8004a88:	dcf2      	bgt.n	8004a70 <_printf_i+0x210>
 8004a8a:	e7eb      	b.n	8004a64 <_printf_i+0x204>
 8004a8c:	2500      	movs	r5, #0
 8004a8e:	f104 0619 	add.w	r6, r4, #25
 8004a92:	e7f5      	b.n	8004a80 <_printf_i+0x220>
 8004a94:	08007946 	.word	0x08007946
 8004a98:	08007957 	.word	0x08007957

08004a9c <std>:
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	e9c0 3300 	strd	r3, r3, [r0]
 8004aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aaa:	6083      	str	r3, [r0, #8]
 8004aac:	8181      	strh	r1, [r0, #12]
 8004aae:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ab0:	81c2      	strh	r2, [r0, #14]
 8004ab2:	6183      	str	r3, [r0, #24]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	305c      	adds	r0, #92	@ 0x5c
 8004aba:	f000 f92a 	bl	8004d12 <memset>
 8004abe:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <std+0x58>)
 8004ac0:	6224      	str	r4, [r4, #32]
 8004ac2:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <std+0x5c>)
 8004ac6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <std+0x60>)
 8004aca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004acc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <std+0x64>)
 8004ace:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <std+0x68>)
 8004ad2:	429c      	cmp	r4, r3
 8004ad4:	d006      	beq.n	8004ae4 <std+0x48>
 8004ad6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ada:	4294      	cmp	r4, r2
 8004adc:	d002      	beq.n	8004ae4 <std+0x48>
 8004ade:	33d0      	adds	r3, #208	@ 0xd0
 8004ae0:	429c      	cmp	r4, r3
 8004ae2:	d105      	bne.n	8004af0 <std+0x54>
 8004ae4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aec:	f000 ba12 	b.w	8004f14 <__retarget_lock_init_recursive>
 8004af0:	bd10      	pop	{r4, pc}
 8004af2:	bf00      	nop
 8004af4:	08004c8d 	.word	0x08004c8d
 8004af8:	08004caf 	.word	0x08004caf
 8004afc:	08004ce7 	.word	0x08004ce7
 8004b00:	08004d0b 	.word	0x08004d0b
 8004b04:	2000042c 	.word	0x2000042c

08004b08 <stdio_exit_handler>:
 8004b08:	4a02      	ldr	r2, [pc, #8]	@ (8004b14 <stdio_exit_handler+0xc>)
 8004b0a:	4903      	ldr	r1, [pc, #12]	@ (8004b18 <stdio_exit_handler+0x10>)
 8004b0c:	4803      	ldr	r0, [pc, #12]	@ (8004b1c <stdio_exit_handler+0x14>)
 8004b0e:	f000 b869 	b.w	8004be4 <_fwalk_sglue>
 8004b12:	bf00      	nop
 8004b14:	2000002c 	.word	0x2000002c
 8004b18:	08007205 	.word	0x08007205
 8004b1c:	200001a8 	.word	0x200001a8

08004b20 <cleanup_stdio>:
 8004b20:	6841      	ldr	r1, [r0, #4]
 8004b22:	4b0c      	ldr	r3, [pc, #48]	@ (8004b54 <cleanup_stdio+0x34>)
 8004b24:	b510      	push	{r4, lr}
 8004b26:	4299      	cmp	r1, r3
 8004b28:	4604      	mov	r4, r0
 8004b2a:	d001      	beq.n	8004b30 <cleanup_stdio+0x10>
 8004b2c:	f002 fb6a 	bl	8007204 <_fflush_r>
 8004b30:	68a1      	ldr	r1, [r4, #8]
 8004b32:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <cleanup_stdio+0x38>)
 8004b34:	4299      	cmp	r1, r3
 8004b36:	d002      	beq.n	8004b3e <cleanup_stdio+0x1e>
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f002 fb63 	bl	8007204 <_fflush_r>
 8004b3e:	68e1      	ldr	r1, [r4, #12]
 8004b40:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <cleanup_stdio+0x3c>)
 8004b42:	4299      	cmp	r1, r3
 8004b44:	d004      	beq.n	8004b50 <cleanup_stdio+0x30>
 8004b46:	4620      	mov	r0, r4
 8004b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b4c:	f002 bb5a 	b.w	8007204 <_fflush_r>
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	bf00      	nop
 8004b54:	2000042c 	.word	0x2000042c
 8004b58:	20000494 	.word	0x20000494
 8004b5c:	200004fc 	.word	0x200004fc

08004b60 <global_stdio_init.part.0>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <global_stdio_init.part.0+0x30>)
 8004b64:	4c0b      	ldr	r4, [pc, #44]	@ (8004b94 <global_stdio_init.part.0+0x34>)
 8004b66:	4a0c      	ldr	r2, [pc, #48]	@ (8004b98 <global_stdio_init.part.0+0x38>)
 8004b68:	4620      	mov	r0, r4
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f7ff ff94 	bl	8004a9c <std>
 8004b74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b78:	2201      	movs	r2, #1
 8004b7a:	2109      	movs	r1, #9
 8004b7c:	f7ff ff8e 	bl	8004a9c <std>
 8004b80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b84:	2202      	movs	r2, #2
 8004b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b8a:	2112      	movs	r1, #18
 8004b8c:	f7ff bf86 	b.w	8004a9c <std>
 8004b90:	20000564 	.word	0x20000564
 8004b94:	2000042c 	.word	0x2000042c
 8004b98:	08004b09 	.word	0x08004b09

08004b9c <__sfp_lock_acquire>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	@ (8004ba4 <__sfp_lock_acquire+0x8>)
 8004b9e:	f000 b9ba 	b.w	8004f16 <__retarget_lock_acquire_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	2000056d 	.word	0x2000056d

08004ba8 <__sfp_lock_release>:
 8004ba8:	4801      	ldr	r0, [pc, #4]	@ (8004bb0 <__sfp_lock_release+0x8>)
 8004baa:	f000 b9b5 	b.w	8004f18 <__retarget_lock_release_recursive>
 8004bae:	bf00      	nop
 8004bb0:	2000056d 	.word	0x2000056d

08004bb4 <__sinit>:
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	f7ff fff0 	bl	8004b9c <__sfp_lock_acquire>
 8004bbc:	6a23      	ldr	r3, [r4, #32]
 8004bbe:	b11b      	cbz	r3, 8004bc8 <__sinit+0x14>
 8004bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc4:	f7ff bff0 	b.w	8004ba8 <__sfp_lock_release>
 8004bc8:	4b04      	ldr	r3, [pc, #16]	@ (8004bdc <__sinit+0x28>)
 8004bca:	6223      	str	r3, [r4, #32]
 8004bcc:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <__sinit+0x2c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f5      	bne.n	8004bc0 <__sinit+0xc>
 8004bd4:	f7ff ffc4 	bl	8004b60 <global_stdio_init.part.0>
 8004bd8:	e7f2      	b.n	8004bc0 <__sinit+0xc>
 8004bda:	bf00      	nop
 8004bdc:	08004b21 	.word	0x08004b21
 8004be0:	20000564 	.word	0x20000564

08004be4 <_fwalk_sglue>:
 8004be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be8:	4607      	mov	r7, r0
 8004bea:	4688      	mov	r8, r1
 8004bec:	4614      	mov	r4, r2
 8004bee:	2600      	movs	r6, #0
 8004bf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bf4:	f1b9 0901 	subs.w	r9, r9, #1
 8004bf8:	d505      	bpl.n	8004c06 <_fwalk_sglue+0x22>
 8004bfa:	6824      	ldr	r4, [r4, #0]
 8004bfc:	2c00      	cmp	r4, #0
 8004bfe:	d1f7      	bne.n	8004bf0 <_fwalk_sglue+0xc>
 8004c00:	4630      	mov	r0, r6
 8004c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c06:	89ab      	ldrh	r3, [r5, #12]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d907      	bls.n	8004c1c <_fwalk_sglue+0x38>
 8004c0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c10:	3301      	adds	r3, #1
 8004c12:	d003      	beq.n	8004c1c <_fwalk_sglue+0x38>
 8004c14:	4629      	mov	r1, r5
 8004c16:	4638      	mov	r0, r7
 8004c18:	47c0      	blx	r8
 8004c1a:	4306      	orrs	r6, r0
 8004c1c:	3568      	adds	r5, #104	@ 0x68
 8004c1e:	e7e9      	b.n	8004bf4 <_fwalk_sglue+0x10>

08004c20 <sniprintf>:
 8004c20:	b40c      	push	{r2, r3}
 8004c22:	b530      	push	{r4, r5, lr}
 8004c24:	4b18      	ldr	r3, [pc, #96]	@ (8004c88 <sniprintf+0x68>)
 8004c26:	1e0c      	subs	r4, r1, #0
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	b09d      	sub	sp, #116	@ 0x74
 8004c2c:	da08      	bge.n	8004c40 <sniprintf+0x20>
 8004c2e:	238b      	movs	r3, #139	@ 0x8b
 8004c30:	f04f 30ff 	mov.w	r0, #4294967295
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	b01d      	add	sp, #116	@ 0x74
 8004c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c3c:	b002      	add	sp, #8
 8004c3e:	4770      	bx	lr
 8004c40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004c4e:	bf0c      	ite	eq
 8004c50:	4623      	moveq	r3, r4
 8004c52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c56:	9304      	str	r3, [sp, #16]
 8004c58:	9307      	str	r3, [sp, #28]
 8004c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c5e:	9002      	str	r0, [sp, #8]
 8004c60:	9006      	str	r0, [sp, #24]
 8004c62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c66:	4628      	mov	r0, r5
 8004c68:	ab21      	add	r3, sp, #132	@ 0x84
 8004c6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c6c:	a902      	add	r1, sp, #8
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	f002 f94c 	bl	8006f0c <_svfiprintf_r>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	bfbc      	itt	lt
 8004c78:	238b      	movlt	r3, #139	@ 0x8b
 8004c7a:	602b      	strlt	r3, [r5, #0]
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	d0da      	beq.n	8004c36 <sniprintf+0x16>
 8004c80:	2200      	movs	r2, #0
 8004c82:	9b02      	ldr	r3, [sp, #8]
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e7d6      	b.n	8004c36 <sniprintf+0x16>
 8004c88:	200001a4 	.word	0x200001a4

08004c8c <__sread>:
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	460c      	mov	r4, r1
 8004c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c94:	f000 f8f0 	bl	8004e78 <_read_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	bfab      	itete	ge
 8004c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004ca0:	181b      	addge	r3, r3, r0
 8004ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ca6:	bfac      	ite	ge
 8004ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004caa:	81a3      	strhlt	r3, [r4, #12]
 8004cac:	bd10      	pop	{r4, pc}

08004cae <__swrite>:
 8004cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb2:	461f      	mov	r7, r3
 8004cb4:	898b      	ldrh	r3, [r1, #12]
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	05db      	lsls	r3, r3, #23
 8004cba:	460c      	mov	r4, r1
 8004cbc:	4616      	mov	r6, r2
 8004cbe:	d505      	bpl.n	8004ccc <__swrite+0x1e>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc8:	f000 f8c4 	bl	8004e54 <_lseek_r>
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	4632      	mov	r2, r6
 8004cd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cd4:	81a3      	strh	r3, [r4, #12]
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	463b      	mov	r3, r7
 8004cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce2:	f000 b8db 	b.w	8004e9c <_write_r>

08004ce6 <__sseek>:
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	460c      	mov	r4, r1
 8004cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cee:	f000 f8b1 	bl	8004e54 <_lseek_r>
 8004cf2:	1c43      	adds	r3, r0, #1
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	bf15      	itete	ne
 8004cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d02:	81a3      	strheq	r3, [r4, #12]
 8004d04:	bf18      	it	ne
 8004d06:	81a3      	strhne	r3, [r4, #12]
 8004d08:	bd10      	pop	{r4, pc}

08004d0a <__sclose>:
 8004d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0e:	f000 b891 	b.w	8004e34 <_close_r>

08004d12 <memset>:
 8004d12:	4603      	mov	r3, r0
 8004d14:	4402      	add	r2, r0
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d100      	bne.n	8004d1c <memset+0xa>
 8004d1a:	4770      	bx	lr
 8004d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d20:	e7f9      	b.n	8004d16 <memset+0x4>

08004d22 <strncmp>:
 8004d22:	b510      	push	{r4, lr}
 8004d24:	b16a      	cbz	r2, 8004d42 <strncmp+0x20>
 8004d26:	3901      	subs	r1, #1
 8004d28:	1884      	adds	r4, r0, r2
 8004d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d2e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d103      	bne.n	8004d3e <strncmp+0x1c>
 8004d36:	42a0      	cmp	r0, r4
 8004d38:	d001      	beq.n	8004d3e <strncmp+0x1c>
 8004d3a:	2a00      	cmp	r2, #0
 8004d3c:	d1f5      	bne.n	8004d2a <strncmp+0x8>
 8004d3e:	1ad0      	subs	r0, r2, r3
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	4610      	mov	r0, r2
 8004d44:	e7fc      	b.n	8004d40 <strncmp+0x1e>
	...

08004d48 <strtok>:
 8004d48:	4b16      	ldr	r3, [pc, #88]	@ (8004da4 <strtok+0x5c>)
 8004d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4e:	681f      	ldr	r7, [r3, #0]
 8004d50:	4605      	mov	r5, r0
 8004d52:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004d54:	460e      	mov	r6, r1
 8004d56:	b9ec      	cbnz	r4, 8004d94 <strtok+0x4c>
 8004d58:	2050      	movs	r0, #80	@ 0x50
 8004d5a:	f001 fb07 	bl	800636c <malloc>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6478      	str	r0, [r7, #68]	@ 0x44
 8004d62:	b920      	cbnz	r0, 8004d6e <strtok+0x26>
 8004d64:	215b      	movs	r1, #91	@ 0x5b
 8004d66:	4b10      	ldr	r3, [pc, #64]	@ (8004da8 <strtok+0x60>)
 8004d68:	4810      	ldr	r0, [pc, #64]	@ (8004dac <strtok+0x64>)
 8004d6a:	f000 f901 	bl	8004f70 <__assert_func>
 8004d6e:	e9c0 4400 	strd	r4, r4, [r0]
 8004d72:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004d76:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004d7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004d7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004d82:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004d86:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004d8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004d8e:	6184      	str	r4, [r0, #24]
 8004d90:	7704      	strb	r4, [r0, #28]
 8004d92:	6244      	str	r4, [r0, #36]	@ 0x24
 8004d94:	4631      	mov	r1, r6
 8004d96:	4628      	mov	r0, r5
 8004d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004da0:	f000 b806 	b.w	8004db0 <__strtok_r>
 8004da4:	200001a4 	.word	0x200001a4
 8004da8:	08007968 	.word	0x08007968
 8004dac:	0800797f 	.word	0x0800797f

08004db0 <__strtok_r>:
 8004db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db2:	4604      	mov	r4, r0
 8004db4:	b908      	cbnz	r0, 8004dba <__strtok_r+0xa>
 8004db6:	6814      	ldr	r4, [r2, #0]
 8004db8:	b144      	cbz	r4, 8004dcc <__strtok_r+0x1c>
 8004dba:	460f      	mov	r7, r1
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004dc2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004dc6:	b91e      	cbnz	r6, 8004dd0 <__strtok_r+0x20>
 8004dc8:	b965      	cbnz	r5, 8004de4 <__strtok_r+0x34>
 8004dca:	6015      	str	r5, [r2, #0]
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e005      	b.n	8004ddc <__strtok_r+0x2c>
 8004dd0:	42b5      	cmp	r5, r6
 8004dd2:	d1f6      	bne.n	8004dc2 <__strtok_r+0x12>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <__strtok_r+0xa>
 8004dd8:	6014      	str	r4, [r2, #0]
 8004dda:	7003      	strb	r3, [r0, #0]
 8004ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dde:	461c      	mov	r4, r3
 8004de0:	e00c      	b.n	8004dfc <__strtok_r+0x4c>
 8004de2:	b91d      	cbnz	r5, 8004dec <__strtok_r+0x3c>
 8004de4:	460e      	mov	r6, r1
 8004de6:	4627      	mov	r7, r4
 8004de8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004dec:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004df0:	42ab      	cmp	r3, r5
 8004df2:	d1f6      	bne.n	8004de2 <__strtok_r+0x32>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f2      	beq.n	8004dde <__strtok_r+0x2e>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	703b      	strb	r3, [r7, #0]
 8004dfc:	6014      	str	r4, [r2, #0]
 8004dfe:	e7ed      	b.n	8004ddc <__strtok_r+0x2c>

08004e00 <strstr>:
 8004e00:	780a      	ldrb	r2, [r1, #0]
 8004e02:	b570      	push	{r4, r5, r6, lr}
 8004e04:	b96a      	cbnz	r2, 8004e22 <strstr+0x22>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d109      	bne.n	8004e20 <strstr+0x20>
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	4605      	mov	r5, r0
 8004e10:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f6      	beq.n	8004e06 <strstr+0x6>
 8004e18:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004e1c:	429e      	cmp	r6, r3
 8004e1e:	d0f7      	beq.n	8004e10 <strstr+0x10>
 8004e20:	3001      	adds	r0, #1
 8004e22:	7803      	ldrb	r3, [r0, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1ef      	bne.n	8004e08 <strstr+0x8>
 8004e28:	4618      	mov	r0, r3
 8004e2a:	e7ec      	b.n	8004e06 <strstr+0x6>

08004e2c <_localeconv_r>:
 8004e2c:	4800      	ldr	r0, [pc, #0]	@ (8004e30 <_localeconv_r+0x4>)
 8004e2e:	4770      	bx	lr
 8004e30:	20000128 	.word	0x20000128

08004e34 <_close_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	2300      	movs	r3, #0
 8004e38:	4d05      	ldr	r5, [pc, #20]	@ (8004e50 <_close_r+0x1c>)
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f7fc fd15 	bl	800186e <_close>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_close_r+0x1a>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_close_r+0x1a>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	20000568 	.word	0x20000568

08004e54 <_lseek_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	4d05      	ldr	r5, [pc, #20]	@ (8004e74 <_lseek_r+0x20>)
 8004e60:	602a      	str	r2, [r5, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f7fc fd27 	bl	80018b6 <_lseek>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_lseek_r+0x1e>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_lseek_r+0x1e>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	20000568 	.word	0x20000568

08004e78 <_read_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	2200      	movs	r2, #0
 8004e82:	4d05      	ldr	r5, [pc, #20]	@ (8004e98 <_read_r+0x20>)
 8004e84:	602a      	str	r2, [r5, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f7fc fcb8 	bl	80017fc <_read>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d102      	bne.n	8004e96 <_read_r+0x1e>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	b103      	cbz	r3, 8004e96 <_read_r+0x1e>
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	20000568 	.word	0x20000568

08004e9c <_write_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4d05      	ldr	r5, [pc, #20]	@ (8004ebc <_write_r+0x20>)
 8004ea8:	602a      	str	r2, [r5, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7fc fcc3 	bl	8001836 <_write>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d102      	bne.n	8004eba <_write_r+0x1e>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	b103      	cbz	r3, 8004eba <_write_r+0x1e>
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	20000568 	.word	0x20000568

08004ec0 <__errno>:
 8004ec0:	4b01      	ldr	r3, [pc, #4]	@ (8004ec8 <__errno+0x8>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	200001a4 	.word	0x200001a4

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	2600      	movs	r6, #0
 8004ed0:	4d0c      	ldr	r5, [pc, #48]	@ (8004f04 <__libc_init_array+0x38>)
 8004ed2:	4c0d      	ldr	r4, [pc, #52]	@ (8004f08 <__libc_init_array+0x3c>)
 8004ed4:	1b64      	subs	r4, r4, r5
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	42a6      	cmp	r6, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	f002 fce2 	bl	80078a4 <_init>
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	4d0a      	ldr	r5, [pc, #40]	@ (8004f0c <__libc_init_array+0x40>)
 8004ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8004f10 <__libc_init_array+0x44>)
 8004ee6:	1b64      	subs	r4, r4, r5
 8004ee8:	10a4      	asrs	r4, r4, #2
 8004eea:	42a6      	cmp	r6, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef4:	4798      	blx	r3
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efe:	4798      	blx	r3
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	08007dbc 	.word	0x08007dbc
 8004f08:	08007dbc 	.word	0x08007dbc
 8004f0c:	08007dbc 	.word	0x08007dbc
 8004f10:	08007dc0 	.word	0x08007dc0

08004f14 <__retarget_lock_init_recursive>:
 8004f14:	4770      	bx	lr

08004f16 <__retarget_lock_acquire_recursive>:
 8004f16:	4770      	bx	lr

08004f18 <__retarget_lock_release_recursive>:
 8004f18:	4770      	bx	lr

08004f1a <strcpy>:
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f20:	f803 2b01 	strb.w	r2, [r3], #1
 8004f24:	2a00      	cmp	r2, #0
 8004f26:	d1f9      	bne.n	8004f1c <strcpy+0x2>
 8004f28:	4770      	bx	lr

08004f2a <memchr>:
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	b2c9      	uxtb	r1, r1
 8004f30:	4402      	add	r2, r0
 8004f32:	4293      	cmp	r3, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	d101      	bne.n	8004f3c <memchr+0x12>
 8004f38:	2000      	movs	r0, #0
 8004f3a:	e003      	b.n	8004f44 <memchr+0x1a>
 8004f3c:	7804      	ldrb	r4, [r0, #0]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	428c      	cmp	r4, r1
 8004f42:	d1f6      	bne.n	8004f32 <memchr+0x8>
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <memcpy>:
 8004f46:	440a      	add	r2, r1
 8004f48:	4291      	cmp	r1, r2
 8004f4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f4e:	d100      	bne.n	8004f52 <memcpy+0xc>
 8004f50:	4770      	bx	lr
 8004f52:	b510      	push	{r4, lr}
 8004f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f58:	4291      	cmp	r1, r2
 8004f5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f5e:	d1f9      	bne.n	8004f54 <memcpy+0xe>
 8004f60:	bd10      	pop	{r4, pc}
	...

08004f64 <nan>:
 8004f64:	2000      	movs	r0, #0
 8004f66:	4901      	ldr	r1, [pc, #4]	@ (8004f6c <nan+0x8>)
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	7ff80000 	.word	0x7ff80000

08004f70 <__assert_func>:
 8004f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f72:	4614      	mov	r4, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <__assert_func+0x2c>)
 8004f78:	4605      	mov	r5, r0
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68d8      	ldr	r0, [r3, #12]
 8004f7e:	b14c      	cbz	r4, 8004f94 <__assert_func+0x24>
 8004f80:	4b07      	ldr	r3, [pc, #28]	@ (8004fa0 <__assert_func+0x30>)
 8004f82:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f86:	9100      	str	r1, [sp, #0]
 8004f88:	462b      	mov	r3, r5
 8004f8a:	4906      	ldr	r1, [pc, #24]	@ (8004fa4 <__assert_func+0x34>)
 8004f8c:	f002 f962 	bl	8007254 <fiprintf>
 8004f90:	f002 f99c 	bl	80072cc <abort>
 8004f94:	4b04      	ldr	r3, [pc, #16]	@ (8004fa8 <__assert_func+0x38>)
 8004f96:	461c      	mov	r4, r3
 8004f98:	e7f3      	b.n	8004f82 <__assert_func+0x12>
 8004f9a:	bf00      	nop
 8004f9c:	200001a4 	.word	0x200001a4
 8004fa0:	080079e1 	.word	0x080079e1
 8004fa4:	080079ee 	.word	0x080079ee
 8004fa8:	08007a1c 	.word	0x08007a1c

08004fac <quorem>:
 8004fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	6903      	ldr	r3, [r0, #16]
 8004fb2:	690c      	ldr	r4, [r1, #16]
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	42a3      	cmp	r3, r4
 8004fb8:	db7e      	blt.n	80050b8 <quorem+0x10c>
 8004fba:	3c01      	subs	r4, #1
 8004fbc:	00a3      	lsls	r3, r4, #2
 8004fbe:	f100 0514 	add.w	r5, r0, #20
 8004fc2:	f101 0814 	add.w	r8, r1, #20
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fe2:	d32e      	bcc.n	8005042 <quorem+0x96>
 8004fe4:	f04f 0a00 	mov.w	sl, #0
 8004fe8:	46c4      	mov	ip, r8
 8004fea:	46ae      	mov	lr, r5
 8004fec:	46d3      	mov	fp, sl
 8004fee:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ff2:	b298      	uxth	r0, r3
 8004ff4:	fb06 a000 	mla	r0, r6, r0, sl
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	0c02      	lsrs	r2, r0, #16
 8004ffc:	fb06 2303 	mla	r3, r6, r3, r2
 8005000:	f8de 2000 	ldr.w	r2, [lr]
 8005004:	b280      	uxth	r0, r0
 8005006:	b292      	uxth	r2, r2
 8005008:	1a12      	subs	r2, r2, r0
 800500a:	445a      	add	r2, fp
 800500c:	f8de 0000 	ldr.w	r0, [lr]
 8005010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005014:	b29b      	uxth	r3, r3
 8005016:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800501a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800501e:	b292      	uxth	r2, r2
 8005020:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005024:	45e1      	cmp	r9, ip
 8005026:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800502a:	f84e 2b04 	str.w	r2, [lr], #4
 800502e:	d2de      	bcs.n	8004fee <quorem+0x42>
 8005030:	9b00      	ldr	r3, [sp, #0]
 8005032:	58eb      	ldr	r3, [r5, r3]
 8005034:	b92b      	cbnz	r3, 8005042 <quorem+0x96>
 8005036:	9b01      	ldr	r3, [sp, #4]
 8005038:	3b04      	subs	r3, #4
 800503a:	429d      	cmp	r5, r3
 800503c:	461a      	mov	r2, r3
 800503e:	d32f      	bcc.n	80050a0 <quorem+0xf4>
 8005040:	613c      	str	r4, [r7, #16]
 8005042:	4638      	mov	r0, r7
 8005044:	f001 fd16 	bl	8006a74 <__mcmp>
 8005048:	2800      	cmp	r0, #0
 800504a:	db25      	blt.n	8005098 <quorem+0xec>
 800504c:	4629      	mov	r1, r5
 800504e:	2000      	movs	r0, #0
 8005050:	f858 2b04 	ldr.w	r2, [r8], #4
 8005054:	f8d1 c000 	ldr.w	ip, [r1]
 8005058:	fa1f fe82 	uxth.w	lr, r2
 800505c:	fa1f f38c 	uxth.w	r3, ip
 8005060:	eba3 030e 	sub.w	r3, r3, lr
 8005064:	4403      	add	r3, r0
 8005066:	0c12      	lsrs	r2, r2, #16
 8005068:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800506c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005070:	b29b      	uxth	r3, r3
 8005072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005076:	45c1      	cmp	r9, r8
 8005078:	ea4f 4022 	mov.w	r0, r2, asr #16
 800507c:	f841 3b04 	str.w	r3, [r1], #4
 8005080:	d2e6      	bcs.n	8005050 <quorem+0xa4>
 8005082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800508a:	b922      	cbnz	r2, 8005096 <quorem+0xea>
 800508c:	3b04      	subs	r3, #4
 800508e:	429d      	cmp	r5, r3
 8005090:	461a      	mov	r2, r3
 8005092:	d30b      	bcc.n	80050ac <quorem+0x100>
 8005094:	613c      	str	r4, [r7, #16]
 8005096:	3601      	adds	r6, #1
 8005098:	4630      	mov	r0, r6
 800509a:	b003      	add	sp, #12
 800509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	3b04      	subs	r3, #4
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	d1cb      	bne.n	8005040 <quorem+0x94>
 80050a8:	3c01      	subs	r4, #1
 80050aa:	e7c6      	b.n	800503a <quorem+0x8e>
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	3b04      	subs	r3, #4
 80050b0:	2a00      	cmp	r2, #0
 80050b2:	d1ef      	bne.n	8005094 <quorem+0xe8>
 80050b4:	3c01      	subs	r4, #1
 80050b6:	e7ea      	b.n	800508e <quorem+0xe2>
 80050b8:	2000      	movs	r0, #0
 80050ba:	e7ee      	b.n	800509a <quorem+0xee>
 80050bc:	0000      	movs	r0, r0
	...

080050c0 <_dtoa_r>:
 80050c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c4:	4614      	mov	r4, r2
 80050c6:	461d      	mov	r5, r3
 80050c8:	69c7      	ldr	r7, [r0, #28]
 80050ca:	b097      	sub	sp, #92	@ 0x5c
 80050cc:	4681      	mov	r9, r0
 80050ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80050d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80050d4:	b97f      	cbnz	r7, 80050f6 <_dtoa_r+0x36>
 80050d6:	2010      	movs	r0, #16
 80050d8:	f001 f948 	bl	800636c <malloc>
 80050dc:	4602      	mov	r2, r0
 80050de:	f8c9 001c 	str.w	r0, [r9, #28]
 80050e2:	b920      	cbnz	r0, 80050ee <_dtoa_r+0x2e>
 80050e4:	21ef      	movs	r1, #239	@ 0xef
 80050e6:	4bac      	ldr	r3, [pc, #688]	@ (8005398 <_dtoa_r+0x2d8>)
 80050e8:	48ac      	ldr	r0, [pc, #688]	@ (800539c <_dtoa_r+0x2dc>)
 80050ea:	f7ff ff41 	bl	8004f70 <__assert_func>
 80050ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80050f2:	6007      	str	r7, [r0, #0]
 80050f4:	60c7      	str	r7, [r0, #12]
 80050f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	b159      	cbz	r1, 8005116 <_dtoa_r+0x56>
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	2301      	movs	r3, #1
 8005102:	4093      	lsls	r3, r2
 8005104:	604a      	str	r2, [r1, #4]
 8005106:	608b      	str	r3, [r1, #8]
 8005108:	4648      	mov	r0, r9
 800510a:	f001 fa37 	bl	800657c <_Bfree>
 800510e:	2200      	movs	r2, #0
 8005110:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	1e2b      	subs	r3, r5, #0
 8005118:	bfaf      	iteee	ge
 800511a:	2300      	movge	r3, #0
 800511c:	2201      	movlt	r2, #1
 800511e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005122:	9307      	strlt	r3, [sp, #28]
 8005124:	bfa8      	it	ge
 8005126:	6033      	strge	r3, [r6, #0]
 8005128:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800512c:	4b9c      	ldr	r3, [pc, #624]	@ (80053a0 <_dtoa_r+0x2e0>)
 800512e:	bfb8      	it	lt
 8005130:	6032      	strlt	r2, [r6, #0]
 8005132:	ea33 0308 	bics.w	r3, r3, r8
 8005136:	d112      	bne.n	800515e <_dtoa_r+0x9e>
 8005138:	f242 730f 	movw	r3, #9999	@ 0x270f
 800513c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005144:	4323      	orrs	r3, r4
 8005146:	f000 855e 	beq.w	8005c06 <_dtoa_r+0xb46>
 800514a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800514c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80053a4 <_dtoa_r+0x2e4>
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8560 	beq.w	8005c16 <_dtoa_r+0xb56>
 8005156:	f10a 0303 	add.w	r3, sl, #3
 800515a:	f000 bd5a 	b.w	8005c12 <_dtoa_r+0xb52>
 800515e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005162:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800516a:	2200      	movs	r2, #0
 800516c:	2300      	movs	r3, #0
 800516e:	f7fb fc1b 	bl	80009a8 <__aeabi_dcmpeq>
 8005172:	4607      	mov	r7, r0
 8005174:	b158      	cbz	r0, 800518e <_dtoa_r+0xce>
 8005176:	2301      	movs	r3, #1
 8005178:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800517e:	b113      	cbz	r3, 8005186 <_dtoa_r+0xc6>
 8005180:	4b89      	ldr	r3, [pc, #548]	@ (80053a8 <_dtoa_r+0x2e8>)
 8005182:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80053ac <_dtoa_r+0x2ec>
 800518a:	f000 bd44 	b.w	8005c16 <_dtoa_r+0xb56>
 800518e:	ab14      	add	r3, sp, #80	@ 0x50
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	ab15      	add	r3, sp, #84	@ 0x54
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4648      	mov	r0, r9
 8005198:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800519c:	f001 fd82 	bl	8006ca4 <__d2b>
 80051a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80051a4:	9003      	str	r0, [sp, #12]
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	d078      	beq.n	800529c <_dtoa_r+0x1dc>
 80051aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80051b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80051bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80051c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80051c2:	4619      	mov	r1, r3
 80051c4:	2200      	movs	r2, #0
 80051c6:	4b7a      	ldr	r3, [pc, #488]	@ (80053b0 <_dtoa_r+0x2f0>)
 80051c8:	f7fa ffce 	bl	8000168 <__aeabi_dsub>
 80051cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8005380 <_dtoa_r+0x2c0>)
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	f7fb f981 	bl	80004d8 <__aeabi_dmul>
 80051d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8005388 <_dtoa_r+0x2c8>)
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	f7fa ffc6 	bl	800016c <__adddf3>
 80051e0:	4604      	mov	r4, r0
 80051e2:	4630      	mov	r0, r6
 80051e4:	460d      	mov	r5, r1
 80051e6:	f7fb f90d 	bl	8000404 <__aeabi_i2d>
 80051ea:	a369      	add	r3, pc, #420	@ (adr r3, 8005390 <_dtoa_r+0x2d0>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f7fb f972 	bl	80004d8 <__aeabi_dmul>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4620      	mov	r0, r4
 80051fa:	4629      	mov	r1, r5
 80051fc:	f7fa ffb6 	bl	800016c <__adddf3>
 8005200:	4604      	mov	r4, r0
 8005202:	460d      	mov	r5, r1
 8005204:	f7fb fc18 	bl	8000a38 <__aeabi_d2iz>
 8005208:	2200      	movs	r2, #0
 800520a:	4607      	mov	r7, r0
 800520c:	2300      	movs	r3, #0
 800520e:	4620      	mov	r0, r4
 8005210:	4629      	mov	r1, r5
 8005212:	f7fb fbd3 	bl	80009bc <__aeabi_dcmplt>
 8005216:	b140      	cbz	r0, 800522a <_dtoa_r+0x16a>
 8005218:	4638      	mov	r0, r7
 800521a:	f7fb f8f3 	bl	8000404 <__aeabi_i2d>
 800521e:	4622      	mov	r2, r4
 8005220:	462b      	mov	r3, r5
 8005222:	f7fb fbc1 	bl	80009a8 <__aeabi_dcmpeq>
 8005226:	b900      	cbnz	r0, 800522a <_dtoa_r+0x16a>
 8005228:	3f01      	subs	r7, #1
 800522a:	2f16      	cmp	r7, #22
 800522c:	d854      	bhi.n	80052d8 <_dtoa_r+0x218>
 800522e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005232:	4b60      	ldr	r3, [pc, #384]	@ (80053b4 <_dtoa_r+0x2f4>)
 8005234:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fb fbbe 	bl	80009bc <__aeabi_dcmplt>
 8005240:	2800      	cmp	r0, #0
 8005242:	d04b      	beq.n	80052dc <_dtoa_r+0x21c>
 8005244:	2300      	movs	r3, #0
 8005246:	3f01      	subs	r7, #1
 8005248:	930f      	str	r3, [sp, #60]	@ 0x3c
 800524a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800524c:	1b9b      	subs	r3, r3, r6
 800524e:	1e5a      	subs	r2, r3, #1
 8005250:	bf49      	itett	mi
 8005252:	f1c3 0301 	rsbmi	r3, r3, #1
 8005256:	2300      	movpl	r3, #0
 8005258:	9304      	strmi	r3, [sp, #16]
 800525a:	2300      	movmi	r3, #0
 800525c:	9209      	str	r2, [sp, #36]	@ 0x24
 800525e:	bf54      	ite	pl
 8005260:	9304      	strpl	r3, [sp, #16]
 8005262:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005264:	2f00      	cmp	r7, #0
 8005266:	db3b      	blt.n	80052e0 <_dtoa_r+0x220>
 8005268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800526a:	970e      	str	r7, [sp, #56]	@ 0x38
 800526c:	443b      	add	r3, r7
 800526e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005270:	2300      	movs	r3, #0
 8005272:	930a      	str	r3, [sp, #40]	@ 0x28
 8005274:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005276:	2b09      	cmp	r3, #9
 8005278:	d865      	bhi.n	8005346 <_dtoa_r+0x286>
 800527a:	2b05      	cmp	r3, #5
 800527c:	bfc4      	itt	gt
 800527e:	3b04      	subgt	r3, #4
 8005280:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005282:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005284:	bfc8      	it	gt
 8005286:	2400      	movgt	r4, #0
 8005288:	f1a3 0302 	sub.w	r3, r3, #2
 800528c:	bfd8      	it	le
 800528e:	2401      	movle	r4, #1
 8005290:	2b03      	cmp	r3, #3
 8005292:	d864      	bhi.n	800535e <_dtoa_r+0x29e>
 8005294:	e8df f003 	tbb	[pc, r3]
 8005298:	2c385553 	.word	0x2c385553
 800529c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80052a0:	441e      	add	r6, r3
 80052a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	bfc1      	itttt	gt
 80052aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80052ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80052b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80052b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80052ba:	bfd6      	itet	le
 80052bc:	f1c3 0320 	rsble	r3, r3, #32
 80052c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80052c4:	fa04 f003 	lslle.w	r0, r4, r3
 80052c8:	f7fb f88c 	bl	80003e4 <__aeabi_ui2d>
 80052cc:	2201      	movs	r2, #1
 80052ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80052d2:	3e01      	subs	r6, #1
 80052d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80052d6:	e774      	b.n	80051c2 <_dtoa_r+0x102>
 80052d8:	2301      	movs	r3, #1
 80052da:	e7b5      	b.n	8005248 <_dtoa_r+0x188>
 80052dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80052de:	e7b4      	b.n	800524a <_dtoa_r+0x18a>
 80052e0:	9b04      	ldr	r3, [sp, #16]
 80052e2:	1bdb      	subs	r3, r3, r7
 80052e4:	9304      	str	r3, [sp, #16]
 80052e6:	427b      	negs	r3, r7
 80052e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80052ea:	2300      	movs	r3, #0
 80052ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80052ee:	e7c1      	b.n	8005274 <_dtoa_r+0x1b4>
 80052f0:	2301      	movs	r3, #1
 80052f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052f6:	eb07 0b03 	add.w	fp, r7, r3
 80052fa:	f10b 0301 	add.w	r3, fp, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	9308      	str	r3, [sp, #32]
 8005302:	bfb8      	it	lt
 8005304:	2301      	movlt	r3, #1
 8005306:	e006      	b.n	8005316 <_dtoa_r+0x256>
 8005308:	2301      	movs	r3, #1
 800530a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800530c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800530e:	2b00      	cmp	r3, #0
 8005310:	dd28      	ble.n	8005364 <_dtoa_r+0x2a4>
 8005312:	469b      	mov	fp, r3
 8005314:	9308      	str	r3, [sp, #32]
 8005316:	2100      	movs	r1, #0
 8005318:	2204      	movs	r2, #4
 800531a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800531e:	f102 0514 	add.w	r5, r2, #20
 8005322:	429d      	cmp	r5, r3
 8005324:	d926      	bls.n	8005374 <_dtoa_r+0x2b4>
 8005326:	6041      	str	r1, [r0, #4]
 8005328:	4648      	mov	r0, r9
 800532a:	f001 f8e7 	bl	80064fc <_Balloc>
 800532e:	4682      	mov	sl, r0
 8005330:	2800      	cmp	r0, #0
 8005332:	d143      	bne.n	80053bc <_dtoa_r+0x2fc>
 8005334:	4602      	mov	r2, r0
 8005336:	f240 11af 	movw	r1, #431	@ 0x1af
 800533a:	4b1f      	ldr	r3, [pc, #124]	@ (80053b8 <_dtoa_r+0x2f8>)
 800533c:	e6d4      	b.n	80050e8 <_dtoa_r+0x28>
 800533e:	2300      	movs	r3, #0
 8005340:	e7e3      	b.n	800530a <_dtoa_r+0x24a>
 8005342:	2300      	movs	r3, #0
 8005344:	e7d5      	b.n	80052f2 <_dtoa_r+0x232>
 8005346:	2401      	movs	r4, #1
 8005348:	2300      	movs	r3, #0
 800534a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800534c:	9320      	str	r3, [sp, #128]	@ 0x80
 800534e:	f04f 3bff 	mov.w	fp, #4294967295
 8005352:	2200      	movs	r2, #0
 8005354:	2312      	movs	r3, #18
 8005356:	f8cd b020 	str.w	fp, [sp, #32]
 800535a:	9221      	str	r2, [sp, #132]	@ 0x84
 800535c:	e7db      	b.n	8005316 <_dtoa_r+0x256>
 800535e:	2301      	movs	r3, #1
 8005360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005362:	e7f4      	b.n	800534e <_dtoa_r+0x28e>
 8005364:	f04f 0b01 	mov.w	fp, #1
 8005368:	465b      	mov	r3, fp
 800536a:	f8cd b020 	str.w	fp, [sp, #32]
 800536e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005372:	e7d0      	b.n	8005316 <_dtoa_r+0x256>
 8005374:	3101      	adds	r1, #1
 8005376:	0052      	lsls	r2, r2, #1
 8005378:	e7d1      	b.n	800531e <_dtoa_r+0x25e>
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w
 8005380:	636f4361 	.word	0x636f4361
 8005384:	3fd287a7 	.word	0x3fd287a7
 8005388:	8b60c8b3 	.word	0x8b60c8b3
 800538c:	3fc68a28 	.word	0x3fc68a28
 8005390:	509f79fb 	.word	0x509f79fb
 8005394:	3fd34413 	.word	0x3fd34413
 8005398:	08007968 	.word	0x08007968
 800539c:	08007a2a 	.word	0x08007a2a
 80053a0:	7ff00000 	.word	0x7ff00000
 80053a4:	08007a26 	.word	0x08007a26
 80053a8:	08007945 	.word	0x08007945
 80053ac:	08007944 	.word	0x08007944
 80053b0:	3ff80000 	.word	0x3ff80000
 80053b4:	08007be8 	.word	0x08007be8
 80053b8:	08007a82 	.word	0x08007a82
 80053bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80053c0:	6018      	str	r0, [r3, #0]
 80053c2:	9b08      	ldr	r3, [sp, #32]
 80053c4:	2b0e      	cmp	r3, #14
 80053c6:	f200 80a1 	bhi.w	800550c <_dtoa_r+0x44c>
 80053ca:	2c00      	cmp	r4, #0
 80053cc:	f000 809e 	beq.w	800550c <_dtoa_r+0x44c>
 80053d0:	2f00      	cmp	r7, #0
 80053d2:	dd33      	ble.n	800543c <_dtoa_r+0x37c>
 80053d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005648 <_dtoa_r+0x588>)
 80053d6:	f007 020f 	and.w	r2, r7, #15
 80053da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053de:	05f8      	lsls	r0, r7, #23
 80053e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80053e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80053ec:	d516      	bpl.n	800541c <_dtoa_r+0x35c>
 80053ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053f2:	4b96      	ldr	r3, [pc, #600]	@ (800564c <_dtoa_r+0x58c>)
 80053f4:	2603      	movs	r6, #3
 80053f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053fa:	f7fb f997 	bl	800072c <__aeabi_ddiv>
 80053fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005402:	f004 040f 	and.w	r4, r4, #15
 8005406:	4d91      	ldr	r5, [pc, #580]	@ (800564c <_dtoa_r+0x58c>)
 8005408:	b954      	cbnz	r4, 8005420 <_dtoa_r+0x360>
 800540a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800540e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005412:	f7fb f98b 	bl	800072c <__aeabi_ddiv>
 8005416:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800541a:	e028      	b.n	800546e <_dtoa_r+0x3ae>
 800541c:	2602      	movs	r6, #2
 800541e:	e7f2      	b.n	8005406 <_dtoa_r+0x346>
 8005420:	07e1      	lsls	r1, r4, #31
 8005422:	d508      	bpl.n	8005436 <_dtoa_r+0x376>
 8005424:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800542c:	f7fb f854 	bl	80004d8 <__aeabi_dmul>
 8005430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005434:	3601      	adds	r6, #1
 8005436:	1064      	asrs	r4, r4, #1
 8005438:	3508      	adds	r5, #8
 800543a:	e7e5      	b.n	8005408 <_dtoa_r+0x348>
 800543c:	f000 80af 	beq.w	800559e <_dtoa_r+0x4de>
 8005440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005444:	427c      	negs	r4, r7
 8005446:	4b80      	ldr	r3, [pc, #512]	@ (8005648 <_dtoa_r+0x588>)
 8005448:	f004 020f 	and.w	r2, r4, #15
 800544c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f7fb f840 	bl	80004d8 <__aeabi_dmul>
 8005458:	2602      	movs	r6, #2
 800545a:	2300      	movs	r3, #0
 800545c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005460:	4d7a      	ldr	r5, [pc, #488]	@ (800564c <_dtoa_r+0x58c>)
 8005462:	1124      	asrs	r4, r4, #4
 8005464:	2c00      	cmp	r4, #0
 8005466:	f040 808f 	bne.w	8005588 <_dtoa_r+0x4c8>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1d3      	bne.n	8005416 <_dtoa_r+0x356>
 800546e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005472:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8094 	beq.w	80055a2 <_dtoa_r+0x4e2>
 800547a:	2200      	movs	r2, #0
 800547c:	4620      	mov	r0, r4
 800547e:	4629      	mov	r1, r5
 8005480:	4b73      	ldr	r3, [pc, #460]	@ (8005650 <_dtoa_r+0x590>)
 8005482:	f7fb fa9b 	bl	80009bc <__aeabi_dcmplt>
 8005486:	2800      	cmp	r0, #0
 8005488:	f000 808b 	beq.w	80055a2 <_dtoa_r+0x4e2>
 800548c:	9b08      	ldr	r3, [sp, #32]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8087 	beq.w	80055a2 <_dtoa_r+0x4e2>
 8005494:	f1bb 0f00 	cmp.w	fp, #0
 8005498:	dd34      	ble.n	8005504 <_dtoa_r+0x444>
 800549a:	4620      	mov	r0, r4
 800549c:	2200      	movs	r2, #0
 800549e:	4629      	mov	r1, r5
 80054a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005654 <_dtoa_r+0x594>)
 80054a2:	f7fb f819 	bl	80004d8 <__aeabi_dmul>
 80054a6:	465c      	mov	r4, fp
 80054a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054ac:	f107 38ff 	add.w	r8, r7, #4294967295
 80054b0:	3601      	adds	r6, #1
 80054b2:	4630      	mov	r0, r6
 80054b4:	f7fa ffa6 	bl	8000404 <__aeabi_i2d>
 80054b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054bc:	f7fb f80c 	bl	80004d8 <__aeabi_dmul>
 80054c0:	2200      	movs	r2, #0
 80054c2:	4b65      	ldr	r3, [pc, #404]	@ (8005658 <_dtoa_r+0x598>)
 80054c4:	f7fa fe52 	bl	800016c <__adddf3>
 80054c8:	4605      	mov	r5, r0
 80054ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80054ce:	2c00      	cmp	r4, #0
 80054d0:	d16a      	bne.n	80055a8 <_dtoa_r+0x4e8>
 80054d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054d6:	2200      	movs	r2, #0
 80054d8:	4b60      	ldr	r3, [pc, #384]	@ (800565c <_dtoa_r+0x59c>)
 80054da:	f7fa fe45 	bl	8000168 <__aeabi_dsub>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054e6:	462a      	mov	r2, r5
 80054e8:	4633      	mov	r3, r6
 80054ea:	f7fb fa85 	bl	80009f8 <__aeabi_dcmpgt>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	f040 8298 	bne.w	8005a24 <_dtoa_r+0x964>
 80054f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054f8:	462a      	mov	r2, r5
 80054fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80054fe:	f7fb fa5d 	bl	80009bc <__aeabi_dcmplt>
 8005502:	bb38      	cbnz	r0, 8005554 <_dtoa_r+0x494>
 8005504:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005508:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800550c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800550e:	2b00      	cmp	r3, #0
 8005510:	f2c0 8157 	blt.w	80057c2 <_dtoa_r+0x702>
 8005514:	2f0e      	cmp	r7, #14
 8005516:	f300 8154 	bgt.w	80057c2 <_dtoa_r+0x702>
 800551a:	4b4b      	ldr	r3, [pc, #300]	@ (8005648 <_dtoa_r+0x588>)
 800551c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005520:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005524:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005528:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800552a:	2b00      	cmp	r3, #0
 800552c:	f280 80e5 	bge.w	80056fa <_dtoa_r+0x63a>
 8005530:	9b08      	ldr	r3, [sp, #32]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f300 80e1 	bgt.w	80056fa <_dtoa_r+0x63a>
 8005538:	d10c      	bne.n	8005554 <_dtoa_r+0x494>
 800553a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800553e:	2200      	movs	r2, #0
 8005540:	4b46      	ldr	r3, [pc, #280]	@ (800565c <_dtoa_r+0x59c>)
 8005542:	f7fa ffc9 	bl	80004d8 <__aeabi_dmul>
 8005546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800554a:	f7fb fa4b 	bl	80009e4 <__aeabi_dcmpge>
 800554e:	2800      	cmp	r0, #0
 8005550:	f000 8266 	beq.w	8005a20 <_dtoa_r+0x960>
 8005554:	2400      	movs	r4, #0
 8005556:	4625      	mov	r5, r4
 8005558:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800555a:	4656      	mov	r6, sl
 800555c:	ea6f 0803 	mvn.w	r8, r3
 8005560:	2700      	movs	r7, #0
 8005562:	4621      	mov	r1, r4
 8005564:	4648      	mov	r0, r9
 8005566:	f001 f809 	bl	800657c <_Bfree>
 800556a:	2d00      	cmp	r5, #0
 800556c:	f000 80bd 	beq.w	80056ea <_dtoa_r+0x62a>
 8005570:	b12f      	cbz	r7, 800557e <_dtoa_r+0x4be>
 8005572:	42af      	cmp	r7, r5
 8005574:	d003      	beq.n	800557e <_dtoa_r+0x4be>
 8005576:	4639      	mov	r1, r7
 8005578:	4648      	mov	r0, r9
 800557a:	f000 ffff 	bl	800657c <_Bfree>
 800557e:	4629      	mov	r1, r5
 8005580:	4648      	mov	r0, r9
 8005582:	f000 fffb 	bl	800657c <_Bfree>
 8005586:	e0b0      	b.n	80056ea <_dtoa_r+0x62a>
 8005588:	07e2      	lsls	r2, r4, #31
 800558a:	d505      	bpl.n	8005598 <_dtoa_r+0x4d8>
 800558c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005590:	f7fa ffa2 	bl	80004d8 <__aeabi_dmul>
 8005594:	2301      	movs	r3, #1
 8005596:	3601      	adds	r6, #1
 8005598:	1064      	asrs	r4, r4, #1
 800559a:	3508      	adds	r5, #8
 800559c:	e762      	b.n	8005464 <_dtoa_r+0x3a4>
 800559e:	2602      	movs	r6, #2
 80055a0:	e765      	b.n	800546e <_dtoa_r+0x3ae>
 80055a2:	46b8      	mov	r8, r7
 80055a4:	9c08      	ldr	r4, [sp, #32]
 80055a6:	e784      	b.n	80054b2 <_dtoa_r+0x3f2>
 80055a8:	4b27      	ldr	r3, [pc, #156]	@ (8005648 <_dtoa_r+0x588>)
 80055aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80055ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055b4:	4454      	add	r4, sl
 80055b6:	2900      	cmp	r1, #0
 80055b8:	d054      	beq.n	8005664 <_dtoa_r+0x5a4>
 80055ba:	2000      	movs	r0, #0
 80055bc:	4928      	ldr	r1, [pc, #160]	@ (8005660 <_dtoa_r+0x5a0>)
 80055be:	f7fb f8b5 	bl	800072c <__aeabi_ddiv>
 80055c2:	4633      	mov	r3, r6
 80055c4:	462a      	mov	r2, r5
 80055c6:	f7fa fdcf 	bl	8000168 <__aeabi_dsub>
 80055ca:	4656      	mov	r6, sl
 80055cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d4:	f7fb fa30 	bl	8000a38 <__aeabi_d2iz>
 80055d8:	4605      	mov	r5, r0
 80055da:	f7fa ff13 	bl	8000404 <__aeabi_i2d>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055e6:	f7fa fdbf 	bl	8000168 <__aeabi_dsub>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	3530      	adds	r5, #48	@ 0x30
 80055f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055f8:	f806 5b01 	strb.w	r5, [r6], #1
 80055fc:	f7fb f9de 	bl	80009bc <__aeabi_dcmplt>
 8005600:	2800      	cmp	r0, #0
 8005602:	d172      	bne.n	80056ea <_dtoa_r+0x62a>
 8005604:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005608:	2000      	movs	r0, #0
 800560a:	4911      	ldr	r1, [pc, #68]	@ (8005650 <_dtoa_r+0x590>)
 800560c:	f7fa fdac 	bl	8000168 <__aeabi_dsub>
 8005610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005614:	f7fb f9d2 	bl	80009bc <__aeabi_dcmplt>
 8005618:	2800      	cmp	r0, #0
 800561a:	f040 80b4 	bne.w	8005786 <_dtoa_r+0x6c6>
 800561e:	42a6      	cmp	r6, r4
 8005620:	f43f af70 	beq.w	8005504 <_dtoa_r+0x444>
 8005624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005628:	2200      	movs	r2, #0
 800562a:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <_dtoa_r+0x594>)
 800562c:	f7fa ff54 	bl	80004d8 <__aeabi_dmul>
 8005630:	2200      	movs	r2, #0
 8005632:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800563a:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <_dtoa_r+0x594>)
 800563c:	f7fa ff4c 	bl	80004d8 <__aeabi_dmul>
 8005640:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005644:	e7c4      	b.n	80055d0 <_dtoa_r+0x510>
 8005646:	bf00      	nop
 8005648:	08007be8 	.word	0x08007be8
 800564c:	08007bc0 	.word	0x08007bc0
 8005650:	3ff00000 	.word	0x3ff00000
 8005654:	40240000 	.word	0x40240000
 8005658:	401c0000 	.word	0x401c0000
 800565c:	40140000 	.word	0x40140000
 8005660:	3fe00000 	.word	0x3fe00000
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	f7fa ff36 	bl	80004d8 <__aeabi_dmul>
 800566c:	4656      	mov	r6, sl
 800566e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005672:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005678:	f7fb f9de 	bl	8000a38 <__aeabi_d2iz>
 800567c:	4605      	mov	r5, r0
 800567e:	f7fa fec1 	bl	8000404 <__aeabi_i2d>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800568a:	f7fa fd6d 	bl	8000168 <__aeabi_dsub>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	3530      	adds	r5, #48	@ 0x30
 8005694:	f806 5b01 	strb.w	r5, [r6], #1
 8005698:	42a6      	cmp	r6, r4
 800569a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	d124      	bne.n	80056ee <_dtoa_r+0x62e>
 80056a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056a8:	4bae      	ldr	r3, [pc, #696]	@ (8005964 <_dtoa_r+0x8a4>)
 80056aa:	f7fa fd5f 	bl	800016c <__adddf3>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056b6:	f7fb f99f 	bl	80009f8 <__aeabi_dcmpgt>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d163      	bne.n	8005786 <_dtoa_r+0x6c6>
 80056be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056c2:	2000      	movs	r0, #0
 80056c4:	49a7      	ldr	r1, [pc, #668]	@ (8005964 <_dtoa_r+0x8a4>)
 80056c6:	f7fa fd4f 	bl	8000168 <__aeabi_dsub>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056d2:	f7fb f973 	bl	80009bc <__aeabi_dcmplt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f43f af14 	beq.w	8005504 <_dtoa_r+0x444>
 80056dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80056de:	1e73      	subs	r3, r6, #1
 80056e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80056e6:	2b30      	cmp	r3, #48	@ 0x30
 80056e8:	d0f8      	beq.n	80056dc <_dtoa_r+0x61c>
 80056ea:	4647      	mov	r7, r8
 80056ec:	e03b      	b.n	8005766 <_dtoa_r+0x6a6>
 80056ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005968 <_dtoa_r+0x8a8>)
 80056f0:	f7fa fef2 	bl	80004d8 <__aeabi_dmul>
 80056f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056f8:	e7bc      	b.n	8005674 <_dtoa_r+0x5b4>
 80056fa:	4656      	mov	r6, sl
 80056fc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005704:	4620      	mov	r0, r4
 8005706:	4629      	mov	r1, r5
 8005708:	f7fb f810 	bl	800072c <__aeabi_ddiv>
 800570c:	f7fb f994 	bl	8000a38 <__aeabi_d2iz>
 8005710:	4680      	mov	r8, r0
 8005712:	f7fa fe77 	bl	8000404 <__aeabi_i2d>
 8005716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800571a:	f7fa fedd 	bl	80004d8 <__aeabi_dmul>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4620      	mov	r0, r4
 8005724:	4629      	mov	r1, r5
 8005726:	f7fa fd1f 	bl	8000168 <__aeabi_dsub>
 800572a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800572e:	9d08      	ldr	r5, [sp, #32]
 8005730:	f806 4b01 	strb.w	r4, [r6], #1
 8005734:	eba6 040a 	sub.w	r4, r6, sl
 8005738:	42a5      	cmp	r5, r4
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	d133      	bne.n	80057a8 <_dtoa_r+0x6e8>
 8005740:	f7fa fd14 	bl	800016c <__adddf3>
 8005744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005748:	4604      	mov	r4, r0
 800574a:	460d      	mov	r5, r1
 800574c:	f7fb f954 	bl	80009f8 <__aeabi_dcmpgt>
 8005750:	b9c0      	cbnz	r0, 8005784 <_dtoa_r+0x6c4>
 8005752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fb f925 	bl	80009a8 <__aeabi_dcmpeq>
 800575e:	b110      	cbz	r0, 8005766 <_dtoa_r+0x6a6>
 8005760:	f018 0f01 	tst.w	r8, #1
 8005764:	d10e      	bne.n	8005784 <_dtoa_r+0x6c4>
 8005766:	4648      	mov	r0, r9
 8005768:	9903      	ldr	r1, [sp, #12]
 800576a:	f000 ff07 	bl	800657c <_Bfree>
 800576e:	2300      	movs	r3, #0
 8005770:	7033      	strb	r3, [r6, #0]
 8005772:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005774:	3701      	adds	r7, #1
 8005776:	601f      	str	r7, [r3, #0]
 8005778:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 824b 	beq.w	8005c16 <_dtoa_r+0xb56>
 8005780:	601e      	str	r6, [r3, #0]
 8005782:	e248      	b.n	8005c16 <_dtoa_r+0xb56>
 8005784:	46b8      	mov	r8, r7
 8005786:	4633      	mov	r3, r6
 8005788:	461e      	mov	r6, r3
 800578a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800578e:	2a39      	cmp	r2, #57	@ 0x39
 8005790:	d106      	bne.n	80057a0 <_dtoa_r+0x6e0>
 8005792:	459a      	cmp	sl, r3
 8005794:	d1f8      	bne.n	8005788 <_dtoa_r+0x6c8>
 8005796:	2230      	movs	r2, #48	@ 0x30
 8005798:	f108 0801 	add.w	r8, r8, #1
 800579c:	f88a 2000 	strb.w	r2, [sl]
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	3201      	adds	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	e7a0      	b.n	80056ea <_dtoa_r+0x62a>
 80057a8:	2200      	movs	r2, #0
 80057aa:	4b6f      	ldr	r3, [pc, #444]	@ (8005968 <_dtoa_r+0x8a8>)
 80057ac:	f7fa fe94 	bl	80004d8 <__aeabi_dmul>
 80057b0:	2200      	movs	r2, #0
 80057b2:	2300      	movs	r3, #0
 80057b4:	4604      	mov	r4, r0
 80057b6:	460d      	mov	r5, r1
 80057b8:	f7fb f8f6 	bl	80009a8 <__aeabi_dcmpeq>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d09f      	beq.n	8005700 <_dtoa_r+0x640>
 80057c0:	e7d1      	b.n	8005766 <_dtoa_r+0x6a6>
 80057c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80057c4:	2a00      	cmp	r2, #0
 80057c6:	f000 80ea 	beq.w	800599e <_dtoa_r+0x8de>
 80057ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80057cc:	2a01      	cmp	r2, #1
 80057ce:	f300 80cd 	bgt.w	800596c <_dtoa_r+0x8ac>
 80057d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	f000 80c1 	beq.w	800595c <_dtoa_r+0x89c>
 80057da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80057de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80057e0:	9e04      	ldr	r6, [sp, #16]
 80057e2:	9a04      	ldr	r2, [sp, #16]
 80057e4:	2101      	movs	r1, #1
 80057e6:	441a      	add	r2, r3
 80057e8:	9204      	str	r2, [sp, #16]
 80057ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ec:	4648      	mov	r0, r9
 80057ee:	441a      	add	r2, r3
 80057f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80057f2:	f000 ffc1 	bl	8006778 <__i2b>
 80057f6:	4605      	mov	r5, r0
 80057f8:	b166      	cbz	r6, 8005814 <_dtoa_r+0x754>
 80057fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	dd09      	ble.n	8005814 <_dtoa_r+0x754>
 8005800:	42b3      	cmp	r3, r6
 8005802:	bfa8      	it	ge
 8005804:	4633      	movge	r3, r6
 8005806:	9a04      	ldr	r2, [sp, #16]
 8005808:	1af6      	subs	r6, r6, r3
 800580a:	1ad2      	subs	r2, r2, r3
 800580c:	9204      	str	r2, [sp, #16]
 800580e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	9309      	str	r3, [sp, #36]	@ 0x24
 8005814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005816:	b30b      	cbz	r3, 800585c <_dtoa_r+0x79c>
 8005818:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80c6 	beq.w	80059ac <_dtoa_r+0x8ec>
 8005820:	2c00      	cmp	r4, #0
 8005822:	f000 80c0 	beq.w	80059a6 <_dtoa_r+0x8e6>
 8005826:	4629      	mov	r1, r5
 8005828:	4622      	mov	r2, r4
 800582a:	4648      	mov	r0, r9
 800582c:	f001 f85c 	bl	80068e8 <__pow5mult>
 8005830:	9a03      	ldr	r2, [sp, #12]
 8005832:	4601      	mov	r1, r0
 8005834:	4605      	mov	r5, r0
 8005836:	4648      	mov	r0, r9
 8005838:	f000 ffb4 	bl	80067a4 <__multiply>
 800583c:	9903      	ldr	r1, [sp, #12]
 800583e:	4680      	mov	r8, r0
 8005840:	4648      	mov	r0, r9
 8005842:	f000 fe9b 	bl	800657c <_Bfree>
 8005846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005848:	1b1b      	subs	r3, r3, r4
 800584a:	930a      	str	r3, [sp, #40]	@ 0x28
 800584c:	f000 80b1 	beq.w	80059b2 <_dtoa_r+0x8f2>
 8005850:	4641      	mov	r1, r8
 8005852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005854:	4648      	mov	r0, r9
 8005856:	f001 f847 	bl	80068e8 <__pow5mult>
 800585a:	9003      	str	r0, [sp, #12]
 800585c:	2101      	movs	r1, #1
 800585e:	4648      	mov	r0, r9
 8005860:	f000 ff8a 	bl	8006778 <__i2b>
 8005864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005866:	4604      	mov	r4, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 81d8 	beq.w	8005c1e <_dtoa_r+0xb5e>
 800586e:	461a      	mov	r2, r3
 8005870:	4601      	mov	r1, r0
 8005872:	4648      	mov	r0, r9
 8005874:	f001 f838 	bl	80068e8 <__pow5mult>
 8005878:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800587a:	4604      	mov	r4, r0
 800587c:	2b01      	cmp	r3, #1
 800587e:	f300 809f 	bgt.w	80059c0 <_dtoa_r+0x900>
 8005882:	9b06      	ldr	r3, [sp, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f040 8097 	bne.w	80059b8 <_dtoa_r+0x8f8>
 800588a:	9b07      	ldr	r3, [sp, #28]
 800588c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 8093 	bne.w	80059bc <_dtoa_r+0x8fc>
 8005896:	9b07      	ldr	r3, [sp, #28]
 8005898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800589c:	0d1b      	lsrs	r3, r3, #20
 800589e:	051b      	lsls	r3, r3, #20
 80058a0:	b133      	cbz	r3, 80058b0 <_dtoa_r+0x7f0>
 80058a2:	9b04      	ldr	r3, [sp, #16]
 80058a4:	3301      	adds	r3, #1
 80058a6:	9304      	str	r3, [sp, #16]
 80058a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058aa:	3301      	adds	r3, #1
 80058ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ae:	2301      	movs	r3, #1
 80058b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 81b8 	beq.w	8005c2a <_dtoa_r+0xb6a>
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058c0:	6918      	ldr	r0, [r3, #16]
 80058c2:	f000 ff0d 	bl	80066e0 <__hi0bits>
 80058c6:	f1c0 0020 	rsb	r0, r0, #32
 80058ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058cc:	4418      	add	r0, r3
 80058ce:	f010 001f 	ands.w	r0, r0, #31
 80058d2:	f000 8082 	beq.w	80059da <_dtoa_r+0x91a>
 80058d6:	f1c0 0320 	rsb	r3, r0, #32
 80058da:	2b04      	cmp	r3, #4
 80058dc:	dd73      	ble.n	80059c6 <_dtoa_r+0x906>
 80058de:	9b04      	ldr	r3, [sp, #16]
 80058e0:	f1c0 001c 	rsb	r0, r0, #28
 80058e4:	4403      	add	r3, r0
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ea:	4406      	add	r6, r0
 80058ec:	4403      	add	r3, r0
 80058ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80058f0:	9b04      	ldr	r3, [sp, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	dd05      	ble.n	8005902 <_dtoa_r+0x842>
 80058f6:	461a      	mov	r2, r3
 80058f8:	4648      	mov	r0, r9
 80058fa:	9903      	ldr	r1, [sp, #12]
 80058fc:	f001 f84e 	bl	800699c <__lshift>
 8005900:	9003      	str	r0, [sp, #12]
 8005902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	dd05      	ble.n	8005914 <_dtoa_r+0x854>
 8005908:	4621      	mov	r1, r4
 800590a:	461a      	mov	r2, r3
 800590c:	4648      	mov	r0, r9
 800590e:	f001 f845 	bl	800699c <__lshift>
 8005912:	4604      	mov	r4, r0
 8005914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d061      	beq.n	80059de <_dtoa_r+0x91e>
 800591a:	4621      	mov	r1, r4
 800591c:	9803      	ldr	r0, [sp, #12]
 800591e:	f001 f8a9 	bl	8006a74 <__mcmp>
 8005922:	2800      	cmp	r0, #0
 8005924:	da5b      	bge.n	80059de <_dtoa_r+0x91e>
 8005926:	2300      	movs	r3, #0
 8005928:	220a      	movs	r2, #10
 800592a:	4648      	mov	r0, r9
 800592c:	9903      	ldr	r1, [sp, #12]
 800592e:	f000 fe47 	bl	80065c0 <__multadd>
 8005932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005934:	f107 38ff 	add.w	r8, r7, #4294967295
 8005938:	9003      	str	r0, [sp, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8177 	beq.w	8005c2e <_dtoa_r+0xb6e>
 8005940:	4629      	mov	r1, r5
 8005942:	2300      	movs	r3, #0
 8005944:	220a      	movs	r2, #10
 8005946:	4648      	mov	r0, r9
 8005948:	f000 fe3a 	bl	80065c0 <__multadd>
 800594c:	f1bb 0f00 	cmp.w	fp, #0
 8005950:	4605      	mov	r5, r0
 8005952:	dc6f      	bgt.n	8005a34 <_dtoa_r+0x974>
 8005954:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005956:	2b02      	cmp	r3, #2
 8005958:	dc49      	bgt.n	80059ee <_dtoa_r+0x92e>
 800595a:	e06b      	b.n	8005a34 <_dtoa_r+0x974>
 800595c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800595e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005962:	e73c      	b.n	80057de <_dtoa_r+0x71e>
 8005964:	3fe00000 	.word	0x3fe00000
 8005968:	40240000 	.word	0x40240000
 800596c:	9b08      	ldr	r3, [sp, #32]
 800596e:	1e5c      	subs	r4, r3, #1
 8005970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005972:	42a3      	cmp	r3, r4
 8005974:	db09      	blt.n	800598a <_dtoa_r+0x8ca>
 8005976:	1b1c      	subs	r4, r3, r4
 8005978:	9b08      	ldr	r3, [sp, #32]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f6bf af30 	bge.w	80057e0 <_dtoa_r+0x720>
 8005980:	9b04      	ldr	r3, [sp, #16]
 8005982:	9a08      	ldr	r2, [sp, #32]
 8005984:	1a9e      	subs	r6, r3, r2
 8005986:	2300      	movs	r3, #0
 8005988:	e72b      	b.n	80057e2 <_dtoa_r+0x722>
 800598a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800598c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800598e:	1ae3      	subs	r3, r4, r3
 8005990:	441a      	add	r2, r3
 8005992:	940a      	str	r4, [sp, #40]	@ 0x28
 8005994:	9e04      	ldr	r6, [sp, #16]
 8005996:	2400      	movs	r4, #0
 8005998:	9b08      	ldr	r3, [sp, #32]
 800599a:	920e      	str	r2, [sp, #56]	@ 0x38
 800599c:	e721      	b.n	80057e2 <_dtoa_r+0x722>
 800599e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80059a0:	9e04      	ldr	r6, [sp, #16]
 80059a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80059a4:	e728      	b.n	80057f8 <_dtoa_r+0x738>
 80059a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059aa:	e751      	b.n	8005850 <_dtoa_r+0x790>
 80059ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059ae:	9903      	ldr	r1, [sp, #12]
 80059b0:	e750      	b.n	8005854 <_dtoa_r+0x794>
 80059b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80059b6:	e751      	b.n	800585c <_dtoa_r+0x79c>
 80059b8:	2300      	movs	r3, #0
 80059ba:	e779      	b.n	80058b0 <_dtoa_r+0x7f0>
 80059bc:	9b06      	ldr	r3, [sp, #24]
 80059be:	e777      	b.n	80058b0 <_dtoa_r+0x7f0>
 80059c0:	2300      	movs	r3, #0
 80059c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80059c4:	e779      	b.n	80058ba <_dtoa_r+0x7fa>
 80059c6:	d093      	beq.n	80058f0 <_dtoa_r+0x830>
 80059c8:	9a04      	ldr	r2, [sp, #16]
 80059ca:	331c      	adds	r3, #28
 80059cc:	441a      	add	r2, r3
 80059ce:	9204      	str	r2, [sp, #16]
 80059d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059d2:	441e      	add	r6, r3
 80059d4:	441a      	add	r2, r3
 80059d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80059d8:	e78a      	b.n	80058f0 <_dtoa_r+0x830>
 80059da:	4603      	mov	r3, r0
 80059dc:	e7f4      	b.n	80059c8 <_dtoa_r+0x908>
 80059de:	9b08      	ldr	r3, [sp, #32]
 80059e0:	46b8      	mov	r8, r7
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	dc20      	bgt.n	8005a28 <_dtoa_r+0x968>
 80059e6:	469b      	mov	fp, r3
 80059e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	dd1e      	ble.n	8005a2c <_dtoa_r+0x96c>
 80059ee:	f1bb 0f00 	cmp.w	fp, #0
 80059f2:	f47f adb1 	bne.w	8005558 <_dtoa_r+0x498>
 80059f6:	4621      	mov	r1, r4
 80059f8:	465b      	mov	r3, fp
 80059fa:	2205      	movs	r2, #5
 80059fc:	4648      	mov	r0, r9
 80059fe:	f000 fddf 	bl	80065c0 <__multadd>
 8005a02:	4601      	mov	r1, r0
 8005a04:	4604      	mov	r4, r0
 8005a06:	9803      	ldr	r0, [sp, #12]
 8005a08:	f001 f834 	bl	8006a74 <__mcmp>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	f77f ada3 	ble.w	8005558 <_dtoa_r+0x498>
 8005a12:	4656      	mov	r6, sl
 8005a14:	2331      	movs	r3, #49	@ 0x31
 8005a16:	f108 0801 	add.w	r8, r8, #1
 8005a1a:	f806 3b01 	strb.w	r3, [r6], #1
 8005a1e:	e59f      	b.n	8005560 <_dtoa_r+0x4a0>
 8005a20:	46b8      	mov	r8, r7
 8005a22:	9c08      	ldr	r4, [sp, #32]
 8005a24:	4625      	mov	r5, r4
 8005a26:	e7f4      	b.n	8005a12 <_dtoa_r+0x952>
 8005a28:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8101 	beq.w	8005c36 <_dtoa_r+0xb76>
 8005a34:	2e00      	cmp	r6, #0
 8005a36:	dd05      	ble.n	8005a44 <_dtoa_r+0x984>
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	4648      	mov	r0, r9
 8005a3e:	f000 ffad 	bl	800699c <__lshift>
 8005a42:	4605      	mov	r5, r0
 8005a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d05c      	beq.n	8005b04 <_dtoa_r+0xa44>
 8005a4a:	4648      	mov	r0, r9
 8005a4c:	6869      	ldr	r1, [r5, #4]
 8005a4e:	f000 fd55 	bl	80064fc <_Balloc>
 8005a52:	4606      	mov	r6, r0
 8005a54:	b928      	cbnz	r0, 8005a62 <_dtoa_r+0x9a2>
 8005a56:	4602      	mov	r2, r0
 8005a58:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005a5c:	4b80      	ldr	r3, [pc, #512]	@ (8005c60 <_dtoa_r+0xba0>)
 8005a5e:	f7ff bb43 	b.w	80050e8 <_dtoa_r+0x28>
 8005a62:	692a      	ldr	r2, [r5, #16]
 8005a64:	f105 010c 	add.w	r1, r5, #12
 8005a68:	3202      	adds	r2, #2
 8005a6a:	0092      	lsls	r2, r2, #2
 8005a6c:	300c      	adds	r0, #12
 8005a6e:	f7ff fa6a 	bl	8004f46 <memcpy>
 8005a72:	2201      	movs	r2, #1
 8005a74:	4631      	mov	r1, r6
 8005a76:	4648      	mov	r0, r9
 8005a78:	f000 ff90 	bl	800699c <__lshift>
 8005a7c:	462f      	mov	r7, r5
 8005a7e:	4605      	mov	r5, r0
 8005a80:	f10a 0301 	add.w	r3, sl, #1
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	eb0a 030b 	add.w	r3, sl, fp
 8005a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a8c:	9b06      	ldr	r3, [sp, #24]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a94:	9b04      	ldr	r3, [sp, #16]
 8005a96:	4621      	mov	r1, r4
 8005a98:	9803      	ldr	r0, [sp, #12]
 8005a9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005a9e:	f7ff fa85 	bl	8004fac <quorem>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	3330      	adds	r3, #48	@ 0x30
 8005aa8:	9006      	str	r0, [sp, #24]
 8005aaa:	9803      	ldr	r0, [sp, #12]
 8005aac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aae:	f000 ffe1 	bl	8006a74 <__mcmp>
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	9008      	str	r0, [sp, #32]
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4648      	mov	r0, r9
 8005aba:	f000 fff7 	bl	8006aac <__mdiff>
 8005abe:	68c2      	ldr	r2, [r0, #12]
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ac4:	bb02      	cbnz	r2, 8005b08 <_dtoa_r+0xa48>
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	9803      	ldr	r0, [sp, #12]
 8005aca:	f000 ffd3 	bl	8006a74 <__mcmp>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4648      	mov	r0, r9
 8005ad6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005ada:	f000 fd4f 	bl	800657c <_Bfree>
 8005ade:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ae0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ae2:	9e04      	ldr	r6, [sp, #16]
 8005ae4:	ea42 0103 	orr.w	r1, r2, r3
 8005ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aea:	4319      	orrs	r1, r3
 8005aec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005aee:	d10d      	bne.n	8005b0c <_dtoa_r+0xa4c>
 8005af0:	2b39      	cmp	r3, #57	@ 0x39
 8005af2:	d027      	beq.n	8005b44 <_dtoa_r+0xa84>
 8005af4:	9a08      	ldr	r2, [sp, #32]
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	dd01      	ble.n	8005afe <_dtoa_r+0xa3e>
 8005afa:	9b06      	ldr	r3, [sp, #24]
 8005afc:	3331      	adds	r3, #49	@ 0x31
 8005afe:	f88b 3000 	strb.w	r3, [fp]
 8005b02:	e52e      	b.n	8005562 <_dtoa_r+0x4a2>
 8005b04:	4628      	mov	r0, r5
 8005b06:	e7b9      	b.n	8005a7c <_dtoa_r+0x9bc>
 8005b08:	2201      	movs	r2, #1
 8005b0a:	e7e2      	b.n	8005ad2 <_dtoa_r+0xa12>
 8005b0c:	9908      	ldr	r1, [sp, #32]
 8005b0e:	2900      	cmp	r1, #0
 8005b10:	db04      	blt.n	8005b1c <_dtoa_r+0xa5c>
 8005b12:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005b14:	4301      	orrs	r1, r0
 8005b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b18:	4301      	orrs	r1, r0
 8005b1a:	d120      	bne.n	8005b5e <_dtoa_r+0xa9e>
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	ddee      	ble.n	8005afe <_dtoa_r+0xa3e>
 8005b20:	2201      	movs	r2, #1
 8005b22:	9903      	ldr	r1, [sp, #12]
 8005b24:	4648      	mov	r0, r9
 8005b26:	9304      	str	r3, [sp, #16]
 8005b28:	f000 ff38 	bl	800699c <__lshift>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	9003      	str	r0, [sp, #12]
 8005b30:	f000 ffa0 	bl	8006a74 <__mcmp>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	9b04      	ldr	r3, [sp, #16]
 8005b38:	dc02      	bgt.n	8005b40 <_dtoa_r+0xa80>
 8005b3a:	d1e0      	bne.n	8005afe <_dtoa_r+0xa3e>
 8005b3c:	07da      	lsls	r2, r3, #31
 8005b3e:	d5de      	bpl.n	8005afe <_dtoa_r+0xa3e>
 8005b40:	2b39      	cmp	r3, #57	@ 0x39
 8005b42:	d1da      	bne.n	8005afa <_dtoa_r+0xa3a>
 8005b44:	2339      	movs	r3, #57	@ 0x39
 8005b46:	f88b 3000 	strb.w	r3, [fp]
 8005b4a:	4633      	mov	r3, r6
 8005b4c:	461e      	mov	r6, r3
 8005b4e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	2a39      	cmp	r2, #57	@ 0x39
 8005b56:	d04e      	beq.n	8005bf6 <_dtoa_r+0xb36>
 8005b58:	3201      	adds	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e501      	b.n	8005562 <_dtoa_r+0x4a2>
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	dd03      	ble.n	8005b6a <_dtoa_r+0xaaa>
 8005b62:	2b39      	cmp	r3, #57	@ 0x39
 8005b64:	d0ee      	beq.n	8005b44 <_dtoa_r+0xa84>
 8005b66:	3301      	adds	r3, #1
 8005b68:	e7c9      	b.n	8005afe <_dtoa_r+0xa3e>
 8005b6a:	9a04      	ldr	r2, [sp, #16]
 8005b6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b72:	428a      	cmp	r2, r1
 8005b74:	d028      	beq.n	8005bc8 <_dtoa_r+0xb08>
 8005b76:	2300      	movs	r3, #0
 8005b78:	220a      	movs	r2, #10
 8005b7a:	9903      	ldr	r1, [sp, #12]
 8005b7c:	4648      	mov	r0, r9
 8005b7e:	f000 fd1f 	bl	80065c0 <__multadd>
 8005b82:	42af      	cmp	r7, r5
 8005b84:	9003      	str	r0, [sp, #12]
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f04f 020a 	mov.w	r2, #10
 8005b8e:	4639      	mov	r1, r7
 8005b90:	4648      	mov	r0, r9
 8005b92:	d107      	bne.n	8005ba4 <_dtoa_r+0xae4>
 8005b94:	f000 fd14 	bl	80065c0 <__multadd>
 8005b98:	4607      	mov	r7, r0
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	9304      	str	r3, [sp, #16]
 8005ba2:	e777      	b.n	8005a94 <_dtoa_r+0x9d4>
 8005ba4:	f000 fd0c 	bl	80065c0 <__multadd>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4607      	mov	r7, r0
 8005bac:	2300      	movs	r3, #0
 8005bae:	220a      	movs	r2, #10
 8005bb0:	4648      	mov	r0, r9
 8005bb2:	f000 fd05 	bl	80065c0 <__multadd>
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	e7f0      	b.n	8005b9c <_dtoa_r+0xadc>
 8005bba:	f1bb 0f00 	cmp.w	fp, #0
 8005bbe:	bfcc      	ite	gt
 8005bc0:	465e      	movgt	r6, fp
 8005bc2:	2601      	movle	r6, #1
 8005bc4:	2700      	movs	r7, #0
 8005bc6:	4456      	add	r6, sl
 8005bc8:	2201      	movs	r2, #1
 8005bca:	9903      	ldr	r1, [sp, #12]
 8005bcc:	4648      	mov	r0, r9
 8005bce:	9304      	str	r3, [sp, #16]
 8005bd0:	f000 fee4 	bl	800699c <__lshift>
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	9003      	str	r0, [sp, #12]
 8005bd8:	f000 ff4c 	bl	8006a74 <__mcmp>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	dcb4      	bgt.n	8005b4a <_dtoa_r+0xa8a>
 8005be0:	d102      	bne.n	8005be8 <_dtoa_r+0xb28>
 8005be2:	9b04      	ldr	r3, [sp, #16]
 8005be4:	07db      	lsls	r3, r3, #31
 8005be6:	d4b0      	bmi.n	8005b4a <_dtoa_r+0xa8a>
 8005be8:	4633      	mov	r3, r6
 8005bea:	461e      	mov	r6, r3
 8005bec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bf0:	2a30      	cmp	r2, #48	@ 0x30
 8005bf2:	d0fa      	beq.n	8005bea <_dtoa_r+0xb2a>
 8005bf4:	e4b5      	b.n	8005562 <_dtoa_r+0x4a2>
 8005bf6:	459a      	cmp	sl, r3
 8005bf8:	d1a8      	bne.n	8005b4c <_dtoa_r+0xa8c>
 8005bfa:	2331      	movs	r3, #49	@ 0x31
 8005bfc:	f108 0801 	add.w	r8, r8, #1
 8005c00:	f88a 3000 	strb.w	r3, [sl]
 8005c04:	e4ad      	b.n	8005562 <_dtoa_r+0x4a2>
 8005c06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005c64 <_dtoa_r+0xba4>
 8005c0c:	b11b      	cbz	r3, 8005c16 <_dtoa_r+0xb56>
 8005c0e:	f10a 0308 	add.w	r3, sl, #8
 8005c12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	4650      	mov	r0, sl
 8005c18:	b017      	add	sp, #92	@ 0x5c
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	f77f ae2e 	ble.w	8005882 <_dtoa_r+0x7c2>
 8005c26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	e64d      	b.n	80058ca <_dtoa_r+0x80a>
 8005c2e:	f1bb 0f00 	cmp.w	fp, #0
 8005c32:	f77f aed9 	ble.w	80059e8 <_dtoa_r+0x928>
 8005c36:	4656      	mov	r6, sl
 8005c38:	4621      	mov	r1, r4
 8005c3a:	9803      	ldr	r0, [sp, #12]
 8005c3c:	f7ff f9b6 	bl	8004fac <quorem>
 8005c40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005c44:	f806 3b01 	strb.w	r3, [r6], #1
 8005c48:	eba6 020a 	sub.w	r2, r6, sl
 8005c4c:	4593      	cmp	fp, r2
 8005c4e:	ddb4      	ble.n	8005bba <_dtoa_r+0xafa>
 8005c50:	2300      	movs	r3, #0
 8005c52:	220a      	movs	r2, #10
 8005c54:	4648      	mov	r0, r9
 8005c56:	9903      	ldr	r1, [sp, #12]
 8005c58:	f000 fcb2 	bl	80065c0 <__multadd>
 8005c5c:	9003      	str	r0, [sp, #12]
 8005c5e:	e7eb      	b.n	8005c38 <_dtoa_r+0xb78>
 8005c60:	08007a82 	.word	0x08007a82
 8005c64:	08007a1d 	.word	0x08007a1d

08005c68 <_free_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	d040      	beq.n	8005cf2 <_free_r+0x8a>
 8005c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c74:	1f0c      	subs	r4, r1, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bfb8      	it	lt
 8005c7a:	18e4      	addlt	r4, r4, r3
 8005c7c:	f000 fc32 	bl	80064e4 <__malloc_lock>
 8005c80:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf4 <_free_r+0x8c>)
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	b933      	cbnz	r3, 8005c94 <_free_r+0x2c>
 8005c86:	6063      	str	r3, [r4, #4]
 8005c88:	6014      	str	r4, [r2, #0]
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c90:	f000 bc2e 	b.w	80064f0 <__malloc_unlock>
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d908      	bls.n	8005caa <_free_r+0x42>
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	1821      	adds	r1, r4, r0
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf01      	itttt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	1809      	addeq	r1, r1, r0
 8005ca6:	6021      	streq	r1, [r4, #0]
 8005ca8:	e7ed      	b.n	8005c86 <_free_r+0x1e>
 8005caa:	461a      	mov	r2, r3
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	b10b      	cbz	r3, 8005cb4 <_free_r+0x4c>
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d9fa      	bls.n	8005caa <_free_r+0x42>
 8005cb4:	6811      	ldr	r1, [r2, #0]
 8005cb6:	1850      	adds	r0, r2, r1
 8005cb8:	42a0      	cmp	r0, r4
 8005cba:	d10b      	bne.n	8005cd4 <_free_r+0x6c>
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	4401      	add	r1, r0
 8005cc0:	1850      	adds	r0, r2, r1
 8005cc2:	4283      	cmp	r3, r0
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	d1e0      	bne.n	8005c8a <_free_r+0x22>
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4408      	add	r0, r1
 8005cce:	6010      	str	r0, [r2, #0]
 8005cd0:	6053      	str	r3, [r2, #4]
 8005cd2:	e7da      	b.n	8005c8a <_free_r+0x22>
 8005cd4:	d902      	bls.n	8005cdc <_free_r+0x74>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	e7d6      	b.n	8005c8a <_free_r+0x22>
 8005cdc:	6820      	ldr	r0, [r4, #0]
 8005cde:	1821      	adds	r1, r4, r0
 8005ce0:	428b      	cmp	r3, r1
 8005ce2:	bf01      	itttt	eq
 8005ce4:	6819      	ldreq	r1, [r3, #0]
 8005ce6:	685b      	ldreq	r3, [r3, #4]
 8005ce8:	1809      	addeq	r1, r1, r0
 8005cea:	6021      	streq	r1, [r4, #0]
 8005cec:	6063      	str	r3, [r4, #4]
 8005cee:	6054      	str	r4, [r2, #4]
 8005cf0:	e7cb      	b.n	8005c8a <_free_r+0x22>
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000574 	.word	0x20000574

08005cf8 <rshift>:
 8005cf8:	6903      	ldr	r3, [r0, #16]
 8005cfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005d02:	f100 0414 	add.w	r4, r0, #20
 8005d06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005d0a:	dd46      	ble.n	8005d9a <rshift+0xa2>
 8005d0c:	f011 011f 	ands.w	r1, r1, #31
 8005d10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005d14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005d18:	d10c      	bne.n	8005d34 <rshift+0x3c>
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f100 0710 	add.w	r7, r0, #16
 8005d20:	42b1      	cmp	r1, r6
 8005d22:	d335      	bcc.n	8005d90 <rshift+0x98>
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	1eea      	subs	r2, r5, #3
 8005d2a:	4296      	cmp	r6, r2
 8005d2c:	bf38      	it	cc
 8005d2e:	2300      	movcc	r3, #0
 8005d30:	4423      	add	r3, r4
 8005d32:	e015      	b.n	8005d60 <rshift+0x68>
 8005d34:	46a1      	mov	r9, r4
 8005d36:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005d3a:	f1c1 0820 	rsb	r8, r1, #32
 8005d3e:	40cf      	lsrs	r7, r1
 8005d40:	f105 0e04 	add.w	lr, r5, #4
 8005d44:	4576      	cmp	r6, lr
 8005d46:	46f4      	mov	ip, lr
 8005d48:	d816      	bhi.n	8005d78 <rshift+0x80>
 8005d4a:	1a9a      	subs	r2, r3, r2
 8005d4c:	0092      	lsls	r2, r2, #2
 8005d4e:	3a04      	subs	r2, #4
 8005d50:	3501      	adds	r5, #1
 8005d52:	42ae      	cmp	r6, r5
 8005d54:	bf38      	it	cc
 8005d56:	2200      	movcc	r2, #0
 8005d58:	18a3      	adds	r3, r4, r2
 8005d5a:	50a7      	str	r7, [r4, r2]
 8005d5c:	b107      	cbz	r7, 8005d60 <rshift+0x68>
 8005d5e:	3304      	adds	r3, #4
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	eba3 0204 	sub.w	r2, r3, r4
 8005d66:	bf08      	it	eq
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005d6e:	6102      	str	r2, [r0, #16]
 8005d70:	bf08      	it	eq
 8005d72:	6143      	streq	r3, [r0, #20]
 8005d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d78:	f8dc c000 	ldr.w	ip, [ip]
 8005d7c:	fa0c fc08 	lsl.w	ip, ip, r8
 8005d80:	ea4c 0707 	orr.w	r7, ip, r7
 8005d84:	f849 7b04 	str.w	r7, [r9], #4
 8005d88:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d8c:	40cf      	lsrs	r7, r1
 8005d8e:	e7d9      	b.n	8005d44 <rshift+0x4c>
 8005d90:	f851 cb04 	ldr.w	ip, [r1], #4
 8005d94:	f847 cf04 	str.w	ip, [r7, #4]!
 8005d98:	e7c2      	b.n	8005d20 <rshift+0x28>
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	e7e0      	b.n	8005d60 <rshift+0x68>

08005d9e <__hexdig_fun>:
 8005d9e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8005da2:	2b09      	cmp	r3, #9
 8005da4:	d802      	bhi.n	8005dac <__hexdig_fun+0xe>
 8005da6:	3820      	subs	r0, #32
 8005da8:	b2c0      	uxtb	r0, r0
 8005daa:	4770      	bx	lr
 8005dac:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	d801      	bhi.n	8005db8 <__hexdig_fun+0x1a>
 8005db4:	3847      	subs	r0, #71	@ 0x47
 8005db6:	e7f7      	b.n	8005da8 <__hexdig_fun+0xa>
 8005db8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005dbc:	2b05      	cmp	r3, #5
 8005dbe:	d801      	bhi.n	8005dc4 <__hexdig_fun+0x26>
 8005dc0:	3827      	subs	r0, #39	@ 0x27
 8005dc2:	e7f1      	b.n	8005da8 <__hexdig_fun+0xa>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	4770      	bx	lr

08005dc8 <__gethex>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	468a      	mov	sl, r1
 8005dce:	4690      	mov	r8, r2
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	9302      	str	r3, [sp, #8]
 8005dd4:	680b      	ldr	r3, [r1, #0]
 8005dd6:	9001      	str	r0, [sp, #4]
 8005dd8:	1c9c      	adds	r4, r3, #2
 8005dda:	46a1      	mov	r9, r4
 8005ddc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005de0:	2830      	cmp	r0, #48	@ 0x30
 8005de2:	d0fa      	beq.n	8005dda <__gethex+0x12>
 8005de4:	eba9 0303 	sub.w	r3, r9, r3
 8005de8:	f1a3 0b02 	sub.w	fp, r3, #2
 8005dec:	f7ff ffd7 	bl	8005d9e <__hexdig_fun>
 8005df0:	4605      	mov	r5, r0
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d168      	bne.n	8005ec8 <__gethex+0x100>
 8005df6:	2201      	movs	r2, #1
 8005df8:	4648      	mov	r0, r9
 8005dfa:	499f      	ldr	r1, [pc, #636]	@ (8006078 <__gethex+0x2b0>)
 8005dfc:	f7fe ff91 	bl	8004d22 <strncmp>
 8005e00:	4607      	mov	r7, r0
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d167      	bne.n	8005ed6 <__gethex+0x10e>
 8005e06:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005e0a:	4626      	mov	r6, r4
 8005e0c:	f7ff ffc7 	bl	8005d9e <__hexdig_fun>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d062      	beq.n	8005eda <__gethex+0x112>
 8005e14:	4623      	mov	r3, r4
 8005e16:	7818      	ldrb	r0, [r3, #0]
 8005e18:	4699      	mov	r9, r3
 8005e1a:	2830      	cmp	r0, #48	@ 0x30
 8005e1c:	f103 0301 	add.w	r3, r3, #1
 8005e20:	d0f9      	beq.n	8005e16 <__gethex+0x4e>
 8005e22:	f7ff ffbc 	bl	8005d9e <__hexdig_fun>
 8005e26:	fab0 f580 	clz	r5, r0
 8005e2a:	f04f 0b01 	mov.w	fp, #1
 8005e2e:	096d      	lsrs	r5, r5, #5
 8005e30:	464a      	mov	r2, r9
 8005e32:	4616      	mov	r6, r2
 8005e34:	7830      	ldrb	r0, [r6, #0]
 8005e36:	3201      	adds	r2, #1
 8005e38:	f7ff ffb1 	bl	8005d9e <__hexdig_fun>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d1f8      	bne.n	8005e32 <__gethex+0x6a>
 8005e40:	2201      	movs	r2, #1
 8005e42:	4630      	mov	r0, r6
 8005e44:	498c      	ldr	r1, [pc, #560]	@ (8006078 <__gethex+0x2b0>)
 8005e46:	f7fe ff6c 	bl	8004d22 <strncmp>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d13f      	bne.n	8005ece <__gethex+0x106>
 8005e4e:	b944      	cbnz	r4, 8005e62 <__gethex+0x9a>
 8005e50:	1c74      	adds	r4, r6, #1
 8005e52:	4622      	mov	r2, r4
 8005e54:	4616      	mov	r6, r2
 8005e56:	7830      	ldrb	r0, [r6, #0]
 8005e58:	3201      	adds	r2, #1
 8005e5a:	f7ff ffa0 	bl	8005d9e <__hexdig_fun>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d1f8      	bne.n	8005e54 <__gethex+0x8c>
 8005e62:	1ba4      	subs	r4, r4, r6
 8005e64:	00a7      	lsls	r7, r4, #2
 8005e66:	7833      	ldrb	r3, [r6, #0]
 8005e68:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005e6c:	2b50      	cmp	r3, #80	@ 0x50
 8005e6e:	d13e      	bne.n	8005eee <__gethex+0x126>
 8005e70:	7873      	ldrb	r3, [r6, #1]
 8005e72:	2b2b      	cmp	r3, #43	@ 0x2b
 8005e74:	d033      	beq.n	8005ede <__gethex+0x116>
 8005e76:	2b2d      	cmp	r3, #45	@ 0x2d
 8005e78:	d034      	beq.n	8005ee4 <__gethex+0x11c>
 8005e7a:	2400      	movs	r4, #0
 8005e7c:	1c71      	adds	r1, r6, #1
 8005e7e:	7808      	ldrb	r0, [r1, #0]
 8005e80:	f7ff ff8d 	bl	8005d9e <__hexdig_fun>
 8005e84:	1e43      	subs	r3, r0, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b18      	cmp	r3, #24
 8005e8a:	d830      	bhi.n	8005eee <__gethex+0x126>
 8005e8c:	f1a0 0210 	sub.w	r2, r0, #16
 8005e90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005e94:	f7ff ff83 	bl	8005d9e <__hexdig_fun>
 8005e98:	f100 3cff 	add.w	ip, r0, #4294967295
 8005e9c:	fa5f fc8c 	uxtb.w	ip, ip
 8005ea0:	f1bc 0f18 	cmp.w	ip, #24
 8005ea4:	f04f 030a 	mov.w	r3, #10
 8005ea8:	d91e      	bls.n	8005ee8 <__gethex+0x120>
 8005eaa:	b104      	cbz	r4, 8005eae <__gethex+0xe6>
 8005eac:	4252      	negs	r2, r2
 8005eae:	4417      	add	r7, r2
 8005eb0:	f8ca 1000 	str.w	r1, [sl]
 8005eb4:	b1ed      	cbz	r5, 8005ef2 <__gethex+0x12a>
 8005eb6:	f1bb 0f00 	cmp.w	fp, #0
 8005eba:	bf0c      	ite	eq
 8005ebc:	2506      	moveq	r5, #6
 8005ebe:	2500      	movne	r5, #0
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	b005      	add	sp, #20
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec8:	2500      	movs	r5, #0
 8005eca:	462c      	mov	r4, r5
 8005ecc:	e7b0      	b.n	8005e30 <__gethex+0x68>
 8005ece:	2c00      	cmp	r4, #0
 8005ed0:	d1c7      	bne.n	8005e62 <__gethex+0x9a>
 8005ed2:	4627      	mov	r7, r4
 8005ed4:	e7c7      	b.n	8005e66 <__gethex+0x9e>
 8005ed6:	464e      	mov	r6, r9
 8005ed8:	462f      	mov	r7, r5
 8005eda:	2501      	movs	r5, #1
 8005edc:	e7c3      	b.n	8005e66 <__gethex+0x9e>
 8005ede:	2400      	movs	r4, #0
 8005ee0:	1cb1      	adds	r1, r6, #2
 8005ee2:	e7cc      	b.n	8005e7e <__gethex+0xb6>
 8005ee4:	2401      	movs	r4, #1
 8005ee6:	e7fb      	b.n	8005ee0 <__gethex+0x118>
 8005ee8:	fb03 0002 	mla	r0, r3, r2, r0
 8005eec:	e7ce      	b.n	8005e8c <__gethex+0xc4>
 8005eee:	4631      	mov	r1, r6
 8005ef0:	e7de      	b.n	8005eb0 <__gethex+0xe8>
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	eba6 0309 	sub.w	r3, r6, r9
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	2b07      	cmp	r3, #7
 8005efc:	dc0a      	bgt.n	8005f14 <__gethex+0x14c>
 8005efe:	9801      	ldr	r0, [sp, #4]
 8005f00:	f000 fafc 	bl	80064fc <_Balloc>
 8005f04:	4604      	mov	r4, r0
 8005f06:	b940      	cbnz	r0, 8005f1a <__gethex+0x152>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	21e4      	movs	r1, #228	@ 0xe4
 8005f0c:	4b5b      	ldr	r3, [pc, #364]	@ (800607c <__gethex+0x2b4>)
 8005f0e:	485c      	ldr	r0, [pc, #368]	@ (8006080 <__gethex+0x2b8>)
 8005f10:	f7ff f82e 	bl	8004f70 <__assert_func>
 8005f14:	3101      	adds	r1, #1
 8005f16:	105b      	asrs	r3, r3, #1
 8005f18:	e7ef      	b.n	8005efa <__gethex+0x132>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f100 0a14 	add.w	sl, r0, #20
 8005f20:	4655      	mov	r5, sl
 8005f22:	469b      	mov	fp, r3
 8005f24:	45b1      	cmp	r9, r6
 8005f26:	d337      	bcc.n	8005f98 <__gethex+0x1d0>
 8005f28:	f845 bb04 	str.w	fp, [r5], #4
 8005f2c:	eba5 050a 	sub.w	r5, r5, sl
 8005f30:	10ad      	asrs	r5, r5, #2
 8005f32:	6125      	str	r5, [r4, #16]
 8005f34:	4658      	mov	r0, fp
 8005f36:	f000 fbd3 	bl	80066e0 <__hi0bits>
 8005f3a:	016d      	lsls	r5, r5, #5
 8005f3c:	f8d8 6000 	ldr.w	r6, [r8]
 8005f40:	1a2d      	subs	r5, r5, r0
 8005f42:	42b5      	cmp	r5, r6
 8005f44:	dd54      	ble.n	8005ff0 <__gethex+0x228>
 8005f46:	1bad      	subs	r5, r5, r6
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 ff55 	bl	8006dfa <__any_on>
 8005f50:	4681      	mov	r9, r0
 8005f52:	b178      	cbz	r0, 8005f74 <__gethex+0x1ac>
 8005f54:	f04f 0901 	mov.w	r9, #1
 8005f58:	1e6b      	subs	r3, r5, #1
 8005f5a:	1159      	asrs	r1, r3, #5
 8005f5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005f60:	f003 021f 	and.w	r2, r3, #31
 8005f64:	fa09 f202 	lsl.w	r2, r9, r2
 8005f68:	420a      	tst	r2, r1
 8005f6a:	d003      	beq.n	8005f74 <__gethex+0x1ac>
 8005f6c:	454b      	cmp	r3, r9
 8005f6e:	dc36      	bgt.n	8005fde <__gethex+0x216>
 8005f70:	f04f 0902 	mov.w	r9, #2
 8005f74:	4629      	mov	r1, r5
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7ff febe 	bl	8005cf8 <rshift>
 8005f7c:	442f      	add	r7, r5
 8005f7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f82:	42bb      	cmp	r3, r7
 8005f84:	da42      	bge.n	800600c <__gethex+0x244>
 8005f86:	4621      	mov	r1, r4
 8005f88:	9801      	ldr	r0, [sp, #4]
 8005f8a:	f000 faf7 	bl	800657c <_Bfree>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f92:	25a3      	movs	r5, #163	@ 0xa3
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e793      	b.n	8005ec0 <__gethex+0xf8>
 8005f98:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005f9c:	2a2e      	cmp	r2, #46	@ 0x2e
 8005f9e:	d012      	beq.n	8005fc6 <__gethex+0x1fe>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d104      	bne.n	8005fae <__gethex+0x1e6>
 8005fa4:	f845 bb04 	str.w	fp, [r5], #4
 8005fa8:	f04f 0b00 	mov.w	fp, #0
 8005fac:	465b      	mov	r3, fp
 8005fae:	7830      	ldrb	r0, [r6, #0]
 8005fb0:	9303      	str	r3, [sp, #12]
 8005fb2:	f7ff fef4 	bl	8005d9e <__hexdig_fun>
 8005fb6:	9b03      	ldr	r3, [sp, #12]
 8005fb8:	f000 000f 	and.w	r0, r0, #15
 8005fbc:	4098      	lsls	r0, r3
 8005fbe:	ea4b 0b00 	orr.w	fp, fp, r0
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	e7ae      	b.n	8005f24 <__gethex+0x15c>
 8005fc6:	45b1      	cmp	r9, r6
 8005fc8:	d8ea      	bhi.n	8005fa0 <__gethex+0x1d8>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4630      	mov	r0, r6
 8005fce:	492a      	ldr	r1, [pc, #168]	@ (8006078 <__gethex+0x2b0>)
 8005fd0:	9303      	str	r3, [sp, #12]
 8005fd2:	f7fe fea6 	bl	8004d22 <strncmp>
 8005fd6:	9b03      	ldr	r3, [sp, #12]
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d1e1      	bne.n	8005fa0 <__gethex+0x1d8>
 8005fdc:	e7a2      	b.n	8005f24 <__gethex+0x15c>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	1ea9      	subs	r1, r5, #2
 8005fe2:	f000 ff0a 	bl	8006dfa <__any_on>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d0c2      	beq.n	8005f70 <__gethex+0x1a8>
 8005fea:	f04f 0903 	mov.w	r9, #3
 8005fee:	e7c1      	b.n	8005f74 <__gethex+0x1ac>
 8005ff0:	da09      	bge.n	8006006 <__gethex+0x23e>
 8005ff2:	1b75      	subs	r5, r6, r5
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	9801      	ldr	r0, [sp, #4]
 8005ffa:	f000 fccf 	bl	800699c <__lshift>
 8005ffe:	4604      	mov	r4, r0
 8006000:	1b7f      	subs	r7, r7, r5
 8006002:	f100 0a14 	add.w	sl, r0, #20
 8006006:	f04f 0900 	mov.w	r9, #0
 800600a:	e7b8      	b.n	8005f7e <__gethex+0x1b6>
 800600c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006010:	42bd      	cmp	r5, r7
 8006012:	dd6f      	ble.n	80060f4 <__gethex+0x32c>
 8006014:	1bed      	subs	r5, r5, r7
 8006016:	42ae      	cmp	r6, r5
 8006018:	dc34      	bgt.n	8006084 <__gethex+0x2bc>
 800601a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d022      	beq.n	8006068 <__gethex+0x2a0>
 8006022:	2b03      	cmp	r3, #3
 8006024:	d024      	beq.n	8006070 <__gethex+0x2a8>
 8006026:	2b01      	cmp	r3, #1
 8006028:	d115      	bne.n	8006056 <__gethex+0x28e>
 800602a:	42ae      	cmp	r6, r5
 800602c:	d113      	bne.n	8006056 <__gethex+0x28e>
 800602e:	2e01      	cmp	r6, #1
 8006030:	d10b      	bne.n	800604a <__gethex+0x282>
 8006032:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006036:	9a02      	ldr	r2, [sp, #8]
 8006038:	2562      	movs	r5, #98	@ 0x62
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	2301      	movs	r3, #1
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	f8ca 3000 	str.w	r3, [sl]
 8006044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006046:	601c      	str	r4, [r3, #0]
 8006048:	e73a      	b.n	8005ec0 <__gethex+0xf8>
 800604a:	4620      	mov	r0, r4
 800604c:	1e71      	subs	r1, r6, #1
 800604e:	f000 fed4 	bl	8006dfa <__any_on>
 8006052:	2800      	cmp	r0, #0
 8006054:	d1ed      	bne.n	8006032 <__gethex+0x26a>
 8006056:	4621      	mov	r1, r4
 8006058:	9801      	ldr	r0, [sp, #4]
 800605a:	f000 fa8f 	bl	800657c <_Bfree>
 800605e:	2300      	movs	r3, #0
 8006060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006062:	2550      	movs	r5, #80	@ 0x50
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e72b      	b.n	8005ec0 <__gethex+0xf8>
 8006068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f3      	bne.n	8006056 <__gethex+0x28e>
 800606e:	e7e0      	b.n	8006032 <__gethex+0x26a>
 8006070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1dd      	bne.n	8006032 <__gethex+0x26a>
 8006076:	e7ee      	b.n	8006056 <__gethex+0x28e>
 8006078:	08007932 	.word	0x08007932
 800607c:	08007a82 	.word	0x08007a82
 8006080:	08007a93 	.word	0x08007a93
 8006084:	1e6f      	subs	r7, r5, #1
 8006086:	f1b9 0f00 	cmp.w	r9, #0
 800608a:	d130      	bne.n	80060ee <__gethex+0x326>
 800608c:	b127      	cbz	r7, 8006098 <__gethex+0x2d0>
 800608e:	4639      	mov	r1, r7
 8006090:	4620      	mov	r0, r4
 8006092:	f000 feb2 	bl	8006dfa <__any_on>
 8006096:	4681      	mov	r9, r0
 8006098:	2301      	movs	r3, #1
 800609a:	4629      	mov	r1, r5
 800609c:	1b76      	subs	r6, r6, r5
 800609e:	2502      	movs	r5, #2
 80060a0:	117a      	asrs	r2, r7, #5
 80060a2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80060a6:	f007 071f 	and.w	r7, r7, #31
 80060aa:	40bb      	lsls	r3, r7
 80060ac:	4213      	tst	r3, r2
 80060ae:	4620      	mov	r0, r4
 80060b0:	bf18      	it	ne
 80060b2:	f049 0902 	orrne.w	r9, r9, #2
 80060b6:	f7ff fe1f 	bl	8005cf8 <rshift>
 80060ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80060be:	f1b9 0f00 	cmp.w	r9, #0
 80060c2:	d047      	beq.n	8006154 <__gethex+0x38c>
 80060c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d015      	beq.n	80060f8 <__gethex+0x330>
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d017      	beq.n	8006100 <__gethex+0x338>
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d109      	bne.n	80060e8 <__gethex+0x320>
 80060d4:	f019 0f02 	tst.w	r9, #2
 80060d8:	d006      	beq.n	80060e8 <__gethex+0x320>
 80060da:	f8da 3000 	ldr.w	r3, [sl]
 80060de:	ea49 0903 	orr.w	r9, r9, r3
 80060e2:	f019 0f01 	tst.w	r9, #1
 80060e6:	d10e      	bne.n	8006106 <__gethex+0x33e>
 80060e8:	f045 0510 	orr.w	r5, r5, #16
 80060ec:	e032      	b.n	8006154 <__gethex+0x38c>
 80060ee:	f04f 0901 	mov.w	r9, #1
 80060f2:	e7d1      	b.n	8006098 <__gethex+0x2d0>
 80060f4:	2501      	movs	r5, #1
 80060f6:	e7e2      	b.n	80060be <__gethex+0x2f6>
 80060f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060fa:	f1c3 0301 	rsb	r3, r3, #1
 80060fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <__gethex+0x320>
 8006106:	f04f 0c00 	mov.w	ip, #0
 800610a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800610e:	f104 0314 	add.w	r3, r4, #20
 8006112:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006116:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800611a:	4618      	mov	r0, r3
 800611c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006120:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006124:	d01b      	beq.n	800615e <__gethex+0x396>
 8006126:	3201      	adds	r2, #1
 8006128:	6002      	str	r2, [r0, #0]
 800612a:	2d02      	cmp	r5, #2
 800612c:	f104 0314 	add.w	r3, r4, #20
 8006130:	d13c      	bne.n	80061ac <__gethex+0x3e4>
 8006132:	f8d8 2000 	ldr.w	r2, [r8]
 8006136:	3a01      	subs	r2, #1
 8006138:	42b2      	cmp	r2, r6
 800613a:	d109      	bne.n	8006150 <__gethex+0x388>
 800613c:	2201      	movs	r2, #1
 800613e:	1171      	asrs	r1, r6, #5
 8006140:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006144:	f006 061f 	and.w	r6, r6, #31
 8006148:	fa02 f606 	lsl.w	r6, r2, r6
 800614c:	421e      	tst	r6, r3
 800614e:	d13a      	bne.n	80061c6 <__gethex+0x3fe>
 8006150:	f045 0520 	orr.w	r5, r5, #32
 8006154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006156:	601c      	str	r4, [r3, #0]
 8006158:	9b02      	ldr	r3, [sp, #8]
 800615a:	601f      	str	r7, [r3, #0]
 800615c:	e6b0      	b.n	8005ec0 <__gethex+0xf8>
 800615e:	4299      	cmp	r1, r3
 8006160:	f843 cc04 	str.w	ip, [r3, #-4]
 8006164:	d8d9      	bhi.n	800611a <__gethex+0x352>
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	459b      	cmp	fp, r3
 800616a:	db17      	blt.n	800619c <__gethex+0x3d4>
 800616c:	6861      	ldr	r1, [r4, #4]
 800616e:	9801      	ldr	r0, [sp, #4]
 8006170:	3101      	adds	r1, #1
 8006172:	f000 f9c3 	bl	80064fc <_Balloc>
 8006176:	4681      	mov	r9, r0
 8006178:	b918      	cbnz	r0, 8006182 <__gethex+0x3ba>
 800617a:	4602      	mov	r2, r0
 800617c:	2184      	movs	r1, #132	@ 0x84
 800617e:	4b19      	ldr	r3, [pc, #100]	@ (80061e4 <__gethex+0x41c>)
 8006180:	e6c5      	b.n	8005f0e <__gethex+0x146>
 8006182:	6922      	ldr	r2, [r4, #16]
 8006184:	f104 010c 	add.w	r1, r4, #12
 8006188:	3202      	adds	r2, #2
 800618a:	0092      	lsls	r2, r2, #2
 800618c:	300c      	adds	r0, #12
 800618e:	f7fe feda 	bl	8004f46 <memcpy>
 8006192:	4621      	mov	r1, r4
 8006194:	9801      	ldr	r0, [sp, #4]
 8006196:	f000 f9f1 	bl	800657c <_Bfree>
 800619a:	464c      	mov	r4, r9
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	6122      	str	r2, [r4, #16]
 80061a2:	2201      	movs	r2, #1
 80061a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061a8:	615a      	str	r2, [r3, #20]
 80061aa:	e7be      	b.n	800612a <__gethex+0x362>
 80061ac:	6922      	ldr	r2, [r4, #16]
 80061ae:	455a      	cmp	r2, fp
 80061b0:	dd0b      	ble.n	80061ca <__gethex+0x402>
 80061b2:	2101      	movs	r1, #1
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7ff fd9f 	bl	8005cf8 <rshift>
 80061ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061be:	3701      	adds	r7, #1
 80061c0:	42bb      	cmp	r3, r7
 80061c2:	f6ff aee0 	blt.w	8005f86 <__gethex+0x1be>
 80061c6:	2501      	movs	r5, #1
 80061c8:	e7c2      	b.n	8006150 <__gethex+0x388>
 80061ca:	f016 061f 	ands.w	r6, r6, #31
 80061ce:	d0fa      	beq.n	80061c6 <__gethex+0x3fe>
 80061d0:	4453      	add	r3, sl
 80061d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80061d6:	f000 fa83 	bl	80066e0 <__hi0bits>
 80061da:	f1c6 0620 	rsb	r6, r6, #32
 80061de:	42b0      	cmp	r0, r6
 80061e0:	dbe7      	blt.n	80061b2 <__gethex+0x3ea>
 80061e2:	e7f0      	b.n	80061c6 <__gethex+0x3fe>
 80061e4:	08007a82 	.word	0x08007a82

080061e8 <L_shift>:
 80061e8:	f1c2 0208 	rsb	r2, r2, #8
 80061ec:	0092      	lsls	r2, r2, #2
 80061ee:	b570      	push	{r4, r5, r6, lr}
 80061f0:	f1c2 0620 	rsb	r6, r2, #32
 80061f4:	6843      	ldr	r3, [r0, #4]
 80061f6:	6804      	ldr	r4, [r0, #0]
 80061f8:	fa03 f506 	lsl.w	r5, r3, r6
 80061fc:	432c      	orrs	r4, r5
 80061fe:	40d3      	lsrs	r3, r2
 8006200:	6004      	str	r4, [r0, #0]
 8006202:	f840 3f04 	str.w	r3, [r0, #4]!
 8006206:	4288      	cmp	r0, r1
 8006208:	d3f4      	bcc.n	80061f4 <L_shift+0xc>
 800620a:	bd70      	pop	{r4, r5, r6, pc}

0800620c <__match>:
 800620c:	b530      	push	{r4, r5, lr}
 800620e:	6803      	ldr	r3, [r0, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006216:	b914      	cbnz	r4, 800621e <__match+0x12>
 8006218:	6003      	str	r3, [r0, #0]
 800621a:	2001      	movs	r0, #1
 800621c:	bd30      	pop	{r4, r5, pc}
 800621e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006222:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006226:	2d19      	cmp	r5, #25
 8006228:	bf98      	it	ls
 800622a:	3220      	addls	r2, #32
 800622c:	42a2      	cmp	r2, r4
 800622e:	d0f0      	beq.n	8006212 <__match+0x6>
 8006230:	2000      	movs	r0, #0
 8006232:	e7f3      	b.n	800621c <__match+0x10>

08006234 <__hexnan>:
 8006234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006238:	2500      	movs	r5, #0
 800623a:	680b      	ldr	r3, [r1, #0]
 800623c:	4682      	mov	sl, r0
 800623e:	115e      	asrs	r6, r3, #5
 8006240:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006244:	f013 031f 	ands.w	r3, r3, #31
 8006248:	bf18      	it	ne
 800624a:	3604      	addne	r6, #4
 800624c:	1f37      	subs	r7, r6, #4
 800624e:	4690      	mov	r8, r2
 8006250:	46b9      	mov	r9, r7
 8006252:	463c      	mov	r4, r7
 8006254:	46ab      	mov	fp, r5
 8006256:	b087      	sub	sp, #28
 8006258:	6801      	ldr	r1, [r0, #0]
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	f846 5c04 	str.w	r5, [r6, #-4]
 8006260:	9502      	str	r5, [sp, #8]
 8006262:	784a      	ldrb	r2, [r1, #1]
 8006264:	1c4b      	adds	r3, r1, #1
 8006266:	9303      	str	r3, [sp, #12]
 8006268:	b342      	cbz	r2, 80062bc <__hexnan+0x88>
 800626a:	4610      	mov	r0, r2
 800626c:	9105      	str	r1, [sp, #20]
 800626e:	9204      	str	r2, [sp, #16]
 8006270:	f7ff fd95 	bl	8005d9e <__hexdig_fun>
 8006274:	2800      	cmp	r0, #0
 8006276:	d151      	bne.n	800631c <__hexnan+0xe8>
 8006278:	9a04      	ldr	r2, [sp, #16]
 800627a:	9905      	ldr	r1, [sp, #20]
 800627c:	2a20      	cmp	r2, #32
 800627e:	d818      	bhi.n	80062b2 <__hexnan+0x7e>
 8006280:	9b02      	ldr	r3, [sp, #8]
 8006282:	459b      	cmp	fp, r3
 8006284:	dd13      	ble.n	80062ae <__hexnan+0x7a>
 8006286:	454c      	cmp	r4, r9
 8006288:	d206      	bcs.n	8006298 <__hexnan+0x64>
 800628a:	2d07      	cmp	r5, #7
 800628c:	dc04      	bgt.n	8006298 <__hexnan+0x64>
 800628e:	462a      	mov	r2, r5
 8006290:	4649      	mov	r1, r9
 8006292:	4620      	mov	r0, r4
 8006294:	f7ff ffa8 	bl	80061e8 <L_shift>
 8006298:	4544      	cmp	r4, r8
 800629a:	d952      	bls.n	8006342 <__hexnan+0x10e>
 800629c:	2300      	movs	r3, #0
 800629e:	f1a4 0904 	sub.w	r9, r4, #4
 80062a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80062a6:	461d      	mov	r5, r3
 80062a8:	464c      	mov	r4, r9
 80062aa:	f8cd b008 	str.w	fp, [sp, #8]
 80062ae:	9903      	ldr	r1, [sp, #12]
 80062b0:	e7d7      	b.n	8006262 <__hexnan+0x2e>
 80062b2:	2a29      	cmp	r2, #41	@ 0x29
 80062b4:	d157      	bne.n	8006366 <__hexnan+0x132>
 80062b6:	3102      	adds	r1, #2
 80062b8:	f8ca 1000 	str.w	r1, [sl]
 80062bc:	f1bb 0f00 	cmp.w	fp, #0
 80062c0:	d051      	beq.n	8006366 <__hexnan+0x132>
 80062c2:	454c      	cmp	r4, r9
 80062c4:	d206      	bcs.n	80062d4 <__hexnan+0xa0>
 80062c6:	2d07      	cmp	r5, #7
 80062c8:	dc04      	bgt.n	80062d4 <__hexnan+0xa0>
 80062ca:	462a      	mov	r2, r5
 80062cc:	4649      	mov	r1, r9
 80062ce:	4620      	mov	r0, r4
 80062d0:	f7ff ff8a 	bl	80061e8 <L_shift>
 80062d4:	4544      	cmp	r4, r8
 80062d6:	d936      	bls.n	8006346 <__hexnan+0x112>
 80062d8:	4623      	mov	r3, r4
 80062da:	f1a8 0204 	sub.w	r2, r8, #4
 80062de:	f853 1b04 	ldr.w	r1, [r3], #4
 80062e2:	429f      	cmp	r7, r3
 80062e4:	f842 1f04 	str.w	r1, [r2, #4]!
 80062e8:	d2f9      	bcs.n	80062de <__hexnan+0xaa>
 80062ea:	1b3b      	subs	r3, r7, r4
 80062ec:	f023 0303 	bic.w	r3, r3, #3
 80062f0:	3304      	adds	r3, #4
 80062f2:	3401      	adds	r4, #1
 80062f4:	3e03      	subs	r6, #3
 80062f6:	42b4      	cmp	r4, r6
 80062f8:	bf88      	it	hi
 80062fa:	2304      	movhi	r3, #4
 80062fc:	2200      	movs	r2, #0
 80062fe:	4443      	add	r3, r8
 8006300:	f843 2b04 	str.w	r2, [r3], #4
 8006304:	429f      	cmp	r7, r3
 8006306:	d2fb      	bcs.n	8006300 <__hexnan+0xcc>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	b91b      	cbnz	r3, 8006314 <__hexnan+0xe0>
 800630c:	4547      	cmp	r7, r8
 800630e:	d128      	bne.n	8006362 <__hexnan+0x12e>
 8006310:	2301      	movs	r3, #1
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	2005      	movs	r0, #5
 8006316:	b007      	add	sp, #28
 8006318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631c:	3501      	adds	r5, #1
 800631e:	2d08      	cmp	r5, #8
 8006320:	f10b 0b01 	add.w	fp, fp, #1
 8006324:	dd06      	ble.n	8006334 <__hexnan+0x100>
 8006326:	4544      	cmp	r4, r8
 8006328:	d9c1      	bls.n	80062ae <__hexnan+0x7a>
 800632a:	2300      	movs	r3, #0
 800632c:	2501      	movs	r5, #1
 800632e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006332:	3c04      	subs	r4, #4
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	f000 000f 	and.w	r0, r0, #15
 800633a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800633e:	6020      	str	r0, [r4, #0]
 8006340:	e7b5      	b.n	80062ae <__hexnan+0x7a>
 8006342:	2508      	movs	r5, #8
 8006344:	e7b3      	b.n	80062ae <__hexnan+0x7a>
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0dd      	beq.n	8006308 <__hexnan+0xd4>
 800634c:	f04f 32ff 	mov.w	r2, #4294967295
 8006350:	f1c3 0320 	rsb	r3, r3, #32
 8006354:	40da      	lsrs	r2, r3
 8006356:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800635a:	4013      	ands	r3, r2
 800635c:	f846 3c04 	str.w	r3, [r6, #-4]
 8006360:	e7d2      	b.n	8006308 <__hexnan+0xd4>
 8006362:	3f04      	subs	r7, #4
 8006364:	e7d0      	b.n	8006308 <__hexnan+0xd4>
 8006366:	2004      	movs	r0, #4
 8006368:	e7d5      	b.n	8006316 <__hexnan+0xe2>
	...

0800636c <malloc>:
 800636c:	4b02      	ldr	r3, [pc, #8]	@ (8006378 <malloc+0xc>)
 800636e:	4601      	mov	r1, r0
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	f000 b825 	b.w	80063c0 <_malloc_r>
 8006376:	bf00      	nop
 8006378:	200001a4 	.word	0x200001a4

0800637c <sbrk_aligned>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4e0f      	ldr	r6, [pc, #60]	@ (80063bc <sbrk_aligned+0x40>)
 8006380:	460c      	mov	r4, r1
 8006382:	6831      	ldr	r1, [r6, #0]
 8006384:	4605      	mov	r5, r0
 8006386:	b911      	cbnz	r1, 800638e <sbrk_aligned+0x12>
 8006388:	f000 ff90 	bl	80072ac <_sbrk_r>
 800638c:	6030      	str	r0, [r6, #0]
 800638e:	4621      	mov	r1, r4
 8006390:	4628      	mov	r0, r5
 8006392:	f000 ff8b 	bl	80072ac <_sbrk_r>
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	d103      	bne.n	80063a2 <sbrk_aligned+0x26>
 800639a:	f04f 34ff 	mov.w	r4, #4294967295
 800639e:	4620      	mov	r0, r4
 80063a0:	bd70      	pop	{r4, r5, r6, pc}
 80063a2:	1cc4      	adds	r4, r0, #3
 80063a4:	f024 0403 	bic.w	r4, r4, #3
 80063a8:	42a0      	cmp	r0, r4
 80063aa:	d0f8      	beq.n	800639e <sbrk_aligned+0x22>
 80063ac:	1a21      	subs	r1, r4, r0
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 ff7c 	bl	80072ac <_sbrk_r>
 80063b4:	3001      	adds	r0, #1
 80063b6:	d1f2      	bne.n	800639e <sbrk_aligned+0x22>
 80063b8:	e7ef      	b.n	800639a <sbrk_aligned+0x1e>
 80063ba:	bf00      	nop
 80063bc:	20000570 	.word	0x20000570

080063c0 <_malloc_r>:
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	1ccd      	adds	r5, r1, #3
 80063c6:	f025 0503 	bic.w	r5, r5, #3
 80063ca:	3508      	adds	r5, #8
 80063cc:	2d0c      	cmp	r5, #12
 80063ce:	bf38      	it	cc
 80063d0:	250c      	movcc	r5, #12
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	4606      	mov	r6, r0
 80063d6:	db01      	blt.n	80063dc <_malloc_r+0x1c>
 80063d8:	42a9      	cmp	r1, r5
 80063da:	d904      	bls.n	80063e6 <_malloc_r+0x26>
 80063dc:	230c      	movs	r3, #12
 80063de:	6033      	str	r3, [r6, #0]
 80063e0:	2000      	movs	r0, #0
 80063e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064bc <_malloc_r+0xfc>
 80063ea:	f000 f87b 	bl	80064e4 <__malloc_lock>
 80063ee:	f8d8 3000 	ldr.w	r3, [r8]
 80063f2:	461c      	mov	r4, r3
 80063f4:	bb44      	cbnz	r4, 8006448 <_malloc_r+0x88>
 80063f6:	4629      	mov	r1, r5
 80063f8:	4630      	mov	r0, r6
 80063fa:	f7ff ffbf 	bl	800637c <sbrk_aligned>
 80063fe:	1c43      	adds	r3, r0, #1
 8006400:	4604      	mov	r4, r0
 8006402:	d158      	bne.n	80064b6 <_malloc_r+0xf6>
 8006404:	f8d8 4000 	ldr.w	r4, [r8]
 8006408:	4627      	mov	r7, r4
 800640a:	2f00      	cmp	r7, #0
 800640c:	d143      	bne.n	8006496 <_malloc_r+0xd6>
 800640e:	2c00      	cmp	r4, #0
 8006410:	d04b      	beq.n	80064aa <_malloc_r+0xea>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	4639      	mov	r1, r7
 8006416:	4630      	mov	r0, r6
 8006418:	eb04 0903 	add.w	r9, r4, r3
 800641c:	f000 ff46 	bl	80072ac <_sbrk_r>
 8006420:	4581      	cmp	r9, r0
 8006422:	d142      	bne.n	80064aa <_malloc_r+0xea>
 8006424:	6821      	ldr	r1, [r4, #0]
 8006426:	4630      	mov	r0, r6
 8006428:	1a6d      	subs	r5, r5, r1
 800642a:	4629      	mov	r1, r5
 800642c:	f7ff ffa6 	bl	800637c <sbrk_aligned>
 8006430:	3001      	adds	r0, #1
 8006432:	d03a      	beq.n	80064aa <_malloc_r+0xea>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	442b      	add	r3, r5
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	f8d8 3000 	ldr.w	r3, [r8]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	bb62      	cbnz	r2, 800649c <_malloc_r+0xdc>
 8006442:	f8c8 7000 	str.w	r7, [r8]
 8006446:	e00f      	b.n	8006468 <_malloc_r+0xa8>
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	1b52      	subs	r2, r2, r5
 800644c:	d420      	bmi.n	8006490 <_malloc_r+0xd0>
 800644e:	2a0b      	cmp	r2, #11
 8006450:	d917      	bls.n	8006482 <_malloc_r+0xc2>
 8006452:	1961      	adds	r1, r4, r5
 8006454:	42a3      	cmp	r3, r4
 8006456:	6025      	str	r5, [r4, #0]
 8006458:	bf18      	it	ne
 800645a:	6059      	strne	r1, [r3, #4]
 800645c:	6863      	ldr	r3, [r4, #4]
 800645e:	bf08      	it	eq
 8006460:	f8c8 1000 	streq.w	r1, [r8]
 8006464:	5162      	str	r2, [r4, r5]
 8006466:	604b      	str	r3, [r1, #4]
 8006468:	4630      	mov	r0, r6
 800646a:	f000 f841 	bl	80064f0 <__malloc_unlock>
 800646e:	f104 000b 	add.w	r0, r4, #11
 8006472:	1d23      	adds	r3, r4, #4
 8006474:	f020 0007 	bic.w	r0, r0, #7
 8006478:	1ac2      	subs	r2, r0, r3
 800647a:	bf1c      	itt	ne
 800647c:	1a1b      	subne	r3, r3, r0
 800647e:	50a3      	strne	r3, [r4, r2]
 8006480:	e7af      	b.n	80063e2 <_malloc_r+0x22>
 8006482:	6862      	ldr	r2, [r4, #4]
 8006484:	42a3      	cmp	r3, r4
 8006486:	bf0c      	ite	eq
 8006488:	f8c8 2000 	streq.w	r2, [r8]
 800648c:	605a      	strne	r2, [r3, #4]
 800648e:	e7eb      	b.n	8006468 <_malloc_r+0xa8>
 8006490:	4623      	mov	r3, r4
 8006492:	6864      	ldr	r4, [r4, #4]
 8006494:	e7ae      	b.n	80063f4 <_malloc_r+0x34>
 8006496:	463c      	mov	r4, r7
 8006498:	687f      	ldr	r7, [r7, #4]
 800649a:	e7b6      	b.n	800640a <_malloc_r+0x4a>
 800649c:	461a      	mov	r2, r3
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d1fb      	bne.n	800649c <_malloc_r+0xdc>
 80064a4:	2300      	movs	r3, #0
 80064a6:	6053      	str	r3, [r2, #4]
 80064a8:	e7de      	b.n	8006468 <_malloc_r+0xa8>
 80064aa:	230c      	movs	r3, #12
 80064ac:	4630      	mov	r0, r6
 80064ae:	6033      	str	r3, [r6, #0]
 80064b0:	f000 f81e 	bl	80064f0 <__malloc_unlock>
 80064b4:	e794      	b.n	80063e0 <_malloc_r+0x20>
 80064b6:	6005      	str	r5, [r0, #0]
 80064b8:	e7d6      	b.n	8006468 <_malloc_r+0xa8>
 80064ba:	bf00      	nop
 80064bc:	20000574 	.word	0x20000574

080064c0 <__ascii_mbtowc>:
 80064c0:	b082      	sub	sp, #8
 80064c2:	b901      	cbnz	r1, 80064c6 <__ascii_mbtowc+0x6>
 80064c4:	a901      	add	r1, sp, #4
 80064c6:	b142      	cbz	r2, 80064da <__ascii_mbtowc+0x1a>
 80064c8:	b14b      	cbz	r3, 80064de <__ascii_mbtowc+0x1e>
 80064ca:	7813      	ldrb	r3, [r2, #0]
 80064cc:	600b      	str	r3, [r1, #0]
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	1e10      	subs	r0, r2, #0
 80064d2:	bf18      	it	ne
 80064d4:	2001      	movne	r0, #1
 80064d6:	b002      	add	sp, #8
 80064d8:	4770      	bx	lr
 80064da:	4610      	mov	r0, r2
 80064dc:	e7fb      	b.n	80064d6 <__ascii_mbtowc+0x16>
 80064de:	f06f 0001 	mvn.w	r0, #1
 80064e2:	e7f8      	b.n	80064d6 <__ascii_mbtowc+0x16>

080064e4 <__malloc_lock>:
 80064e4:	4801      	ldr	r0, [pc, #4]	@ (80064ec <__malloc_lock+0x8>)
 80064e6:	f7fe bd16 	b.w	8004f16 <__retarget_lock_acquire_recursive>
 80064ea:	bf00      	nop
 80064ec:	2000056c 	.word	0x2000056c

080064f0 <__malloc_unlock>:
 80064f0:	4801      	ldr	r0, [pc, #4]	@ (80064f8 <__malloc_unlock+0x8>)
 80064f2:	f7fe bd11 	b.w	8004f18 <__retarget_lock_release_recursive>
 80064f6:	bf00      	nop
 80064f8:	2000056c 	.word	0x2000056c

080064fc <_Balloc>:
 80064fc:	b570      	push	{r4, r5, r6, lr}
 80064fe:	69c6      	ldr	r6, [r0, #28]
 8006500:	4604      	mov	r4, r0
 8006502:	460d      	mov	r5, r1
 8006504:	b976      	cbnz	r6, 8006524 <_Balloc+0x28>
 8006506:	2010      	movs	r0, #16
 8006508:	f7ff ff30 	bl	800636c <malloc>
 800650c:	4602      	mov	r2, r0
 800650e:	61e0      	str	r0, [r4, #28]
 8006510:	b920      	cbnz	r0, 800651c <_Balloc+0x20>
 8006512:	216b      	movs	r1, #107	@ 0x6b
 8006514:	4b17      	ldr	r3, [pc, #92]	@ (8006574 <_Balloc+0x78>)
 8006516:	4818      	ldr	r0, [pc, #96]	@ (8006578 <_Balloc+0x7c>)
 8006518:	f7fe fd2a 	bl	8004f70 <__assert_func>
 800651c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006520:	6006      	str	r6, [r0, #0]
 8006522:	60c6      	str	r6, [r0, #12]
 8006524:	69e6      	ldr	r6, [r4, #28]
 8006526:	68f3      	ldr	r3, [r6, #12]
 8006528:	b183      	cbz	r3, 800654c <_Balloc+0x50>
 800652a:	69e3      	ldr	r3, [r4, #28]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006532:	b9b8      	cbnz	r0, 8006564 <_Balloc+0x68>
 8006534:	2101      	movs	r1, #1
 8006536:	fa01 f605 	lsl.w	r6, r1, r5
 800653a:	1d72      	adds	r2, r6, #5
 800653c:	4620      	mov	r0, r4
 800653e:	0092      	lsls	r2, r2, #2
 8006540:	f000 fecb 	bl	80072da <_calloc_r>
 8006544:	b160      	cbz	r0, 8006560 <_Balloc+0x64>
 8006546:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800654a:	e00e      	b.n	800656a <_Balloc+0x6e>
 800654c:	2221      	movs	r2, #33	@ 0x21
 800654e:	2104      	movs	r1, #4
 8006550:	4620      	mov	r0, r4
 8006552:	f000 fec2 	bl	80072da <_calloc_r>
 8006556:	69e3      	ldr	r3, [r4, #28]
 8006558:	60f0      	str	r0, [r6, #12]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e4      	bne.n	800652a <_Balloc+0x2e>
 8006560:	2000      	movs	r0, #0
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	6802      	ldr	r2, [r0, #0]
 8006566:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800656a:	2300      	movs	r3, #0
 800656c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006570:	e7f7      	b.n	8006562 <_Balloc+0x66>
 8006572:	bf00      	nop
 8006574:	08007968 	.word	0x08007968
 8006578:	08007af3 	.word	0x08007af3

0800657c <_Bfree>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	69c6      	ldr	r6, [r0, #28]
 8006580:	4605      	mov	r5, r0
 8006582:	460c      	mov	r4, r1
 8006584:	b976      	cbnz	r6, 80065a4 <_Bfree+0x28>
 8006586:	2010      	movs	r0, #16
 8006588:	f7ff fef0 	bl	800636c <malloc>
 800658c:	4602      	mov	r2, r0
 800658e:	61e8      	str	r0, [r5, #28]
 8006590:	b920      	cbnz	r0, 800659c <_Bfree+0x20>
 8006592:	218f      	movs	r1, #143	@ 0x8f
 8006594:	4b08      	ldr	r3, [pc, #32]	@ (80065b8 <_Bfree+0x3c>)
 8006596:	4809      	ldr	r0, [pc, #36]	@ (80065bc <_Bfree+0x40>)
 8006598:	f7fe fcea 	bl	8004f70 <__assert_func>
 800659c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065a0:	6006      	str	r6, [r0, #0]
 80065a2:	60c6      	str	r6, [r0, #12]
 80065a4:	b13c      	cbz	r4, 80065b6 <_Bfree+0x3a>
 80065a6:	69eb      	ldr	r3, [r5, #28]
 80065a8:	6862      	ldr	r2, [r4, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065b0:	6021      	str	r1, [r4, #0]
 80065b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
 80065b8:	08007968 	.word	0x08007968
 80065bc:	08007af3 	.word	0x08007af3

080065c0 <__multadd>:
 80065c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c4:	4607      	mov	r7, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	461e      	mov	r6, r3
 80065ca:	2000      	movs	r0, #0
 80065cc:	690d      	ldr	r5, [r1, #16]
 80065ce:	f101 0c14 	add.w	ip, r1, #20
 80065d2:	f8dc 3000 	ldr.w	r3, [ip]
 80065d6:	3001      	adds	r0, #1
 80065d8:	b299      	uxth	r1, r3
 80065da:	fb02 6101 	mla	r1, r2, r1, r6
 80065de:	0c1e      	lsrs	r6, r3, #16
 80065e0:	0c0b      	lsrs	r3, r1, #16
 80065e2:	fb02 3306 	mla	r3, r2, r6, r3
 80065e6:	b289      	uxth	r1, r1
 80065e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065ec:	4285      	cmp	r5, r0
 80065ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065f2:	f84c 1b04 	str.w	r1, [ip], #4
 80065f6:	dcec      	bgt.n	80065d2 <__multadd+0x12>
 80065f8:	b30e      	cbz	r6, 800663e <__multadd+0x7e>
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dc19      	bgt.n	8006634 <__multadd+0x74>
 8006600:	6861      	ldr	r1, [r4, #4]
 8006602:	4638      	mov	r0, r7
 8006604:	3101      	adds	r1, #1
 8006606:	f7ff ff79 	bl	80064fc <_Balloc>
 800660a:	4680      	mov	r8, r0
 800660c:	b928      	cbnz	r0, 800661a <__multadd+0x5a>
 800660e:	4602      	mov	r2, r0
 8006610:	21ba      	movs	r1, #186	@ 0xba
 8006612:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <__multadd+0x84>)
 8006614:	480c      	ldr	r0, [pc, #48]	@ (8006648 <__multadd+0x88>)
 8006616:	f7fe fcab 	bl	8004f70 <__assert_func>
 800661a:	6922      	ldr	r2, [r4, #16]
 800661c:	f104 010c 	add.w	r1, r4, #12
 8006620:	3202      	adds	r2, #2
 8006622:	0092      	lsls	r2, r2, #2
 8006624:	300c      	adds	r0, #12
 8006626:	f7fe fc8e 	bl	8004f46 <memcpy>
 800662a:	4621      	mov	r1, r4
 800662c:	4638      	mov	r0, r7
 800662e:	f7ff ffa5 	bl	800657c <_Bfree>
 8006632:	4644      	mov	r4, r8
 8006634:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006638:	3501      	adds	r5, #1
 800663a:	615e      	str	r6, [r3, #20]
 800663c:	6125      	str	r5, [r4, #16]
 800663e:	4620      	mov	r0, r4
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006644:	08007a82 	.word	0x08007a82
 8006648:	08007af3 	.word	0x08007af3

0800664c <__s2b>:
 800664c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006650:	4615      	mov	r5, r2
 8006652:	2209      	movs	r2, #9
 8006654:	461f      	mov	r7, r3
 8006656:	3308      	adds	r3, #8
 8006658:	460c      	mov	r4, r1
 800665a:	fb93 f3f2 	sdiv	r3, r3, r2
 800665e:	4606      	mov	r6, r0
 8006660:	2201      	movs	r2, #1
 8006662:	2100      	movs	r1, #0
 8006664:	429a      	cmp	r2, r3
 8006666:	db09      	blt.n	800667c <__s2b+0x30>
 8006668:	4630      	mov	r0, r6
 800666a:	f7ff ff47 	bl	80064fc <_Balloc>
 800666e:	b940      	cbnz	r0, 8006682 <__s2b+0x36>
 8006670:	4602      	mov	r2, r0
 8006672:	21d3      	movs	r1, #211	@ 0xd3
 8006674:	4b18      	ldr	r3, [pc, #96]	@ (80066d8 <__s2b+0x8c>)
 8006676:	4819      	ldr	r0, [pc, #100]	@ (80066dc <__s2b+0x90>)
 8006678:	f7fe fc7a 	bl	8004f70 <__assert_func>
 800667c:	0052      	lsls	r2, r2, #1
 800667e:	3101      	adds	r1, #1
 8006680:	e7f0      	b.n	8006664 <__s2b+0x18>
 8006682:	9b08      	ldr	r3, [sp, #32]
 8006684:	2d09      	cmp	r5, #9
 8006686:	6143      	str	r3, [r0, #20]
 8006688:	f04f 0301 	mov.w	r3, #1
 800668c:	6103      	str	r3, [r0, #16]
 800668e:	dd16      	ble.n	80066be <__s2b+0x72>
 8006690:	f104 0909 	add.w	r9, r4, #9
 8006694:	46c8      	mov	r8, r9
 8006696:	442c      	add	r4, r5
 8006698:	f818 3b01 	ldrb.w	r3, [r8], #1
 800669c:	4601      	mov	r1, r0
 800669e:	220a      	movs	r2, #10
 80066a0:	4630      	mov	r0, r6
 80066a2:	3b30      	subs	r3, #48	@ 0x30
 80066a4:	f7ff ff8c 	bl	80065c0 <__multadd>
 80066a8:	45a0      	cmp	r8, r4
 80066aa:	d1f5      	bne.n	8006698 <__s2b+0x4c>
 80066ac:	f1a5 0408 	sub.w	r4, r5, #8
 80066b0:	444c      	add	r4, r9
 80066b2:	1b2d      	subs	r5, r5, r4
 80066b4:	1963      	adds	r3, r4, r5
 80066b6:	42bb      	cmp	r3, r7
 80066b8:	db04      	blt.n	80066c4 <__s2b+0x78>
 80066ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066be:	2509      	movs	r5, #9
 80066c0:	340a      	adds	r4, #10
 80066c2:	e7f6      	b.n	80066b2 <__s2b+0x66>
 80066c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80066c8:	4601      	mov	r1, r0
 80066ca:	220a      	movs	r2, #10
 80066cc:	4630      	mov	r0, r6
 80066ce:	3b30      	subs	r3, #48	@ 0x30
 80066d0:	f7ff ff76 	bl	80065c0 <__multadd>
 80066d4:	e7ee      	b.n	80066b4 <__s2b+0x68>
 80066d6:	bf00      	nop
 80066d8:	08007a82 	.word	0x08007a82
 80066dc:	08007af3 	.word	0x08007af3

080066e0 <__hi0bits>:
 80066e0:	4603      	mov	r3, r0
 80066e2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066e6:	bf3a      	itte	cc
 80066e8:	0403      	lslcc	r3, r0, #16
 80066ea:	2010      	movcc	r0, #16
 80066ec:	2000      	movcs	r0, #0
 80066ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066f2:	bf3c      	itt	cc
 80066f4:	021b      	lslcc	r3, r3, #8
 80066f6:	3008      	addcc	r0, #8
 80066f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066fc:	bf3c      	itt	cc
 80066fe:	011b      	lslcc	r3, r3, #4
 8006700:	3004      	addcc	r0, #4
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006706:	bf3c      	itt	cc
 8006708:	009b      	lslcc	r3, r3, #2
 800670a:	3002      	addcc	r0, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	db05      	blt.n	800671c <__hi0bits+0x3c>
 8006710:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006714:	f100 0001 	add.w	r0, r0, #1
 8006718:	bf08      	it	eq
 800671a:	2020      	moveq	r0, #32
 800671c:	4770      	bx	lr

0800671e <__lo0bits>:
 800671e:	6803      	ldr	r3, [r0, #0]
 8006720:	4602      	mov	r2, r0
 8006722:	f013 0007 	ands.w	r0, r3, #7
 8006726:	d00b      	beq.n	8006740 <__lo0bits+0x22>
 8006728:	07d9      	lsls	r1, r3, #31
 800672a:	d421      	bmi.n	8006770 <__lo0bits+0x52>
 800672c:	0798      	lsls	r0, r3, #30
 800672e:	bf49      	itett	mi
 8006730:	085b      	lsrmi	r3, r3, #1
 8006732:	089b      	lsrpl	r3, r3, #2
 8006734:	2001      	movmi	r0, #1
 8006736:	6013      	strmi	r3, [r2, #0]
 8006738:	bf5c      	itt	pl
 800673a:	2002      	movpl	r0, #2
 800673c:	6013      	strpl	r3, [r2, #0]
 800673e:	4770      	bx	lr
 8006740:	b299      	uxth	r1, r3
 8006742:	b909      	cbnz	r1, 8006748 <__lo0bits+0x2a>
 8006744:	2010      	movs	r0, #16
 8006746:	0c1b      	lsrs	r3, r3, #16
 8006748:	b2d9      	uxtb	r1, r3
 800674a:	b909      	cbnz	r1, 8006750 <__lo0bits+0x32>
 800674c:	3008      	adds	r0, #8
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	0719      	lsls	r1, r3, #28
 8006752:	bf04      	itt	eq
 8006754:	091b      	lsreq	r3, r3, #4
 8006756:	3004      	addeq	r0, #4
 8006758:	0799      	lsls	r1, r3, #30
 800675a:	bf04      	itt	eq
 800675c:	089b      	lsreq	r3, r3, #2
 800675e:	3002      	addeq	r0, #2
 8006760:	07d9      	lsls	r1, r3, #31
 8006762:	d403      	bmi.n	800676c <__lo0bits+0x4e>
 8006764:	085b      	lsrs	r3, r3, #1
 8006766:	f100 0001 	add.w	r0, r0, #1
 800676a:	d003      	beq.n	8006774 <__lo0bits+0x56>
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	4770      	bx	lr
 8006770:	2000      	movs	r0, #0
 8006772:	4770      	bx	lr
 8006774:	2020      	movs	r0, #32
 8006776:	4770      	bx	lr

08006778 <__i2b>:
 8006778:	b510      	push	{r4, lr}
 800677a:	460c      	mov	r4, r1
 800677c:	2101      	movs	r1, #1
 800677e:	f7ff febd 	bl	80064fc <_Balloc>
 8006782:	4602      	mov	r2, r0
 8006784:	b928      	cbnz	r0, 8006792 <__i2b+0x1a>
 8006786:	f240 1145 	movw	r1, #325	@ 0x145
 800678a:	4b04      	ldr	r3, [pc, #16]	@ (800679c <__i2b+0x24>)
 800678c:	4804      	ldr	r0, [pc, #16]	@ (80067a0 <__i2b+0x28>)
 800678e:	f7fe fbef 	bl	8004f70 <__assert_func>
 8006792:	2301      	movs	r3, #1
 8006794:	6144      	str	r4, [r0, #20]
 8006796:	6103      	str	r3, [r0, #16]
 8006798:	bd10      	pop	{r4, pc}
 800679a:	bf00      	nop
 800679c:	08007a82 	.word	0x08007a82
 80067a0:	08007af3 	.word	0x08007af3

080067a4 <__multiply>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	4617      	mov	r7, r2
 80067aa:	690a      	ldr	r2, [r1, #16]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4689      	mov	r9, r1
 80067b0:	429a      	cmp	r2, r3
 80067b2:	bfa2      	ittt	ge
 80067b4:	463b      	movge	r3, r7
 80067b6:	460f      	movge	r7, r1
 80067b8:	4699      	movge	r9, r3
 80067ba:	693d      	ldr	r5, [r7, #16]
 80067bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	eb05 060a 	add.w	r6, r5, sl
 80067c8:	42b3      	cmp	r3, r6
 80067ca:	b085      	sub	sp, #20
 80067cc:	bfb8      	it	lt
 80067ce:	3101      	addlt	r1, #1
 80067d0:	f7ff fe94 	bl	80064fc <_Balloc>
 80067d4:	b930      	cbnz	r0, 80067e4 <__multiply+0x40>
 80067d6:	4602      	mov	r2, r0
 80067d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80067dc:	4b40      	ldr	r3, [pc, #256]	@ (80068e0 <__multiply+0x13c>)
 80067de:	4841      	ldr	r0, [pc, #260]	@ (80068e4 <__multiply+0x140>)
 80067e0:	f7fe fbc6 	bl	8004f70 <__assert_func>
 80067e4:	f100 0414 	add.w	r4, r0, #20
 80067e8:	4623      	mov	r3, r4
 80067ea:	2200      	movs	r2, #0
 80067ec:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80067f0:	4573      	cmp	r3, lr
 80067f2:	d320      	bcc.n	8006836 <__multiply+0x92>
 80067f4:	f107 0814 	add.w	r8, r7, #20
 80067f8:	f109 0114 	add.w	r1, r9, #20
 80067fc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006800:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006804:	9302      	str	r3, [sp, #8]
 8006806:	1beb      	subs	r3, r5, r7
 8006808:	3b15      	subs	r3, #21
 800680a:	f023 0303 	bic.w	r3, r3, #3
 800680e:	3304      	adds	r3, #4
 8006810:	3715      	adds	r7, #21
 8006812:	42bd      	cmp	r5, r7
 8006814:	bf38      	it	cc
 8006816:	2304      	movcc	r3, #4
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	9b02      	ldr	r3, [sp, #8]
 800681c:	9103      	str	r1, [sp, #12]
 800681e:	428b      	cmp	r3, r1
 8006820:	d80c      	bhi.n	800683c <__multiply+0x98>
 8006822:	2e00      	cmp	r6, #0
 8006824:	dd03      	ble.n	800682e <__multiply+0x8a>
 8006826:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800682a:	2b00      	cmp	r3, #0
 800682c:	d055      	beq.n	80068da <__multiply+0x136>
 800682e:	6106      	str	r6, [r0, #16]
 8006830:	b005      	add	sp, #20
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	f843 2b04 	str.w	r2, [r3], #4
 800683a:	e7d9      	b.n	80067f0 <__multiply+0x4c>
 800683c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006840:	f1ba 0f00 	cmp.w	sl, #0
 8006844:	d01f      	beq.n	8006886 <__multiply+0xe2>
 8006846:	46c4      	mov	ip, r8
 8006848:	46a1      	mov	r9, r4
 800684a:	2700      	movs	r7, #0
 800684c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006850:	f8d9 3000 	ldr.w	r3, [r9]
 8006854:	fa1f fb82 	uxth.w	fp, r2
 8006858:	b29b      	uxth	r3, r3
 800685a:	fb0a 330b 	mla	r3, sl, fp, r3
 800685e:	443b      	add	r3, r7
 8006860:	f8d9 7000 	ldr.w	r7, [r9]
 8006864:	0c12      	lsrs	r2, r2, #16
 8006866:	0c3f      	lsrs	r7, r7, #16
 8006868:	fb0a 7202 	mla	r2, sl, r2, r7
 800686c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006876:	4565      	cmp	r5, ip
 8006878:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800687c:	f849 3b04 	str.w	r3, [r9], #4
 8006880:	d8e4      	bhi.n	800684c <__multiply+0xa8>
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	50e7      	str	r7, [r4, r3]
 8006886:	9b03      	ldr	r3, [sp, #12]
 8006888:	3104      	adds	r1, #4
 800688a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800688e:	f1b9 0f00 	cmp.w	r9, #0
 8006892:	d020      	beq.n	80068d6 <__multiply+0x132>
 8006894:	4647      	mov	r7, r8
 8006896:	46a4      	mov	ip, r4
 8006898:	f04f 0a00 	mov.w	sl, #0
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	f8b7 b000 	ldrh.w	fp, [r7]
 80068a2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	fb09 220b 	mla	r2, r9, fp, r2
 80068ac:	4452      	add	r2, sl
 80068ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b2:	f84c 3b04 	str.w	r3, [ip], #4
 80068b6:	f857 3b04 	ldr.w	r3, [r7], #4
 80068ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068be:	f8bc 3000 	ldrh.w	r3, [ip]
 80068c2:	42bd      	cmp	r5, r7
 80068c4:	fb09 330a 	mla	r3, r9, sl, r3
 80068c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80068cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068d0:	d8e5      	bhi.n	800689e <__multiply+0xfa>
 80068d2:	9a01      	ldr	r2, [sp, #4]
 80068d4:	50a3      	str	r3, [r4, r2]
 80068d6:	3404      	adds	r4, #4
 80068d8:	e79f      	b.n	800681a <__multiply+0x76>
 80068da:	3e01      	subs	r6, #1
 80068dc:	e7a1      	b.n	8006822 <__multiply+0x7e>
 80068de:	bf00      	nop
 80068e0:	08007a82 	.word	0x08007a82
 80068e4:	08007af3 	.word	0x08007af3

080068e8 <__pow5mult>:
 80068e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ec:	4615      	mov	r5, r2
 80068ee:	f012 0203 	ands.w	r2, r2, #3
 80068f2:	4607      	mov	r7, r0
 80068f4:	460e      	mov	r6, r1
 80068f6:	d007      	beq.n	8006908 <__pow5mult+0x20>
 80068f8:	4c25      	ldr	r4, [pc, #148]	@ (8006990 <__pow5mult+0xa8>)
 80068fa:	3a01      	subs	r2, #1
 80068fc:	2300      	movs	r3, #0
 80068fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006902:	f7ff fe5d 	bl	80065c0 <__multadd>
 8006906:	4606      	mov	r6, r0
 8006908:	10ad      	asrs	r5, r5, #2
 800690a:	d03d      	beq.n	8006988 <__pow5mult+0xa0>
 800690c:	69fc      	ldr	r4, [r7, #28]
 800690e:	b97c      	cbnz	r4, 8006930 <__pow5mult+0x48>
 8006910:	2010      	movs	r0, #16
 8006912:	f7ff fd2b 	bl	800636c <malloc>
 8006916:	4602      	mov	r2, r0
 8006918:	61f8      	str	r0, [r7, #28]
 800691a:	b928      	cbnz	r0, 8006928 <__pow5mult+0x40>
 800691c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006920:	4b1c      	ldr	r3, [pc, #112]	@ (8006994 <__pow5mult+0xac>)
 8006922:	481d      	ldr	r0, [pc, #116]	@ (8006998 <__pow5mult+0xb0>)
 8006924:	f7fe fb24 	bl	8004f70 <__assert_func>
 8006928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800692c:	6004      	str	r4, [r0, #0]
 800692e:	60c4      	str	r4, [r0, #12]
 8006930:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006938:	b94c      	cbnz	r4, 800694e <__pow5mult+0x66>
 800693a:	f240 2171 	movw	r1, #625	@ 0x271
 800693e:	4638      	mov	r0, r7
 8006940:	f7ff ff1a 	bl	8006778 <__i2b>
 8006944:	2300      	movs	r3, #0
 8006946:	4604      	mov	r4, r0
 8006948:	f8c8 0008 	str.w	r0, [r8, #8]
 800694c:	6003      	str	r3, [r0, #0]
 800694e:	f04f 0900 	mov.w	r9, #0
 8006952:	07eb      	lsls	r3, r5, #31
 8006954:	d50a      	bpl.n	800696c <__pow5mult+0x84>
 8006956:	4631      	mov	r1, r6
 8006958:	4622      	mov	r2, r4
 800695a:	4638      	mov	r0, r7
 800695c:	f7ff ff22 	bl	80067a4 <__multiply>
 8006960:	4680      	mov	r8, r0
 8006962:	4631      	mov	r1, r6
 8006964:	4638      	mov	r0, r7
 8006966:	f7ff fe09 	bl	800657c <_Bfree>
 800696a:	4646      	mov	r6, r8
 800696c:	106d      	asrs	r5, r5, #1
 800696e:	d00b      	beq.n	8006988 <__pow5mult+0xa0>
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	b938      	cbnz	r0, 8006984 <__pow5mult+0x9c>
 8006974:	4622      	mov	r2, r4
 8006976:	4621      	mov	r1, r4
 8006978:	4638      	mov	r0, r7
 800697a:	f7ff ff13 	bl	80067a4 <__multiply>
 800697e:	6020      	str	r0, [r4, #0]
 8006980:	f8c0 9000 	str.w	r9, [r0]
 8006984:	4604      	mov	r4, r0
 8006986:	e7e4      	b.n	8006952 <__pow5mult+0x6a>
 8006988:	4630      	mov	r0, r6
 800698a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698e:	bf00      	nop
 8006990:	08007bb0 	.word	0x08007bb0
 8006994:	08007968 	.word	0x08007968
 8006998:	08007af3 	.word	0x08007af3

0800699c <__lshift>:
 800699c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a0:	460c      	mov	r4, r1
 80069a2:	4607      	mov	r7, r0
 80069a4:	4691      	mov	r9, r2
 80069a6:	6923      	ldr	r3, [r4, #16]
 80069a8:	6849      	ldr	r1, [r1, #4]
 80069aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069b4:	f108 0601 	add.w	r6, r8, #1
 80069b8:	42b3      	cmp	r3, r6
 80069ba:	db0b      	blt.n	80069d4 <__lshift+0x38>
 80069bc:	4638      	mov	r0, r7
 80069be:	f7ff fd9d 	bl	80064fc <_Balloc>
 80069c2:	4605      	mov	r5, r0
 80069c4:	b948      	cbnz	r0, 80069da <__lshift+0x3e>
 80069c6:	4602      	mov	r2, r0
 80069c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80069cc:	4b27      	ldr	r3, [pc, #156]	@ (8006a6c <__lshift+0xd0>)
 80069ce:	4828      	ldr	r0, [pc, #160]	@ (8006a70 <__lshift+0xd4>)
 80069d0:	f7fe face 	bl	8004f70 <__assert_func>
 80069d4:	3101      	adds	r1, #1
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	e7ee      	b.n	80069b8 <__lshift+0x1c>
 80069da:	2300      	movs	r3, #0
 80069dc:	f100 0114 	add.w	r1, r0, #20
 80069e0:	f100 0210 	add.w	r2, r0, #16
 80069e4:	4618      	mov	r0, r3
 80069e6:	4553      	cmp	r3, sl
 80069e8:	db33      	blt.n	8006a52 <__lshift+0xb6>
 80069ea:	6920      	ldr	r0, [r4, #16]
 80069ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069f0:	f104 0314 	add.w	r3, r4, #20
 80069f4:	f019 091f 	ands.w	r9, r9, #31
 80069f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a00:	d02b      	beq.n	8006a5a <__lshift+0xbe>
 8006a02:	468a      	mov	sl, r1
 8006a04:	2200      	movs	r2, #0
 8006a06:	f1c9 0e20 	rsb	lr, r9, #32
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	fa00 f009 	lsl.w	r0, r0, r9
 8006a10:	4310      	orrs	r0, r2
 8006a12:	f84a 0b04 	str.w	r0, [sl], #4
 8006a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1a:	459c      	cmp	ip, r3
 8006a1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a20:	d8f3      	bhi.n	8006a0a <__lshift+0x6e>
 8006a22:	ebac 0304 	sub.w	r3, ip, r4
 8006a26:	3b15      	subs	r3, #21
 8006a28:	f023 0303 	bic.w	r3, r3, #3
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	f104 0015 	add.w	r0, r4, #21
 8006a32:	4560      	cmp	r0, ip
 8006a34:	bf88      	it	hi
 8006a36:	2304      	movhi	r3, #4
 8006a38:	50ca      	str	r2, [r1, r3]
 8006a3a:	b10a      	cbz	r2, 8006a40 <__lshift+0xa4>
 8006a3c:	f108 0602 	add.w	r6, r8, #2
 8006a40:	3e01      	subs	r6, #1
 8006a42:	4638      	mov	r0, r7
 8006a44:	4621      	mov	r1, r4
 8006a46:	612e      	str	r6, [r5, #16]
 8006a48:	f7ff fd98 	bl	800657c <_Bfree>
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a52:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a56:	3301      	adds	r3, #1
 8006a58:	e7c5      	b.n	80069e6 <__lshift+0x4a>
 8006a5a:	3904      	subs	r1, #4
 8006a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a60:	459c      	cmp	ip, r3
 8006a62:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a66:	d8f9      	bhi.n	8006a5c <__lshift+0xc0>
 8006a68:	e7ea      	b.n	8006a40 <__lshift+0xa4>
 8006a6a:	bf00      	nop
 8006a6c:	08007a82 	.word	0x08007a82
 8006a70:	08007af3 	.word	0x08007af3

08006a74 <__mcmp>:
 8006a74:	4603      	mov	r3, r0
 8006a76:	690a      	ldr	r2, [r1, #16]
 8006a78:	6900      	ldr	r0, [r0, #16]
 8006a7a:	b530      	push	{r4, r5, lr}
 8006a7c:	1a80      	subs	r0, r0, r2
 8006a7e:	d10e      	bne.n	8006a9e <__mcmp+0x2a>
 8006a80:	3314      	adds	r3, #20
 8006a82:	3114      	adds	r1, #20
 8006a84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a94:	4295      	cmp	r5, r2
 8006a96:	d003      	beq.n	8006aa0 <__mcmp+0x2c>
 8006a98:	d205      	bcs.n	8006aa6 <__mcmp+0x32>
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9e:	bd30      	pop	{r4, r5, pc}
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d3f3      	bcc.n	8006a8c <__mcmp+0x18>
 8006aa4:	e7fb      	b.n	8006a9e <__mcmp+0x2a>
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	e7f9      	b.n	8006a9e <__mcmp+0x2a>
	...

08006aac <__mdiff>:
 8006aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4648      	mov	r0, r9
 8006ab8:	4614      	mov	r4, r2
 8006aba:	f7ff ffdb 	bl	8006a74 <__mcmp>
 8006abe:	1e05      	subs	r5, r0, #0
 8006ac0:	d112      	bne.n	8006ae8 <__mdiff+0x3c>
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff fd19 	bl	80064fc <_Balloc>
 8006aca:	4602      	mov	r2, r0
 8006acc:	b928      	cbnz	r0, 8006ada <__mdiff+0x2e>
 8006ace:	f240 2137 	movw	r1, #567	@ 0x237
 8006ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8006bcc <__mdiff+0x120>)
 8006ad4:	483e      	ldr	r0, [pc, #248]	@ (8006bd0 <__mdiff+0x124>)
 8006ad6:	f7fe fa4b 	bl	8004f70 <__assert_func>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	b003      	add	sp, #12
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	bfbc      	itt	lt
 8006aea:	464b      	movlt	r3, r9
 8006aec:	46a1      	movlt	r9, r4
 8006aee:	4630      	mov	r0, r6
 8006af0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006af4:	bfba      	itte	lt
 8006af6:	461c      	movlt	r4, r3
 8006af8:	2501      	movlt	r5, #1
 8006afa:	2500      	movge	r5, #0
 8006afc:	f7ff fcfe 	bl	80064fc <_Balloc>
 8006b00:	4602      	mov	r2, r0
 8006b02:	b918      	cbnz	r0, 8006b0c <__mdiff+0x60>
 8006b04:	f240 2145 	movw	r1, #581	@ 0x245
 8006b08:	4b30      	ldr	r3, [pc, #192]	@ (8006bcc <__mdiff+0x120>)
 8006b0a:	e7e3      	b.n	8006ad4 <__mdiff+0x28>
 8006b0c:	f100 0b14 	add.w	fp, r0, #20
 8006b10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b14:	f109 0310 	add.w	r3, r9, #16
 8006b18:	60c5      	str	r5, [r0, #12]
 8006b1a:	f04f 0c00 	mov.w	ip, #0
 8006b1e:	f109 0514 	add.w	r5, r9, #20
 8006b22:	46d9      	mov	r9, fp
 8006b24:	6926      	ldr	r6, [r4, #16]
 8006b26:	f104 0e14 	add.w	lr, r4, #20
 8006b2a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b2e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	9b01      	ldr	r3, [sp, #4]
 8006b36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b3e:	b281      	uxth	r1, r0
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	fa1f f38a 	uxth.w	r3, sl
 8006b46:	1a5b      	subs	r3, r3, r1
 8006b48:	0c00      	lsrs	r0, r0, #16
 8006b4a:	4463      	add	r3, ip
 8006b4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b50:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b5a:	4576      	cmp	r6, lr
 8006b5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b60:	f849 3b04 	str.w	r3, [r9], #4
 8006b64:	d8e6      	bhi.n	8006b34 <__mdiff+0x88>
 8006b66:	1b33      	subs	r3, r6, r4
 8006b68:	3b15      	subs	r3, #21
 8006b6a:	f023 0303 	bic.w	r3, r3, #3
 8006b6e:	3415      	adds	r4, #21
 8006b70:	3304      	adds	r3, #4
 8006b72:	42a6      	cmp	r6, r4
 8006b74:	bf38      	it	cc
 8006b76:	2304      	movcc	r3, #4
 8006b78:	441d      	add	r5, r3
 8006b7a:	445b      	add	r3, fp
 8006b7c:	461e      	mov	r6, r3
 8006b7e:	462c      	mov	r4, r5
 8006b80:	4544      	cmp	r4, r8
 8006b82:	d30e      	bcc.n	8006ba2 <__mdiff+0xf6>
 8006b84:	f108 0103 	add.w	r1, r8, #3
 8006b88:	1b49      	subs	r1, r1, r5
 8006b8a:	f021 0103 	bic.w	r1, r1, #3
 8006b8e:	3d03      	subs	r5, #3
 8006b90:	45a8      	cmp	r8, r5
 8006b92:	bf38      	it	cc
 8006b94:	2100      	movcc	r1, #0
 8006b96:	440b      	add	r3, r1
 8006b98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b9c:	b199      	cbz	r1, 8006bc6 <__mdiff+0x11a>
 8006b9e:	6117      	str	r7, [r2, #16]
 8006ba0:	e79e      	b.n	8006ae0 <__mdiff+0x34>
 8006ba2:	46e6      	mov	lr, ip
 8006ba4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ba8:	fa1f fc81 	uxth.w	ip, r1
 8006bac:	44f4      	add	ip, lr
 8006bae:	0c08      	lsrs	r0, r1, #16
 8006bb0:	4471      	add	r1, lr
 8006bb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006bb6:	b289      	uxth	r1, r1
 8006bb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006bbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bc0:	f846 1b04 	str.w	r1, [r6], #4
 8006bc4:	e7dc      	b.n	8006b80 <__mdiff+0xd4>
 8006bc6:	3f01      	subs	r7, #1
 8006bc8:	e7e6      	b.n	8006b98 <__mdiff+0xec>
 8006bca:	bf00      	nop
 8006bcc:	08007a82 	.word	0x08007a82
 8006bd0:	08007af3 	.word	0x08007af3

08006bd4 <__ulp>:
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8006c10 <__ulp+0x3c>)
 8006bd6:	400b      	ands	r3, r1
 8006bd8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	dc08      	bgt.n	8006bf2 <__ulp+0x1e>
 8006be0:	425b      	negs	r3, r3
 8006be2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006be6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006bea:	da04      	bge.n	8006bf6 <__ulp+0x22>
 8006bec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006bf0:	4113      	asrs	r3, r2
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	e008      	b.n	8006c08 <__ulp+0x34>
 8006bf6:	f1a2 0314 	sub.w	r3, r2, #20
 8006bfa:	2b1e      	cmp	r3, #30
 8006bfc:	bfd6      	itet	le
 8006bfe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006c02:	2201      	movgt	r2, #1
 8006c04:	40da      	lsrle	r2, r3
 8006c06:	2300      	movs	r3, #0
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	7ff00000 	.word	0x7ff00000

08006c14 <__b2d>:
 8006c14:	6902      	ldr	r2, [r0, #16]
 8006c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c18:	f100 0614 	add.w	r6, r0, #20
 8006c1c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006c20:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006c24:	4f1e      	ldr	r7, [pc, #120]	@ (8006ca0 <__b2d+0x8c>)
 8006c26:	4620      	mov	r0, r4
 8006c28:	f7ff fd5a 	bl	80066e0 <__hi0bits>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f1c0 0020 	rsb	r0, r0, #32
 8006c32:	2b0a      	cmp	r3, #10
 8006c34:	f1a2 0504 	sub.w	r5, r2, #4
 8006c38:	6008      	str	r0, [r1, #0]
 8006c3a:	dc12      	bgt.n	8006c62 <__b2d+0x4e>
 8006c3c:	42ae      	cmp	r6, r5
 8006c3e:	bf2c      	ite	cs
 8006c40:	2200      	movcs	r2, #0
 8006c42:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006c46:	f1c3 0c0b 	rsb	ip, r3, #11
 8006c4a:	3315      	adds	r3, #21
 8006c4c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006c50:	fa04 f303 	lsl.w	r3, r4, r3
 8006c54:	fa22 f20c 	lsr.w	r2, r2, ip
 8006c58:	ea4e 0107 	orr.w	r1, lr, r7
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c62:	42ae      	cmp	r6, r5
 8006c64:	bf36      	itet	cc
 8006c66:	f1a2 0508 	subcc.w	r5, r2, #8
 8006c6a:	2200      	movcs	r2, #0
 8006c6c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006c70:	3b0b      	subs	r3, #11
 8006c72:	d012      	beq.n	8006c9a <__b2d+0x86>
 8006c74:	f1c3 0720 	rsb	r7, r3, #32
 8006c78:	fa22 f107 	lsr.w	r1, r2, r7
 8006c7c:	409c      	lsls	r4, r3
 8006c7e:	430c      	orrs	r4, r1
 8006c80:	42b5      	cmp	r5, r6
 8006c82:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006c86:	bf94      	ite	ls
 8006c88:	2400      	movls	r4, #0
 8006c8a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006c8e:	409a      	lsls	r2, r3
 8006c90:	40fc      	lsrs	r4, r7
 8006c92:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006c96:	4322      	orrs	r2, r4
 8006c98:	e7e1      	b.n	8006c5e <__b2d+0x4a>
 8006c9a:	ea44 0107 	orr.w	r1, r4, r7
 8006c9e:	e7de      	b.n	8006c5e <__b2d+0x4a>
 8006ca0:	3ff00000 	.word	0x3ff00000

08006ca4 <__d2b>:
 8006ca4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4690      	mov	r8, r2
 8006cac:	4699      	mov	r9, r3
 8006cae:	9e08      	ldr	r6, [sp, #32]
 8006cb0:	f7ff fc24 	bl	80064fc <_Balloc>
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	b930      	cbnz	r0, 8006cc6 <__d2b+0x22>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	f240 310f 	movw	r1, #783	@ 0x30f
 8006cbe:	4b23      	ldr	r3, [pc, #140]	@ (8006d4c <__d2b+0xa8>)
 8006cc0:	4823      	ldr	r0, [pc, #140]	@ (8006d50 <__d2b+0xac>)
 8006cc2:	f7fe f955 	bl	8004f70 <__assert_func>
 8006cc6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cce:	b10d      	cbz	r5, 8006cd4 <__d2b+0x30>
 8006cd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	f1b8 0300 	subs.w	r3, r8, #0
 8006cda:	d024      	beq.n	8006d26 <__d2b+0x82>
 8006cdc:	4668      	mov	r0, sp
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	f7ff fd1d 	bl	800671e <__lo0bits>
 8006ce4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ce8:	b1d8      	cbz	r0, 8006d22 <__d2b+0x7e>
 8006cea:	f1c0 0320 	rsb	r3, r0, #32
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	40c2      	lsrs	r2, r0
 8006cf6:	6163      	str	r3, [r4, #20]
 8006cf8:	9201      	str	r2, [sp, #4]
 8006cfa:	9b01      	ldr	r3, [sp, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf0c      	ite	eq
 8006d00:	2201      	moveq	r2, #1
 8006d02:	2202      	movne	r2, #2
 8006d04:	61a3      	str	r3, [r4, #24]
 8006d06:	6122      	str	r2, [r4, #16]
 8006d08:	b1ad      	cbz	r5, 8006d36 <__d2b+0x92>
 8006d0a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d0e:	4405      	add	r5, r0
 8006d10:	6035      	str	r5, [r6, #0]
 8006d12:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d18:	6018      	str	r0, [r3, #0]
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	b002      	add	sp, #8
 8006d1e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006d22:	6161      	str	r1, [r4, #20]
 8006d24:	e7e9      	b.n	8006cfa <__d2b+0x56>
 8006d26:	a801      	add	r0, sp, #4
 8006d28:	f7ff fcf9 	bl	800671e <__lo0bits>
 8006d2c:	9b01      	ldr	r3, [sp, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	6163      	str	r3, [r4, #20]
 8006d32:	3020      	adds	r0, #32
 8006d34:	e7e7      	b.n	8006d06 <__d2b+0x62>
 8006d36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006d3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d3e:	6030      	str	r0, [r6, #0]
 8006d40:	6918      	ldr	r0, [r3, #16]
 8006d42:	f7ff fccd 	bl	80066e0 <__hi0bits>
 8006d46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d4a:	e7e4      	b.n	8006d16 <__d2b+0x72>
 8006d4c:	08007a82 	.word	0x08007a82
 8006d50:	08007af3 	.word	0x08007af3

08006d54 <__ratio>:
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	e9cd 1000 	strd	r1, r0, [sp]
 8006d5e:	a902      	add	r1, sp, #8
 8006d60:	f7ff ff58 	bl	8006c14 <__b2d>
 8006d64:	468b      	mov	fp, r1
 8006d66:	4606      	mov	r6, r0
 8006d68:	460f      	mov	r7, r1
 8006d6a:	9800      	ldr	r0, [sp, #0]
 8006d6c:	a903      	add	r1, sp, #12
 8006d6e:	f7ff ff51 	bl	8006c14 <__b2d>
 8006d72:	460d      	mov	r5, r1
 8006d74:	9b01      	ldr	r3, [sp, #4]
 8006d76:	4689      	mov	r9, r1
 8006d78:	6919      	ldr	r1, [r3, #16]
 8006d7a:	9b00      	ldr	r3, [sp, #0]
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	4630      	mov	r0, r6
 8006d82:	1ac9      	subs	r1, r1, r3
 8006d84:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bfcd      	iteet	gt
 8006d92:	463a      	movgt	r2, r7
 8006d94:	462a      	movle	r2, r5
 8006d96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d9a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006d9e:	bfd8      	it	le
 8006da0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006da4:	464b      	mov	r3, r9
 8006da6:	4622      	mov	r2, r4
 8006da8:	4659      	mov	r1, fp
 8006daa:	f7f9 fcbf 	bl	800072c <__aeabi_ddiv>
 8006dae:	b005      	add	sp, #20
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006db4 <__copybits>:
 8006db4:	3901      	subs	r1, #1
 8006db6:	b570      	push	{r4, r5, r6, lr}
 8006db8:	1149      	asrs	r1, r1, #5
 8006dba:	6914      	ldr	r4, [r2, #16]
 8006dbc:	3101      	adds	r1, #1
 8006dbe:	f102 0314 	add.w	r3, r2, #20
 8006dc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006dc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006dca:	1f05      	subs	r5, r0, #4
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	d30c      	bcc.n	8006dea <__copybits+0x36>
 8006dd0:	1aa3      	subs	r3, r4, r2
 8006dd2:	3b11      	subs	r3, #17
 8006dd4:	f023 0303 	bic.w	r3, r3, #3
 8006dd8:	3211      	adds	r2, #17
 8006dda:	42a2      	cmp	r2, r4
 8006ddc:	bf88      	it	hi
 8006dde:	2300      	movhi	r3, #0
 8006de0:	4418      	add	r0, r3
 8006de2:	2300      	movs	r3, #0
 8006de4:	4288      	cmp	r0, r1
 8006de6:	d305      	bcc.n	8006df4 <__copybits+0x40>
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
 8006dea:	f853 6b04 	ldr.w	r6, [r3], #4
 8006dee:	f845 6f04 	str.w	r6, [r5, #4]!
 8006df2:	e7eb      	b.n	8006dcc <__copybits+0x18>
 8006df4:	f840 3b04 	str.w	r3, [r0], #4
 8006df8:	e7f4      	b.n	8006de4 <__copybits+0x30>

08006dfa <__any_on>:
 8006dfa:	f100 0214 	add.w	r2, r0, #20
 8006dfe:	6900      	ldr	r0, [r0, #16]
 8006e00:	114b      	asrs	r3, r1, #5
 8006e02:	4298      	cmp	r0, r3
 8006e04:	b510      	push	{r4, lr}
 8006e06:	db11      	blt.n	8006e2c <__any_on+0x32>
 8006e08:	dd0a      	ble.n	8006e20 <__any_on+0x26>
 8006e0a:	f011 011f 	ands.w	r1, r1, #31
 8006e0e:	d007      	beq.n	8006e20 <__any_on+0x26>
 8006e10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e14:	fa24 f001 	lsr.w	r0, r4, r1
 8006e18:	fa00 f101 	lsl.w	r1, r0, r1
 8006e1c:	428c      	cmp	r4, r1
 8006e1e:	d10b      	bne.n	8006e38 <__any_on+0x3e>
 8006e20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d803      	bhi.n	8006e30 <__any_on+0x36>
 8006e28:	2000      	movs	r0, #0
 8006e2a:	bd10      	pop	{r4, pc}
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	e7f7      	b.n	8006e20 <__any_on+0x26>
 8006e30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e34:	2900      	cmp	r1, #0
 8006e36:	d0f5      	beq.n	8006e24 <__any_on+0x2a>
 8006e38:	2001      	movs	r0, #1
 8006e3a:	e7f6      	b.n	8006e2a <__any_on+0x30>

08006e3c <__ascii_wctomb>:
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4608      	mov	r0, r1
 8006e40:	b141      	cbz	r1, 8006e54 <__ascii_wctomb+0x18>
 8006e42:	2aff      	cmp	r2, #255	@ 0xff
 8006e44:	d904      	bls.n	8006e50 <__ascii_wctomb+0x14>
 8006e46:	228a      	movs	r2, #138	@ 0x8a
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	4770      	bx	lr
 8006e50:	2001      	movs	r0, #1
 8006e52:	700a      	strb	r2, [r1, #0]
 8006e54:	4770      	bx	lr

08006e56 <__ssputs_r>:
 8006e56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e5a:	461f      	mov	r7, r3
 8006e5c:	688e      	ldr	r6, [r1, #8]
 8006e5e:	4682      	mov	sl, r0
 8006e60:	42be      	cmp	r6, r7
 8006e62:	460c      	mov	r4, r1
 8006e64:	4690      	mov	r8, r2
 8006e66:	680b      	ldr	r3, [r1, #0]
 8006e68:	d82d      	bhi.n	8006ec6 <__ssputs_r+0x70>
 8006e6a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e6e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e72:	d026      	beq.n	8006ec2 <__ssputs_r+0x6c>
 8006e74:	6965      	ldr	r5, [r4, #20]
 8006e76:	6909      	ldr	r1, [r1, #16]
 8006e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e7c:	eba3 0901 	sub.w	r9, r3, r1
 8006e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e84:	1c7b      	adds	r3, r7, #1
 8006e86:	444b      	add	r3, r9
 8006e88:	106d      	asrs	r5, r5, #1
 8006e8a:	429d      	cmp	r5, r3
 8006e8c:	bf38      	it	cc
 8006e8e:	461d      	movcc	r5, r3
 8006e90:	0553      	lsls	r3, r2, #21
 8006e92:	d527      	bpl.n	8006ee4 <__ssputs_r+0x8e>
 8006e94:	4629      	mov	r1, r5
 8006e96:	f7ff fa93 	bl	80063c0 <_malloc_r>
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	b360      	cbz	r0, 8006ef8 <__ssputs_r+0xa2>
 8006e9e:	464a      	mov	r2, r9
 8006ea0:	6921      	ldr	r1, [r4, #16]
 8006ea2:	f7fe f850 	bl	8004f46 <memcpy>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	6126      	str	r6, [r4, #16]
 8006eb4:	444e      	add	r6, r9
 8006eb6:	6026      	str	r6, [r4, #0]
 8006eb8:	463e      	mov	r6, r7
 8006eba:	6165      	str	r5, [r4, #20]
 8006ebc:	eba5 0509 	sub.w	r5, r5, r9
 8006ec0:	60a5      	str	r5, [r4, #8]
 8006ec2:	42be      	cmp	r6, r7
 8006ec4:	d900      	bls.n	8006ec8 <__ssputs_r+0x72>
 8006ec6:	463e      	mov	r6, r7
 8006ec8:	4632      	mov	r2, r6
 8006eca:	4641      	mov	r1, r8
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	f000 f9d3 	bl	8007278 <memmove>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	68a3      	ldr	r3, [r4, #8]
 8006ed6:	1b9b      	subs	r3, r3, r6
 8006ed8:	60a3      	str	r3, [r4, #8]
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	4433      	add	r3, r6
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	f000 fa0c 	bl	8007302 <_realloc_r>
 8006eea:	4606      	mov	r6, r0
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d1e0      	bne.n	8006eb2 <__ssputs_r+0x5c>
 8006ef0:	4650      	mov	r0, sl
 8006ef2:	6921      	ldr	r1, [r4, #16]
 8006ef4:	f7fe feb8 	bl	8005c68 <_free_r>
 8006ef8:	230c      	movs	r3, #12
 8006efa:	f8ca 3000 	str.w	r3, [sl]
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	f04f 30ff 	mov.w	r0, #4294967295
 8006f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	e7e9      	b.n	8006ee0 <__ssputs_r+0x8a>

08006f0c <_svfiprintf_r>:
 8006f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	4698      	mov	r8, r3
 8006f12:	898b      	ldrh	r3, [r1, #12]
 8006f14:	4607      	mov	r7, r0
 8006f16:	061b      	lsls	r3, r3, #24
 8006f18:	460d      	mov	r5, r1
 8006f1a:	4614      	mov	r4, r2
 8006f1c:	b09d      	sub	sp, #116	@ 0x74
 8006f1e:	d510      	bpl.n	8006f42 <_svfiprintf_r+0x36>
 8006f20:	690b      	ldr	r3, [r1, #16]
 8006f22:	b973      	cbnz	r3, 8006f42 <_svfiprintf_r+0x36>
 8006f24:	2140      	movs	r1, #64	@ 0x40
 8006f26:	f7ff fa4b 	bl	80063c0 <_malloc_r>
 8006f2a:	6028      	str	r0, [r5, #0]
 8006f2c:	6128      	str	r0, [r5, #16]
 8006f2e:	b930      	cbnz	r0, 8006f3e <_svfiprintf_r+0x32>
 8006f30:	230c      	movs	r3, #12
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	b01d      	add	sp, #116	@ 0x74
 8006f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3e:	2340      	movs	r3, #64	@ 0x40
 8006f40:	616b      	str	r3, [r5, #20]
 8006f42:	2300      	movs	r3, #0
 8006f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f46:	2320      	movs	r3, #32
 8006f48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f4c:	2330      	movs	r3, #48	@ 0x30
 8006f4e:	f04f 0901 	mov.w	r9, #1
 8006f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f56:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80070f0 <_svfiprintf_r+0x1e4>
 8006f5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f5e:	4623      	mov	r3, r4
 8006f60:	469a      	mov	sl, r3
 8006f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f66:	b10a      	cbz	r2, 8006f6c <_svfiprintf_r+0x60>
 8006f68:	2a25      	cmp	r2, #37	@ 0x25
 8006f6a:	d1f9      	bne.n	8006f60 <_svfiprintf_r+0x54>
 8006f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006f70:	d00b      	beq.n	8006f8a <_svfiprintf_r+0x7e>
 8006f72:	465b      	mov	r3, fp
 8006f74:	4622      	mov	r2, r4
 8006f76:	4629      	mov	r1, r5
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7ff ff6c 	bl	8006e56 <__ssputs_r>
 8006f7e:	3001      	adds	r0, #1
 8006f80:	f000 80a7 	beq.w	80070d2 <_svfiprintf_r+0x1c6>
 8006f84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f86:	445a      	add	r2, fp
 8006f88:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 809f 	beq.w	80070d2 <_svfiprintf_r+0x1c6>
 8006f94:	2300      	movs	r3, #0
 8006f96:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f9e:	f10a 0a01 	add.w	sl, sl, #1
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	9307      	str	r3, [sp, #28]
 8006fa6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006faa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fac:	4654      	mov	r4, sl
 8006fae:	2205      	movs	r2, #5
 8006fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb4:	484e      	ldr	r0, [pc, #312]	@ (80070f0 <_svfiprintf_r+0x1e4>)
 8006fb6:	f7fd ffb8 	bl	8004f2a <memchr>
 8006fba:	9a04      	ldr	r2, [sp, #16]
 8006fbc:	b9d8      	cbnz	r0, 8006ff6 <_svfiprintf_r+0xea>
 8006fbe:	06d0      	lsls	r0, r2, #27
 8006fc0:	bf44      	itt	mi
 8006fc2:	2320      	movmi	r3, #32
 8006fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fc8:	0711      	lsls	r1, r2, #28
 8006fca:	bf44      	itt	mi
 8006fcc:	232b      	movmi	r3, #43	@ 0x2b
 8006fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fd8:	d015      	beq.n	8007006 <_svfiprintf_r+0xfa>
 8006fda:	4654      	mov	r4, sl
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f04f 0c0a 	mov.w	ip, #10
 8006fe2:	9a07      	ldr	r2, [sp, #28]
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fea:	3b30      	subs	r3, #48	@ 0x30
 8006fec:	2b09      	cmp	r3, #9
 8006fee:	d94b      	bls.n	8007088 <_svfiprintf_r+0x17c>
 8006ff0:	b1b0      	cbz	r0, 8007020 <_svfiprintf_r+0x114>
 8006ff2:	9207      	str	r2, [sp, #28]
 8006ff4:	e014      	b.n	8007020 <_svfiprintf_r+0x114>
 8006ff6:	eba0 0308 	sub.w	r3, r0, r8
 8006ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8006ffe:	4313      	orrs	r3, r2
 8007000:	46a2      	mov	sl, r4
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	e7d2      	b.n	8006fac <_svfiprintf_r+0xa0>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	1d19      	adds	r1, r3, #4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	9103      	str	r1, [sp, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	bfbb      	ittet	lt
 8007012:	425b      	neglt	r3, r3
 8007014:	f042 0202 	orrlt.w	r2, r2, #2
 8007018:	9307      	strge	r3, [sp, #28]
 800701a:	9307      	strlt	r3, [sp, #28]
 800701c:	bfb8      	it	lt
 800701e:	9204      	strlt	r2, [sp, #16]
 8007020:	7823      	ldrb	r3, [r4, #0]
 8007022:	2b2e      	cmp	r3, #46	@ 0x2e
 8007024:	d10a      	bne.n	800703c <_svfiprintf_r+0x130>
 8007026:	7863      	ldrb	r3, [r4, #1]
 8007028:	2b2a      	cmp	r3, #42	@ 0x2a
 800702a:	d132      	bne.n	8007092 <_svfiprintf_r+0x186>
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	3402      	adds	r4, #2
 8007030:	1d1a      	adds	r2, r3, #4
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	9203      	str	r2, [sp, #12]
 8007036:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800703a:	9305      	str	r3, [sp, #20]
 800703c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80070f4 <_svfiprintf_r+0x1e8>
 8007040:	2203      	movs	r2, #3
 8007042:	4650      	mov	r0, sl
 8007044:	7821      	ldrb	r1, [r4, #0]
 8007046:	f7fd ff70 	bl	8004f2a <memchr>
 800704a:	b138      	cbz	r0, 800705c <_svfiprintf_r+0x150>
 800704c:	2240      	movs	r2, #64	@ 0x40
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	eba0 000a 	sub.w	r0, r0, sl
 8007054:	4082      	lsls	r2, r0
 8007056:	4313      	orrs	r3, r2
 8007058:	3401      	adds	r4, #1
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007060:	2206      	movs	r2, #6
 8007062:	4825      	ldr	r0, [pc, #148]	@ (80070f8 <_svfiprintf_r+0x1ec>)
 8007064:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007068:	f7fd ff5f 	bl	8004f2a <memchr>
 800706c:	2800      	cmp	r0, #0
 800706e:	d036      	beq.n	80070de <_svfiprintf_r+0x1d2>
 8007070:	4b22      	ldr	r3, [pc, #136]	@ (80070fc <_svfiprintf_r+0x1f0>)
 8007072:	bb1b      	cbnz	r3, 80070bc <_svfiprintf_r+0x1b0>
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	3307      	adds	r3, #7
 8007078:	f023 0307 	bic.w	r3, r3, #7
 800707c:	3308      	adds	r3, #8
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007082:	4433      	add	r3, r6
 8007084:	9309      	str	r3, [sp, #36]	@ 0x24
 8007086:	e76a      	b.n	8006f5e <_svfiprintf_r+0x52>
 8007088:	460c      	mov	r4, r1
 800708a:	2001      	movs	r0, #1
 800708c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007090:	e7a8      	b.n	8006fe4 <_svfiprintf_r+0xd8>
 8007092:	2300      	movs	r3, #0
 8007094:	f04f 0c0a 	mov.w	ip, #10
 8007098:	4619      	mov	r1, r3
 800709a:	3401      	adds	r4, #1
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	4620      	mov	r0, r4
 80070a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a4:	3a30      	subs	r2, #48	@ 0x30
 80070a6:	2a09      	cmp	r2, #9
 80070a8:	d903      	bls.n	80070b2 <_svfiprintf_r+0x1a6>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0c6      	beq.n	800703c <_svfiprintf_r+0x130>
 80070ae:	9105      	str	r1, [sp, #20]
 80070b0:	e7c4      	b.n	800703c <_svfiprintf_r+0x130>
 80070b2:	4604      	mov	r4, r0
 80070b4:	2301      	movs	r3, #1
 80070b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ba:	e7f0      	b.n	800709e <_svfiprintf_r+0x192>
 80070bc:	ab03      	add	r3, sp, #12
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	462a      	mov	r2, r5
 80070c2:	4638      	mov	r0, r7
 80070c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007100 <_svfiprintf_r+0x1f4>)
 80070c6:	a904      	add	r1, sp, #16
 80070c8:	f7fd f92c 	bl	8004324 <_printf_float>
 80070cc:	1c42      	adds	r2, r0, #1
 80070ce:	4606      	mov	r6, r0
 80070d0:	d1d6      	bne.n	8007080 <_svfiprintf_r+0x174>
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	065b      	lsls	r3, r3, #25
 80070d6:	f53f af2d 	bmi.w	8006f34 <_svfiprintf_r+0x28>
 80070da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070dc:	e72c      	b.n	8006f38 <_svfiprintf_r+0x2c>
 80070de:	ab03      	add	r3, sp, #12
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	462a      	mov	r2, r5
 80070e4:	4638      	mov	r0, r7
 80070e6:	4b06      	ldr	r3, [pc, #24]	@ (8007100 <_svfiprintf_r+0x1f4>)
 80070e8:	a904      	add	r1, sp, #16
 80070ea:	f7fd fbb9 	bl	8004860 <_printf_i>
 80070ee:	e7ed      	b.n	80070cc <_svfiprintf_r+0x1c0>
 80070f0:	08007b4c 	.word	0x08007b4c
 80070f4:	08007b52 	.word	0x08007b52
 80070f8:	08007b56 	.word	0x08007b56
 80070fc:	08004325 	.word	0x08004325
 8007100:	08006e57 	.word	0x08006e57

08007104 <__sflush_r>:
 8007104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	0716      	lsls	r6, r2, #28
 800710c:	4605      	mov	r5, r0
 800710e:	460c      	mov	r4, r1
 8007110:	d454      	bmi.n	80071bc <__sflush_r+0xb8>
 8007112:	684b      	ldr	r3, [r1, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	dc02      	bgt.n	800711e <__sflush_r+0x1a>
 8007118:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	dd48      	ble.n	80071b0 <__sflush_r+0xac>
 800711e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007120:	2e00      	cmp	r6, #0
 8007122:	d045      	beq.n	80071b0 <__sflush_r+0xac>
 8007124:	2300      	movs	r3, #0
 8007126:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800712a:	682f      	ldr	r7, [r5, #0]
 800712c:	6a21      	ldr	r1, [r4, #32]
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	d030      	beq.n	8007194 <__sflush_r+0x90>
 8007132:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	0759      	lsls	r1, r3, #29
 8007138:	d505      	bpl.n	8007146 <__sflush_r+0x42>
 800713a:	6863      	ldr	r3, [r4, #4]
 800713c:	1ad2      	subs	r2, r2, r3
 800713e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007140:	b10b      	cbz	r3, 8007146 <__sflush_r+0x42>
 8007142:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007144:	1ad2      	subs	r2, r2, r3
 8007146:	2300      	movs	r3, #0
 8007148:	4628      	mov	r0, r5
 800714a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800714c:	6a21      	ldr	r1, [r4, #32]
 800714e:	47b0      	blx	r6
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	d106      	bne.n	8007164 <__sflush_r+0x60>
 8007156:	6829      	ldr	r1, [r5, #0]
 8007158:	291d      	cmp	r1, #29
 800715a:	d82b      	bhi.n	80071b4 <__sflush_r+0xb0>
 800715c:	4a28      	ldr	r2, [pc, #160]	@ (8007200 <__sflush_r+0xfc>)
 800715e:	40ca      	lsrs	r2, r1
 8007160:	07d6      	lsls	r6, r2, #31
 8007162:	d527      	bpl.n	80071b4 <__sflush_r+0xb0>
 8007164:	2200      	movs	r2, #0
 8007166:	6062      	str	r2, [r4, #4]
 8007168:	6922      	ldr	r2, [r4, #16]
 800716a:	04d9      	lsls	r1, r3, #19
 800716c:	6022      	str	r2, [r4, #0]
 800716e:	d504      	bpl.n	800717a <__sflush_r+0x76>
 8007170:	1c42      	adds	r2, r0, #1
 8007172:	d101      	bne.n	8007178 <__sflush_r+0x74>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b903      	cbnz	r3, 800717a <__sflush_r+0x76>
 8007178:	6560      	str	r0, [r4, #84]	@ 0x54
 800717a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800717c:	602f      	str	r7, [r5, #0]
 800717e:	b1b9      	cbz	r1, 80071b0 <__sflush_r+0xac>
 8007180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007184:	4299      	cmp	r1, r3
 8007186:	d002      	beq.n	800718e <__sflush_r+0x8a>
 8007188:	4628      	mov	r0, r5
 800718a:	f7fe fd6d 	bl	8005c68 <_free_r>
 800718e:	2300      	movs	r3, #0
 8007190:	6363      	str	r3, [r4, #52]	@ 0x34
 8007192:	e00d      	b.n	80071b0 <__sflush_r+0xac>
 8007194:	2301      	movs	r3, #1
 8007196:	4628      	mov	r0, r5
 8007198:	47b0      	blx	r6
 800719a:	4602      	mov	r2, r0
 800719c:	1c50      	adds	r0, r2, #1
 800719e:	d1c9      	bne.n	8007134 <__sflush_r+0x30>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0c6      	beq.n	8007134 <__sflush_r+0x30>
 80071a6:	2b1d      	cmp	r3, #29
 80071a8:	d001      	beq.n	80071ae <__sflush_r+0xaa>
 80071aa:	2b16      	cmp	r3, #22
 80071ac:	d11d      	bne.n	80071ea <__sflush_r+0xe6>
 80071ae:	602f      	str	r7, [r5, #0]
 80071b0:	2000      	movs	r0, #0
 80071b2:	e021      	b.n	80071f8 <__sflush_r+0xf4>
 80071b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b8:	b21b      	sxth	r3, r3
 80071ba:	e01a      	b.n	80071f2 <__sflush_r+0xee>
 80071bc:	690f      	ldr	r7, [r1, #16]
 80071be:	2f00      	cmp	r7, #0
 80071c0:	d0f6      	beq.n	80071b0 <__sflush_r+0xac>
 80071c2:	0793      	lsls	r3, r2, #30
 80071c4:	bf18      	it	ne
 80071c6:	2300      	movne	r3, #0
 80071c8:	680e      	ldr	r6, [r1, #0]
 80071ca:	bf08      	it	eq
 80071cc:	694b      	ldreq	r3, [r1, #20]
 80071ce:	1bf6      	subs	r6, r6, r7
 80071d0:	600f      	str	r7, [r1, #0]
 80071d2:	608b      	str	r3, [r1, #8]
 80071d4:	2e00      	cmp	r6, #0
 80071d6:	ddeb      	ble.n	80071b0 <__sflush_r+0xac>
 80071d8:	4633      	mov	r3, r6
 80071da:	463a      	mov	r2, r7
 80071dc:	4628      	mov	r0, r5
 80071de:	6a21      	ldr	r1, [r4, #32]
 80071e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80071e4:	47e0      	blx	ip
 80071e6:	2800      	cmp	r0, #0
 80071e8:	dc07      	bgt.n	80071fa <__sflush_r+0xf6>
 80071ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071fa:	4407      	add	r7, r0
 80071fc:	1a36      	subs	r6, r6, r0
 80071fe:	e7e9      	b.n	80071d4 <__sflush_r+0xd0>
 8007200:	20400001 	.word	0x20400001

08007204 <_fflush_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	690b      	ldr	r3, [r1, #16]
 8007208:	4605      	mov	r5, r0
 800720a:	460c      	mov	r4, r1
 800720c:	b913      	cbnz	r3, 8007214 <_fflush_r+0x10>
 800720e:	2500      	movs	r5, #0
 8007210:	4628      	mov	r0, r5
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	b118      	cbz	r0, 800721e <_fflush_r+0x1a>
 8007216:	6a03      	ldr	r3, [r0, #32]
 8007218:	b90b      	cbnz	r3, 800721e <_fflush_r+0x1a>
 800721a:	f7fd fccb 	bl	8004bb4 <__sinit>
 800721e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0f3      	beq.n	800720e <_fflush_r+0xa>
 8007226:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007228:	07d0      	lsls	r0, r2, #31
 800722a:	d404      	bmi.n	8007236 <_fflush_r+0x32>
 800722c:	0599      	lsls	r1, r3, #22
 800722e:	d402      	bmi.n	8007236 <_fflush_r+0x32>
 8007230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007232:	f7fd fe70 	bl	8004f16 <__retarget_lock_acquire_recursive>
 8007236:	4628      	mov	r0, r5
 8007238:	4621      	mov	r1, r4
 800723a:	f7ff ff63 	bl	8007104 <__sflush_r>
 800723e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007240:	4605      	mov	r5, r0
 8007242:	07da      	lsls	r2, r3, #31
 8007244:	d4e4      	bmi.n	8007210 <_fflush_r+0xc>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	059b      	lsls	r3, r3, #22
 800724a:	d4e1      	bmi.n	8007210 <_fflush_r+0xc>
 800724c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800724e:	f7fd fe63 	bl	8004f18 <__retarget_lock_release_recursive>
 8007252:	e7dd      	b.n	8007210 <_fflush_r+0xc>

08007254 <fiprintf>:
 8007254:	b40e      	push	{r1, r2, r3}
 8007256:	b503      	push	{r0, r1, lr}
 8007258:	4601      	mov	r1, r0
 800725a:	ab03      	add	r3, sp, #12
 800725c:	4805      	ldr	r0, [pc, #20]	@ (8007274 <fiprintf+0x20>)
 800725e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007262:	6800      	ldr	r0, [r0, #0]
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	f000 f8a1 	bl	80073ac <_vfiprintf_r>
 800726a:	b002      	add	sp, #8
 800726c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007270:	b003      	add	sp, #12
 8007272:	4770      	bx	lr
 8007274:	200001a4 	.word	0x200001a4

08007278 <memmove>:
 8007278:	4288      	cmp	r0, r1
 800727a:	b510      	push	{r4, lr}
 800727c:	eb01 0402 	add.w	r4, r1, r2
 8007280:	d902      	bls.n	8007288 <memmove+0x10>
 8007282:	4284      	cmp	r4, r0
 8007284:	4623      	mov	r3, r4
 8007286:	d807      	bhi.n	8007298 <memmove+0x20>
 8007288:	1e43      	subs	r3, r0, #1
 800728a:	42a1      	cmp	r1, r4
 800728c:	d008      	beq.n	80072a0 <memmove+0x28>
 800728e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007296:	e7f8      	b.n	800728a <memmove+0x12>
 8007298:	4601      	mov	r1, r0
 800729a:	4402      	add	r2, r0
 800729c:	428a      	cmp	r2, r1
 800729e:	d100      	bne.n	80072a2 <memmove+0x2a>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072aa:	e7f7      	b.n	800729c <memmove+0x24>

080072ac <_sbrk_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	2300      	movs	r3, #0
 80072b0:	4d05      	ldr	r5, [pc, #20]	@ (80072c8 <_sbrk_r+0x1c>)
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	f7fa fb0a 	bl	80018d0 <_sbrk>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_sbrk_r+0x1a>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_sbrk_r+0x1a>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	20000568 	.word	0x20000568

080072cc <abort>:
 80072cc:	2006      	movs	r0, #6
 80072ce:	b508      	push	{r3, lr}
 80072d0:	f000 fa40 	bl	8007754 <raise>
 80072d4:	2001      	movs	r0, #1
 80072d6:	f7fa fa86 	bl	80017e6 <_exit>

080072da <_calloc_r>:
 80072da:	b570      	push	{r4, r5, r6, lr}
 80072dc:	fba1 5402 	umull	r5, r4, r1, r2
 80072e0:	b934      	cbnz	r4, 80072f0 <_calloc_r+0x16>
 80072e2:	4629      	mov	r1, r5
 80072e4:	f7ff f86c 	bl	80063c0 <_malloc_r>
 80072e8:	4606      	mov	r6, r0
 80072ea:	b928      	cbnz	r0, 80072f8 <_calloc_r+0x1e>
 80072ec:	4630      	mov	r0, r6
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	220c      	movs	r2, #12
 80072f2:	2600      	movs	r6, #0
 80072f4:	6002      	str	r2, [r0, #0]
 80072f6:	e7f9      	b.n	80072ec <_calloc_r+0x12>
 80072f8:	462a      	mov	r2, r5
 80072fa:	4621      	mov	r1, r4
 80072fc:	f7fd fd09 	bl	8004d12 <memset>
 8007300:	e7f4      	b.n	80072ec <_calloc_r+0x12>

08007302 <_realloc_r>:
 8007302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007306:	4607      	mov	r7, r0
 8007308:	4614      	mov	r4, r2
 800730a:	460d      	mov	r5, r1
 800730c:	b921      	cbnz	r1, 8007318 <_realloc_r+0x16>
 800730e:	4611      	mov	r1, r2
 8007310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	f7ff b854 	b.w	80063c0 <_malloc_r>
 8007318:	b92a      	cbnz	r2, 8007326 <_realloc_r+0x24>
 800731a:	f7fe fca5 	bl	8005c68 <_free_r>
 800731e:	4625      	mov	r5, r4
 8007320:	4628      	mov	r0, r5
 8007322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007326:	f000 fa31 	bl	800778c <_malloc_usable_size_r>
 800732a:	4284      	cmp	r4, r0
 800732c:	4606      	mov	r6, r0
 800732e:	d802      	bhi.n	8007336 <_realloc_r+0x34>
 8007330:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007334:	d8f4      	bhi.n	8007320 <_realloc_r+0x1e>
 8007336:	4621      	mov	r1, r4
 8007338:	4638      	mov	r0, r7
 800733a:	f7ff f841 	bl	80063c0 <_malloc_r>
 800733e:	4680      	mov	r8, r0
 8007340:	b908      	cbnz	r0, 8007346 <_realloc_r+0x44>
 8007342:	4645      	mov	r5, r8
 8007344:	e7ec      	b.n	8007320 <_realloc_r+0x1e>
 8007346:	42b4      	cmp	r4, r6
 8007348:	4622      	mov	r2, r4
 800734a:	4629      	mov	r1, r5
 800734c:	bf28      	it	cs
 800734e:	4632      	movcs	r2, r6
 8007350:	f7fd fdf9 	bl	8004f46 <memcpy>
 8007354:	4629      	mov	r1, r5
 8007356:	4638      	mov	r0, r7
 8007358:	f7fe fc86 	bl	8005c68 <_free_r>
 800735c:	e7f1      	b.n	8007342 <_realloc_r+0x40>

0800735e <__sfputc_r>:
 800735e:	6893      	ldr	r3, [r2, #8]
 8007360:	b410      	push	{r4}
 8007362:	3b01      	subs	r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	6093      	str	r3, [r2, #8]
 8007368:	da07      	bge.n	800737a <__sfputc_r+0x1c>
 800736a:	6994      	ldr	r4, [r2, #24]
 800736c:	42a3      	cmp	r3, r4
 800736e:	db01      	blt.n	8007374 <__sfputc_r+0x16>
 8007370:	290a      	cmp	r1, #10
 8007372:	d102      	bne.n	800737a <__sfputc_r+0x1c>
 8007374:	bc10      	pop	{r4}
 8007376:	f000 b931 	b.w	80075dc <__swbuf_r>
 800737a:	6813      	ldr	r3, [r2, #0]
 800737c:	1c58      	adds	r0, r3, #1
 800737e:	6010      	str	r0, [r2, #0]
 8007380:	7019      	strb	r1, [r3, #0]
 8007382:	4608      	mov	r0, r1
 8007384:	bc10      	pop	{r4}
 8007386:	4770      	bx	lr

08007388 <__sfputs_r>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	4606      	mov	r6, r0
 800738c:	460f      	mov	r7, r1
 800738e:	4614      	mov	r4, r2
 8007390:	18d5      	adds	r5, r2, r3
 8007392:	42ac      	cmp	r4, r5
 8007394:	d101      	bne.n	800739a <__sfputs_r+0x12>
 8007396:	2000      	movs	r0, #0
 8007398:	e007      	b.n	80073aa <__sfputs_r+0x22>
 800739a:	463a      	mov	r2, r7
 800739c:	4630      	mov	r0, r6
 800739e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a2:	f7ff ffdc 	bl	800735e <__sfputc_r>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	d1f3      	bne.n	8007392 <__sfputs_r+0xa>
 80073aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073ac <_vfiprintf_r>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	460d      	mov	r5, r1
 80073b2:	4614      	mov	r4, r2
 80073b4:	4698      	mov	r8, r3
 80073b6:	4606      	mov	r6, r0
 80073b8:	b09d      	sub	sp, #116	@ 0x74
 80073ba:	b118      	cbz	r0, 80073c4 <_vfiprintf_r+0x18>
 80073bc:	6a03      	ldr	r3, [r0, #32]
 80073be:	b90b      	cbnz	r3, 80073c4 <_vfiprintf_r+0x18>
 80073c0:	f7fd fbf8 	bl	8004bb4 <__sinit>
 80073c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073c6:	07d9      	lsls	r1, r3, #31
 80073c8:	d405      	bmi.n	80073d6 <_vfiprintf_r+0x2a>
 80073ca:	89ab      	ldrh	r3, [r5, #12]
 80073cc:	059a      	lsls	r2, r3, #22
 80073ce:	d402      	bmi.n	80073d6 <_vfiprintf_r+0x2a>
 80073d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073d2:	f7fd fda0 	bl	8004f16 <__retarget_lock_acquire_recursive>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	071b      	lsls	r3, r3, #28
 80073da:	d501      	bpl.n	80073e0 <_vfiprintf_r+0x34>
 80073dc:	692b      	ldr	r3, [r5, #16]
 80073de:	b99b      	cbnz	r3, 8007408 <_vfiprintf_r+0x5c>
 80073e0:	4629      	mov	r1, r5
 80073e2:	4630      	mov	r0, r6
 80073e4:	f000 f938 	bl	8007658 <__swsetup_r>
 80073e8:	b170      	cbz	r0, 8007408 <_vfiprintf_r+0x5c>
 80073ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073ec:	07dc      	lsls	r4, r3, #31
 80073ee:	d504      	bpl.n	80073fa <_vfiprintf_r+0x4e>
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	b01d      	add	sp, #116	@ 0x74
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	89ab      	ldrh	r3, [r5, #12]
 80073fc:	0598      	lsls	r0, r3, #22
 80073fe:	d4f7      	bmi.n	80073f0 <_vfiprintf_r+0x44>
 8007400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007402:	f7fd fd89 	bl	8004f18 <__retarget_lock_release_recursive>
 8007406:	e7f3      	b.n	80073f0 <_vfiprintf_r+0x44>
 8007408:	2300      	movs	r3, #0
 800740a:	9309      	str	r3, [sp, #36]	@ 0x24
 800740c:	2320      	movs	r3, #32
 800740e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007412:	2330      	movs	r3, #48	@ 0x30
 8007414:	f04f 0901 	mov.w	r9, #1
 8007418:	f8cd 800c 	str.w	r8, [sp, #12]
 800741c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80075c8 <_vfiprintf_r+0x21c>
 8007420:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007424:	4623      	mov	r3, r4
 8007426:	469a      	mov	sl, r3
 8007428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800742c:	b10a      	cbz	r2, 8007432 <_vfiprintf_r+0x86>
 800742e:	2a25      	cmp	r2, #37	@ 0x25
 8007430:	d1f9      	bne.n	8007426 <_vfiprintf_r+0x7a>
 8007432:	ebba 0b04 	subs.w	fp, sl, r4
 8007436:	d00b      	beq.n	8007450 <_vfiprintf_r+0xa4>
 8007438:	465b      	mov	r3, fp
 800743a:	4622      	mov	r2, r4
 800743c:	4629      	mov	r1, r5
 800743e:	4630      	mov	r0, r6
 8007440:	f7ff ffa2 	bl	8007388 <__sfputs_r>
 8007444:	3001      	adds	r0, #1
 8007446:	f000 80a7 	beq.w	8007598 <_vfiprintf_r+0x1ec>
 800744a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800744c:	445a      	add	r2, fp
 800744e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007450:	f89a 3000 	ldrb.w	r3, [sl]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 809f 	beq.w	8007598 <_vfiprintf_r+0x1ec>
 800745a:	2300      	movs	r3, #0
 800745c:	f04f 32ff 	mov.w	r2, #4294967295
 8007460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007464:	f10a 0a01 	add.w	sl, sl, #1
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	9307      	str	r3, [sp, #28]
 800746c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007470:	931a      	str	r3, [sp, #104]	@ 0x68
 8007472:	4654      	mov	r4, sl
 8007474:	2205      	movs	r2, #5
 8007476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747a:	4853      	ldr	r0, [pc, #332]	@ (80075c8 <_vfiprintf_r+0x21c>)
 800747c:	f7fd fd55 	bl	8004f2a <memchr>
 8007480:	9a04      	ldr	r2, [sp, #16]
 8007482:	b9d8      	cbnz	r0, 80074bc <_vfiprintf_r+0x110>
 8007484:	06d1      	lsls	r1, r2, #27
 8007486:	bf44      	itt	mi
 8007488:	2320      	movmi	r3, #32
 800748a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800748e:	0713      	lsls	r3, r2, #28
 8007490:	bf44      	itt	mi
 8007492:	232b      	movmi	r3, #43	@ 0x2b
 8007494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007498:	f89a 3000 	ldrb.w	r3, [sl]
 800749c:	2b2a      	cmp	r3, #42	@ 0x2a
 800749e:	d015      	beq.n	80074cc <_vfiprintf_r+0x120>
 80074a0:	4654      	mov	r4, sl
 80074a2:	2000      	movs	r0, #0
 80074a4:	f04f 0c0a 	mov.w	ip, #10
 80074a8:	9a07      	ldr	r2, [sp, #28]
 80074aa:	4621      	mov	r1, r4
 80074ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074b0:	3b30      	subs	r3, #48	@ 0x30
 80074b2:	2b09      	cmp	r3, #9
 80074b4:	d94b      	bls.n	800754e <_vfiprintf_r+0x1a2>
 80074b6:	b1b0      	cbz	r0, 80074e6 <_vfiprintf_r+0x13a>
 80074b8:	9207      	str	r2, [sp, #28]
 80074ba:	e014      	b.n	80074e6 <_vfiprintf_r+0x13a>
 80074bc:	eba0 0308 	sub.w	r3, r0, r8
 80074c0:	fa09 f303 	lsl.w	r3, r9, r3
 80074c4:	4313      	orrs	r3, r2
 80074c6:	46a2      	mov	sl, r4
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	e7d2      	b.n	8007472 <_vfiprintf_r+0xc6>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	1d19      	adds	r1, r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	9103      	str	r1, [sp, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bfbb      	ittet	lt
 80074d8:	425b      	neglt	r3, r3
 80074da:	f042 0202 	orrlt.w	r2, r2, #2
 80074de:	9307      	strge	r3, [sp, #28]
 80074e0:	9307      	strlt	r3, [sp, #28]
 80074e2:	bfb8      	it	lt
 80074e4:	9204      	strlt	r2, [sp, #16]
 80074e6:	7823      	ldrb	r3, [r4, #0]
 80074e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ea:	d10a      	bne.n	8007502 <_vfiprintf_r+0x156>
 80074ec:	7863      	ldrb	r3, [r4, #1]
 80074ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f0:	d132      	bne.n	8007558 <_vfiprintf_r+0x1ac>
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	3402      	adds	r4, #2
 80074f6:	1d1a      	adds	r2, r3, #4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	9203      	str	r2, [sp, #12]
 80074fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007500:	9305      	str	r3, [sp, #20]
 8007502:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80075cc <_vfiprintf_r+0x220>
 8007506:	2203      	movs	r2, #3
 8007508:	4650      	mov	r0, sl
 800750a:	7821      	ldrb	r1, [r4, #0]
 800750c:	f7fd fd0d 	bl	8004f2a <memchr>
 8007510:	b138      	cbz	r0, 8007522 <_vfiprintf_r+0x176>
 8007512:	2240      	movs	r2, #64	@ 0x40
 8007514:	9b04      	ldr	r3, [sp, #16]
 8007516:	eba0 000a 	sub.w	r0, r0, sl
 800751a:	4082      	lsls	r2, r0
 800751c:	4313      	orrs	r3, r2
 800751e:	3401      	adds	r4, #1
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007526:	2206      	movs	r2, #6
 8007528:	4829      	ldr	r0, [pc, #164]	@ (80075d0 <_vfiprintf_r+0x224>)
 800752a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800752e:	f7fd fcfc 	bl	8004f2a <memchr>
 8007532:	2800      	cmp	r0, #0
 8007534:	d03f      	beq.n	80075b6 <_vfiprintf_r+0x20a>
 8007536:	4b27      	ldr	r3, [pc, #156]	@ (80075d4 <_vfiprintf_r+0x228>)
 8007538:	bb1b      	cbnz	r3, 8007582 <_vfiprintf_r+0x1d6>
 800753a:	9b03      	ldr	r3, [sp, #12]
 800753c:	3307      	adds	r3, #7
 800753e:	f023 0307 	bic.w	r3, r3, #7
 8007542:	3308      	adds	r3, #8
 8007544:	9303      	str	r3, [sp, #12]
 8007546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007548:	443b      	add	r3, r7
 800754a:	9309      	str	r3, [sp, #36]	@ 0x24
 800754c:	e76a      	b.n	8007424 <_vfiprintf_r+0x78>
 800754e:	460c      	mov	r4, r1
 8007550:	2001      	movs	r0, #1
 8007552:	fb0c 3202 	mla	r2, ip, r2, r3
 8007556:	e7a8      	b.n	80074aa <_vfiprintf_r+0xfe>
 8007558:	2300      	movs	r3, #0
 800755a:	f04f 0c0a 	mov.w	ip, #10
 800755e:	4619      	mov	r1, r3
 8007560:	3401      	adds	r4, #1
 8007562:	9305      	str	r3, [sp, #20]
 8007564:	4620      	mov	r0, r4
 8007566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800756a:	3a30      	subs	r2, #48	@ 0x30
 800756c:	2a09      	cmp	r2, #9
 800756e:	d903      	bls.n	8007578 <_vfiprintf_r+0x1cc>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0c6      	beq.n	8007502 <_vfiprintf_r+0x156>
 8007574:	9105      	str	r1, [sp, #20]
 8007576:	e7c4      	b.n	8007502 <_vfiprintf_r+0x156>
 8007578:	4604      	mov	r4, r0
 800757a:	2301      	movs	r3, #1
 800757c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007580:	e7f0      	b.n	8007564 <_vfiprintf_r+0x1b8>
 8007582:	ab03      	add	r3, sp, #12
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	462a      	mov	r2, r5
 8007588:	4630      	mov	r0, r6
 800758a:	4b13      	ldr	r3, [pc, #76]	@ (80075d8 <_vfiprintf_r+0x22c>)
 800758c:	a904      	add	r1, sp, #16
 800758e:	f7fc fec9 	bl	8004324 <_printf_float>
 8007592:	4607      	mov	r7, r0
 8007594:	1c78      	adds	r0, r7, #1
 8007596:	d1d6      	bne.n	8007546 <_vfiprintf_r+0x19a>
 8007598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800759a:	07d9      	lsls	r1, r3, #31
 800759c:	d405      	bmi.n	80075aa <_vfiprintf_r+0x1fe>
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	059a      	lsls	r2, r3, #22
 80075a2:	d402      	bmi.n	80075aa <_vfiprintf_r+0x1fe>
 80075a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075a6:	f7fd fcb7 	bl	8004f18 <__retarget_lock_release_recursive>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	065b      	lsls	r3, r3, #25
 80075ae:	f53f af1f 	bmi.w	80073f0 <_vfiprintf_r+0x44>
 80075b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075b4:	e71e      	b.n	80073f4 <_vfiprintf_r+0x48>
 80075b6:	ab03      	add	r3, sp, #12
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	462a      	mov	r2, r5
 80075bc:	4630      	mov	r0, r6
 80075be:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <_vfiprintf_r+0x22c>)
 80075c0:	a904      	add	r1, sp, #16
 80075c2:	f7fd f94d 	bl	8004860 <_printf_i>
 80075c6:	e7e4      	b.n	8007592 <_vfiprintf_r+0x1e6>
 80075c8:	08007b4c 	.word	0x08007b4c
 80075cc:	08007b52 	.word	0x08007b52
 80075d0:	08007b56 	.word	0x08007b56
 80075d4:	08004325 	.word	0x08004325
 80075d8:	08007389 	.word	0x08007389

080075dc <__swbuf_r>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	460e      	mov	r6, r1
 80075e0:	4614      	mov	r4, r2
 80075e2:	4605      	mov	r5, r0
 80075e4:	b118      	cbz	r0, 80075ee <__swbuf_r+0x12>
 80075e6:	6a03      	ldr	r3, [r0, #32]
 80075e8:	b90b      	cbnz	r3, 80075ee <__swbuf_r+0x12>
 80075ea:	f7fd fae3 	bl	8004bb4 <__sinit>
 80075ee:	69a3      	ldr	r3, [r4, #24]
 80075f0:	60a3      	str	r3, [r4, #8]
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	071a      	lsls	r2, r3, #28
 80075f6:	d501      	bpl.n	80075fc <__swbuf_r+0x20>
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	b943      	cbnz	r3, 800760e <__swbuf_r+0x32>
 80075fc:	4621      	mov	r1, r4
 80075fe:	4628      	mov	r0, r5
 8007600:	f000 f82a 	bl	8007658 <__swsetup_r>
 8007604:	b118      	cbz	r0, 800760e <__swbuf_r+0x32>
 8007606:	f04f 37ff 	mov.w	r7, #4294967295
 800760a:	4638      	mov	r0, r7
 800760c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	6922      	ldr	r2, [r4, #16]
 8007612:	b2f6      	uxtb	r6, r6
 8007614:	1a98      	subs	r0, r3, r2
 8007616:	6963      	ldr	r3, [r4, #20]
 8007618:	4637      	mov	r7, r6
 800761a:	4283      	cmp	r3, r0
 800761c:	dc05      	bgt.n	800762a <__swbuf_r+0x4e>
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f7ff fdef 	bl	8007204 <_fflush_r>
 8007626:	2800      	cmp	r0, #0
 8007628:	d1ed      	bne.n	8007606 <__swbuf_r+0x2a>
 800762a:	68a3      	ldr	r3, [r4, #8]
 800762c:	3b01      	subs	r3, #1
 800762e:	60a3      	str	r3, [r4, #8]
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	6022      	str	r2, [r4, #0]
 8007636:	701e      	strb	r6, [r3, #0]
 8007638:	6962      	ldr	r2, [r4, #20]
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	429a      	cmp	r2, r3
 800763e:	d004      	beq.n	800764a <__swbuf_r+0x6e>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	07db      	lsls	r3, r3, #31
 8007644:	d5e1      	bpl.n	800760a <__swbuf_r+0x2e>
 8007646:	2e0a      	cmp	r6, #10
 8007648:	d1df      	bne.n	800760a <__swbuf_r+0x2e>
 800764a:	4621      	mov	r1, r4
 800764c:	4628      	mov	r0, r5
 800764e:	f7ff fdd9 	bl	8007204 <_fflush_r>
 8007652:	2800      	cmp	r0, #0
 8007654:	d0d9      	beq.n	800760a <__swbuf_r+0x2e>
 8007656:	e7d6      	b.n	8007606 <__swbuf_r+0x2a>

08007658 <__swsetup_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4b29      	ldr	r3, [pc, #164]	@ (8007700 <__swsetup_r+0xa8>)
 800765c:	4605      	mov	r5, r0
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	460c      	mov	r4, r1
 8007662:	b118      	cbz	r0, 800766c <__swsetup_r+0x14>
 8007664:	6a03      	ldr	r3, [r0, #32]
 8007666:	b90b      	cbnz	r3, 800766c <__swsetup_r+0x14>
 8007668:	f7fd faa4 	bl	8004bb4 <__sinit>
 800766c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007670:	0719      	lsls	r1, r3, #28
 8007672:	d422      	bmi.n	80076ba <__swsetup_r+0x62>
 8007674:	06da      	lsls	r2, r3, #27
 8007676:	d407      	bmi.n	8007688 <__swsetup_r+0x30>
 8007678:	2209      	movs	r2, #9
 800767a:	602a      	str	r2, [r5, #0]
 800767c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	e033      	b.n	80076f0 <__swsetup_r+0x98>
 8007688:	0758      	lsls	r0, r3, #29
 800768a:	d512      	bpl.n	80076b2 <__swsetup_r+0x5a>
 800768c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800768e:	b141      	cbz	r1, 80076a2 <__swsetup_r+0x4a>
 8007690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007694:	4299      	cmp	r1, r3
 8007696:	d002      	beq.n	800769e <__swsetup_r+0x46>
 8007698:	4628      	mov	r0, r5
 800769a:	f7fe fae5 	bl	8005c68 <_free_r>
 800769e:	2300      	movs	r3, #0
 80076a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	2300      	movs	r3, #0
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	f043 0308 	orr.w	r3, r3, #8
 80076b8:	81a3      	strh	r3, [r4, #12]
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	b94b      	cbnz	r3, 80076d2 <__swsetup_r+0x7a>
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076c8:	d003      	beq.n	80076d2 <__swsetup_r+0x7a>
 80076ca:	4621      	mov	r1, r4
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 f88a 	bl	80077e6 <__smakebuf_r>
 80076d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d6:	f013 0201 	ands.w	r2, r3, #1
 80076da:	d00a      	beq.n	80076f2 <__swsetup_r+0x9a>
 80076dc:	2200      	movs	r2, #0
 80076de:	60a2      	str	r2, [r4, #8]
 80076e0:	6962      	ldr	r2, [r4, #20]
 80076e2:	4252      	negs	r2, r2
 80076e4:	61a2      	str	r2, [r4, #24]
 80076e6:	6922      	ldr	r2, [r4, #16]
 80076e8:	b942      	cbnz	r2, 80076fc <__swsetup_r+0xa4>
 80076ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076ee:	d1c5      	bne.n	800767c <__swsetup_r+0x24>
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	0799      	lsls	r1, r3, #30
 80076f4:	bf58      	it	pl
 80076f6:	6962      	ldrpl	r2, [r4, #20]
 80076f8:	60a2      	str	r2, [r4, #8]
 80076fa:	e7f4      	b.n	80076e6 <__swsetup_r+0x8e>
 80076fc:	2000      	movs	r0, #0
 80076fe:	e7f7      	b.n	80076f0 <__swsetup_r+0x98>
 8007700:	200001a4 	.word	0x200001a4

08007704 <_raise_r>:
 8007704:	291f      	cmp	r1, #31
 8007706:	b538      	push	{r3, r4, r5, lr}
 8007708:	4605      	mov	r5, r0
 800770a:	460c      	mov	r4, r1
 800770c:	d904      	bls.n	8007718 <_raise_r+0x14>
 800770e:	2316      	movs	r3, #22
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	f04f 30ff 	mov.w	r0, #4294967295
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800771a:	b112      	cbz	r2, 8007722 <_raise_r+0x1e>
 800771c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007720:	b94b      	cbnz	r3, 8007736 <_raise_r+0x32>
 8007722:	4628      	mov	r0, r5
 8007724:	f000 f830 	bl	8007788 <_getpid_r>
 8007728:	4622      	mov	r2, r4
 800772a:	4601      	mov	r1, r0
 800772c:	4628      	mov	r0, r5
 800772e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007732:	f000 b817 	b.w	8007764 <_kill_r>
 8007736:	2b01      	cmp	r3, #1
 8007738:	d00a      	beq.n	8007750 <_raise_r+0x4c>
 800773a:	1c59      	adds	r1, r3, #1
 800773c:	d103      	bne.n	8007746 <_raise_r+0x42>
 800773e:	2316      	movs	r3, #22
 8007740:	6003      	str	r3, [r0, #0]
 8007742:	2001      	movs	r0, #1
 8007744:	e7e7      	b.n	8007716 <_raise_r+0x12>
 8007746:	2100      	movs	r1, #0
 8007748:	4620      	mov	r0, r4
 800774a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800774e:	4798      	blx	r3
 8007750:	2000      	movs	r0, #0
 8007752:	e7e0      	b.n	8007716 <_raise_r+0x12>

08007754 <raise>:
 8007754:	4b02      	ldr	r3, [pc, #8]	@ (8007760 <raise+0xc>)
 8007756:	4601      	mov	r1, r0
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	f7ff bfd3 	b.w	8007704 <_raise_r>
 800775e:	bf00      	nop
 8007760:	200001a4 	.word	0x200001a4

08007764 <_kill_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	2300      	movs	r3, #0
 8007768:	4d06      	ldr	r5, [pc, #24]	@ (8007784 <_kill_r+0x20>)
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	4611      	mov	r1, r2
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	f7fa f828 	bl	80017c6 <_kill>
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	d102      	bne.n	8007780 <_kill_r+0x1c>
 800777a:	682b      	ldr	r3, [r5, #0]
 800777c:	b103      	cbz	r3, 8007780 <_kill_r+0x1c>
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	bd38      	pop	{r3, r4, r5, pc}
 8007782:	bf00      	nop
 8007784:	20000568 	.word	0x20000568

08007788 <_getpid_r>:
 8007788:	f7fa b816 	b.w	80017b8 <_getpid>

0800778c <_malloc_usable_size_r>:
 800778c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007790:	1f18      	subs	r0, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	bfbc      	itt	lt
 8007796:	580b      	ldrlt	r3, [r1, r0]
 8007798:	18c0      	addlt	r0, r0, r3
 800779a:	4770      	bx	lr

0800779c <__swhatbuf_r>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	460c      	mov	r4, r1
 80077a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a4:	4615      	mov	r5, r2
 80077a6:	2900      	cmp	r1, #0
 80077a8:	461e      	mov	r6, r3
 80077aa:	b096      	sub	sp, #88	@ 0x58
 80077ac:	da0c      	bge.n	80077c8 <__swhatbuf_r+0x2c>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	2100      	movs	r1, #0
 80077b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077b6:	bf14      	ite	ne
 80077b8:	2340      	movne	r3, #64	@ 0x40
 80077ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077be:	2000      	movs	r0, #0
 80077c0:	6031      	str	r1, [r6, #0]
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	b016      	add	sp, #88	@ 0x58
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	466a      	mov	r2, sp
 80077ca:	f000 f849 	bl	8007860 <_fstat_r>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	dbed      	blt.n	80077ae <__swhatbuf_r+0x12>
 80077d2:	9901      	ldr	r1, [sp, #4]
 80077d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80077d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80077dc:	4259      	negs	r1, r3
 80077de:	4159      	adcs	r1, r3
 80077e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077e4:	e7eb      	b.n	80077be <__swhatbuf_r+0x22>

080077e6 <__smakebuf_r>:
 80077e6:	898b      	ldrh	r3, [r1, #12]
 80077e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ea:	079d      	lsls	r5, r3, #30
 80077ec:	4606      	mov	r6, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	d507      	bpl.n	8007802 <__smakebuf_r+0x1c>
 80077f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	2301      	movs	r3, #1
 80077fc:	6163      	str	r3, [r4, #20]
 80077fe:	b003      	add	sp, #12
 8007800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007802:	466a      	mov	r2, sp
 8007804:	ab01      	add	r3, sp, #4
 8007806:	f7ff ffc9 	bl	800779c <__swhatbuf_r>
 800780a:	9f00      	ldr	r7, [sp, #0]
 800780c:	4605      	mov	r5, r0
 800780e:	4639      	mov	r1, r7
 8007810:	4630      	mov	r0, r6
 8007812:	f7fe fdd5 	bl	80063c0 <_malloc_r>
 8007816:	b948      	cbnz	r0, 800782c <__smakebuf_r+0x46>
 8007818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781c:	059a      	lsls	r2, r3, #22
 800781e:	d4ee      	bmi.n	80077fe <__smakebuf_r+0x18>
 8007820:	f023 0303 	bic.w	r3, r3, #3
 8007824:	f043 0302 	orr.w	r3, r3, #2
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	e7e2      	b.n	80077f2 <__smakebuf_r+0xc>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	9b01      	ldr	r3, [sp, #4]
 800783a:	6020      	str	r0, [r4, #0]
 800783c:	b15b      	cbz	r3, 8007856 <__smakebuf_r+0x70>
 800783e:	4630      	mov	r0, r6
 8007840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007844:	f000 f81e 	bl	8007884 <_isatty_r>
 8007848:	b128      	cbz	r0, 8007856 <__smakebuf_r+0x70>
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	f023 0303 	bic.w	r3, r3, #3
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	81a3      	strh	r3, [r4, #12]
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	431d      	orrs	r5, r3
 800785a:	81a5      	strh	r5, [r4, #12]
 800785c:	e7cf      	b.n	80077fe <__smakebuf_r+0x18>
	...

08007860 <_fstat_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	2300      	movs	r3, #0
 8007864:	4d06      	ldr	r5, [pc, #24]	@ (8007880 <_fstat_r+0x20>)
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	f7fa f809 	bl	8001884 <_fstat>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	d102      	bne.n	800787c <_fstat_r+0x1c>
 8007876:	682b      	ldr	r3, [r5, #0]
 8007878:	b103      	cbz	r3, 800787c <_fstat_r+0x1c>
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	bd38      	pop	{r3, r4, r5, pc}
 800787e:	bf00      	nop
 8007880:	20000568 	.word	0x20000568

08007884 <_isatty_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	2300      	movs	r3, #0
 8007888:	4d05      	ldr	r5, [pc, #20]	@ (80078a0 <_isatty_r+0x1c>)
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	f7fa f807 	bl	80018a2 <_isatty>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_isatty_r+0x1a>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_isatty_r+0x1a>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20000568 	.word	0x20000568

080078a4 <_init>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr

080078b0 <_fini>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr
