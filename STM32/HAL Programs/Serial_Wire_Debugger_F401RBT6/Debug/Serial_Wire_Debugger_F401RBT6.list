
Serial_Wire_Debugger_F401RBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c00  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001d94  08001d94  00002d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dc8  08001dc8  00003068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001dc8  08001dc8  00002dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dd0  08001dd0  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dd0  08001dd0  00002dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001dd4  08001dd4  00002dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001dd8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08001e40  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001e40  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003808  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fd5  00000000  00000000  000068a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000488  00000000  00000000  00007878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000033d  00000000  00000000  00007d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015aca  00000000  00000000  0000803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000052cb  00000000  00000000  0001db07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084096  00000000  00000000  00022dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016bc  00000000  00000000  000a6eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000a8568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001d7c 	.word	0x08001d7c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08001d7c 	.word	0x08001d7c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000508:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800050c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d013      	beq.n	8000540 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000518:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800051c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000520:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00b      	beq.n	8000540 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000528:	e000      	b.n	800052c <ITM_SendChar+0x2c>
    {
      __NOP();
 800052a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800052c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000536:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	b2d2      	uxtb	r2, r2
 800053e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000540:	687b      	ldr	r3, [r7, #4]
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e009      	b.n	8000574 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffc9 	bl	8000500 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf1      	blt.n	8000560 <_write+0x12>
	}
	return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800058c:	f000 f9ce 	bl	800092c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000590:	f000 f808 	bl	80005a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000594:	f000 f866 	bl	8000664 <MX_GPIO_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		printf("Welcome to Dasari Komal Monitor \n");
 8000598:	4801      	ldr	r0, [pc, #4]	@ (80005a0 <main+0x18>)
 800059a:	f001 f85b 	bl	8001654 <puts>
 800059e:	e7fb      	b.n	8000598 <main+0x10>
 80005a0:	08001d94 	.word	0x08001d94

080005a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f92e 	bl	8001814 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b23      	ldr	r3, [pc, #140]	@ (800065c <SystemClock_Config+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a22      	ldr	r2, [pc, #136]	@ (800065c <SystemClock_Config+0xb8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b20      	ldr	r3, [pc, #128]	@ (800065c <SystemClock_Config+0xb8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <SystemClock_Config+0xbc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <SystemClock_Config+0xbc>)
 80005f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <SystemClock_Config+0xbc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fadf 	bl	8000bdc <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x84>
		Error_Handler();
 8000624:	f000 f862 	bl	80006ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fd42 	bl	80010cc <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xae>
		Error_Handler();
 800064e:	f000 f84d 	bl	80006ec <Error_Handler>
	}
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <MX_GPIO_Init+0x84>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a1d      	ldr	r2, [pc, #116]	@ (80006e8 <MX_GPIO_Init+0x84>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_GPIO_Init+0x84>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <MX_GPIO_Init+0x84>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a16      	ldr	r2, [pc, #88]	@ (80006e8 <MX_GPIO_Init+0x84>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_GPIO_Init+0x84>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_GPIO_Init+0x84>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <MX_GPIO_Init+0x84>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_GPIO_Init+0x84>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_GPIO_Init+0x84>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a08      	ldr	r2, [pc, #32]	@ (80006e8 <MX_GPIO_Init+0x84>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_GPIO_Init+0x84>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000706:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <HAL_MspInit+0x4c>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070c:	6453      	str	r3, [r2, #68]	@ 0x44
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000722:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <HAL_MspInit+0x4c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	@ 0x40
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <NMI_Handler+0x4>

08000750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <MemManage_Handler+0x4>

08000760 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <UsageFault_Handler+0x4>

08000770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079e:	f000 f917 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e00a      	b.n	80007ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007b8:	f3af 8000 	nop.w
 80007bc:	4601      	mov	r1, r0
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	60ba      	str	r2, [r7, #8]
 80007c4:	b2ca      	uxtb	r2, r1
 80007c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbf0      	blt.n	80007b8 <_read+0x12>
  }

  return len;
 80007d6:	687b      	ldr	r3, [r7, #4]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000808:	605a      	str	r2, [r3, #4]
  return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_isatty>:

int _isatty(int file)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800082e:	b480      	push	{r7}
 8000830:	b085      	sub	sp, #20
 8000832:	af00      	add	r7, sp, #0
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000850:	4a14      	ldr	r2, [pc, #80]	@ (80008a4 <_sbrk+0x5c>)
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <_sbrk+0x60>)
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d102      	bne.n	800086a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <_sbrk+0x64>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <_sbrk+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	429a      	cmp	r2, r3
 8000876:	d207      	bcs.n	8000888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000878:	f001 f81a 	bl	80018b0 <__errno>
 800087c:	4603      	mov	r3, r0
 800087e:	220c      	movs	r2, #12
 8000880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	e009      	b.n	800089c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <_sbrk+0x64>)
 8000898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089a:	68fb      	ldr	r3, [r7, #12]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20010000 	.word	0x20010000
 80008a8:	00000400 	.word	0x00000400
 80008ac:	20000084 	.word	0x20000084
 80008b0:	200001d8 	.word	0x200001d8

080008b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <SystemInit+0x20>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008be:	4a05      	ldr	r2, [pc, #20]	@ (80008d4 <SystemInit+0x20>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000910 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008dc:	f7ff ffea 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e2:	490d      	ldr	r1, [pc, #52]	@ (8000918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e4:	4a0d      	ldr	r2, [pc, #52]	@ (800091c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000906:	f000 ffd9 	bl	80018bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090a:	f7ff fe3d 	bl	8000588 <main>
  bx  lr    
 800090e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000910:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800091c:	08001dd8 	.word	0x08001dd8
  ldr r2, =_sbss
 8000920:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000924:	200001d8 	.word	0x200001d8

08000928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000930:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <HAL_Init+0x40>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800093a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <HAL_Init+0x40>)
 8000942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	@ (800096c <HAL_Init+0x40>)
 800094e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f90d 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	200f      	movs	r0, #15
 800095c:	f000 f808 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff feca 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023c00 	.word	0x40023c00

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_InitTick+0x54>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_InitTick+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f917 	bl	8000bc2 <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f8ed 	bl	8000b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	@ (80009cc <HAL_InitTick+0x5c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000088 	.word	0x20000088

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000088 	.word	0x20000088

08000a10 <__NVIC_SetPriorityGrouping>:
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_SetPriority>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	@ (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	@ (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	@ 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	@ 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <SysTick_Config>:
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff8e 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff47 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9c:	f7ff ff5c 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f7ff ff8e 	bl	8000ac8 <NVIC_EncodePriority>
 8000bac:	4602      	mov	r2, r0
 8000bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff5d 	bl	8000a74 <__NVIC_SetPriority>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ffb0 	bl	8000b30 <SysTick_Config>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e267      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d075      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000bfa:	4b88      	ldr	r3, [pc, #544]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d00c      	beq.n	8000c20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c06:	4b85      	ldr	r3, [pc, #532]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d112      	bne.n	8000c38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c12:	4b82      	ldr	r3, [pc, #520]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000c1e:	d10b      	bne.n	8000c38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c20:	4b7e      	ldr	r3, [pc, #504]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d05b      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x108>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d157      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e242      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c40:	d106      	bne.n	8000c50 <HAL_RCC_OscConfig+0x74>
 8000c42:	4b76      	ldr	r3, [pc, #472]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a75      	ldr	r2, [pc, #468]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e01d      	b.n	8000c8c <HAL_RCC_OscConfig+0xb0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x98>
 8000c5a:	4b70      	ldr	r3, [pc, #448]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a6f      	ldr	r2, [pc, #444]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b6d      	ldr	r3, [pc, #436]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a6c      	ldr	r2, [pc, #432]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e00b      	b.n	8000c8c <HAL_RCC_OscConfig+0xb0>
 8000c74:	4b69      	ldr	r3, [pc, #420]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a68      	ldr	r2, [pc, #416]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b66      	ldr	r3, [pc, #408]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a65      	ldr	r2, [pc, #404]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d013      	beq.n	8000cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff feb0 	bl	80009f8 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff feac 	bl	80009f8 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	@ 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e207      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	4b5b      	ldr	r3, [pc, #364]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0xc0>
 8000cba:	e014      	b.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fe9c 	bl	80009f8 <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fe98 	bl	80009f8 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	@ 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1f3      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd6:	4b51      	ldr	r3, [pc, #324]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0xe8>
 8000ce2:	e000      	b.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d063      	beq.n	8000dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cfe:	4b47      	ldr	r3, [pc, #284]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d11c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d0a:	4b44      	ldr	r3, [pc, #272]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d116      	bne.n	8000d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	4b41      	ldr	r3, [pc, #260]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <HAL_RCC_OscConfig+0x152>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e1c7      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4937      	ldr	r1, [pc, #220]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	e03a      	b.n	8000dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d4c:	4b34      	ldr	r3, [pc, #208]	@ (8000e20 <HAL_RCC_OscConfig+0x244>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d52:	f7ff fe51 	bl	80009f8 <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fe4d 	bl	80009f8 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e1a8      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d78:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4925      	ldr	r1, [pc, #148]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e015      	b.n	8000dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8e:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <HAL_RCC_OscConfig+0x244>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d94:	f7ff fe30 	bl	80009f8 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fe2c 	bl	80009f8 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e187      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dae:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d036      	beq.n	8000e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d016      	beq.n	8000dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_RCC_OscConfig+0x248>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fe10 	bl	80009f8 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fe0c 	bl	80009f8 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e167      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_RCC_OscConfig+0x240>)
 8000df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x200>
 8000dfa:	e01b      	b.n	8000e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <HAL_RCC_OscConfig+0x248>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fdf9 	bl	80009f8 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	e00e      	b.n	8000e28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fdf5 	bl	80009f8 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d907      	bls.n	8000e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e150      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	42470000 	.word	0x42470000
 8000e24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e28:	4b88      	ldr	r3, [pc, #544]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1ea      	bne.n	8000e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 8097 	beq.w	8000f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e46:	4b81      	ldr	r3, [pc, #516]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10f      	bne.n	8000e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b7d      	ldr	r3, [pc, #500]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	4a7c      	ldr	r2, [pc, #496]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e62:	4b7a      	ldr	r3, [pc, #488]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e72:	4b77      	ldr	r3, [pc, #476]	@ (8001050 <HAL_RCC_OscConfig+0x474>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d118      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7e:	4b74      	ldr	r3, [pc, #464]	@ (8001050 <HAL_RCC_OscConfig+0x474>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a73      	ldr	r2, [pc, #460]	@ (8001050 <HAL_RCC_OscConfig+0x474>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fdb5 	bl	80009f8 <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e92:	f7ff fdb1 	bl	80009f8 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e10c      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	4b6a      	ldr	r3, [pc, #424]	@ (8001050 <HAL_RCC_OscConfig+0x474>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f0      	beq.n	8000e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d106      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x2ea>
 8000eb8:	4b64      	ldr	r3, [pc, #400]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ebc:	4a63      	ldr	r2, [pc, #396]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ec4:	e01c      	b.n	8000f00 <HAL_RCC_OscConfig+0x324>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x30c>
 8000ece:	4b5f      	ldr	r3, [pc, #380]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8000eda:	4b5c      	ldr	r3, [pc, #368]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ede:	4a5b      	ldr	r2, [pc, #364]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ee6:	e00b      	b.n	8000f00 <HAL_RCC_OscConfig+0x324>
 8000ee8:	4b58      	ldr	r3, [pc, #352]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eec:	4a57      	ldr	r2, [pc, #348]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ef4:	4b55      	ldr	r3, [pc, #340]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ef8:	4a54      	ldr	r2, [pc, #336]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000efa:	f023 0304 	bic.w	r3, r3, #4
 8000efe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d015      	beq.n	8000f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f08:	f7ff fd76 	bl	80009f8 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0e:	e00a      	b.n	8000f26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f10:	f7ff fd72 	bl	80009f8 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e0cb      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f26:	4b49      	ldr	r3, [pc, #292]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0ee      	beq.n	8000f10 <HAL_RCC_OscConfig+0x334>
 8000f32:	e014      	b.n	8000f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f34:	f7ff fd60 	bl	80009f8 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3a:	e00a      	b.n	8000f52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fd5c 	bl	80009f8 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e0b5      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f52:	4b3e      	ldr	r3, [pc, #248]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1ee      	bne.n	8000f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d105      	bne.n	8000f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f64:	4b39      	ldr	r3, [pc, #228]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	4a38      	ldr	r2, [pc, #224]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a1 	beq.w	80010bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f7a:	4b34      	ldr	r3, [pc, #208]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d05c      	beq.n	8001040 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d141      	bne.n	8001012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8e:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <HAL_RCC_OscConfig+0x478>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fd30 	bl	80009f8 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9c:	f7ff fd2c 	bl	80009f8 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e087      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fae:	4b27      	ldr	r3, [pc, #156]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69da      	ldr	r2, [r3, #28]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd0:	085b      	lsrs	r3, r3, #1
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	041b      	lsls	r3, r3, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fdc:	061b      	lsls	r3, r3, #24
 8000fde:	491b      	ldr	r1, [pc, #108]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_RCC_OscConfig+0x478>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fd05 	bl	80009f8 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff2:	f7ff fd01 	bl	80009f8 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e05c      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x416>
 8001010:	e054      	b.n	80010bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <HAL_RCC_OscConfig+0x478>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fcee 	bl	80009f8 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff fcea 	bl	80009f8 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e045      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_RCC_OscConfig+0x470>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x444>
 800103e:	e03d      	b.n	80010bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d107      	bne.n	8001058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e038      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000
 8001054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <HAL_RCC_OscConfig+0x4ec>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d028      	beq.n	80010b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001070:	429a      	cmp	r2, r3
 8001072:	d121      	bne.n	80010b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	429a      	cmp	r2, r3
 8001080:	d11a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001088:	4013      	ands	r3, r2
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800108e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001090:	4293      	cmp	r3, r2
 8001092:	d111      	bne.n	80010b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	3b01      	subs	r3, #1
 80010a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d107      	bne.n	80010b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d001      	beq.n	80010bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0cc      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010e0:	4b68      	ldr	r3, [pc, #416]	@ (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d90c      	bls.n	8001108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	4b65      	ldr	r3, [pc, #404]	@ (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f6:	4b63      	ldr	r3, [pc, #396]	@ (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0b8      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d020      	beq.n	8001156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001120:	4b59      	ldr	r3, [pc, #356]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	4a58      	ldr	r2, [pc, #352]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800112a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001138:	4b53      	ldr	r3, [pc, #332]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a52      	ldr	r2, [pc, #328]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001144:	4b50      	ldr	r3, [pc, #320]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	494d      	ldr	r1, [pc, #308]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	4313      	orrs	r3, r2
 8001154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d044      	beq.n	80011ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b47      	ldr	r3, [pc, #284]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d119      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e07f      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d003      	beq.n	800118a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001186:	2b03      	cmp	r3, #3
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118a:	4b3f      	ldr	r3, [pc, #252]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e06f      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e067      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011aa:	4b37      	ldr	r3, [pc, #220]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f023 0203 	bic.w	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4934      	ldr	r1, [pc, #208]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011bc:	f7ff fc1c 	bl	80009f8 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c2:	e00a      	b.n	80011da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c4:	f7ff fc18 	bl	80009f8 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e04f      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011da:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 020c 	and.w	r2, r3, #12
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d1eb      	bne.n	80011c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ec:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d20c      	bcs.n	8001214 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d001      	beq.n	8001214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e032      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4916      	ldr	r1, [pc, #88]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	4313      	orrs	r3, r2
 8001230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	490e      	ldr	r1, [pc, #56]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	4313      	orrs	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001252:	f000 f821 	bl	8001298 <HAL_RCC_GetSysClockFreq>
 8001256:	4602      	mov	r2, r0
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	490a      	ldr	r1, [pc, #40]	@ (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	5ccb      	ldrb	r3, [r1, r3]
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	4a09      	ldr	r2, [pc, #36]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_RCC_ClockConfig+0x1c8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fb7c 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023c00 	.word	0x40023c00
 8001288:	40023800 	.word	0x40023800
 800128c:	08001db8 	.word	0x08001db8
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800129c:	b090      	sub	sp, #64	@ 0x40
 800129e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012b0:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <HAL_RCC_GetSysClockFreq+0x180>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d00d      	beq.n	80012d8 <HAL_RCC_GetSysClockFreq+0x40>
 80012bc:	2b08      	cmp	r3, #8
 80012be:	f200 80a1 	bhi.w	8001404 <HAL_RCC_GetSysClockFreq+0x16c>
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <HAL_RCC_GetSysClockFreq+0x34>
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d003      	beq.n	80012d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80012ca:	e09b      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012cc:	4b53      	ldr	r3, [pc, #332]	@ (800141c <HAL_RCC_GetSysClockFreq+0x184>)
 80012ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80012d0:	e09b      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012d2:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <HAL_RCC_GetSysClockFreq+0x188>)
 80012d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80012d6:	e098      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001418 <HAL_RCC_GetSysClockFreq+0x180>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001418 <HAL_RCC_GetSysClockFreq+0x180>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d028      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001418 <HAL_RCC_GetSysClockFreq+0x180>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	099b      	lsrs	r3, r3, #6
 80012f4:	2200      	movs	r2, #0
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001300:	2100      	movs	r1, #0
 8001302:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <HAL_RCC_GetSysClockFreq+0x188>)
 8001304:	fb03 f201 	mul.w	r2, r3, r1
 8001308:	2300      	movs	r3, #0
 800130a:	fb00 f303 	mul.w	r3, r0, r3
 800130e:	4413      	add	r3, r2
 8001310:	4a43      	ldr	r2, [pc, #268]	@ (8001420 <HAL_RCC_GetSysClockFreq+0x188>)
 8001312:	fba0 1202 	umull	r1, r2, r0, r2
 8001316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001318:	460a      	mov	r2, r1
 800131a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800131c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800131e:	4413      	add	r3, r2
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001324:	2200      	movs	r2, #0
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	61fa      	str	r2, [r7, #28]
 800132a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800132e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001332:	f7fe ff4f 	bl	80001d4 <__aeabi_uldivmod>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4613      	mov	r3, r2
 800133c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800133e:	e053      	b.n	80013e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001340:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <HAL_RCC_GetSysClockFreq+0x180>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	099b      	lsrs	r3, r3, #6
 8001346:	2200      	movs	r2, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	617a      	str	r2, [r7, #20]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001352:	f04f 0b00 	mov.w	fp, #0
 8001356:	4652      	mov	r2, sl
 8001358:	465b      	mov	r3, fp
 800135a:	f04f 0000 	mov.w	r0, #0
 800135e:	f04f 0100 	mov.w	r1, #0
 8001362:	0159      	lsls	r1, r3, #5
 8001364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001368:	0150      	lsls	r0, r2, #5
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	ebb2 080a 	subs.w	r8, r2, sl
 8001372:	eb63 090b 	sbc.w	r9, r3, fp
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001382:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001386:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800138a:	ebb2 0408 	subs.w	r4, r2, r8
 800138e:	eb63 0509 	sbc.w	r5, r3, r9
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	00eb      	lsls	r3, r5, #3
 800139c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013a0:	00e2      	lsls	r2, r4, #3
 80013a2:	4614      	mov	r4, r2
 80013a4:	461d      	mov	r5, r3
 80013a6:	eb14 030a 	adds.w	r3, r4, sl
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	eb45 030b 	adc.w	r3, r5, fp
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013be:	4629      	mov	r1, r5
 80013c0:	028b      	lsls	r3, r1, #10
 80013c2:	4621      	mov	r1, r4
 80013c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013c8:	4621      	mov	r1, r4
 80013ca:	028a      	lsls	r2, r1, #10
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013d2:	2200      	movs	r2, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	60fa      	str	r2, [r7, #12]
 80013d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013dc:	f7fe fefa 	bl	80001d4 <__aeabi_uldivmod>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4613      	mov	r3, r2
 80013e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_RCC_GetSysClockFreq+0x180>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	0c1b      	lsrs	r3, r3, #16
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	3301      	adds	r3, #1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80013f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001400:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001402:	e002      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <HAL_RCC_GetSysClockFreq+0x184>)
 8001406:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800140a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800140c:	4618      	mov	r0, r3
 800140e:	3740      	adds	r7, #64	@ 0x40
 8001410:	46bd      	mov	sp, r7
 8001412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	00f42400 	.word	0x00f42400
 8001420:	017d7840 	.word	0x017d7840

08001424 <std>:
 8001424:	2300      	movs	r3, #0
 8001426:	b510      	push	{r4, lr}
 8001428:	4604      	mov	r4, r0
 800142a:	e9c0 3300 	strd	r3, r3, [r0]
 800142e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001432:	6083      	str	r3, [r0, #8]
 8001434:	8181      	strh	r1, [r0, #12]
 8001436:	6643      	str	r3, [r0, #100]	@ 0x64
 8001438:	81c2      	strh	r2, [r0, #14]
 800143a:	6183      	str	r3, [r0, #24]
 800143c:	4619      	mov	r1, r3
 800143e:	2208      	movs	r2, #8
 8001440:	305c      	adds	r0, #92	@ 0x5c
 8001442:	f000 f9e7 	bl	8001814 <memset>
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <std+0x58>)
 8001448:	6263      	str	r3, [r4, #36]	@ 0x24
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <std+0x5c>)
 800144c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <std+0x60>)
 8001450:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <std+0x64>)
 8001454:	6323      	str	r3, [r4, #48]	@ 0x30
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <std+0x68>)
 8001458:	6224      	str	r4, [r4, #32]
 800145a:	429c      	cmp	r4, r3
 800145c:	d006      	beq.n	800146c <std+0x48>
 800145e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001462:	4294      	cmp	r4, r2
 8001464:	d002      	beq.n	800146c <std+0x48>
 8001466:	33d0      	adds	r3, #208	@ 0xd0
 8001468:	429c      	cmp	r4, r3
 800146a:	d105      	bne.n	8001478 <std+0x54>
 800146c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001474:	f000 ba46 	b.w	8001904 <__retarget_lock_init_recursive>
 8001478:	bd10      	pop	{r4, pc}
 800147a:	bf00      	nop
 800147c:	08001665 	.word	0x08001665
 8001480:	08001687 	.word	0x08001687
 8001484:	080016bf 	.word	0x080016bf
 8001488:	080016e3 	.word	0x080016e3
 800148c:	2000008c 	.word	0x2000008c

08001490 <stdio_exit_handler>:
 8001490:	4a02      	ldr	r2, [pc, #8]	@ (800149c <stdio_exit_handler+0xc>)
 8001492:	4903      	ldr	r1, [pc, #12]	@ (80014a0 <stdio_exit_handler+0x10>)
 8001494:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <stdio_exit_handler+0x14>)
 8001496:	f000 b869 	b.w	800156c <_fwalk_sglue>
 800149a:	bf00      	nop
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	08001c05 	.word	0x08001c05
 80014a4:	2000001c 	.word	0x2000001c

080014a8 <cleanup_stdio>:
 80014a8:	6841      	ldr	r1, [r0, #4]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <cleanup_stdio+0x34>)
 80014ac:	4299      	cmp	r1, r3
 80014ae:	b510      	push	{r4, lr}
 80014b0:	4604      	mov	r4, r0
 80014b2:	d001      	beq.n	80014b8 <cleanup_stdio+0x10>
 80014b4:	f000 fba6 	bl	8001c04 <_fflush_r>
 80014b8:	68a1      	ldr	r1, [r4, #8]
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <cleanup_stdio+0x38>)
 80014bc:	4299      	cmp	r1, r3
 80014be:	d002      	beq.n	80014c6 <cleanup_stdio+0x1e>
 80014c0:	4620      	mov	r0, r4
 80014c2:	f000 fb9f 	bl	8001c04 <_fflush_r>
 80014c6:	68e1      	ldr	r1, [r4, #12]
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <cleanup_stdio+0x3c>)
 80014ca:	4299      	cmp	r1, r3
 80014cc:	d004      	beq.n	80014d8 <cleanup_stdio+0x30>
 80014ce:	4620      	mov	r0, r4
 80014d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014d4:	f000 bb96 	b.w	8001c04 <_fflush_r>
 80014d8:	bd10      	pop	{r4, pc}
 80014da:	bf00      	nop
 80014dc:	2000008c 	.word	0x2000008c
 80014e0:	200000f4 	.word	0x200000f4
 80014e4:	2000015c 	.word	0x2000015c

080014e8 <global_stdio_init.part.0>:
 80014e8:	b510      	push	{r4, lr}
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <global_stdio_init.part.0+0x30>)
 80014ec:	4c0b      	ldr	r4, [pc, #44]	@ (800151c <global_stdio_init.part.0+0x34>)
 80014ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <global_stdio_init.part.0+0x38>)
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	4620      	mov	r0, r4
 80014f4:	2200      	movs	r2, #0
 80014f6:	2104      	movs	r1, #4
 80014f8:	f7ff ff94 	bl	8001424 <std>
 80014fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001500:	2201      	movs	r2, #1
 8001502:	2109      	movs	r1, #9
 8001504:	f7ff ff8e 	bl	8001424 <std>
 8001508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800150c:	2202      	movs	r2, #2
 800150e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001512:	2112      	movs	r1, #18
 8001514:	f7ff bf86 	b.w	8001424 <std>
 8001518:	200001c4 	.word	0x200001c4
 800151c:	2000008c 	.word	0x2000008c
 8001520:	08001491 	.word	0x08001491

08001524 <__sfp_lock_acquire>:
 8001524:	4801      	ldr	r0, [pc, #4]	@ (800152c <__sfp_lock_acquire+0x8>)
 8001526:	f000 b9ee 	b.w	8001906 <__retarget_lock_acquire_recursive>
 800152a:	bf00      	nop
 800152c:	200001cd 	.word	0x200001cd

08001530 <__sfp_lock_release>:
 8001530:	4801      	ldr	r0, [pc, #4]	@ (8001538 <__sfp_lock_release+0x8>)
 8001532:	f000 b9e9 	b.w	8001908 <__retarget_lock_release_recursive>
 8001536:	bf00      	nop
 8001538:	200001cd 	.word	0x200001cd

0800153c <__sinit>:
 800153c:	b510      	push	{r4, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	f7ff fff0 	bl	8001524 <__sfp_lock_acquire>
 8001544:	6a23      	ldr	r3, [r4, #32]
 8001546:	b11b      	cbz	r3, 8001550 <__sinit+0x14>
 8001548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800154c:	f7ff bff0 	b.w	8001530 <__sfp_lock_release>
 8001550:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <__sinit+0x28>)
 8001552:	6223      	str	r3, [r4, #32]
 8001554:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <__sinit+0x2c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f5      	bne.n	8001548 <__sinit+0xc>
 800155c:	f7ff ffc4 	bl	80014e8 <global_stdio_init.part.0>
 8001560:	e7f2      	b.n	8001548 <__sinit+0xc>
 8001562:	bf00      	nop
 8001564:	080014a9 	.word	0x080014a9
 8001568:	200001c4 	.word	0x200001c4

0800156c <_fwalk_sglue>:
 800156c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001570:	4607      	mov	r7, r0
 8001572:	4688      	mov	r8, r1
 8001574:	4614      	mov	r4, r2
 8001576:	2600      	movs	r6, #0
 8001578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800157c:	f1b9 0901 	subs.w	r9, r9, #1
 8001580:	d505      	bpl.n	800158e <_fwalk_sglue+0x22>
 8001582:	6824      	ldr	r4, [r4, #0]
 8001584:	2c00      	cmp	r4, #0
 8001586:	d1f7      	bne.n	8001578 <_fwalk_sglue+0xc>
 8001588:	4630      	mov	r0, r6
 800158a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800158e:	89ab      	ldrh	r3, [r5, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d907      	bls.n	80015a4 <_fwalk_sglue+0x38>
 8001594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001598:	3301      	adds	r3, #1
 800159a:	d003      	beq.n	80015a4 <_fwalk_sglue+0x38>
 800159c:	4629      	mov	r1, r5
 800159e:	4638      	mov	r0, r7
 80015a0:	47c0      	blx	r8
 80015a2:	4306      	orrs	r6, r0
 80015a4:	3568      	adds	r5, #104	@ 0x68
 80015a6:	e7e9      	b.n	800157c <_fwalk_sglue+0x10>

080015a8 <_puts_r>:
 80015a8:	6a03      	ldr	r3, [r0, #32]
 80015aa:	b570      	push	{r4, r5, r6, lr}
 80015ac:	6884      	ldr	r4, [r0, #8]
 80015ae:	4605      	mov	r5, r0
 80015b0:	460e      	mov	r6, r1
 80015b2:	b90b      	cbnz	r3, 80015b8 <_puts_r+0x10>
 80015b4:	f7ff ffc2 	bl	800153c <__sinit>
 80015b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015ba:	07db      	lsls	r3, r3, #31
 80015bc:	d405      	bmi.n	80015ca <_puts_r+0x22>
 80015be:	89a3      	ldrh	r3, [r4, #12]
 80015c0:	0598      	lsls	r0, r3, #22
 80015c2:	d402      	bmi.n	80015ca <_puts_r+0x22>
 80015c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015c6:	f000 f99e 	bl	8001906 <__retarget_lock_acquire_recursive>
 80015ca:	89a3      	ldrh	r3, [r4, #12]
 80015cc:	0719      	lsls	r1, r3, #28
 80015ce:	d502      	bpl.n	80015d6 <_puts_r+0x2e>
 80015d0:	6923      	ldr	r3, [r4, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d135      	bne.n	8001642 <_puts_r+0x9a>
 80015d6:	4621      	mov	r1, r4
 80015d8:	4628      	mov	r0, r5
 80015da:	f000 f8c5 	bl	8001768 <__swsetup_r>
 80015de:	b380      	cbz	r0, 8001642 <_puts_r+0x9a>
 80015e0:	f04f 35ff 	mov.w	r5, #4294967295
 80015e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015e6:	07da      	lsls	r2, r3, #31
 80015e8:	d405      	bmi.n	80015f6 <_puts_r+0x4e>
 80015ea:	89a3      	ldrh	r3, [r4, #12]
 80015ec:	059b      	lsls	r3, r3, #22
 80015ee:	d402      	bmi.n	80015f6 <_puts_r+0x4e>
 80015f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015f2:	f000 f989 	bl	8001908 <__retarget_lock_release_recursive>
 80015f6:	4628      	mov	r0, r5
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da04      	bge.n	8001608 <_puts_r+0x60>
 80015fe:	69a2      	ldr	r2, [r4, #24]
 8001600:	429a      	cmp	r2, r3
 8001602:	dc17      	bgt.n	8001634 <_puts_r+0x8c>
 8001604:	290a      	cmp	r1, #10
 8001606:	d015      	beq.n	8001634 <_puts_r+0x8c>
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	6022      	str	r2, [r4, #0]
 800160e:	7019      	strb	r1, [r3, #0]
 8001610:	68a3      	ldr	r3, [r4, #8]
 8001612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001616:	3b01      	subs	r3, #1
 8001618:	60a3      	str	r3, [r4, #8]
 800161a:	2900      	cmp	r1, #0
 800161c:	d1ed      	bne.n	80015fa <_puts_r+0x52>
 800161e:	2b00      	cmp	r3, #0
 8001620:	da11      	bge.n	8001646 <_puts_r+0x9e>
 8001622:	4622      	mov	r2, r4
 8001624:	210a      	movs	r1, #10
 8001626:	4628      	mov	r0, r5
 8001628:	f000 f85f 	bl	80016ea <__swbuf_r>
 800162c:	3001      	adds	r0, #1
 800162e:	d0d7      	beq.n	80015e0 <_puts_r+0x38>
 8001630:	250a      	movs	r5, #10
 8001632:	e7d7      	b.n	80015e4 <_puts_r+0x3c>
 8001634:	4622      	mov	r2, r4
 8001636:	4628      	mov	r0, r5
 8001638:	f000 f857 	bl	80016ea <__swbuf_r>
 800163c:	3001      	adds	r0, #1
 800163e:	d1e7      	bne.n	8001610 <_puts_r+0x68>
 8001640:	e7ce      	b.n	80015e0 <_puts_r+0x38>
 8001642:	3e01      	subs	r6, #1
 8001644:	e7e4      	b.n	8001610 <_puts_r+0x68>
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	6022      	str	r2, [r4, #0]
 800164c:	220a      	movs	r2, #10
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e7ee      	b.n	8001630 <_puts_r+0x88>
	...

08001654 <puts>:
 8001654:	4b02      	ldr	r3, [pc, #8]	@ (8001660 <puts+0xc>)
 8001656:	4601      	mov	r1, r0
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	f7ff bfa5 	b.w	80015a8 <_puts_r>
 800165e:	bf00      	nop
 8001660:	20000018 	.word	0x20000018

08001664 <__sread>:
 8001664:	b510      	push	{r4, lr}
 8001666:	460c      	mov	r4, r1
 8001668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800166c:	f000 f8fc 	bl	8001868 <_read_r>
 8001670:	2800      	cmp	r0, #0
 8001672:	bfab      	itete	ge
 8001674:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001676:	89a3      	ldrhlt	r3, [r4, #12]
 8001678:	181b      	addge	r3, r3, r0
 800167a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800167e:	bfac      	ite	ge
 8001680:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001682:	81a3      	strhlt	r3, [r4, #12]
 8001684:	bd10      	pop	{r4, pc}

08001686 <__swrite>:
 8001686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800168a:	461f      	mov	r7, r3
 800168c:	898b      	ldrh	r3, [r1, #12]
 800168e:	05db      	lsls	r3, r3, #23
 8001690:	4605      	mov	r5, r0
 8001692:	460c      	mov	r4, r1
 8001694:	4616      	mov	r6, r2
 8001696:	d505      	bpl.n	80016a4 <__swrite+0x1e>
 8001698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800169c:	2302      	movs	r3, #2
 800169e:	2200      	movs	r2, #0
 80016a0:	f000 f8d0 	bl	8001844 <_lseek_r>
 80016a4:	89a3      	ldrh	r3, [r4, #12]
 80016a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016ae:	81a3      	strh	r3, [r4, #12]
 80016b0:	4632      	mov	r2, r6
 80016b2:	463b      	mov	r3, r7
 80016b4:	4628      	mov	r0, r5
 80016b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016ba:	f000 b8e7 	b.w	800188c <_write_r>

080016be <__sseek>:
 80016be:	b510      	push	{r4, lr}
 80016c0:	460c      	mov	r4, r1
 80016c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016c6:	f000 f8bd 	bl	8001844 <_lseek_r>
 80016ca:	1c43      	adds	r3, r0, #1
 80016cc:	89a3      	ldrh	r3, [r4, #12]
 80016ce:	bf15      	itete	ne
 80016d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80016d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80016d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80016da:	81a3      	strheq	r3, [r4, #12]
 80016dc:	bf18      	it	ne
 80016de:	81a3      	strhne	r3, [r4, #12]
 80016e0:	bd10      	pop	{r4, pc}

080016e2 <__sclose>:
 80016e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e6:	f000 b89d 	b.w	8001824 <_close_r>

080016ea <__swbuf_r>:
 80016ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ec:	460e      	mov	r6, r1
 80016ee:	4614      	mov	r4, r2
 80016f0:	4605      	mov	r5, r0
 80016f2:	b118      	cbz	r0, 80016fc <__swbuf_r+0x12>
 80016f4:	6a03      	ldr	r3, [r0, #32]
 80016f6:	b90b      	cbnz	r3, 80016fc <__swbuf_r+0x12>
 80016f8:	f7ff ff20 	bl	800153c <__sinit>
 80016fc:	69a3      	ldr	r3, [r4, #24]
 80016fe:	60a3      	str	r3, [r4, #8]
 8001700:	89a3      	ldrh	r3, [r4, #12]
 8001702:	071a      	lsls	r2, r3, #28
 8001704:	d501      	bpl.n	800170a <__swbuf_r+0x20>
 8001706:	6923      	ldr	r3, [r4, #16]
 8001708:	b943      	cbnz	r3, 800171c <__swbuf_r+0x32>
 800170a:	4621      	mov	r1, r4
 800170c:	4628      	mov	r0, r5
 800170e:	f000 f82b 	bl	8001768 <__swsetup_r>
 8001712:	b118      	cbz	r0, 800171c <__swbuf_r+0x32>
 8001714:	f04f 37ff 	mov.w	r7, #4294967295
 8001718:	4638      	mov	r0, r7
 800171a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	6922      	ldr	r2, [r4, #16]
 8001720:	1a98      	subs	r0, r3, r2
 8001722:	6963      	ldr	r3, [r4, #20]
 8001724:	b2f6      	uxtb	r6, r6
 8001726:	4283      	cmp	r3, r0
 8001728:	4637      	mov	r7, r6
 800172a:	dc05      	bgt.n	8001738 <__swbuf_r+0x4e>
 800172c:	4621      	mov	r1, r4
 800172e:	4628      	mov	r0, r5
 8001730:	f000 fa68 	bl	8001c04 <_fflush_r>
 8001734:	2800      	cmp	r0, #0
 8001736:	d1ed      	bne.n	8001714 <__swbuf_r+0x2a>
 8001738:	68a3      	ldr	r3, [r4, #8]
 800173a:	3b01      	subs	r3, #1
 800173c:	60a3      	str	r3, [r4, #8]
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	6022      	str	r2, [r4, #0]
 8001744:	701e      	strb	r6, [r3, #0]
 8001746:	6962      	ldr	r2, [r4, #20]
 8001748:	1c43      	adds	r3, r0, #1
 800174a:	429a      	cmp	r2, r3
 800174c:	d004      	beq.n	8001758 <__swbuf_r+0x6e>
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	07db      	lsls	r3, r3, #31
 8001752:	d5e1      	bpl.n	8001718 <__swbuf_r+0x2e>
 8001754:	2e0a      	cmp	r6, #10
 8001756:	d1df      	bne.n	8001718 <__swbuf_r+0x2e>
 8001758:	4621      	mov	r1, r4
 800175a:	4628      	mov	r0, r5
 800175c:	f000 fa52 	bl	8001c04 <_fflush_r>
 8001760:	2800      	cmp	r0, #0
 8001762:	d0d9      	beq.n	8001718 <__swbuf_r+0x2e>
 8001764:	e7d6      	b.n	8001714 <__swbuf_r+0x2a>
	...

08001768 <__swsetup_r>:
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	4b29      	ldr	r3, [pc, #164]	@ (8001810 <__swsetup_r+0xa8>)
 800176c:	4605      	mov	r5, r0
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	460c      	mov	r4, r1
 8001772:	b118      	cbz	r0, 800177c <__swsetup_r+0x14>
 8001774:	6a03      	ldr	r3, [r0, #32]
 8001776:	b90b      	cbnz	r3, 800177c <__swsetup_r+0x14>
 8001778:	f7ff fee0 	bl	800153c <__sinit>
 800177c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001780:	0719      	lsls	r1, r3, #28
 8001782:	d422      	bmi.n	80017ca <__swsetup_r+0x62>
 8001784:	06da      	lsls	r2, r3, #27
 8001786:	d407      	bmi.n	8001798 <__swsetup_r+0x30>
 8001788:	2209      	movs	r2, #9
 800178a:	602a      	str	r2, [r5, #0]
 800178c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	f04f 30ff 	mov.w	r0, #4294967295
 8001796:	e033      	b.n	8001800 <__swsetup_r+0x98>
 8001798:	0758      	lsls	r0, r3, #29
 800179a:	d512      	bpl.n	80017c2 <__swsetup_r+0x5a>
 800179c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800179e:	b141      	cbz	r1, 80017b2 <__swsetup_r+0x4a>
 80017a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80017a4:	4299      	cmp	r1, r3
 80017a6:	d002      	beq.n	80017ae <__swsetup_r+0x46>
 80017a8:	4628      	mov	r0, r5
 80017aa:	f000 f8af 	bl	800190c <_free_r>
 80017ae:	2300      	movs	r3, #0
 80017b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80017b2:	89a3      	ldrh	r3, [r4, #12]
 80017b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80017b8:	81a3      	strh	r3, [r4, #12]
 80017ba:	2300      	movs	r3, #0
 80017bc:	6063      	str	r3, [r4, #4]
 80017be:	6923      	ldr	r3, [r4, #16]
 80017c0:	6023      	str	r3, [r4, #0]
 80017c2:	89a3      	ldrh	r3, [r4, #12]
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	81a3      	strh	r3, [r4, #12]
 80017ca:	6923      	ldr	r3, [r4, #16]
 80017cc:	b94b      	cbnz	r3, 80017e2 <__swsetup_r+0x7a>
 80017ce:	89a3      	ldrh	r3, [r4, #12]
 80017d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80017d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017d8:	d003      	beq.n	80017e2 <__swsetup_r+0x7a>
 80017da:	4621      	mov	r1, r4
 80017dc:	4628      	mov	r0, r5
 80017de:	f000 fa5f 	bl	8001ca0 <__smakebuf_r>
 80017e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e6:	f013 0201 	ands.w	r2, r3, #1
 80017ea:	d00a      	beq.n	8001802 <__swsetup_r+0x9a>
 80017ec:	2200      	movs	r2, #0
 80017ee:	60a2      	str	r2, [r4, #8]
 80017f0:	6962      	ldr	r2, [r4, #20]
 80017f2:	4252      	negs	r2, r2
 80017f4:	61a2      	str	r2, [r4, #24]
 80017f6:	6922      	ldr	r2, [r4, #16]
 80017f8:	b942      	cbnz	r2, 800180c <__swsetup_r+0xa4>
 80017fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80017fe:	d1c5      	bne.n	800178c <__swsetup_r+0x24>
 8001800:	bd38      	pop	{r3, r4, r5, pc}
 8001802:	0799      	lsls	r1, r3, #30
 8001804:	bf58      	it	pl
 8001806:	6962      	ldrpl	r2, [r4, #20]
 8001808:	60a2      	str	r2, [r4, #8]
 800180a:	e7f4      	b.n	80017f6 <__swsetup_r+0x8e>
 800180c:	2000      	movs	r0, #0
 800180e:	e7f7      	b.n	8001800 <__swsetup_r+0x98>
 8001810:	20000018 	.word	0x20000018

08001814 <memset>:
 8001814:	4402      	add	r2, r0
 8001816:	4603      	mov	r3, r0
 8001818:	4293      	cmp	r3, r2
 800181a:	d100      	bne.n	800181e <memset+0xa>
 800181c:	4770      	bx	lr
 800181e:	f803 1b01 	strb.w	r1, [r3], #1
 8001822:	e7f9      	b.n	8001818 <memset+0x4>

08001824 <_close_r>:
 8001824:	b538      	push	{r3, r4, r5, lr}
 8001826:	4d06      	ldr	r5, [pc, #24]	@ (8001840 <_close_r+0x1c>)
 8001828:	2300      	movs	r3, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	602b      	str	r3, [r5, #0]
 8001830:	f7fe ffd6 	bl	80007e0 <_close>
 8001834:	1c43      	adds	r3, r0, #1
 8001836:	d102      	bne.n	800183e <_close_r+0x1a>
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	b103      	cbz	r3, 800183e <_close_r+0x1a>
 800183c:	6023      	str	r3, [r4, #0]
 800183e:	bd38      	pop	{r3, r4, r5, pc}
 8001840:	200001c8 	.word	0x200001c8

08001844 <_lseek_r>:
 8001844:	b538      	push	{r3, r4, r5, lr}
 8001846:	4d07      	ldr	r5, [pc, #28]	@ (8001864 <_lseek_r+0x20>)
 8001848:	4604      	mov	r4, r0
 800184a:	4608      	mov	r0, r1
 800184c:	4611      	mov	r1, r2
 800184e:	2200      	movs	r2, #0
 8001850:	602a      	str	r2, [r5, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	f7fe ffeb 	bl	800082e <_lseek>
 8001858:	1c43      	adds	r3, r0, #1
 800185a:	d102      	bne.n	8001862 <_lseek_r+0x1e>
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	b103      	cbz	r3, 8001862 <_lseek_r+0x1e>
 8001860:	6023      	str	r3, [r4, #0]
 8001862:	bd38      	pop	{r3, r4, r5, pc}
 8001864:	200001c8 	.word	0x200001c8

08001868 <_read_r>:
 8001868:	b538      	push	{r3, r4, r5, lr}
 800186a:	4d07      	ldr	r5, [pc, #28]	@ (8001888 <_read_r+0x20>)
 800186c:	4604      	mov	r4, r0
 800186e:	4608      	mov	r0, r1
 8001870:	4611      	mov	r1, r2
 8001872:	2200      	movs	r2, #0
 8001874:	602a      	str	r2, [r5, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	f7fe ff95 	bl	80007a6 <_read>
 800187c:	1c43      	adds	r3, r0, #1
 800187e:	d102      	bne.n	8001886 <_read_r+0x1e>
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	b103      	cbz	r3, 8001886 <_read_r+0x1e>
 8001884:	6023      	str	r3, [r4, #0]
 8001886:	bd38      	pop	{r3, r4, r5, pc}
 8001888:	200001c8 	.word	0x200001c8

0800188c <_write_r>:
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	4d07      	ldr	r5, [pc, #28]	@ (80018ac <_write_r+0x20>)
 8001890:	4604      	mov	r4, r0
 8001892:	4608      	mov	r0, r1
 8001894:	4611      	mov	r1, r2
 8001896:	2200      	movs	r2, #0
 8001898:	602a      	str	r2, [r5, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	f7fe fe57 	bl	800054e <_write>
 80018a0:	1c43      	adds	r3, r0, #1
 80018a2:	d102      	bne.n	80018aa <_write_r+0x1e>
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	b103      	cbz	r3, 80018aa <_write_r+0x1e>
 80018a8:	6023      	str	r3, [r4, #0]
 80018aa:	bd38      	pop	{r3, r4, r5, pc}
 80018ac:	200001c8 	.word	0x200001c8

080018b0 <__errno>:
 80018b0:	4b01      	ldr	r3, [pc, #4]	@ (80018b8 <__errno+0x8>)
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000018 	.word	0x20000018

080018bc <__libc_init_array>:
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	4d0d      	ldr	r5, [pc, #52]	@ (80018f4 <__libc_init_array+0x38>)
 80018c0:	4c0d      	ldr	r4, [pc, #52]	@ (80018f8 <__libc_init_array+0x3c>)
 80018c2:	1b64      	subs	r4, r4, r5
 80018c4:	10a4      	asrs	r4, r4, #2
 80018c6:	2600      	movs	r6, #0
 80018c8:	42a6      	cmp	r6, r4
 80018ca:	d109      	bne.n	80018e0 <__libc_init_array+0x24>
 80018cc:	4d0b      	ldr	r5, [pc, #44]	@ (80018fc <__libc_init_array+0x40>)
 80018ce:	4c0c      	ldr	r4, [pc, #48]	@ (8001900 <__libc_init_array+0x44>)
 80018d0:	f000 fa54 	bl	8001d7c <_init>
 80018d4:	1b64      	subs	r4, r4, r5
 80018d6:	10a4      	asrs	r4, r4, #2
 80018d8:	2600      	movs	r6, #0
 80018da:	42a6      	cmp	r6, r4
 80018dc:	d105      	bne.n	80018ea <__libc_init_array+0x2e>
 80018de:	bd70      	pop	{r4, r5, r6, pc}
 80018e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e4:	4798      	blx	r3
 80018e6:	3601      	adds	r6, #1
 80018e8:	e7ee      	b.n	80018c8 <__libc_init_array+0xc>
 80018ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ee:	4798      	blx	r3
 80018f0:	3601      	adds	r6, #1
 80018f2:	e7f2      	b.n	80018da <__libc_init_array+0x1e>
 80018f4:	08001dd0 	.word	0x08001dd0
 80018f8:	08001dd0 	.word	0x08001dd0
 80018fc:	08001dd0 	.word	0x08001dd0
 8001900:	08001dd4 	.word	0x08001dd4

08001904 <__retarget_lock_init_recursive>:
 8001904:	4770      	bx	lr

08001906 <__retarget_lock_acquire_recursive>:
 8001906:	4770      	bx	lr

08001908 <__retarget_lock_release_recursive>:
 8001908:	4770      	bx	lr
	...

0800190c <_free_r>:
 800190c:	b538      	push	{r3, r4, r5, lr}
 800190e:	4605      	mov	r5, r0
 8001910:	2900      	cmp	r1, #0
 8001912:	d041      	beq.n	8001998 <_free_r+0x8c>
 8001914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001918:	1f0c      	subs	r4, r1, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	bfb8      	it	lt
 800191e:	18e4      	addlt	r4, r4, r3
 8001920:	f000 f8e0 	bl	8001ae4 <__malloc_lock>
 8001924:	4a1d      	ldr	r2, [pc, #116]	@ (800199c <_free_r+0x90>)
 8001926:	6813      	ldr	r3, [r2, #0]
 8001928:	b933      	cbnz	r3, 8001938 <_free_r+0x2c>
 800192a:	6063      	str	r3, [r4, #4]
 800192c:	6014      	str	r4, [r2, #0]
 800192e:	4628      	mov	r0, r5
 8001930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001934:	f000 b8dc 	b.w	8001af0 <__malloc_unlock>
 8001938:	42a3      	cmp	r3, r4
 800193a:	d908      	bls.n	800194e <_free_r+0x42>
 800193c:	6820      	ldr	r0, [r4, #0]
 800193e:	1821      	adds	r1, r4, r0
 8001940:	428b      	cmp	r3, r1
 8001942:	bf01      	itttt	eq
 8001944:	6819      	ldreq	r1, [r3, #0]
 8001946:	685b      	ldreq	r3, [r3, #4]
 8001948:	1809      	addeq	r1, r1, r0
 800194a:	6021      	streq	r1, [r4, #0]
 800194c:	e7ed      	b.n	800192a <_free_r+0x1e>
 800194e:	461a      	mov	r2, r3
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	b10b      	cbz	r3, 8001958 <_free_r+0x4c>
 8001954:	42a3      	cmp	r3, r4
 8001956:	d9fa      	bls.n	800194e <_free_r+0x42>
 8001958:	6811      	ldr	r1, [r2, #0]
 800195a:	1850      	adds	r0, r2, r1
 800195c:	42a0      	cmp	r0, r4
 800195e:	d10b      	bne.n	8001978 <_free_r+0x6c>
 8001960:	6820      	ldr	r0, [r4, #0]
 8001962:	4401      	add	r1, r0
 8001964:	1850      	adds	r0, r2, r1
 8001966:	4283      	cmp	r3, r0
 8001968:	6011      	str	r1, [r2, #0]
 800196a:	d1e0      	bne.n	800192e <_free_r+0x22>
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	6053      	str	r3, [r2, #4]
 8001972:	4408      	add	r0, r1
 8001974:	6010      	str	r0, [r2, #0]
 8001976:	e7da      	b.n	800192e <_free_r+0x22>
 8001978:	d902      	bls.n	8001980 <_free_r+0x74>
 800197a:	230c      	movs	r3, #12
 800197c:	602b      	str	r3, [r5, #0]
 800197e:	e7d6      	b.n	800192e <_free_r+0x22>
 8001980:	6820      	ldr	r0, [r4, #0]
 8001982:	1821      	adds	r1, r4, r0
 8001984:	428b      	cmp	r3, r1
 8001986:	bf04      	itt	eq
 8001988:	6819      	ldreq	r1, [r3, #0]
 800198a:	685b      	ldreq	r3, [r3, #4]
 800198c:	6063      	str	r3, [r4, #4]
 800198e:	bf04      	itt	eq
 8001990:	1809      	addeq	r1, r1, r0
 8001992:	6021      	streq	r1, [r4, #0]
 8001994:	6054      	str	r4, [r2, #4]
 8001996:	e7ca      	b.n	800192e <_free_r+0x22>
 8001998:	bd38      	pop	{r3, r4, r5, pc}
 800199a:	bf00      	nop
 800199c:	200001d4 	.word	0x200001d4

080019a0 <sbrk_aligned>:
 80019a0:	b570      	push	{r4, r5, r6, lr}
 80019a2:	4e0f      	ldr	r6, [pc, #60]	@ (80019e0 <sbrk_aligned+0x40>)
 80019a4:	460c      	mov	r4, r1
 80019a6:	6831      	ldr	r1, [r6, #0]
 80019a8:	4605      	mov	r5, r0
 80019aa:	b911      	cbnz	r1, 80019b2 <sbrk_aligned+0x12>
 80019ac:	f000 f9d6 	bl	8001d5c <_sbrk_r>
 80019b0:	6030      	str	r0, [r6, #0]
 80019b2:	4621      	mov	r1, r4
 80019b4:	4628      	mov	r0, r5
 80019b6:	f000 f9d1 	bl	8001d5c <_sbrk_r>
 80019ba:	1c43      	adds	r3, r0, #1
 80019bc:	d103      	bne.n	80019c6 <sbrk_aligned+0x26>
 80019be:	f04f 34ff 	mov.w	r4, #4294967295
 80019c2:	4620      	mov	r0, r4
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
 80019c6:	1cc4      	adds	r4, r0, #3
 80019c8:	f024 0403 	bic.w	r4, r4, #3
 80019cc:	42a0      	cmp	r0, r4
 80019ce:	d0f8      	beq.n	80019c2 <sbrk_aligned+0x22>
 80019d0:	1a21      	subs	r1, r4, r0
 80019d2:	4628      	mov	r0, r5
 80019d4:	f000 f9c2 	bl	8001d5c <_sbrk_r>
 80019d8:	3001      	adds	r0, #1
 80019da:	d1f2      	bne.n	80019c2 <sbrk_aligned+0x22>
 80019dc:	e7ef      	b.n	80019be <sbrk_aligned+0x1e>
 80019de:	bf00      	nop
 80019e0:	200001d0 	.word	0x200001d0

080019e4 <_malloc_r>:
 80019e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019e8:	1ccd      	adds	r5, r1, #3
 80019ea:	f025 0503 	bic.w	r5, r5, #3
 80019ee:	3508      	adds	r5, #8
 80019f0:	2d0c      	cmp	r5, #12
 80019f2:	bf38      	it	cc
 80019f4:	250c      	movcc	r5, #12
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	4606      	mov	r6, r0
 80019fa:	db01      	blt.n	8001a00 <_malloc_r+0x1c>
 80019fc:	42a9      	cmp	r1, r5
 80019fe:	d904      	bls.n	8001a0a <_malloc_r+0x26>
 8001a00:	230c      	movs	r3, #12
 8001a02:	6033      	str	r3, [r6, #0]
 8001a04:	2000      	movs	r0, #0
 8001a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ae0 <_malloc_r+0xfc>
 8001a0e:	f000 f869 	bl	8001ae4 <__malloc_lock>
 8001a12:	f8d8 3000 	ldr.w	r3, [r8]
 8001a16:	461c      	mov	r4, r3
 8001a18:	bb44      	cbnz	r4, 8001a6c <_malloc_r+0x88>
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	f7ff ffbf 	bl	80019a0 <sbrk_aligned>
 8001a22:	1c43      	adds	r3, r0, #1
 8001a24:	4604      	mov	r4, r0
 8001a26:	d158      	bne.n	8001ada <_malloc_r+0xf6>
 8001a28:	f8d8 4000 	ldr.w	r4, [r8]
 8001a2c:	4627      	mov	r7, r4
 8001a2e:	2f00      	cmp	r7, #0
 8001a30:	d143      	bne.n	8001aba <_malloc_r+0xd6>
 8001a32:	2c00      	cmp	r4, #0
 8001a34:	d04b      	beq.n	8001ace <_malloc_r+0xea>
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	4639      	mov	r1, r7
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	eb04 0903 	add.w	r9, r4, r3
 8001a40:	f000 f98c 	bl	8001d5c <_sbrk_r>
 8001a44:	4581      	cmp	r9, r0
 8001a46:	d142      	bne.n	8001ace <_malloc_r+0xea>
 8001a48:	6821      	ldr	r1, [r4, #0]
 8001a4a:	1a6d      	subs	r5, r5, r1
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	4630      	mov	r0, r6
 8001a50:	f7ff ffa6 	bl	80019a0 <sbrk_aligned>
 8001a54:	3001      	adds	r0, #1
 8001a56:	d03a      	beq.n	8001ace <_malloc_r+0xea>
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	442b      	add	r3, r5
 8001a5c:	6023      	str	r3, [r4, #0]
 8001a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	bb62      	cbnz	r2, 8001ac0 <_malloc_r+0xdc>
 8001a66:	f8c8 7000 	str.w	r7, [r8]
 8001a6a:	e00f      	b.n	8001a8c <_malloc_r+0xa8>
 8001a6c:	6822      	ldr	r2, [r4, #0]
 8001a6e:	1b52      	subs	r2, r2, r5
 8001a70:	d420      	bmi.n	8001ab4 <_malloc_r+0xd0>
 8001a72:	2a0b      	cmp	r2, #11
 8001a74:	d917      	bls.n	8001aa6 <_malloc_r+0xc2>
 8001a76:	1961      	adds	r1, r4, r5
 8001a78:	42a3      	cmp	r3, r4
 8001a7a:	6025      	str	r5, [r4, #0]
 8001a7c:	bf18      	it	ne
 8001a7e:	6059      	strne	r1, [r3, #4]
 8001a80:	6863      	ldr	r3, [r4, #4]
 8001a82:	bf08      	it	eq
 8001a84:	f8c8 1000 	streq.w	r1, [r8]
 8001a88:	5162      	str	r2, [r4, r5]
 8001a8a:	604b      	str	r3, [r1, #4]
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f000 f82f 	bl	8001af0 <__malloc_unlock>
 8001a92:	f104 000b 	add.w	r0, r4, #11
 8001a96:	1d23      	adds	r3, r4, #4
 8001a98:	f020 0007 	bic.w	r0, r0, #7
 8001a9c:	1ac2      	subs	r2, r0, r3
 8001a9e:	bf1c      	itt	ne
 8001aa0:	1a1b      	subne	r3, r3, r0
 8001aa2:	50a3      	strne	r3, [r4, r2]
 8001aa4:	e7af      	b.n	8001a06 <_malloc_r+0x22>
 8001aa6:	6862      	ldr	r2, [r4, #4]
 8001aa8:	42a3      	cmp	r3, r4
 8001aaa:	bf0c      	ite	eq
 8001aac:	f8c8 2000 	streq.w	r2, [r8]
 8001ab0:	605a      	strne	r2, [r3, #4]
 8001ab2:	e7eb      	b.n	8001a8c <_malloc_r+0xa8>
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	6864      	ldr	r4, [r4, #4]
 8001ab8:	e7ae      	b.n	8001a18 <_malloc_r+0x34>
 8001aba:	463c      	mov	r4, r7
 8001abc:	687f      	ldr	r7, [r7, #4]
 8001abe:	e7b6      	b.n	8001a2e <_malloc_r+0x4a>
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	42a3      	cmp	r3, r4
 8001ac6:	d1fb      	bne.n	8001ac0 <_malloc_r+0xdc>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	6053      	str	r3, [r2, #4]
 8001acc:	e7de      	b.n	8001a8c <_malloc_r+0xa8>
 8001ace:	230c      	movs	r3, #12
 8001ad0:	6033      	str	r3, [r6, #0]
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	f000 f80c 	bl	8001af0 <__malloc_unlock>
 8001ad8:	e794      	b.n	8001a04 <_malloc_r+0x20>
 8001ada:	6005      	str	r5, [r0, #0]
 8001adc:	e7d6      	b.n	8001a8c <_malloc_r+0xa8>
 8001ade:	bf00      	nop
 8001ae0:	200001d4 	.word	0x200001d4

08001ae4 <__malloc_lock>:
 8001ae4:	4801      	ldr	r0, [pc, #4]	@ (8001aec <__malloc_lock+0x8>)
 8001ae6:	f7ff bf0e 	b.w	8001906 <__retarget_lock_acquire_recursive>
 8001aea:	bf00      	nop
 8001aec:	200001cc 	.word	0x200001cc

08001af0 <__malloc_unlock>:
 8001af0:	4801      	ldr	r0, [pc, #4]	@ (8001af8 <__malloc_unlock+0x8>)
 8001af2:	f7ff bf09 	b.w	8001908 <__retarget_lock_release_recursive>
 8001af6:	bf00      	nop
 8001af8:	200001cc 	.word	0x200001cc

08001afc <__sflush_r>:
 8001afc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b04:	0716      	lsls	r6, r2, #28
 8001b06:	4605      	mov	r5, r0
 8001b08:	460c      	mov	r4, r1
 8001b0a:	d454      	bmi.n	8001bb6 <__sflush_r+0xba>
 8001b0c:	684b      	ldr	r3, [r1, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	dc02      	bgt.n	8001b18 <__sflush_r+0x1c>
 8001b12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	dd48      	ble.n	8001baa <__sflush_r+0xae>
 8001b18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b1a:	2e00      	cmp	r6, #0
 8001b1c:	d045      	beq.n	8001baa <__sflush_r+0xae>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001b24:	682f      	ldr	r7, [r5, #0]
 8001b26:	6a21      	ldr	r1, [r4, #32]
 8001b28:	602b      	str	r3, [r5, #0]
 8001b2a:	d030      	beq.n	8001b8e <__sflush_r+0x92>
 8001b2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001b2e:	89a3      	ldrh	r3, [r4, #12]
 8001b30:	0759      	lsls	r1, r3, #29
 8001b32:	d505      	bpl.n	8001b40 <__sflush_r+0x44>
 8001b34:	6863      	ldr	r3, [r4, #4]
 8001b36:	1ad2      	subs	r2, r2, r3
 8001b38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001b3a:	b10b      	cbz	r3, 8001b40 <__sflush_r+0x44>
 8001b3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b3e:	1ad2      	subs	r2, r2, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b44:	6a21      	ldr	r1, [r4, #32]
 8001b46:	4628      	mov	r0, r5
 8001b48:	47b0      	blx	r6
 8001b4a:	1c43      	adds	r3, r0, #1
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	d106      	bne.n	8001b5e <__sflush_r+0x62>
 8001b50:	6829      	ldr	r1, [r5, #0]
 8001b52:	291d      	cmp	r1, #29
 8001b54:	d82b      	bhi.n	8001bae <__sflush_r+0xb2>
 8001b56:	4a2a      	ldr	r2, [pc, #168]	@ (8001c00 <__sflush_r+0x104>)
 8001b58:	40ca      	lsrs	r2, r1
 8001b5a:	07d6      	lsls	r6, r2, #31
 8001b5c:	d527      	bpl.n	8001bae <__sflush_r+0xb2>
 8001b5e:	2200      	movs	r2, #0
 8001b60:	6062      	str	r2, [r4, #4]
 8001b62:	04d9      	lsls	r1, r3, #19
 8001b64:	6922      	ldr	r2, [r4, #16]
 8001b66:	6022      	str	r2, [r4, #0]
 8001b68:	d504      	bpl.n	8001b74 <__sflush_r+0x78>
 8001b6a:	1c42      	adds	r2, r0, #1
 8001b6c:	d101      	bne.n	8001b72 <__sflush_r+0x76>
 8001b6e:	682b      	ldr	r3, [r5, #0]
 8001b70:	b903      	cbnz	r3, 8001b74 <__sflush_r+0x78>
 8001b72:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b76:	602f      	str	r7, [r5, #0]
 8001b78:	b1b9      	cbz	r1, 8001baa <__sflush_r+0xae>
 8001b7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b7e:	4299      	cmp	r1, r3
 8001b80:	d002      	beq.n	8001b88 <__sflush_r+0x8c>
 8001b82:	4628      	mov	r0, r5
 8001b84:	f7ff fec2 	bl	800190c <_free_r>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b8c:	e00d      	b.n	8001baa <__sflush_r+0xae>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	4628      	mov	r0, r5
 8001b92:	47b0      	blx	r6
 8001b94:	4602      	mov	r2, r0
 8001b96:	1c50      	adds	r0, r2, #1
 8001b98:	d1c9      	bne.n	8001b2e <__sflush_r+0x32>
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0c6      	beq.n	8001b2e <__sflush_r+0x32>
 8001ba0:	2b1d      	cmp	r3, #29
 8001ba2:	d001      	beq.n	8001ba8 <__sflush_r+0xac>
 8001ba4:	2b16      	cmp	r3, #22
 8001ba6:	d11e      	bne.n	8001be6 <__sflush_r+0xea>
 8001ba8:	602f      	str	r7, [r5, #0]
 8001baa:	2000      	movs	r0, #0
 8001bac:	e022      	b.n	8001bf4 <__sflush_r+0xf8>
 8001bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	e01b      	b.n	8001bee <__sflush_r+0xf2>
 8001bb6:	690f      	ldr	r7, [r1, #16]
 8001bb8:	2f00      	cmp	r7, #0
 8001bba:	d0f6      	beq.n	8001baa <__sflush_r+0xae>
 8001bbc:	0793      	lsls	r3, r2, #30
 8001bbe:	680e      	ldr	r6, [r1, #0]
 8001bc0:	bf08      	it	eq
 8001bc2:	694b      	ldreq	r3, [r1, #20]
 8001bc4:	600f      	str	r7, [r1, #0]
 8001bc6:	bf18      	it	ne
 8001bc8:	2300      	movne	r3, #0
 8001bca:	eba6 0807 	sub.w	r8, r6, r7
 8001bce:	608b      	str	r3, [r1, #8]
 8001bd0:	f1b8 0f00 	cmp.w	r8, #0
 8001bd4:	dde9      	ble.n	8001baa <__sflush_r+0xae>
 8001bd6:	6a21      	ldr	r1, [r4, #32]
 8001bd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001bda:	4643      	mov	r3, r8
 8001bdc:	463a      	mov	r2, r7
 8001bde:	4628      	mov	r0, r5
 8001be0:	47b0      	blx	r6
 8001be2:	2800      	cmp	r0, #0
 8001be4:	dc08      	bgt.n	8001bf8 <__sflush_r+0xfc>
 8001be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bee:	81a3      	strh	r3, [r4, #12]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bf8:	4407      	add	r7, r0
 8001bfa:	eba8 0800 	sub.w	r8, r8, r0
 8001bfe:	e7e7      	b.n	8001bd0 <__sflush_r+0xd4>
 8001c00:	20400001 	.word	0x20400001

08001c04 <_fflush_r>:
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	690b      	ldr	r3, [r1, #16]
 8001c08:	4605      	mov	r5, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	b913      	cbnz	r3, 8001c14 <_fflush_r+0x10>
 8001c0e:	2500      	movs	r5, #0
 8001c10:	4628      	mov	r0, r5
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
 8001c14:	b118      	cbz	r0, 8001c1e <_fflush_r+0x1a>
 8001c16:	6a03      	ldr	r3, [r0, #32]
 8001c18:	b90b      	cbnz	r3, 8001c1e <_fflush_r+0x1a>
 8001c1a:	f7ff fc8f 	bl	800153c <__sinit>
 8001c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f3      	beq.n	8001c0e <_fflush_r+0xa>
 8001c26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c28:	07d0      	lsls	r0, r2, #31
 8001c2a:	d404      	bmi.n	8001c36 <_fflush_r+0x32>
 8001c2c:	0599      	lsls	r1, r3, #22
 8001c2e:	d402      	bmi.n	8001c36 <_fflush_r+0x32>
 8001c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c32:	f7ff fe68 	bl	8001906 <__retarget_lock_acquire_recursive>
 8001c36:	4628      	mov	r0, r5
 8001c38:	4621      	mov	r1, r4
 8001c3a:	f7ff ff5f 	bl	8001afc <__sflush_r>
 8001c3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c40:	07da      	lsls	r2, r3, #31
 8001c42:	4605      	mov	r5, r0
 8001c44:	d4e4      	bmi.n	8001c10 <_fflush_r+0xc>
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	059b      	lsls	r3, r3, #22
 8001c4a:	d4e1      	bmi.n	8001c10 <_fflush_r+0xc>
 8001c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c4e:	f7ff fe5b 	bl	8001908 <__retarget_lock_release_recursive>
 8001c52:	e7dd      	b.n	8001c10 <_fflush_r+0xc>

08001c54 <__swhatbuf_r>:
 8001c54:	b570      	push	{r4, r5, r6, lr}
 8001c56:	460c      	mov	r4, r1
 8001c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c5c:	2900      	cmp	r1, #0
 8001c5e:	b096      	sub	sp, #88	@ 0x58
 8001c60:	4615      	mov	r5, r2
 8001c62:	461e      	mov	r6, r3
 8001c64:	da0d      	bge.n	8001c82 <__swhatbuf_r+0x2e>
 8001c66:	89a3      	ldrh	r3, [r4, #12]
 8001c68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2340      	movne	r3, #64	@ 0x40
 8001c74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c78:	2000      	movs	r0, #0
 8001c7a:	6031      	str	r1, [r6, #0]
 8001c7c:	602b      	str	r3, [r5, #0]
 8001c7e:	b016      	add	sp, #88	@ 0x58
 8001c80:	bd70      	pop	{r4, r5, r6, pc}
 8001c82:	466a      	mov	r2, sp
 8001c84:	f000 f848 	bl	8001d18 <_fstat_r>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	dbec      	blt.n	8001c66 <__swhatbuf_r+0x12>
 8001c8c:	9901      	ldr	r1, [sp, #4]
 8001c8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c96:	4259      	negs	r1, r3
 8001c98:	4159      	adcs	r1, r3
 8001c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c9e:	e7eb      	b.n	8001c78 <__swhatbuf_r+0x24>

08001ca0 <__smakebuf_r>:
 8001ca0:	898b      	ldrh	r3, [r1, #12]
 8001ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ca4:	079d      	lsls	r5, r3, #30
 8001ca6:	4606      	mov	r6, r0
 8001ca8:	460c      	mov	r4, r1
 8001caa:	d507      	bpl.n	8001cbc <__smakebuf_r+0x1c>
 8001cac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001cb0:	6023      	str	r3, [r4, #0]
 8001cb2:	6123      	str	r3, [r4, #16]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	6163      	str	r3, [r4, #20]
 8001cb8:	b003      	add	sp, #12
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbc:	ab01      	add	r3, sp, #4
 8001cbe:	466a      	mov	r2, sp
 8001cc0:	f7ff ffc8 	bl	8001c54 <__swhatbuf_r>
 8001cc4:	9f00      	ldr	r7, [sp, #0]
 8001cc6:	4605      	mov	r5, r0
 8001cc8:	4639      	mov	r1, r7
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f7ff fe8a 	bl	80019e4 <_malloc_r>
 8001cd0:	b948      	cbnz	r0, 8001ce6 <__smakebuf_r+0x46>
 8001cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cd6:	059a      	lsls	r2, r3, #22
 8001cd8:	d4ee      	bmi.n	8001cb8 <__smakebuf_r+0x18>
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	81a3      	strh	r3, [r4, #12]
 8001ce4:	e7e2      	b.n	8001cac <__smakebuf_r+0xc>
 8001ce6:	89a3      	ldrh	r3, [r4, #12]
 8001ce8:	6020      	str	r0, [r4, #0]
 8001cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cee:	81a3      	strh	r3, [r4, #12]
 8001cf0:	9b01      	ldr	r3, [sp, #4]
 8001cf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001cf6:	b15b      	cbz	r3, 8001d10 <__smakebuf_r+0x70>
 8001cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	f000 f81d 	bl	8001d3c <_isatty_r>
 8001d02:	b128      	cbz	r0, 8001d10 <__smakebuf_r+0x70>
 8001d04:	89a3      	ldrh	r3, [r4, #12]
 8001d06:	f023 0303 	bic.w	r3, r3, #3
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	81a3      	strh	r3, [r4, #12]
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	431d      	orrs	r5, r3
 8001d14:	81a5      	strh	r5, [r4, #12]
 8001d16:	e7cf      	b.n	8001cb8 <__smakebuf_r+0x18>

08001d18 <_fstat_r>:
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	4d07      	ldr	r5, [pc, #28]	@ (8001d38 <_fstat_r+0x20>)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	4604      	mov	r4, r0
 8001d20:	4608      	mov	r0, r1
 8001d22:	4611      	mov	r1, r2
 8001d24:	602b      	str	r3, [r5, #0]
 8001d26:	f7fe fd67 	bl	80007f8 <_fstat>
 8001d2a:	1c43      	adds	r3, r0, #1
 8001d2c:	d102      	bne.n	8001d34 <_fstat_r+0x1c>
 8001d2e:	682b      	ldr	r3, [r5, #0]
 8001d30:	b103      	cbz	r3, 8001d34 <_fstat_r+0x1c>
 8001d32:	6023      	str	r3, [r4, #0]
 8001d34:	bd38      	pop	{r3, r4, r5, pc}
 8001d36:	bf00      	nop
 8001d38:	200001c8 	.word	0x200001c8

08001d3c <_isatty_r>:
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4d06      	ldr	r5, [pc, #24]	@ (8001d58 <_isatty_r+0x1c>)
 8001d40:	2300      	movs	r3, #0
 8001d42:	4604      	mov	r4, r0
 8001d44:	4608      	mov	r0, r1
 8001d46:	602b      	str	r3, [r5, #0]
 8001d48:	f7fe fd66 	bl	8000818 <_isatty>
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	d102      	bne.n	8001d56 <_isatty_r+0x1a>
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	b103      	cbz	r3, 8001d56 <_isatty_r+0x1a>
 8001d54:	6023      	str	r3, [r4, #0]
 8001d56:	bd38      	pop	{r3, r4, r5, pc}
 8001d58:	200001c8 	.word	0x200001c8

08001d5c <_sbrk_r>:
 8001d5c:	b538      	push	{r3, r4, r5, lr}
 8001d5e:	4d06      	ldr	r5, [pc, #24]	@ (8001d78 <_sbrk_r+0x1c>)
 8001d60:	2300      	movs	r3, #0
 8001d62:	4604      	mov	r4, r0
 8001d64:	4608      	mov	r0, r1
 8001d66:	602b      	str	r3, [r5, #0]
 8001d68:	f7fe fd6e 	bl	8000848 <_sbrk>
 8001d6c:	1c43      	adds	r3, r0, #1
 8001d6e:	d102      	bne.n	8001d76 <_sbrk_r+0x1a>
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	b103      	cbz	r3, 8001d76 <_sbrk_r+0x1a>
 8001d74:	6023      	str	r3, [r4, #0]
 8001d76:	bd38      	pop	{r3, r4, r5, pc}
 8001d78:	200001c8 	.word	0x200001c8

08001d7c <_init>:
 8001d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7e:	bf00      	nop
 8001d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d82:	bc08      	pop	{r3}
 8001d84:	469e      	mov	lr, r3
 8001d86:	4770      	bx	lr

08001d88 <_fini>:
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	bf00      	nop
 8001d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d8e:	bc08      	pop	{r3}
 8001d90:	469e      	mov	lr, r3
 8001d92:	4770      	bx	lr
