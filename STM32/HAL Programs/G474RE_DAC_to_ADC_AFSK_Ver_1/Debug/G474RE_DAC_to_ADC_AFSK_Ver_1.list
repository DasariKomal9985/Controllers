
G474RE_DAC_to_ADC_AFSK_Ver_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e28  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08009008  08009008  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009484  08009484  0000b05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009484  08009484  0000a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800948c  0800948c  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800948c  0800948c  0000a48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009490  08009490  0000a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009494  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e34  2000005c  080094f0  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e90  080094f0  0000be90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a003  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304f  00000000  00000000  0002508f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  000280e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116e  00000000  00000000  00029740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292dc  00000000  00000000  0002a8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193fa  00000000  00000000  00053b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116199  00000000  00000000  0006cf84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018311d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006980  00000000  00000000  00183160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00189ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008ff0 	.word	0x08008ff0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08008ff0 	.word	0x08008ff0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b988 	b.w	8000f44 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	468e      	mov	lr, r1
 8000c54:	4604      	mov	r4, r0
 8000c56:	4688      	mov	r8, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14a      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d962      	bls.n	8000d28 <__udivmoddi4+0xdc>
 8000c62:	fab2 f682 	clz	r6, r2
 8000c66:	b14e      	cbz	r6, 8000c7c <__udivmoddi4+0x30>
 8000c68:	f1c6 0320 	rsb	r3, r6, #32
 8000c6c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	40b7      	lsls	r7, r6
 8000c76:	ea43 0808 	orr.w	r8, r3, r8
 8000c7a:	40b4      	lsls	r4, r6
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f fc87 	uxth.w	ip, r7
 8000c84:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c88:	0c23      	lsrs	r3, r4, #16
 8000c8a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c8e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c92:	fb01 f20c 	mul.w	r2, r1, ip
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0x62>
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ca0:	f080 80ea 	bcs.w	8000e78 <__udivmoddi4+0x22c>
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f240 80e7 	bls.w	8000e78 <__udivmoddi4+0x22c>
 8000caa:	3902      	subs	r1, #2
 8000cac:	443b      	add	r3, r7
 8000cae:	1a9a      	subs	r2, r3, r2
 8000cb0:	b2a3      	uxth	r3, r4
 8000cb2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cbe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc2:	459c      	cmp	ip, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x8e>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ccc:	f080 80d6 	bcs.w	8000e7c <__udivmoddi4+0x230>
 8000cd0:	459c      	cmp	ip, r3
 8000cd2:	f240 80d3 	bls.w	8000e7c <__udivmoddi4+0x230>
 8000cd6:	443b      	add	r3, r7
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cde:	eba3 030c 	sub.w	r3, r3, ip
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa2>
 8000ce6:	40f3      	lsrs	r3, r6
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xb6>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb0>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa2>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x14c>
 8000d0a:	4573      	cmp	r3, lr
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xc8>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f200 8105 	bhi.w	8000f1e <__udivmoddi4+0x2d2>
 8000d14:	1a84      	subs	r4, r0, r2
 8000d16:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0e5      	beq.n	8000cee <__udivmoddi4+0xa2>
 8000d22:	e9c5 4800 	strd	r4, r8, [r5]
 8000d26:	e7e2      	b.n	8000cee <__udivmoddi4+0xa2>
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f000 8090 	beq.w	8000e4e <__udivmoddi4+0x202>
 8000d2e:	fab2 f682 	clz	r6, r2
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f040 80a4 	bne.w	8000e80 <__udivmoddi4+0x234>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	b280      	uxth	r0, r0
 8000d42:	b2bc      	uxth	r4, r7
 8000d44:	2101      	movs	r1, #1
 8000d46:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d4a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d52:	fb04 f20c 	mul.w	r2, r4, ip
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x11e>
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d60:	d202      	bcs.n	8000d68 <__udivmoddi4+0x11c>
 8000d62:	429a      	cmp	r2, r3
 8000d64:	f200 80e0 	bhi.w	8000f28 <__udivmoddi4+0x2dc>
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d70:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d74:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d78:	fb02 f404 	mul.w	r4, r2, r4
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x144>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x142>
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	f200 80ca 	bhi.w	8000f22 <__udivmoddi4+0x2d6>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	1b1b      	subs	r3, r3, r4
 8000d92:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x98>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa0e f401 	lsl.w	r4, lr, r1
 8000da8:	fa20 f306 	lsr.w	r3, r0, r6
 8000dac:	fa2e fe06 	lsr.w	lr, lr, r6
 8000db0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db4:	4323      	orrs	r3, r4
 8000db6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dba:	fa1f fc87 	uxth.w	ip, r7
 8000dbe:	fbbe f0f9 	udiv	r0, lr, r9
 8000dc2:	0c1c      	lsrs	r4, r3, #16
 8000dc4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dc8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dcc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x1a0>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dde:	f080 809c 	bcs.w	8000f1a <__udivmoddi4+0x2ce>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	f240 8099 	bls.w	8000f1a <__udivmoddi4+0x2ce>
 8000de8:	3802      	subs	r0, #2
 8000dea:	443c      	add	r4, r7
 8000dec:	eba4 040e 	sub.w	r4, r4, lr
 8000df0:	fa1f fe83 	uxth.w	lr, r3
 8000df4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dfc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e00:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1ce>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e0e:	f080 8082 	bcs.w	8000f16 <__udivmoddi4+0x2ca>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d97f      	bls.n	8000f16 <__udivmoddi4+0x2ca>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1e:	eba4 040c 	sub.w	r4, r4, ip
 8000e22:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e26:	4564      	cmp	r4, ip
 8000e28:	4673      	mov	r3, lr
 8000e2a:	46e1      	mov	r9, ip
 8000e2c:	d362      	bcc.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e2e:	d05f      	beq.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x1fe>
 8000e32:	ebb8 0203 	subs.w	r2, r8, r3
 8000e36:	eb64 0409 	sbc.w	r4, r4, r9
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e42:	431e      	orrs	r6, r3
 8000e44:	40cc      	lsrs	r4, r1
 8000e46:	e9c5 6400 	strd	r6, r4, [r5]
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	e74f      	b.n	8000cee <__udivmoddi4+0xa2>
 8000e4e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e52:	0c01      	lsrs	r1, r0, #16
 8000e54:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4638      	mov	r0, r7
 8000e62:	463c      	mov	r4, r7
 8000e64:	46b8      	mov	r8, r7
 8000e66:	46be      	mov	lr, r7
 8000e68:	2620      	movs	r6, #32
 8000e6a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e6e:	eba2 0208 	sub.w	r2, r2, r8
 8000e72:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e76:	e766      	b.n	8000d46 <__udivmoddi4+0xfa>
 8000e78:	4601      	mov	r1, r0
 8000e7a:	e718      	b.n	8000cae <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e72c      	b.n	8000cda <__udivmoddi4+0x8e>
 8000e80:	f1c6 0220 	rsb	r2, r6, #32
 8000e84:	fa2e f302 	lsr.w	r3, lr, r2
 8000e88:	40b7      	lsls	r7, r6
 8000e8a:	40b1      	lsls	r1, r6
 8000e8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	430a      	orrs	r2, r1
 8000e96:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e9a:	b2bc      	uxth	r4, r7
 8000e9c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ea0:	0c11      	lsrs	r1, r2, #16
 8000ea2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea6:	fb08 f904 	mul.w	r9, r8, r4
 8000eaa:	40b0      	lsls	r0, r6
 8000eac:	4589      	cmp	r9, r1
 8000eae:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eb2:	b280      	uxth	r0, r0
 8000eb4:	d93e      	bls.n	8000f34 <__udivmoddi4+0x2e8>
 8000eb6:	1879      	adds	r1, r7, r1
 8000eb8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ebc:	d201      	bcs.n	8000ec2 <__udivmoddi4+0x276>
 8000ebe:	4589      	cmp	r9, r1
 8000ec0:	d81f      	bhi.n	8000f02 <__udivmoddi4+0x2b6>
 8000ec2:	eba1 0109 	sub.w	r1, r1, r9
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed8:	4542      	cmp	r2, r8
 8000eda:	d229      	bcs.n	8000f30 <__udivmoddi4+0x2e4>
 8000edc:	18ba      	adds	r2, r7, r2
 8000ede:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ee2:	d2c4      	bcs.n	8000e6e <__udivmoddi4+0x222>
 8000ee4:	4542      	cmp	r2, r8
 8000ee6:	d2c2      	bcs.n	8000e6e <__udivmoddi4+0x222>
 8000ee8:	f1a9 0102 	sub.w	r1, r9, #2
 8000eec:	443a      	add	r2, r7
 8000eee:	e7be      	b.n	8000e6e <__udivmoddi4+0x222>
 8000ef0:	45f0      	cmp	r8, lr
 8000ef2:	d29d      	bcs.n	8000e30 <__udivmoddi4+0x1e4>
 8000ef4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ef8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000efc:	3801      	subs	r0, #1
 8000efe:	46e1      	mov	r9, ip
 8000f00:	e796      	b.n	8000e30 <__udivmoddi4+0x1e4>
 8000f02:	eba7 0909 	sub.w	r9, r7, r9
 8000f06:	4449      	add	r1, r9
 8000f08:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f0c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f10:	fb09 f804 	mul.w	r8, r9, r4
 8000f14:	e7db      	b.n	8000ece <__udivmoddi4+0x282>
 8000f16:	4673      	mov	r3, lr
 8000f18:	e77f      	b.n	8000e1a <__udivmoddi4+0x1ce>
 8000f1a:	4650      	mov	r0, sl
 8000f1c:	e766      	b.n	8000dec <__udivmoddi4+0x1a0>
 8000f1e:	4608      	mov	r0, r1
 8000f20:	e6fd      	b.n	8000d1e <__udivmoddi4+0xd2>
 8000f22:	443b      	add	r3, r7
 8000f24:	3a02      	subs	r2, #2
 8000f26:	e733      	b.n	8000d90 <__udivmoddi4+0x144>
 8000f28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f2c:	443b      	add	r3, r7
 8000f2e:	e71c      	b.n	8000d6a <__udivmoddi4+0x11e>
 8000f30:	4649      	mov	r1, r9
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x222>
 8000f34:	eba1 0109 	sub.w	r1, r1, r9
 8000f38:	46c4      	mov	ip, r8
 8000f3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3e:	fb09 f804 	mul.w	r8, r9, r4
 8000f42:	e7c4      	b.n	8000ece <__udivmoddi4+0x282>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 ff94 	bl	8001e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f8cd 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 fa7f 	bl	8001458 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5a:	f000 fa4b 	bl	80013f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f5e:	f000 f913 	bl	8001188 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f62:	f000 f98b 	bl	800127c <MX_DAC1_Init>
  MX_TIM6_Init();
 8000f66:	f000 f9c3 	bl	80012f0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000f6a:	f000 f9f7 	bl	800135c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 8000f6e:	4854      	ldr	r0, [pc, #336]	@ (80010c0 <main+0x178>)
 8000f70:	f005 f832 	bl	8005fd8 <HAL_TIM_Base_Start>
	afsk_build_char('K');
 8000f74:	204b      	movs	r0, #75	@ 0x4b
 8000f76:	f000 fb3d 	bl	80015f4 <afsk_build_char>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_buf,
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000f82:	4a50      	ldr	r2, [pc, #320]	@ (80010c4 <main+0x17c>)
 8000f84:	2100      	movs	r1, #0
 8000f86:	4850      	ldr	r0, [pc, #320]	@ (80010c8 <main+0x180>)
 8000f88:	f002 ff32 	bl	8003df0 <HAL_DAC_Start_DMA>
			sizeof(dac_buf) / sizeof(dac_buf[0]), DAC_ALIGN_12B_R);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf,
 8000f8c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000f90:	494e      	ldr	r1, [pc, #312]	@ (80010cc <main+0x184>)
 8000f92:	484f      	ldr	r0, [pc, #316]	@ (80010d0 <main+0x188>)
 8000f94:	f001 fbde 	bl	8002754 <HAL_ADC_Start_DMA>
			sizeof(dac_buf) / sizeof(dac_buf[0]));

	make_sine_tables();
 8000f98:	f000 faaa 	bl	80014f0 <make_sine_tables>

	sprintf(uart_msg, "AFSK Loopback Start\r\n");
 8000f9c:	494d      	ldr	r1, [pc, #308]	@ (80010d4 <main+0x18c>)
 8000f9e:	484e      	ldr	r0, [pc, #312]	@ (80010d8 <main+0x190>)
 8000fa0:	f006 fe56 	bl	8007c50 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 8000fa4:	484c      	ldr	r0, [pc, #304]	@ (80010d8 <main+0x190>)
 8000fa6:	f7ff f93b 	bl	8000220 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	4949      	ldr	r1, [pc, #292]	@ (80010d8 <main+0x190>)
 8000fb4:	4849      	ldr	r0, [pc, #292]	@ (80010dc <main+0x194>)
 8000fb6:	f005 fbe1 	bl	800677c <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	if (adc_done) {
 8000fba:	4b49      	ldr	r3, [pc, #292]	@ (80010e0 <main+0x198>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d03b      	beq.n	800103c <main+0xf4>
		adc_done = 0; // reset flag
 8000fc4:	4b46      	ldr	r3, [pc, #280]	@ (80010e0 <main+0x198>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]

		// Debug: print first 16 ADC samples
		for (int i = 0; i < 16; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e016      	b.n	8000ffe <main+0xb6>
			sprintf(uart_msg, "%lu ", (unsigned long) adc_buf[i]);
 8000fd0:	4a3e      	ldr	r2, [pc, #248]	@ (80010cc <main+0x184>)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4942      	ldr	r1, [pc, #264]	@ (80010e4 <main+0x19c>)
 8000fdc:	483e      	ldr	r0, [pc, #248]	@ (80010d8 <main+0x190>)
 8000fde:	f006 fe37 	bl	8007c50 <siprintf>

			HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 8000fe2:	483d      	ldr	r0, [pc, #244]	@ (80010d8 <main+0x190>)
 8000fe4:	f7ff f91c 	bl	8000220 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	4939      	ldr	r1, [pc, #228]	@ (80010d8 <main+0x190>)
 8000ff2:	483a      	ldr	r0, [pc, #232]	@ (80010dc <main+0x194>)
 8000ff4:	f005 fbc2 	bl	800677c <HAL_UART_Transmit>
		for (int i = 0; i < 16; i++) {
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	dde5      	ble.n	8000fd0 <main+0x88>
			HAL_MAX_DELAY);
		}
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	2202      	movs	r2, #2
 800100a:	4937      	ldr	r1, [pc, #220]	@ (80010e8 <main+0x1a0>)
 800100c:	4833      	ldr	r0, [pc, #204]	@ (80010dc <main+0x194>)
 800100e:	f005 fbb5 	bl	800677c <HAL_UART_Transmit>

		// Then try decode
		uint8_t decoded = afsk_receive_char();
 8001012:	f000 fbe5 	bl	80017e0 <afsk_receive_char>
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
		sprintf(uart_msg, "TX: K | RX: %c\r\n", decoded);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	461a      	mov	r2, r3
 800101e:	4933      	ldr	r1, [pc, #204]	@ (80010ec <main+0x1a4>)
 8001020:	482d      	ldr	r0, [pc, #180]	@ (80010d8 <main+0x190>)
 8001022:	f006 fe15 	bl	8007c50 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 8001026:	482c      	ldr	r0, [pc, #176]	@ (80010d8 <main+0x190>)
 8001028:	f7ff f8fa 	bl	8000220 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	4928      	ldr	r1, [pc, #160]	@ (80010d8 <main+0x190>)
 8001036:	4829      	ldr	r0, [pc, #164]	@ (80010dc <main+0x194>)
 8001038:	f005 fba0 	bl	800677c <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (adc_done) {
 800103c:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <main+0x198>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0fa      	beq.n	800103c <main+0xf4>
			adc_done = 0;  // reset flag
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <main+0x198>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]

			// Print first 16 ADC samples for debugging
			for (int i = 0; i < 16; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	e016      	b.n	8001080 <main+0x138>
				sprintf(uart_msg, "%lu ", (unsigned long) adc_buf[i]);
 8001052:	4a1e      	ldr	r2, [pc, #120]	@ (80010cc <main+0x184>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	461a      	mov	r2, r3
 800105c:	4921      	ldr	r1, [pc, #132]	@ (80010e4 <main+0x19c>)
 800105e:	481e      	ldr	r0, [pc, #120]	@ (80010d8 <main+0x190>)
 8001060:	f006 fdf6 	bl	8007c50 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg,
						strlen(uart_msg), HAL_MAX_DELAY);
 8001064:	481c      	ldr	r0, [pc, #112]	@ (80010d8 <main+0x190>)
 8001066:	f7ff f8db 	bl	8000220 <strlen>
 800106a:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg,
 800106c:	b29a      	uxth	r2, r3
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	4919      	ldr	r1, [pc, #100]	@ (80010d8 <main+0x190>)
 8001074:	4819      	ldr	r0, [pc, #100]	@ (80010dc <main+0x194>)
 8001076:	f005 fb81 	bl	800677c <HAL_UART_Transmit>
			for (int i = 0; i < 16; i++) {
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3301      	adds	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	dde5      	ble.n	8001052 <main+0x10a>
			}
			HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	2202      	movs	r2, #2
 800108c:	4916      	ldr	r1, [pc, #88]	@ (80010e8 <main+0x1a0>)
 800108e:	4813      	ldr	r0, [pc, #76]	@ (80010dc <main+0x194>)
 8001090:	f005 fb74 	bl	800677c <HAL_UART_Transmit>

			// Decode received character
			uint8_t decoded = afsk_receive_char();
 8001094:	f000 fba4 	bl	80017e0 <afsk_receive_char>
 8001098:	4603      	mov	r3, r0
 800109a:	71bb      	strb	r3, [r7, #6]
			sprintf(uart_msg, "TX: K | RX: %c\r\n", decoded);
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	461a      	mov	r2, r3
 80010a0:	4912      	ldr	r1, [pc, #72]	@ (80010ec <main+0x1a4>)
 80010a2:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <main+0x190>)
 80010a4:	f006 fdd4 	bl	8007c50 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 80010a8:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <main+0x190>)
 80010aa:	f7ff f8b9 	bl	8000220 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <main+0x190>)
 80010b8:	4808      	ldr	r0, [pc, #32]	@ (80010dc <main+0x194>)
 80010ba:	f005 fb5f 	bl	800677c <HAL_UART_Transmit>
		if (adc_done) {
 80010be:	e7bd      	b.n	800103c <main+0xf4>
 80010c0:	20000c5c 	.word	0x20000c5c
 80010c4:	20000078 	.word	0x20000078
 80010c8:	20000be8 	.word	0x20000be8
 80010cc:	20000398 	.word	0x20000398
 80010d0:	20000b1c 	.word	0x20000b1c
 80010d4:	08009008 	.word	0x08009008
 80010d8:	20000adc 	.word	0x20000adc
 80010dc:	20000ca8 	.word	0x20000ca8
 80010e0:	20000ad8 	.word	0x20000ad8
 80010e4:	08009020 	.word	0x08009020
 80010e8:	08009028 	.word	0x08009028
 80010ec:	0800902c 	.word	0x0800902c

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b094      	sub	sp, #80	@ 0x50
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2238      	movs	r2, #56	@ 0x38
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f006 fdc8 	bl	8007c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001112:	2000      	movs	r0, #0
 8001114:	f003 fed8 	bl	8004ec8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001122:	2340      	movs	r3, #64	@ 0x40
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001126:	2302      	movs	r3, #2
 8001128:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800112a:	2302      	movs	r3, #2
 800112c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800112e:	2304      	movs	r3, #4
 8001130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001132:	2355      	movs	r3, #85	@ 0x55
 8001134:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001136:	2302      	movs	r3, #2
 8001138:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800113e:	2302      	movs	r3, #2
 8001140:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	4618      	mov	r0, r3
 8001148:	f003 ff72 	bl	8005030 <HAL_RCC_OscConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001152:	f000 fc09 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001156:	230f      	movs	r3, #15
 8001158:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115a:	2303      	movs	r3, #3
 800115c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2104      	movs	r1, #4
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fa70 	bl	8005654 <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800117a:	f000 fbf5 	bl	8001968 <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3750      	adds	r7, #80	@ 0x50
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	@ 0x30
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800118e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2220      	movs	r2, #32
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 fd77 	bl	8007c94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011a6:	4b33      	ldr	r3, [pc, #204]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80011ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ae:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ce:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d4:	4b27      	ldr	r3, [pc, #156]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011da:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011e0:	4b24      	ldr	r3, [pc, #144]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e6:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011f0:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80011f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <MX_ADC1_Init+0xec>)
 80011f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <MX_ADC1_Init+0xec>)
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001206:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <MX_ADC1_Init+0xec>)
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_ADC1_Init+0xec>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001214:	4817      	ldr	r0, [pc, #92]	@ (8001274 <MX_ADC1_Init+0xec>)
 8001216:	f001 f8e1 	bl	80023dc <HAL_ADC_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001220:	f000 fba2 	bl	8001968 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	@ (8001274 <MX_ADC1_Init+0xec>)
 8001230:	f002 fba4 	bl	800397c <HAL_ADCEx_MultiModeConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800123a:	f000 fb95 	bl	8001968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_ADC1_Init+0xf0>)
 8001240:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001242:	2306      	movs	r3, #6
 8001244:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001246:	2304      	movs	r3, #4
 8001248:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124a:	237f      	movs	r3, #127	@ 0x7f
 800124c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124e:	2304      	movs	r3, #4
 8001250:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <MX_ADC1_Init+0xec>)
 800125c:	f001 fdcc 	bl	8002df8 <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001266:	f000 fb7f 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3730      	adds	r7, #48	@ 0x30
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000b1c 	.word	0x20000b1c
 8001278:	04300002 	.word	0x04300002

0800127c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	@ 0x30
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	2230      	movs	r2, #48	@ 0x30
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f006 fd03 	bl	8007c94 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_DAC1_Init+0x6c>)
 8001290:	4a16      	ldr	r2, [pc, #88]	@ (80012ec <MX_DAC1_Init+0x70>)
 8001292:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001294:	4814      	ldr	r0, [pc, #80]	@ (80012e8 <MX_DAC1_Init+0x6c>)
 8001296:	f002 fd88 	bl	8003daa <HAL_DAC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012a0:	f000 fb62 	bl	8001968 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80012a4:	2302      	movs	r3, #2
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80012b4:	231e      	movs	r3, #30
 80012b6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80012c0:	2304      	movs	r3, #4
 80012c2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	@ (80012e8 <MX_DAC1_Init+0x6c>)
 80012d0:	f002 fee0 	bl	8004094 <HAL_DAC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80012da:	f000 fb45 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	@ 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000be8 	.word	0x20000be8
 80012ec:	50000800 	.word	0x50000800

080012f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <MX_TIM6_Init+0x64>)
 8001302:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <MX_TIM6_Init+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <MX_TIM6_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_TIM6_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3541;
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <MX_TIM6_Init+0x64>)
 8001314:	f640 52d5 	movw	r2, #3541	@ 0xdd5
 8001318:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_TIM6_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001320:	480c      	ldr	r0, [pc, #48]	@ (8001354 <MX_TIM6_Init+0x64>)
 8001322:	f004 fe01 	bl	8005f28 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800132c:	f000 fb1c 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001330:	2320      	movs	r3, #32
 8001332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_TIM6_Init+0x64>)
 800133e:	f005 f8f1 	bl	8006524 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001348:	f000 fb0e 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000c5c 	.word	0x20000c5c
 8001358:	40001000 	.word	0x40001000

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <MX_USART2_UART_Init+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a4:	4811      	ldr	r0, [pc, #68]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013a6:	f005 f999 	bl	80066dc <HAL_UART_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013b0:	f000 fada 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013b8:	f006 fb7f 	bl	8007aba <HAL_UARTEx_SetTxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013c2:	f000 fad1 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4808      	ldr	r0, [pc, #32]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013ca:	f006 fbb4 	bl	8007b36 <HAL_UARTEx_SetRxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013d4:	f000 fac8 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_USART2_UART_Init+0x90>)
 80013da:	f006 fb35 	bl	8007a48 <HAL_UARTEx_DisableFifoMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013e4:	f000 fac0 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000ca8 	.word	0x20000ca8
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_DMA_Init+0x60>)
 80013fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fe:	4a15      	ldr	r2, [pc, #84]	@ (8001454 <MX_DMA_Init+0x60>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6493      	str	r3, [r2, #72]	@ 0x48
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <MX_DMA_Init+0x60>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <MX_DMA_Init+0x60>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001416:	4a0f      	ldr	r2, [pc, #60]	@ (8001454 <MX_DMA_Init+0x60>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6493      	str	r3, [r2, #72]	@ 0x48
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <MX_DMA_Init+0x60>)
 8001420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	200b      	movs	r0, #11
 8001430:	f002 fc87 	bl	8003d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001434:	200b      	movs	r0, #11
 8001436:	f002 fc9e 	bl	8003d76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	200c      	movs	r0, #12
 8001440:	f002 fc7f 	bl	8003d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001444:	200c      	movs	r0, #12
 8001446:	f002 fc96 	bl	8003d76 <HAL_NVIC_EnableIRQ>

}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <MX_GPIO_Init+0x90>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a1d      	ldr	r2, [pc, #116]	@ (80014e8 <MX_GPIO_Init+0x90>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <MX_GPIO_Init+0x90>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <MX_GPIO_Init+0x90>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <MX_GPIO_Init+0x90>)
 800148c:	f043 0320 	orr.w	r3, r3, #32
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <MX_GPIO_Init+0x90>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <MX_GPIO_Init+0x90>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <MX_GPIO_Init+0x90>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_GPIO_Init+0x90>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2120      	movs	r1, #32
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014be:	f003 fceb 	bl	8004e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014c2:	2320      	movs	r3, #32
 80014c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014dc:	f003 fb5a 	bl	8004b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	00000000 	.word	0x00000000

080014f0 <make_sine_tables>:

/* USER CODE BEGIN 4 */
void make_sine_tables(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < TABLE_SIZE; i++) {
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e060      	b.n	80015be <make_sine_tables+0xce>
		// 1200 Hz sine wave
		float t_mark = (2.0f * M_PI * FREQ_MARK * i) / SAMPLE_RATE;
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f7ff f839 	bl	8000574 <__aeabi_i2d>
 8001502:	a33a      	add	r3, pc, #232	@ (adr r3, 80015ec <make_sine_tables+0xfc>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f89e 	bl	8000648 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	a330      	add	r3, pc, #192	@ (adr r3, 80015d8 <make_sine_tables+0xe8>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f9bf 	bl	800089c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb29 	bl	8000b7c <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	60bb      	str	r3, [r7, #8]
		sine1200[i] = 2048 + (int) (2047 * sinf(t_mark));
 800152e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001532:	f007 f82d 	bl	8008590 <sinf>
 8001536:	eef0 7a40 	vmov.f32	s15, s0
 800153a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80015e0 <make_sine_tables+0xf0>
 800153e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001546:	ee17 3a90 	vmov	r3, s15
 800154a:	b29b      	uxth	r3, r3
 800154c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001550:	b299      	uxth	r1, r3
 8001552:	4a24      	ldr	r2, [pc, #144]	@ (80015e4 <make_sine_tables+0xf4>)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// 2200 Hz sine wave
		float t_space = (2.0f * M_PI * FREQ_SPACE * i) / SAMPLE_RATE;
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff f80a 	bl	8000574 <__aeabi_i2d>
 8001560:	a31b      	add	r3, pc, #108	@ (adr r3, 80015d0 <make_sine_tables+0xe0>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f86f 	bl	8000648 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	a319      	add	r3, pc, #100	@ (adr r3, 80015d8 <make_sine_tables+0xe8>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f990 	bl	800089c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fafa 	bl	8000b7c <__aeabi_d2f>
 8001588:	4603      	mov	r3, r0
 800158a:	607b      	str	r3, [r7, #4]
		sine2200[i] = 2048 + (int) (2047 * sinf(t_space));
 800158c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001590:	f006 fffe 	bl	8008590 <sinf>
 8001594:	eef0 7a40 	vmov.f32	s15, s0
 8001598:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80015e0 <make_sine_tables+0xf0>
 800159c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a4:	ee17 3a90 	vmov	r3, s15
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015ae:	b299      	uxth	r1, r3
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <make_sine_tables+0xf8>)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < TABLE_SIZE; i++) {
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3301      	adds	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80015c2:	dd9b      	ble.n	80014fc <make_sine_tables+0xc>
	}
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	fb853c71 	.word	0xfb853c71
 80015d4:	40caff80 	.word	0x40caff80
 80015d8:	00000000 	.word	0x00000000
 80015dc:	40e77000 	.word	0x40e77000
 80015e0:	44ffe000 	.word	0x44ffe000
 80015e4:	200009d8 	.word	0x200009d8
 80015e8:	20000a58 	.word	0x20000a58
 80015ec:	86bfe4d8 	.word	0x86bfe4d8
 80015f0:	40bd73d2 	.word	0x40bd73d2

080015f4 <afsk_build_char>:
/* ------------------------------------------------------------------------- */
/* Build DAC buffer for one UART-style char */
void afsk_build_char(uint8_t ch) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
	int idx = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]

	// Start bit = SPACE (2200 Hz)
	fill_tone(&dac_buf[idx], SAMPLES_PER_BIT, FREQ_SPACE);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4a20      	ldr	r2, [pc, #128]	@ (8001688 <afsk_build_char+0x94>)
 8001608:	4413      	add	r3, r2
 800160a:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 800168c <afsk_build_char+0x98>
 800160e:	2128      	movs	r1, #40	@ 0x28
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f929 	bl	8001868 <fill_tone>
	idx += SAMPLES_PER_BIT;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3328      	adds	r3, #40	@ 0x28
 800161a:	617b      	str	r3, [r7, #20]

	// Data bits
	for (int b = 0; b < 8; b++) {
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	e01d      	b.n	800165e <afsk_build_char+0x6a>
		int bit = (ch >> b) & 1;
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	fa42 f303 	asr.w	r3, r2, r3
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
		float freq = bit ? FREQ_MARK : FREQ_SPACE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <afsk_build_char+0x46>
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <afsk_build_char+0x9c>)
 8001638:	e000      	b.n	800163c <afsk_build_char+0x48>
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <afsk_build_char+0xa0>)
 800163c:	60bb      	str	r3, [r7, #8]
		fill_tone(&dac_buf[idx], SAMPLES_PER_BIT, freq);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <afsk_build_char+0x94>)
 8001644:	4413      	add	r3, r2
 8001646:	ed97 0a02 	vldr	s0, [r7, #8]
 800164a:	2128      	movs	r1, #40	@ 0x28
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f90b 	bl	8001868 <fill_tone>
		idx += SAMPLES_PER_BIT;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3328      	adds	r3, #40	@ 0x28
 8001656:	617b      	str	r3, [r7, #20]
	for (int b = 0; b < 8; b++) {
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	3301      	adds	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b07      	cmp	r3, #7
 8001662:	ddde      	ble.n	8001622 <afsk_build_char+0x2e>
	}

	// Stop bit = MARK (1200 Hz)
	fill_tone(&dac_buf[idx], SAMPLES_PER_BIT, FREQ_MARK);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <afsk_build_char+0x94>)
 800166a:	4413      	add	r3, r2
 800166c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001698 <afsk_build_char+0xa4>
 8001670:	2128      	movs	r1, #40	@ 0x28
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f8f8 	bl	8001868 <fill_tone>
	idx += SAMPLES_PER_BIT;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3328      	adds	r3, #40	@ 0x28
 800167c:	617b      	str	r3, [r7, #20]
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000078 	.word	0x20000078
 800168c:	45098000 	.word	0x45098000
 8001690:	44960000 	.word	0x44960000
 8001694:	45098000 	.word	0x45098000
 8001698:	44960000 	.word	0x44960000

0800169c <goertzel_decode_bit>:

/* ------------------------------------------------------------------------- */
/* Goertzel: detect 1200 vs 2200 Hz */
uint8_t goertzel_decode_bit(uint16_t *samples) {
 800169c:	b480      	push	{r7}
 800169e:	b08f      	sub	sp, #60	@ 0x3c
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	float coeff1200 = 2 * cosf(2 * M_PI * FREQ_MARK / SAMPLE_RATE);
 80016a4:	4b4b      	ldr	r3, [pc, #300]	@ (80017d4 <goertzel_decode_bit+0x138>)
 80016a6:	623b      	str	r3, [r7, #32]
	float coeff2200 = 2 * cosf(2 * M_PI * FREQ_SPACE / SAMPLE_RATE);
 80016a8:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <goertzel_decode_bit+0x13c>)
 80016aa:	61fb      	str	r3, [r7, #28]

	float s1200 = 0, s1200_prev = 0, s1200_prev2 = 0;
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	@ 0x30
	float s2200 = 0, s2200_prev = 0, s2200_prev2 = 0;
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d4:	e039      	b.n	800174a <goertzel_decode_bit+0xae>
		float x = (float) samples[i] - 2048;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e8:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80017dc <goertzel_decode_bit+0x140>
 80016ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016f0:	edc7 7a02 	vstr	s15, [r7, #8]
		s1200 = x + coeff1200 * s1200_prev - s1200_prev2;
 80016f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80016f8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80016fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001700:	edd7 7a02 	vldr	s15, [r7, #8]
 8001704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001708:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800170c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001710:	edc7 7a06 	vstr	s15, [r7, #24]
		s2200 = x + coeff2200 * s2200_prev - s2200_prev2;
 8001714:	ed97 7a07 	vldr	s14, [r7, #28]
 8001718:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800171c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001720:	edd7 7a02 	vldr	s15, [r7, #8]
 8001724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001728:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800172c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001730:	edc7 7a05 	vstr	s15, [r7, #20]
		s1200_prev2 = s1200_prev;
 8001734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001736:	633b      	str	r3, [r7, #48]	@ 0x30
		s1200_prev = s1200;
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34
		s2200_prev2 = s2200_prev;
 800173c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
		s2200_prev = s2200;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	3301      	adds	r3, #1
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	2b27      	cmp	r3, #39	@ 0x27
 800174e:	ddc2      	ble.n	80016d6 <goertzel_decode_bit+0x3a>
	}

	float power1200 = s1200_prev2 * s1200_prev2 + s1200_prev * s1200_prev
 8001750:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001754:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001758:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800175c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001760:	ee37 7a27 	vadd.f32	s14, s14, s15
			- coeff1200 * s1200_prev * s1200_prev2;
 8001764:	edd7 6a08 	vldr	s13, [r7, #32]
 8001768:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800176c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001770:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float power1200 = s1200_prev2 * s1200_prev2 + s1200_prev * s1200_prev
 8001778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177c:	edc7 7a04 	vstr	s15, [r7, #16]
	float power2200 = s2200_prev2 * s2200_prev2 + s2200_prev * s2200_prev
 8001780:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001784:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001788:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800178c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001790:	ee37 7a27 	vadd.f32	s14, s14, s15
			- coeff2200 * s2200_prev * s2200_prev2;
 8001794:	edd7 6a07 	vldr	s13, [r7, #28]
 8001798:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800179c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017a0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float power2200 = s2200_prev2 * s2200_prev2 + s2200_prev * s2200_prev
 80017a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ac:	edc7 7a03 	vstr	s15, [r7, #12]

	return (power1200 > power2200) ? 1 : 0;
 80017b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80017b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	bfcc      	ite	gt
 80017c2:	2301      	movgt	r3, #1
 80017c4:	2300      	movle	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	373c      	adds	r7, #60	@ 0x3c
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	3ffcd925 	.word	0x3ffcd925
 80017d8:	3ff57536 	.word	0x3ff57536
 80017dc:	45000000 	.word	0x45000000

080017e0 <afsk_receive_char>:

/* ------------------------------------------------------------------------- */
/* Decode one character from ADC buffer */
uint8_t afsk_receive_char(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
	int idx = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
	uint8_t ch = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	72fb      	strb	r3, [r7, #11]

	// skip start bit
	idx += SAMPLES_PER_BIT;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3328      	adds	r3, #40	@ 0x28
 80017f2:	60fb      	str	r3, [r7, #12]

	// decode 8 bits
	for (int b = 0; b < 8; b++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	e018      	b.n	800182c <afsk_receive_char+0x4c>
		uint8_t bit = goertzel_decode_bit((uint16_t*) &adc_buf[idx]);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4a0f      	ldr	r2, [pc, #60]	@ (800183c <afsk_receive_char+0x5c>)
 8001800:	4413      	add	r3, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff4a 	bl	800169c <goertzel_decode_bit>
 8001808:	4603      	mov	r3, r0
 800180a:	70fb      	strb	r3, [r7, #3]

		ch |= (bit << b);
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	b25a      	sxtb	r2, r3
 8001816:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	72fb      	strb	r3, [r7, #11]
		idx += SAMPLES_PER_BIT;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3328      	adds	r3, #40	@ 0x28
 8001824:	60fb      	str	r3, [r7, #12]
	for (int b = 0; b < 8; b++) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b07      	cmp	r3, #7
 8001830:	dde3      	ble.n	80017fa <afsk_receive_char+0x1a>
	}

	// stop bit ignored
	return ch;
 8001832:	7afb      	ldrb	r3, [r7, #11]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000398 	.word	0x20000398

08001840 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001850:	d102      	bne.n	8001858 <HAL_ADC_ConvCpltCallback+0x18>
		adc_done = 1;
 8001852:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <HAL_ADC_ConvCpltCallback+0x24>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
	}
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	20000ad8 	.word	0x20000ad8

08001868 <fill_tone>:

void fill_tone(uint16_t *buf, int samples, float freq) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	ed87 0a01 	vstr	s0, [r7, #4]
	static float phase = 0;
	float step = 2.0f * M_PI * freq / SAMPLE_RATE;
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe fe8e 	bl	8000598 <__aeabi_f2d>
 800187c:	a334      	add	r3, pc, #208	@ (adr r3, 8001950 <fill_tone+0xe8>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe fee1 	bl	8000648 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	a334      	add	r3, pc, #208	@ (adr r3, 8001960 <fill_tone+0xf8>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7ff f802 	bl	800089c <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f96c 	bl	8000b7c <__aeabi_d2f>
 80018a4:	4603      	mov	r3, r0
 80018a6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < samples; i++) {
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e046      	b.n	800193c <fill_tone+0xd4>
		buf[i] = DAC_OFFS + (int) (DAC_AMPL * sinf(phase));
 80018ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <fill_tone+0xf0>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	f006 fe6a 	bl	8008590 <sinf>
 80018bc:	eef0 7a40 	vmov.f32	s15, s0
 80018c0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800195c <fill_tone+0xf4>
 80018c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018cc:	ee17 3a90 	vmov	r3, s15
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	68f9      	ldr	r1, [r7, #12]
 80018d8:	440b      	add	r3, r1
 80018da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018de:	b292      	uxth	r2, r2
 80018e0:	801a      	strh	r2, [r3, #0]
		phase += step;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <fill_tone+0xf0>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <fill_tone+0xf0>)
 80018f2:	edc3 7a00 	vstr	s15, [r3]
		if (phase >= 2.0f * M_PI)
 80018f6:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <fill_tone+0xf0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe4c 	bl	8000598 <__aeabi_f2d>
 8001900:	a313      	add	r3, pc, #76	@ (adr r3, 8001950 <fill_tone+0xe8>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7ff f925 	bl	8000b54 <__aeabi_dcmpge>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d012      	beq.n	8001936 <fill_tone+0xce>
			phase -= 2.0f * M_PI;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <fill_tone+0xf0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe3f 	bl	8000598 <__aeabi_f2d>
 800191a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001950 <fill_tone+0xe8>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fcda 	bl	80002d8 <__aeabi_dsub>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f926 	bl	8000b7c <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	4a09      	ldr	r2, [pc, #36]	@ (8001958 <fill_tone+0xf0>)
 8001934:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < samples; i++) {
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbb4      	blt.n	80018ae <fill_tone+0x46>
	}
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	54442d18 	.word	0x54442d18
 8001954:	401921fb 	.word	0x401921fb
 8001958:	20000d3c 	.word	0x20000d3c
 800195c:	44ffe000 	.word	0x44ffe000
 8001960:	00000000 	.word	0x00000000
 8001964:	40e77000 	.word	0x40e77000

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <Error_Handler+0x8>

08001974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_MspInit+0x44>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197e:	4a0e      	ldr	r2, [pc, #56]	@ (80019b8 <HAL_MspInit+0x44>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6613      	str	r3, [r2, #96]	@ 0x60
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <HAL_MspInit+0x44>)
 8001988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_MspInit+0x44>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001996:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <HAL_MspInit+0x44>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800199c:	6593      	str	r3, [r2, #88]	@ 0x58
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_MspInit+0x44>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019aa:	f003 fb31 	bl	8005010 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b09e      	sub	sp, #120	@ 0x78
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	2254      	movs	r2, #84	@ 0x54
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f006 f959 	bl	8007c94 <memset>
  if(hadc->Instance==ADC1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019ea:	d168      	bne.n	8001abe <HAL_ADC_MspInit+0x102>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019f2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019f6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 f845 	bl	8005a8c <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a08:	f7ff ffae 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <HAL_ADC_MspInit+0x10c>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac8 <HAL_ADC_MspInit+0x10c>)
 8001a12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_ADC_MspInit+0x10c>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a24:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_ADC_MspInit+0x10c>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a28:	4a27      	ldr	r2, [pc, #156]	@ (8001ac8 <HAL_ADC_MspInit+0x10c>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a30:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <HAL_ADC_MspInit+0x10c>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a40:	2303      	movs	r3, #3
 8001a42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a52:	f003 f89f 	bl	8004b94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a56:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <HAL_ADC_MspInit+0x114>)
 8001a5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a5e:	2205      	movs	r2, #5
 8001a60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a70:	2280      	movs	r2, #128	@ 0x80
 8001a72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a74:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a86:	2220      	movs	r2, #32
 8001a88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a92:	480e      	ldr	r0, [pc, #56]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001a94:	f002 fd4c 	bl	8004530 <HAL_DMA_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001a9e:	f7ff ff63 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001aa6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001aa8:	4a08      	ldr	r2, [pc, #32]	@ (8001acc <HAL_ADC_MspInit+0x110>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2012      	movs	r0, #18
 8001ab4:	f002 f945 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ab8:	2012      	movs	r0, #18
 8001aba:	f002 f95c 	bl	8003d76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001abe:	bf00      	nop
 8001ac0:	3778      	adds	r7, #120	@ 0x78
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	20000b88 	.word	0x20000b88
 8001ad0:	40020008 	.word	0x40020008

08001ad4 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb0 <HAL_DAC_MspInit+0xdc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d158      	bne.n	8001ba8 <HAL_DAC_MspInit+0xd4>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001af6:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <HAL_DAC_MspInit+0xe0>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb4 <HAL_DAC_MspInit+0xe0>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b02:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb4 <HAL_DAC_MspInit+0xe0>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b29      	ldr	r3, [pc, #164]	@ (8001bb4 <HAL_DAC_MspInit+0xe0>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	4a28      	ldr	r2, [pc, #160]	@ (8001bb4 <HAL_DAC_MspInit+0xe0>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1a:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <HAL_DAC_MspInit+0xe0>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b26:	2310      	movs	r3, #16
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3c:	f003 f82a 	bl	8004b94 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b42:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <HAL_DAC_MspInit+0xe8>)
 8001b44:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b48:	2206      	movs	r2, #6
 8001b4a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b4e:	2210      	movs	r2, #16
 8001b50:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b52:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b58:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b64:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b6c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b70:	2220      	movs	r2, #32
 8001b72:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b74:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001b7c:	480e      	ldr	r0, [pc, #56]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b7e:	f002 fcd7 	bl	8004530 <HAL_DMA_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001b88:	f7ff feee 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	4a09      	ldr	r2, [pc, #36]	@ (8001bb8 <HAL_DAC_MspInit+0xe4>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2036      	movs	r0, #54	@ 0x36
 8001b9e:	f002 f8d0 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ba2:	2036      	movs	r0, #54	@ 0x36
 8001ba4:	f002 f8e7 	bl	8003d76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	@ 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	50000800 	.word	0x50000800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	20000bfc 	.word	0x20000bfc
 8001bbc:	4002001c 	.word	0x4002001c

08001bc0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <HAL_TIM_Base_MspInit+0x44>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d113      	bne.n	8001bfa <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_TIM_Base_MspInit+0x48>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c08 <HAL_TIM_Base_MspInit+0x48>)
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_TIM_Base_MspInit+0x48>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	2036      	movs	r0, #54	@ 0x36
 8001bf0:	f002 f8a7 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bf4:	2036      	movs	r0, #54	@ 0x36
 8001bf6:	f002 f8be 	bl	8003d76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40001000 	.word	0x40001000
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b09e      	sub	sp, #120	@ 0x78
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	2254      	movs	r2, #84	@ 0x54
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f006 f831 	bl	8007c94 <memset>
  if(huart->Instance==USART2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a23      	ldr	r2, [pc, #140]	@ (8001cc4 <HAL_UART_MspInit+0xb8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d13e      	bne.n	8001cba <HAL_UART_MspInit+0xae>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 ff1f 	bl	8005a8c <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c54:	f7ff fe88 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_UART_MspInit+0xbc>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc8 <HAL_UART_MspInit+0xbc>)
 8001c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c64:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HAL_UART_MspInit+0xbc>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_UART_MspInit+0xbc>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <HAL_UART_MspInit+0xbc>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_UART_MspInit+0xbc>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c88:	230c      	movs	r3, #12
 8001c8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca6:	f002 ff75 	bl	8004b94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2026      	movs	r0, #38	@ 0x26
 8001cb0:	f002 f847 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cb4:	2026      	movs	r0, #38	@ 0x26
 8001cb6:	f002 f85e 	bl	8003d76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cba:	bf00      	nop
 8001cbc:	3778      	adds	r7, #120	@ 0x78
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	40021000 	.word	0x40021000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d22:	f000 f8fd 	bl	8001f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d30:	4802      	ldr	r0, [pc, #8]	@ (8001d3c <DMA1_Channel1_IRQHandler+0x10>)
 8001d32:	f002 fde0 	bl	80048f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000b88 	.word	0x20000b88

08001d40 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <DMA1_Channel2_IRQHandler+0x10>)
 8001d46:	f002 fdd6 	bl	80048f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000bfc 	.word	0x20000bfc

08001d54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <ADC1_2_IRQHandler+0x10>)
 8001d5a:	f000 fdcf 	bl	80028fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000b1c 	.word	0x20000b1c

08001d68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <USART2_IRQHandler+0x10>)
 8001d6e:	f004 fd93 	bl	8006898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000ca8 	.word	0x20000ca8

08001d7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d80:	4803      	ldr	r0, [pc, #12]	@ (8001d90 <TIM6_DAC_IRQHandler+0x14>)
 8001d82:	f004 f999 	bl	80060b8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001d86:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <TIM6_DAC_IRQHandler+0x18>)
 8001d88:	f002 f906 	bl	8003f98 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000c5c 	.word	0x20000c5c
 8001d94:	20000be8 	.word	0x20000be8

08001d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da0:	4a14      	ldr	r2, [pc, #80]	@ (8001df4 <_sbrk+0x5c>)
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <_sbrk+0x60>)
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <_sbrk+0x64>)
 8001db6:	4a12      	ldr	r2, [pc, #72]	@ (8001e00 <_sbrk+0x68>)
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d207      	bcs.n	8001dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc8:	f005 ff6c 	bl	8007ca4 <__errno>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	220c      	movs	r2, #12
 8001dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	e009      	b.n	8001dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dde:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <_sbrk+0x64>)
 8001de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20020000 	.word	0x20020000
 8001df8:	00000400 	.word	0x00000400
 8001dfc:	20000d40 	.word	0x20000d40
 8001e00:	20000e90 	.word	0x20000e90

08001e04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <SystemInit+0x20>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0e:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <SystemInit+0x20>)
 8001e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e28:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e2c:	f7ff ffea 	bl	8001e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e32:	490d      	ldr	r1, [pc, #52]	@ (8001e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e34:	4a0d      	ldr	r2, [pc, #52]	@ (8001e6c <LoopForever+0xe>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e48:	4c0a      	ldr	r4, [pc, #40]	@ (8001e74 <LoopForever+0x16>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e56:	f005 ff2b 	bl	8007cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5a:	f7ff f875 	bl	8000f48 <main>

08001e5e <LoopForever>:

LoopForever:
    b LoopForever
 8001e5e:	e7fe      	b.n	8001e5e <LoopForever>
  ldr   r0, =_estack
 8001e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e6c:	08009494 	.word	0x08009494
  ldr r2, =_sbss
 8001e70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e74:	20000e90 	.word	0x20000e90

08001e78 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC3_IRQHandler>

08001e7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f001 ff51 	bl	8003d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f000 f80e 	bl	8001eac <HAL_InitTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	71fb      	strb	r3, [r7, #7]
 8001e9a:	e001      	b.n	8001ea0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e9c:	f7ff fd6a 	bl	8001974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <HAL_InitTick+0x68>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d022      	beq.n	8001f06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_InitTick+0x6c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <HAL_InitTick+0x68>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 ff5c 	bl	8003d92 <HAL_SYSTICK_Config>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10f      	bne.n	8001f00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b0f      	cmp	r3, #15
 8001ee4:	d809      	bhi.n	8001efa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	f04f 30ff 	mov.w	r0, #4294967295
 8001eee:	f001 ff28 	bl	8003d42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <HAL_InitTick+0x70>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e007      	b.n	8001f0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	e004      	b.n	8001f0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e001      	b.n	8001f0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_IncTick+0x1c>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_IncTick+0x20>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a03      	ldr	r2, [pc, #12]	@ (8001f3c <HAL_IncTick+0x1c>)
 8001f30:	6013      	str	r3, [r2, #0]
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20000d44 	.word	0x20000d44
 8001f40:	20000008 	.word	0x20000008

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000d44 	.word	0x20000d44

08001f5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3360      	adds	r3, #96	@ 0x60
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <LL_ADC_SetOffset+0x44>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ffc:	bf00      	nop
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	03fff000 	.word	0x03fff000

0800200c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3360      	adds	r3, #96	@ 0x60
 800201a:	461a      	mov	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3360      	adds	r3, #96	@ 0x60
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	431a      	orrs	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800206e:	b480      	push	{r7}
 8002070:	b087      	sub	sp, #28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3360      	adds	r3, #96	@ 0x60
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	431a      	orrs	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002098:	bf00      	nop
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3360      	adds	r3, #96	@ 0x60
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	615a      	str	r2, [r3, #20]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002126:	b480      	push	{r7}
 8002128:	b087      	sub	sp, #28
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3330      	adds	r3, #48	@ 0x30
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	4413      	add	r3, r2
 8002144:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	211f      	movs	r1, #31
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	401a      	ands	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	f003 011f 	and.w	r1, r3, #31
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	431a      	orrs	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002172:	bf00      	nop
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3314      	adds	r3, #20
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0e5b      	lsrs	r3, r3, #25
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	4413      	add	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	0d1b      	lsrs	r3, r3, #20
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2107      	movs	r1, #7
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	401a      	ands	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0d1b      	lsrs	r3, r3, #20
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	431a      	orrs	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002214:	43db      	mvns	r3, r3
 8002216:	401a      	ands	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0318 	and.w	r3, r3, #24
 800221e:	4908      	ldr	r1, [pc, #32]	@ (8002240 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002220:	40d9      	lsrs	r1, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	400b      	ands	r3, r1
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	431a      	orrs	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	0007ffff 	.word	0x0007ffff

08002244 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 031f 	and.w	r3, r3, #31
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800228c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6093      	str	r3, [r2, #8]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022b4:	d101      	bne.n	80022ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002304:	d101      	bne.n	800230a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002328:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800232c:	f043 0201 	orr.w	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <LL_ADC_IsEnabled+0x18>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <LL_ADC_IsEnabled+0x1a>
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002376:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800237a:	f043 0204 	orr.w	r2, r3, #4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d101      	bne.n	80023a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d101      	bne.n	80023cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1a9      	b.n	800274a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fad9 	bl	80019bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff3f 	bl	80022a0 <LL_ADC_IsDeepPowerDownEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff25 	bl	800227c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff5a 	bl	80022f0 <LL_ADC_IsInternalRegulatorEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff3e 	bl	80022c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244c:	4b9c      	ldr	r3, [pc, #624]	@ (80026c0 <HAL_ADC_Init+0x2e4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	4a9c      	ldr	r2, [pc, #624]	@ (80026c4 <HAL_ADC_Init+0x2e8>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002460:	e002      	b.n	8002468 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3b01      	subs	r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff3c 	bl	80022f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff75 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 80024a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 8142 	bne.w	8002738 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 813e 	bne.w	8002738 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024c4:	f043 0202 	orr.w	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff35 	bl	8002340 <LL_ADC_IsEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d141      	bne.n	8002560 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024e4:	d004      	beq.n	80024f0 <HAL_ADC_Init+0x114>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a77      	ldr	r2, [pc, #476]	@ (80026c8 <HAL_ADC_Init+0x2ec>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d10f      	bne.n	8002510 <HAL_ADC_Init+0x134>
 80024f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80024f4:	f7ff ff24 	bl	8002340 <LL_ADC_IsEnabled>
 80024f8:	4604      	mov	r4, r0
 80024fa:	4873      	ldr	r0, [pc, #460]	@ (80026c8 <HAL_ADC_Init+0x2ec>)
 80024fc:	f7ff ff20 	bl	8002340 <LL_ADC_IsEnabled>
 8002500:	4603      	mov	r3, r0
 8002502:	4323      	orrs	r3, r4
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	e012      	b.n	8002536 <HAL_ADC_Init+0x15a>
 8002510:	486e      	ldr	r0, [pc, #440]	@ (80026cc <HAL_ADC_Init+0x2f0>)
 8002512:	f7ff ff15 	bl	8002340 <LL_ADC_IsEnabled>
 8002516:	4604      	mov	r4, r0
 8002518:	486d      	ldr	r0, [pc, #436]	@ (80026d0 <HAL_ADC_Init+0x2f4>)
 800251a:	f7ff ff11 	bl	8002340 <LL_ADC_IsEnabled>
 800251e:	4603      	mov	r3, r0
 8002520:	431c      	orrs	r4, r3
 8002522:	486c      	ldr	r0, [pc, #432]	@ (80026d4 <HAL_ADC_Init+0x2f8>)
 8002524:	f7ff ff0c 	bl	8002340 <LL_ADC_IsEnabled>
 8002528:	4603      	mov	r3, r0
 800252a:	4323      	orrs	r3, r4
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d012      	beq.n	8002560 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002542:	d004      	beq.n	800254e <HAL_ADC_Init+0x172>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a5f      	ldr	r2, [pc, #380]	@ (80026c8 <HAL_ADC_Init+0x2ec>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Init+0x176>
 800254e:	4a62      	ldr	r2, [pc, #392]	@ (80026d8 <HAL_ADC_Init+0x2fc>)
 8002550:	e000      	b.n	8002554 <HAL_ADC_Init+0x178>
 8002552:	4a62      	ldr	r2, [pc, #392]	@ (80026dc <HAL_ADC_Init+0x300>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f7ff fcfe 	bl	8001f5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7f5b      	ldrb	r3, [r3, #29]
 8002564:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800256a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002570:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002576:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800257e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800258a:	2b01      	cmp	r3, #1
 800258c:	d106      	bne.n	800259c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002592:	3b01      	subs	r3, #1
 8002594:	045b      	lsls	r3, r3, #17
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b48      	ldr	r3, [pc, #288]	@ (80026e0 <HAL_ADC_Init+0x304>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fee4 	bl	80023b4 <LL_ADC_INJ_IsConversionOngoing>
 80025ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d17f      	bne.n	80026f4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d17c      	bne.n	80026f4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002606:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002616:	f023 0302 	bic.w	r3, r3, #2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	430b      	orrs	r3, r1
 8002622:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d017      	beq.n	800265c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800263a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002644:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002648:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6911      	ldr	r1, [r2, #16]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	430b      	orrs	r3, r1
 8002656:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800265a:	e013      	b.n	8002684 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800266a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800267c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002680:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800268a:	2b01      	cmp	r3, #1
 800268c:	d12a      	bne.n	80026e4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80026aa:	4311      	orrs	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026b0:	430a      	orrs	r2, r1
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	e019      	b.n	80026f4 <HAL_ADC_Init+0x318>
 80026c0:	20000000 	.word	0x20000000
 80026c4:	053e2d63 	.word	0x053e2d63
 80026c8:	50000100 	.word	0x50000100
 80026cc:	50000400 	.word	0x50000400
 80026d0:	50000500 	.word	0x50000500
 80026d4:	50000600 	.word	0x50000600
 80026d8:	50000300 	.word	0x50000300
 80026dc:	50000700 	.word	0x50000700
 80026e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10c      	bne.n	8002716 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f023 010f 	bic.w	r1, r3, #15
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
 8002714:	e007      	b.n	8002726 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 020f 	bic.w	r2, r2, #15
 8002724:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002736:	e007      	b.n	8002748 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002748:	7ffb      	ldrb	r3, [r7, #31]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	@ 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd90      	pop	{r4, r7, pc}
 8002752:	bf00      	nop

08002754 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002768:	d004      	beq.n	8002774 <HAL_ADC_Start_DMA+0x20>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5a      	ldr	r2, [pc, #360]	@ (80028d8 <HAL_ADC_Start_DMA+0x184>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_ADC_Start_DMA+0x24>
 8002774:	4b59      	ldr	r3, [pc, #356]	@ (80028dc <HAL_ADC_Start_DMA+0x188>)
 8002776:	e000      	b.n	800277a <HAL_ADC_Start_DMA+0x26>
 8002778:	4b59      	ldr	r3, [pc, #356]	@ (80028e0 <HAL_ADC_Start_DMA+0x18c>)
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fd62 	bl	8002244 <LL_ADC_GetMultimode>
 8002780:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fe01 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 809b 	bne.w	80028ca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x4e>
 800279e:	2302      	movs	r3, #2
 80027a0:	e096      	b.n	80028d0 <HAL_ADC_Start_DMA+0x17c>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4d      	ldr	r2, [pc, #308]	@ (80028e4 <HAL_ADC_Start_DMA+0x190>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d008      	beq.n	80027c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d002      	beq.n	80027c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b09      	cmp	r3, #9
 80027c4:	d17a      	bne.n	80028bc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 ff56 	bl	8003678 <ADC_Enable>
 80027cc:	4603      	mov	r3, r0
 80027ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d16d      	bne.n	80028b2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3a      	ldr	r2, [pc, #232]	@ (80028d8 <HAL_ADC_Start_DMA+0x184>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_ADC_Start_DMA+0xb4>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3b      	ldr	r2, [pc, #236]	@ (80028e8 <HAL_ADC_Start_DMA+0x194>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d002      	beq.n	8002804 <HAL_ADC_Start_DMA+0xb0>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e003      	b.n	800280c <HAL_ADC_Start_DMA+0xb8>
 8002804:	4b39      	ldr	r3, [pc, #228]	@ (80028ec <HAL_ADC_Start_DMA+0x198>)
 8002806:	e001      	b.n	800280c <HAL_ADC_Start_DMA+0xb8>
 8002808:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	4293      	cmp	r3, r2
 8002812:	d002      	beq.n	800281a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d006      	beq.n	8002840 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002836:	f023 0206 	bic.w	r2, r3, #6
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	661a      	str	r2, [r3, #96]	@ 0x60
 800283e:	e002      	b.n	8002846 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284a:	4a29      	ldr	r2, [pc, #164]	@ (80028f0 <HAL_ADC_Start_DMA+0x19c>)
 800284c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002852:	4a28      	ldr	r2, [pc, #160]	@ (80028f4 <HAL_ADC_Start_DMA+0x1a0>)
 8002854:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285a:	4a27      	ldr	r2, [pc, #156]	@ (80028f8 <HAL_ADC_Start_DMA+0x1a4>)
 800285c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	221c      	movs	r2, #28
 8002864:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0210 	orr.w	r2, r2, #16
 800287c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3340      	adds	r3, #64	@ 0x40
 8002898:	4619      	mov	r1, r3
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f001 feef 	bl	8004680 <HAL_DMA_Start_IT>
 80028a2:	4603      	mov	r3, r0
 80028a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fd5b 	bl	8002366 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80028b0:	e00d      	b.n	80028ce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80028ba:	e008      	b.n	80028ce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80028c8:	e001      	b.n	80028ce <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	50000100 	.word	0x50000100
 80028dc:	50000300 	.word	0x50000300
 80028e0:	50000700 	.word	0x50000700
 80028e4:	50000600 	.word	0x50000600
 80028e8:	50000500 	.word	0x50000500
 80028ec:	50000400 	.word	0x50000400
 80028f0:	080037a5 	.word	0x080037a5
 80028f4:	0800387d 	.word	0x0800387d
 80028f8:	08003899 	.word	0x08003899

080028fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002920:	d004      	beq.n	800292c <HAL_ADC_IRQHandler+0x30>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a8e      	ldr	r2, [pc, #568]	@ (8002b60 <HAL_ADC_IRQHandler+0x264>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_ADC_IRQHandler+0x34>
 800292c:	4b8d      	ldr	r3, [pc, #564]	@ (8002b64 <HAL_ADC_IRQHandler+0x268>)
 800292e:	e000      	b.n	8002932 <HAL_ADC_IRQHandler+0x36>
 8002930:	4b8d      	ldr	r3, [pc, #564]	@ (8002b68 <HAL_ADC_IRQHandler+0x26c>)
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fc86 	bl	8002244 <LL_ADC_GetMultimode>
 8002938:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d017      	beq.n	8002974 <HAL_ADC_IRQHandler+0x78>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d012      	beq.n	8002974 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fffe 	bl	8003968 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2202      	movs	r2, #2
 8002972:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_ADC_IRQHandler+0x8c>
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8094 	beq.w	8002abc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 808e 	beq.w	8002abc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fb9f 	bl	8002100 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d072      	beq.n	8002aae <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a64      	ldr	r2, [pc, #400]	@ (8002b60 <HAL_ADC_IRQHandler+0x264>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_ADC_IRQHandler+0xea>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a65      	ldr	r2, [pc, #404]	@ (8002b6c <HAL_ADC_IRQHandler+0x270>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_IRQHandler+0xe6>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e003      	b.n	80029ea <HAL_ADC_IRQHandler+0xee>
 80029e2:	4b63      	ldr	r3, [pc, #396]	@ (8002b70 <HAL_ADC_IRQHandler+0x274>)
 80029e4:	e001      	b.n	80029ea <HAL_ADC_IRQHandler+0xee>
 80029e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d008      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d002      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d104      	bne.n	8002a0e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	e014      	b.n	8002a38 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a53      	ldr	r2, [pc, #332]	@ (8002b60 <HAL_ADC_IRQHandler+0x264>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d009      	beq.n	8002a2c <HAL_ADC_IRQHandler+0x130>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a53      	ldr	r2, [pc, #332]	@ (8002b6c <HAL_ADC_IRQHandler+0x270>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d002      	beq.n	8002a28 <HAL_ADC_IRQHandler+0x12c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	e003      	b.n	8002a30 <HAL_ADC_IRQHandler+0x134>
 8002a28:	4b51      	ldr	r3, [pc, #324]	@ (8002b70 <HAL_ADC_IRQHandler+0x274>)
 8002a2a:	e001      	b.n	8002a30 <HAL_ADC_IRQHandler+0x134>
 8002a2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a30:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d135      	bne.n	8002aae <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d12e      	bne.n	8002aae <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fc9a 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11a      	bne.n	8002a96 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 020c 	bic.w	r2, r2, #12
 8002a6e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d112      	bne.n	8002aae <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a94:	e00b      	b.n	8002aae <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	f043 0210 	orr.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe fec6 	bl	8001840 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	220c      	movs	r2, #12
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x1d4>
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80b3 	beq.w	8002c42 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80ad 	beq.w	8002c42 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fb3a 	bl	800217e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b0a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff faf5 	bl	8002100 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b16:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a10      	ldr	r2, [pc, #64]	@ (8002b60 <HAL_ADC_IRQHandler+0x264>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_ADC_IRQHandler+0x23a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a11      	ldr	r2, [pc, #68]	@ (8002b6c <HAL_ADC_IRQHandler+0x270>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d002      	beq.n	8002b32 <HAL_ADC_IRQHandler+0x236>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	e003      	b.n	8002b3a <HAL_ADC_IRQHandler+0x23e>
 8002b32:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <HAL_ADC_IRQHandler+0x274>)
 8002b34:	e001      	b.n	8002b3a <HAL_ADC_IRQHandler+0x23e>
 8002b36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d008      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d002      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b07      	cmp	r3, #7
 8002b52:	d10f      	bne.n	8002b74 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	e01f      	b.n	8002b9e <HAL_ADC_IRQHandler+0x2a2>
 8002b5e:	bf00      	nop
 8002b60:	50000100 	.word	0x50000100
 8002b64:	50000300 	.word	0x50000300
 8002b68:	50000700 	.word	0x50000700
 8002b6c:	50000500 	.word	0x50000500
 8002b70:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a8b      	ldr	r2, [pc, #556]	@ (8002da8 <HAL_ADC_IRQHandler+0x4ac>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x296>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a8a      	ldr	r2, [pc, #552]	@ (8002dac <HAL_ADC_IRQHandler+0x4b0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d002      	beq.n	8002b8e <HAL_ADC_IRQHandler+0x292>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	e003      	b.n	8002b96 <HAL_ADC_IRQHandler+0x29a>
 8002b8e:	4b88      	ldr	r3, [pc, #544]	@ (8002db0 <HAL_ADC_IRQHandler+0x4b4>)
 8002b90:	e001      	b.n	8002b96 <HAL_ADC_IRQHandler+0x29a>
 8002b92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b96:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d047      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d007      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x2c2>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d03f      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d13a      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc8:	2b40      	cmp	r3, #64	@ 0x40
 8002bca:	d133      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d12e      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fbea 	bl	80023b4 <LL_ADC_INJ_IsConversionOngoing>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11a      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bf4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d112      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c1a:	e00b      	b.n	8002c34 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	f043 0210 	orr.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fe6f 	bl	8003918 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2260      	movs	r2, #96	@ 0x60
 8002c40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d011      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x374>
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f8b4 	bl	8002dd0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2280      	movs	r2, #128	@ 0x80
 8002c6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d012      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x3a4>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00d      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fe55 	bl	8003940 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d012      	beq.n	8002cd0 <HAL_ADC_IRQHandler+0x3d4>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fe47 	bl	8003954 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d043      	beq.n	8002d62 <HAL_ADC_IRQHandler+0x466>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d03e      	beq.n	8002d62 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002cec:	2301      	movs	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf0:	e021      	b.n	8002d36 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d00:	d004      	beq.n	8002d0c <HAL_ADC_IRQHandler+0x410>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a28      	ldr	r2, [pc, #160]	@ (8002da8 <HAL_ADC_IRQHandler+0x4ac>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x414>
 8002d0c:	4b29      	ldr	r3, [pc, #164]	@ (8002db4 <HAL_ADC_IRQHandler+0x4b8>)
 8002d0e:	e000      	b.n	8002d12 <HAL_ADC_IRQHandler+0x416>
 8002d10:	4b29      	ldr	r3, [pc, #164]	@ (8002db8 <HAL_ADC_IRQHandler+0x4bc>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff faa4 	bl	8002260 <LL_ADC_GetMultiDMATransfer>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d22:	e008      	b.n	8002d36 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002d32:	2301      	movs	r3, #1
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10e      	bne.n	8002d5a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4c:	f043 0202 	orr.w	r2, r3, #2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f845 	bl	8002de4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2210      	movs	r2, #16
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d018      	beq.n	8002d9e <HAL_ADC_IRQHandler+0x4a2>
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d013      	beq.n	8002d9e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d86:	f043 0208 	orr.w	r2, r3, #8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d96:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fdc7 	bl	800392c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d9e:	bf00      	nop
 8002da0:	3728      	adds	r7, #40	@ 0x28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	50000100 	.word	0x50000100
 8002dac:	50000500 	.word	0x50000500
 8002db0:	50000400 	.word	0x50000400
 8002db4:	50000300 	.word	0x50000300
 8002db8:	50000700 	.word	0x50000700

08002dbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b0b6      	sub	sp, #216	@ 0xd8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x24>
 8002e16:	2302      	movs	r3, #2
 8002e18:	f000 bc13 	b.w	8003642 <HAL_ADC_ConfigChannel+0x84a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fab0 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 83f3 	bne.w	800361c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f7ff f96f 	bl	8002126 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fa9e 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 8002e52:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff faaa 	bl	80023b4 <LL_ADC_INJ_IsConversionOngoing>
 8002e60:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 81d9 	bne.w	8003220 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f040 81d4 	bne.w	8003220 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e80:	d10f      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f7ff f989 	bl	80021a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff f91d 	bl	80020da <LL_ADC_SetSamplingTimeCommonConfig>
 8002ea0:	e00e      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f7ff f978 	bl	80021a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f90d 	bl	80020da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	08db      	lsrs	r3, r3, #3
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d022      	beq.n	8002f28 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6919      	ldr	r1, [r3, #16]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ef2:	f7ff f867 	bl	8001fc4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6919      	ldr	r1, [r3, #16]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	461a      	mov	r2, r3
 8002f04:	f7ff f8b3 	bl	800206e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d102      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x126>
 8002f18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f1c:	e000      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x128>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	461a      	mov	r2, r3
 8002f22:	f7ff f8bf 	bl	80020a4 <LL_ADC_SetOffsetSaturation>
 8002f26:	e17b      	b.n	8003220 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f86c 	bl	800200c <LL_ADC_GetOffsetChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x15c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff f861 	bl	800200c <LL_ADC_GetOffsetChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	f003 021f 	and.w	r2, r3, #31
 8002f52:	e01e      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x19a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f856 	bl	800200c <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e004      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x1b2>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	e018      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x1e4>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002fce:	2320      	movs	r3, #32
 8002fd0:	e004      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d106      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff f825 	bl	8002038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff f809 	bl	800200c <LL_ADC_GetOffsetChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <HAL_ADC_ConfigChannel+0x222>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fffe 	bl	800200c <LL_ADC_GetOffsetChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	0e9b      	lsrs	r3, r3, #26
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	e01e      	b.n	8003058 <HAL_ADC_ConfigChannel+0x260>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe fff3 	bl	800200c <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003038:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800303c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e004      	b.n	8003056 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800304c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x278>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e9b      	lsrs	r3, r3, #26
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	e018      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x2aa>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003084:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003088:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800308c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003094:	2320      	movs	r3, #32
 8003096:	e004      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d106      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2200      	movs	r2, #0
 80030ac:	2101      	movs	r1, #1
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe ffc2 	bl	8002038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2102      	movs	r1, #2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe ffa6 	bl	800200c <LL_ADC_GetOffsetChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x2e8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe ff9b 	bl	800200c <LL_ADC_GetOffsetChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	f003 021f 	and.w	r2, r3, #31
 80030de:	e01e      	b.n	800311e <HAL_ADC_ConfigChannel+0x326>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2102      	movs	r1, #2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe ff90 	bl	800200c <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80030fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003106:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800310e:	2320      	movs	r3, #32
 8003110:	e004      	b.n	800311c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003112:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x33e>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0e9b      	lsrs	r3, r3, #26
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	e016      	b.n	8003164 <HAL_ADC_ConfigChannel+0x36c>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003148:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800314a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800314e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003156:	2320      	movs	r3, #32
 8003158:	e004      	b.n	8003164 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800315a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003164:	429a      	cmp	r2, r3
 8003166:	d106      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	2102      	movs	r1, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe ff61 	bl	8002038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2103      	movs	r1, #3
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe ff45 	bl	800200c <LL_ADC_GetOffsetChannel>
 8003182:	4603      	mov	r3, r0
 8003184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x3aa>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2103      	movs	r1, #3
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe ff3a 	bl	800200c <LL_ADC_GetOffsetChannel>
 8003198:	4603      	mov	r3, r0
 800319a:	0e9b      	lsrs	r3, r3, #26
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	e017      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x3da>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2103      	movs	r1, #3
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe ff2f 	bl	800200c <LL_ADC_GetOffsetChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80031ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80031be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80031c4:	2320      	movs	r3, #32
 80031c6:	e003      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80031c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x3f2>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	0e9b      	lsrs	r3, r3, #26
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	e011      	b.n	800320e <HAL_ADC_ConfigChannel+0x416>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80031f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80031fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003202:	2320      	movs	r3, #32
 8003204:	e003      	b.n	800320e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800320e:	429a      	cmp	r2, r3
 8003210:	d106      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	2103      	movs	r1, #3
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe ff0c 	bl	8002038 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f88b 	bl	8002340 <LL_ADC_IsEnabled>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 813d 	bne.w	80034ac <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6819      	ldr	r1, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	461a      	mov	r2, r3
 8003240:	f7fe ffdc 	bl	80021fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4aa2      	ldr	r2, [pc, #648]	@ (80034d4 <HAL_ADC_ConfigChannel+0x6dc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	f040 812e 	bne.w	80034ac <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x480>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	3301      	adds	r3, #1
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2b09      	cmp	r3, #9
 800326e:	bf94      	ite	ls
 8003270:	2301      	movls	r3, #1
 8003272:	2300      	movhi	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e019      	b.n	80032ac <HAL_ADC_ConfigChannel+0x4b4>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003288:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800328a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e003      	b.n	800329c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	2b09      	cmp	r3, #9
 80032a4:	bf94      	ite	ls
 80032a6:	2301      	movls	r3, #1
 80032a8:	2300      	movhi	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d079      	beq.n	80033a4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x4d4>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	3301      	adds	r3, #1
 80032c4:	069b      	lsls	r3, r3, #26
 80032c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ca:	e015      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x500>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80032da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80032de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3301      	adds	r3, #1
 80032f2:	069b      	lsls	r3, r3, #26
 80032f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x520>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	3301      	adds	r3, #1
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	e017      	b.n	8003348 <HAL_ADC_ConfigChannel+0x550>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003328:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800332a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003330:	2320      	movs	r3, #32
 8003332:	e003      	b.n	800333c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3301      	adds	r3, #1
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	ea42 0103 	orr.w	r1, r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <HAL_ADC_ConfigChannel+0x576>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0e9b      	lsrs	r3, r3, #26
 800335e:	3301      	adds	r3, #1
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	051b      	lsls	r3, r3, #20
 800336c:	e018      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x5a8>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003386:	2320      	movs	r3, #32
 8003388:	e003      	b.n	8003392 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800338a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	3301      	adds	r3, #1
 8003394:	f003 021f 	and.w	r2, r3, #31
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a0:	430b      	orrs	r3, r1
 80033a2:	e07e      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d107      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x5c8>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	3301      	adds	r3, #1
 80033b8:	069b      	lsls	r3, r3, #26
 80033ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033be:	e015      	b.n	80033ec <HAL_ADC_ConfigChannel+0x5f4>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80033d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80033d8:	2320      	movs	r3, #32
 80033da:	e003      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80033dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	069b      	lsls	r3, r3, #26
 80033e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <HAL_ADC_ConfigChannel+0x614>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0e9b      	lsrs	r3, r3, #26
 80033fe:	3301      	adds	r3, #1
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	e017      	b.n	800343c <HAL_ADC_ConfigChannel+0x644>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	61fb      	str	r3, [r7, #28]
  return result;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003424:	2320      	movs	r3, #32
 8003426:	e003      	b.n	8003430 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	3301      	adds	r3, #1
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	ea42 0103 	orr.w	r1, r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x670>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	3301      	adds	r3, #1
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	3b1e      	subs	r3, #30
 8003460:	051b      	lsls	r3, r3, #20
 8003462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003466:	e01b      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x6a8>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	613b      	str	r3, [r7, #16]
  return result;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003480:	2320      	movs	r3, #32
 8003482:	e003      	b.n	800348c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	3301      	adds	r3, #1
 800348e:	f003 021f 	and.w	r2, r3, #31
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	3b1e      	subs	r3, #30
 800349a:	051b      	lsls	r3, r3, #20
 800349c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a6:	4619      	mov	r1, r3
 80034a8:	f7fe fe7c 	bl	80021a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_ADC_ConfigChannel+0x6e0>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80be 	beq.w	8003636 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x6d6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_ADC_ConfigChannel+0x6e4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10a      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x6ec>
 80034ce:	4b04      	ldr	r3, [pc, #16]	@ (80034e0 <HAL_ADC_ConfigChannel+0x6e8>)
 80034d0:	e009      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x6ee>
 80034d2:	bf00      	nop
 80034d4:	407f0000 	.word	0x407f0000
 80034d8:	80080000 	.word	0x80080000
 80034dc:	50000100 	.word	0x50000100
 80034e0:	50000300 	.word	0x50000300
 80034e4:	4b59      	ldr	r3, [pc, #356]	@ (800364c <HAL_ADC_ConfigChannel+0x854>)
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fd5e 	bl	8001fa8 <LL_ADC_GetCommonPathInternalCh>
 80034ec:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a56      	ldr	r2, [pc, #344]	@ (8003650 <HAL_ADC_ConfigChannel+0x858>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d004      	beq.n	8003504 <HAL_ADC_ConfigChannel+0x70c>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a55      	ldr	r2, [pc, #340]	@ (8003654 <HAL_ADC_ConfigChannel+0x85c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d13a      	bne.n	800357a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d134      	bne.n	800357a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003518:	d005      	beq.n	8003526 <HAL_ADC_ConfigChannel+0x72e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4e      	ldr	r2, [pc, #312]	@ (8003658 <HAL_ADC_ConfigChannel+0x860>)
 8003520:	4293      	cmp	r3, r2
 8003522:	f040 8085 	bne.w	8003630 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800352e:	d004      	beq.n	800353a <HAL_ADC_ConfigChannel+0x742>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a49      	ldr	r2, [pc, #292]	@ (800365c <HAL_ADC_ConfigChannel+0x864>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x746>
 800353a:	4a49      	ldr	r2, [pc, #292]	@ (8003660 <HAL_ADC_ConfigChannel+0x868>)
 800353c:	e000      	b.n	8003540 <HAL_ADC_ConfigChannel+0x748>
 800353e:	4a43      	ldr	r2, [pc, #268]	@ (800364c <HAL_ADC_ConfigChannel+0x854>)
 8003540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003544:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f7fe fd19 	bl	8001f82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003550:	4b44      	ldr	r3, [pc, #272]	@ (8003664 <HAL_ADC_ConfigChannel+0x86c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	4a44      	ldr	r2, [pc, #272]	@ (8003668 <HAL_ADC_ConfigChannel+0x870>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800356a:	e002      	b.n	8003572 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3b01      	subs	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f9      	bne.n	800356c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003578:	e05a      	b.n	8003630 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a3b      	ldr	r2, [pc, #236]	@ (800366c <HAL_ADC_ConfigChannel+0x874>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d125      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003584:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d11f      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a31      	ldr	r2, [pc, #196]	@ (800365c <HAL_ADC_ConfigChannel+0x864>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d104      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x7ac>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a34      	ldr	r2, [pc, #208]	@ (8003670 <HAL_ADC_ConfigChannel+0x878>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d047      	beq.n	8003634 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ac:	d004      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x7c0>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2a      	ldr	r2, [pc, #168]	@ (800365c <HAL_ADC_ConfigChannel+0x864>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x7c4>
 80035b8:	4a29      	ldr	r2, [pc, #164]	@ (8003660 <HAL_ADC_ConfigChannel+0x868>)
 80035ba:	e000      	b.n	80035be <HAL_ADC_ConfigChannel+0x7c6>
 80035bc:	4a23      	ldr	r2, [pc, #140]	@ (800364c <HAL_ADC_ConfigChannel+0x854>)
 80035be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f7fe fcda 	bl	8001f82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ce:	e031      	b.n	8003634 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a27      	ldr	r2, [pc, #156]	@ (8003674 <HAL_ADC_ConfigChannel+0x87c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d12d      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d127      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <HAL_ADC_ConfigChannel+0x864>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f8:	d004      	beq.n	8003604 <HAL_ADC_ConfigChannel+0x80c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a17      	ldr	r2, [pc, #92]	@ (800365c <HAL_ADC_ConfigChannel+0x864>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x810>
 8003604:	4a16      	ldr	r2, [pc, #88]	@ (8003660 <HAL_ADC_ConfigChannel+0x868>)
 8003606:	e000      	b.n	800360a <HAL_ADC_ConfigChannel+0x812>
 8003608:	4a10      	ldr	r2, [pc, #64]	@ (800364c <HAL_ADC_ConfigChannel+0x854>)
 800360a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800360e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f7fe fcb4 	bl	8001f82 <LL_ADC_SetCommonPathInternalCh>
 800361a:	e00c      	b.n	8003636 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800362e:	e002      	b.n	8003636 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003630:	bf00      	nop
 8003632:	e000      	b.n	8003636 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003634:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800363e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003642:	4618      	mov	r0, r3
 8003644:	37d8      	adds	r7, #216	@ 0xd8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	50000700 	.word	0x50000700
 8003650:	c3210000 	.word	0xc3210000
 8003654:	90c00010 	.word	0x90c00010
 8003658:	50000600 	.word	0x50000600
 800365c:	50000100 	.word	0x50000100
 8003660:	50000300 	.word	0x50000300
 8003664:	20000000 	.word	0x20000000
 8003668:	053e2d63 	.word	0x053e2d63
 800366c:	c7520000 	.word	0xc7520000
 8003670:	50000500 	.word	0x50000500
 8003674:	cb840000 	.word	0xcb840000

08003678 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7fe fe59 	bl	8002340 <LL_ADC_IsEnabled>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d176      	bne.n	8003782 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	4b3c      	ldr	r3, [pc, #240]	@ (800378c <ADC_Enable+0x114>)
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a6:	f043 0210 	orr.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e062      	b.n	8003784 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fe28 	bl	8002318 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036d0:	d004      	beq.n	80036dc <ADC_Enable+0x64>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003790 <ADC_Enable+0x118>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d101      	bne.n	80036e0 <ADC_Enable+0x68>
 80036dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003794 <ADC_Enable+0x11c>)
 80036de:	e000      	b.n	80036e2 <ADC_Enable+0x6a>
 80036e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003798 <ADC_Enable+0x120>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fc60 	bl	8001fa8 <LL_ADC_GetCommonPathInternalCh>
 80036e8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d013      	beq.n	800371a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036f2:	4b2a      	ldr	r3, [pc, #168]	@ (800379c <ADC_Enable+0x124>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	4a29      	ldr	r2, [pc, #164]	@ (80037a0 <ADC_Enable+0x128>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800370c:	e002      	b.n	8003714 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3b01      	subs	r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f9      	bne.n	800370e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800371a:	f7fe fc13 	bl	8001f44 <HAL_GetTick>
 800371e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003720:	e028      	b.n	8003774 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fe0a 	bl	8002340 <LL_ADC_IsEnabled>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fdee 	bl	8002318 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800373c:	f7fe fc02 	bl	8001f44 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d914      	bls.n	8003774 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d00d      	beq.n	8003774 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375c:	f043 0210 	orr.w	r2, r3, #16
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e007      	b.n	8003784 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d1cf      	bne.n	8003722 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	8000003f 	.word	0x8000003f
 8003790:	50000100 	.word	0x50000100
 8003794:	50000300 	.word	0x50000300
 8003798:	50000700 	.word	0x50000700
 800379c:	20000000 	.word	0x20000000
 80037a0:	053e2d63 	.word	0x053e2d63

080037a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d14b      	bne.n	8003856 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d021      	beq.n	800381c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe fc8f 	bl	8002100 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d032      	beq.n	800384e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d12b      	bne.n	800384e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11f      	bne.n	800384e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	65da      	str	r2, [r3, #92]	@ 0x5c
 800381a:	e018      	b.n	800384e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d111      	bne.n	800384e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d105      	bne.n	800384e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7fd fff6 	bl	8001840 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003854:	e00e      	b.n	8003874 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fabe 	bl	8002de4 <HAL_ADC_ErrorCallback>
}
 8003868:	e004      	b.n	8003874 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003888:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f7ff fa96 	bl	8002dbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b6:	f043 0204 	orr.w	r2, r3, #4
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7ff fa90 	bl	8002de4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <LL_ADC_IsEnabled>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <LL_ADC_IsEnabled+0x18>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <LL_ADC_IsEnabled+0x1a>
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d101      	bne.n	800390a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b0a1      	sub	sp, #132	@ 0x84
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003996:	2302      	movs	r3, #2
 8003998:	e0e7      	b.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039a2:	2300      	movs	r3, #0
 80039a4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039a6:	2300      	movs	r3, #0
 80039a8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039b2:	d102      	bne.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	e009      	b.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6e      	ldr	r2, [pc, #440]	@ (8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d102      	bne.n	80039ca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039c4:	4b6d      	ldr	r3, [pc, #436]	@ (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	e001      	b.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0be      	b.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff7f 	bl	80038f2 <LL_ADC_REG_IsConversionOngoing>
 80039f4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff79 	bl	80038f2 <LL_ADC_REG_IsConversionOngoing>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 80a0 	bne.w	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 809c 	bne.w	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a18:	d004      	beq.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a55      	ldr	r2, [pc, #340]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a24:	4b56      	ldr	r3, [pc, #344]	@ (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a26:	e000      	b.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a28:	4b56      	ldr	r3, [pc, #344]	@ (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a2a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d04b      	beq.n	8003acc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a46:	035b      	lsls	r3, r3, #13
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a58:	d004      	beq.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a45      	ldr	r2, [pc, #276]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d10f      	bne.n	8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a68:	f7ff ff30 	bl	80038cc <LL_ADC_IsEnabled>
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	4841      	ldr	r0, [pc, #260]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a70:	f7ff ff2c 	bl	80038cc <LL_ADC_IsEnabled>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4323      	orrs	r3, r4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e012      	b.n	8003aaa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a84:	483c      	ldr	r0, [pc, #240]	@ (8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a86:	f7ff ff21 	bl	80038cc <LL_ADC_IsEnabled>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	483b      	ldr	r0, [pc, #236]	@ (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a8e:	f7ff ff1d 	bl	80038cc <LL_ADC_IsEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	431c      	orrs	r4, r3
 8003a96:	483c      	ldr	r0, [pc, #240]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a98:	f7ff ff18 	bl	80038cc <LL_ADC_IsEnabled>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4323      	orrs	r3, r4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d056      	beq.n	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ab6:	f023 030f 	bic.w	r3, r3, #15
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	6811      	ldr	r1, [r2, #0]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	6892      	ldr	r2, [r2, #8]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ac8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003aca:	e047      	b.n	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003acc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ad4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ad6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ae0:	d004      	beq.n	8003aec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a23      	ldr	r2, [pc, #140]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10f      	bne.n	8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003aec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003af0:	f7ff feec 	bl	80038cc <LL_ADC_IsEnabled>
 8003af4:	4604      	mov	r4, r0
 8003af6:	481f      	ldr	r0, [pc, #124]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003af8:	f7ff fee8 	bl	80038cc <LL_ADC_IsEnabled>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4323      	orrs	r3, r4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e012      	b.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b0c:	481a      	ldr	r0, [pc, #104]	@ (8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b0e:	f7ff fedd 	bl	80038cc <LL_ADC_IsEnabled>
 8003b12:	4604      	mov	r4, r0
 8003b14:	4819      	ldr	r0, [pc, #100]	@ (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b16:	f7ff fed9 	bl	80038cc <LL_ADC_IsEnabled>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	431c      	orrs	r4, r3
 8003b1e:	481a      	ldr	r0, [pc, #104]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b20:	f7ff fed4 	bl	80038cc <LL_ADC_IsEnabled>
 8003b24:	4603      	mov	r3, r0
 8003b26:	4323      	orrs	r3, r4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d012      	beq.n	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b3e:	f023 030f 	bic.w	r3, r3, #15
 8003b42:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b46:	e009      	b.n	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b5a:	e000      	b.n	8003b5e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3784      	adds	r7, #132	@ 0x84
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	50000100 	.word	0x50000100
 8003b78:	50000400 	.word	0x50000400
 8003b7c:	50000500 	.word	0x50000500
 8003b80:	50000300 	.word	0x50000300
 8003b84:	50000700 	.word	0x50000700
 8003b88:	50000600 	.word	0x50000600

08003b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bbe:	4a04      	ldr	r2, [pc, #16]	@ (8003bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	60d3      	str	r3, [r2, #12]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd8:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <__NVIC_GetPriorityGrouping+0x18>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	f003 0307 	and.w	r3, r3, #7
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	db0b      	blt.n	8003c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	f003 021f 	and.w	r2, r3, #31
 8003c08:	4907      	ldr	r1, [pc, #28]	@ (8003c28 <__NVIC_EnableIRQ+0x38>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2001      	movs	r0, #1
 8003c12:	fa00 f202 	lsl.w	r2, r0, r2
 8003c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	e000e100 	.word	0xe000e100

08003c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	db0a      	blt.n	8003c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	490c      	ldr	r1, [pc, #48]	@ (8003c78 <__NVIC_SetPriority+0x4c>)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	0112      	lsls	r2, r2, #4
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	440b      	add	r3, r1
 8003c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c54:	e00a      	b.n	8003c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4908      	ldr	r1, [pc, #32]	@ (8003c7c <__NVIC_SetPriority+0x50>)
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	3b04      	subs	r3, #4
 8003c64:	0112      	lsls	r2, r2, #4
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	440b      	add	r3, r1
 8003c6a:	761a      	strb	r2, [r3, #24]
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000e100 	.word	0xe000e100
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	@ 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f1c3 0307 	rsb	r3, r3, #7
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	bf28      	it	cs
 8003c9e:	2304      	movcs	r3, #4
 8003ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d902      	bls.n	8003cb0 <NVIC_EncodePriority+0x30>
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3b03      	subs	r3, #3
 8003cae:	e000      	b.n	8003cb2 <NVIC_EncodePriority+0x32>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43da      	mvns	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	43d9      	mvns	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd8:	4313      	orrs	r3, r2
         );
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3724      	adds	r7, #36	@ 0x24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cf8:	d301      	bcc.n	8003cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00f      	b.n	8003d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8003d28 <SysTick_Config+0x40>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d06:	210f      	movs	r1, #15
 8003d08:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0c:	f7ff ff8e 	bl	8003c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <SysTick_Config+0x40>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d16:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <SysTick_Config+0x40>)
 8003d18:	2207      	movs	r2, #7
 8003d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	e000e010 	.word	0xe000e010

08003d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff29 	bl	8003b8c <__NVIC_SetPriorityGrouping>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d50:	f7ff ff40 	bl	8003bd4 <__NVIC_GetPriorityGrouping>
 8003d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f7ff ff90 	bl	8003c80 <NVIC_EncodePriority>
 8003d60:	4602      	mov	r2, r0
 8003d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff5f 	bl	8003c2c <__NVIC_SetPriority>
}
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff33 	bl	8003bf0 <__NVIC_EnableIRQ>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ffa4 	bl	8003ce8 <SysTick_Config>
 8003da0:	4603      	mov	r3, r0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e014      	b.n	8003de6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	791b      	ldrb	r3, [r3, #4]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d105      	bne.n	8003dd2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fd fe81 	bl	8001ad4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b2      	b.n	8003f6e <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	795b      	ldrb	r3, [r3, #5]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_DAC_Start_DMA+0x24>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e0ac      	b.n	8003f6e <HAL_DAC_Start_DMA+0x17e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d129      	bne.n	8003e7a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	4a53      	ldr	r2, [pc, #332]	@ (8003f78 <HAL_DAC_Start_DMA+0x188>)
 8003e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	4a52      	ldr	r2, [pc, #328]	@ (8003f7c <HAL_DAC_Start_DMA+0x18c>)
 8003e34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4a51      	ldr	r2, [pc, #324]	@ (8003f80 <HAL_DAC_Start_DMA+0x190>)
 8003e3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e4c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_DAC_Start_DMA+0x6c>
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d005      	beq.n	8003e66 <HAL_DAC_Start_DMA+0x76>
 8003e5a:	e009      	b.n	8003e70 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	61bb      	str	r3, [r7, #24]
        break;
 8003e64:	e033      	b.n	8003ece <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	61bb      	str	r3, [r7, #24]
        break;
 8003e6e:	e02e      	b.n	8003ece <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3310      	adds	r3, #16
 8003e76:	61bb      	str	r3, [r7, #24]
        break;
 8003e78:	e029      	b.n	8003ece <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4a41      	ldr	r2, [pc, #260]	@ (8003f84 <HAL_DAC_Start_DMA+0x194>)
 8003e80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4a40      	ldr	r2, [pc, #256]	@ (8003f88 <HAL_DAC_Start_DMA+0x198>)
 8003e88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f8c <HAL_DAC_Start_DMA+0x19c>)
 8003e90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_DAC_Start_DMA+0xc0>
 8003ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d005      	beq.n	8003eba <HAL_DAC_Start_DMA+0xca>
 8003eae:	e009      	b.n	8003ec4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3314      	adds	r3, #20
 8003eb6:	61bb      	str	r3, [r7, #24]
        break;
 8003eb8:	e009      	b.n	8003ece <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3318      	adds	r3, #24
 8003ec0:	61bb      	str	r3, [r7, #24]
        break;
 8003ec2:	e004      	b.n	8003ece <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	331c      	adds	r3, #28
 8003eca:	61bb      	str	r3, [r7, #24]
        break;
 8003ecc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d111      	bne.n	8003ef8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ee2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6898      	ldr	r0, [r3, #8]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	f000 fbc7 	bl	8004680 <HAL_DMA_Start_IT>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	77fb      	strb	r3, [r7, #31]
 8003ef6:	e010      	b.n	8003f1a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003f06:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	68d8      	ldr	r0, [r3, #12]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	f000 fbb5 	bl	8004680 <HAL_DMA_Start_IT>
 8003f16:	4603      	mov	r3, r0
 8003f18:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003f20:	7ffb      	ldrb	r3, [r7, #31]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11c      	bne.n	8003f60 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6819      	ldr	r1, [r3, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2201      	movs	r2, #1
 8003f34:	409a      	lsls	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f3e:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <HAL_DAC_Start_DMA+0x1a0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	4a13      	ldr	r2, [pc, #76]	@ (8003f94 <HAL_DAC_Start_DMA+0x1a4>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	099b      	lsrs	r3, r3, #6
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003f50:	e002      	b.n	8003f58 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f9      	bne.n	8003f52 <HAL_DAC_Start_DMA+0x162>
 8003f5e:	e005      	b.n	8003f6c <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f043 0204 	orr.w	r2, r3, #4
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3720      	adds	r7, #32
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	08004409 	.word	0x08004409
 8003f7c:	0800442b 	.word	0x0800442b
 8003f80:	08004447 	.word	0x08004447
 8003f84:	080044c5 	.word	0x080044c5
 8003f88:	080044e7 	.word	0x080044e7
 8003f8c:	08004503 	.word	0x08004503
 8003f90:	20000000 	.word	0x20000000
 8003f94:	053e2d63 	.word	0x053e2d63

08003f98 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fae:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f845 	bl	8004080 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01d      	beq.n	800403c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2204      	movs	r2, #4
 800400e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f043 0202 	orr.w	r2, r3, #2
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004034:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa3a 	bl	80044b0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	@ 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_DAC_ConfigChannel+0x1c>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e1a1      	b.n	80043f8 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	795b      	ldrb	r3, [r3, #5]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_DAC_ConfigChannel+0x32>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e198      	b.n	80043f8 <HAL_DAC_ConfigChannel+0x364>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2202      	movs	r2, #2
 80040d0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d17a      	bne.n	80041d0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80040da:	f7fd ff33 	bl	8001f44 <HAL_GetTick>
 80040de:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d13d      	bne.n	8004162 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040e6:	e018      	b.n	800411a <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80040e8:	f7fd ff2c 	bl	8001f44 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d911      	bls.n	800411a <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f043 0208 	orr.w	r2, r3, #8
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2203      	movs	r2, #3
 8004114:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e16e      	b.n	80043f8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1df      	bne.n	80040e8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004130:	641a      	str	r2, [r3, #64]	@ 0x40
 8004132:	e020      	b.n	8004176 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004134:	f7fd ff06 	bl	8001f44 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d90f      	bls.n	8004162 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004148:	2b00      	cmp	r3, #0
 800414a:	da0a      	bge.n	8004162 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f043 0208 	orr.w	r2, r3, #8
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2203      	movs	r2, #3
 800415c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e14a      	b.n	80043f8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004168:	2b00      	cmp	r3, #0
 800416a:	dbe3      	blt.n	8004134 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	ea02 0103 	and.w	r1, r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	409a      	lsls	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	21ff      	movs	r1, #255	@ 0xff
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	ea02 0103 	and.w	r1, r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	409a      	lsls	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d11d      	bne.n	8004214 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	221f      	movs	r2, #31
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f0:	4013      	ands	r3, r2
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004208:	4313      	orrs	r3, r2
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004212:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2207      	movs	r2, #7
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422c:	4013      	ands	r3, r2
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d102      	bne.n	800423e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004238:	2300      	movs	r3, #0
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	e00f      	b.n	800425e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d102      	bne.n	800424c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004246:	2301      	movs	r3, #1
 8004248:	623b      	str	r3, [r7, #32]
 800424a:	e008      	b.n	800425e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004254:	2301      	movs	r3, #1
 8004256:	623b      	str	r3, [r7, #32]
 8004258:	e001      	b.n	800425e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004280:	4013      	ands	r3, r2
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	791b      	ldrb	r3, [r3, #4]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d102      	bne.n	8004292 <HAL_DAC_ConfigChannel+0x1fe>
 800428c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004290:	e000      	b.n	8004294 <HAL_DAC_ConfigChannel+0x200>
 8004292:	2300      	movs	r3, #0
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ac:	4013      	ands	r3, r2
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	795b      	ldrb	r3, [r3, #5]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d102      	bne.n	80042be <HAL_DAC_ConfigChannel+0x22a>
 80042b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042bc:	e000      	b.n	80042c0 <HAL_DAC_ConfigChannel+0x22c>
 80042be:	2300      	movs	r3, #0
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d114      	bne.n	8004300 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80042d6:	f001 fb5b 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 80042da:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4a48      	ldr	r2, [pc, #288]	@ (8004400 <HAL_DAC_ConfigChannel+0x36c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d904      	bls.n	80042ee <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ec:	e00f      	b.n	800430e <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4a44      	ldr	r2, [pc, #272]	@ (8004404 <HAL_DAC_ConfigChannel+0x370>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d90a      	bls.n	800430c <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fe:	e006      	b.n	800430e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004306:	4313      	orrs	r3, r2
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
 800430a:	e000      	b.n	800430e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800430c:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431c:	4313      	orrs	r3, r2
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004326:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43da      	mvns	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	400a      	ands	r2, r1
 8004344:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004360:	4013      	ands	r3, r2
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004378:	4313      	orrs	r3, r2
 800437a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004382:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6819      	ldr	r1, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	22c0      	movs	r2, #192	@ 0xc0
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	400a      	ands	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	089b      	lsrs	r3, r3, #2
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80043ce:	fa01 f303 	lsl.w	r3, r1, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	ea02 0103 	and.w	r1, r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3728      	adds	r7, #40	@ 0x28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	09896800 	.word	0x09896800
 8004404:	04c4b400 	.word	0x04c4b400

08004408 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004414:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff fe14 	bl	8004044 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	711a      	strb	r2, [r3, #4]
}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff fe0d 	bl	8004058 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004452:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f043 0204 	orr.w	r2, r3, #4
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7ff fe03 	bl	800406c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	711a      	strb	r2, [r3, #4]
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff ffce 	bl	8004474 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	711a      	strb	r2, [r3, #4]
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff ffc7 	bl	8004488 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f043 0204 	orr.w	r2, r3, #4
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff ffbd 	bl	800449c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	711a      	strb	r2, [r3, #4]
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e08d      	b.n	800465e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	4b47      	ldr	r3, [pc, #284]	@ (8004668 <HAL_DMA_Init+0x138>)
 800454a:	429a      	cmp	r2, r3
 800454c:	d80f      	bhi.n	800456e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4b45      	ldr	r3, [pc, #276]	@ (800466c <HAL_DMA_Init+0x13c>)
 8004556:	4413      	add	r3, r2
 8004558:	4a45      	ldr	r2, [pc, #276]	@ (8004670 <HAL_DMA_Init+0x140>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	009a      	lsls	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a42      	ldr	r2, [pc, #264]	@ (8004674 <HAL_DMA_Init+0x144>)
 800456a:	641a      	str	r2, [r3, #64]	@ 0x40
 800456c:	e00e      	b.n	800458c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	4b40      	ldr	r3, [pc, #256]	@ (8004678 <HAL_DMA_Init+0x148>)
 8004576:	4413      	add	r3, r2
 8004578:	4a3d      	ldr	r2, [pc, #244]	@ (8004670 <HAL_DMA_Init+0x140>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	009a      	lsls	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a3c      	ldr	r2, [pc, #240]	@ (800467c <HAL_DMA_Init+0x14c>)
 800458a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80045a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80045b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fa76 	bl	8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ec:	d102      	bne.n	80045f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004608:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d010      	beq.n	8004634 <HAL_DMA_Init+0x104>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d80c      	bhi.n	8004634 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa96 	bl	8004b4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	e008      	b.n	8004646 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40020407 	.word	0x40020407
 800466c:	bffdfff8 	.word	0xbffdfff8
 8004670:	cccccccd 	.word	0xcccccccd
 8004674:	40020000 	.word	0x40020000
 8004678:	bffdfbf8 	.word	0xbffdfbf8
 800467c:	40020400 	.word	0x40020400

08004680 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_DMA_Start_IT+0x20>
 800469c:	2302      	movs	r3, #2
 800469e:	e066      	b.n	800476e <HAL_DMA_Start_IT+0xee>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d155      	bne.n	8004760 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f9bb 	bl	8004a54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d008      	beq.n	80046f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 020e 	orr.w	r2, r2, #14
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e00f      	b.n	8004718 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 020a 	orr.w	r2, r2, #10
 8004716:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004734:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e005      	b.n	800476c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004768:	2302      	movs	r3, #2
 800476a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800476c:	7dfb      	ldrb	r3, [r7, #23]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d005      	beq.n	800479a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2204      	movs	r2, #4
 8004792:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	e037      	b.n	800480a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 020e 	bic.w	r2, r2, #14
 80047a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	f003 021f 	and.w	r2, r3, #31
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	2101      	movs	r1, #1
 80047d8:	fa01 f202 	lsl.w	r2, r1, r2
 80047dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00c      	beq.n	800480a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004808:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d00d      	beq.n	800485c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2204      	movs	r2, #4
 8004844:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
 800485a:	e047      	b.n	80048ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 020e 	bic.w	r2, r2, #14
 800486a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004886:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800488a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004890:	f003 021f 	and.w	r2, r3, #31
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f202 	lsl.w	r2, r1, r2
 800489e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
    }
  }
  return status;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	2204      	movs	r2, #4
 8004918:	409a      	lsls	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4013      	ands	r3, r2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d026      	beq.n	8004970 <HAL_DMA_IRQHandler+0x7a>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d021      	beq.n	8004970 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0204 	bic.w	r2, r2, #4
 8004948:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494e:	f003 021f 	and.w	r2, r3, #31
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	2104      	movs	r1, #4
 8004958:	fa01 f202 	lsl.w	r2, r1, r2
 800495c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004962:	2b00      	cmp	r3, #0
 8004964:	d071      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800496e:	e06c      	b.n	8004a4a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2202      	movs	r2, #2
 800497a:	409a      	lsls	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d02e      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d029      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 020a 	bic.w	r2, r2, #10
 80049aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b8:	f003 021f 	and.w	r2, r3, #31
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	2102      	movs	r1, #2
 80049c2:	fa01 f202 	lsl.w	r2, r1, r2
 80049c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d038      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80049e0:	e033      	b.n	8004a4a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2208      	movs	r2, #8
 80049ec:	409a      	lsls	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d02a      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d025      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 020e 	bic.w	r2, r2, #14
 8004a0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d004      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
}
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a6a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f003 021f 	and.w	r2, r3, #31
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d108      	bne.n	8004ab4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ab2:	e007      	b.n	8004ac4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	4b16      	ldr	r3, [pc, #88]	@ (8004b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d802      	bhi.n	8004aea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004ae4:	4b15      	ldr	r3, [pc, #84]	@ (8004b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e001      	b.n	8004aee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004aea:	4b15      	ldr	r3, [pc, #84]	@ (8004b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004aec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	3b08      	subs	r3, #8
 8004afa:	4a12      	ldr	r2, [pc, #72]	@ (8004b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	009a      	lsls	r2, r3, #2
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a0b      	ldr	r2, [pc, #44]	@ (8004b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2201      	movs	r2, #1
 8004b24:	409a      	lsls	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40020407 	.word	0x40020407
 8004b3c:	40020800 	.word	0x40020800
 8004b40:	40020820 	.word	0x40020820
 8004b44:	cccccccd 	.word	0xcccccccd
 8004b48:	40020880 	.word	0x40020880

08004b4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	461a      	mov	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a08      	ldr	r2, [pc, #32]	@ (8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b6e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	1000823f 	.word	0x1000823f
 8004b90:	40020940 	.word	0x40020940

08004b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ba2:	e15a      	b.n	8004e5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2101      	movs	r1, #1
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 814c 	beq.w	8004e54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d005      	beq.n	8004bd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d130      	bne.n	8004c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	2203      	movs	r2, #3
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4013      	ands	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	f003 0201 	and.w	r2, r3, #1
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d017      	beq.n	8004c72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4013      	ands	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d123      	bne.n	8004cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	08da      	lsrs	r2, r3, #3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3208      	adds	r2, #8
 8004c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	220f      	movs	r2, #15
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	08da      	lsrs	r2, r3, #3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3208      	adds	r2, #8
 8004cc0:	6939      	ldr	r1, [r7, #16]
 8004cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0203 	and.w	r2, r3, #3
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80a6 	beq.w	8004e54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d08:	4b5b      	ldr	r3, [pc, #364]	@ (8004e78 <HAL_GPIO_Init+0x2e4>)
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0c:	4a5a      	ldr	r2, [pc, #360]	@ (8004e78 <HAL_GPIO_Init+0x2e4>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d14:	4b58      	ldr	r3, [pc, #352]	@ (8004e78 <HAL_GPIO_Init+0x2e4>)
 8004d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d20:	4a56      	ldr	r2, [pc, #344]	@ (8004e7c <HAL_GPIO_Init+0x2e8>)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	089b      	lsrs	r3, r3, #2
 8004d26:	3302      	adds	r3, #2
 8004d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	220f      	movs	r2, #15
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d4a:	d01f      	beq.n	8004d8c <HAL_GPIO_Init+0x1f8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004e80 <HAL_GPIO_Init+0x2ec>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d019      	beq.n	8004d88 <HAL_GPIO_Init+0x1f4>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a4b      	ldr	r2, [pc, #300]	@ (8004e84 <HAL_GPIO_Init+0x2f0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <HAL_GPIO_Init+0x1f0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e88 <HAL_GPIO_Init+0x2f4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00d      	beq.n	8004d80 <HAL_GPIO_Init+0x1ec>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a49      	ldr	r2, [pc, #292]	@ (8004e8c <HAL_GPIO_Init+0x2f8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <HAL_GPIO_Init+0x1e8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a48      	ldr	r2, [pc, #288]	@ (8004e90 <HAL_GPIO_Init+0x2fc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <HAL_GPIO_Init+0x1e4>
 8004d74:	2305      	movs	r3, #5
 8004d76:	e00a      	b.n	8004d8e <HAL_GPIO_Init+0x1fa>
 8004d78:	2306      	movs	r3, #6
 8004d7a:	e008      	b.n	8004d8e <HAL_GPIO_Init+0x1fa>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	e006      	b.n	8004d8e <HAL_GPIO_Init+0x1fa>
 8004d80:	2303      	movs	r3, #3
 8004d82:	e004      	b.n	8004d8e <HAL_GPIO_Init+0x1fa>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e002      	b.n	8004d8e <HAL_GPIO_Init+0x1fa>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <HAL_GPIO_Init+0x1fa>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	f002 0203 	and.w	r2, r2, #3
 8004d94:	0092      	lsls	r2, r2, #2
 8004d96:	4093      	lsls	r3, r2
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d9e:	4937      	ldr	r1, [pc, #220]	@ (8004e7c <HAL_GPIO_Init+0x2e8>)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	089b      	lsrs	r3, r3, #2
 8004da4:	3302      	adds	r3, #2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dac:	4b39      	ldr	r3, [pc, #228]	@ (8004e94 <HAL_GPIO_Init+0x300>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	43db      	mvns	r3, r3
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dd0:	4a30      	ldr	r2, [pc, #192]	@ (8004e94 <HAL_GPIO_Init+0x300>)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004e94 <HAL_GPIO_Init+0x300>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	43db      	mvns	r3, r3
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004dfa:	4a26      	ldr	r2, [pc, #152]	@ (8004e94 <HAL_GPIO_Init+0x300>)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e00:	4b24      	ldr	r3, [pc, #144]	@ (8004e94 <HAL_GPIO_Init+0x300>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e24:	4a1b      	ldr	r2, [pc, #108]	@ (8004e94 <HAL_GPIO_Init+0x300>)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e94 <HAL_GPIO_Init+0x300>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	43db      	mvns	r3, r3
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4013      	ands	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e4e:	4a11      	ldr	r2, [pc, #68]	@ (8004e94 <HAL_GPIO_Init+0x300>)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	3301      	adds	r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f47f ae9d 	bne.w	8004ba4 <HAL_GPIO_Init+0x10>
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	48000400 	.word	0x48000400
 8004e84:	48000800 	.word	0x48000800
 8004e88:	48000c00 	.word	0x48000c00
 8004e8c:	48001000 	.word	0x48001000
 8004e90:	48001400 	.word	0x48001400
 8004e94:	40010400 	.word	0x40010400

08004e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	807b      	strh	r3, [r7, #2]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ea8:	787b      	ldrb	r3, [r7, #1]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eae:	887a      	ldrh	r2, [r7, #2]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004eb4:	e002      	b.n	8004ebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eb6:	887a      	ldrh	r2, [r7, #2]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d141      	bne.n	8004f5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee2:	d131      	bne.n	8004f48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ee4:	4b47      	ldr	r3, [pc, #284]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eea:	4a46      	ldr	r2, [pc, #280]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ef4:	4b43      	ldr	r3, [pc, #268]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004efc:	4a41      	ldr	r2, [pc, #260]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f04:	4b40      	ldr	r3, [pc, #256]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2232      	movs	r2, #50	@ 0x32
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	0c9b      	lsrs	r3, r3, #18
 8004f16:	3301      	adds	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f1a:	e002      	b.n	8004f22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f22:	4b38      	ldr	r3, [pc, #224]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2e:	d102      	bne.n	8004f36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f2      	bne.n	8004f1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f36:	4b33      	ldr	r3, [pc, #204]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f42:	d158      	bne.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e057      	b.n	8004ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f48:	4b2e      	ldr	r3, [pc, #184]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f58:	e04d      	b.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f60:	d141      	bne.n	8004fe6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f62:	4b28      	ldr	r3, [pc, #160]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d131      	bne.n	8004fd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f70:	4b24      	ldr	r3, [pc, #144]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f76:	4a23      	ldr	r2, [pc, #140]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f80:	4b20      	ldr	r3, [pc, #128]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f88:	4a1e      	ldr	r2, [pc, #120]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2232      	movs	r2, #50	@ 0x32
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	0c9b      	lsrs	r3, r3, #18
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fa6:	e002      	b.n	8004fae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fae:	4b15      	ldr	r3, [pc, #84]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fba:	d102      	bne.n	8004fc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f2      	bne.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fc2:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fce:	d112      	bne.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e011      	b.n	8004ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fda:	4a0a      	ldr	r2, [pc, #40]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fe4:	e007      	b.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fe6:	4b07      	ldr	r3, [pc, #28]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fee:	4a05      	ldr	r2, [pc, #20]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ff4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40007000 	.word	0x40007000
 8005008:	20000000 	.word	0x20000000
 800500c:	431bde83 	.word	0x431bde83

08005010 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005014:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a04      	ldr	r2, [pc, #16]	@ (800502c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800501a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800501e:	6093      	str	r3, [r2, #8]
}
 8005020:	bf00      	nop
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40007000 	.word	0x40007000

08005030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e2fe      	b.n	8005640 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d075      	beq.n	800513a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800504e:	4b97      	ldr	r3, [pc, #604]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005058:	4b94      	ldr	r3, [pc, #592]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b0c      	cmp	r3, #12
 8005066:	d102      	bne.n	800506e <HAL_RCC_OscConfig+0x3e>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b03      	cmp	r3, #3
 800506c:	d002      	beq.n	8005074 <HAL_RCC_OscConfig+0x44>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d10b      	bne.n	800508c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005074:	4b8d      	ldr	r3, [pc, #564]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d05b      	beq.n	8005138 <HAL_RCC_OscConfig+0x108>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d157      	bne.n	8005138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e2d9      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005094:	d106      	bne.n	80050a4 <HAL_RCC_OscConfig+0x74>
 8005096:	4b85      	ldr	r3, [pc, #532]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a84      	ldr	r2, [pc, #528]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e01d      	b.n	80050e0 <HAL_RCC_OscConfig+0xb0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x98>
 80050ae:	4b7f      	ldr	r3, [pc, #508]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7e      	ldr	r2, [pc, #504]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	4b7c      	ldr	r3, [pc, #496]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a7b      	ldr	r2, [pc, #492]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e00b      	b.n	80050e0 <HAL_RCC_OscConfig+0xb0>
 80050c8:	4b78      	ldr	r3, [pc, #480]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a77      	ldr	r2, [pc, #476]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	4b75      	ldr	r3, [pc, #468]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a74      	ldr	r2, [pc, #464]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d013      	beq.n	8005110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fc ff2c 	bl	8001f44 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fc ff28 	bl	8001f44 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	@ 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e29e      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005102:	4b6a      	ldr	r3, [pc, #424]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0xc0>
 800510e:	e014      	b.n	800513a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fc ff18 	bl	8001f44 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005118:	f7fc ff14 	bl	8001f44 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	@ 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e28a      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800512a:	4b60      	ldr	r3, [pc, #384]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0xe8>
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d075      	beq.n	8005232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005146:	4b59      	ldr	r3, [pc, #356]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005150:	4b56      	ldr	r3, [pc, #344]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d102      	bne.n	8005166 <HAL_RCC_OscConfig+0x136>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d002      	beq.n	800516c <HAL_RCC_OscConfig+0x13c>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d11f      	bne.n	80051ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516c:	4b4f      	ldr	r3, [pc, #316]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_OscConfig+0x154>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e25d      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b49      	ldr	r3, [pc, #292]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	4946      	ldr	r1, [pc, #280]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005198:	4b45      	ldr	r3, [pc, #276]	@ (80052b0 <HAL_RCC_OscConfig+0x280>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fc fe85 	bl	8001eac <HAL_InitTick>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d043      	beq.n	8005230 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e249      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d023      	beq.n	80051fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051b4:	4b3d      	ldr	r3, [pc, #244]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3c      	ldr	r2, [pc, #240]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fc fec0 	bl	8001f44 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c8:	f7fc febc 	bl	8001f44 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e232      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051da:	4b34      	ldr	r3, [pc, #208]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e6:	4b31      	ldr	r3, [pc, #196]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	061b      	lsls	r3, r3, #24
 80051f4:	492d      	ldr	r1, [pc, #180]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
 80051fa:	e01a      	b.n	8005232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051fc:	4b2b      	ldr	r3, [pc, #172]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2a      	ldr	r2, [pc, #168]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005202:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fc fe9c 	bl	8001f44 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005210:	f7fc fe98 	bl	8001f44 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e20e      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005222:	4b22      	ldr	r3, [pc, #136]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x1e0>
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d041      	beq.n	80052c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01c      	beq.n	8005280 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005246:	4b19      	ldr	r3, [pc, #100]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800524c:	4a17      	ldr	r2, [pc, #92]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005256:	f7fc fe75 	bl	8001f44 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800525e:	f7fc fe71 	bl	8001f44 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e1e7      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005270:	4b0e      	ldr	r3, [pc, #56]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0ef      	beq.n	800525e <HAL_RCC_OscConfig+0x22e>
 800527e:	e020      	b.n	80052c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005280:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005286:	4a09      	ldr	r2, [pc, #36]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fc fe58 	bl	8001f44 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005296:	e00d      	b.n	80052b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005298:	f7fc fe54 	bl	8001f44 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d906      	bls.n	80052b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1ca      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052b4:	4b8c      	ldr	r3, [pc, #560]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ea      	bne.n	8005298 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80a6 	beq.w	800541c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052d0:	2300      	movs	r3, #0
 80052d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052d4:	4b84      	ldr	r3, [pc, #528]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_RCC_OscConfig+0x2b4>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x2b6>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00d      	beq.n	8005306 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	4b7f      	ldr	r3, [pc, #508]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ee:	4a7e      	ldr	r2, [pc, #504]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80052f6:	4b7c      	ldr	r3, [pc, #496]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005302:	2301      	movs	r3, #1
 8005304:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005306:	4b79      	ldr	r3, [pc, #484]	@ (80054ec <HAL_RCC_OscConfig+0x4bc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d118      	bne.n	8005344 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005312:	4b76      	ldr	r3, [pc, #472]	@ (80054ec <HAL_RCC_OscConfig+0x4bc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a75      	ldr	r2, [pc, #468]	@ (80054ec <HAL_RCC_OscConfig+0x4bc>)
 8005318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800531c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531e:	f7fc fe11 	bl	8001f44 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005326:	f7fc fe0d 	bl	8001f44 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e183      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005338:	4b6c      	ldr	r3, [pc, #432]	@ (80054ec <HAL_RCC_OscConfig+0x4bc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d108      	bne.n	800535e <HAL_RCC_OscConfig+0x32e>
 800534c:	4b66      	ldr	r3, [pc, #408]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005352:	4a65      	ldr	r2, [pc, #404]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800535c:	e024      	b.n	80053a8 <HAL_RCC_OscConfig+0x378>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b05      	cmp	r3, #5
 8005364:	d110      	bne.n	8005388 <HAL_RCC_OscConfig+0x358>
 8005366:	4b60      	ldr	r3, [pc, #384]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536c:	4a5e      	ldr	r2, [pc, #376]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800536e:	f043 0304 	orr.w	r3, r3, #4
 8005372:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005376:	4b5c      	ldr	r3, [pc, #368]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537c:	4a5a      	ldr	r2, [pc, #360]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005386:	e00f      	b.n	80053a8 <HAL_RCC_OscConfig+0x378>
 8005388:	4b57      	ldr	r3, [pc, #348]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	4a56      	ldr	r2, [pc, #344]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005398:	4b53      	ldr	r3, [pc, #332]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539e:	4a52      	ldr	r2, [pc, #328]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d016      	beq.n	80053de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b0:	f7fc fdc8 	bl	8001f44 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fc fdc4 	bl	8001f44 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e138      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ce:	4b46      	ldr	r3, [pc, #280]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ed      	beq.n	80053b8 <HAL_RCC_OscConfig+0x388>
 80053dc:	e015      	b.n	800540a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053de:	f7fc fdb1 	bl	8001f44 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e4:	e00a      	b.n	80053fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e6:	f7fc fdad 	bl	8001f44 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e121      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053fc:	4b3a      	ldr	r3, [pc, #232]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ed      	bne.n	80053e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800540a:	7ffb      	ldrb	r3, [r7, #31]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d105      	bne.n	800541c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005410:	4b35      	ldr	r3, [pc, #212]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005414:	4a34      	ldr	r2, [pc, #208]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800541a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d03c      	beq.n	80054a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01c      	beq.n	800546a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005430:	4b2d      	ldr	r3, [pc, #180]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005436:	4a2c      	ldr	r2, [pc, #176]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005440:	f7fc fd80 	bl	8001f44 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005448:	f7fc fd7c 	bl	8001f44 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0f2      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800545a:	4b23      	ldr	r3, [pc, #140]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800545c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ef      	beq.n	8005448 <HAL_RCC_OscConfig+0x418>
 8005468:	e01b      	b.n	80054a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800546a:	4b1f      	ldr	r3, [pc, #124]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800546c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005470:	4a1d      	ldr	r2, [pc, #116]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005472:	f023 0301 	bic.w	r3, r3, #1
 8005476:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fc fd63 	bl	8001f44 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005482:	f7fc fd5f 	bl	8001f44 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e0d5      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005494:	4b14      	ldr	r3, [pc, #80]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1ef      	bne.n	8005482 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80c9 	beq.w	800563e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ac:	4b0e      	ldr	r3, [pc, #56]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	f000 8083 	beq.w	80055c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d15e      	bne.n	8005580 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a08      	ldr	r2, [pc, #32]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80054c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fc fd39 	bl	8001f44 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d4:	e00c      	b.n	80054f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fc fd35 	bl	8001f44 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d905      	bls.n	80054f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e0ab      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f0:	4b55      	ldr	r3, [pc, #340]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ec      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054fc:	4b52      	ldr	r3, [pc, #328]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	4b52      	ldr	r3, [pc, #328]	@ (800564c <HAL_RCC_OscConfig+0x61c>)
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6a11      	ldr	r1, [r2, #32]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800550c:	3a01      	subs	r2, #1
 800550e:	0112      	lsls	r2, r2, #4
 8005510:	4311      	orrs	r1, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005516:	0212      	lsls	r2, r2, #8
 8005518:	4311      	orrs	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800551e:	0852      	lsrs	r2, r2, #1
 8005520:	3a01      	subs	r2, #1
 8005522:	0552      	lsls	r2, r2, #21
 8005524:	4311      	orrs	r1, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800552a:	0852      	lsrs	r2, r2, #1
 800552c:	3a01      	subs	r2, #1
 800552e:	0652      	lsls	r2, r2, #25
 8005530:	4311      	orrs	r1, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005536:	06d2      	lsls	r2, r2, #27
 8005538:	430a      	orrs	r2, r1
 800553a:	4943      	ldr	r1, [pc, #268]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 800553c:	4313      	orrs	r3, r2
 800553e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005540:	4b41      	ldr	r3, [pc, #260]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a40      	ldr	r2, [pc, #256]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800554a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800554c:	4b3e      	ldr	r3, [pc, #248]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a3d      	ldr	r2, [pc, #244]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fc fcf4 	bl	8001f44 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005560:	f7fc fcf0 	bl	8001f44 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e066      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005572:	4b35      	ldr	r3, [pc, #212]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x530>
 800557e:	e05e      	b.n	800563e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005580:	4b31      	ldr	r3, [pc, #196]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a30      	ldr	r2, [pc, #192]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800558a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fc fcda 	bl	8001f44 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005594:	f7fc fcd6 	bl	8001f44 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e04c      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055a6:	4b28      	ldr	r3, [pc, #160]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055b2:	4b25      	ldr	r3, [pc, #148]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	4924      	ldr	r1, [pc, #144]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80055b8:	4b25      	ldr	r3, [pc, #148]	@ (8005650 <HAL_RCC_OscConfig+0x620>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	60cb      	str	r3, [r1, #12]
 80055be:	e03e      	b.n	800563e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e039      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f003 0203 	and.w	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d12c      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	3b01      	subs	r3, #1
 80055ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d123      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d11b      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d113      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	3b01      	subs	r3, #1
 8005620:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d109      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	3b01      	subs	r3, #1
 8005634:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005636:	429a      	cmp	r2, r3
 8005638:	d001      	beq.n	800563e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40021000 	.word	0x40021000
 800564c:	019f800c 	.word	0x019f800c
 8005650:	feeefffc 	.word	0xfeeefffc

08005654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e11e      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800566c:	4b91      	ldr	r3, [pc, #580]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d910      	bls.n	800569c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567a:	4b8e      	ldr	r3, [pc, #568]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 020f 	bic.w	r2, r3, #15
 8005682:	498c      	ldr	r1, [pc, #560]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b8a      	ldr	r3, [pc, #552]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e106      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d073      	beq.n	8005790 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d129      	bne.n	8005704 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b0:	4b81      	ldr	r3, [pc, #516]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0f4      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056c0:	f000 f99e 	bl	8005a00 <RCC_GetSysClockFreqFromPLLSource>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4a7c      	ldr	r2, [pc, #496]	@ (80058bc <HAL_RCC_ClockConfig+0x268>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d93f      	bls.n	800574e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056ce:	4b7a      	ldr	r3, [pc, #488]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d033      	beq.n	800574e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d12f      	bne.n	800574e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056ee:	4b72      	ldr	r3, [pc, #456]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056f6:	4a70      	ldr	r2, [pc, #448]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80056f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e024      	b.n	800574e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d107      	bne.n	800571c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800570c:	4b6a      	ldr	r3, [pc, #424]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0c6      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800571c:	4b66      	ldr	r3, [pc, #408]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0be      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800572c:	f000 f8ce 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8005730:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4a61      	ldr	r2, [pc, #388]	@ (80058bc <HAL_RCC_ClockConfig+0x268>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d909      	bls.n	800574e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800573a:	4b5f      	ldr	r3, [pc, #380]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005742:	4a5d      	ldr	r2, [pc, #372]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 8005744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005748:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800574a:	2380      	movs	r3, #128	@ 0x80
 800574c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800574e:	4b5a      	ldr	r3, [pc, #360]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4957      	ldr	r1, [pc, #348]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005760:	f7fc fbf0 	bl	8001f44 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	e00a      	b.n	800577e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7fc fbec 	bl	8001f44 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e095      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	4b4e      	ldr	r3, [pc, #312]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 020c 	and.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	429a      	cmp	r2, r3
 800578e:	d1eb      	bne.n	8005768 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d023      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a8:	4b43      	ldr	r3, [pc, #268]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4a42      	ldr	r2, [pc, #264]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057c0:	4b3d      	ldr	r3, [pc, #244]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057c8:	4a3b      	ldr	r2, [pc, #236]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d0:	4b39      	ldr	r3, [pc, #228]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	4936      	ldr	r1, [pc, #216]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	608b      	str	r3, [r1, #8]
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d105      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057ea:	4b33      	ldr	r3, [pc, #204]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	4a32      	ldr	r2, [pc, #200]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057f6:	4b2f      	ldr	r3, [pc, #188]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d21d      	bcs.n	8005840 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005804:	4b2b      	ldr	r3, [pc, #172]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f023 020f 	bic.w	r2, r3, #15
 800580c:	4929      	ldr	r1, [pc, #164]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	4313      	orrs	r3, r2
 8005812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005814:	f7fc fb96 	bl	8001f44 <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800581a:	e00a      	b.n	8005832 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581c:	f7fc fb92 	bl	8001f44 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e03b      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b20      	ldr	r3, [pc, #128]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d1ed      	bne.n	800581c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800584c:	4b1a      	ldr	r3, [pc, #104]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4917      	ldr	r1, [pc, #92]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800586a:	4b13      	ldr	r3, [pc, #76]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	490f      	ldr	r1, [pc, #60]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800587a:	4313      	orrs	r3, r2
 800587c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800587e:	f000 f825 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8005882:	4602      	mov	r2, r0
 8005884:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	091b      	lsrs	r3, r3, #4
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	490c      	ldr	r1, [pc, #48]	@ (80058c0 <HAL_RCC_ClockConfig+0x26c>)
 8005890:	5ccb      	ldrb	r3, [r1, r3]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <HAL_RCC_ClockConfig+0x270>)
 800589c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800589e:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <HAL_RCC_ClockConfig+0x274>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fc fb02 	bl	8001eac <HAL_InitTick>
 80058a8:	4603      	mov	r3, r0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40022000 	.word	0x40022000
 80058b8:	40021000 	.word	0x40021000
 80058bc:	04c4b400 	.word	0x04c4b400
 80058c0:	08009040 	.word	0x08009040
 80058c4:	20000000 	.word	0x20000000
 80058c8:	20000004 	.word	0x20000004

080058cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d102      	bne.n	80058e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058de:	4b2a      	ldr	r3, [pc, #168]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	e047      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058e4:	4b27      	ldr	r3, [pc, #156]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030c 	and.w	r3, r3, #12
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d102      	bne.n	80058f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058f0:	4b26      	ldr	r3, [pc, #152]	@ (800598c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	e03e      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058f6:	4b23      	ldr	r3, [pc, #140]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d136      	bne.n	8005970 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005902:	4b20      	ldr	r3, [pc, #128]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800590c:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	3301      	adds	r3, #1
 8005918:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d10c      	bne.n	800593a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005920:	4a1a      	ldr	r2, [pc, #104]	@ (800598c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800592a:	68d2      	ldr	r2, [r2, #12]
 800592c:	0a12      	lsrs	r2, r2, #8
 800592e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	617b      	str	r3, [r7, #20]
      break;
 8005938:	e00c      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800593a:	4a13      	ldr	r2, [pc, #76]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	4a10      	ldr	r2, [pc, #64]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005944:	68d2      	ldr	r2, [r2, #12]
 8005946:	0a12      	lsrs	r2, r2, #8
 8005948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800594c:	fb02 f303 	mul.w	r3, r2, r3
 8005950:	617b      	str	r3, [r7, #20]
      break;
 8005952:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005954:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	0e5b      	lsrs	r3, r3, #25
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	3301      	adds	r3, #1
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	fbb2 f3f3 	udiv	r3, r2, r3
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	e001      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005974:	693b      	ldr	r3, [r7, #16]
}
 8005976:	4618      	mov	r0, r3
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40021000 	.word	0x40021000
 8005988:	00f42400 	.word	0x00f42400
 800598c:	007a1200 	.word	0x007a1200

08005990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005994:	4b03      	ldr	r3, [pc, #12]	@ (80059a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005996:	681b      	ldr	r3, [r3, #0]
}
 8005998:	4618      	mov	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000000 	.word	0x20000000

080059a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059ac:	f7ff fff0 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 80059b0:	4602      	mov	r2, r0
 80059b2:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	4904      	ldr	r1, [pc, #16]	@ (80059d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059be:	5ccb      	ldrb	r3, [r1, r3]
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40021000 	.word	0x40021000
 80059d0:	08009050 	.word	0x08009050

080059d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059d8:	f7ff ffda 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	0adb      	lsrs	r3, r3, #11
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	4904      	ldr	r1, [pc, #16]	@ (80059fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ea:	5ccb      	ldrb	r3, [r1, r3]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40021000 	.word	0x40021000
 80059fc:	08009050 	.word	0x08009050

08005a00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a06:	4b1e      	ldr	r3, [pc, #120]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a10:	4b1b      	ldr	r3, [pc, #108]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d10c      	bne.n	8005a3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a24:	4a17      	ldr	r2, [pc, #92]	@ (8005a84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	4a14      	ldr	r2, [pc, #80]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a2e:	68d2      	ldr	r2, [r2, #12]
 8005a30:	0a12      	lsrs	r2, r2, #8
 8005a32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]
    break;
 8005a3c:	e00c      	b.n	8005a58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a3e:	4a12      	ldr	r2, [pc, #72]	@ (8005a88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	4a0e      	ldr	r2, [pc, #56]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a48:	68d2      	ldr	r2, [r2, #12]
 8005a4a:	0a12      	lsrs	r2, r2, #8
 8005a4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]
    break;
 8005a56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a58:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	0e5b      	lsrs	r3, r3, #25
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	3301      	adds	r3, #1
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a72:	687b      	ldr	r3, [r7, #4]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	40021000 	.word	0x40021000
 8005a84:	007a1200 	.word	0x007a1200
 8005a88:	00f42400 	.word	0x00f42400

08005a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a94:	2300      	movs	r3, #0
 8005a96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a98:	2300      	movs	r3, #0
 8005a9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8098 	beq.w	8005bda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aae:	4b43      	ldr	r3, [pc, #268]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10d      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aba:	4b40      	ldr	r3, [pc, #256]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abe:	4a3f      	ldr	r2, [pc, #252]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ace:	60bb      	str	r3, [r7, #8]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a39      	ldr	r2, [pc, #228]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ae2:	f7fc fa2f 	bl	8001f44 <HAL_GetTick>
 8005ae6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ae8:	e009      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aea:	f7fc fa2b 	bl	8001f44 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d902      	bls.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	74fb      	strb	r3, [r7, #19]
        break;
 8005afc:	e005      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afe:	4b30      	ldr	r3, [pc, #192]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0ef      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b0a:	7cfb      	ldrb	r3, [r7, #19]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d159      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b10:	4b2a      	ldr	r3, [pc, #168]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01e      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d019      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b2c:	4b23      	ldr	r3, [pc, #140]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b38:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b48:	4b1c      	ldr	r3, [pc, #112]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b58:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6a:	f7fc f9eb 	bl	8001f44 <HAL_GetTick>
 8005b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b70:	e00b      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b72:	f7fc f9e7 	bl	8001f44 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d902      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	74fb      	strb	r3, [r7, #19]
            break;
 8005b88:	e006      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ec      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b98:	7cfb      	ldrb	r3, [r7, #19]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b9e:	4b07      	ldr	r3, [pc, #28]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bac:	4903      	ldr	r1, [pc, #12]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bb6:	7cfb      	ldrb	r3, [r7, #19]
 8005bb8:	74bb      	strb	r3, [r7, #18]
 8005bba:	e005      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bc8:	7c7b      	ldrb	r3, [r7, #17]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d105      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bce:	4ba7      	ldr	r3, [pc, #668]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd2:	4aa6      	ldr	r2, [pc, #664]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005be6:	4ba1      	ldr	r3, [pc, #644]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bec:	f023 0203 	bic.w	r2, r3, #3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	499d      	ldr	r1, [pc, #628]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c08:	4b98      	ldr	r3, [pc, #608]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0e:	f023 020c 	bic.w	r2, r3, #12
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	4995      	ldr	r1, [pc, #596]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c2a:	4b90      	ldr	r3, [pc, #576]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c30:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	498c      	ldr	r1, [pc, #560]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c4c:	4b87      	ldr	r3, [pc, #540]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	4984      	ldr	r1, [pc, #528]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	497b      	ldr	r1, [pc, #492]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c90:	4b76      	ldr	r3, [pc, #472]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	4973      	ldr	r1, [pc, #460]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	496a      	ldr	r1, [pc, #424]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cd4:	4b65      	ldr	r3, [pc, #404]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	4962      	ldr	r1, [pc, #392]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	4959      	ldr	r1, [pc, #356]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d18:	4b54      	ldr	r3, [pc, #336]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d1e:	f023 0203 	bic.w	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	4951      	ldr	r1, [pc, #324]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d48:	4948      	ldr	r1, [pc, #288]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d015      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d5c:	4b43      	ldr	r3, [pc, #268]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6a:	4940      	ldr	r1, [pc, #256]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d7a:	d105      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	4a3a      	ldr	r2, [pc, #232]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d86:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d015      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d94:	4b35      	ldr	r3, [pc, #212]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da2:	4932      	ldr	r1, [pc, #200]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005db2:	d105      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	4a2c      	ldr	r2, [pc, #176]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dbe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d015      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dcc:	4b27      	ldr	r3, [pc, #156]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	4924      	ldr	r1, [pc, #144]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dea:	d105      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dec:	4b1f      	ldr	r3, [pc, #124]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005df6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d015      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e04:	4b19      	ldr	r3, [pc, #100]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e12:	4916      	ldr	r1, [pc, #88]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e22:	d105      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e24:	4b11      	ldr	r3, [pc, #68]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a10      	ldr	r2, [pc, #64]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d019      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	4908      	ldr	r1, [pc, #32]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e5a:	d109      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e5c:	4b03      	ldr	r3, [pc, #12]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4a02      	ldr	r2, [pc, #8]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e66:	60d3      	str	r3, [r2, #12]
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d015      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e7c:	4b29      	ldr	r3, [pc, #164]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8a:	4926      	ldr	r1, [pc, #152]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e9c:	4b21      	ldr	r3, [pc, #132]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4a20      	ldr	r2, [pc, #128]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d015      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ec2:	4918      	ldr	r1, [pc, #96]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed2:	d105      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ed4:	4b13      	ldr	r3, [pc, #76]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4a12      	ldr	r2, [pc, #72]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ede:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d015      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005eec:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ef2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005efa:	490a      	ldr	r1, [pc, #40]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f0a:	d105      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f0c:	4b05      	ldr	r3, [pc, #20]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4a04      	ldr	r2, [pc, #16]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f18:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40021000 	.word	0x40021000

08005f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e049      	b.n	8005fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fb fe36 	bl	8001bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f000 fa28 	bl	80063bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d001      	beq.n	8005ff0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e04c      	b.n	800608a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a26      	ldr	r2, [pc, #152]	@ (8006098 <HAL_TIM_Base_Start+0xc0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d022      	beq.n	8006048 <HAL_TIM_Base_Start+0x70>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800600a:	d01d      	beq.n	8006048 <HAL_TIM_Base_Start+0x70>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a22      	ldr	r2, [pc, #136]	@ (800609c <HAL_TIM_Base_Start+0xc4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d018      	beq.n	8006048 <HAL_TIM_Base_Start+0x70>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a21      	ldr	r2, [pc, #132]	@ (80060a0 <HAL_TIM_Base_Start+0xc8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <HAL_TIM_Base_Start+0x70>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1f      	ldr	r2, [pc, #124]	@ (80060a4 <HAL_TIM_Base_Start+0xcc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <HAL_TIM_Base_Start+0x70>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1e      	ldr	r2, [pc, #120]	@ (80060a8 <HAL_TIM_Base_Start+0xd0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <HAL_TIM_Base_Start+0x70>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1c      	ldr	r2, [pc, #112]	@ (80060ac <HAL_TIM_Base_Start+0xd4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_TIM_Base_Start+0x70>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1b      	ldr	r2, [pc, #108]	@ (80060b0 <HAL_TIM_Base_Start+0xd8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d115      	bne.n	8006074 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	4b19      	ldr	r3, [pc, #100]	@ (80060b4 <HAL_TIM_Base_Start+0xdc>)
 8006050:	4013      	ands	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b06      	cmp	r3, #6
 8006058:	d015      	beq.n	8006086 <HAL_TIM_Base_Start+0xae>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006060:	d011      	beq.n	8006086 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0201 	orr.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	e008      	b.n	8006086 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e000      	b.n	8006088 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006086:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40000c00 	.word	0x40000c00
 80060a8:	40013400 	.word	0x40013400
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40015000 	.word	0x40015000
 80060b4:	00010007 	.word	0x00010007

080060b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d020      	beq.n	800611c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01b      	beq.n	800611c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0202 	mvn.w	r2, #2
 80060ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f93b 	bl	800637e <HAL_TIM_IC_CaptureCallback>
 8006108:	e005      	b.n	8006116 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f92d 	bl	800636a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f93e 	bl	8006392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d020      	beq.n	8006168 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01b      	beq.n	8006168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0204 	mvn.w	r2, #4
 8006138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f915 	bl	800637e <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f907 	bl	800636a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f918 	bl	8006392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d020      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01b      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0208 	mvn.w	r2, #8
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2204      	movs	r2, #4
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f8ef 	bl	800637e <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8e1 	bl	800636a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f8f2 	bl	8006392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d020      	beq.n	8006200 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0210 	mvn.w	r2, #16
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2208      	movs	r2, #8
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f8c9 	bl	800637e <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f8bb 	bl	800636a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8cc 	bl	8006392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00c      	beq.n	8006224 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0201 	mvn.w	r2, #1
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f899 	bl	8006356 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00c      	beq.n	8006252 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800624a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fa09 	bl	8006664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800626e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fa01 	bl	8006678 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f886 	bl	80063a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00c      	beq.n	80062be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f06f 0220 	mvn.w	r2, #32
 80062b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f9c9 	bl	8006650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00c      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f9d5 	bl	800668c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00c      	beq.n	8006306 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f9cd 	bl	80066a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00c      	beq.n	800632a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f9c5 	bl	80066b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00c      	beq.n	800634e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f9bd 	bl	80066c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006500 <TIM_Base_SetConfig+0x144>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d017      	beq.n	8006404 <TIM_Base_SetConfig+0x48>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063da:	d013      	beq.n	8006404 <TIM_Base_SetConfig+0x48>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a49      	ldr	r2, [pc, #292]	@ (8006504 <TIM_Base_SetConfig+0x148>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00f      	beq.n	8006404 <TIM_Base_SetConfig+0x48>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a48      	ldr	r2, [pc, #288]	@ (8006508 <TIM_Base_SetConfig+0x14c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00b      	beq.n	8006404 <TIM_Base_SetConfig+0x48>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a47      	ldr	r2, [pc, #284]	@ (800650c <TIM_Base_SetConfig+0x150>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d007      	beq.n	8006404 <TIM_Base_SetConfig+0x48>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a46      	ldr	r2, [pc, #280]	@ (8006510 <TIM_Base_SetConfig+0x154>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_Base_SetConfig+0x48>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a45      	ldr	r2, [pc, #276]	@ (8006514 <TIM_Base_SetConfig+0x158>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d108      	bne.n	8006416 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a39      	ldr	r2, [pc, #228]	@ (8006500 <TIM_Base_SetConfig+0x144>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d023      	beq.n	8006466 <TIM_Base_SetConfig+0xaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006424:	d01f      	beq.n	8006466 <TIM_Base_SetConfig+0xaa>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a36      	ldr	r2, [pc, #216]	@ (8006504 <TIM_Base_SetConfig+0x148>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01b      	beq.n	8006466 <TIM_Base_SetConfig+0xaa>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a35      	ldr	r2, [pc, #212]	@ (8006508 <TIM_Base_SetConfig+0x14c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d017      	beq.n	8006466 <TIM_Base_SetConfig+0xaa>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a34      	ldr	r2, [pc, #208]	@ (800650c <TIM_Base_SetConfig+0x150>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <TIM_Base_SetConfig+0xaa>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a33      	ldr	r2, [pc, #204]	@ (8006510 <TIM_Base_SetConfig+0x154>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00f      	beq.n	8006466 <TIM_Base_SetConfig+0xaa>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a33      	ldr	r2, [pc, #204]	@ (8006518 <TIM_Base_SetConfig+0x15c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00b      	beq.n	8006466 <TIM_Base_SetConfig+0xaa>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a32      	ldr	r2, [pc, #200]	@ (800651c <TIM_Base_SetConfig+0x160>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d007      	beq.n	8006466 <TIM_Base_SetConfig+0xaa>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a31      	ldr	r2, [pc, #196]	@ (8006520 <TIM_Base_SetConfig+0x164>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d003      	beq.n	8006466 <TIM_Base_SetConfig+0xaa>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2c      	ldr	r2, [pc, #176]	@ (8006514 <TIM_Base_SetConfig+0x158>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d108      	bne.n	8006478 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800646c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a18      	ldr	r2, [pc, #96]	@ (8006500 <TIM_Base_SetConfig+0x144>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d013      	beq.n	80064cc <TIM_Base_SetConfig+0x110>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006510 <TIM_Base_SetConfig+0x154>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00f      	beq.n	80064cc <TIM_Base_SetConfig+0x110>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006518 <TIM_Base_SetConfig+0x15c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00b      	beq.n	80064cc <TIM_Base_SetConfig+0x110>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a19      	ldr	r2, [pc, #100]	@ (800651c <TIM_Base_SetConfig+0x160>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d007      	beq.n	80064cc <TIM_Base_SetConfig+0x110>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a18      	ldr	r2, [pc, #96]	@ (8006520 <TIM_Base_SetConfig+0x164>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_Base_SetConfig+0x110>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a13      	ldr	r2, [pc, #76]	@ (8006514 <TIM_Base_SetConfig+0x158>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d103      	bne.n	80064d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d105      	bne.n	80064f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	611a      	str	r2, [r3, #16]
  }
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40013400 	.word	0x40013400
 8006514:	40015000 	.word	0x40015000
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800

08006524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006538:	2302      	movs	r3, #2
 800653a:	e074      	b.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a34      	ldr	r2, [pc, #208]	@ (8006634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d009      	beq.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a33      	ldr	r2, [pc, #204]	@ (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d004      	beq.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a31      	ldr	r2, [pc, #196]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d108      	bne.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006580:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a21      	ldr	r2, [pc, #132]	@ (8006634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d022      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065bc:	d01d      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d018      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a15      	ldr	r2, [pc, #84]	@ (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a18      	ldr	r2, [pc, #96]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a11      	ldr	r2, [pc, #68]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d10c      	bne.n	8006614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	4313      	orrs	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40015000 	.word	0x40015000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40014000 	.word	0x40014000

08006650 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e042      	b.n	8006774 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d106      	bne.n	8006706 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7fb fa83 	bl	8001c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2224      	movs	r2, #36	@ 0x24
 800670a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0201 	bic.w	r2, r2, #1
 800671c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 ff14 	bl	8007554 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fc15 	bl	8006f5c <UART_SetConfig>
 8006732:	4603      	mov	r3, r0
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e01b      	b.n	8006774 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800674a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800675a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 ff93 	bl	8007698 <UART_CheckIdleState>
 8006772:	4603      	mov	r3, r0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	@ 0x28
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006792:	2b20      	cmp	r3, #32
 8006794:	d17b      	bne.n	800688e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_UART_Transmit+0x26>
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e074      	b.n	8006890 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2221      	movs	r2, #33	@ 0x21
 80067b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067b6:	f7fb fbc5 	bl	8001f44 <HAL_GetTick>
 80067ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	88fa      	ldrh	r2, [r7, #6]
 80067c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	88fa      	ldrh	r2, [r7, #6]
 80067c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d4:	d108      	bne.n	80067e8 <HAL_UART_Transmit+0x6c>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	e003      	b.n	80067f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067f0:	e030      	b.n	8006854 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2200      	movs	r2, #0
 80067fa:	2180      	movs	r1, #128	@ 0x80
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fff5 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e03d      	b.n	8006890 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006828:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	3302      	adds	r3, #2
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	e007      	b.n	8006842 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	781a      	ldrb	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	3301      	adds	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1c8      	bne.n	80067f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2200      	movs	r2, #0
 8006868:	2140      	movs	r1, #64	@ 0x40
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 ffbe 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e006      	b.n	8006890 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3720      	adds	r7, #32
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b0ba      	sub	sp, #232	@ 0xe8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80068c6:	4013      	ands	r3, r2
 80068c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80068cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d11b      	bne.n	800690c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d105      	bne.n	80068f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d009      	beq.n	800690c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8300 	beq.w	8006f02 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
      }
      return;
 800690a:	e2fa      	b.n	8006f02 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800690c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8123 	beq.w	8006b5c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006916:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800691a:	4b8d      	ldr	r3, [pc, #564]	@ (8006b50 <HAL_UART_IRQHandler+0x2b8>)
 800691c:	4013      	ands	r3, r2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006922:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006926:	4b8b      	ldr	r3, [pc, #556]	@ (8006b54 <HAL_UART_IRQHandler+0x2bc>)
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 8116 	beq.w	8006b5c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d011      	beq.n	8006960 <HAL_UART_IRQHandler+0xc8>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006956:	f043 0201 	orr.w	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d011      	beq.n	8006990 <HAL_UART_IRQHandler+0xf8>
 800696c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2202      	movs	r2, #2
 800697e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006986:	f043 0204 	orr.w	r2, r3, #4
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d011      	beq.n	80069c0 <HAL_UART_IRQHandler+0x128>
 800699c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2204      	movs	r2, #4
 80069ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b6:	f043 0202 	orr.w	r2, r3, #2
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d017      	beq.n	80069fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d105      	bne.n	80069e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006b50 <HAL_UART_IRQHandler+0x2b8>)
 80069de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2208      	movs	r2, #8
 80069ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f2:	f043 0208 	orr.w	r2, r3, #8
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d012      	beq.n	8006a2e <HAL_UART_IRQHandler+0x196>
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00c      	beq.n	8006a2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a24:	f043 0220 	orr.w	r2, r3, #32
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8266 	beq.w	8006f06 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d013      	beq.n	8006a6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d105      	bne.n	8006a5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d005      	beq.n	8006a92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a8a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d054      	beq.n	8006b3c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 ff17 	bl	80078c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa2:	2b40      	cmp	r3, #64	@ 0x40
 8006aa4:	d146      	bne.n	8006b34 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1d9      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d017      	beq.n	8006b2c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b02:	4a15      	ldr	r2, [pc, #84]	@ (8006b58 <HAL_UART_IRQHandler+0x2c0>)
 8006b04:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fd fe8b 	bl	8004828 <HAL_DMA_Abort_IT>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d019      	beq.n	8006b4c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b26:	4610      	mov	r0, r2
 8006b28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2a:	e00f      	b.n	8006b4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f9ff 	bl	8006f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b32:	e00b      	b.n	8006b4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f9fb 	bl	8006f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3a:	e007      	b.n	8006b4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f9f7 	bl	8006f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b4a:	e1dc      	b.n	8006f06 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4c:	bf00      	nop
    return;
 8006b4e:	e1da      	b.n	8006f06 <HAL_UART_IRQHandler+0x66e>
 8006b50:	10000001 	.word	0x10000001
 8006b54:	04000120 	.word	0x04000120
 8006b58:	08007993 	.word	0x08007993

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	f040 8170 	bne.w	8006e46 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8169 	beq.w	8006e46 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8162 	beq.w	8006e46 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2210      	movs	r2, #16
 8006b88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b94:	2b40      	cmp	r3, #64	@ 0x40
 8006b96:	f040 80d8 	bne.w	8006d4a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80af 	beq.w	8006d10 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	f080 80a7 	bcs.w	8006d10 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f040 8087 	bne.w	8006cee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1da      	bne.n	8006be0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e1      	bne.n	8006c2a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cbc:	f023 0310 	bic.w	r3, r3, #16
 8006cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e4      	bne.n	8006cac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fd fd44 	bl	8004776 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f91b 	bl	8006f44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d0e:	e0fc      	b.n	8006f0a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	f040 80f5 	bne.w	8006f0a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	f040 80eb 	bne.w	8006f0a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8fe 	bl	8006f44 <HAL_UARTEx_RxEventCallback>
      return;
 8006d48:	e0df      	b.n	8006f0a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 80d1 	beq.w	8006f0e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80cc 	beq.w	8006f0e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e4      	bne.n	8006d76 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	623b      	str	r3, [r7, #32]
   return(result);
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dd4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e1      	bne.n	8006dac <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f023 0310 	bic.w	r3, r3, #16
 8006e10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	69b9      	ldr	r1, [r7, #24]
 8006e24:	69fa      	ldr	r2, [r7, #28]
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e4      	bne.n	8006dfc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2202      	movs	r2, #2
 8006e36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f880 	bl	8006f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e44:	e063      	b.n	8006f0e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00e      	beq.n	8006e70 <HAL_UART_IRQHandler+0x5d8>
 8006e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d008      	beq.n	8006e70 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fdcf 	bl	8007a0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e6e:	e051      	b.n	8006f14 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d014      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d105      	bne.n	8006e94 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d03a      	beq.n	8006f12 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
    }
    return;
 8006ea4:	e035      	b.n	8006f12 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d009      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x62e>
 8006eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fd79 	bl	80079b6 <UART_EndTransmit_IT>
    return;
 8006ec4:	e026      	b.n	8006f14 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x64e>
 8006ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fda8 	bl	8007a34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ee4:	e016      	b.n	8006f14 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d010      	beq.n	8006f14 <HAL_UART_IRQHandler+0x67c>
 8006ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	da0c      	bge.n	8006f14 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fd90 	bl	8007a20 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f00:	e008      	b.n	8006f14 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f02:	bf00      	nop
 8006f04:	e006      	b.n	8006f14 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f06:	bf00      	nop
 8006f08:	e004      	b.n	8006f14 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f0a:	bf00      	nop
 8006f0c:	e002      	b.n	8006f14 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f0e:	bf00      	nop
 8006f10:	e000      	b.n	8006f14 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f12:	bf00      	nop
  }
}
 8006f14:	37e8      	adds	r7, #232	@ 0xe8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop

08006f1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f60:	b08c      	sub	sp, #48	@ 0x30
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	431a      	orrs	r2, r3
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	4baa      	ldr	r3, [pc, #680]	@ (8007234 <UART_SetConfig+0x2d8>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f94:	430b      	orrs	r3, r1
 8006f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a9f      	ldr	r2, [pc, #636]	@ (8007238 <UART_SetConfig+0x2dc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006fd2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe6:	f023 010f 	bic.w	r1, r3, #15
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a90      	ldr	r2, [pc, #576]	@ (800723c <UART_SetConfig+0x2e0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d125      	bne.n	800704c <UART_SetConfig+0xf0>
 8007000:	4b8f      	ldr	r3, [pc, #572]	@ (8007240 <UART_SetConfig+0x2e4>)
 8007002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	2b03      	cmp	r3, #3
 800700c:	d81a      	bhi.n	8007044 <UART_SetConfig+0xe8>
 800700e:	a201      	add	r2, pc, #4	@ (adr r2, 8007014 <UART_SetConfig+0xb8>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007025 	.word	0x08007025
 8007018:	08007035 	.word	0x08007035
 800701c:	0800702d 	.word	0x0800702d
 8007020:	0800703d 	.word	0x0800703d
 8007024:	2301      	movs	r3, #1
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702a:	e116      	b.n	800725a <UART_SetConfig+0x2fe>
 800702c:	2302      	movs	r3, #2
 800702e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007032:	e112      	b.n	800725a <UART_SetConfig+0x2fe>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703a:	e10e      	b.n	800725a <UART_SetConfig+0x2fe>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e10a      	b.n	800725a <UART_SetConfig+0x2fe>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704a:	e106      	b.n	800725a <UART_SetConfig+0x2fe>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a7c      	ldr	r2, [pc, #496]	@ (8007244 <UART_SetConfig+0x2e8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d138      	bne.n	80070c8 <UART_SetConfig+0x16c>
 8007056:	4b7a      	ldr	r3, [pc, #488]	@ (8007240 <UART_SetConfig+0x2e4>)
 8007058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705c:	f003 030c 	and.w	r3, r3, #12
 8007060:	2b0c      	cmp	r3, #12
 8007062:	d82d      	bhi.n	80070c0 <UART_SetConfig+0x164>
 8007064:	a201      	add	r2, pc, #4	@ (adr r2, 800706c <UART_SetConfig+0x110>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	080070a1 	.word	0x080070a1
 8007070:	080070c1 	.word	0x080070c1
 8007074:	080070c1 	.word	0x080070c1
 8007078:	080070c1 	.word	0x080070c1
 800707c:	080070b1 	.word	0x080070b1
 8007080:	080070c1 	.word	0x080070c1
 8007084:	080070c1 	.word	0x080070c1
 8007088:	080070c1 	.word	0x080070c1
 800708c:	080070a9 	.word	0x080070a9
 8007090:	080070c1 	.word	0x080070c1
 8007094:	080070c1 	.word	0x080070c1
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070b9 	.word	0x080070b9
 80070a0:	2300      	movs	r3, #0
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a6:	e0d8      	b.n	800725a <UART_SetConfig+0x2fe>
 80070a8:	2302      	movs	r3, #2
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ae:	e0d4      	b.n	800725a <UART_SetConfig+0x2fe>
 80070b0:	2304      	movs	r3, #4
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b6:	e0d0      	b.n	800725a <UART_SetConfig+0x2fe>
 80070b8:	2308      	movs	r3, #8
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070be:	e0cc      	b.n	800725a <UART_SetConfig+0x2fe>
 80070c0:	2310      	movs	r3, #16
 80070c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c6:	e0c8      	b.n	800725a <UART_SetConfig+0x2fe>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a5e      	ldr	r2, [pc, #376]	@ (8007248 <UART_SetConfig+0x2ec>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d125      	bne.n	800711e <UART_SetConfig+0x1c2>
 80070d2:	4b5b      	ldr	r3, [pc, #364]	@ (8007240 <UART_SetConfig+0x2e4>)
 80070d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070dc:	2b30      	cmp	r3, #48	@ 0x30
 80070de:	d016      	beq.n	800710e <UART_SetConfig+0x1b2>
 80070e0:	2b30      	cmp	r3, #48	@ 0x30
 80070e2:	d818      	bhi.n	8007116 <UART_SetConfig+0x1ba>
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d00a      	beq.n	80070fe <UART_SetConfig+0x1a2>
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	d814      	bhi.n	8007116 <UART_SetConfig+0x1ba>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <UART_SetConfig+0x19a>
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d008      	beq.n	8007106 <UART_SetConfig+0x1aa>
 80070f4:	e00f      	b.n	8007116 <UART_SetConfig+0x1ba>
 80070f6:	2300      	movs	r3, #0
 80070f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070fc:	e0ad      	b.n	800725a <UART_SetConfig+0x2fe>
 80070fe:	2302      	movs	r3, #2
 8007100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007104:	e0a9      	b.n	800725a <UART_SetConfig+0x2fe>
 8007106:	2304      	movs	r3, #4
 8007108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710c:	e0a5      	b.n	800725a <UART_SetConfig+0x2fe>
 800710e:	2308      	movs	r3, #8
 8007110:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007114:	e0a1      	b.n	800725a <UART_SetConfig+0x2fe>
 8007116:	2310      	movs	r3, #16
 8007118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711c:	e09d      	b.n	800725a <UART_SetConfig+0x2fe>
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a4a      	ldr	r2, [pc, #296]	@ (800724c <UART_SetConfig+0x2f0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d125      	bne.n	8007174 <UART_SetConfig+0x218>
 8007128:	4b45      	ldr	r3, [pc, #276]	@ (8007240 <UART_SetConfig+0x2e4>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007132:	2bc0      	cmp	r3, #192	@ 0xc0
 8007134:	d016      	beq.n	8007164 <UART_SetConfig+0x208>
 8007136:	2bc0      	cmp	r3, #192	@ 0xc0
 8007138:	d818      	bhi.n	800716c <UART_SetConfig+0x210>
 800713a:	2b80      	cmp	r3, #128	@ 0x80
 800713c:	d00a      	beq.n	8007154 <UART_SetConfig+0x1f8>
 800713e:	2b80      	cmp	r3, #128	@ 0x80
 8007140:	d814      	bhi.n	800716c <UART_SetConfig+0x210>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <UART_SetConfig+0x1f0>
 8007146:	2b40      	cmp	r3, #64	@ 0x40
 8007148:	d008      	beq.n	800715c <UART_SetConfig+0x200>
 800714a:	e00f      	b.n	800716c <UART_SetConfig+0x210>
 800714c:	2300      	movs	r3, #0
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007152:	e082      	b.n	800725a <UART_SetConfig+0x2fe>
 8007154:	2302      	movs	r3, #2
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800715a:	e07e      	b.n	800725a <UART_SetConfig+0x2fe>
 800715c:	2304      	movs	r3, #4
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007162:	e07a      	b.n	800725a <UART_SetConfig+0x2fe>
 8007164:	2308      	movs	r3, #8
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716a:	e076      	b.n	800725a <UART_SetConfig+0x2fe>
 800716c:	2310      	movs	r3, #16
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007172:	e072      	b.n	800725a <UART_SetConfig+0x2fe>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a35      	ldr	r2, [pc, #212]	@ (8007250 <UART_SetConfig+0x2f4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d12a      	bne.n	80071d4 <UART_SetConfig+0x278>
 800717e:	4b30      	ldr	r3, [pc, #192]	@ (8007240 <UART_SetConfig+0x2e4>)
 8007180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007184:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007188:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800718c:	d01a      	beq.n	80071c4 <UART_SetConfig+0x268>
 800718e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007192:	d81b      	bhi.n	80071cc <UART_SetConfig+0x270>
 8007194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007198:	d00c      	beq.n	80071b4 <UART_SetConfig+0x258>
 800719a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800719e:	d815      	bhi.n	80071cc <UART_SetConfig+0x270>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <UART_SetConfig+0x250>
 80071a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a8:	d008      	beq.n	80071bc <UART_SetConfig+0x260>
 80071aa:	e00f      	b.n	80071cc <UART_SetConfig+0x270>
 80071ac:	2300      	movs	r3, #0
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071b2:	e052      	b.n	800725a <UART_SetConfig+0x2fe>
 80071b4:	2302      	movs	r3, #2
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ba:	e04e      	b.n	800725a <UART_SetConfig+0x2fe>
 80071bc:	2304      	movs	r3, #4
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c2:	e04a      	b.n	800725a <UART_SetConfig+0x2fe>
 80071c4:	2308      	movs	r3, #8
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	e046      	b.n	800725a <UART_SetConfig+0x2fe>
 80071cc:	2310      	movs	r3, #16
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d2:	e042      	b.n	800725a <UART_SetConfig+0x2fe>
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a17      	ldr	r2, [pc, #92]	@ (8007238 <UART_SetConfig+0x2dc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d13a      	bne.n	8007254 <UART_SetConfig+0x2f8>
 80071de:	4b18      	ldr	r3, [pc, #96]	@ (8007240 <UART_SetConfig+0x2e4>)
 80071e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071ec:	d01a      	beq.n	8007224 <UART_SetConfig+0x2c8>
 80071ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071f2:	d81b      	bhi.n	800722c <UART_SetConfig+0x2d0>
 80071f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071f8:	d00c      	beq.n	8007214 <UART_SetConfig+0x2b8>
 80071fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071fe:	d815      	bhi.n	800722c <UART_SetConfig+0x2d0>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <UART_SetConfig+0x2b0>
 8007204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007208:	d008      	beq.n	800721c <UART_SetConfig+0x2c0>
 800720a:	e00f      	b.n	800722c <UART_SetConfig+0x2d0>
 800720c:	2300      	movs	r3, #0
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007212:	e022      	b.n	800725a <UART_SetConfig+0x2fe>
 8007214:	2302      	movs	r3, #2
 8007216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800721a:	e01e      	b.n	800725a <UART_SetConfig+0x2fe>
 800721c:	2304      	movs	r3, #4
 800721e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007222:	e01a      	b.n	800725a <UART_SetConfig+0x2fe>
 8007224:	2308      	movs	r3, #8
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722a:	e016      	b.n	800725a <UART_SetConfig+0x2fe>
 800722c:	2310      	movs	r3, #16
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007232:	e012      	b.n	800725a <UART_SetConfig+0x2fe>
 8007234:	cfff69f3 	.word	0xcfff69f3
 8007238:	40008000 	.word	0x40008000
 800723c:	40013800 	.word	0x40013800
 8007240:	40021000 	.word	0x40021000
 8007244:	40004400 	.word	0x40004400
 8007248:	40004800 	.word	0x40004800
 800724c:	40004c00 	.word	0x40004c00
 8007250:	40005000 	.word	0x40005000
 8007254:	2310      	movs	r3, #16
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4aae      	ldr	r2, [pc, #696]	@ (8007518 <UART_SetConfig+0x5bc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	f040 8097 	bne.w	8007394 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007266:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800726a:	2b08      	cmp	r3, #8
 800726c:	d823      	bhi.n	80072b6 <UART_SetConfig+0x35a>
 800726e:	a201      	add	r2, pc, #4	@ (adr r2, 8007274 <UART_SetConfig+0x318>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	08007299 	.word	0x08007299
 8007278:	080072b7 	.word	0x080072b7
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080072b7 	.word	0x080072b7
 8007284:	080072a7 	.word	0x080072a7
 8007288:	080072b7 	.word	0x080072b7
 800728c:	080072b7 	.word	0x080072b7
 8007290:	080072b7 	.word	0x080072b7
 8007294:	080072af 	.word	0x080072af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007298:	f7fe fb86 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 800729c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800729e:	e010      	b.n	80072c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a0:	4b9e      	ldr	r3, [pc, #632]	@ (800751c <UART_SetConfig+0x5c0>)
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072a4:	e00d      	b.n	80072c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072a6:	f7fe fb11 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 80072aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072ac:	e009      	b.n	80072c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b4:	e005      	b.n	80072c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8130 	beq.w	800752a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ce:	4a94      	ldr	r2, [pc, #592]	@ (8007520 <UART_SetConfig+0x5c4>)
 80072d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4413      	add	r3, r2
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d305      	bcc.n	80072fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d903      	bls.n	8007302 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007300:	e113      	b.n	800752a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	2200      	movs	r2, #0
 8007306:	60bb      	str	r3, [r7, #8]
 8007308:	60fa      	str	r2, [r7, #12]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730e:	4a84      	ldr	r2, [pc, #528]	@ (8007520 <UART_SetConfig+0x5c4>)
 8007310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007314:	b29b      	uxth	r3, r3
 8007316:	2200      	movs	r2, #0
 8007318:	603b      	str	r3, [r7, #0]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007324:	f7f9 fc7a 	bl	8000c1c <__aeabi_uldivmod>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4610      	mov	r0, r2
 800732e:	4619      	mov	r1, r3
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	020b      	lsls	r3, r1, #8
 800733a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800733e:	0202      	lsls	r2, r0, #8
 8007340:	6979      	ldr	r1, [r7, #20]
 8007342:	6849      	ldr	r1, [r1, #4]
 8007344:	0849      	lsrs	r1, r1, #1
 8007346:	2000      	movs	r0, #0
 8007348:	460c      	mov	r4, r1
 800734a:	4605      	mov	r5, r0
 800734c:	eb12 0804 	adds.w	r8, r2, r4
 8007350:	eb43 0905 	adc.w	r9, r3, r5
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	469a      	mov	sl, r3
 800735c:	4693      	mov	fp, r2
 800735e:	4652      	mov	r2, sl
 8007360:	465b      	mov	r3, fp
 8007362:	4640      	mov	r0, r8
 8007364:	4649      	mov	r1, r9
 8007366:	f7f9 fc59 	bl	8000c1c <__aeabi_uldivmod>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4613      	mov	r3, r2
 8007370:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007378:	d308      	bcc.n	800738c <UART_SetConfig+0x430>
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007380:	d204      	bcs.n	800738c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	60da      	str	r2, [r3, #12]
 800738a:	e0ce      	b.n	800752a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007392:	e0ca      	b.n	800752a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800739c:	d166      	bne.n	800746c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800739e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d827      	bhi.n	80073f6 <UART_SetConfig+0x49a>
 80073a6:	a201      	add	r2, pc, #4	@ (adr r2, 80073ac <UART_SetConfig+0x450>)
 80073a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ac:	080073d1 	.word	0x080073d1
 80073b0:	080073d9 	.word	0x080073d9
 80073b4:	080073e1 	.word	0x080073e1
 80073b8:	080073f7 	.word	0x080073f7
 80073bc:	080073e7 	.word	0x080073e7
 80073c0:	080073f7 	.word	0x080073f7
 80073c4:	080073f7 	.word	0x080073f7
 80073c8:	080073f7 	.word	0x080073f7
 80073cc:	080073ef 	.word	0x080073ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d0:	f7fe faea 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 80073d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073d6:	e014      	b.n	8007402 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073d8:	f7fe fafc 	bl	80059d4 <HAL_RCC_GetPCLK2Freq>
 80073dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073de:	e010      	b.n	8007402 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e0:	4b4e      	ldr	r3, [pc, #312]	@ (800751c <UART_SetConfig+0x5c0>)
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073e4:	e00d      	b.n	8007402 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073e6:	f7fe fa71 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 80073ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073ec:	e009      	b.n	8007402 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073f4:	e005      	b.n	8007402 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8090 	beq.w	800752a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740e:	4a44      	ldr	r2, [pc, #272]	@ (8007520 <UART_SetConfig+0x5c4>)
 8007410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007414:	461a      	mov	r2, r3
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	fbb3 f3f2 	udiv	r3, r3, r2
 800741c:	005a      	lsls	r2, r3, #1
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	441a      	add	r2, r3
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	fbb2 f3f3 	udiv	r3, r2, r3
 800742e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	2b0f      	cmp	r3, #15
 8007434:	d916      	bls.n	8007464 <UART_SetConfig+0x508>
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743c:	d212      	bcs.n	8007464 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f023 030f 	bic.w	r3, r3, #15
 8007446:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	b29b      	uxth	r3, r3
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	b29a      	uxth	r2, r3
 8007454:	8bfb      	ldrh	r3, [r7, #30]
 8007456:	4313      	orrs	r3, r2
 8007458:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	8bfa      	ldrh	r2, [r7, #30]
 8007460:	60da      	str	r2, [r3, #12]
 8007462:	e062      	b.n	800752a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800746a:	e05e      	b.n	800752a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800746c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007470:	2b08      	cmp	r3, #8
 8007472:	d828      	bhi.n	80074c6 <UART_SetConfig+0x56a>
 8007474:	a201      	add	r2, pc, #4	@ (adr r2, 800747c <UART_SetConfig+0x520>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a9 	.word	0x080074a9
 8007484:	080074b1 	.word	0x080074b1
 8007488:	080074c7 	.word	0x080074c7
 800748c:	080074b7 	.word	0x080074b7
 8007490:	080074c7 	.word	0x080074c7
 8007494:	080074c7 	.word	0x080074c7
 8007498:	080074c7 	.word	0x080074c7
 800749c:	080074bf 	.word	0x080074bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a0:	f7fe fa82 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 80074a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074a6:	e014      	b.n	80074d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074a8:	f7fe fa94 	bl	80059d4 <HAL_RCC_GetPCLK2Freq>
 80074ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ae:	e010      	b.n	80074d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b0:	4b1a      	ldr	r3, [pc, #104]	@ (800751c <UART_SetConfig+0x5c0>)
 80074b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074b4:	e00d      	b.n	80074d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074b6:	f7fe fa09 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 80074ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074bc:	e009      	b.n	80074d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074c4:	e005      	b.n	80074d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074d0:	bf00      	nop
    }

    if (pclk != 0U)
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d028      	beq.n	800752a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	4a10      	ldr	r2, [pc, #64]	@ (8007520 <UART_SetConfig+0x5c4>)
 80074de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e2:	461a      	mov	r2, r3
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	441a      	add	r2, r3
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	2b0f      	cmp	r3, #15
 8007500:	d910      	bls.n	8007524 <UART_SetConfig+0x5c8>
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007508:	d20c      	bcs.n	8007524 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	b29a      	uxth	r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60da      	str	r2, [r3, #12]
 8007514:	e009      	b.n	800752a <UART_SetConfig+0x5ce>
 8007516:	bf00      	nop
 8007518:	40008000 	.word	0x40008000
 800751c:	00f42400 	.word	0x00f42400
 8007520:	08009058 	.word	0x08009058
      }
      else
      {
        ret = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2201      	movs	r2, #1
 800752e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2201      	movs	r2, #1
 8007536:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2200      	movs	r2, #0
 800753e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2200      	movs	r2, #0
 8007544:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007546:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800754a:	4618      	mov	r0, r3
 800754c:	3730      	adds	r7, #48	@ 0x30
 800754e:	46bd      	mov	sp, r7
 8007550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01a      	beq.n	800766a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800764e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007652:	d10a      	bne.n	800766a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	605a      	str	r2, [r3, #4]
  }
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b098      	sub	sp, #96	@ 0x60
 800769c:	af02      	add	r7, sp, #8
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076a8:	f7fa fc4c 	bl	8001f44 <HAL_GetTick>
 80076ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d12f      	bne.n	800771c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076c4:	2200      	movs	r2, #0
 80076c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f88e 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d022      	beq.n	800771c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e6      	bne.n	80076d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e063      	b.n	80077e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b04      	cmp	r3, #4
 8007728:	d149      	bne.n	80077be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800772a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007732:	2200      	movs	r2, #0
 8007734:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f857 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d03c      	beq.n	80077be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	623b      	str	r3, [r7, #32]
   return(result);
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007758:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007762:	633b      	str	r3, [r7, #48]	@ 0x30
 8007764:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e6      	bne.n	8007744 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	60fb      	str	r3, [r7, #12]
   return(result);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f023 0301 	bic.w	r3, r3, #1
 800778c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007796:	61fa      	str	r2, [r7, #28]
 8007798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	69b9      	ldr	r1, [r7, #24]
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	617b      	str	r3, [r7, #20]
   return(result);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e5      	bne.n	8007776 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e012      	b.n	80077e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3758      	adds	r7, #88	@ 0x58
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	4613      	mov	r3, r2
 80077fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077fc:	e04f      	b.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d04b      	beq.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007806:	f7fa fb9d 	bl	8001f44 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <UART_WaitOnFlagUntilTimeout+0x30>
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e04e      	b.n	80078be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d037      	beq.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b80      	cmp	r3, #128	@ 0x80
 8007832:	d034      	beq.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b40      	cmp	r3, #64	@ 0x40
 8007838:	d031      	beq.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b08      	cmp	r3, #8
 8007846:	d110      	bne.n	800786a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2208      	movs	r2, #8
 800784e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f838 	bl	80078c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2208      	movs	r2, #8
 800785a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e029      	b.n	80078be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007878:	d111      	bne.n	800789e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f81e 	bl	80078c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2220      	movs	r2, #32
 800788e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e00f      	b.n	80078be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4013      	ands	r3, r2
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	bf0c      	ite	eq
 80078ae:	2301      	moveq	r3, #1
 80078b0:	2300      	movne	r3, #0
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d0a0      	beq.n	80077fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b095      	sub	sp, #84	@ 0x54
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e6      	bne.n	80078ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3308      	adds	r3, #8
 8007922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800792a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e3      	bne.n	8007900 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d118      	bne.n	8007972 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	60bb      	str	r3, [r7, #8]
   return(result);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f023 0310 	bic.w	r3, r3, #16
 8007954:	647b      	str	r3, [r7, #68]	@ 0x44
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007962:	6979      	ldr	r1, [r7, #20]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	613b      	str	r3, [r7, #16]
   return(result);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e6      	bne.n	8007940 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007986:	bf00      	nop
 8007988:	3754      	adds	r7, #84	@ 0x54
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7ff fac1 	bl	8006f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ae:	bf00      	nop
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b088      	sub	sp, #32
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6979      	ldr	r1, [r7, #20]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e6      	bne.n	80079be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fa8c 	bl	8006f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a04:	bf00      	nop
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_UARTEx_DisableFifoMode+0x16>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e027      	b.n	8007aae <HAL_UARTEx_DisableFifoMode+0x66>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2224      	movs	r2, #36	@ 0x24
 8007a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ace:	2302      	movs	r3, #2
 8007ad0:	e02d      	b.n	8007b2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2224      	movs	r2, #36	@ 0x24
 8007ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f850 	bl	8007bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e02d      	b.n	8007baa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2224      	movs	r2, #36	@ 0x24
 8007b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0201 	bic.w	r2, r2, #1
 8007b74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f812 	bl	8007bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d108      	bne.n	8007bd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bd4:	e031      	b.n	8007c3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bda:	2308      	movs	r3, #8
 8007bdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	0e5b      	lsrs	r3, r3, #25
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	0f5b      	lsrs	r3, r3, #29
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	7b3a      	ldrb	r2, [r7, #12]
 8007c02:	4911      	ldr	r1, [pc, #68]	@ (8007c48 <UARTEx_SetNbDataToProcess+0x94>)
 8007c04:	5c8a      	ldrb	r2, [r1, r2]
 8007c06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c0a:	7b3a      	ldrb	r2, [r7, #12]
 8007c0c:	490f      	ldr	r1, [pc, #60]	@ (8007c4c <UARTEx_SetNbDataToProcess+0x98>)
 8007c0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	7b7a      	ldrb	r2, [r7, #13]
 8007c20:	4909      	ldr	r1, [pc, #36]	@ (8007c48 <UARTEx_SetNbDataToProcess+0x94>)
 8007c22:	5c8a      	ldrb	r2, [r1, r2]
 8007c24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c28:	7b7a      	ldrb	r2, [r7, #13]
 8007c2a:	4908      	ldr	r1, [pc, #32]	@ (8007c4c <UARTEx_SetNbDataToProcess+0x98>)
 8007c2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	08009070 	.word	0x08009070
 8007c4c:	08009078 	.word	0x08009078

08007c50 <siprintf>:
 8007c50:	b40e      	push	{r1, r2, r3}
 8007c52:	b510      	push	{r4, lr}
 8007c54:	b09d      	sub	sp, #116	@ 0x74
 8007c56:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007c58:	9002      	str	r0, [sp, #8]
 8007c5a:	9006      	str	r0, [sp, #24]
 8007c5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c60:	480a      	ldr	r0, [pc, #40]	@ (8007c8c <siprintf+0x3c>)
 8007c62:	9107      	str	r1, [sp, #28]
 8007c64:	9104      	str	r1, [sp, #16]
 8007c66:	490a      	ldr	r1, [pc, #40]	@ (8007c90 <siprintf+0x40>)
 8007c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6c:	9105      	str	r1, [sp, #20]
 8007c6e:	2400      	movs	r4, #0
 8007c70:	a902      	add	r1, sp, #8
 8007c72:	6800      	ldr	r0, [r0, #0]
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007c78:	f000 f994 	bl	8007fa4 <_svfiprintf_r>
 8007c7c:	9b02      	ldr	r3, [sp, #8]
 8007c7e:	701c      	strb	r4, [r3, #0]
 8007c80:	b01d      	add	sp, #116	@ 0x74
 8007c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c86:	b003      	add	sp, #12
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	2000000c 	.word	0x2000000c
 8007c90:	ffff0208 	.word	0xffff0208

08007c94 <memset>:
 8007c94:	4402      	add	r2, r0
 8007c96:	4603      	mov	r3, r0
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d100      	bne.n	8007c9e <memset+0xa>
 8007c9c:	4770      	bx	lr
 8007c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca2:	e7f9      	b.n	8007c98 <memset+0x4>

08007ca4 <__errno>:
 8007ca4:	4b01      	ldr	r3, [pc, #4]	@ (8007cac <__errno+0x8>)
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	2000000c 	.word	0x2000000c

08007cb0 <__libc_init_array>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ce8 <__libc_init_array+0x38>)
 8007cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8007cec <__libc_init_array+0x3c>)
 8007cb6:	1b64      	subs	r4, r4, r5
 8007cb8:	10a4      	asrs	r4, r4, #2
 8007cba:	2600      	movs	r6, #0
 8007cbc:	42a6      	cmp	r6, r4
 8007cbe:	d109      	bne.n	8007cd4 <__libc_init_array+0x24>
 8007cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8007cf0 <__libc_init_array+0x40>)
 8007cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8007cf4 <__libc_init_array+0x44>)
 8007cc4:	f001 f994 	bl	8008ff0 <_init>
 8007cc8:	1b64      	subs	r4, r4, r5
 8007cca:	10a4      	asrs	r4, r4, #2
 8007ccc:	2600      	movs	r6, #0
 8007cce:	42a6      	cmp	r6, r4
 8007cd0:	d105      	bne.n	8007cde <__libc_init_array+0x2e>
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd8:	4798      	blx	r3
 8007cda:	3601      	adds	r6, #1
 8007cdc:	e7ee      	b.n	8007cbc <__libc_init_array+0xc>
 8007cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce2:	4798      	blx	r3
 8007ce4:	3601      	adds	r6, #1
 8007ce6:	e7f2      	b.n	8007cce <__libc_init_array+0x1e>
 8007ce8:	0800948c 	.word	0x0800948c
 8007cec:	0800948c 	.word	0x0800948c
 8007cf0:	0800948c 	.word	0x0800948c
 8007cf4:	08009490 	.word	0x08009490

08007cf8 <__retarget_lock_acquire_recursive>:
 8007cf8:	4770      	bx	lr

08007cfa <__retarget_lock_release_recursive>:
 8007cfa:	4770      	bx	lr

08007cfc <_free_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4605      	mov	r5, r0
 8007d00:	2900      	cmp	r1, #0
 8007d02:	d041      	beq.n	8007d88 <_free_r+0x8c>
 8007d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d08:	1f0c      	subs	r4, r1, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bfb8      	it	lt
 8007d0e:	18e4      	addlt	r4, r4, r3
 8007d10:	f000 f8e0 	bl	8007ed4 <__malloc_lock>
 8007d14:	4a1d      	ldr	r2, [pc, #116]	@ (8007d8c <_free_r+0x90>)
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	b933      	cbnz	r3, 8007d28 <_free_r+0x2c>
 8007d1a:	6063      	str	r3, [r4, #4]
 8007d1c:	6014      	str	r4, [r2, #0]
 8007d1e:	4628      	mov	r0, r5
 8007d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d24:	f000 b8dc 	b.w	8007ee0 <__malloc_unlock>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d908      	bls.n	8007d3e <_free_r+0x42>
 8007d2c:	6820      	ldr	r0, [r4, #0]
 8007d2e:	1821      	adds	r1, r4, r0
 8007d30:	428b      	cmp	r3, r1
 8007d32:	bf01      	itttt	eq
 8007d34:	6819      	ldreq	r1, [r3, #0]
 8007d36:	685b      	ldreq	r3, [r3, #4]
 8007d38:	1809      	addeq	r1, r1, r0
 8007d3a:	6021      	streq	r1, [r4, #0]
 8007d3c:	e7ed      	b.n	8007d1a <_free_r+0x1e>
 8007d3e:	461a      	mov	r2, r3
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	b10b      	cbz	r3, 8007d48 <_free_r+0x4c>
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	d9fa      	bls.n	8007d3e <_free_r+0x42>
 8007d48:	6811      	ldr	r1, [r2, #0]
 8007d4a:	1850      	adds	r0, r2, r1
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d10b      	bne.n	8007d68 <_free_r+0x6c>
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	4401      	add	r1, r0
 8007d54:	1850      	adds	r0, r2, r1
 8007d56:	4283      	cmp	r3, r0
 8007d58:	6011      	str	r1, [r2, #0]
 8007d5a:	d1e0      	bne.n	8007d1e <_free_r+0x22>
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	6053      	str	r3, [r2, #4]
 8007d62:	4408      	add	r0, r1
 8007d64:	6010      	str	r0, [r2, #0]
 8007d66:	e7da      	b.n	8007d1e <_free_r+0x22>
 8007d68:	d902      	bls.n	8007d70 <_free_r+0x74>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	602b      	str	r3, [r5, #0]
 8007d6e:	e7d6      	b.n	8007d1e <_free_r+0x22>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	1821      	adds	r1, r4, r0
 8007d74:	428b      	cmp	r3, r1
 8007d76:	bf04      	itt	eq
 8007d78:	6819      	ldreq	r1, [r3, #0]
 8007d7a:	685b      	ldreq	r3, [r3, #4]
 8007d7c:	6063      	str	r3, [r4, #4]
 8007d7e:	bf04      	itt	eq
 8007d80:	1809      	addeq	r1, r1, r0
 8007d82:	6021      	streq	r1, [r4, #0]
 8007d84:	6054      	str	r4, [r2, #4]
 8007d86:	e7ca      	b.n	8007d1e <_free_r+0x22>
 8007d88:	bd38      	pop	{r3, r4, r5, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000e8c 	.word	0x20000e8c

08007d90 <sbrk_aligned>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	4e0f      	ldr	r6, [pc, #60]	@ (8007dd0 <sbrk_aligned+0x40>)
 8007d94:	460c      	mov	r4, r1
 8007d96:	6831      	ldr	r1, [r6, #0]
 8007d98:	4605      	mov	r5, r0
 8007d9a:	b911      	cbnz	r1, 8007da2 <sbrk_aligned+0x12>
 8007d9c:	f000 fba4 	bl	80084e8 <_sbrk_r>
 8007da0:	6030      	str	r0, [r6, #0]
 8007da2:	4621      	mov	r1, r4
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 fb9f 	bl	80084e8 <_sbrk_r>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d103      	bne.n	8007db6 <sbrk_aligned+0x26>
 8007dae:	f04f 34ff 	mov.w	r4, #4294967295
 8007db2:	4620      	mov	r0, r4
 8007db4:	bd70      	pop	{r4, r5, r6, pc}
 8007db6:	1cc4      	adds	r4, r0, #3
 8007db8:	f024 0403 	bic.w	r4, r4, #3
 8007dbc:	42a0      	cmp	r0, r4
 8007dbe:	d0f8      	beq.n	8007db2 <sbrk_aligned+0x22>
 8007dc0:	1a21      	subs	r1, r4, r0
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f000 fb90 	bl	80084e8 <_sbrk_r>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d1f2      	bne.n	8007db2 <sbrk_aligned+0x22>
 8007dcc:	e7ef      	b.n	8007dae <sbrk_aligned+0x1e>
 8007dce:	bf00      	nop
 8007dd0:	20000e88 	.word	0x20000e88

08007dd4 <_malloc_r>:
 8007dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd8:	1ccd      	adds	r5, r1, #3
 8007dda:	f025 0503 	bic.w	r5, r5, #3
 8007dde:	3508      	adds	r5, #8
 8007de0:	2d0c      	cmp	r5, #12
 8007de2:	bf38      	it	cc
 8007de4:	250c      	movcc	r5, #12
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	4606      	mov	r6, r0
 8007dea:	db01      	blt.n	8007df0 <_malloc_r+0x1c>
 8007dec:	42a9      	cmp	r1, r5
 8007dee:	d904      	bls.n	8007dfa <_malloc_r+0x26>
 8007df0:	230c      	movs	r3, #12
 8007df2:	6033      	str	r3, [r6, #0]
 8007df4:	2000      	movs	r0, #0
 8007df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ed0 <_malloc_r+0xfc>
 8007dfe:	f000 f869 	bl	8007ed4 <__malloc_lock>
 8007e02:	f8d8 3000 	ldr.w	r3, [r8]
 8007e06:	461c      	mov	r4, r3
 8007e08:	bb44      	cbnz	r4, 8007e5c <_malloc_r+0x88>
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f7ff ffbf 	bl	8007d90 <sbrk_aligned>
 8007e12:	1c43      	adds	r3, r0, #1
 8007e14:	4604      	mov	r4, r0
 8007e16:	d158      	bne.n	8007eca <_malloc_r+0xf6>
 8007e18:	f8d8 4000 	ldr.w	r4, [r8]
 8007e1c:	4627      	mov	r7, r4
 8007e1e:	2f00      	cmp	r7, #0
 8007e20:	d143      	bne.n	8007eaa <_malloc_r+0xd6>
 8007e22:	2c00      	cmp	r4, #0
 8007e24:	d04b      	beq.n	8007ebe <_malloc_r+0xea>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	4639      	mov	r1, r7
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	eb04 0903 	add.w	r9, r4, r3
 8007e30:	f000 fb5a 	bl	80084e8 <_sbrk_r>
 8007e34:	4581      	cmp	r9, r0
 8007e36:	d142      	bne.n	8007ebe <_malloc_r+0xea>
 8007e38:	6821      	ldr	r1, [r4, #0]
 8007e3a:	1a6d      	subs	r5, r5, r1
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f7ff ffa6 	bl	8007d90 <sbrk_aligned>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d03a      	beq.n	8007ebe <_malloc_r+0xea>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	442b      	add	r3, r5
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	bb62      	cbnz	r2, 8007eb0 <_malloc_r+0xdc>
 8007e56:	f8c8 7000 	str.w	r7, [r8]
 8007e5a:	e00f      	b.n	8007e7c <_malloc_r+0xa8>
 8007e5c:	6822      	ldr	r2, [r4, #0]
 8007e5e:	1b52      	subs	r2, r2, r5
 8007e60:	d420      	bmi.n	8007ea4 <_malloc_r+0xd0>
 8007e62:	2a0b      	cmp	r2, #11
 8007e64:	d917      	bls.n	8007e96 <_malloc_r+0xc2>
 8007e66:	1961      	adds	r1, r4, r5
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	6025      	str	r5, [r4, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	6059      	strne	r1, [r3, #4]
 8007e70:	6863      	ldr	r3, [r4, #4]
 8007e72:	bf08      	it	eq
 8007e74:	f8c8 1000 	streq.w	r1, [r8]
 8007e78:	5162      	str	r2, [r4, r5]
 8007e7a:	604b      	str	r3, [r1, #4]
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f000 f82f 	bl	8007ee0 <__malloc_unlock>
 8007e82:	f104 000b 	add.w	r0, r4, #11
 8007e86:	1d23      	adds	r3, r4, #4
 8007e88:	f020 0007 	bic.w	r0, r0, #7
 8007e8c:	1ac2      	subs	r2, r0, r3
 8007e8e:	bf1c      	itt	ne
 8007e90:	1a1b      	subne	r3, r3, r0
 8007e92:	50a3      	strne	r3, [r4, r2]
 8007e94:	e7af      	b.n	8007df6 <_malloc_r+0x22>
 8007e96:	6862      	ldr	r2, [r4, #4]
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	bf0c      	ite	eq
 8007e9c:	f8c8 2000 	streq.w	r2, [r8]
 8007ea0:	605a      	strne	r2, [r3, #4]
 8007ea2:	e7eb      	b.n	8007e7c <_malloc_r+0xa8>
 8007ea4:	4623      	mov	r3, r4
 8007ea6:	6864      	ldr	r4, [r4, #4]
 8007ea8:	e7ae      	b.n	8007e08 <_malloc_r+0x34>
 8007eaa:	463c      	mov	r4, r7
 8007eac:	687f      	ldr	r7, [r7, #4]
 8007eae:	e7b6      	b.n	8007e1e <_malloc_r+0x4a>
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d1fb      	bne.n	8007eb0 <_malloc_r+0xdc>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	6053      	str	r3, [r2, #4]
 8007ebc:	e7de      	b.n	8007e7c <_malloc_r+0xa8>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	6033      	str	r3, [r6, #0]
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f000 f80c 	bl	8007ee0 <__malloc_unlock>
 8007ec8:	e794      	b.n	8007df4 <_malloc_r+0x20>
 8007eca:	6005      	str	r5, [r0, #0]
 8007ecc:	e7d6      	b.n	8007e7c <_malloc_r+0xa8>
 8007ece:	bf00      	nop
 8007ed0:	20000e8c 	.word	0x20000e8c

08007ed4 <__malloc_lock>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	@ (8007edc <__malloc_lock+0x8>)
 8007ed6:	f7ff bf0f 	b.w	8007cf8 <__retarget_lock_acquire_recursive>
 8007eda:	bf00      	nop
 8007edc:	20000e84 	.word	0x20000e84

08007ee0 <__malloc_unlock>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	@ (8007ee8 <__malloc_unlock+0x8>)
 8007ee2:	f7ff bf0a 	b.w	8007cfa <__retarget_lock_release_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	20000e84 	.word	0x20000e84

08007eec <__ssputs_r>:
 8007eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef0:	688e      	ldr	r6, [r1, #8]
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	42be      	cmp	r6, r7
 8007ef6:	680b      	ldr	r3, [r1, #0]
 8007ef8:	4682      	mov	sl, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	4690      	mov	r8, r2
 8007efe:	d82d      	bhi.n	8007f5c <__ssputs_r+0x70>
 8007f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f08:	d026      	beq.n	8007f58 <__ssputs_r+0x6c>
 8007f0a:	6965      	ldr	r5, [r4, #20]
 8007f0c:	6909      	ldr	r1, [r1, #16]
 8007f0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f12:	eba3 0901 	sub.w	r9, r3, r1
 8007f16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f1a:	1c7b      	adds	r3, r7, #1
 8007f1c:	444b      	add	r3, r9
 8007f1e:	106d      	asrs	r5, r5, #1
 8007f20:	429d      	cmp	r5, r3
 8007f22:	bf38      	it	cc
 8007f24:	461d      	movcc	r5, r3
 8007f26:	0553      	lsls	r3, r2, #21
 8007f28:	d527      	bpl.n	8007f7a <__ssputs_r+0x8e>
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	f7ff ff52 	bl	8007dd4 <_malloc_r>
 8007f30:	4606      	mov	r6, r0
 8007f32:	b360      	cbz	r0, 8007f8e <__ssputs_r+0xa2>
 8007f34:	6921      	ldr	r1, [r4, #16]
 8007f36:	464a      	mov	r2, r9
 8007f38:	f000 fae6 	bl	8008508 <memcpy>
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f46:	81a3      	strh	r3, [r4, #12]
 8007f48:	6126      	str	r6, [r4, #16]
 8007f4a:	6165      	str	r5, [r4, #20]
 8007f4c:	444e      	add	r6, r9
 8007f4e:	eba5 0509 	sub.w	r5, r5, r9
 8007f52:	6026      	str	r6, [r4, #0]
 8007f54:	60a5      	str	r5, [r4, #8]
 8007f56:	463e      	mov	r6, r7
 8007f58:	42be      	cmp	r6, r7
 8007f5a:	d900      	bls.n	8007f5e <__ssputs_r+0x72>
 8007f5c:	463e      	mov	r6, r7
 8007f5e:	6820      	ldr	r0, [r4, #0]
 8007f60:	4632      	mov	r2, r6
 8007f62:	4641      	mov	r1, r8
 8007f64:	f000 faa6 	bl	80084b4 <memmove>
 8007f68:	68a3      	ldr	r3, [r4, #8]
 8007f6a:	1b9b      	subs	r3, r3, r6
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	4433      	add	r3, r6
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	2000      	movs	r0, #0
 8007f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7a:	462a      	mov	r2, r5
 8007f7c:	f000 fad2 	bl	8008524 <_realloc_r>
 8007f80:	4606      	mov	r6, r0
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d1e0      	bne.n	8007f48 <__ssputs_r+0x5c>
 8007f86:	6921      	ldr	r1, [r4, #16]
 8007f88:	4650      	mov	r0, sl
 8007f8a:	f7ff feb7 	bl	8007cfc <_free_r>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	f8ca 3000 	str.w	r3, [sl]
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	e7e9      	b.n	8007f76 <__ssputs_r+0x8a>
	...

08007fa4 <_svfiprintf_r>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	4698      	mov	r8, r3
 8007faa:	898b      	ldrh	r3, [r1, #12]
 8007fac:	061b      	lsls	r3, r3, #24
 8007fae:	b09d      	sub	sp, #116	@ 0x74
 8007fb0:	4607      	mov	r7, r0
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	d510      	bpl.n	8007fda <_svfiprintf_r+0x36>
 8007fb8:	690b      	ldr	r3, [r1, #16]
 8007fba:	b973      	cbnz	r3, 8007fda <_svfiprintf_r+0x36>
 8007fbc:	2140      	movs	r1, #64	@ 0x40
 8007fbe:	f7ff ff09 	bl	8007dd4 <_malloc_r>
 8007fc2:	6028      	str	r0, [r5, #0]
 8007fc4:	6128      	str	r0, [r5, #16]
 8007fc6:	b930      	cbnz	r0, 8007fd6 <_svfiprintf_r+0x32>
 8007fc8:	230c      	movs	r3, #12
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd0:	b01d      	add	sp, #116	@ 0x74
 8007fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd6:	2340      	movs	r3, #64	@ 0x40
 8007fd8:	616b      	str	r3, [r5, #20]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fde:	2320      	movs	r3, #32
 8007fe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fe8:	2330      	movs	r3, #48	@ 0x30
 8007fea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008188 <_svfiprintf_r+0x1e4>
 8007fee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ff2:	f04f 0901 	mov.w	r9, #1
 8007ff6:	4623      	mov	r3, r4
 8007ff8:	469a      	mov	sl, r3
 8007ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ffe:	b10a      	cbz	r2, 8008004 <_svfiprintf_r+0x60>
 8008000:	2a25      	cmp	r2, #37	@ 0x25
 8008002:	d1f9      	bne.n	8007ff8 <_svfiprintf_r+0x54>
 8008004:	ebba 0b04 	subs.w	fp, sl, r4
 8008008:	d00b      	beq.n	8008022 <_svfiprintf_r+0x7e>
 800800a:	465b      	mov	r3, fp
 800800c:	4622      	mov	r2, r4
 800800e:	4629      	mov	r1, r5
 8008010:	4638      	mov	r0, r7
 8008012:	f7ff ff6b 	bl	8007eec <__ssputs_r>
 8008016:	3001      	adds	r0, #1
 8008018:	f000 80a7 	beq.w	800816a <_svfiprintf_r+0x1c6>
 800801c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800801e:	445a      	add	r2, fp
 8008020:	9209      	str	r2, [sp, #36]	@ 0x24
 8008022:	f89a 3000 	ldrb.w	r3, [sl]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 809f 	beq.w	800816a <_svfiprintf_r+0x1c6>
 800802c:	2300      	movs	r3, #0
 800802e:	f04f 32ff 	mov.w	r2, #4294967295
 8008032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008036:	f10a 0a01 	add.w	sl, sl, #1
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	9307      	str	r3, [sp, #28]
 800803e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008042:	931a      	str	r3, [sp, #104]	@ 0x68
 8008044:	4654      	mov	r4, sl
 8008046:	2205      	movs	r2, #5
 8008048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804c:	484e      	ldr	r0, [pc, #312]	@ (8008188 <_svfiprintf_r+0x1e4>)
 800804e:	f7f8 f8ef 	bl	8000230 <memchr>
 8008052:	9a04      	ldr	r2, [sp, #16]
 8008054:	b9d8      	cbnz	r0, 800808e <_svfiprintf_r+0xea>
 8008056:	06d0      	lsls	r0, r2, #27
 8008058:	bf44      	itt	mi
 800805a:	2320      	movmi	r3, #32
 800805c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008060:	0711      	lsls	r1, r2, #28
 8008062:	bf44      	itt	mi
 8008064:	232b      	movmi	r3, #43	@ 0x2b
 8008066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800806a:	f89a 3000 	ldrb.w	r3, [sl]
 800806e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008070:	d015      	beq.n	800809e <_svfiprintf_r+0xfa>
 8008072:	9a07      	ldr	r2, [sp, #28]
 8008074:	4654      	mov	r4, sl
 8008076:	2000      	movs	r0, #0
 8008078:	f04f 0c0a 	mov.w	ip, #10
 800807c:	4621      	mov	r1, r4
 800807e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008082:	3b30      	subs	r3, #48	@ 0x30
 8008084:	2b09      	cmp	r3, #9
 8008086:	d94b      	bls.n	8008120 <_svfiprintf_r+0x17c>
 8008088:	b1b0      	cbz	r0, 80080b8 <_svfiprintf_r+0x114>
 800808a:	9207      	str	r2, [sp, #28]
 800808c:	e014      	b.n	80080b8 <_svfiprintf_r+0x114>
 800808e:	eba0 0308 	sub.w	r3, r0, r8
 8008092:	fa09 f303 	lsl.w	r3, r9, r3
 8008096:	4313      	orrs	r3, r2
 8008098:	9304      	str	r3, [sp, #16]
 800809a:	46a2      	mov	sl, r4
 800809c:	e7d2      	b.n	8008044 <_svfiprintf_r+0xa0>
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	1d19      	adds	r1, r3, #4
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	9103      	str	r1, [sp, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bfbb      	ittet	lt
 80080aa:	425b      	neglt	r3, r3
 80080ac:	f042 0202 	orrlt.w	r2, r2, #2
 80080b0:	9307      	strge	r3, [sp, #28]
 80080b2:	9307      	strlt	r3, [sp, #28]
 80080b4:	bfb8      	it	lt
 80080b6:	9204      	strlt	r2, [sp, #16]
 80080b8:	7823      	ldrb	r3, [r4, #0]
 80080ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80080bc:	d10a      	bne.n	80080d4 <_svfiprintf_r+0x130>
 80080be:	7863      	ldrb	r3, [r4, #1]
 80080c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080c2:	d132      	bne.n	800812a <_svfiprintf_r+0x186>
 80080c4:	9b03      	ldr	r3, [sp, #12]
 80080c6:	1d1a      	adds	r2, r3, #4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	9203      	str	r2, [sp, #12]
 80080cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080d0:	3402      	adds	r4, #2
 80080d2:	9305      	str	r3, [sp, #20]
 80080d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008198 <_svfiprintf_r+0x1f4>
 80080d8:	7821      	ldrb	r1, [r4, #0]
 80080da:	2203      	movs	r2, #3
 80080dc:	4650      	mov	r0, sl
 80080de:	f7f8 f8a7 	bl	8000230 <memchr>
 80080e2:	b138      	cbz	r0, 80080f4 <_svfiprintf_r+0x150>
 80080e4:	9b04      	ldr	r3, [sp, #16]
 80080e6:	eba0 000a 	sub.w	r0, r0, sl
 80080ea:	2240      	movs	r2, #64	@ 0x40
 80080ec:	4082      	lsls	r2, r0
 80080ee:	4313      	orrs	r3, r2
 80080f0:	3401      	adds	r4, #1
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f8:	4824      	ldr	r0, [pc, #144]	@ (800818c <_svfiprintf_r+0x1e8>)
 80080fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080fe:	2206      	movs	r2, #6
 8008100:	f7f8 f896 	bl	8000230 <memchr>
 8008104:	2800      	cmp	r0, #0
 8008106:	d036      	beq.n	8008176 <_svfiprintf_r+0x1d2>
 8008108:	4b21      	ldr	r3, [pc, #132]	@ (8008190 <_svfiprintf_r+0x1ec>)
 800810a:	bb1b      	cbnz	r3, 8008154 <_svfiprintf_r+0x1b0>
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	3307      	adds	r3, #7
 8008110:	f023 0307 	bic.w	r3, r3, #7
 8008114:	3308      	adds	r3, #8
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800811a:	4433      	add	r3, r6
 800811c:	9309      	str	r3, [sp, #36]	@ 0x24
 800811e:	e76a      	b.n	8007ff6 <_svfiprintf_r+0x52>
 8008120:	fb0c 3202 	mla	r2, ip, r2, r3
 8008124:	460c      	mov	r4, r1
 8008126:	2001      	movs	r0, #1
 8008128:	e7a8      	b.n	800807c <_svfiprintf_r+0xd8>
 800812a:	2300      	movs	r3, #0
 800812c:	3401      	adds	r4, #1
 800812e:	9305      	str	r3, [sp, #20]
 8008130:	4619      	mov	r1, r3
 8008132:	f04f 0c0a 	mov.w	ip, #10
 8008136:	4620      	mov	r0, r4
 8008138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800813c:	3a30      	subs	r2, #48	@ 0x30
 800813e:	2a09      	cmp	r2, #9
 8008140:	d903      	bls.n	800814a <_svfiprintf_r+0x1a6>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0c6      	beq.n	80080d4 <_svfiprintf_r+0x130>
 8008146:	9105      	str	r1, [sp, #20]
 8008148:	e7c4      	b.n	80080d4 <_svfiprintf_r+0x130>
 800814a:	fb0c 2101 	mla	r1, ip, r1, r2
 800814e:	4604      	mov	r4, r0
 8008150:	2301      	movs	r3, #1
 8008152:	e7f0      	b.n	8008136 <_svfiprintf_r+0x192>
 8008154:	ab03      	add	r3, sp, #12
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	462a      	mov	r2, r5
 800815a:	4b0e      	ldr	r3, [pc, #56]	@ (8008194 <_svfiprintf_r+0x1f0>)
 800815c:	a904      	add	r1, sp, #16
 800815e:	4638      	mov	r0, r7
 8008160:	f3af 8000 	nop.w
 8008164:	1c42      	adds	r2, r0, #1
 8008166:	4606      	mov	r6, r0
 8008168:	d1d6      	bne.n	8008118 <_svfiprintf_r+0x174>
 800816a:	89ab      	ldrh	r3, [r5, #12]
 800816c:	065b      	lsls	r3, r3, #25
 800816e:	f53f af2d 	bmi.w	8007fcc <_svfiprintf_r+0x28>
 8008172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008174:	e72c      	b.n	8007fd0 <_svfiprintf_r+0x2c>
 8008176:	ab03      	add	r3, sp, #12
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	462a      	mov	r2, r5
 800817c:	4b05      	ldr	r3, [pc, #20]	@ (8008194 <_svfiprintf_r+0x1f0>)
 800817e:	a904      	add	r1, sp, #16
 8008180:	4638      	mov	r0, r7
 8008182:	f000 f879 	bl	8008278 <_printf_i>
 8008186:	e7ed      	b.n	8008164 <_svfiprintf_r+0x1c0>
 8008188:	08009080 	.word	0x08009080
 800818c:	0800908a 	.word	0x0800908a
 8008190:	00000000 	.word	0x00000000
 8008194:	08007eed 	.word	0x08007eed
 8008198:	08009086 	.word	0x08009086

0800819c <_printf_common>:
 800819c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	4616      	mov	r6, r2
 80081a2:	4698      	mov	r8, r3
 80081a4:	688a      	ldr	r2, [r1, #8]
 80081a6:	690b      	ldr	r3, [r1, #16]
 80081a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	bfb8      	it	lt
 80081b0:	4613      	movlt	r3, r2
 80081b2:	6033      	str	r3, [r6, #0]
 80081b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081b8:	4607      	mov	r7, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	b10a      	cbz	r2, 80081c2 <_printf_common+0x26>
 80081be:	3301      	adds	r3, #1
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	0699      	lsls	r1, r3, #26
 80081c6:	bf42      	ittt	mi
 80081c8:	6833      	ldrmi	r3, [r6, #0]
 80081ca:	3302      	addmi	r3, #2
 80081cc:	6033      	strmi	r3, [r6, #0]
 80081ce:	6825      	ldr	r5, [r4, #0]
 80081d0:	f015 0506 	ands.w	r5, r5, #6
 80081d4:	d106      	bne.n	80081e4 <_printf_common+0x48>
 80081d6:	f104 0a19 	add.w	sl, r4, #25
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	6832      	ldr	r2, [r6, #0]
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	dc26      	bgt.n	8008232 <_printf_common+0x96>
 80081e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081e8:	6822      	ldr	r2, [r4, #0]
 80081ea:	3b00      	subs	r3, #0
 80081ec:	bf18      	it	ne
 80081ee:	2301      	movne	r3, #1
 80081f0:	0692      	lsls	r2, r2, #26
 80081f2:	d42b      	bmi.n	800824c <_printf_common+0xb0>
 80081f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081f8:	4641      	mov	r1, r8
 80081fa:	4638      	mov	r0, r7
 80081fc:	47c8      	blx	r9
 80081fe:	3001      	adds	r0, #1
 8008200:	d01e      	beq.n	8008240 <_printf_common+0xa4>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	6922      	ldr	r2, [r4, #16]
 8008206:	f003 0306 	and.w	r3, r3, #6
 800820a:	2b04      	cmp	r3, #4
 800820c:	bf02      	ittt	eq
 800820e:	68e5      	ldreq	r5, [r4, #12]
 8008210:	6833      	ldreq	r3, [r6, #0]
 8008212:	1aed      	subeq	r5, r5, r3
 8008214:	68a3      	ldr	r3, [r4, #8]
 8008216:	bf0c      	ite	eq
 8008218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800821c:	2500      	movne	r5, #0
 800821e:	4293      	cmp	r3, r2
 8008220:	bfc4      	itt	gt
 8008222:	1a9b      	subgt	r3, r3, r2
 8008224:	18ed      	addgt	r5, r5, r3
 8008226:	2600      	movs	r6, #0
 8008228:	341a      	adds	r4, #26
 800822a:	42b5      	cmp	r5, r6
 800822c:	d11a      	bne.n	8008264 <_printf_common+0xc8>
 800822e:	2000      	movs	r0, #0
 8008230:	e008      	b.n	8008244 <_printf_common+0xa8>
 8008232:	2301      	movs	r3, #1
 8008234:	4652      	mov	r2, sl
 8008236:	4641      	mov	r1, r8
 8008238:	4638      	mov	r0, r7
 800823a:	47c8      	blx	r9
 800823c:	3001      	adds	r0, #1
 800823e:	d103      	bne.n	8008248 <_printf_common+0xac>
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008248:	3501      	adds	r5, #1
 800824a:	e7c6      	b.n	80081da <_printf_common+0x3e>
 800824c:	18e1      	adds	r1, r4, r3
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	2030      	movs	r0, #48	@ 0x30
 8008252:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008256:	4422      	add	r2, r4
 8008258:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800825c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008260:	3302      	adds	r3, #2
 8008262:	e7c7      	b.n	80081f4 <_printf_common+0x58>
 8008264:	2301      	movs	r3, #1
 8008266:	4622      	mov	r2, r4
 8008268:	4641      	mov	r1, r8
 800826a:	4638      	mov	r0, r7
 800826c:	47c8      	blx	r9
 800826e:	3001      	adds	r0, #1
 8008270:	d0e6      	beq.n	8008240 <_printf_common+0xa4>
 8008272:	3601      	adds	r6, #1
 8008274:	e7d9      	b.n	800822a <_printf_common+0x8e>
	...

08008278 <_printf_i>:
 8008278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	7e0f      	ldrb	r7, [r1, #24]
 800827e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008280:	2f78      	cmp	r7, #120	@ 0x78
 8008282:	4691      	mov	r9, r2
 8008284:	4680      	mov	r8, r0
 8008286:	460c      	mov	r4, r1
 8008288:	469a      	mov	sl, r3
 800828a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800828e:	d807      	bhi.n	80082a0 <_printf_i+0x28>
 8008290:	2f62      	cmp	r7, #98	@ 0x62
 8008292:	d80a      	bhi.n	80082aa <_printf_i+0x32>
 8008294:	2f00      	cmp	r7, #0
 8008296:	f000 80d1 	beq.w	800843c <_printf_i+0x1c4>
 800829a:	2f58      	cmp	r7, #88	@ 0x58
 800829c:	f000 80b8 	beq.w	8008410 <_printf_i+0x198>
 80082a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082a8:	e03a      	b.n	8008320 <_printf_i+0xa8>
 80082aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082ae:	2b15      	cmp	r3, #21
 80082b0:	d8f6      	bhi.n	80082a0 <_printf_i+0x28>
 80082b2:	a101      	add	r1, pc, #4	@ (adr r1, 80082b8 <_printf_i+0x40>)
 80082b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082b8:	08008311 	.word	0x08008311
 80082bc:	08008325 	.word	0x08008325
 80082c0:	080082a1 	.word	0x080082a1
 80082c4:	080082a1 	.word	0x080082a1
 80082c8:	080082a1 	.word	0x080082a1
 80082cc:	080082a1 	.word	0x080082a1
 80082d0:	08008325 	.word	0x08008325
 80082d4:	080082a1 	.word	0x080082a1
 80082d8:	080082a1 	.word	0x080082a1
 80082dc:	080082a1 	.word	0x080082a1
 80082e0:	080082a1 	.word	0x080082a1
 80082e4:	08008423 	.word	0x08008423
 80082e8:	0800834f 	.word	0x0800834f
 80082ec:	080083dd 	.word	0x080083dd
 80082f0:	080082a1 	.word	0x080082a1
 80082f4:	080082a1 	.word	0x080082a1
 80082f8:	08008445 	.word	0x08008445
 80082fc:	080082a1 	.word	0x080082a1
 8008300:	0800834f 	.word	0x0800834f
 8008304:	080082a1 	.word	0x080082a1
 8008308:	080082a1 	.word	0x080082a1
 800830c:	080083e5 	.word	0x080083e5
 8008310:	6833      	ldr	r3, [r6, #0]
 8008312:	1d1a      	adds	r2, r3, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6032      	str	r2, [r6, #0]
 8008318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800831c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008320:	2301      	movs	r3, #1
 8008322:	e09c      	b.n	800845e <_printf_i+0x1e6>
 8008324:	6833      	ldr	r3, [r6, #0]
 8008326:	6820      	ldr	r0, [r4, #0]
 8008328:	1d19      	adds	r1, r3, #4
 800832a:	6031      	str	r1, [r6, #0]
 800832c:	0606      	lsls	r6, r0, #24
 800832e:	d501      	bpl.n	8008334 <_printf_i+0xbc>
 8008330:	681d      	ldr	r5, [r3, #0]
 8008332:	e003      	b.n	800833c <_printf_i+0xc4>
 8008334:	0645      	lsls	r5, r0, #25
 8008336:	d5fb      	bpl.n	8008330 <_printf_i+0xb8>
 8008338:	f9b3 5000 	ldrsh.w	r5, [r3]
 800833c:	2d00      	cmp	r5, #0
 800833e:	da03      	bge.n	8008348 <_printf_i+0xd0>
 8008340:	232d      	movs	r3, #45	@ 0x2d
 8008342:	426d      	negs	r5, r5
 8008344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008348:	4858      	ldr	r0, [pc, #352]	@ (80084ac <_printf_i+0x234>)
 800834a:	230a      	movs	r3, #10
 800834c:	e011      	b.n	8008372 <_printf_i+0xfa>
 800834e:	6821      	ldr	r1, [r4, #0]
 8008350:	6833      	ldr	r3, [r6, #0]
 8008352:	0608      	lsls	r0, r1, #24
 8008354:	f853 5b04 	ldr.w	r5, [r3], #4
 8008358:	d402      	bmi.n	8008360 <_printf_i+0xe8>
 800835a:	0649      	lsls	r1, r1, #25
 800835c:	bf48      	it	mi
 800835e:	b2ad      	uxthmi	r5, r5
 8008360:	2f6f      	cmp	r7, #111	@ 0x6f
 8008362:	4852      	ldr	r0, [pc, #328]	@ (80084ac <_printf_i+0x234>)
 8008364:	6033      	str	r3, [r6, #0]
 8008366:	bf14      	ite	ne
 8008368:	230a      	movne	r3, #10
 800836a:	2308      	moveq	r3, #8
 800836c:	2100      	movs	r1, #0
 800836e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008372:	6866      	ldr	r6, [r4, #4]
 8008374:	60a6      	str	r6, [r4, #8]
 8008376:	2e00      	cmp	r6, #0
 8008378:	db05      	blt.n	8008386 <_printf_i+0x10e>
 800837a:	6821      	ldr	r1, [r4, #0]
 800837c:	432e      	orrs	r6, r5
 800837e:	f021 0104 	bic.w	r1, r1, #4
 8008382:	6021      	str	r1, [r4, #0]
 8008384:	d04b      	beq.n	800841e <_printf_i+0x1a6>
 8008386:	4616      	mov	r6, r2
 8008388:	fbb5 f1f3 	udiv	r1, r5, r3
 800838c:	fb03 5711 	mls	r7, r3, r1, r5
 8008390:	5dc7      	ldrb	r7, [r0, r7]
 8008392:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008396:	462f      	mov	r7, r5
 8008398:	42bb      	cmp	r3, r7
 800839a:	460d      	mov	r5, r1
 800839c:	d9f4      	bls.n	8008388 <_printf_i+0x110>
 800839e:	2b08      	cmp	r3, #8
 80083a0:	d10b      	bne.n	80083ba <_printf_i+0x142>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	07df      	lsls	r7, r3, #31
 80083a6:	d508      	bpl.n	80083ba <_printf_i+0x142>
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	6861      	ldr	r1, [r4, #4]
 80083ac:	4299      	cmp	r1, r3
 80083ae:	bfde      	ittt	le
 80083b0:	2330      	movle	r3, #48	@ 0x30
 80083b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083ba:	1b92      	subs	r2, r2, r6
 80083bc:	6122      	str	r2, [r4, #16]
 80083be:	f8cd a000 	str.w	sl, [sp]
 80083c2:	464b      	mov	r3, r9
 80083c4:	aa03      	add	r2, sp, #12
 80083c6:	4621      	mov	r1, r4
 80083c8:	4640      	mov	r0, r8
 80083ca:	f7ff fee7 	bl	800819c <_printf_common>
 80083ce:	3001      	adds	r0, #1
 80083d0:	d14a      	bne.n	8008468 <_printf_i+0x1f0>
 80083d2:	f04f 30ff 	mov.w	r0, #4294967295
 80083d6:	b004      	add	sp, #16
 80083d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	f043 0320 	orr.w	r3, r3, #32
 80083e2:	6023      	str	r3, [r4, #0]
 80083e4:	4832      	ldr	r0, [pc, #200]	@ (80084b0 <_printf_i+0x238>)
 80083e6:	2778      	movs	r7, #120	@ 0x78
 80083e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	6831      	ldr	r1, [r6, #0]
 80083f0:	061f      	lsls	r7, r3, #24
 80083f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80083f6:	d402      	bmi.n	80083fe <_printf_i+0x186>
 80083f8:	065f      	lsls	r7, r3, #25
 80083fa:	bf48      	it	mi
 80083fc:	b2ad      	uxthmi	r5, r5
 80083fe:	6031      	str	r1, [r6, #0]
 8008400:	07d9      	lsls	r1, r3, #31
 8008402:	bf44      	itt	mi
 8008404:	f043 0320 	orrmi.w	r3, r3, #32
 8008408:	6023      	strmi	r3, [r4, #0]
 800840a:	b11d      	cbz	r5, 8008414 <_printf_i+0x19c>
 800840c:	2310      	movs	r3, #16
 800840e:	e7ad      	b.n	800836c <_printf_i+0xf4>
 8008410:	4826      	ldr	r0, [pc, #152]	@ (80084ac <_printf_i+0x234>)
 8008412:	e7e9      	b.n	80083e8 <_printf_i+0x170>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	f023 0320 	bic.w	r3, r3, #32
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	e7f6      	b.n	800840c <_printf_i+0x194>
 800841e:	4616      	mov	r6, r2
 8008420:	e7bd      	b.n	800839e <_printf_i+0x126>
 8008422:	6833      	ldr	r3, [r6, #0]
 8008424:	6825      	ldr	r5, [r4, #0]
 8008426:	6961      	ldr	r1, [r4, #20]
 8008428:	1d18      	adds	r0, r3, #4
 800842a:	6030      	str	r0, [r6, #0]
 800842c:	062e      	lsls	r6, r5, #24
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	d501      	bpl.n	8008436 <_printf_i+0x1be>
 8008432:	6019      	str	r1, [r3, #0]
 8008434:	e002      	b.n	800843c <_printf_i+0x1c4>
 8008436:	0668      	lsls	r0, r5, #25
 8008438:	d5fb      	bpl.n	8008432 <_printf_i+0x1ba>
 800843a:	8019      	strh	r1, [r3, #0]
 800843c:	2300      	movs	r3, #0
 800843e:	6123      	str	r3, [r4, #16]
 8008440:	4616      	mov	r6, r2
 8008442:	e7bc      	b.n	80083be <_printf_i+0x146>
 8008444:	6833      	ldr	r3, [r6, #0]
 8008446:	1d1a      	adds	r2, r3, #4
 8008448:	6032      	str	r2, [r6, #0]
 800844a:	681e      	ldr	r6, [r3, #0]
 800844c:	6862      	ldr	r2, [r4, #4]
 800844e:	2100      	movs	r1, #0
 8008450:	4630      	mov	r0, r6
 8008452:	f7f7 feed 	bl	8000230 <memchr>
 8008456:	b108      	cbz	r0, 800845c <_printf_i+0x1e4>
 8008458:	1b80      	subs	r0, r0, r6
 800845a:	6060      	str	r0, [r4, #4]
 800845c:	6863      	ldr	r3, [r4, #4]
 800845e:	6123      	str	r3, [r4, #16]
 8008460:	2300      	movs	r3, #0
 8008462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008466:	e7aa      	b.n	80083be <_printf_i+0x146>
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	4632      	mov	r2, r6
 800846c:	4649      	mov	r1, r9
 800846e:	4640      	mov	r0, r8
 8008470:	47d0      	blx	sl
 8008472:	3001      	adds	r0, #1
 8008474:	d0ad      	beq.n	80083d2 <_printf_i+0x15a>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	079b      	lsls	r3, r3, #30
 800847a:	d413      	bmi.n	80084a4 <_printf_i+0x22c>
 800847c:	68e0      	ldr	r0, [r4, #12]
 800847e:	9b03      	ldr	r3, [sp, #12]
 8008480:	4298      	cmp	r0, r3
 8008482:	bfb8      	it	lt
 8008484:	4618      	movlt	r0, r3
 8008486:	e7a6      	b.n	80083d6 <_printf_i+0x15e>
 8008488:	2301      	movs	r3, #1
 800848a:	4632      	mov	r2, r6
 800848c:	4649      	mov	r1, r9
 800848e:	4640      	mov	r0, r8
 8008490:	47d0      	blx	sl
 8008492:	3001      	adds	r0, #1
 8008494:	d09d      	beq.n	80083d2 <_printf_i+0x15a>
 8008496:	3501      	adds	r5, #1
 8008498:	68e3      	ldr	r3, [r4, #12]
 800849a:	9903      	ldr	r1, [sp, #12]
 800849c:	1a5b      	subs	r3, r3, r1
 800849e:	42ab      	cmp	r3, r5
 80084a0:	dcf2      	bgt.n	8008488 <_printf_i+0x210>
 80084a2:	e7eb      	b.n	800847c <_printf_i+0x204>
 80084a4:	2500      	movs	r5, #0
 80084a6:	f104 0619 	add.w	r6, r4, #25
 80084aa:	e7f5      	b.n	8008498 <_printf_i+0x220>
 80084ac:	08009091 	.word	0x08009091
 80084b0:	080090a2 	.word	0x080090a2

080084b4 <memmove>:
 80084b4:	4288      	cmp	r0, r1
 80084b6:	b510      	push	{r4, lr}
 80084b8:	eb01 0402 	add.w	r4, r1, r2
 80084bc:	d902      	bls.n	80084c4 <memmove+0x10>
 80084be:	4284      	cmp	r4, r0
 80084c0:	4623      	mov	r3, r4
 80084c2:	d807      	bhi.n	80084d4 <memmove+0x20>
 80084c4:	1e43      	subs	r3, r0, #1
 80084c6:	42a1      	cmp	r1, r4
 80084c8:	d008      	beq.n	80084dc <memmove+0x28>
 80084ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084d2:	e7f8      	b.n	80084c6 <memmove+0x12>
 80084d4:	4402      	add	r2, r0
 80084d6:	4601      	mov	r1, r0
 80084d8:	428a      	cmp	r2, r1
 80084da:	d100      	bne.n	80084de <memmove+0x2a>
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084e6:	e7f7      	b.n	80084d8 <memmove+0x24>

080084e8 <_sbrk_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d06      	ldr	r5, [pc, #24]	@ (8008504 <_sbrk_r+0x1c>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	f7f9 fc50 	bl	8001d98 <_sbrk>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_sbrk_r+0x1a>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_sbrk_r+0x1a>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	20000e80 	.word	0x20000e80

08008508 <memcpy>:
 8008508:	440a      	add	r2, r1
 800850a:	4291      	cmp	r1, r2
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008510:	d100      	bne.n	8008514 <memcpy+0xc>
 8008512:	4770      	bx	lr
 8008514:	b510      	push	{r4, lr}
 8008516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800851a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800851e:	4291      	cmp	r1, r2
 8008520:	d1f9      	bne.n	8008516 <memcpy+0xe>
 8008522:	bd10      	pop	{r4, pc}

08008524 <_realloc_r>:
 8008524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008528:	4607      	mov	r7, r0
 800852a:	4614      	mov	r4, r2
 800852c:	460d      	mov	r5, r1
 800852e:	b921      	cbnz	r1, 800853a <_realloc_r+0x16>
 8008530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	4611      	mov	r1, r2
 8008536:	f7ff bc4d 	b.w	8007dd4 <_malloc_r>
 800853a:	b92a      	cbnz	r2, 8008548 <_realloc_r+0x24>
 800853c:	f7ff fbde 	bl	8007cfc <_free_r>
 8008540:	4625      	mov	r5, r4
 8008542:	4628      	mov	r0, r5
 8008544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008548:	f000 f81a 	bl	8008580 <_malloc_usable_size_r>
 800854c:	4284      	cmp	r4, r0
 800854e:	4606      	mov	r6, r0
 8008550:	d802      	bhi.n	8008558 <_realloc_r+0x34>
 8008552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008556:	d8f4      	bhi.n	8008542 <_realloc_r+0x1e>
 8008558:	4621      	mov	r1, r4
 800855a:	4638      	mov	r0, r7
 800855c:	f7ff fc3a 	bl	8007dd4 <_malloc_r>
 8008560:	4680      	mov	r8, r0
 8008562:	b908      	cbnz	r0, 8008568 <_realloc_r+0x44>
 8008564:	4645      	mov	r5, r8
 8008566:	e7ec      	b.n	8008542 <_realloc_r+0x1e>
 8008568:	42b4      	cmp	r4, r6
 800856a:	4622      	mov	r2, r4
 800856c:	4629      	mov	r1, r5
 800856e:	bf28      	it	cs
 8008570:	4632      	movcs	r2, r6
 8008572:	f7ff ffc9 	bl	8008508 <memcpy>
 8008576:	4629      	mov	r1, r5
 8008578:	4638      	mov	r0, r7
 800857a:	f7ff fbbf 	bl	8007cfc <_free_r>
 800857e:	e7f1      	b.n	8008564 <_realloc_r+0x40>

08008580 <_malloc_usable_size_r>:
 8008580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008584:	1f18      	subs	r0, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfbc      	itt	lt
 800858a:	580b      	ldrlt	r3, [r1, r0]
 800858c:	18c0      	addlt	r0, r0, r3
 800858e:	4770      	bx	lr

08008590 <sinf>:
 8008590:	ee10 3a10 	vmov	r3, s0
 8008594:	b507      	push	{r0, r1, r2, lr}
 8008596:	4a1f      	ldr	r2, [pc, #124]	@ (8008614 <sinf+0x84>)
 8008598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800859c:	4293      	cmp	r3, r2
 800859e:	d807      	bhi.n	80085b0 <sinf+0x20>
 80085a0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8008618 <sinf+0x88>
 80085a4:	2000      	movs	r0, #0
 80085a6:	b003      	add	sp, #12
 80085a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085ac:	f000 b88e 	b.w	80086cc <__kernel_sinf>
 80085b0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80085b4:	d304      	bcc.n	80085c0 <sinf+0x30>
 80085b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80085ba:	b003      	add	sp, #12
 80085bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80085c0:	4668      	mov	r0, sp
 80085c2:	f000 f8cb 	bl	800875c <__ieee754_rem_pio2f>
 80085c6:	f000 0003 	and.w	r0, r0, #3
 80085ca:	2801      	cmp	r0, #1
 80085cc:	d00a      	beq.n	80085e4 <sinf+0x54>
 80085ce:	2802      	cmp	r0, #2
 80085d0:	d00f      	beq.n	80085f2 <sinf+0x62>
 80085d2:	b9c0      	cbnz	r0, 8008606 <sinf+0x76>
 80085d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80085d8:	ed9d 0a00 	vldr	s0, [sp]
 80085dc:	2001      	movs	r0, #1
 80085de:	f000 f875 	bl	80086cc <__kernel_sinf>
 80085e2:	e7ea      	b.n	80085ba <sinf+0x2a>
 80085e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80085e8:	ed9d 0a00 	vldr	s0, [sp]
 80085ec:	f000 f816 	bl	800861c <__kernel_cosf>
 80085f0:	e7e3      	b.n	80085ba <sinf+0x2a>
 80085f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80085f6:	ed9d 0a00 	vldr	s0, [sp]
 80085fa:	2001      	movs	r0, #1
 80085fc:	f000 f866 	bl	80086cc <__kernel_sinf>
 8008600:	eeb1 0a40 	vneg.f32	s0, s0
 8008604:	e7d9      	b.n	80085ba <sinf+0x2a>
 8008606:	eddd 0a01 	vldr	s1, [sp, #4]
 800860a:	ed9d 0a00 	vldr	s0, [sp]
 800860e:	f000 f805 	bl	800861c <__kernel_cosf>
 8008612:	e7f5      	b.n	8008600 <sinf+0x70>
 8008614:	3f490fd8 	.word	0x3f490fd8
 8008618:	00000000 	.word	0x00000000

0800861c <__kernel_cosf>:
 800861c:	ee10 3a10 	vmov	r3, s0
 8008620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008624:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008628:	eef0 6a40 	vmov.f32	s13, s0
 800862c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008630:	d204      	bcs.n	800863c <__kernel_cosf+0x20>
 8008632:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8008636:	ee17 2a90 	vmov	r2, s15
 800863a:	b342      	cbz	r2, 800868e <__kernel_cosf+0x72>
 800863c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008640:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80086ac <__kernel_cosf+0x90>
 8008644:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80086b0 <__kernel_cosf+0x94>
 8008648:	4a1a      	ldr	r2, [pc, #104]	@ (80086b4 <__kernel_cosf+0x98>)
 800864a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800864e:	4293      	cmp	r3, r2
 8008650:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80086b8 <__kernel_cosf+0x9c>
 8008654:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008658:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80086bc <__kernel_cosf+0xa0>
 800865c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008660:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80086c0 <__kernel_cosf+0xa4>
 8008664:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008668:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80086c4 <__kernel_cosf+0xa8>
 800866c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008670:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008674:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008678:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800867c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008684:	d804      	bhi.n	8008690 <__kernel_cosf+0x74>
 8008686:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800868a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800868e:	4770      	bx	lr
 8008690:	4a0d      	ldr	r2, [pc, #52]	@ (80086c8 <__kernel_cosf+0xac>)
 8008692:	4293      	cmp	r3, r2
 8008694:	bf9a      	itte	ls
 8008696:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800869a:	ee07 3a10 	vmovls	s14, r3
 800869e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80086a2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80086a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086aa:	e7ec      	b.n	8008686 <__kernel_cosf+0x6a>
 80086ac:	ad47d74e 	.word	0xad47d74e
 80086b0:	310f74f6 	.word	0x310f74f6
 80086b4:	3e999999 	.word	0x3e999999
 80086b8:	b493f27c 	.word	0xb493f27c
 80086bc:	37d00d01 	.word	0x37d00d01
 80086c0:	bab60b61 	.word	0xbab60b61
 80086c4:	3d2aaaab 	.word	0x3d2aaaab
 80086c8:	3f480000 	.word	0x3f480000

080086cc <__kernel_sinf>:
 80086cc:	ee10 3a10 	vmov	r3, s0
 80086d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086d4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80086d8:	d204      	bcs.n	80086e4 <__kernel_sinf+0x18>
 80086da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80086de:	ee17 3a90 	vmov	r3, s15
 80086e2:	b35b      	cbz	r3, 800873c <__kernel_sinf+0x70>
 80086e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80086e8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008740 <__kernel_sinf+0x74>
 80086ec:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008744 <__kernel_sinf+0x78>
 80086f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80086f4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8008748 <__kernel_sinf+0x7c>
 80086f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80086fc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800874c <__kernel_sinf+0x80>
 8008700:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008704:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008750 <__kernel_sinf+0x84>
 8008708:	ee60 6a07 	vmul.f32	s13, s0, s14
 800870c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008710:	b930      	cbnz	r0, 8008720 <__kernel_sinf+0x54>
 8008712:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008754 <__kernel_sinf+0x88>
 8008716:	eea7 6a27 	vfma.f32	s12, s14, s15
 800871a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800871e:	4770      	bx	lr
 8008720:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008724:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8008728:	eee0 7a86 	vfma.f32	s15, s1, s12
 800872c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008730:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008758 <__kernel_sinf+0x8c>
 8008734:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008738:	ee30 0a60 	vsub.f32	s0, s0, s1
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	2f2ec9d3 	.word	0x2f2ec9d3
 8008744:	b2d72f34 	.word	0xb2d72f34
 8008748:	3638ef1b 	.word	0x3638ef1b
 800874c:	b9500d01 	.word	0xb9500d01
 8008750:	3c088889 	.word	0x3c088889
 8008754:	be2aaaab 	.word	0xbe2aaaab
 8008758:	3e2aaaab 	.word	0x3e2aaaab

0800875c <__ieee754_rem_pio2f>:
 800875c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800875e:	ee10 6a10 	vmov	r6, s0
 8008762:	4b88      	ldr	r3, [pc, #544]	@ (8008984 <__ieee754_rem_pio2f+0x228>)
 8008764:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8008768:	429d      	cmp	r5, r3
 800876a:	b087      	sub	sp, #28
 800876c:	4604      	mov	r4, r0
 800876e:	d805      	bhi.n	800877c <__ieee754_rem_pio2f+0x20>
 8008770:	2300      	movs	r3, #0
 8008772:	ed80 0a00 	vstr	s0, [r0]
 8008776:	6043      	str	r3, [r0, #4]
 8008778:	2000      	movs	r0, #0
 800877a:	e022      	b.n	80087c2 <__ieee754_rem_pio2f+0x66>
 800877c:	4b82      	ldr	r3, [pc, #520]	@ (8008988 <__ieee754_rem_pio2f+0x22c>)
 800877e:	429d      	cmp	r5, r3
 8008780:	d83a      	bhi.n	80087f8 <__ieee754_rem_pio2f+0x9c>
 8008782:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008786:	2e00      	cmp	r6, #0
 8008788:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800898c <__ieee754_rem_pio2f+0x230>
 800878c:	4a80      	ldr	r2, [pc, #512]	@ (8008990 <__ieee754_rem_pio2f+0x234>)
 800878e:	f023 030f 	bic.w	r3, r3, #15
 8008792:	dd18      	ble.n	80087c6 <__ieee754_rem_pio2f+0x6a>
 8008794:	4293      	cmp	r3, r2
 8008796:	ee70 7a47 	vsub.f32	s15, s0, s14
 800879a:	bf09      	itett	eq
 800879c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8008994 <__ieee754_rem_pio2f+0x238>
 80087a0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8008998 <__ieee754_rem_pio2f+0x23c>
 80087a4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800899c <__ieee754_rem_pio2f+0x240>
 80087a8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80087ac:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80087b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087b4:	ed80 7a00 	vstr	s14, [r0]
 80087b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087bc:	edc0 7a01 	vstr	s15, [r0, #4]
 80087c0:	2001      	movs	r0, #1
 80087c2:	b007      	add	sp, #28
 80087c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c6:	4293      	cmp	r3, r2
 80087c8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80087cc:	bf09      	itett	eq
 80087ce:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8008994 <__ieee754_rem_pio2f+0x238>
 80087d2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8008998 <__ieee754_rem_pio2f+0x23c>
 80087d6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800899c <__ieee754_rem_pio2f+0x240>
 80087da:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80087de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80087e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087e6:	ed80 7a00 	vstr	s14, [r0]
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295
 80087f6:	e7e4      	b.n	80087c2 <__ieee754_rem_pio2f+0x66>
 80087f8:	4b69      	ldr	r3, [pc, #420]	@ (80089a0 <__ieee754_rem_pio2f+0x244>)
 80087fa:	429d      	cmp	r5, r3
 80087fc:	d873      	bhi.n	80088e6 <__ieee754_rem_pio2f+0x18a>
 80087fe:	f000 f8dd 	bl	80089bc <fabsf>
 8008802:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80089a4 <__ieee754_rem_pio2f+0x248>
 8008806:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800880a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800880e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008816:	ee17 0a90 	vmov	r0, s15
 800881a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800898c <__ieee754_rem_pio2f+0x230>
 800881e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008822:	281f      	cmp	r0, #31
 8008824:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008998 <__ieee754_rem_pio2f+0x23c>
 8008828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882c:	eeb1 6a47 	vneg.f32	s12, s14
 8008830:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008834:	ee16 1a90 	vmov	r1, s13
 8008838:	dc09      	bgt.n	800884e <__ieee754_rem_pio2f+0xf2>
 800883a:	4a5b      	ldr	r2, [pc, #364]	@ (80089a8 <__ieee754_rem_pio2f+0x24c>)
 800883c:	1e47      	subs	r7, r0, #1
 800883e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008842:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8008846:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800884a:	4293      	cmp	r3, r2
 800884c:	d107      	bne.n	800885e <__ieee754_rem_pio2f+0x102>
 800884e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8008852:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8008856:	2a08      	cmp	r2, #8
 8008858:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800885c:	dc14      	bgt.n	8008888 <__ieee754_rem_pio2f+0x12c>
 800885e:	6021      	str	r1, [r4, #0]
 8008860:	ed94 7a00 	vldr	s14, [r4]
 8008864:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008868:	2e00      	cmp	r6, #0
 800886a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800886e:	ed84 0a01 	vstr	s0, [r4, #4]
 8008872:	daa6      	bge.n	80087c2 <__ieee754_rem_pio2f+0x66>
 8008874:	eeb1 7a47 	vneg.f32	s14, s14
 8008878:	eeb1 0a40 	vneg.f32	s0, s0
 800887c:	ed84 7a00 	vstr	s14, [r4]
 8008880:	ed84 0a01 	vstr	s0, [r4, #4]
 8008884:	4240      	negs	r0, r0
 8008886:	e79c      	b.n	80087c2 <__ieee754_rem_pio2f+0x66>
 8008888:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8008994 <__ieee754_rem_pio2f+0x238>
 800888c:	eef0 6a40 	vmov.f32	s13, s0
 8008890:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008894:	ee70 7a66 	vsub.f32	s15, s0, s13
 8008898:	eee6 7a25 	vfma.f32	s15, s12, s11
 800889c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800899c <__ieee754_rem_pio2f+0x240>
 80088a0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80088a4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80088a8:	ee15 2a90 	vmov	r2, s11
 80088ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80088b0:	1a5b      	subs	r3, r3, r1
 80088b2:	2b19      	cmp	r3, #25
 80088b4:	dc04      	bgt.n	80088c0 <__ieee754_rem_pio2f+0x164>
 80088b6:	edc4 5a00 	vstr	s11, [r4]
 80088ba:	eeb0 0a66 	vmov.f32	s0, s13
 80088be:	e7cf      	b.n	8008860 <__ieee754_rem_pio2f+0x104>
 80088c0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80089ac <__ieee754_rem_pio2f+0x250>
 80088c4:	eeb0 0a66 	vmov.f32	s0, s13
 80088c8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80088cc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80088d0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80089b0 <__ieee754_rem_pio2f+0x254>
 80088d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80088d8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80088dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80088e0:	ed84 7a00 	vstr	s14, [r4]
 80088e4:	e7bc      	b.n	8008860 <__ieee754_rem_pio2f+0x104>
 80088e6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80088ea:	d306      	bcc.n	80088fa <__ieee754_rem_pio2f+0x19e>
 80088ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80088f0:	edc0 7a01 	vstr	s15, [r0, #4]
 80088f4:	edc0 7a00 	vstr	s15, [r0]
 80088f8:	e73e      	b.n	8008778 <__ieee754_rem_pio2f+0x1c>
 80088fa:	15ea      	asrs	r2, r5, #23
 80088fc:	3a86      	subs	r2, #134	@ 0x86
 80088fe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800890a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80089b4 <__ieee754_rem_pio2f+0x258>
 800890e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008916:	ed8d 7a03 	vstr	s14, [sp, #12]
 800891a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800891e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008922:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800892a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800892e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008932:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893a:	edcd 7a05 	vstr	s15, [sp, #20]
 800893e:	d11e      	bne.n	800897e <__ieee754_rem_pio2f+0x222>
 8008940:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008948:	bf0c      	ite	eq
 800894a:	2301      	moveq	r3, #1
 800894c:	2302      	movne	r3, #2
 800894e:	491a      	ldr	r1, [pc, #104]	@ (80089b8 <__ieee754_rem_pio2f+0x25c>)
 8008950:	9101      	str	r1, [sp, #4]
 8008952:	2102      	movs	r1, #2
 8008954:	9100      	str	r1, [sp, #0]
 8008956:	a803      	add	r0, sp, #12
 8008958:	4621      	mov	r1, r4
 800895a:	f000 f837 	bl	80089cc <__kernel_rem_pio2f>
 800895e:	2e00      	cmp	r6, #0
 8008960:	f6bf af2f 	bge.w	80087c2 <__ieee754_rem_pio2f+0x66>
 8008964:	edd4 7a00 	vldr	s15, [r4]
 8008968:	eef1 7a67 	vneg.f32	s15, s15
 800896c:	edc4 7a00 	vstr	s15, [r4]
 8008970:	edd4 7a01 	vldr	s15, [r4, #4]
 8008974:	eef1 7a67 	vneg.f32	s15, s15
 8008978:	edc4 7a01 	vstr	s15, [r4, #4]
 800897c:	e782      	b.n	8008884 <__ieee754_rem_pio2f+0x128>
 800897e:	2303      	movs	r3, #3
 8008980:	e7e5      	b.n	800894e <__ieee754_rem_pio2f+0x1f2>
 8008982:	bf00      	nop
 8008984:	3f490fd8 	.word	0x3f490fd8
 8008988:	4016cbe3 	.word	0x4016cbe3
 800898c:	3fc90f80 	.word	0x3fc90f80
 8008990:	3fc90fd0 	.word	0x3fc90fd0
 8008994:	37354400 	.word	0x37354400
 8008998:	37354443 	.word	0x37354443
 800899c:	2e85a308 	.word	0x2e85a308
 80089a0:	43490f80 	.word	0x43490f80
 80089a4:	3f22f984 	.word	0x3f22f984
 80089a8:	080090b4 	.word	0x080090b4
 80089ac:	2e85a300 	.word	0x2e85a300
 80089b0:	248d3132 	.word	0x248d3132
 80089b4:	43800000 	.word	0x43800000
 80089b8:	08009134 	.word	0x08009134

080089bc <fabsf>:
 80089bc:	ee10 3a10 	vmov	r3, s0
 80089c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089c4:	ee00 3a10 	vmov	s0, r3
 80089c8:	4770      	bx	lr
	...

080089cc <__kernel_rem_pio2f>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	ed2d 8b04 	vpush	{d8-d9}
 80089d4:	b0d9      	sub	sp, #356	@ 0x164
 80089d6:	4690      	mov	r8, r2
 80089d8:	9001      	str	r0, [sp, #4]
 80089da:	4ab6      	ldr	r2, [pc, #728]	@ (8008cb4 <__kernel_rem_pio2f+0x2e8>)
 80089dc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80089de:	f118 0f04 	cmn.w	r8, #4
 80089e2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80089e6:	460f      	mov	r7, r1
 80089e8:	f103 3bff 	add.w	fp, r3, #4294967295
 80089ec:	db26      	blt.n	8008a3c <__kernel_rem_pio2f+0x70>
 80089ee:	f1b8 0203 	subs.w	r2, r8, #3
 80089f2:	bf48      	it	mi
 80089f4:	f108 0204 	addmi.w	r2, r8, #4
 80089f8:	10d2      	asrs	r2, r2, #3
 80089fa:	1c55      	adds	r5, r2, #1
 80089fc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80089fe:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8008cc4 <__kernel_rem_pio2f+0x2f8>
 8008a02:	00e8      	lsls	r0, r5, #3
 8008a04:	eba2 060b 	sub.w	r6, r2, fp
 8008a08:	9002      	str	r0, [sp, #8]
 8008a0a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8008a0e:	eb0a 0c0b 	add.w	ip, sl, fp
 8008a12:	ac1c      	add	r4, sp, #112	@ 0x70
 8008a14:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8008a18:	2000      	movs	r0, #0
 8008a1a:	4560      	cmp	r0, ip
 8008a1c:	dd10      	ble.n	8008a40 <__kernel_rem_pio2f+0x74>
 8008a1e:	a91c      	add	r1, sp, #112	@ 0x70
 8008a20:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8008a24:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8008a28:	2600      	movs	r6, #0
 8008a2a:	4556      	cmp	r6, sl
 8008a2c:	dc24      	bgt.n	8008a78 <__kernel_rem_pio2f+0xac>
 8008a2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008a32:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8008cc4 <__kernel_rem_pio2f+0x2f8>
 8008a36:	4684      	mov	ip, r0
 8008a38:	2400      	movs	r4, #0
 8008a3a:	e016      	b.n	8008a6a <__kernel_rem_pio2f+0x9e>
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	e7dc      	b.n	80089fa <__kernel_rem_pio2f+0x2e>
 8008a40:	42c6      	cmn	r6, r0
 8008a42:	bf5d      	ittte	pl
 8008a44:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8008a48:	ee07 1a90 	vmovpl	s15, r1
 8008a4c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008a50:	eef0 7a47 	vmovmi.f32	s15, s14
 8008a54:	ece4 7a01 	vstmia	r4!, {s15}
 8008a58:	3001      	adds	r0, #1
 8008a5a:	e7de      	b.n	8008a1a <__kernel_rem_pio2f+0x4e>
 8008a5c:	ecfe 6a01 	vldmia	lr!, {s13}
 8008a60:	ed3c 7a01 	vldmdb	ip!, {s14}
 8008a64:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008a68:	3401      	adds	r4, #1
 8008a6a:	455c      	cmp	r4, fp
 8008a6c:	ddf6      	ble.n	8008a5c <__kernel_rem_pio2f+0x90>
 8008a6e:	ece9 7a01 	vstmia	r9!, {s15}
 8008a72:	3601      	adds	r6, #1
 8008a74:	3004      	adds	r0, #4
 8008a76:	e7d8      	b.n	8008a2a <__kernel_rem_pio2f+0x5e>
 8008a78:	a908      	add	r1, sp, #32
 8008a7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a7e:	9104      	str	r1, [sp, #16]
 8008a80:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8008a82:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8008cc0 <__kernel_rem_pio2f+0x2f4>
 8008a86:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8008cbc <__kernel_rem_pio2f+0x2f0>
 8008a8a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008a8e:	9203      	str	r2, [sp, #12]
 8008a90:	4654      	mov	r4, sl
 8008a92:	00a2      	lsls	r2, r4, #2
 8008a94:	9205      	str	r2, [sp, #20]
 8008a96:	aa58      	add	r2, sp, #352	@ 0x160
 8008a98:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008a9c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8008aa0:	a944      	add	r1, sp, #272	@ 0x110
 8008aa2:	aa08      	add	r2, sp, #32
 8008aa4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008aa8:	4694      	mov	ip, r2
 8008aaa:	4626      	mov	r6, r4
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	dc4c      	bgt.n	8008b4a <__kernel_rem_pio2f+0x17e>
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ab6:	f000 f9f1 	bl	8008e9c <scalbnf>
 8008aba:	eeb0 8a40 	vmov.f32	s16, s0
 8008abe:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8008ac2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008ac6:	f000 fa4f 	bl	8008f68 <floorf>
 8008aca:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8008ace:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ad8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008adc:	ee17 9a90 	vmov	r9, s15
 8008ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ae4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008ae8:	dd41      	ble.n	8008b6e <__kernel_rem_pio2f+0x1a2>
 8008aea:	f104 3cff 	add.w	ip, r4, #4294967295
 8008aee:	a908      	add	r1, sp, #32
 8008af0:	f1c5 0e08 	rsb	lr, r5, #8
 8008af4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8008af8:	fa46 f00e 	asr.w	r0, r6, lr
 8008afc:	4481      	add	r9, r0
 8008afe:	fa00 f00e 	lsl.w	r0, r0, lr
 8008b02:	1a36      	subs	r6, r6, r0
 8008b04:	f1c5 0007 	rsb	r0, r5, #7
 8008b08:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8008b0c:	4106      	asrs	r6, r0
 8008b0e:	2e00      	cmp	r6, #0
 8008b10:	dd3c      	ble.n	8008b8c <__kernel_rem_pio2f+0x1c0>
 8008b12:	f04f 0e00 	mov.w	lr, #0
 8008b16:	f109 0901 	add.w	r9, r9, #1
 8008b1a:	4670      	mov	r0, lr
 8008b1c:	4574      	cmp	r4, lr
 8008b1e:	dc68      	bgt.n	8008bf2 <__kernel_rem_pio2f+0x226>
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	dd03      	ble.n	8008b2c <__kernel_rem_pio2f+0x160>
 8008b24:	2d01      	cmp	r5, #1
 8008b26:	d074      	beq.n	8008c12 <__kernel_rem_pio2f+0x246>
 8008b28:	2d02      	cmp	r5, #2
 8008b2a:	d07d      	beq.n	8008c28 <__kernel_rem_pio2f+0x25c>
 8008b2c:	2e02      	cmp	r6, #2
 8008b2e:	d12d      	bne.n	8008b8c <__kernel_rem_pio2f+0x1c0>
 8008b30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008b34:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008b38:	b340      	cbz	r0, 8008b8c <__kernel_rem_pio2f+0x1c0>
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	9306      	str	r3, [sp, #24]
 8008b3e:	f000 f9ad 	bl	8008e9c <scalbnf>
 8008b42:	9b06      	ldr	r3, [sp, #24]
 8008b44:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008b48:	e020      	b.n	8008b8c <__kernel_rem_pio2f+0x1c0>
 8008b4a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008b4e:	3e01      	subs	r6, #1
 8008b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b58:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008b5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008b60:	ecac 0a01 	vstmia	ip!, {s0}
 8008b64:	ed30 0a01 	vldmdb	r0!, {s0}
 8008b68:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008b6c:	e79e      	b.n	8008aac <__kernel_rem_pio2f+0xe0>
 8008b6e:	d105      	bne.n	8008b7c <__kernel_rem_pio2f+0x1b0>
 8008b70:	1e60      	subs	r0, r4, #1
 8008b72:	a908      	add	r1, sp, #32
 8008b74:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8008b78:	11f6      	asrs	r6, r6, #7
 8008b7a:	e7c8      	b.n	8008b0e <__kernel_rem_pio2f+0x142>
 8008b7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008b80:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b88:	da31      	bge.n	8008bee <__kernel_rem_pio2f+0x222>
 8008b8a:	2600      	movs	r6, #0
 8008b8c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b94:	f040 8098 	bne.w	8008cc8 <__kernel_rem_pio2f+0x2fc>
 8008b98:	1e60      	subs	r0, r4, #1
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	4550      	cmp	r0, sl
 8008b9e:	da4b      	bge.n	8008c38 <__kernel_rem_pio2f+0x26c>
 8008ba0:	2a00      	cmp	r2, #0
 8008ba2:	d065      	beq.n	8008c70 <__kernel_rem_pio2f+0x2a4>
 8008ba4:	3c01      	subs	r4, #1
 8008ba6:	ab08      	add	r3, sp, #32
 8008ba8:	3d08      	subs	r5, #8
 8008baa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f8      	beq.n	8008ba4 <__kernel_rem_pio2f+0x1d8>
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008bb8:	f000 f970 	bl	8008e9c <scalbnf>
 8008bbc:	1c63      	adds	r3, r4, #1
 8008bbe:	aa44      	add	r2, sp, #272	@ 0x110
 8008bc0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008cc0 <__kernel_rem_pio2f+0x2f4>
 8008bc4:	0099      	lsls	r1, r3, #2
 8008bc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008bca:	4623      	mov	r3, r4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f280 80a9 	bge.w	8008d24 <__kernel_rem_pio2f+0x358>
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f2c0 80c7 	blt.w	8008d68 <__kernel_rem_pio2f+0x39c>
 8008bda:	aa44      	add	r2, sp, #272	@ 0x110
 8008bdc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008be0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8008cb8 <__kernel_rem_pio2f+0x2ec>
 8008be4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8008cc4 <__kernel_rem_pio2f+0x2f8>
 8008be8:	2000      	movs	r0, #0
 8008bea:	1ae2      	subs	r2, r4, r3
 8008bec:	e0b1      	b.n	8008d52 <__kernel_rem_pio2f+0x386>
 8008bee:	2602      	movs	r6, #2
 8008bf0:	e78f      	b.n	8008b12 <__kernel_rem_pio2f+0x146>
 8008bf2:	f852 1b04 	ldr.w	r1, [r2], #4
 8008bf6:	b948      	cbnz	r0, 8008c0c <__kernel_rem_pio2f+0x240>
 8008bf8:	b121      	cbz	r1, 8008c04 <__kernel_rem_pio2f+0x238>
 8008bfa:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8008bfe:	f842 1c04 	str.w	r1, [r2, #-4]
 8008c02:	2101      	movs	r1, #1
 8008c04:	f10e 0e01 	add.w	lr, lr, #1
 8008c08:	4608      	mov	r0, r1
 8008c0a:	e787      	b.n	8008b1c <__kernel_rem_pio2f+0x150>
 8008c0c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8008c10:	e7f5      	b.n	8008bfe <__kernel_rem_pio2f+0x232>
 8008c12:	f104 3cff 	add.w	ip, r4, #4294967295
 8008c16:	aa08      	add	r2, sp, #32
 8008c18:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008c1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008c20:	a908      	add	r1, sp, #32
 8008c22:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8008c26:	e781      	b.n	8008b2c <__kernel_rem_pio2f+0x160>
 8008c28:	f104 3cff 	add.w	ip, r4, #4294967295
 8008c2c:	aa08      	add	r2, sp, #32
 8008c2e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008c32:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008c36:	e7f3      	b.n	8008c20 <__kernel_rem_pio2f+0x254>
 8008c38:	a908      	add	r1, sp, #32
 8008c3a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008c3e:	3801      	subs	r0, #1
 8008c40:	430a      	orrs	r2, r1
 8008c42:	e7ab      	b.n	8008b9c <__kernel_rem_pio2f+0x1d0>
 8008c44:	3201      	adds	r2, #1
 8008c46:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8008c4a:	2e00      	cmp	r6, #0
 8008c4c:	d0fa      	beq.n	8008c44 <__kernel_rem_pio2f+0x278>
 8008c4e:	9905      	ldr	r1, [sp, #20]
 8008c50:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008c54:	eb0d 0001 	add.w	r0, sp, r1
 8008c58:	18e6      	adds	r6, r4, r3
 8008c5a:	a91c      	add	r1, sp, #112	@ 0x70
 8008c5c:	f104 0c01 	add.w	ip, r4, #1
 8008c60:	384c      	subs	r0, #76	@ 0x4c
 8008c62:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8008c66:	4422      	add	r2, r4
 8008c68:	4562      	cmp	r2, ip
 8008c6a:	da04      	bge.n	8008c76 <__kernel_rem_pio2f+0x2aa>
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	e710      	b.n	8008a92 <__kernel_rem_pio2f+0xc6>
 8008c70:	9804      	ldr	r0, [sp, #16]
 8008c72:	2201      	movs	r2, #1
 8008c74:	e7e7      	b.n	8008c46 <__kernel_rem_pio2f+0x27a>
 8008c76:	9903      	ldr	r1, [sp, #12]
 8008c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c7c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8008c80:	9105      	str	r1, [sp, #20]
 8008c82:	ee07 1a90 	vmov	s15, r1
 8008c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c8a:	2400      	movs	r4, #0
 8008c8c:	ece6 7a01 	vstmia	r6!, {s15}
 8008c90:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8008cc4 <__kernel_rem_pio2f+0x2f8>
 8008c94:	46b1      	mov	r9, r6
 8008c96:	455c      	cmp	r4, fp
 8008c98:	dd04      	ble.n	8008ca4 <__kernel_rem_pio2f+0x2d8>
 8008c9a:	ece0 7a01 	vstmia	r0!, {s15}
 8008c9e:	f10c 0c01 	add.w	ip, ip, #1
 8008ca2:	e7e1      	b.n	8008c68 <__kernel_rem_pio2f+0x29c>
 8008ca4:	ecfe 6a01 	vldmia	lr!, {s13}
 8008ca8:	ed39 7a01 	vldmdb	r9!, {s14}
 8008cac:	3401      	adds	r4, #1
 8008cae:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008cb2:	e7f0      	b.n	8008c96 <__kernel_rem_pio2f+0x2ca>
 8008cb4:	08009478 	.word	0x08009478
 8008cb8:	0800944c 	.word	0x0800944c
 8008cbc:	43800000 	.word	0x43800000
 8008cc0:	3b800000 	.word	0x3b800000
 8008cc4:	00000000 	.word	0x00000000
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	eeb0 0a48 	vmov.f32	s0, s16
 8008cce:	eba3 0008 	sub.w	r0, r3, r8
 8008cd2:	f000 f8e3 	bl	8008e9c <scalbnf>
 8008cd6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8008cbc <__kernel_rem_pio2f+0x2f0>
 8008cda:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce2:	db19      	blt.n	8008d18 <__kernel_rem_pio2f+0x34c>
 8008ce4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8008cc0 <__kernel_rem_pio2f+0x2f4>
 8008ce8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008cec:	aa08      	add	r2, sp, #32
 8008cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cf2:	3508      	adds	r5, #8
 8008cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cf8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008d04:	ee10 3a10 	vmov	r3, s0
 8008d08:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008d0c:	ee17 3a90 	vmov	r3, s15
 8008d10:	3401      	adds	r4, #1
 8008d12:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008d16:	e74c      	b.n	8008bb2 <__kernel_rem_pio2f+0x1e6>
 8008d18:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008d1c:	aa08      	add	r2, sp, #32
 8008d1e:	ee10 3a10 	vmov	r3, s0
 8008d22:	e7f6      	b.n	8008d12 <__kernel_rem_pio2f+0x346>
 8008d24:	a808      	add	r0, sp, #32
 8008d26:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008d2a:	9001      	str	r0, [sp, #4]
 8008d2c:	ee07 0a90 	vmov	s15, r0
 8008d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d34:	3b01      	subs	r3, #1
 8008d36:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008d3a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008d3e:	ed62 7a01 	vstmdb	r2!, {s15}
 8008d42:	e743      	b.n	8008bcc <__kernel_rem_pio2f+0x200>
 8008d44:	ecfc 6a01 	vldmia	ip!, {s13}
 8008d48:	ecb5 7a01 	vldmia	r5!, {s14}
 8008d4c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008d50:	3001      	adds	r0, #1
 8008d52:	4550      	cmp	r0, sl
 8008d54:	dc01      	bgt.n	8008d5a <__kernel_rem_pio2f+0x38e>
 8008d56:	4290      	cmp	r0, r2
 8008d58:	ddf4      	ble.n	8008d44 <__kernel_rem_pio2f+0x378>
 8008d5a:	a858      	add	r0, sp, #352	@ 0x160
 8008d5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008d60:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8008d64:	3b01      	subs	r3, #1
 8008d66:	e735      	b.n	8008bd4 <__kernel_rem_pio2f+0x208>
 8008d68:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	dc09      	bgt.n	8008d82 <__kernel_rem_pio2f+0x3b6>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	dc27      	bgt.n	8008dc2 <__kernel_rem_pio2f+0x3f6>
 8008d72:	d040      	beq.n	8008df6 <__kernel_rem_pio2f+0x42a>
 8008d74:	f009 0007 	and.w	r0, r9, #7
 8008d78:	b059      	add	sp, #356	@ 0x164
 8008d7a:	ecbd 8b04 	vpop	{d8-d9}
 8008d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d82:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d1f5      	bne.n	8008d74 <__kernel_rem_pio2f+0x3a8>
 8008d88:	aa30      	add	r2, sp, #192	@ 0xc0
 8008d8a:	1f0b      	subs	r3, r1, #4
 8008d8c:	4413      	add	r3, r2
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4620      	mov	r0, r4
 8008d92:	2800      	cmp	r0, #0
 8008d94:	dc50      	bgt.n	8008e38 <__kernel_rem_pio2f+0x46c>
 8008d96:	4622      	mov	r2, r4
 8008d98:	2a01      	cmp	r2, #1
 8008d9a:	dc5d      	bgt.n	8008e58 <__kernel_rem_pio2f+0x48c>
 8008d9c:	ab30      	add	r3, sp, #192	@ 0xc0
 8008d9e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8008cc4 <__kernel_rem_pio2f+0x2f8>
 8008da2:	440b      	add	r3, r1
 8008da4:	2c01      	cmp	r4, #1
 8008da6:	dc67      	bgt.n	8008e78 <__kernel_rem_pio2f+0x4ac>
 8008da8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8008dac:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8008db0:	2e00      	cmp	r6, #0
 8008db2:	d167      	bne.n	8008e84 <__kernel_rem_pio2f+0x4b8>
 8008db4:	edc7 6a00 	vstr	s13, [r7]
 8008db8:	ed87 7a01 	vstr	s14, [r7, #4]
 8008dbc:	edc7 7a02 	vstr	s15, [r7, #8]
 8008dc0:	e7d8      	b.n	8008d74 <__kernel_rem_pio2f+0x3a8>
 8008dc2:	ab30      	add	r3, sp, #192	@ 0xc0
 8008dc4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8008cc4 <__kernel_rem_pio2f+0x2f8>
 8008dc8:	440b      	add	r3, r1
 8008dca:	4622      	mov	r2, r4
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	da24      	bge.n	8008e1a <__kernel_rem_pio2f+0x44e>
 8008dd0:	b34e      	cbz	r6, 8008e26 <__kernel_rem_pio2f+0x45a>
 8008dd2:	eef1 7a47 	vneg.f32	s15, s14
 8008dd6:	edc7 7a00 	vstr	s15, [r7]
 8008dda:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8008dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008de2:	aa31      	add	r2, sp, #196	@ 0xc4
 8008de4:	2301      	movs	r3, #1
 8008de6:	429c      	cmp	r4, r3
 8008de8:	da20      	bge.n	8008e2c <__kernel_rem_pio2f+0x460>
 8008dea:	b10e      	cbz	r6, 8008df0 <__kernel_rem_pio2f+0x424>
 8008dec:	eef1 7a67 	vneg.f32	s15, s15
 8008df0:	edc7 7a01 	vstr	s15, [r7, #4]
 8008df4:	e7be      	b.n	8008d74 <__kernel_rem_pio2f+0x3a8>
 8008df6:	ab30      	add	r3, sp, #192	@ 0xc0
 8008df8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8008cc4 <__kernel_rem_pio2f+0x2f8>
 8008dfc:	440b      	add	r3, r1
 8008dfe:	2c00      	cmp	r4, #0
 8008e00:	da05      	bge.n	8008e0e <__kernel_rem_pio2f+0x442>
 8008e02:	b10e      	cbz	r6, 8008e08 <__kernel_rem_pio2f+0x43c>
 8008e04:	eef1 7a67 	vneg.f32	s15, s15
 8008e08:	edc7 7a00 	vstr	s15, [r7]
 8008e0c:	e7b2      	b.n	8008d74 <__kernel_rem_pio2f+0x3a8>
 8008e0e:	ed33 7a01 	vldmdb	r3!, {s14}
 8008e12:	3c01      	subs	r4, #1
 8008e14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e18:	e7f1      	b.n	8008dfe <__kernel_rem_pio2f+0x432>
 8008e1a:	ed73 7a01 	vldmdb	r3!, {s15}
 8008e1e:	3a01      	subs	r2, #1
 8008e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e24:	e7d2      	b.n	8008dcc <__kernel_rem_pio2f+0x400>
 8008e26:	eef0 7a47 	vmov.f32	s15, s14
 8008e2a:	e7d4      	b.n	8008dd6 <__kernel_rem_pio2f+0x40a>
 8008e2c:	ecb2 7a01 	vldmia	r2!, {s14}
 8008e30:	3301      	adds	r3, #1
 8008e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e36:	e7d6      	b.n	8008de6 <__kernel_rem_pio2f+0x41a>
 8008e38:	ed72 7a01 	vldmdb	r2!, {s15}
 8008e3c:	edd2 6a01 	vldr	s13, [r2, #4]
 8008e40:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008e44:	3801      	subs	r0, #1
 8008e46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e4a:	ed82 7a00 	vstr	s14, [r2]
 8008e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e52:	edc2 7a01 	vstr	s15, [r2, #4]
 8008e56:	e79c      	b.n	8008d92 <__kernel_rem_pio2f+0x3c6>
 8008e58:	ed73 7a01 	vldmdb	r3!, {s15}
 8008e5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008e60:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008e64:	3a01      	subs	r2, #1
 8008e66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e6a:	ed83 7a00 	vstr	s14, [r3]
 8008e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e72:	edc3 7a01 	vstr	s15, [r3, #4]
 8008e76:	e78f      	b.n	8008d98 <__kernel_rem_pio2f+0x3cc>
 8008e78:	ed33 7a01 	vldmdb	r3!, {s14}
 8008e7c:	3c01      	subs	r4, #1
 8008e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e82:	e78f      	b.n	8008da4 <__kernel_rem_pio2f+0x3d8>
 8008e84:	eef1 6a66 	vneg.f32	s13, s13
 8008e88:	eeb1 7a47 	vneg.f32	s14, s14
 8008e8c:	edc7 6a00 	vstr	s13, [r7]
 8008e90:	ed87 7a01 	vstr	s14, [r7, #4]
 8008e94:	eef1 7a67 	vneg.f32	s15, s15
 8008e98:	e790      	b.n	8008dbc <__kernel_rem_pio2f+0x3f0>
 8008e9a:	bf00      	nop

08008e9c <scalbnf>:
 8008e9c:	ee10 3a10 	vmov	r3, s0
 8008ea0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008ea4:	d02b      	beq.n	8008efe <scalbnf+0x62>
 8008ea6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008eaa:	d302      	bcc.n	8008eb2 <scalbnf+0x16>
 8008eac:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008eb0:	4770      	bx	lr
 8008eb2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008eb6:	d123      	bne.n	8008f00 <scalbnf+0x64>
 8008eb8:	4b24      	ldr	r3, [pc, #144]	@ (8008f4c <scalbnf+0xb0>)
 8008eba:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008f50 <scalbnf+0xb4>
 8008ebe:	4298      	cmp	r0, r3
 8008ec0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008ec4:	db17      	blt.n	8008ef6 <scalbnf+0x5a>
 8008ec6:	ee10 3a10 	vmov	r3, s0
 8008eca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008ece:	3a19      	subs	r2, #25
 8008ed0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008ed4:	4288      	cmp	r0, r1
 8008ed6:	dd15      	ble.n	8008f04 <scalbnf+0x68>
 8008ed8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008f54 <scalbnf+0xb8>
 8008edc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008f58 <scalbnf+0xbc>
 8008ee0:	ee10 3a10 	vmov	r3, s0
 8008ee4:	eeb0 7a67 	vmov.f32	s14, s15
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bfb8      	it	lt
 8008eec:	eef0 7a66 	vmovlt.f32	s15, s13
 8008ef0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008ef4:	4770      	bx	lr
 8008ef6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008f5c <scalbnf+0xc0>
 8008efa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008efe:	4770      	bx	lr
 8008f00:	0dd2      	lsrs	r2, r2, #23
 8008f02:	e7e5      	b.n	8008ed0 <scalbnf+0x34>
 8008f04:	4410      	add	r0, r2
 8008f06:	28fe      	cmp	r0, #254	@ 0xfe
 8008f08:	dce6      	bgt.n	8008ed8 <scalbnf+0x3c>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	dd06      	ble.n	8008f1c <scalbnf+0x80>
 8008f0e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008f12:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008f16:	ee00 3a10 	vmov	s0, r3
 8008f1a:	4770      	bx	lr
 8008f1c:	f110 0f16 	cmn.w	r0, #22
 8008f20:	da09      	bge.n	8008f36 <scalbnf+0x9a>
 8008f22:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008f5c <scalbnf+0xc0>
 8008f26:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008f60 <scalbnf+0xc4>
 8008f2a:	ee10 3a10 	vmov	r3, s0
 8008f2e:	eeb0 7a67 	vmov.f32	s14, s15
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	e7d9      	b.n	8008eea <scalbnf+0x4e>
 8008f36:	3019      	adds	r0, #25
 8008f38:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008f3c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008f40:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008f64 <scalbnf+0xc8>
 8008f44:	ee07 3a90 	vmov	s15, r3
 8008f48:	e7d7      	b.n	8008efa <scalbnf+0x5e>
 8008f4a:	bf00      	nop
 8008f4c:	ffff3cb0 	.word	0xffff3cb0
 8008f50:	4c000000 	.word	0x4c000000
 8008f54:	7149f2ca 	.word	0x7149f2ca
 8008f58:	f149f2ca 	.word	0xf149f2ca
 8008f5c:	0da24260 	.word	0x0da24260
 8008f60:	8da24260 	.word	0x8da24260
 8008f64:	33000000 	.word	0x33000000

08008f68 <floorf>:
 8008f68:	ee10 3a10 	vmov	r3, s0
 8008f6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008f70:	3a7f      	subs	r2, #127	@ 0x7f
 8008f72:	2a16      	cmp	r2, #22
 8008f74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008f78:	dc2b      	bgt.n	8008fd2 <floorf+0x6a>
 8008f7a:	2a00      	cmp	r2, #0
 8008f7c:	da12      	bge.n	8008fa4 <floorf+0x3c>
 8008f7e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008fe4 <floorf+0x7c>
 8008f82:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008f86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	dd06      	ble.n	8008f9e <floorf+0x36>
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	da24      	bge.n	8008fde <floorf+0x76>
 8008f94:	2900      	cmp	r1, #0
 8008f96:	4b14      	ldr	r3, [pc, #80]	@ (8008fe8 <floorf+0x80>)
 8008f98:	bf08      	it	eq
 8008f9a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8008f9e:	ee00 3a10 	vmov	s0, r3
 8008fa2:	4770      	bx	lr
 8008fa4:	4911      	ldr	r1, [pc, #68]	@ (8008fec <floorf+0x84>)
 8008fa6:	4111      	asrs	r1, r2
 8008fa8:	420b      	tst	r3, r1
 8008faa:	d0fa      	beq.n	8008fa2 <floorf+0x3a>
 8008fac:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8008fe4 <floorf+0x7c>
 8008fb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008fb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbc:	ddef      	ble.n	8008f9e <floorf+0x36>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfbe      	ittt	lt
 8008fc2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8008fc6:	fa40 f202 	asrlt.w	r2, r0, r2
 8008fca:	189b      	addlt	r3, r3, r2
 8008fcc:	ea23 0301 	bic.w	r3, r3, r1
 8008fd0:	e7e5      	b.n	8008f9e <floorf+0x36>
 8008fd2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008fd6:	d3e4      	bcc.n	8008fa2 <floorf+0x3a>
 8008fd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008fdc:	4770      	bx	lr
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e7dd      	b.n	8008f9e <floorf+0x36>
 8008fe2:	bf00      	nop
 8008fe4:	7149f2ca 	.word	0x7149f2ca
 8008fe8:	bf800000 	.word	0xbf800000
 8008fec:	007fffff 	.word	0x007fffff

08008ff0 <_init>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr

08008ffc <_fini>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	bf00      	nop
 8009000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009002:	bc08      	pop	{r3}
 8009004:	469e      	mov	lr, r3
 8009006:	4770      	bx	lr
