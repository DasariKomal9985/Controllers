
G474RE_DMA_Sine_Ver_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af98  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800b178  0800b178  0000c178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7d0  0800b7d0  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b7d0  0800b7d0  0000c7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7d8  0800b7d8  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7d8  0800b7d8  0000c7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7dc  0800b7dc  0000c7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b7e0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  200001d8  0800b9b8  0000d1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  0800b9b8  0000d804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b96  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003173  00000000  00000000  00026d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00029f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011df  00000000  00000000  0002b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f8c  00000000  00000000  0002c7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bcb  00000000  00000000  00056783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117d92  00000000  00000000  0007034e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001880e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007724  00000000  00000000  00188124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0018f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b160 	.word	0x0800b160

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800b160 	.word	0x0800b160

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b988 	b.w	8000f60 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	468e      	mov	lr, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	4688      	mov	r8, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d962      	bls.n	8000d44 <__udivmoddi4+0xdc>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	b14e      	cbz	r6, 8000c98 <__udivmoddi4+0x30>
 8000c84:	f1c6 0320 	rsb	r3, r6, #32
 8000c88:	fa01 f806 	lsl.w	r8, r1, r6
 8000c8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c90:	40b7      	lsls	r7, r6
 8000c92:	ea43 0808 	orr.w	r8, r3, r8
 8000c96:	40b4      	lsls	r4, r6
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	fa1f fc87 	uxth.w	ip, r7
 8000ca0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ca4:	0c23      	lsrs	r3, r4, #16
 8000ca6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000caa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cae:	fb01 f20c 	mul.w	r2, r1, ip
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cbc:	f080 80ea 	bcs.w	8000e94 <__udivmoddi4+0x22c>
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f240 80e7 	bls.w	8000e94 <__udivmoddi4+0x22c>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	443b      	add	r3, r7
 8000cca:	1a9a      	subs	r2, r3, r2
 8000ccc:	b2a3      	uxth	r3, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cda:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cde:	459c      	cmp	ip, r3
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x8e>
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	f080 80d6 	bcs.w	8000e98 <__udivmoddi4+0x230>
 8000cec:	459c      	cmp	ip, r3
 8000cee:	f240 80d3 	bls.w	8000e98 <__udivmoddi4+0x230>
 8000cf2:	443b      	add	r3, r7
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfa:	eba3 030c 	sub.w	r3, r3, ip
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11d      	cbz	r5, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40f3      	lsrs	r3, r6
 8000d04:	2200      	movs	r2, #0
 8000d06:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d905      	bls.n	8000d1e <__udivmoddi4+0xb6>
 8000d12:	b10d      	cbz	r5, 8000d18 <__udivmoddi4+0xb0>
 8000d14:	e9c5 0100 	strd	r0, r1, [r5]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e7f5      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d1e:	fab3 f183 	clz	r1, r3
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d146      	bne.n	8000db4 <__udivmoddi4+0x14c>
 8000d26:	4573      	cmp	r3, lr
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0xc8>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 8105 	bhi.w	8000f3a <__udivmoddi4+0x2d2>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	4690      	mov	r8, r2
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0e5      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d3e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d42:	e7e2      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f000 8090 	beq.w	8000e6a <__udivmoddi4+0x202>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f040 80a4 	bne.w	8000e9c <__udivmoddi4+0x234>
 8000d54:	1a8a      	subs	r2, r1, r2
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	b280      	uxth	r0, r0
 8000d5e:	b2bc      	uxth	r4, r7
 8000d60:	2101      	movs	r1, #1
 8000d62:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d66:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x11e>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x11c>
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	f200 80e0 	bhi.w	8000f44 <__udivmoddi4+0x2dc>
 8000d84:	46c4      	mov	ip, r8
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d8c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d90:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d94:	fb02 f404 	mul.w	r4, r2, r4
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x144>
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x142>
 8000da4:	429c      	cmp	r4, r3
 8000da6:	f200 80ca 	bhi.w	8000f3e <__udivmoddi4+0x2d6>
 8000daa:	4602      	mov	r2, r0
 8000dac:	1b1b      	subs	r3, r3, r4
 8000dae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000db2:	e7a5      	b.n	8000d00 <__udivmoddi4+0x98>
 8000db4:	f1c1 0620 	rsb	r6, r1, #32
 8000db8:	408b      	lsls	r3, r1
 8000dba:	fa22 f706 	lsr.w	r7, r2, r6
 8000dbe:	431f      	orrs	r7, r3
 8000dc0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dc4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dc8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dcc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	fa1f fc87 	uxth.w	ip, r7
 8000dda:	fbbe f0f9 	udiv	r0, lr, r9
 8000dde:	0c1c      	lsrs	r4, r3, #16
 8000de0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000de4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000de8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	fa02 f201 	lsl.w	r2, r2, r1
 8000df2:	d909      	bls.n	8000e08 <__udivmoddi4+0x1a0>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dfa:	f080 809c 	bcs.w	8000f36 <__udivmoddi4+0x2ce>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f240 8099 	bls.w	8000f36 <__udivmoddi4+0x2ce>
 8000e04:	3802      	subs	r0, #2
 8000e06:	443c      	add	r4, r7
 8000e08:	eba4 040e 	sub.w	r4, r4, lr
 8000e0c:	fa1f fe83 	uxth.w	lr, r3
 8000e10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e14:	fb09 4413 	mls	r4, r9, r3, r4
 8000e18:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e1c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e20:	45a4      	cmp	ip, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1ce>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e2a:	f080 8082 	bcs.w	8000f32 <__udivmoddi4+0x2ca>
 8000e2e:	45a4      	cmp	ip, r4
 8000e30:	d97f      	bls.n	8000f32 <__udivmoddi4+0x2ca>
 8000e32:	3b02      	subs	r3, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e3a:	eba4 040c 	sub.w	r4, r4, ip
 8000e3e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e42:	4564      	cmp	r4, ip
 8000e44:	4673      	mov	r3, lr
 8000e46:	46e1      	mov	r9, ip
 8000e48:	d362      	bcc.n	8000f10 <__udivmoddi4+0x2a8>
 8000e4a:	d05f      	beq.n	8000f0c <__udivmoddi4+0x2a4>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x1fe>
 8000e4e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e52:	eb64 0409 	sbc.w	r4, r4, r9
 8000e56:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e5e:	431e      	orrs	r6, r3
 8000e60:	40cc      	lsrs	r4, r1
 8000e62:	e9c5 6400 	strd	r6, r4, [r5]
 8000e66:	2100      	movs	r1, #0
 8000e68:	e74f      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000e6a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e6e:	0c01      	lsrs	r1, r0, #16
 8000e70:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	463c      	mov	r4, r7
 8000e80:	46b8      	mov	r8, r7
 8000e82:	46be      	mov	lr, r7
 8000e84:	2620      	movs	r6, #32
 8000e86:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e8a:	eba2 0208 	sub.w	r2, r2, r8
 8000e8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e92:	e766      	b.n	8000d62 <__udivmoddi4+0xfa>
 8000e94:	4601      	mov	r1, r0
 8000e96:	e718      	b.n	8000cca <__udivmoddi4+0x62>
 8000e98:	4610      	mov	r0, r2
 8000e9a:	e72c      	b.n	8000cf6 <__udivmoddi4+0x8e>
 8000e9c:	f1c6 0220 	rsb	r2, r6, #32
 8000ea0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ea4:	40b7      	lsls	r7, r6
 8000ea6:	40b1      	lsls	r1, r6
 8000ea8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eb6:	b2bc      	uxth	r4, r7
 8000eb8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb08 f904 	mul.w	r9, r8, r4
 8000ec6:	40b0      	lsls	r0, r6
 8000ec8:	4589      	cmp	r9, r1
 8000eca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ece:	b280      	uxth	r0, r0
 8000ed0:	d93e      	bls.n	8000f50 <__udivmoddi4+0x2e8>
 8000ed2:	1879      	adds	r1, r7, r1
 8000ed4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ed8:	d201      	bcs.n	8000ede <__udivmoddi4+0x276>
 8000eda:	4589      	cmp	r9, r1
 8000edc:	d81f      	bhi.n	8000f1e <__udivmoddi4+0x2b6>
 8000ede:	eba1 0109 	sub.w	r1, r1, r9
 8000ee2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee6:	fb09 f804 	mul.w	r8, r9, r4
 8000eea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eee:	b292      	uxth	r2, r2
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	4542      	cmp	r2, r8
 8000ef6:	d229      	bcs.n	8000f4c <__udivmoddi4+0x2e4>
 8000ef8:	18ba      	adds	r2, r7, r2
 8000efa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000efe:	d2c4      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f00:	4542      	cmp	r2, r8
 8000f02:	d2c2      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f04:	f1a9 0102 	sub.w	r1, r9, #2
 8000f08:	443a      	add	r2, r7
 8000f0a:	e7be      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f0c:	45f0      	cmp	r8, lr
 8000f0e:	d29d      	bcs.n	8000e4c <__udivmoddi4+0x1e4>
 8000f10:	ebbe 0302 	subs.w	r3, lr, r2
 8000f14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f18:	3801      	subs	r0, #1
 8000f1a:	46e1      	mov	r9, ip
 8000f1c:	e796      	b.n	8000e4c <__udivmoddi4+0x1e4>
 8000f1e:	eba7 0909 	sub.w	r9, r7, r9
 8000f22:	4449      	add	r1, r9
 8000f24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2c:	fb09 f804 	mul.w	r8, r9, r4
 8000f30:	e7db      	b.n	8000eea <__udivmoddi4+0x282>
 8000f32:	4673      	mov	r3, lr
 8000f34:	e77f      	b.n	8000e36 <__udivmoddi4+0x1ce>
 8000f36:	4650      	mov	r0, sl
 8000f38:	e766      	b.n	8000e08 <__udivmoddi4+0x1a0>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e6fd      	b.n	8000d3a <__udivmoddi4+0xd2>
 8000f3e:	443b      	add	r3, r7
 8000f40:	3a02      	subs	r2, #2
 8000f42:	e733      	b.n	8000dac <__udivmoddi4+0x144>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	443b      	add	r3, r7
 8000f4a:	e71c      	b.n	8000d86 <__udivmoddi4+0x11e>
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	e79c      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f50:	eba1 0109 	sub.w	r1, r1, r9
 8000f54:	46c4      	mov	ip, r8
 8000f56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5a:	fb09 f804 	mul.w	r8, r9, r4
 8000f5e:	e7c4      	b.n	8000eea <__udivmoddi4+0x282>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	0000      	movs	r0, r0
	...

08000f68 <FillDACHalf>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Fill a half of dac_buffer (offset can be 0 or BUFFER_LEN/2) in continuous-phase mode.
 This keeps phase continuous across calls. Must be called from DAC DMA callbacks. */
void FillDACHalf(int offset, int length) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	@ 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	// local copy of phase and phase_inc for speed (volatile updated)
	double p = phase;
 8000f72:	4b3f      	ldr	r3, [pc, #252]	@ (8001070 <FillDACHalf+0x108>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double inc = phase_inc;
 8000f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001074 <FillDACHalf+0x10c>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	e9c7 2306 	strd	r2, r3, [r7, #24]

	for (int i = 0; i < length; ++i) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f8a:	e05c      	b.n	8001046 <FillDACHalf+0xde>
		double s = sin(p);
 8000f8c:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8000f90:	f009 f8c2 	bl	800a118 <sin>
 8000f94:	ed87 0b04 	vstr	d0, [r7, #16]
		uint16_t sample = (uint16_t) ((s + 1.0) * (DAC_MAX / 2.0));
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	4b36      	ldr	r3, [pc, #216]	@ (8001078 <FillDACHalf+0x110>)
 8000f9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fa2:	f7ff f99b 	bl	80002dc <__adddf3>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	a32c      	add	r3, pc, #176	@ (adr r3, 8001060 <FillDACHalf+0xf8>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff fb48 	bl	8000648 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fe1a 	bl	8000bf8 <__aeabi_d2uiz>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	81fb      	strh	r3, [r7, #14]
		dac_buffer[offset + i] = sample;
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fcc:	4413      	add	r3, r2
 8000fce:	492b      	ldr	r1, [pc, #172]	@ (800107c <FillDACHalf+0x114>)
 8000fd0:	89fa      	ldrh	r2, [r7, #14]
 8000fd2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		p += inc;
 8000fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000fde:	f7ff f97d 	bl	80002dc <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		if (p >= 2.0 * M_PI)
 8000fea:	a31f      	add	r3, pc, #124	@ (adr r3, 8001068 <FillDACHalf+0x100>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000ff4:	f7ff fdae 	bl	8000b54 <__aeabi_dcmpge>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00a      	beq.n	8001014 <FillDACHalf+0xac>
			p -= 2.0 * M_PI;
 8000ffe:	a31a      	add	r3, pc, #104	@ (adr r3, 8001068 <FillDACHalf+0x100>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001008:	f7ff f966 	bl	80002d8 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		if (p < 0.0)
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001020:	f7ff fd84 	bl	8000b2c <__aeabi_dcmplt>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00a      	beq.n	8001040 <FillDACHalf+0xd8>
			p += 2.0 * M_PI;
 800102a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001068 <FillDACHalf+0x100>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001034:	f7ff f952 	bl	80002dc <__adddf3>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	for (int i = 0; i < length; ++i) {
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	3301      	adds	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
 8001046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	db9e      	blt.n	8000f8c <FillDACHalf+0x24>
	}

	// write back the phase atomically (volatile)
	phase = p;
 800104e:	4908      	ldr	r1, [pc, #32]	@ (8001070 <FillDACHalf+0x108>)
 8001050:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001054:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	@ 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	00000000 	.word	0x00000000
 8001064:	409ffe00 	.word	0x409ffe00
 8001068:	54442d18 	.word	0x54442d18
 800106c:	401921fb 	.word	0x401921fb
 8001070:	20000408 	.word	0x20000408
 8001074:	20000410 	.word	0x20000410
 8001078:	3ff00000 	.word	0x3ff00000
 800107c:	200001f4 	.word	0x200001f4

08001080 <InitGoertzel>:

/* Goertzel init — compute 2*cos(omega) coefficients for each target tone */
void InitGoertzel(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
	double omega_mark = 2.0 * M_PI * (double) TONE_MARK / (double) SAMPLE_RATE;
 8001086:	a318      	add	r3, pc, #96	@ (adr r3, 80010e8 <InitGoertzel+0x68>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double omega_space = 2.0 * M_PI * (double) TONE_SPACE / (double) SAMPLE_RATE;
 8001090:	a317      	add	r3, pc, #92	@ (adr r3, 80010f0 <InitGoertzel+0x70>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	e9c7 2300 	strd	r2, r3, [r7]
	coeff_mark = 2.0 * cos(omega_mark);
 800109a:	ed97 0b02 	vldr	d0, [r7, #8]
 800109e:	f008 ffe7 	bl	800a070 <cos>
 80010a2:	ec51 0b10 	vmov	r0, r1, d0
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	f7ff f917 	bl	80002dc <__adddf3>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	490b      	ldr	r1, [pc, #44]	@ (80010e0 <InitGoertzel+0x60>)
 80010b4:	e9c1 2300 	strd	r2, r3, [r1]
	coeff_space = 2.0 * cos(omega_space);
 80010b8:	ed97 0b00 	vldr	d0, [r7]
 80010bc:	f008 ffd8 	bl	800a070 <cos>
 80010c0:	ec51 0b10 	vmov	r0, r1, d0
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	f7ff f908 	bl	80002dc <__adddf3>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4904      	ldr	r1, [pc, #16]	@ (80010e4 <InitGoertzel+0x64>)
 80010d2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000430 	.word	0x20000430
 80010e4:	20000438 	.word	0x20000438
 80010e8:	5b22baa6 	.word	0x5b22baa6
 80010ec:	3fc8209f 	.word	0x3fc8209f
 80010f0:	5b22baa6 	.word	0x5b22baa6
 80010f4:	3fd8209f 	.word	0x3fd8209f

080010f8 <GoertzelDetect>:

/* Run Goertzel on `N` samples and return 1 if MARK (1200 Hz) stronger, 0 if SPACE stronger.
 Also update last_power_mark / last_power_space for inspection. */
uint8_t GoertzelDetect(uint16_t *samples, int N) {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b09c      	sub	sp, #112	@ 0x70
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	double mean = 0.0;
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	for (int i = 0; i < N; ++i)
 800110e:	2300      	movs	r3, #0
 8001110:	667b      	str	r3, [r7, #100]	@ 0x64
 8001112:	e014      	b.n	800113e <GoertzelDetect+0x46>
		mean += samples[i];
 8001114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa28 	bl	8000574 <__aeabi_i2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800112c:	f7ff f8d6 	bl	80002dc <__adddf3>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	for (int i = 0; i < N; ++i)
 8001138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800113a:	3301      	adds	r3, #1
 800113c:	667b      	str	r3, [r7, #100]	@ 0x64
 800113e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbe6      	blt.n	8001114 <GoertzelDetect+0x1c>
	mean /= N;
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	f7ff fa14 	bl	8000574 <__aeabi_i2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001154:	f7ff fba2 	bl	800089c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	double s_prev_mark = 0.0, s_prev2_mark = 0.0;
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double s_prev_space = 0.0, s_prev2_space = 0.0;
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	for (int i = 0; i < N; ++i) {
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001194:	e058      	b.n	8001248 <GoertzelDetect+0x150>
		double x = (double) samples[i] - mean; // simple DC removal
 8001196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9d7 	bl	8000554 <__aeabi_ui2d>
 80011a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011aa:	f7ff f895 	bl	80002d8 <__aeabi_dsub>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	e9c7 2306 	strd	r2, r3, [r7, #24]

		double s_mark = x + coeff_mark * s_prev_mark - s_prev2_mark;
 80011b6:	4b74      	ldr	r3, [pc, #464]	@ (8001388 <GoertzelDetect+0x290>)
 80011b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80011c0:	f7ff fa42 	bl	8000648 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011d0:	f7ff f884 	bl	80002dc <__adddf3>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80011e0:	f7ff f87a 	bl	80002d8 <__aeabi_dsub>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		s_prev2_mark = s_prev_mark;
 80011ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80011f0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		s_prev_mark = s_mark;
 80011f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011f8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

		double s_space = x + coeff_space * s_prev_space - s_prev2_space;
 80011fc:	4b63      	ldr	r3, [pc, #396]	@ (800138c <GoertzelDetect+0x294>)
 80011fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001202:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001206:	f7ff fa1f 	bl	8000648 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001216:	f7ff f861 	bl	80002dc <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001226:	f7ff f857 	bl	80002d8 <__aeabi_dsub>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		s_prev2_space = s_prev_space;
 8001232:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001236:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		s_prev_space = s_space;
 800123a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800123e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	for (int i = 0; i < N; ++i) {
 8001242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001244:	3301      	adds	r3, #1
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001248:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	dba2      	blt.n	8001196 <GoertzelDetect+0x9e>
	}

	double power_mark = s_prev_mark * s_prev_mark + s_prev2_mark * s_prev2_mark
 8001250:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001254:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001258:	f7ff f9f6 	bl	8000648 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001268:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800126c:	f7ff f9ec 	bl	8000648 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f830 	bl	80002dc <__adddf3>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4614      	mov	r4, r2
 8001282:	461d      	mov	r5, r3
			- coeff_mark * s_prev_mark * s_prev2_mark;
 8001284:	4b40      	ldr	r3, [pc, #256]	@ (8001388 <GoertzelDetect+0x290>)
 8001286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800128a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800128e:	f7ff f9db 	bl	8000648 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800129e:	f7ff f9d3 	bl	8000648 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
	double power_mark = s_prev_mark * s_prev_mark + s_prev2_mark * s_prev2_mark
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f815 	bl	80002d8 <__aeabi_dsub>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double power_space = s_prev_space * s_prev_space
 80012b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80012ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012be:	f7ff f9c3 	bl	8000648 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4614      	mov	r4, r2
 80012c8:	461d      	mov	r5, r3
			+ s_prev2_space * s_prev2_space
 80012ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80012ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80012d2:	f7ff f9b9 	bl	8000648 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4620      	mov	r0, r4
 80012dc:	4629      	mov	r1, r5
 80012de:	f7fe fffd 	bl	80002dc <__adddf3>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4614      	mov	r4, r2
 80012e8:	461d      	mov	r5, r3
			- coeff_space * s_prev_space * s_prev2_space;
 80012ea:	4b28      	ldr	r3, [pc, #160]	@ (800138c <GoertzelDetect+0x294>)
 80012ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80012f4:	f7ff f9a8 	bl	8000648 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001304:	f7ff f9a0 	bl	8000648 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
	double power_space = s_prev_space * s_prev_space
 800130c:	4620      	mov	r0, r4
 800130e:	4629      	mov	r1, r5
 8001310:	f7fe ffe2 	bl	80002d8 <__aeabi_dsub>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	// store for live inspection
	last_power_mark = power_mark;
 800131c:	491c      	ldr	r1, [pc, #112]	@ (8001390 <GoertzelDetect+0x298>)
 800131e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001322:	e9c1 2300 	strd	r2, r3, [r1]
	last_power_space = power_space;
 8001326:	491b      	ldr	r1, [pc, #108]	@ (8001394 <GoertzelDetect+0x29c>)
 8001328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800132c:	e9c1 2300 	strd	r2, r3, [r1]

	// simple thresholding: if both powers are very small treat as noise (skip)
	double total_power = power_mark + power_space;
 8001330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001334:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001338:	f7fe ffd0 	bl	80002dc <__adddf3>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (total_power < 1e6) { // threshold — tune for your signal level
 8001344:	a30e      	add	r3, pc, #56	@ (adr r3, 8001380 <GoertzelDetect+0x288>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <GoertzelDetect+0x264>
		return 0xFF; // no reliable tone
 8001358:	23ff      	movs	r3, #255	@ 0xff
 800135a:	e00d      	b.n	8001378 <GoertzelDetect+0x280>
	}
	return (power_mark > power_space) ? 1 : 0;
 800135c:	2301      	movs	r3, #1
 800135e:	461c      	mov	r4, r3
 8001360:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001364:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001368:	f7ff fbfe 	bl	8000b68 <__aeabi_dcmpgt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <GoertzelDetect+0x27e>
 8001372:	2300      	movs	r3, #0
 8001374:	461c      	mov	r4, r3
 8001376:	b2e3      	uxtb	r3, r4
}
 8001378:	4618      	mov	r0, r3
 800137a:	3770      	adds	r7, #112	@ 0x70
 800137c:	46bd      	mov	sp, r7
 800137e:	bdb0      	pop	{r4, r5, r7, pc}
 8001380:	00000000 	.word	0x00000000
 8001384:	412e8480 	.word	0x412e8480
 8001388:	20000430 	.word	0x20000430
 800138c:	20000438 	.word	0x20000438
 8001390:	20000418 	.word	0x20000418
 8001394:	20000420 	.word	0x20000420

08001398 <HAL_DAC_ConvHalfCpltCallbackCh1>:

/* --------------------------------------------------------------------------
 DMA Callbacks for DAC (these are called by HAL when DMA half/full completes)
 We refill the half that just completed so the DMA always reads valid data.
 --------------------------------------------------------------------------*/
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	(void) hdac;
	// refill first half
	FillDACHalf(0, BUFFER_LEN / 2);
 80013a0:	2164      	movs	r1, #100	@ 0x64
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fde0 	bl	8000f68 <FillDACHalf>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	(void) hdac;
	// refill second half
	FillDACHalf(BUFFER_LEN / 2, BUFFER_LEN / 2);
 80013b8:	2164      	movs	r1, #100	@ 0x64
 80013ba:	2064      	movs	r0, #100	@ 0x64
 80013bc:	f7ff fdd4 	bl	8000f68 <FillDACHalf>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_ADC_ConvCpltCallback>:

/* ADC DMA complete callback — process the full ADC buffer */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	(void) hadc;
	// Process the just-completed ADC buffer (adc_buffer)
	uint8_t tone = GoertzelDetect(adc_buffer, GOERTZEL_LEN);
 80013d0:	2140      	movs	r1, #64	@ 0x40
 80013d2:	480b      	ldr	r0, [pc, #44]	@ (8001400 <HAL_ADC_ConvCpltCallback+0x38>)
 80013d4:	f7ff fe90 	bl	80010f8 <GoertzelDetect>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]
	if (tone != 0xFF) {
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2bff      	cmp	r3, #255	@ 0xff
 80013e0:	d003      	beq.n	80013ea <HAL_ADC_ConvCpltCallback+0x22>
		detected_tone = tone;
 80013e2:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_ADC_ConvCpltCallback+0x3c>)
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	7013      	strb	r3, [r2, #0]
 80013e8:	e002      	b.n	80013f0 <HAL_ADC_ConvCpltCallback+0x28>
	} else {
		detected_tone = 0xFF;
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_ADC_ConvCpltCallback+0x3c>)
 80013ec:	22ff      	movs	r2, #255	@ 0xff
 80013ee:	701a      	strb	r2, [r3, #0]
	}
	// notify main loop (do not printf from here)
	goertzel_ready_flag = 1;
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_ADC_ConvCpltCallback+0x40>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000384 	.word	0x20000384
 8001404:	20000000 	.word	0x20000000
 8001408:	20000428 	.word	0x20000428

0800140c <_write>:

/* Safe putchar / printf redirection to UART4 (used in main loop only) */
int _write(int file, char *ptr, int len) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	b29a      	uxth	r2, r3
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	4804      	ldr	r0, [pc, #16]	@ (8001434 <_write+0x28>)
 8001424:	f005 f91a 	bl	800665c <HAL_UART_Transmit>
	return len;
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000061c 	.word	0x2000061c

08001438 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800143e:	f000 fdd6 	bl	8001fee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001442:	f000 f909 	bl	8001658 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001446:	f000 fad3 	bl	80019f0 <MX_GPIO_Init>
	MX_DMA_Init();
 800144a:	f000 fa9f 	bl	800198c <MX_DMA_Init>
	MX_TIM2_Init();
 800144e:	f000 fa03 	bl	8001858 <MX_TIM2_Init>
	MX_DAC2_Init();
 8001452:	f000 f9c7 	bl	80017e4 <MX_DAC2_Init>
	MX_ADC1_Init();
 8001456:	f000 f94b 	bl	80016f0 <MX_ADC1_Init>
	MX_UART4_Init();
 800145a:	f000 fa4b 	bl	80018f4 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	/* USER CODE BEGIN 2 */

	phase_inc = 2.0 * M_PI * TONE_MARK / (double) SAMPLE_RATE;
 800145e:	496a      	ldr	r1, [pc, #424]	@ (8001608 <main+0x1d0>)
 8001460:	a365      	add	r3, pc, #404	@ (adr r3, 80015f8 <main+0x1c0>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	e9c1 2300 	strd	r2, r3, [r1]
	FillDACHalf(0, BUFFER_LEN / 2);
 800146a:	2164      	movs	r1, #100	@ 0x64
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff fd7b 	bl	8000f68 <FillDACHalf>
	FillDACHalf(BUFFER_LEN / 2, BUFFER_LEN / 2);
 8001472:	2164      	movs	r1, #100	@ 0x64
 8001474:	2064      	movs	r0, #100	@ 0x64
 8001476:	f7ff fd77 	bl	8000f68 <FillDACHalf>

	/* start timer (triggers DAC + ADC), start DAC DMA circular and ADC DMA circular */
	HAL_TIM_Base_Start(&htim2);
 800147a:	4864      	ldr	r0, [pc, #400]	@ (800160c <main+0x1d4>)
 800147c:	f004 fd32 	bl	8005ee4 <HAL_TIM_Base_Start>

	HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, (uint32_t*) dac_buffer, BUFFER_LEN,
 8001480:	2300      	movs	r3, #0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	23c8      	movs	r3, #200	@ 0xc8
 8001486:	4a62      	ldr	r2, [pc, #392]	@ (8001610 <main+0x1d8>)
 8001488:	2100      	movs	r1, #0
 800148a:	4862      	ldr	r0, [pc, #392]	@ (8001614 <main+0x1dc>)
 800148c:	f002 fd8c 	bl	8003fa8 <HAL_DAC_Start_DMA>
	DAC_ALIGN_12B_R);

	/* Start ADC DMA circular: buffer length ADC_SAMPLES */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES);
 8001490:	2240      	movs	r2, #64	@ 0x40
 8001492:	4961      	ldr	r1, [pc, #388]	@ (8001618 <main+0x1e0>)
 8001494:	4861      	ldr	r0, [pc, #388]	@ (800161c <main+0x1e4>)
 8001496:	f001 fa39 	bl	800290c <HAL_ADC_Start_DMA>

	/* Goertzel constants */
	InitGoertzel();
 800149a:	f7ff fdf1 	bl	8001080 <InitGoertzel>

	/* notify via UART that system started */
	snprintf(uart_msg, sizeof(uart_msg),
 800149e:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80014a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001620 <main+0x1e8>)
 80014aa:	2150      	movs	r1, #80	@ 0x50
 80014ac:	485d      	ldr	r0, [pc, #372]	@ (8001624 <main+0x1ec>)
 80014ae:	f006 fc99 	bl	8007de4 <sniprintf>
			"AFSK generator started: MARK=%dHz, SPACE=%dHz\r\n",
			(int) TONE_MARK, (int) TONE_SPACE);
	HAL_UART_Transmit(&huart4, (uint8_t*) uart_msg, strlen(uart_msg),
 80014b2:	485c      	ldr	r0, [pc, #368]	@ (8001624 <main+0x1ec>)
 80014b4:	f7fe ff04 	bl	80002c0 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	4958      	ldr	r1, [pc, #352]	@ (8001624 <main+0x1ec>)
 80014c2:	4859      	ldr	r0, [pc, #356]	@ (8001628 <main+0x1f0>)
 80014c4:	f005 f8ca 	bl	800665c <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	uint32_t last_toggle = HAL_GetTick();
 80014c8:	f000 fdf6 	bl	80020b8 <HAL_GetTick>
 80014cc:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint32_t now = HAL_GetTick();
 80014ce:	f000 fdf3 	bl	80020b8 <HAL_GetTick>
 80014d2:	6038      	str	r0, [r7, #0]
		if ((now - last_toggle) >= TOGGLE_MS) {
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014de:	d338      	bcc.n	8001552 <main+0x11a>
			last_toggle = now;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	607b      	str	r3, [r7, #4]
			if (phase_inc == (2.0 * M_PI * TONE_MARK / (double) SAMPLE_RATE)) {
 80014e4:	4b48      	ldr	r3, [pc, #288]	@ (8001608 <main+0x1d0>)
 80014e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ea:	a343      	add	r3, pc, #268	@ (adr r3, 80015f8 <main+0x1c0>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff fb12 	bl	8000b18 <__aeabi_dcmpeq>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d010      	beq.n	800151c <main+0xe4>
				phase_inc = 2.0 * M_PI * TONE_SPACE / (double) SAMPLE_RATE;
 80014fa:	4943      	ldr	r1, [pc, #268]	@ (8001608 <main+0x1d0>)
 80014fc:	a340      	add	r3, pc, #256	@ (adr r3, 8001600 <main+0x1c8>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
				snprintf(uart_msg, sizeof(uart_msg),
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b48      	ldr	r3, [pc, #288]	@ (800162c <main+0x1f4>)
 800150c:	e9cd 2300 	strd	r2, r3, [sp]
 8001510:	4a47      	ldr	r2, [pc, #284]	@ (8001630 <main+0x1f8>)
 8001512:	2150      	movs	r1, #80	@ 0x50
 8001514:	4843      	ldr	r0, [pc, #268]	@ (8001624 <main+0x1ec>)
 8001516:	f006 fc65 	bl	8007de4 <sniprintf>
 800151a:	e00f      	b.n	800153c <main+0x104>
						"Switch -> SPACE (%.0f Hz)\r\n", TONE_SPACE);
			} else {
				phase_inc = 2.0 * M_PI * TONE_MARK / (double) SAMPLE_RATE;
 800151c:	493a      	ldr	r1, [pc, #232]	@ (8001608 <main+0x1d0>)
 800151e:	a336      	add	r3, pc, #216	@ (adr r3, 80015f8 <main+0x1c0>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	e9c1 2300 	strd	r2, r3, [r1]
				snprintf(uart_msg, sizeof(uart_msg),
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <main+0x1fc>)
 800152e:	e9cd 2300 	strd	r2, r3, [sp]
 8001532:	4a41      	ldr	r2, [pc, #260]	@ (8001638 <main+0x200>)
 8001534:	2150      	movs	r1, #80	@ 0x50
 8001536:	483b      	ldr	r0, [pc, #236]	@ (8001624 <main+0x1ec>)
 8001538:	f006 fc54 	bl	8007de4 <sniprintf>
						"Switch -> MARK (%.0f Hz)\r\n", TONE_MARK);
			}
			HAL_UART_Transmit(&huart4, (uint8_t*) uart_msg, strlen(uart_msg),
 800153c:	4839      	ldr	r0, [pc, #228]	@ (8001624 <main+0x1ec>)
 800153e:	f7fe febf 	bl	80002c0 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	4936      	ldr	r1, [pc, #216]	@ (8001624 <main+0x1ec>)
 800154c:	4836      	ldr	r0, [pc, #216]	@ (8001628 <main+0x1f0>)
 800154e:	f005 f885 	bl	800665c <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}

		/* when Goertzel processed new block, print values (done in main loop to keep IRQ fast) */
		if (goertzel_ready_flag) {
 8001552:	4b3a      	ldr	r3, [pc, #232]	@ (800163c <main+0x204>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d046      	beq.n	80015ea <main+0x1b2>
			goertzel_ready_flag = 0;
 800155c:	4b37      	ldr	r3, [pc, #220]	@ (800163c <main+0x204>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]

			// detected_tone can be 1 (MARK) or 0 (SPACE) or 0xFF (noise)
			if (detected_tone == 1) {
 8001562:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <main+0x208>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d10f      	bne.n	800158c <main+0x154>
				snprintf(uart_msg, sizeof(uart_msg),
 800156c:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <main+0x20c>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	4935      	ldr	r1, [pc, #212]	@ (8001648 <main+0x210>)
 8001574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800157c:	e9cd 2300 	strd	r2, r3, [sp]
 8001580:	4a32      	ldr	r2, [pc, #200]	@ (800164c <main+0x214>)
 8001582:	2150      	movs	r1, #80	@ 0x50
 8001584:	4827      	ldr	r0, [pc, #156]	@ (8001624 <main+0x1ec>)
 8001586:	f006 fc2d 	bl	8007de4 <sniprintf>
 800158a:	e023      	b.n	80015d4 <main+0x19c>
						"DET: MARK  Pm=%.0f Ps=%.0f\r\n", last_power_mark,
						last_power_space);
			} else if (detected_tone == 0) {
 800158c:	4b2c      	ldr	r3, [pc, #176]	@ (8001640 <main+0x208>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10f      	bne.n	80015b6 <main+0x17e>
				snprintf(uart_msg, sizeof(uart_msg),
 8001596:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <main+0x20c>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	492a      	ldr	r1, [pc, #168]	@ (8001648 <main+0x210>)
 800159e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015a6:	e9cd 2300 	strd	r2, r3, [sp]
 80015aa:	4a29      	ldr	r2, [pc, #164]	@ (8001650 <main+0x218>)
 80015ac:	2150      	movs	r1, #80	@ 0x50
 80015ae:	481d      	ldr	r0, [pc, #116]	@ (8001624 <main+0x1ec>)
 80015b0:	f006 fc18 	bl	8007de4 <sniprintf>
 80015b4:	e00e      	b.n	80015d4 <main+0x19c>
						"DET: SPACE Pm=%.0f Ps=%.0f\r\n", last_power_mark,
						last_power_space);
			} else {
				snprintf(uart_msg, sizeof(uart_msg),
 80015b6:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <main+0x20c>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	4922      	ldr	r1, [pc, #136]	@ (8001648 <main+0x210>)
 80015be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015c6:	e9cd 2300 	strd	r2, r3, [sp]
 80015ca:	4a22      	ldr	r2, [pc, #136]	@ (8001654 <main+0x21c>)
 80015cc:	2150      	movs	r1, #80	@ 0x50
 80015ce:	4815      	ldr	r0, [pc, #84]	@ (8001624 <main+0x1ec>)
 80015d0:	f006 fc08 	bl	8007de4 <sniprintf>
						"DET: NOISE Pm=%.0f Ps=%.0f\r\n", last_power_mark,
						last_power_space);
			}
			HAL_UART_Transmit(&huart4, (uint8_t*) uart_msg, strlen(uart_msg),
 80015d4:	4813      	ldr	r0, [pc, #76]	@ (8001624 <main+0x1ec>)
 80015d6:	f7fe fe73 	bl	80002c0 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	4910      	ldr	r1, [pc, #64]	@ (8001624 <main+0x1ec>)
 80015e4:	4810      	ldr	r0, [pc, #64]	@ (8001628 <main+0x1f0>)
 80015e6:	f005 f839 	bl	800665c <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}

		/* small sleep to reduce CPU usage — DAC and ADC are driven by DMA/TIM */
		HAL_Delay(1);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f000 fd70 	bl	80020d0 <HAL_Delay>
	while (1) {
 80015f0:	e76d      	b.n	80014ce <main+0x96>
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	5b22baa6 	.word	0x5b22baa6
 80015fc:	3fc8209f 	.word	0x3fc8209f
 8001600:	5b22baa6 	.word	0x5b22baa6
 8001604:	3fd8209f 	.word	0x3fd8209f
 8001608:	20000410 	.word	0x20000410
 800160c:	200005d0 	.word	0x200005d0
 8001610:	200001f4 	.word	0x200001f4
 8001614:	2000055c 	.word	0x2000055c
 8001618:	20000384 	.word	0x20000384
 800161c:	20000490 	.word	0x20000490
 8001620:	0800b178 	.word	0x0800b178
 8001624:	20000440 	.word	0x20000440
 8001628:	2000061c 	.word	0x2000061c
 800162c:	40a2c000 	.word	0x40a2c000
 8001630:	0800b1a8 	.word	0x0800b1a8
 8001634:	4092c000 	.word	0x4092c000
 8001638:	0800b1c4 	.word	0x0800b1c4
 800163c:	20000428 	.word	0x20000428
 8001640:	20000000 	.word	0x20000000
 8001644:	20000418 	.word	0x20000418
 8001648:	20000420 	.word	0x20000420
 800164c:	0800b1e0 	.word	0x0800b1e0
 8001650:	0800b200 	.word	0x0800b200
 8001654:	0800b220 	.word	0x0800b220

08001658 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b094      	sub	sp, #80	@ 0x50
 800165c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	2238      	movs	r2, #56	@ 0x38
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f006 fc35 	bl	8007ed6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800167a:	2000      	movs	r0, #0
 800167c:	f003 fbaa 	bl	8004dd4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001680:	2302      	movs	r3, #2
 8001682:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001684:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800168a:	2340      	movs	r3, #64	@ 0x40
 800168c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168e:	2302      	movs	r3, #2
 8001690:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001692:	2302      	movs	r3, #2
 8001694:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001696:	2304      	movs	r3, #4
 8001698:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800169a:	2355      	movs	r3, #85	@ 0x55
 800169c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016aa:	f107 0318 	add.w	r3, r7, #24
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fc44 	bl	8004f3c <HAL_RCC_OscConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0x66>
		Error_Handler();
 80016ba:	f000 f9c9 	bl	8001a50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016be:	230f      	movs	r3, #15
 80016c0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c2:	2303      	movs	r3, #3
 80016c4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2104      	movs	r1, #4
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 ff42 	bl	8005560 <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x8e>
		Error_Handler();
 80016e2:	f000 f9b5 	bl	8001a50 <Error_Handler>
	}
}
 80016e6:	bf00      	nop
 80016e8:	3750      	adds	r7, #80	@ 0x50
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	@ 0x30
 80016f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80016f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2220      	movs	r2, #32
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f006 fbe4 	bl	8007ed6 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800170e:	4b33      	ldr	r3, [pc, #204]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001710:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001714:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001716:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001718:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800171c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800171e:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001724:	4b2d      	ldr	r3, [pc, #180]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800172a:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <MX_ADC1_Init+0xec>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001730:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001736:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001738:	2204      	movs	r2, #4
 800173a:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800173c:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <MX_ADC1_Init+0xec>)
 800173e:	2200      	movs	r2, #0
 8001740:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001742:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001744:	2201      	movs	r2, #1
 8001746:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <MX_ADC1_Init+0xec>)
 800174a:	2201      	movs	r2, #1
 800174c:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800174e:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001756:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001758:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 800175c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800175e:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001760:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001764:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001766:	4b1d      	ldr	r3, [pc, #116]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800176e:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800177c:	4817      	ldr	r0, [pc, #92]	@ (80017dc <MX_ADC1_Init+0xec>)
 800177e:	f000 ff09 	bl	8002594 <HAL_ADC_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_ADC1_Init+0x9c>
		Error_Handler();
 8001788:	f000 f962 	bl	8001a50 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	4811      	ldr	r0, [pc, #68]	@ (80017dc <MX_ADC1_Init+0xec>)
 8001798:	f002 f9cc 	bl	8003b34 <HAL_ADCEx_MultiModeConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_ADC1_Init+0xb6>
		Error_Handler();
 80017a2:	f000 f955 	bl	8001a50 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_ADC1_Init+0xf0>)
 80017a8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80017aa:	2306      	movs	r3, #6
 80017ac:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80017ae:	2304      	movs	r3, #4
 80017b0:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017b2:	237f      	movs	r3, #127	@ 0x7f
 80017b4:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017b6:	2304      	movs	r3, #4
 80017b8:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	@ (80017dc <MX_ADC1_Init+0xec>)
 80017c4:	f001 fbf4 	bl	8002fb0 <HAL_ADC_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_ADC1_Init+0xe2>
		Error_Handler();
 80017ce:	f000 f93f 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3730      	adds	r7, #48	@ 0x30
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000490 	.word	0x20000490
 80017e0:	04300002 	.word	0x04300002

080017e4 <MX_DAC2_Init>:
/**
 * @brief DAC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC2_Init(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	@ 0x30
 80017e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC2_Init 0 */

	/* USER CODE END DAC2_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80017ea:	463b      	mov	r3, r7
 80017ec:	2230      	movs	r2, #48	@ 0x30
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f006 fb70 	bl	8007ed6 <memset>

	/* USER CODE END DAC2_Init 1 */

	/** DAC Initialization
	 */
	hdac2.Instance = DAC2;
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <MX_DAC2_Init+0x6c>)
 80017f8:	4a16      	ldr	r2, [pc, #88]	@ (8001854 <MX_DAC2_Init+0x70>)
 80017fa:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac2) != HAL_OK) {
 80017fc:	4814      	ldr	r0, [pc, #80]	@ (8001850 <MX_DAC2_Init+0x6c>)
 80017fe:	f002 fbb0 	bl	8003f62 <HAL_DAC_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_DAC2_Init+0x28>
		Error_Handler();
 8001808:	f000 f922 	bl	8001a50 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800180c:	2302      	movs	r3, #2
 800180e:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800181c:	2312      	movs	r3, #18
 800181e:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001828:	2304      	movs	r3, #4
 800182a:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	@ (8001850 <MX_DAC2_Init+0x6c>)
 8001838:	f002 fc94 	bl	8004164 <HAL_DAC_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_DAC2_Init+0x62>
		Error_Handler();
 8001842:	f000 f905 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN DAC2_Init 2 */

	/* USER CODE END DAC2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	@ 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000055c 	.word	0x2000055c
 8001854:	50000c00 	.word	0x50000c00

08001858 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <MX_TIM2_Init+0x98>)
 8001878:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800187c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <MX_TIM2_Init+0x98>)
 8001880:	220f      	movs	r2, #15
 8001882:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <MX_TIM2_Init+0x98>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 265;
 800188a:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <MX_TIM2_Init+0x98>)
 800188c:	f240 1209 	movw	r2, #265	@ 0x109
 8001890:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <MX_TIM2_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <MX_TIM2_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800189e:	4814      	ldr	r0, [pc, #80]	@ (80018f0 <MX_TIM2_Init+0x98>)
 80018a0:	f004 fac8 	bl	8005e34 <HAL_TIM_Base_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0x56>
		Error_Handler();
 80018aa:	f000 f8d1 	bl	8001a50 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	480d      	ldr	r0, [pc, #52]	@ (80018f0 <MX_TIM2_Init+0x98>)
 80018bc:	f004 fb82 	bl	8005fc4 <HAL_TIM_ConfigClockSource>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM2_Init+0x72>
		Error_Handler();
 80018c6:	f000 f8c3 	bl	8001a50 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ca:	2320      	movs	r3, #32
 80018cc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <MX_TIM2_Init+0x98>)
 80018d8:	f004 fdda 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80018e2:	f000 f8b5 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200005d0 	.word	0x200005d0

080018f4 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80018f8:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <MX_UART4_Init+0x90>)
 80018fa:	4a23      	ldr	r2, [pc, #140]	@ (8001988 <MX_UART4_Init+0x94>)
 80018fc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <MX_UART4_Init+0x90>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <MX_UART4_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <MX_UART4_Init+0x90>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <MX_UART4_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <MX_UART4_Init+0x90>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <MX_UART4_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <MX_UART4_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <MX_UART4_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MX_UART4_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <MX_UART4_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800193c:	4811      	ldr	r0, [pc, #68]	@ (8001984 <MX_UART4_Init+0x90>)
 800193e:	f004 fe3d 	bl	80065bc <HAL_UART_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_UART4_Init+0x58>
		Error_Handler();
 8001948:	f000 f882 	bl	8001a50 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 800194c:	2100      	movs	r1, #0
 800194e:	480d      	ldr	r0, [pc, #52]	@ (8001984 <MX_UART4_Init+0x90>)
 8001950:	f005 fc66 	bl	8007220 <HAL_UARTEx_SetTxFifoThreshold>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800195a:	f000 f879 	bl	8001a50 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 800195e:	2100      	movs	r1, #0
 8001960:	4808      	ldr	r0, [pc, #32]	@ (8001984 <MX_UART4_Init+0x90>)
 8001962:	f005 fc9b 	bl	800729c <HAL_UARTEx_SetRxFifoThreshold>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800196c:	f000 f870 	bl	8001a50 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <MX_UART4_Init+0x90>)
 8001972:	f005 fc1c 	bl	80071ae <HAL_UARTEx_DisableFifoMode>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_UART4_Init+0x8c>
		Error_Handler();
 800197c:	f000 f868 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000061c 	.word	0x2000061c
 8001988:	40004c00 	.word	0x40004c00

0800198c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001992:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <MX_DMA_Init+0x60>)
 8001994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001996:	4a15      	ldr	r2, [pc, #84]	@ (80019ec <MX_DMA_Init+0x60>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6493      	str	r3, [r2, #72]	@ 0x48
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <MX_DMA_Init+0x60>)
 80019a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <MX_DMA_Init+0x60>)
 80019ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ae:	4a0f      	ldr	r2, [pc, #60]	@ (80019ec <MX_DMA_Init+0x60>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <MX_DMA_Init+0x60>)
 80019b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	200b      	movs	r0, #11
 80019c8:	f002 fa97 	bl	8003efa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019cc:	200b      	movs	r0, #11
 80019ce:	f002 faae 	bl	8003f2e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	200c      	movs	r0, #12
 80019d8:	f002 fa8f 	bl	8003efa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019dc:	200c      	movs	r0, #12
 80019de:	f002 faa6 	bl	8003f2e <HAL_NVIC_EnableIRQ>

}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000

080019f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <MX_GPIO_Init+0x5c>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <MX_GPIO_Init+0x5c>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <MX_GPIO_Init+0x5c>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <MX_GPIO_Init+0x5c>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	4a0e      	ldr	r2, [pc, #56]	@ (8001a4c <MX_GPIO_Init+0x5c>)
 8001a14:	f043 0320 	orr.w	r3, r3, #32
 8001a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_GPIO_Init+0x5c>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_GPIO_Init+0x5c>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	4a08      	ldr	r2, [pc, #32]	@ (8001a4c <MX_GPIO_Init+0x5c>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <MX_GPIO_Init+0x5c>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000

08001a50 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <Error_Handler+0x8>

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a66:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a92:	f003 fa43 	bl	8004f1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b09e      	sub	sp, #120	@ 0x78
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	2254      	movs	r2, #84	@ 0x54
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f006 fa06 	bl	8007ed6 <memset>
  if(hadc->Instance==ADC1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ad2:	d168      	bne.n	8001ba6 <HAL_ADC_MspInit+0x102>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ad8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001ada:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ade:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 ff57 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001af0:	f7ff ffae 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001af4:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <HAL_ADC_MspInit+0x10c>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af8:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb0 <HAL_ADC_MspInit+0x10c>)
 8001afa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001afe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b00:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <HAL_ADC_MspInit+0x10c>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <HAL_ADC_MspInit+0x10c>)
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b10:	4a27      	ldr	r2, [pc, #156]	@ (8001bb0 <HAL_ADC_MspInit+0x10c>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b18:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <HAL_ADC_MspInit+0x10c>)
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b24:	2301      	movs	r3, #1
 8001b26:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b34:	4619      	mov	r1, r3
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3a:	f002 ffc9 	bl	8004ad0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b40:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb8 <HAL_ADC_MspInit+0x114>)
 8001b42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b46:	2205      	movs	r2, #5
 8001b48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b6a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b6e:	2220      	movs	r2, #32
 8001b70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b7a:	480e      	ldr	r0, [pc, #56]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b7c:	f002 fd36 	bl	80045ec <HAL_DMA_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001b86:	f7ff ff63 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b90:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_ADC_MspInit+0x110>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2012      	movs	r0, #18
 8001b9c:	f002 f9ad 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ba0:	2012      	movs	r0, #18
 8001ba2:	f002 f9c4 	bl	8003f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3778      	adds	r7, #120	@ 0x78
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	200004fc 	.word	0x200004fc
 8001bb8:	4002001c 	.word	0x4002001c

08001bbc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c88 <HAL_DAC_MspInit+0xcc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d150      	bne.n	8001c80 <HAL_DAC_MspInit+0xc4>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001bde:	4b2b      	ldr	r3, [pc, #172]	@ (8001c8c <HAL_DAC_MspInit+0xd0>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	4a2a      	ldr	r2, [pc, #168]	@ (8001c8c <HAL_DAC_MspInit+0xd0>)
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bea:	4b28      	ldr	r3, [pc, #160]	@ (8001c8c <HAL_DAC_MspInit+0xd0>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <HAL_DAC_MspInit+0xd0>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	4a24      	ldr	r2, [pc, #144]	@ (8001c8c <HAL_DAC_MspInit+0xd0>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c02:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <HAL_DAC_MspInit+0xd0>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c0e:	2340      	movs	r3, #64	@ 0x40
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c24:	f002 ff54 	bl	8004ad0 <HAL_GPIO_Init>

    /* DAC2 DMA Init */
    /* DAC2_CH1 Init */
    hdma_dac2_ch1.Instance = DMA1_Channel1;
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c94 <HAL_DAC_MspInit+0xd8>)
 8001c2c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c30:	2229      	movs	r2, #41	@ 0x29
 8001c32:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c36:	2210      	movs	r2, #16
 8001c38:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c42:	2280      	movs	r2, #128	@ 0x80
 8001c44:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c46:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c4c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c54:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c58:	2220      	movs	r2, #32
 8001c5a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c5e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8001c64:	480a      	ldr	r0, [pc, #40]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c66:	f002 fcc1 	bl	80045ec <HAL_DMA_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001c70:	f7ff feee 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a06      	ldr	r2, [pc, #24]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <HAL_DAC_MspInit+0xd4>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	@ 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	50000c00 	.word	0x50000c00
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	20000570 	.word	0x20000570
 8001c94:	40020008 	.word	0x40020008

08001c98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x38>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cae:	4a08      	ldr	r2, [pc, #32]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x38>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x38>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b09e      	sub	sp, #120	@ 0x78
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	2254      	movs	r2, #84	@ 0x54
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f006 f8ee 	bl	8007ed6 <memset>
  if(huart->Instance==UART4)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001d7c <HAL_UART_MspInit+0xa8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d136      	bne.n	8001d72 <HAL_UART_MspInit+0x9e>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d04:	2308      	movs	r3, #8
 8001d06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 fe41 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d1c:	f7ff fe98 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d20:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0xac>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	4a16      	ldr	r2, [pc, #88]	@ (8001d80 <HAL_UART_MspInit+0xac>)
 8001d26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_UART_MspInit+0xac>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_UART_MspInit+0xac>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3c:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_UART_MspInit+0xac>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_UART_MspInit+0xac>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001d62:	2305      	movs	r3, #5
 8001d64:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <HAL_UART_MspInit+0xb0>)
 8001d6e:	f002 feaf 	bl	8004ad0 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8001d72:	bf00      	nop
 8001d74:	3778      	adds	r7, #120	@ 0x78
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004c00 	.word	0x40004c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000800 	.word	0x48000800

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <NMI_Handler+0x4>

08001d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <MemManage_Handler+0x4>

08001da0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <UsageFault_Handler+0x4>

08001db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dde:	f000 f959 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <DMA1_Channel1_IRQHandler+0x10>)
 8001dee:	f002 fd20 	bl	8004832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000570 	.word	0x20000570

08001dfc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <DMA1_Channel2_IRQHandler+0x10>)
 8001e02:	f002 fd16 	bl	8004832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200004fc 	.word	0x200004fc

08001e10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <ADC1_2_IRQHandler+0x10>)
 8001e16:	f000 fe4d 	bl	8002ab4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000490 	.word	0x20000490

08001e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_kill>:

int _kill(int pid, int sig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3e:	f006 f89d 	bl	8007f7c <__errno>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2216      	movs	r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
  return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_exit>:

void _exit (int status)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffe7 	bl	8001e34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e66:	bf00      	nop
 8001e68:	e7fd      	b.n	8001e66 <_exit+0x12>

08001e6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e00a      	b.n	8001e92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e7c:	f3af 8000 	nop.w
 8001e80:	4601      	mov	r1, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	60ba      	str	r2, [r7, #8]
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbf0      	blt.n	8001e7c <_read+0x12>
  }

  return len;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ecc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_isatty>:

int _isatty(int file)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f006 f81e 	bl	8007f7c <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20020000 	.word	0x20020000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	200006b0 	.word	0x200006b0
 8001f74:	20000808 	.word	0x20000808

08001f78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f9c:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa0:	f7ff ffea 	bl	8001f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	@ (8001fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <LoopForever+0xe>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe8 <LoopForever+0x16>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fca:	f005 ffdd 	bl	8007f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fce:	f7ff fa33 	bl	8001438 <main>

08001fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd2:	e7fe      	b.n	8001fd2 <LoopForever>
  ldr   r0, =_estack
 8001fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001fe0:	0800b7e0 	.word	0x0800b7e0
  ldr r2, =_sbss
 8001fe4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001fe8:	20000804 	.word	0x20000804

08001fec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC3_IRQHandler>

08001fee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f001 ff73 	bl	8003ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ffe:	200f      	movs	r0, #15
 8002000:	f000 f80e 	bl	8002020 <HAL_InitTick>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	71fb      	strb	r3, [r7, #7]
 800200e:	e001      	b.n	8002014 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002010:	f7ff fd24 	bl	8001a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002014:	79fb      	ldrb	r3, [r7, #7]

}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800202c:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <HAL_InitTick+0x68>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d022      	beq.n	800207a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002034:	4b15      	ldr	r3, [pc, #84]	@ (800208c <HAL_InitTick+0x6c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_InitTick+0x68>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002040:	fbb1 f3f3 	udiv	r3, r1, r3
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	4618      	mov	r0, r3
 800204a:	f001 ff7e 	bl	8003f4a <HAL_SYSTICK_Config>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10f      	bne.n	8002074 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	d809      	bhi.n	800206e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205a:	2200      	movs	r2, #0
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	f04f 30ff 	mov.w	r0, #4294967295
 8002062:	f001 ff4a 	bl	8003efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <HAL_InitTick+0x70>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e007      	b.n	800207e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e004      	b.n	800207e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	2000000c 	.word	0x2000000c
 800208c:	20000004 	.word	0x20000004
 8002090:	20000008 	.word	0x20000008

08002094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_IncTick+0x1c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <HAL_IncTick+0x20>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a03      	ldr	r2, [pc, #12]	@ (80020b0 <HAL_IncTick+0x1c>)
 80020a4:	6013      	str	r3, [r2, #0]
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	200006b4 	.word	0x200006b4
 80020b4:	2000000c 	.word	0x2000000c

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200006b4 	.word	0x200006b4

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d004      	beq.n	80020f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_Delay+0x40>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f4:	bf00      	nop
 80020f6:	f7ff ffdf 	bl	80020b8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	429a      	cmp	r2, r3
 8002104:	d8f7      	bhi.n	80020f6 <HAL_Delay+0x26>
  {
  }
}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000000c 	.word	0x2000000c

08002114 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3360      	adds	r3, #96	@ 0x60
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <LL_ADC_SetOffset+0x44>)
 800219e:	4013      	ands	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	03fff000 	.word	0x03fff000

080021c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3360      	adds	r3, #96	@ 0x60
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3360      	adds	r3, #96	@ 0x60
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	431a      	orrs	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002226:	b480      	push	{r7}
 8002228:	b087      	sub	sp, #28
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3360      	adds	r3, #96	@ 0x60
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	431a      	orrs	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002250:	bf00      	nop
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3360      	adds	r3, #96	@ 0x60
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	615a      	str	r2, [r3, #20]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022de:	b480      	push	{r7}
 80022e0:	b087      	sub	sp, #28
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3330      	adds	r3, #48	@ 0x30
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	4413      	add	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	211f      	movs	r1, #31
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	401a      	ands	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	f003 011f 	and.w	r1, r3, #31
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	431a      	orrs	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3314      	adds	r3, #20
 800236c:	461a      	mov	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	0e5b      	lsrs	r3, r3, #25
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	4413      	add	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	0d1b      	lsrs	r3, r3, #20
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	2107      	movs	r1, #7
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	401a      	ands	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	0d1b      	lsrs	r3, r3, #20
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	431a      	orrs	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023cc:	43db      	mvns	r3, r3
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0318 	and.w	r3, r3, #24
 80023d6:	4908      	ldr	r1, [pc, #32]	@ (80023f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023d8:	40d9      	lsrs	r1, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	400b      	ands	r3, r1
 80023de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	0007ffff 	.word	0x0007ffff

080023fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 031f 	and.w	r3, r3, #31
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002444:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6093      	str	r3, [r2, #8]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800246c:	d101      	bne.n	8002472 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002490:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002494:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <LL_ADC_IsEnabled+0x18>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <LL_ADC_IsEnabled+0x1a>
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800252e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002532:	f043 0204 	orr.w	r2, r3, #4
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b04      	cmp	r3, #4
 8002558:	d101      	bne.n	800255e <LL_ADC_REG_IsConversionOngoing+0x18>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b08      	cmp	r3, #8
 800257e:	d101      	bne.n	8002584 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b089      	sub	sp, #36	@ 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e1a9      	b.n	8002902 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff fa71 	bl	8001aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff3f 	bl	8002458 <LL_ADC_IsDeepPowerDownEnabled>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff25 	bl	8002434 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff5a 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d115      	bne.n	8002626 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff3e 	bl	8002480 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002604:	4b9c      	ldr	r3, [pc, #624]	@ (8002878 <HAL_ADC_Init+0x2e4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	4a9c      	ldr	r2, [pc, #624]	@ (800287c <HAL_ADC_Init+0x2e8>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	3301      	adds	r3, #1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002618:	e002      	b.n	8002620 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3b01      	subs	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f9      	bne.n	800261a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff3c 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff75 	bl	8002546 <LL_ADC_REG_IsConversionOngoing>
 800265c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 8142 	bne.w	80028f0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 813e 	bne.w	80028f0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800267c:	f043 0202 	orr.w	r2, r3, #2
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff35 	bl	80024f8 <LL_ADC_IsEnabled>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d141      	bne.n	8002718 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800269c:	d004      	beq.n	80026a8 <HAL_ADC_Init+0x114>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a77      	ldr	r2, [pc, #476]	@ (8002880 <HAL_ADC_Init+0x2ec>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10f      	bne.n	80026c8 <HAL_ADC_Init+0x134>
 80026a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80026ac:	f7ff ff24 	bl	80024f8 <LL_ADC_IsEnabled>
 80026b0:	4604      	mov	r4, r0
 80026b2:	4873      	ldr	r0, [pc, #460]	@ (8002880 <HAL_ADC_Init+0x2ec>)
 80026b4:	f7ff ff20 	bl	80024f8 <LL_ADC_IsEnabled>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4323      	orrs	r3, r4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e012      	b.n	80026ee <HAL_ADC_Init+0x15a>
 80026c8:	486e      	ldr	r0, [pc, #440]	@ (8002884 <HAL_ADC_Init+0x2f0>)
 80026ca:	f7ff ff15 	bl	80024f8 <LL_ADC_IsEnabled>
 80026ce:	4604      	mov	r4, r0
 80026d0:	486d      	ldr	r0, [pc, #436]	@ (8002888 <HAL_ADC_Init+0x2f4>)
 80026d2:	f7ff ff11 	bl	80024f8 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	431c      	orrs	r4, r3
 80026da:	486c      	ldr	r0, [pc, #432]	@ (800288c <HAL_ADC_Init+0x2f8>)
 80026dc:	f7ff ff0c 	bl	80024f8 <LL_ADC_IsEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4323      	orrs	r3, r4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d012      	beq.n	8002718 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026fa:	d004      	beq.n	8002706 <HAL_ADC_Init+0x172>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a5f      	ldr	r2, [pc, #380]	@ (8002880 <HAL_ADC_Init+0x2ec>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_ADC_Init+0x176>
 8002706:	4a62      	ldr	r2, [pc, #392]	@ (8002890 <HAL_ADC_Init+0x2fc>)
 8002708:	e000      	b.n	800270c <HAL_ADC_Init+0x178>
 800270a:	4a62      	ldr	r2, [pc, #392]	@ (8002894 <HAL_ADC_Init+0x300>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f7ff fcfe 	bl	8002114 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7f5b      	ldrb	r3, [r3, #29]
 800271c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002722:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002728:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800272e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002736:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002742:	2b01      	cmp	r3, #1
 8002744:	d106      	bne.n	8002754 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	045b      	lsls	r3, r3, #17
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	4b48      	ldr	r3, [pc, #288]	@ (8002898 <HAL_ADC_Init+0x304>)
 8002778:	4013      	ands	r3, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	69b9      	ldr	r1, [r7, #24]
 8002780:	430b      	orrs	r3, r1
 8002782:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fee4 	bl	800256c <LL_ADC_INJ_IsConversionOngoing>
 80027a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d17f      	bne.n	80028ac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d17c      	bne.n	80028ac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027ce:	f023 0302 	bic.w	r3, r3, #2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	430b      	orrs	r3, r1
 80027da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d017      	beq.n	8002814 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80027f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002800:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6911      	ldr	r1, [r2, #16]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002812:	e013      	b.n	800283c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002822:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002834:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002838:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002842:	2b01      	cmp	r3, #1
 8002844:	d12a      	bne.n	800289c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800285c:	4311      	orrs	r1, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002862:	4311      	orrs	r1, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002868:	430a      	orrs	r2, r1
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	e019      	b.n	80028ac <HAL_ADC_Init+0x318>
 8002878:	20000004 	.word	0x20000004
 800287c:	053e2d63 	.word	0x053e2d63
 8002880:	50000100 	.word	0x50000100
 8002884:	50000400 	.word	0x50000400
 8002888:	50000500 	.word	0x50000500
 800288c:	50000600 	.word	0x50000600
 8002890:	50000300 	.word	0x50000300
 8002894:	50000700 	.word	0x50000700
 8002898:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10c      	bne.n	80028ce <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f023 010f 	bic.w	r1, r3, #15
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80028cc:	e007      	b.n	80028de <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 020f 	bic.w	r2, r2, #15
 80028dc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028ee:	e007      	b.n	8002900 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f4:	f043 0210 	orr.w	r2, r3, #16
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002900:	7ffb      	ldrb	r3, [r7, #31]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	@ 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd90      	pop	{r4, r7, pc}
 800290a:	bf00      	nop

0800290c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002920:	d004      	beq.n	800292c <HAL_ADC_Start_DMA+0x20>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a5a      	ldr	r2, [pc, #360]	@ (8002a90 <HAL_ADC_Start_DMA+0x184>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_ADC_Start_DMA+0x24>
 800292c:	4b59      	ldr	r3, [pc, #356]	@ (8002a94 <HAL_ADC_Start_DMA+0x188>)
 800292e:	e000      	b.n	8002932 <HAL_ADC_Start_DMA+0x26>
 8002930:	4b59      	ldr	r3, [pc, #356]	@ (8002a98 <HAL_ADC_Start_DMA+0x18c>)
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fd62 	bl	80023fc <LL_ADC_GetMultimode>
 8002938:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fe01 	bl	8002546 <LL_ADC_REG_IsConversionOngoing>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 809b 	bne.w	8002a82 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_ADC_Start_DMA+0x4e>
 8002956:	2302      	movs	r3, #2
 8002958:	e096      	b.n	8002a88 <HAL_ADC_Start_DMA+0x17c>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a4d      	ldr	r2, [pc, #308]	@ (8002a9c <HAL_ADC_Start_DMA+0x190>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d008      	beq.n	800297e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b05      	cmp	r3, #5
 8002976:	d002      	beq.n	800297e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b09      	cmp	r3, #9
 800297c:	d17a      	bne.n	8002a74 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 ff56 	bl	8003830 <ADC_Enable>
 8002984:	4603      	mov	r3, r0
 8002986:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d16d      	bne.n	8002a6a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002992:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002a90 <HAL_ADC_Start_DMA+0x184>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_ADC_Start_DMA+0xb4>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa0 <HAL_ADC_Start_DMA+0x194>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d002      	beq.n	80029bc <HAL_ADC_Start_DMA+0xb0>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_Start_DMA+0xb8>
 80029bc:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <HAL_ADC_Start_DMA+0x198>)
 80029be:	e001      	b.n	80029c4 <HAL_ADC_Start_DMA+0xb8>
 80029c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d002      	beq.n	80029d2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d105      	bne.n	80029de <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ee:	f023 0206 	bic.w	r2, r3, #6
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80029f6:	e002      	b.n	80029fe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a02:	4a29      	ldr	r2, [pc, #164]	@ (8002aa8 <HAL_ADC_Start_DMA+0x19c>)
 8002a04:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	4a28      	ldr	r2, [pc, #160]	@ (8002aac <HAL_ADC_Start_DMA+0x1a0>)
 8002a0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a12:	4a27      	ldr	r2, [pc, #156]	@ (8002ab0 <HAL_ADC_Start_DMA+0x1a4>)
 8002a14:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	221c      	movs	r2, #28
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0210 	orr.w	r2, r2, #16
 8002a34:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3340      	adds	r3, #64	@ 0x40
 8002a50:	4619      	mov	r1, r3
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f001 fe71 	bl	800473c <HAL_DMA_Start_IT>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fd5b 	bl	800251e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a68:	e00d      	b.n	8002a86 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002a72:	e008      	b.n	8002a86 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002a80:	e001      	b.n	8002a86 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
 8002a84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	50000100 	.word	0x50000100
 8002a94:	50000300 	.word	0x50000300
 8002a98:	50000700 	.word	0x50000700
 8002a9c:	50000600 	.word	0x50000600
 8002aa0:	50000500 	.word	0x50000500
 8002aa4:	50000400 	.word	0x50000400
 8002aa8:	0800395d 	.word	0x0800395d
 8002aac:	08003a35 	.word	0x08003a35
 8002ab0:	08003a51 	.word	0x08003a51

08002ab4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	@ 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ad8:	d004      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x30>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a8e      	ldr	r2, [pc, #568]	@ (8002d18 <HAL_ADC_IRQHandler+0x264>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0x34>
 8002ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8002d1c <HAL_ADC_IRQHandler+0x268>)
 8002ae6:	e000      	b.n	8002aea <HAL_ADC_IRQHandler+0x36>
 8002ae8:	4b8d      	ldr	r3, [pc, #564]	@ (8002d20 <HAL_ADC_IRQHandler+0x26c>)
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fc86 	bl	80023fc <LL_ADC_GetMultimode>
 8002af0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d017      	beq.n	8002b2c <HAL_ADC_IRQHandler+0x78>
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fffe 	bl	8003b20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <HAL_ADC_IRQHandler+0x8c>
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10b      	bne.n	8002b58 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8094 	beq.w	8002c74 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 808e 	beq.w	8002c74 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fb9f 	bl	80022b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d072      	beq.n	8002c66 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a64      	ldr	r2, [pc, #400]	@ (8002d18 <HAL_ADC_IRQHandler+0x264>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_ADC_IRQHandler+0xea>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a65      	ldr	r2, [pc, #404]	@ (8002d24 <HAL_ADC_IRQHandler+0x270>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d002      	beq.n	8002b9a <HAL_ADC_IRQHandler+0xe6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	e003      	b.n	8002ba2 <HAL_ADC_IRQHandler+0xee>
 8002b9a:	4b63      	ldr	r3, [pc, #396]	@ (8002d28 <HAL_ADC_IRQHandler+0x274>)
 8002b9c:	e001      	b.n	8002ba2 <HAL_ADC_IRQHandler+0xee>
 8002b9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d008      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d002      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	d104      	bne.n	8002bc6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	e014      	b.n	8002bf0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a53      	ldr	r2, [pc, #332]	@ (8002d18 <HAL_ADC_IRQHandler+0x264>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_ADC_IRQHandler+0x130>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a53      	ldr	r2, [pc, #332]	@ (8002d24 <HAL_ADC_IRQHandler+0x270>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d002      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x12c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_IRQHandler+0x134>
 8002be0:	4b51      	ldr	r3, [pc, #324]	@ (8002d28 <HAL_ADC_IRQHandler+0x274>)
 8002be2:	e001      	b.n	8002be8 <HAL_ADC_IRQHandler+0x134>
 8002be4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002be8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d135      	bne.n	8002c66 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d12e      	bne.n	8002c66 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fc9a 	bl	8002546 <LL_ADC_REG_IsConversionOngoing>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11a      	bne.n	8002c4e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 020c 	bic.w	r2, r2, #12
 8002c26:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d112      	bne.n	8002c66 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c4c:	e00b      	b.n	8002c66 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c52:	f043 0210 	orr.w	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5e:	f043 0201 	orr.w	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fbae 	bl	80013c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	220c      	movs	r2, #12
 8002c72:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_ADC_IRQHandler+0x1d4>
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80b3 	beq.w	8002dfa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80ad 	beq.w	8002dfa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fb3a 	bl	8002336 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002cc2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff faf5 	bl	80022b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cce:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a10      	ldr	r2, [pc, #64]	@ (8002d18 <HAL_ADC_IRQHandler+0x264>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_ADC_IRQHandler+0x23a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a11      	ldr	r2, [pc, #68]	@ (8002d24 <HAL_ADC_IRQHandler+0x270>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d002      	beq.n	8002cea <HAL_ADC_IRQHandler+0x236>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	e003      	b.n	8002cf2 <HAL_ADC_IRQHandler+0x23e>
 8002cea:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <HAL_ADC_IRQHandler+0x274>)
 8002cec:	e001      	b.n	8002cf2 <HAL_ADC_IRQHandler+0x23e>
 8002cee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d008      	beq.n	8002d0c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d002      	beq.n	8002d0c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b07      	cmp	r3, #7
 8002d0a:	d10f      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	e01f      	b.n	8002d56 <HAL_ADC_IRQHandler+0x2a2>
 8002d16:	bf00      	nop
 8002d18:	50000100 	.word	0x50000100
 8002d1c:	50000300 	.word	0x50000300
 8002d20:	50000700 	.word	0x50000700
 8002d24:	50000500 	.word	0x50000500
 8002d28:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a8b      	ldr	r2, [pc, #556]	@ (8002f60 <HAL_ADC_IRQHandler+0x4ac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_ADC_IRQHandler+0x296>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a8a      	ldr	r2, [pc, #552]	@ (8002f64 <HAL_ADC_IRQHandler+0x4b0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d002      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x292>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	e003      	b.n	8002d4e <HAL_ADC_IRQHandler+0x29a>
 8002d46:	4b88      	ldr	r3, [pc, #544]	@ (8002f68 <HAL_ADC_IRQHandler+0x4b4>)
 8002d48:	e001      	b.n	8002d4e <HAL_ADC_IRQHandler+0x29a>
 8002d4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d4e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d047      	beq.n	8002dec <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x2c2>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d03f      	beq.n	8002dec <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d13a      	bne.n	8002dec <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d80:	2b40      	cmp	r3, #64	@ 0x40
 8002d82:	d133      	bne.n	8002dec <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d12e      	bne.n	8002dec <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fbea 	bl	800256c <LL_ADC_INJ_IsConversionOngoing>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11a      	bne.n	8002dd4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002dac:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d112      	bne.n	8002dec <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dd2:	e00b      	b.n	8002dec <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	f043 0210 	orr.w	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fe6f 	bl	8003ad0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2260      	movs	r2, #96	@ 0x60
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_ADC_IRQHandler+0x374>
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00c      	beq.n	8002e28 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8b4 	bl	8002f88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2280      	movs	r2, #128	@ 0x80
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d012      	beq.n	8002e58 <HAL_ADC_IRQHandler+0x3a4>
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00d      	beq.n	8002e58 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e40:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fe55 	bl	8003af8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d012      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x3d4>
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e70:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fe47 	bl	8003b0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d043      	beq.n	8002f1a <HAL_ADC_IRQHandler+0x466>
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d03e      	beq.n	8002f1a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea8:	e021      	b.n	8002eee <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb8:	d004      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x410>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a28      	ldr	r2, [pc, #160]	@ (8002f60 <HAL_ADC_IRQHandler+0x4ac>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_IRQHandler+0x414>
 8002ec4:	4b29      	ldr	r3, [pc, #164]	@ (8002f6c <HAL_ADC_IRQHandler+0x4b8>)
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_IRQHandler+0x416>
 8002ec8:	4b29      	ldr	r3, [pc, #164]	@ (8002f70 <HAL_ADC_IRQHandler+0x4bc>)
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff faa4 	bl	8002418 <LL_ADC_GetMultiDMATransfer>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eda:	e008      	b.n	8002eee <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002eea:	2301      	movs	r3, #1
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10e      	bne.n	8002f12 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f04:	f043 0202 	orr.w	r2, r3, #2
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f845 	bl	8002f9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2210      	movs	r2, #16
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d018      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x4a2>
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f32:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f3e:	f043 0208 	orr.w	r2, r3, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fdc7 	bl	8003ae4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f56:	bf00      	nop
 8002f58:	3728      	adds	r7, #40	@ 0x28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	50000100 	.word	0x50000100
 8002f64:	50000500 	.word	0x50000500
 8002f68:	50000400 	.word	0x50000400
 8002f6c:	50000300 	.word	0x50000300
 8002f70:	50000700 	.word	0x50000700

08002f74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0b6      	sub	sp, #216	@ 0xd8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x24>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	f000 bc13 	b.w	80037fa <HAL_ADC_ConfigChannel+0x84a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fab0 	bl	8002546 <LL_ADC_REG_IsConversionOngoing>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 83f3 	bne.w	80037d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f7ff f96f 	bl	80022de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fa9e 	bl	8002546 <LL_ADC_REG_IsConversionOngoing>
 800300a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff faaa 	bl	800256c <LL_ADC_INJ_IsConversionOngoing>
 8003018:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800301c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 81d9 	bne.w	80033d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003026:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 81d4 	bne.w	80033d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003038:	d10f      	bne.n	800305a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	4619      	mov	r1, r3
 8003046:	f7ff f989 	bl	800235c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f91d 	bl	8002292 <LL_ADC_SetSamplingTimeCommonConfig>
 8003058:	e00e      	b.n	8003078 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	461a      	mov	r2, r3
 8003068:	f7ff f978 	bl	800235c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f90d 	bl	8002292 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	08db      	lsrs	r3, r3, #3
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b04      	cmp	r3, #4
 8003098:	d022      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030aa:	f7ff f867 	bl	800217c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff f8b3 	bl	8002226 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d102      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x126>
 80030d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030d4:	e000      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x128>
 80030d6:	2300      	movs	r3, #0
 80030d8:	461a      	mov	r2, r3
 80030da:	f7ff f8bf 	bl	800225c <LL_ADC_SetOffsetSaturation>
 80030de:	e17b      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f86c 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <HAL_ADC_ConfigChannel+0x15c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff f861 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	f003 021f 	and.w	r2, r3, #31
 800310a:	e01e      	b.n	800314a <HAL_ADC_ConfigChannel+0x19a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff f856 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8003118:	4603      	mov	r3, r0
 800311a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800312a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800312e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003132:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e004      	b.n	8003148 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800313e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x1b2>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	e018      	b.n	8003194 <HAL_ADC_ConfigChannel+0x1e4>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800317a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800317e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003186:	2320      	movs	r3, #32
 8003188:	e004      	b.n	8003194 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800318a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003194:	429a      	cmp	r2, r3
 8003196:	d106      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff f825 	bl	80021f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f809 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x222>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe fffe 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	e01e      	b.n	8003210 <HAL_ADC_ConfigChannel+0x260>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fff3 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80031f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80031f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003200:	2320      	movs	r3, #32
 8003202:	e004      	b.n	800320e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x278>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	e018      	b.n	800325a <HAL_ADC_ConfigChannel+0x2aa>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800323c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003244:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800324c:	2320      	movs	r3, #32
 800324e:	e004      	b.n	800325a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800325a:	429a      	cmp	r2, r3
 800325c:	d106      	bne.n	800326c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe ffc2 	bl	80021f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2102      	movs	r1, #2
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe ffa6 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x2e8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2102      	movs	r1, #2
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe ff9b 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	0e9b      	lsrs	r3, r3, #26
 8003292:	f003 021f 	and.w	r2, r3, #31
 8003296:	e01e      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x326>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2102      	movs	r1, #2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ff90 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80032b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80032be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80032c6:	2320      	movs	r3, #32
 80032c8:	e004      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80032ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d105      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x33e>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	0e9b      	lsrs	r3, r3, #26
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	e016      	b.n	800331c <HAL_ADC_ConfigChannel+0x36c>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003300:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003302:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003306:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800330e:	2320      	movs	r3, #32
 8003310:	e004      	b.n	800331c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003312:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800331c:	429a      	cmp	r2, r3
 800331e:	d106      	bne.n	800332e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2200      	movs	r2, #0
 8003326:	2102      	movs	r1, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe ff61 	bl	80021f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2103      	movs	r1, #3
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe ff45 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 800333a:	4603      	mov	r3, r0
 800333c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_ADC_ConfigChannel+0x3aa>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2103      	movs	r1, #3
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe ff3a 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8003350:	4603      	mov	r3, r0
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	e017      	b.n	800338a <HAL_ADC_ConfigChannel+0x3da>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2103      	movs	r1, #3
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe ff2f 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003374:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	e003      	b.n	8003388 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003392:	2b00      	cmp	r3, #0
 8003394:	d105      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x3f2>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	e011      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x416>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80033b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80033b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80033ba:	2320      	movs	r3, #32
 80033bc:	e003      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80033be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d106      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2103      	movs	r1, #3
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe ff0c 	bl	80021f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff f88b 	bl	80024f8 <LL_ADC_IsEnabled>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f040 813d 	bne.w	8003664 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f7fe ffdc 	bl	80023b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4aa2      	ldr	r2, [pc, #648]	@ (800368c <HAL_ADC_ConfigChannel+0x6dc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	f040 812e 	bne.w	8003664 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x480>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	3301      	adds	r3, #1
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2b09      	cmp	r3, #9
 8003426:	bf94      	ite	ls
 8003428:	2301      	movls	r3, #1
 800342a:	2300      	movhi	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e019      	b.n	8003464 <HAL_ADC_ConfigChannel+0x4b4>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800343e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003440:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003448:	2320      	movs	r3, #32
 800344a:	e003      	b.n	8003454 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800344c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	3301      	adds	r3, #1
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	2b09      	cmp	r3, #9
 800345c:	bf94      	ite	ls
 800345e:	2301      	movls	r3, #1
 8003460:	2300      	movhi	r3, #0
 8003462:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003464:	2b00      	cmp	r3, #0
 8003466:	d079      	beq.n	800355c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x4d4>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	3301      	adds	r3, #1
 800347c:	069b      	lsls	r3, r3, #26
 800347e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003482:	e015      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x500>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003494:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800349c:	2320      	movs	r3, #32
 800349e:	e003      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80034a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	069b      	lsls	r3, r3, #26
 80034ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x520>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	e017      	b.n	8003500 <HAL_ADC_ConfigChannel+0x550>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80034de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80034e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80034e8:	2320      	movs	r3, #32
 80034ea:	e003      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80034ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003500:	ea42 0103 	orr.w	r1, r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x576>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0e9b      	lsrs	r3, r3, #26
 8003516:	3301      	adds	r3, #1
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	051b      	lsls	r3, r3, #20
 8003524:	e018      	b.n	8003558 <HAL_ADC_ConfigChannel+0x5a8>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800353e:	2320      	movs	r3, #32
 8003540:	e003      	b.n	800354a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	3301      	adds	r3, #1
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003558:	430b      	orrs	r3, r1
 800355a:	e07e      	b.n	800365a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003564:	2b00      	cmp	r3, #0
 8003566:	d107      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x5c8>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	0e9b      	lsrs	r3, r3, #26
 800356e:	3301      	adds	r3, #1
 8003570:	069b      	lsls	r3, r3, #26
 8003572:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003576:	e015      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x5f4>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003590:	2320      	movs	r3, #32
 8003592:	e003      	b.n	800359c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3301      	adds	r3, #1
 800359e:	069b      	lsls	r3, r3, #26
 80035a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x614>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	3301      	adds	r3, #1
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	e017      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x644>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	61fb      	str	r3, [r7, #28]
  return result;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80035dc:	2320      	movs	r3, #32
 80035de:	e003      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	ea42 0103 	orr.w	r1, r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10d      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x670>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0e9b      	lsrs	r3, r3, #26
 800360a:	3301      	adds	r3, #1
 800360c:	f003 021f 	and.w	r2, r3, #31
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	3b1e      	subs	r3, #30
 8003618:	051b      	lsls	r3, r3, #20
 800361a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800361e:	e01b      	b.n	8003658 <HAL_ADC_ConfigChannel+0x6a8>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	613b      	str	r3, [r7, #16]
  return result;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003638:	2320      	movs	r3, #32
 800363a:	e003      	b.n	8003644 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f003 021f 	and.w	r2, r3, #31
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	3b1e      	subs	r3, #30
 8003652:	051b      	lsls	r3, r3, #20
 8003654:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003658:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800365e:	4619      	mov	r1, r3
 8003660:	f7fe fe7c 	bl	800235c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <HAL_ADC_ConfigChannel+0x6e0>)
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80be 	beq.w	80037ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800367a:	d004      	beq.n	8003686 <HAL_ADC_ConfigChannel+0x6d6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a04      	ldr	r2, [pc, #16]	@ (8003694 <HAL_ADC_ConfigChannel+0x6e4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10a      	bne.n	800369c <HAL_ADC_ConfigChannel+0x6ec>
 8003686:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <HAL_ADC_ConfigChannel+0x6e8>)
 8003688:	e009      	b.n	800369e <HAL_ADC_ConfigChannel+0x6ee>
 800368a:	bf00      	nop
 800368c:	407f0000 	.word	0x407f0000
 8003690:	80080000 	.word	0x80080000
 8003694:	50000100 	.word	0x50000100
 8003698:	50000300 	.word	0x50000300
 800369c:	4b59      	ldr	r3, [pc, #356]	@ (8003804 <HAL_ADC_ConfigChannel+0x854>)
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fd5e 	bl	8002160 <LL_ADC_GetCommonPathInternalCh>
 80036a4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a56      	ldr	r2, [pc, #344]	@ (8003808 <HAL_ADC_ConfigChannel+0x858>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_ADC_ConfigChannel+0x70c>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a55      	ldr	r2, [pc, #340]	@ (800380c <HAL_ADC_ConfigChannel+0x85c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d13a      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d134      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036d0:	d005      	beq.n	80036de <HAL_ADC_ConfigChannel+0x72e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003810 <HAL_ADC_ConfigChannel+0x860>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	f040 8085 	bne.w	80037e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036e6:	d004      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x742>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a49      	ldr	r2, [pc, #292]	@ (8003814 <HAL_ADC_ConfigChannel+0x864>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x746>
 80036f2:	4a49      	ldr	r2, [pc, #292]	@ (8003818 <HAL_ADC_ConfigChannel+0x868>)
 80036f4:	e000      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x748>
 80036f6:	4a43      	ldr	r2, [pc, #268]	@ (8003804 <HAL_ADC_ConfigChannel+0x854>)
 80036f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f7fe fd19 	bl	800213a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003708:	4b44      	ldr	r3, [pc, #272]	@ (800381c <HAL_ADC_ConfigChannel+0x86c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	4a44      	ldr	r2, [pc, #272]	@ (8003820 <HAL_ADC_ConfigChannel+0x870>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003722:	e002      	b.n	800372a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3b01      	subs	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003730:	e05a      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3b      	ldr	r2, [pc, #236]	@ (8003824 <HAL_ADC_ConfigChannel+0x874>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d125      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800373c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d11f      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a31      	ldr	r2, [pc, #196]	@ (8003814 <HAL_ADC_ConfigChannel+0x864>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d104      	bne.n	800375c <HAL_ADC_ConfigChannel+0x7ac>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a34      	ldr	r2, [pc, #208]	@ (8003828 <HAL_ADC_ConfigChannel+0x878>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d047      	beq.n	80037ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003764:	d004      	beq.n	8003770 <HAL_ADC_ConfigChannel+0x7c0>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2a      	ldr	r2, [pc, #168]	@ (8003814 <HAL_ADC_ConfigChannel+0x864>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7c4>
 8003770:	4a29      	ldr	r2, [pc, #164]	@ (8003818 <HAL_ADC_ConfigChannel+0x868>)
 8003772:	e000      	b.n	8003776 <HAL_ADC_ConfigChannel+0x7c6>
 8003774:	4a23      	ldr	r2, [pc, #140]	@ (8003804 <HAL_ADC_ConfigChannel+0x854>)
 8003776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f7fe fcda 	bl	800213a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003786:	e031      	b.n	80037ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a27      	ldr	r2, [pc, #156]	@ (800382c <HAL_ADC_ConfigChannel+0x87c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d12d      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d127      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003814 <HAL_ADC_ConfigChannel+0x864>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d022      	beq.n	80037ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b0:	d004      	beq.n	80037bc <HAL_ADC_ConfigChannel+0x80c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a17      	ldr	r2, [pc, #92]	@ (8003814 <HAL_ADC_ConfigChannel+0x864>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x810>
 80037bc:	4a16      	ldr	r2, [pc, #88]	@ (8003818 <HAL_ADC_ConfigChannel+0x868>)
 80037be:	e000      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x812>
 80037c0:	4a10      	ldr	r2, [pc, #64]	@ (8003804 <HAL_ADC_ConfigChannel+0x854>)
 80037c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f7fe fcb4 	bl	800213a <LL_ADC_SetCommonPathInternalCh>
 80037d2:	e00c      	b.n	80037ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80037e6:	e002      	b.n	80037ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	37d8      	adds	r7, #216	@ 0xd8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	50000700 	.word	0x50000700
 8003808:	c3210000 	.word	0xc3210000
 800380c:	90c00010 	.word	0x90c00010
 8003810:	50000600 	.word	0x50000600
 8003814:	50000100 	.word	0x50000100
 8003818:	50000300 	.word	0x50000300
 800381c:	20000004 	.word	0x20000004
 8003820:	053e2d63 	.word	0x053e2d63
 8003824:	c7520000 	.word	0xc7520000
 8003828:	50000500 	.word	0x50000500
 800382c:	cb840000 	.word	0xcb840000

08003830 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fe59 	bl	80024f8 <LL_ADC_IsEnabled>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d176      	bne.n	800393a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	4b3c      	ldr	r3, [pc, #240]	@ (8003944 <ADC_Enable+0x114>)
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00d      	beq.n	8003876 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	f043 0210 	orr.w	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386a:	f043 0201 	orr.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e062      	b.n	800393c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fe28 	bl	80024d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003888:	d004      	beq.n	8003894 <ADC_Enable+0x64>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2e      	ldr	r2, [pc, #184]	@ (8003948 <ADC_Enable+0x118>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <ADC_Enable+0x68>
 8003894:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <ADC_Enable+0x11c>)
 8003896:	e000      	b.n	800389a <ADC_Enable+0x6a>
 8003898:	4b2d      	ldr	r3, [pc, #180]	@ (8003950 <ADC_Enable+0x120>)
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fc60 	bl	8002160 <LL_ADC_GetCommonPathInternalCh>
 80038a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d013      	beq.n	80038d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003954 <ADC_Enable+0x124>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	4a29      	ldr	r2, [pc, #164]	@ (8003958 <ADC_Enable+0x128>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038c4:	e002      	b.n	80038cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f9      	bne.n	80038c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038d2:	f7fe fbf1 	bl	80020b8 <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d8:	e028      	b.n	800392c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe fe0a 	bl	80024f8 <LL_ADC_IsEnabled>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fdee 	bl	80024d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038f4:	f7fe fbe0 	bl	80020b8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d914      	bls.n	800392c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d00d      	beq.n	800392c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	f043 0210 	orr.w	r2, r3, #16
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e007      	b.n	800393c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d1cf      	bne.n	80038da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	8000003f 	.word	0x8000003f
 8003948:	50000100 	.word	0x50000100
 800394c:	50000300 	.word	0x50000300
 8003950:	50000700 	.word	0x50000700
 8003954:	20000004 	.word	0x20000004
 8003958:	053e2d63 	.word	0x053e2d63

0800395c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003972:	2b00      	cmp	r3, #0
 8003974:	d14b      	bne.n	8003a0e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d021      	beq.n	80039d4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fc8f 	bl	80022b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d032      	beq.n	8003a06 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d12b      	bne.n	8003a06 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d11f      	bne.n	8003a06 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039d2:	e018      	b.n	8003a06 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d111      	bne.n	8003a06 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7fd fcde 	bl	80013c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a0c:	e00e      	b.n	8003a2c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff fabe 	bl	8002f9c <HAL_ADC_ErrorCallback>
}
 8003a20:	e004      	b.n	8003a2c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fa96 	bl	8002f74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6e:	f043 0204 	orr.w	r2, r3, #4
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff fa90 	bl	8002f9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <LL_ADC_IsEnabled>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <LL_ADC_IsEnabled+0x18>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <LL_ADC_IsEnabled+0x1a>
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <LL_ADC_REG_IsConversionOngoing>:
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d101      	bne.n	8003ac2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b0a1      	sub	sp, #132	@ 0x84
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e0e7      	b.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b6a:	d102      	bne.n	8003b72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	e009      	b.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a6e      	ldr	r2, [pc, #440]	@ (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d102      	bne.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	e001      	b.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0be      	b.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ff7f 	bl	8003aaa <LL_ADC_REG_IsConversionOngoing>
 8003bac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff ff79 	bl	8003aaa <LL_ADC_REG_IsConversionOngoing>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 80a0 	bne.w	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 809c 	bne.w	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd0:	d004      	beq.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a55      	ldr	r2, [pc, #340]	@ (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d101      	bne.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003bdc:	4b56      	ldr	r3, [pc, #344]	@ (8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003bde:	e000      	b.n	8003be2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003be0:	4b56      	ldr	r3, [pc, #344]	@ (8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003be2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d04b      	beq.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bfe:	035b      	lsls	r3, r3, #13
 8003c00:	430b      	orrs	r3, r1
 8003c02:	431a      	orrs	r2, r3
 8003c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c10:	d004      	beq.n	8003c1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a45      	ldr	r2, [pc, #276]	@ (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d10f      	bne.n	8003c3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003c1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c20:	f7ff ff30 	bl	8003a84 <LL_ADC_IsEnabled>
 8003c24:	4604      	mov	r4, r0
 8003c26:	4841      	ldr	r0, [pc, #260]	@ (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c28:	f7ff ff2c 	bl	8003a84 <LL_ADC_IsEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4323      	orrs	r3, r4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e012      	b.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003c3c:	483c      	ldr	r0, [pc, #240]	@ (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c3e:	f7ff ff21 	bl	8003a84 <LL_ADC_IsEnabled>
 8003c42:	4604      	mov	r4, r0
 8003c44:	483b      	ldr	r0, [pc, #236]	@ (8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c46:	f7ff ff1d 	bl	8003a84 <LL_ADC_IsEnabled>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	431c      	orrs	r4, r3
 8003c4e:	483c      	ldr	r0, [pc, #240]	@ (8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c50:	f7ff ff18 	bl	8003a84 <LL_ADC_IsEnabled>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4323      	orrs	r3, r4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d056      	beq.n	8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c6e:	f023 030f 	bic.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	6811      	ldr	r1, [r2, #0]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c80:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c82:	e047      	b.n	8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c98:	d004      	beq.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d10f      	bne.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ca4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ca8:	f7ff feec 	bl	8003a84 <LL_ADC_IsEnabled>
 8003cac:	4604      	mov	r4, r0
 8003cae:	481f      	ldr	r0, [pc, #124]	@ (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cb0:	f7ff fee8 	bl	8003a84 <LL_ADC_IsEnabled>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4323      	orrs	r3, r4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e012      	b.n	8003cea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003cc4:	481a      	ldr	r0, [pc, #104]	@ (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003cc6:	f7ff fedd 	bl	8003a84 <LL_ADC_IsEnabled>
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4819      	ldr	r0, [pc, #100]	@ (8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cce:	f7ff fed9 	bl	8003a84 <LL_ADC_IsEnabled>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	431c      	orrs	r4, r3
 8003cd6:	481a      	ldr	r0, [pc, #104]	@ (8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003cd8:	f7ff fed4 	bl	8003a84 <LL_ADC_IsEnabled>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4323      	orrs	r3, r4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d012      	beq.n	8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cf6:	f023 030f 	bic.w	r3, r3, #15
 8003cfa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003cfc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cfe:	e009      	b.n	8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d12:	e000      	b.n	8003d16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3784      	adds	r7, #132	@ 0x84
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd90      	pop	{r4, r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	50000100 	.word	0x50000100
 8003d30:	50000400 	.word	0x50000400
 8003d34:	50000500 	.word	0x50000500
 8003d38:	50000300 	.word	0x50000300
 8003d3c:	50000700 	.word	0x50000700
 8003d40:	50000600 	.word	0x50000600

08003d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d54:	4b0c      	ldr	r3, [pc, #48]	@ (8003d88 <__NVIC_SetPriorityGrouping+0x44>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d60:	4013      	ands	r3, r2
 8003d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d76:	4a04      	ldr	r2, [pc, #16]	@ (8003d88 <__NVIC_SetPriorityGrouping+0x44>)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	60d3      	str	r3, [r2, #12]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d90:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <__NVIC_GetPriorityGrouping+0x18>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	f003 0307 	and.w	r3, r3, #7
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	db0b      	blt.n	8003dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	f003 021f 	and.w	r2, r3, #31
 8003dc0:	4907      	ldr	r1, [pc, #28]	@ (8003de0 <__NVIC_EnableIRQ+0x38>)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	2001      	movs	r0, #1
 8003dca:	fa00 f202 	lsl.w	r2, r0, r2
 8003dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	e000e100 	.word	0xe000e100

08003de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	6039      	str	r1, [r7, #0]
 8003dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	db0a      	blt.n	8003e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	490c      	ldr	r1, [pc, #48]	@ (8003e30 <__NVIC_SetPriority+0x4c>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	440b      	add	r3, r1
 8003e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e0c:	e00a      	b.n	8003e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4908      	ldr	r1, [pc, #32]	@ (8003e34 <__NVIC_SetPriority+0x50>)
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	3b04      	subs	r3, #4
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	440b      	add	r3, r1
 8003e22:	761a      	strb	r2, [r3, #24]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000e100 	.word	0xe000e100
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	@ 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f1c3 0307 	rsb	r3, r3, #7
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	bf28      	it	cs
 8003e56:	2304      	movcs	r3, #4
 8003e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d902      	bls.n	8003e68 <NVIC_EncodePriority+0x30>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3b03      	subs	r3, #3
 8003e66:	e000      	b.n	8003e6a <NVIC_EncodePriority+0x32>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8a:	43d9      	mvns	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	4313      	orrs	r3, r2
         );
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3724      	adds	r7, #36	@ 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eb0:	d301      	bcc.n	8003eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e00f      	b.n	8003ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee0 <SysTick_Config+0x40>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ebe:	210f      	movs	r1, #15
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	f7ff ff8e 	bl	8003de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec8:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <SysTick_Config+0x40>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ece:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <SysTick_Config+0x40>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	e000e010 	.word	0xe000e010

08003ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff29 	bl	8003d44 <__NVIC_SetPriorityGrouping>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f08:	f7ff ff40 	bl	8003d8c <__NVIC_GetPriorityGrouping>
 8003f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f7ff ff90 	bl	8003e38 <NVIC_EncodePriority>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ff5f 	bl	8003de4 <__NVIC_SetPriority>
}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff33 	bl	8003da8 <__NVIC_EnableIRQ>
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ffa4 	bl	8003ea0 <SysTick_Config>
 8003f58:	4603      	mov	r3, r0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e014      	b.n	8003f9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	791b      	ldrb	r3, [r3, #4]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7fd fe19 	bl	8001bbc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0b2      	b.n	8004126 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	795b      	ldrb	r3, [r3, #5]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_DAC_Start_DMA+0x24>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e0ac      	b.n	8004126 <HAL_DAC_Start_DMA+0x17e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d129      	bne.n	8004032 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4a53      	ldr	r2, [pc, #332]	@ (8004130 <HAL_DAC_Start_DMA+0x188>)
 8003fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4a52      	ldr	r2, [pc, #328]	@ (8004134 <HAL_DAC_Start_DMA+0x18c>)
 8003fec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4a51      	ldr	r2, [pc, #324]	@ (8004138 <HAL_DAC_Start_DMA+0x190>)
 8003ff4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004004:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_DAC_Start_DMA+0x6c>
 800400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400e:	2b04      	cmp	r3, #4
 8004010:	d005      	beq.n	800401e <HAL_DAC_Start_DMA+0x76>
 8004012:	e009      	b.n	8004028 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	61bb      	str	r3, [r7, #24]
        break;
 800401c:	e033      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	61bb      	str	r3, [r7, #24]
        break;
 8004026:	e02e      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3310      	adds	r3, #16
 800402e:	61bb      	str	r3, [r7, #24]
        break;
 8004030:	e029      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	4a41      	ldr	r2, [pc, #260]	@ (800413c <HAL_DAC_Start_DMA+0x194>)
 8004038:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4a40      	ldr	r2, [pc, #256]	@ (8004140 <HAL_DAC_Start_DMA+0x198>)
 8004040:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	4a3f      	ldr	r2, [pc, #252]	@ (8004144 <HAL_DAC_Start_DMA+0x19c>)
 8004048:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004058:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_DAC_Start_DMA+0xc0>
 8004060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004062:	2b04      	cmp	r3, #4
 8004064:	d005      	beq.n	8004072 <HAL_DAC_Start_DMA+0xca>
 8004066:	e009      	b.n	800407c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	61bb      	str	r3, [r7, #24]
        break;
 8004070:	e009      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3318      	adds	r3, #24
 8004078:	61bb      	str	r3, [r7, #24]
        break;
 800407a:	e004      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	331c      	adds	r3, #28
 8004082:	61bb      	str	r3, [r7, #24]
        break;
 8004084:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d111      	bne.n	80040b0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800409a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6898      	ldr	r0, [r3, #8]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	f000 fb49 	bl	800473c <HAL_DMA_Start_IT>
 80040aa:	4603      	mov	r3, r0
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e010      	b.n	80040d2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80040be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68d8      	ldr	r0, [r3, #12]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	f000 fb37 	bl	800473c <HAL_DMA_Start_IT>
 80040ce:	4603      	mov	r3, r0
 80040d0:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11c      	bne.n	8004118 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2201      	movs	r2, #1
 80040ec:	409a      	lsls	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040f6:	4b14      	ldr	r3, [pc, #80]	@ (8004148 <HAL_DAC_Start_DMA+0x1a0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	4a13      	ldr	r2, [pc, #76]	@ (800414c <HAL_DAC_Start_DMA+0x1a4>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	3301      	adds	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004108:	e002      	b.n	8004110 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	3b01      	subs	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f9      	bne.n	800410a <HAL_DAC_Start_DMA+0x162>
 8004116:	e005      	b.n	8004124 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f043 0204 	orr.w	r2, r3, #4
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004124:	7ffb      	ldrb	r3, [r7, #31]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	080044d9 	.word	0x080044d9
 8004134:	080044fb 	.word	0x080044fb
 8004138:	08004517 	.word	0x08004517
 800413c:	08004581 	.word	0x08004581
 8004140:	080045a3 	.word	0x080045a3
 8004144:	080045bf 	.word	0x080045bf
 8004148:	20000004 	.word	0x20000004
 800414c:	053e2d63 	.word	0x053e2d63

08004150 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	@ 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_DAC_ConfigChannel+0x1c>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e1a1      	b.n	80044c8 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	795b      	ldrb	r3, [r3, #5]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_DAC_ConfigChannel+0x32>
 8004192:	2302      	movs	r3, #2
 8004194:	e198      	b.n	80044c8 <HAL_DAC_ConfigChannel+0x364>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2202      	movs	r2, #2
 80041a0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d17a      	bne.n	80042a0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80041aa:	f7fd ff85 	bl	80020b8 <HAL_GetTick>
 80041ae:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d13d      	bne.n	8004232 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041b6:	e018      	b.n	80041ea <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80041b8:	f7fd ff7e 	bl	80020b8 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d911      	bls.n	80041ea <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f043 0208 	orr.w	r2, r3, #8
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2203      	movs	r2, #3
 80041e4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e16e      	b.n	80044c8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1df      	bne.n	80041b8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004200:	641a      	str	r2, [r3, #64]	@ 0x40
 8004202:	e020      	b.n	8004246 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004204:	f7fd ff58 	bl	80020b8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d90f      	bls.n	8004232 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004218:	2b00      	cmp	r3, #0
 800421a:	da0a      	bge.n	8004232 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f043 0208 	orr.w	r2, r3, #8
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2203      	movs	r2, #3
 800422c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e14a      	b.n	80044c8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004238:	2b00      	cmp	r3, #0
 800423a:	dbe3      	blt.n	8004204 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004256:	fa01 f303 	lsl.w	r3, r1, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	ea02 0103 	and.w	r1, r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	409a      	lsls	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	21ff      	movs	r1, #255	@ 0xff
 8004282:	fa01 f303 	lsl.w	r3, r1, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	ea02 0103 	and.w	r1, r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	409a      	lsls	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d11d      	bne.n	80042e4 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	221f      	movs	r2, #31
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c0:	4013      	ands	r3, r2
 80042c2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d8:	4313      	orrs	r3, r2
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2207      	movs	r2, #7
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fc:	4013      	ands	r3, r2
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d102      	bne.n	800430e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004308:	2300      	movs	r3, #0
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	e00f      	b.n	800432e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d102      	bne.n	800431c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004316:	2301      	movs	r3, #1
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	e008      	b.n	800432e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004324:	2301      	movs	r3, #1
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	e001      	b.n	800432e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800432a:	2300      	movs	r3, #0
 800432c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004350:	4013      	ands	r3, r2
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d102      	bne.n	8004362 <HAL_DAC_ConfigChannel+0x1fe>
 800435c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004360:	e000      	b.n	8004364 <HAL_DAC_ConfigChannel+0x200>
 8004362:	2300      	movs	r3, #0
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	4013      	ands	r3, r2
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	795b      	ldrb	r3, [r3, #5]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d102      	bne.n	800438e <HAL_DAC_ConfigChannel+0x22a>
 8004388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800438c:	e000      	b.n	8004390 <HAL_DAC_ConfigChannel+0x22c>
 800438e:	2300      	movs	r3, #0
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d114      	bne.n	80043d0 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80043a6:	f001 fa79 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80043aa:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4a48      	ldr	r2, [pc, #288]	@ (80044d0 <HAL_DAC_ConfigChannel+0x36c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d904      	bls.n	80043be <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80043bc:	e00f      	b.n	80043de <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4a44      	ldr	r2, [pc, #272]	@ (80044d4 <HAL_DAC_ConfigChannel+0x370>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d90a      	bls.n	80043dc <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ce:	e006      	b.n	80043de <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d6:	4313      	orrs	r3, r2
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043da:	e000      	b.n	80043de <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80043dc:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ec:	4313      	orrs	r3, r2
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43da      	mvns	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	400a      	ands	r2, r1
 8004414:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004430:	4013      	ands	r3, r2
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004448:	4313      	orrs	r3, r2
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004452:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	22c0      	movs	r2, #192	@ 0xc0
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	400a      	ands	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	ea02 0103 	and.w	r1, r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	409a      	lsls	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80044c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3728      	adds	r7, #40	@ 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	09896800 	.word	0x09896800
 80044d4:	04c4b400 	.word	0x04c4b400

080044d8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7fc ff62 	bl	80013b0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	711a      	strb	r2, [r3, #4]
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7fc ff45 	bl	8001398 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004522:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f043 0204 	orr.w	r2, r3, #4
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff fe0d 	bl	8004150 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	711a      	strb	r2, [r3, #4]
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff ffd8 	bl	8004544 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	711a      	strb	r2, [r3, #4]
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7ff ffd1 	bl	8004558 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f043 0204 	orr.w	r2, r3, #4
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ffc7 	bl	800456c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	711a      	strb	r2, [r3, #4]
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e08d      	b.n	800471a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <HAL_DMA_Init+0x138>)
 8004606:	429a      	cmp	r2, r3
 8004608:	d80f      	bhi.n	800462a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	4b45      	ldr	r3, [pc, #276]	@ (8004728 <HAL_DMA_Init+0x13c>)
 8004612:	4413      	add	r3, r2
 8004614:	4a45      	ldr	r2, [pc, #276]	@ (800472c <HAL_DMA_Init+0x140>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	009a      	lsls	r2, r3, #2
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a42      	ldr	r2, [pc, #264]	@ (8004730 <HAL_DMA_Init+0x144>)
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40
 8004628:	e00e      	b.n	8004648 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	4b40      	ldr	r3, [pc, #256]	@ (8004734 <HAL_DMA_Init+0x148>)
 8004632:	4413      	add	r3, r2
 8004634:	4a3d      	ldr	r2, [pc, #244]	@ (800472c <HAL_DMA_Init+0x140>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	009a      	lsls	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a3c      	ldr	r2, [pc, #240]	@ (8004738 <HAL_DMA_Init+0x14c>)
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800465e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004662:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800466c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004678:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004684:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f9b6 	bl	8004a0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046a8:	d102      	bne.n	80046b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d010      	beq.n	80046f0 <HAL_DMA_Init+0x104>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d80c      	bhi.n	80046f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f9d6 	bl	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	e008      	b.n	8004702 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40020407 	.word	0x40020407
 8004728:	bffdfff8 	.word	0xbffdfff8
 800472c:	cccccccd 	.word	0xcccccccd
 8004730:	40020000 	.word	0x40020000
 8004734:	bffdfbf8 	.word	0xbffdfbf8
 8004738:	40020400 	.word	0x40020400

0800473c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_DMA_Start_IT+0x20>
 8004758:	2302      	movs	r3, #2
 800475a:	e066      	b.n	800482a <HAL_DMA_Start_IT+0xee>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d155      	bne.n	800481c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f8fb 	bl	8004990 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 020e 	orr.w	r2, r2, #14
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e00f      	b.n	80047d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0204 	bic.w	r2, r2, #4
 80047c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 020a 	orr.w	r2, r2, #10
 80047d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004804:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004808:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e005      	b.n	8004828 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004824:	2302      	movs	r3, #2
 8004826:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004828:	7dfb      	ldrb	r3, [r7, #23]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	2204      	movs	r2, #4
 8004854:	409a      	lsls	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d026      	beq.n	80048ac <HAL_DMA_IRQHandler+0x7a>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d021      	beq.n	80048ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d107      	bne.n	8004886 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0204 	bic.w	r2, r2, #4
 8004884:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488a:	f003 021f 	and.w	r2, r3, #31
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	2104      	movs	r1, #4
 8004894:	fa01 f202 	lsl.w	r2, r1, r2
 8004898:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d071      	beq.n	8004986 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048aa:	e06c      	b.n	8004986 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	2202      	movs	r2, #2
 80048b6:	409a      	lsls	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02e      	beq.n	800491e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d029      	beq.n	800491e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 020a 	bic.w	r2, r2, #10
 80048e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f4:	f003 021f 	and.w	r2, r3, #31
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fc:	2102      	movs	r1, #2
 80048fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004902:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d038      	beq.n	8004986 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800491c:	e033      	b.n	8004986 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	2208      	movs	r2, #8
 8004928:	409a      	lsls	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4013      	ands	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d02a      	beq.n	8004988 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d025      	beq.n	8004988 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 020e 	bic.w	r2, r2, #14
 800494a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	2101      	movs	r1, #1
 800495a:	fa01 f202 	lsl.w	r2, r1, r2
 800495e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004986:	bf00      	nop
 8004988:	bf00      	nop
}
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049be:	f003 021f 	and.w	r2, r3, #31
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d108      	bne.n	80049f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049ee:	e007      	b.n	8004a00 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b16      	ldr	r3, [pc, #88]	@ (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d802      	bhi.n	8004a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a20:	4b15      	ldr	r3, [pc, #84]	@ (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e001      	b.n	8004a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a26:	4b15      	ldr	r3, [pc, #84]	@ (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a28:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	3b08      	subs	r3, #8
 8004a36:	4a12      	ldr	r2, [pc, #72]	@ (8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	009a      	lsls	r2, r3, #2
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a0b      	ldr	r2, [pc, #44]	@ (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	2201      	movs	r2, #1
 8004a60:	409a      	lsls	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40020407 	.word	0x40020407
 8004a78:	40020800 	.word	0x40020800
 8004a7c:	40020820 	.word	0x40020820
 8004a80:	cccccccd 	.word	0xcccccccd
 8004a84:	40020880 	.word	0x40020880

08004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a08      	ldr	r2, [pc, #32]	@ (8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004aaa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	1000823f 	.word	0x1000823f
 8004acc:	40020940 	.word	0x40020940

08004ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ade:	e15a      	b.n	8004d96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 814c 	beq.w	8004d90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d005      	beq.n	8004b10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d130      	bne.n	8004b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b46:	2201      	movs	r2, #1
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f003 0201 	and.w	r2, r3, #1
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d017      	beq.n	8004bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	2203      	movs	r2, #3
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4013      	ands	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d123      	bne.n	8004c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	08da      	lsrs	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3208      	adds	r2, #8
 8004bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	08da      	lsrs	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3208      	adds	r2, #8
 8004bfc:	6939      	ldr	r1, [r7, #16]
 8004bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 0203 	and.w	r2, r3, #3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80a6 	beq.w	8004d90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c44:	4b5b      	ldr	r3, [pc, #364]	@ (8004db4 <HAL_GPIO_Init+0x2e4>)
 8004c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c48:	4a5a      	ldr	r2, [pc, #360]	@ (8004db4 <HAL_GPIO_Init+0x2e4>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c50:	4b58      	ldr	r3, [pc, #352]	@ (8004db4 <HAL_GPIO_Init+0x2e4>)
 8004c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c5c:	4a56      	ldr	r2, [pc, #344]	@ (8004db8 <HAL_GPIO_Init+0x2e8>)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	3302      	adds	r3, #2
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	220f      	movs	r2, #15
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c86:	d01f      	beq.n	8004cc8 <HAL_GPIO_Init+0x1f8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a4c      	ldr	r2, [pc, #304]	@ (8004dbc <HAL_GPIO_Init+0x2ec>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d019      	beq.n	8004cc4 <HAL_GPIO_Init+0x1f4>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a4b      	ldr	r2, [pc, #300]	@ (8004dc0 <HAL_GPIO_Init+0x2f0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <HAL_GPIO_Init+0x1f0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a4a      	ldr	r2, [pc, #296]	@ (8004dc4 <HAL_GPIO_Init+0x2f4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00d      	beq.n	8004cbc <HAL_GPIO_Init+0x1ec>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a49      	ldr	r2, [pc, #292]	@ (8004dc8 <HAL_GPIO_Init+0x2f8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d007      	beq.n	8004cb8 <HAL_GPIO_Init+0x1e8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a48      	ldr	r2, [pc, #288]	@ (8004dcc <HAL_GPIO_Init+0x2fc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_GPIO_Init+0x1e4>
 8004cb0:	2305      	movs	r3, #5
 8004cb2:	e00a      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cb4:	2306      	movs	r3, #6
 8004cb6:	e008      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e006      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e004      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e002      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <HAL_GPIO_Init+0x1fa>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	f002 0203 	and.w	r2, r2, #3
 8004cd0:	0092      	lsls	r2, r2, #2
 8004cd2:	4093      	lsls	r3, r2
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cda:	4937      	ldr	r1, [pc, #220]	@ (8004db8 <HAL_GPIO_Init+0x2e8>)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ce8:	4b39      	ldr	r3, [pc, #228]	@ (8004dd0 <HAL_GPIO_Init+0x300>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d0c:	4a30      	ldr	r2, [pc, #192]	@ (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d12:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d36:	4a26      	ldr	r2, [pc, #152]	@ (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d3c:	4b24      	ldr	r3, [pc, #144]	@ (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d60:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d66:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d8a:	4a11      	ldr	r2, [pc, #68]	@ (8004dd0 <HAL_GPIO_Init+0x300>)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3301      	adds	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f47f ae9d 	bne.w	8004ae0 <HAL_GPIO_Init+0x10>
  }
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	48000400 	.word	0x48000400
 8004dc0:	48000800 	.word	0x48000800
 8004dc4:	48000c00 	.word	0x48000c00
 8004dc8:	48001000 	.word	0x48001000
 8004dcc:	48001400 	.word	0x48001400
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d141      	bne.n	8004e66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004de2:	4b4b      	ldr	r3, [pc, #300]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dee:	d131      	bne.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004df0:	4b47      	ldr	r3, [pc, #284]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004df6:	4a46      	ldr	r2, [pc, #280]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e00:	4b43      	ldr	r3, [pc, #268]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e08:	4a41      	ldr	r2, [pc, #260]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e10:	4b40      	ldr	r3, [pc, #256]	@ (8004f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2232      	movs	r2, #50	@ 0x32
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	0c9b      	lsrs	r3, r3, #18
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e26:	e002      	b.n	8004e2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e2e:	4b38      	ldr	r3, [pc, #224]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3a:	d102      	bne.n	8004e42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f2      	bne.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e42:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4e:	d158      	bne.n	8004f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e057      	b.n	8004f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e54:	4b2e      	ldr	r3, [pc, #184]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e64:	e04d      	b.n	8004f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e6c:	d141      	bne.n	8004ef2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e6e:	4b28      	ldr	r3, [pc, #160]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d131      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e7c:	4b24      	ldr	r3, [pc, #144]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e82:	4a23      	ldr	r2, [pc, #140]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e8c:	4b20      	ldr	r3, [pc, #128]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e94:	4a1e      	ldr	r2, [pc, #120]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2232      	movs	r2, #50	@ 0x32
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	0c9b      	lsrs	r3, r3, #18
 8004eae:	3301      	adds	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eb2:	e002      	b.n	8004eba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eba:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec6:	d102      	bne.n	8004ece <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f2      	bne.n	8004eb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ece:	4b10      	ldr	r3, [pc, #64]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eda:	d112      	bne.n	8004f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e011      	b.n	8004f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ef0:	e007      	b.n	8004f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ef2:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004efa:	4a05      	ldr	r2, [pc, #20]	@ (8004f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40007000 	.word	0x40007000
 8004f14:	20000004 	.word	0x20000004
 8004f18:	431bde83 	.word	0x431bde83

08004f1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f20:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a04      	ldr	r2, [pc, #16]	@ (8004f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f2a:	6093      	str	r3, [r2, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40007000 	.word	0x40007000

08004f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e2fe      	b.n	800554c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d075      	beq.n	8005046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f5a:	4b97      	ldr	r3, [pc, #604]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f64:	4b94      	ldr	r3, [pc, #592]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	d102      	bne.n	8004f7a <HAL_RCC_OscConfig+0x3e>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d002      	beq.n	8004f80 <HAL_RCC_OscConfig+0x44>
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d10b      	bne.n	8004f98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f80:	4b8d      	ldr	r3, [pc, #564]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d05b      	beq.n	8005044 <HAL_RCC_OscConfig+0x108>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d157      	bne.n	8005044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e2d9      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa0:	d106      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x74>
 8004fa2:	4b85      	ldr	r3, [pc, #532]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a84      	ldr	r2, [pc, #528]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e01d      	b.n	8004fec <HAL_RCC_OscConfig+0xb0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x98>
 8004fba:	4b7f      	ldr	r3, [pc, #508]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a7b      	ldr	r2, [pc, #492]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e00b      	b.n	8004fec <HAL_RCC_OscConfig+0xb0>
 8004fd4:	4b78      	ldr	r3, [pc, #480]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a77      	ldr	r2, [pc, #476]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b75      	ldr	r3, [pc, #468]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a74      	ldr	r2, [pc, #464]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8004fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fd f860 	bl	80020b8 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fd f85c 	bl	80020b8 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	@ 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e29e      	b.n	800554c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500e:	4b6a      	ldr	r3, [pc, #424]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0xc0>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fd f84c 	bl	80020b8 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005024:	f7fd f848 	bl	80020b8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	@ 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e28a      	b.n	800554c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005036:	4b60      	ldr	r3, [pc, #384]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0xe8>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d075      	beq.n	800513e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005052:	4b59      	ldr	r3, [pc, #356]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800505c:	4b56      	ldr	r3, [pc, #344]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b0c      	cmp	r3, #12
 800506a:	d102      	bne.n	8005072 <HAL_RCC_OscConfig+0x136>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d002      	beq.n	8005078 <HAL_RCC_OscConfig+0x13c>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d11f      	bne.n	80050b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005078:	4b4f      	ldr	r3, [pc, #316]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_OscConfig+0x154>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e25d      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005090:	4b49      	ldr	r3, [pc, #292]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	4946      	ldr	r1, [pc, #280]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050a4:	4b45      	ldr	r3, [pc, #276]	@ (80051bc <HAL_RCC_OscConfig+0x280>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fc ffb9 	bl	8002020 <HAL_InitTick>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d043      	beq.n	800513c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e249      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d023      	beq.n	8005108 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c0:	4b3d      	ldr	r3, [pc, #244]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a3c      	ldr	r2, [pc, #240]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 80050c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fc fff4 	bl	80020b8 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d4:	f7fc fff0 	bl	80020b8 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e232      	b.n	800554c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e6:	4b34      	ldr	r3, [pc, #208]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f2:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	061b      	lsls	r3, r3, #24
 8005100:	492d      	ldr	r1, [pc, #180]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
 8005106:	e01a      	b.n	800513e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005108:	4b2b      	ldr	r3, [pc, #172]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2a      	ldr	r2, [pc, #168]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 800510e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fc ffd0 	bl	80020b8 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800511c:	f7fc ffcc 	bl	80020b8 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e20e      	b.n	800554c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800512e:	4b22      	ldr	r3, [pc, #136]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x1e0>
 800513a:	e000      	b.n	800513e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800513c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d041      	beq.n	80051ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01c      	beq.n	800518c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005152:	4b19      	ldr	r3, [pc, #100]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8005154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005158:	4a17      	ldr	r2, [pc, #92]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7fc ffa9 	bl	80020b8 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800516a:	f7fc ffa5 	bl	80020b8 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e1e7      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800517c:	4b0e      	ldr	r3, [pc, #56]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 800517e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ef      	beq.n	800516a <HAL_RCC_OscConfig+0x22e>
 800518a:	e020      	b.n	80051ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 800518e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005192:	4a09      	ldr	r2, [pc, #36]	@ (80051b8 <HAL_RCC_OscConfig+0x27c>)
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fc ff8c 	bl	80020b8 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a2:	e00d      	b.n	80051c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a4:	f7fc ff88 	bl	80020b8 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d906      	bls.n	80051c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e1ca      	b.n	800554c <HAL_RCC_OscConfig+0x610>
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000
 80051bc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051c0:	4b8c      	ldr	r3, [pc, #560]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80051c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1ea      	bne.n	80051a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80a6 	beq.w	8005328 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051dc:	2300      	movs	r3, #0
 80051de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051e0:	4b84      	ldr	r3, [pc, #528]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_OscConfig+0x2b4>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <HAL_RCC_OscConfig+0x2b6>
 80051f0:	2300      	movs	r3, #0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00d      	beq.n	8005212 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f6:	4b7f      	ldr	r3, [pc, #508]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80051f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fa:	4a7e      	ldr	r2, [pc, #504]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80051fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005200:	6593      	str	r3, [r2, #88]	@ 0x58
 8005202:	4b7c      	ldr	r3, [pc, #496]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 8005204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800520e:	2301      	movs	r3, #1
 8005210:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005212:	4b79      	ldr	r3, [pc, #484]	@ (80053f8 <HAL_RCC_OscConfig+0x4bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d118      	bne.n	8005250 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800521e:	4b76      	ldr	r3, [pc, #472]	@ (80053f8 <HAL_RCC_OscConfig+0x4bc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a75      	ldr	r2, [pc, #468]	@ (80053f8 <HAL_RCC_OscConfig+0x4bc>)
 8005224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800522a:	f7fc ff45 	bl	80020b8 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005232:	f7fc ff41 	bl	80020b8 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e183      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005244:	4b6c      	ldr	r3, [pc, #432]	@ (80053f8 <HAL_RCC_OscConfig+0x4bc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d108      	bne.n	800526a <HAL_RCC_OscConfig+0x32e>
 8005258:	4b66      	ldr	r3, [pc, #408]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525e:	4a65      	ldr	r2, [pc, #404]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005268:	e024      	b.n	80052b4 <HAL_RCC_OscConfig+0x378>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b05      	cmp	r3, #5
 8005270:	d110      	bne.n	8005294 <HAL_RCC_OscConfig+0x358>
 8005272:	4b60      	ldr	r3, [pc, #384]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005278:	4a5e      	ldr	r2, [pc, #376]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 800527a:	f043 0304 	orr.w	r3, r3, #4
 800527e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005282:	4b5c      	ldr	r3, [pc, #368]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005288:	4a5a      	ldr	r2, [pc, #360]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005292:	e00f      	b.n	80052b4 <HAL_RCC_OscConfig+0x378>
 8005294:	4b57      	ldr	r3, [pc, #348]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529a:	4a56      	ldr	r2, [pc, #344]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052a4:	4b53      	ldr	r3, [pc, #332]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052aa:	4a52      	ldr	r2, [pc, #328]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80052ac:	f023 0304 	bic.w	r3, r3, #4
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d016      	beq.n	80052ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052bc:	f7fc fefc 	bl	80020b8 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c2:	e00a      	b.n	80052da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c4:	f7fc fef8 	bl	80020b8 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e138      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052da:	4b46      	ldr	r3, [pc, #280]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ed      	beq.n	80052c4 <HAL_RCC_OscConfig+0x388>
 80052e8:	e015      	b.n	8005316 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ea:	f7fc fee5 	bl	80020b8 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fc fee1 	bl	80020b8 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e121      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005308:	4b3a      	ldr	r3, [pc, #232]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ed      	bne.n	80052f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005316:	7ffb      	ldrb	r3, [r7, #31]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d105      	bne.n	8005328 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531c:	4b35      	ldr	r3, [pc, #212]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 800531e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005320:	4a34      	ldr	r2, [pc, #208]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 8005322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005326:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d03c      	beq.n	80053ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01c      	beq.n	8005376 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800533c:	4b2d      	ldr	r3, [pc, #180]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 800533e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005342:	4a2c      	ldr	r2, [pc, #176]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534c:	f7fc feb4 	bl	80020b8 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005354:	f7fc feb0 	bl	80020b8 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e0f2      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005366:	4b23      	ldr	r3, [pc, #140]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 8005368:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ef      	beq.n	8005354 <HAL_RCC_OscConfig+0x418>
 8005374:	e01b      	b.n	80053ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005376:	4b1f      	ldr	r3, [pc, #124]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 8005378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800537c:	4a1d      	ldr	r2, [pc, #116]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 800537e:	f023 0301 	bic.w	r3, r3, #1
 8005382:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005386:	f7fc fe97 	bl	80020b8 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800538e:	f7fc fe93 	bl	80020b8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e0d5      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053a0:	4b14      	ldr	r3, [pc, #80]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80053a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1ef      	bne.n	800538e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80c9 	beq.w	800554a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b8:	4b0e      	ldr	r3, [pc, #56]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 030c 	and.w	r3, r3, #12
 80053c0:	2b0c      	cmp	r3, #12
 80053c2:	f000 8083 	beq.w	80054cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d15e      	bne.n	800548c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a08      	ldr	r2, [pc, #32]	@ (80053f4 <HAL_RCC_OscConfig+0x4b8>)
 80053d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fc fe6d 	bl	80020b8 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e0:	e00c      	b.n	80053fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e2:	f7fc fe69 	bl	80020b8 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d905      	bls.n	80053fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e0ab      	b.n	800554c <HAL_RCC_OscConfig+0x610>
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fc:	4b55      	ldr	r3, [pc, #340]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ec      	bne.n	80053e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005408:	4b52      	ldr	r3, [pc, #328]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	4b52      	ldr	r3, [pc, #328]	@ (8005558 <HAL_RCC_OscConfig+0x61c>)
 800540e:	4013      	ands	r3, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6a11      	ldr	r1, [r2, #32]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005418:	3a01      	subs	r2, #1
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	4311      	orrs	r1, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005422:	0212      	lsls	r2, r2, #8
 8005424:	4311      	orrs	r1, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800542a:	0852      	lsrs	r2, r2, #1
 800542c:	3a01      	subs	r2, #1
 800542e:	0552      	lsls	r2, r2, #21
 8005430:	4311      	orrs	r1, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005436:	0852      	lsrs	r2, r2, #1
 8005438:	3a01      	subs	r2, #1
 800543a:	0652      	lsls	r2, r2, #25
 800543c:	4311      	orrs	r1, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005442:	06d2      	lsls	r2, r2, #27
 8005444:	430a      	orrs	r2, r1
 8005446:	4943      	ldr	r1, [pc, #268]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 8005448:	4313      	orrs	r3, r2
 800544a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800544c:	4b41      	ldr	r3, [pc, #260]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a40      	ldr	r2, [pc, #256]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 8005452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005456:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005458:	4b3e      	ldr	r3, [pc, #248]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a3d      	ldr	r2, [pc, #244]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 800545e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005462:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fc fe28 	bl	80020b8 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546c:	f7fc fe24 	bl	80020b8 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e066      	b.n	800554c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800547e:	4b35      	ldr	r3, [pc, #212]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x530>
 800548a:	e05e      	b.n	800554a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548c:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a30      	ldr	r2, [pc, #192]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 8005492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fc fe0e 	bl	80020b8 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fc fe0a 	bl	80020b8 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e04c      	b.n	800554c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b2:	4b28      	ldr	r3, [pc, #160]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80054be:	4b25      	ldr	r3, [pc, #148]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	4924      	ldr	r1, [pc, #144]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 80054c4:	4b25      	ldr	r3, [pc, #148]	@ (800555c <HAL_RCC_OscConfig+0x620>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	60cb      	str	r3, [r1, #12]
 80054ca:	e03e      	b.n	800554a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e039      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80054d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005554 <HAL_RCC_OscConfig+0x618>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0203 	and.w	r2, r3, #3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d12c      	bne.n	8005546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	3b01      	subs	r3, #1
 80054f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d123      	bne.n	8005546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005508:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800550a:	429a      	cmp	r2, r3
 800550c:	d11b      	bne.n	8005546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d113      	bne.n	8005546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	3b01      	subs	r3, #1
 800552c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800552e:	429a      	cmp	r2, r3
 8005530:	d109      	bne.n	8005546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	3b01      	subs	r3, #1
 8005540:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005542:	429a      	cmp	r2, r3
 8005544:	d001      	beq.n	800554a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40021000 	.word	0x40021000
 8005558:	019f800c 	.word	0x019f800c
 800555c:	feeefffc 	.word	0xfeeefffc

08005560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e11e      	b.n	80057b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005578:	4b91      	ldr	r3, [pc, #580]	@ (80057c0 <HAL_RCC_ClockConfig+0x260>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d910      	bls.n	80055a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005586:	4b8e      	ldr	r3, [pc, #568]	@ (80057c0 <HAL_RCC_ClockConfig+0x260>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f023 020f 	bic.w	r2, r3, #15
 800558e:	498c      	ldr	r1, [pc, #560]	@ (80057c0 <HAL_RCC_ClockConfig+0x260>)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	4313      	orrs	r3, r2
 8005594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005596:	4b8a      	ldr	r3, [pc, #552]	@ (80057c0 <HAL_RCC_ClockConfig+0x260>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d001      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e106      	b.n	80057b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d073      	beq.n	800569c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d129      	bne.n	8005610 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055bc:	4b81      	ldr	r3, [pc, #516]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0f4      	b.n	80057b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80055cc:	f000 f99e 	bl	800590c <RCC_GetSysClockFreqFromPLLSource>
 80055d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4a7c      	ldr	r2, [pc, #496]	@ (80057c8 <HAL_RCC_ClockConfig+0x268>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d93f      	bls.n	800565a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055da:	4b7a      	ldr	r3, [pc, #488]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d033      	beq.n	800565a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d12f      	bne.n	800565a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055fa:	4b72      	ldr	r3, [pc, #456]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005602:	4a70      	ldr	r2, [pc, #448]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 8005604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005608:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800560a:	2380      	movs	r3, #128	@ 0x80
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e024      	b.n	800565a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d107      	bne.n	8005628 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005618:	4b6a      	ldr	r3, [pc, #424]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0c6      	b.n	80057b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005628:	4b66      	ldr	r3, [pc, #408]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e0be      	b.n	80057b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005638:	f000 f8ce 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 800563c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4a61      	ldr	r2, [pc, #388]	@ (80057c8 <HAL_RCC_ClockConfig+0x268>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d909      	bls.n	800565a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005646:	4b5f      	ldr	r3, [pc, #380]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800564e:	4a5d      	ldr	r2, [pc, #372]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 8005650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005654:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005656:	2380      	movs	r3, #128	@ 0x80
 8005658:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800565a:	4b5a      	ldr	r3, [pc, #360]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 0203 	bic.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4957      	ldr	r1, [pc, #348]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 8005668:	4313      	orrs	r3, r2
 800566a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800566c:	f7fc fd24 	bl	80020b8 <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	e00a      	b.n	800568a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005674:	f7fc fd20 	bl	80020b8 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e095      	b.n	80057b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	4b4e      	ldr	r3, [pc, #312]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 020c 	and.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	429a      	cmp	r2, r3
 800569a:	d1eb      	bne.n	8005674 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d023      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056b4:	4b43      	ldr	r3, [pc, #268]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4a42      	ldr	r2, [pc, #264]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80056ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d007      	beq.n	80056dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80056cc:	4b3d      	ldr	r3, [pc, #244]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056d4:	4a3b      	ldr	r2, [pc, #236]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80056d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056dc:	4b39      	ldr	r3, [pc, #228]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4936      	ldr	r1, [pc, #216]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
 80056ee:	e008      	b.n	8005702 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b80      	cmp	r3, #128	@ 0x80
 80056f4:	d105      	bne.n	8005702 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056f6:	4b33      	ldr	r3, [pc, #204]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	4a32      	ldr	r2, [pc, #200]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 80056fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005700:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005702:	4b2f      	ldr	r3, [pc, #188]	@ (80057c0 <HAL_RCC_ClockConfig+0x260>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d21d      	bcs.n	800574c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005710:	4b2b      	ldr	r3, [pc, #172]	@ (80057c0 <HAL_RCC_ClockConfig+0x260>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 020f 	bic.w	r2, r3, #15
 8005718:	4929      	ldr	r1, [pc, #164]	@ (80057c0 <HAL_RCC_ClockConfig+0x260>)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	4313      	orrs	r3, r2
 800571e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005720:	f7fc fcca 	bl	80020b8 <HAL_GetTick>
 8005724:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	e00a      	b.n	800573e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005728:	f7fc fcc6 	bl	80020b8 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e03b      	b.n	80057b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573e:	4b20      	ldr	r3, [pc, #128]	@ (80057c0 <HAL_RCC_ClockConfig+0x260>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d1ed      	bne.n	8005728 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005758:	4b1a      	ldr	r3, [pc, #104]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4917      	ldr	r1, [pc, #92]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 8005766:	4313      	orrs	r3, r2
 8005768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005776:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	490f      	ldr	r1, [pc, #60]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800578a:	f000 f825 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 800578e:	4602      	mov	r2, r0
 8005790:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <HAL_RCC_ClockConfig+0x264>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	091b      	lsrs	r3, r3, #4
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	490c      	ldr	r1, [pc, #48]	@ (80057cc <HAL_RCC_ClockConfig+0x26c>)
 800579c:	5ccb      	ldrb	r3, [r1, r3]
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	fa22 f303 	lsr.w	r3, r2, r3
 80057a6:	4a0a      	ldr	r2, [pc, #40]	@ (80057d0 <HAL_RCC_ClockConfig+0x270>)
 80057a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057aa:	4b0a      	ldr	r3, [pc, #40]	@ (80057d4 <HAL_RCC_ClockConfig+0x274>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fc fc36 	bl	8002020 <HAL_InitTick>
 80057b4:	4603      	mov	r3, r0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	40022000 	.word	0x40022000
 80057c4:	40021000 	.word	0x40021000
 80057c8:	04c4b400 	.word	0x04c4b400
 80057cc:	0800b240 	.word	0x0800b240
 80057d0:	20000004 	.word	0x20000004
 80057d4:	20000008 	.word	0x20000008

080057d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057de:	4b2c      	ldr	r3, [pc, #176]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 030c 	and.w	r3, r3, #12
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d102      	bne.n	80057f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005894 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	e047      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057f0:	4b27      	ldr	r3, [pc, #156]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d102      	bne.n	8005802 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057fc:	4b26      	ldr	r3, [pc, #152]	@ (8005898 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	e03e      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005802:	4b23      	ldr	r3, [pc, #140]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b0c      	cmp	r3, #12
 800580c:	d136      	bne.n	800587c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800580e:	4b20      	ldr	r3, [pc, #128]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005818:	4b1d      	ldr	r3, [pc, #116]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	3301      	adds	r3, #1
 8005824:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b03      	cmp	r3, #3
 800582a:	d10c      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800582c:	4a1a      	ldr	r2, [pc, #104]	@ (8005898 <HAL_RCC_GetSysClockFreq+0xc0>)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	fbb2 f3f3 	udiv	r3, r2, r3
 8005834:	4a16      	ldr	r2, [pc, #88]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005836:	68d2      	ldr	r2, [r2, #12]
 8005838:	0a12      	lsrs	r2, r2, #8
 800583a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	617b      	str	r3, [r7, #20]
      break;
 8005844:	e00c      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005846:	4a13      	ldr	r2, [pc, #76]	@ (8005894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	fbb2 f3f3 	udiv	r3, r2, r3
 800584e:	4a10      	ldr	r2, [pc, #64]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005850:	68d2      	ldr	r2, [r2, #12]
 8005852:	0a12      	lsrs	r2, r2, #8
 8005854:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]
      break;
 800585e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005860:	4b0b      	ldr	r3, [pc, #44]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	0e5b      	lsrs	r3, r3, #25
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	3301      	adds	r3, #1
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	e001      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005880:	693b      	ldr	r3, [r7, #16]
}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000
 8005894:	00f42400 	.word	0x00f42400
 8005898:	007a1200 	.word	0x007a1200

0800589c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a0:	4b03      	ldr	r3, [pc, #12]	@ (80058b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058a2:	681b      	ldr	r3, [r3, #0]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000004 	.word	0x20000004

080058b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058b8:	f7ff fff0 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80058bc:	4602      	mov	r2, r0
 80058be:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	0a1b      	lsrs	r3, r3, #8
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	4904      	ldr	r1, [pc, #16]	@ (80058dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ca:	5ccb      	ldrb	r3, [r1, r3]
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40021000 	.word	0x40021000
 80058dc:	0800b250 	.word	0x0800b250

080058e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058e4:	f7ff ffda 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80058e8:	4602      	mov	r2, r0
 80058ea:	4b06      	ldr	r3, [pc, #24]	@ (8005904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	0adb      	lsrs	r3, r3, #11
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	4904      	ldr	r1, [pc, #16]	@ (8005908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058f6:	5ccb      	ldrb	r3, [r1, r3]
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005900:	4618      	mov	r0, r3
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40021000 	.word	0x40021000
 8005908:	0800b250 	.word	0x0800b250

0800590c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005912:	4b1e      	ldr	r3, [pc, #120]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800591c:	4b1b      	ldr	r3, [pc, #108]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	091b      	lsrs	r3, r3, #4
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d10c      	bne.n	800594a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005930:	4a17      	ldr	r2, [pc, #92]	@ (8005990 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	4a14      	ldr	r2, [pc, #80]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800593a:	68d2      	ldr	r2, [r2, #12]
 800593c:	0a12      	lsrs	r2, r2, #8
 800593e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	617b      	str	r3, [r7, #20]
    break;
 8005948:	e00c      	b.n	8005964 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800594a:	4a12      	ldr	r2, [pc, #72]	@ (8005994 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	4a0e      	ldr	r2, [pc, #56]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005954:	68d2      	ldr	r2, [r2, #12]
 8005956:	0a12      	lsrs	r2, r2, #8
 8005958:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800595c:	fb02 f303 	mul.w	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]
    break;
 8005962:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005964:	4b09      	ldr	r3, [pc, #36]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	0e5b      	lsrs	r3, r3, #25
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	3301      	adds	r3, #1
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800597e:	687b      	ldr	r3, [r7, #4]
}
 8005980:	4618      	mov	r0, r3
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	40021000 	.word	0x40021000
 8005990:	007a1200 	.word	0x007a1200
 8005994:	00f42400 	.word	0x00f42400

08005998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059a0:	2300      	movs	r3, #0
 80059a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059a4:	2300      	movs	r3, #0
 80059a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8098 	beq.w	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b6:	2300      	movs	r3, #0
 80059b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ba:	4b43      	ldr	r3, [pc, #268]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	4b40      	ldr	r3, [pc, #256]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ca:	4a3f      	ldr	r2, [pc, #252]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80059d2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059de:	2301      	movs	r3, #1
 80059e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059e2:	4b3a      	ldr	r3, [pc, #232]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a39      	ldr	r2, [pc, #228]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059ee:	f7fc fb63 	bl	80020b8 <HAL_GetTick>
 80059f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059f4:	e009      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f6:	f7fc fb5f 	bl	80020b8 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d902      	bls.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	74fb      	strb	r3, [r7, #19]
        break;
 8005a08:	e005      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a0a:	4b30      	ldr	r3, [pc, #192]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ef      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d159      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01e      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d019      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a38:	4b23      	ldr	r3, [pc, #140]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a44:	4b20      	ldr	r3, [pc, #128]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a54:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a64:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d016      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7fc fb1f 	bl	80020b8 <HAL_GetTick>
 8005a7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a7c:	e00b      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7e:	f7fc fb1b 	bl	80020b8 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d902      	bls.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	74fb      	strb	r3, [r7, #19]
            break;
 8005a94:	e006      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ec      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005aa4:	7cfb      	ldrb	r3, [r7, #19]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab8:	4903      	ldr	r1, [pc, #12]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ac2:	7cfb      	ldrb	r3, [r7, #19]
 8005ac4:	74bb      	strb	r3, [r7, #18]
 8005ac6:	e005      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad4:	7c7b      	ldrb	r3, [r7, #17]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ada:	4ba7      	ldr	r3, [pc, #668]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ade:	4aa6      	ldr	r2, [pc, #664]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ae4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005af2:	4ba1      	ldr	r3, [pc, #644]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af8:	f023 0203 	bic.w	r2, r3, #3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	499d      	ldr	r1, [pc, #628]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b14:	4b98      	ldr	r3, [pc, #608]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1a:	f023 020c 	bic.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4995      	ldr	r1, [pc, #596]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b36:	4b90      	ldr	r3, [pc, #576]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	498c      	ldr	r1, [pc, #560]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b58:	4b87      	ldr	r3, [pc, #540]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	4984      	ldr	r1, [pc, #528]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	497b      	ldr	r1, [pc, #492]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b9c:	4b76      	ldr	r3, [pc, #472]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	4973      	ldr	r1, [pc, #460]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	496a      	ldr	r1, [pc, #424]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005be0:	4b65      	ldr	r3, [pc, #404]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	4962      	ldr	r1, [pc, #392]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c02:	4b5d      	ldr	r3, [pc, #372]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	4959      	ldr	r1, [pc, #356]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c24:	4b54      	ldr	r3, [pc, #336]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c2a:	f023 0203 	bic.w	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	4951      	ldr	r1, [pc, #324]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c46:	4b4c      	ldr	r3, [pc, #304]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c54:	4948      	ldr	r1, [pc, #288]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d015      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c68:	4b43      	ldr	r3, [pc, #268]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c76:	4940      	ldr	r1, [pc, #256]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c86:	d105      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c88:	4b3b      	ldr	r3, [pc, #236]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c92:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d015      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ca0:	4b35      	ldr	r3, [pc, #212]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cae:	4932      	ldr	r1, [pc, #200]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cbe:	d105      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d015      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cd8:	4b27      	ldr	r3, [pc, #156]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce6:	4924      	ldr	r1, [pc, #144]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cf6:	d105      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d015      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d10:	4b19      	ldr	r3, [pc, #100]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1e:	4916      	ldr	r1, [pc, #88]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d2e:	d105      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d30:	4b11      	ldr	r3, [pc, #68]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	4a10      	ldr	r2, [pc, #64]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d019      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d48:	4b0b      	ldr	r3, [pc, #44]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	4908      	ldr	r1, [pc, #32]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d66:	d109      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d68:	4b03      	ldr	r3, [pc, #12]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4a02      	ldr	r2, [pc, #8]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d72:	60d3      	str	r3, [r2, #12]
 8005d74:	e002      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005d76:	bf00      	nop
 8005d78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d015      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d88:	4b29      	ldr	r3, [pc, #164]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	4926      	ldr	r1, [pc, #152]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005da6:	d105      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005da8:	4b21      	ldr	r3, [pc, #132]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4a20      	ldr	r2, [pc, #128]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005db2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d015      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dce:	4918      	ldr	r1, [pc, #96]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dde:	d105      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005de0:	4b13      	ldr	r3, [pc, #76]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4a12      	ldr	r2, [pc, #72]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005df8:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e06:	490a      	ldr	r1, [pc, #40]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e16:	d105      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e18:	4b05      	ldr	r3, [pc, #20]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4a04      	ldr	r2, [pc, #16]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e24:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40021000 	.word	0x40021000

08005e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e049      	b.n	8005eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb ff1c 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f000 f9bc 	bl	80061f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d001      	beq.n	8005efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e04c      	b.n	8005f96 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a26      	ldr	r2, [pc, #152]	@ (8005fa4 <HAL_TIM_Base_Start+0xc0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d022      	beq.n	8005f54 <HAL_TIM_Base_Start+0x70>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f16:	d01d      	beq.n	8005f54 <HAL_TIM_Base_Start+0x70>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a22      	ldr	r2, [pc, #136]	@ (8005fa8 <HAL_TIM_Base_Start+0xc4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d018      	beq.n	8005f54 <HAL_TIM_Base_Start+0x70>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a21      	ldr	r2, [pc, #132]	@ (8005fac <HAL_TIM_Base_Start+0xc8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <HAL_TIM_Base_Start+0x70>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb0 <HAL_TIM_Base_Start+0xcc>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00e      	beq.n	8005f54 <HAL_TIM_Base_Start+0x70>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fb4 <HAL_TIM_Base_Start+0xd0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d009      	beq.n	8005f54 <HAL_TIM_Base_Start+0x70>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb8 <HAL_TIM_Base_Start+0xd4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_TIM_Base_Start+0x70>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005fbc <HAL_TIM_Base_Start+0xd8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d115      	bne.n	8005f80 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <HAL_TIM_Base_Start+0xdc>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b06      	cmp	r3, #6
 8005f64:	d015      	beq.n	8005f92 <HAL_TIM_Base_Start+0xae>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f6c:	d011      	beq.n	8005f92 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7e:	e008      	b.n	8005f92 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e000      	b.n	8005f94 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40012c00 	.word	0x40012c00
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40013400 	.word	0x40013400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40015000 	.word	0x40015000
 8005fc0:	00010007 	.word	0x00010007

08005fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_TIM_ConfigClockSource+0x1c>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e0f6      	b.n	80061ce <HAL_TIM_ConfigClockSource+0x20a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005ffe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800600a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a6f      	ldr	r2, [pc, #444]	@ (80061d8 <HAL_TIM_ConfigClockSource+0x214>)
 800601a:	4293      	cmp	r3, r2
 800601c:	f000 80c1 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006020:	4a6d      	ldr	r2, [pc, #436]	@ (80061d8 <HAL_TIM_ConfigClockSource+0x214>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f200 80c6 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006028:	4a6c      	ldr	r2, [pc, #432]	@ (80061dc <HAL_TIM_ConfigClockSource+0x218>)
 800602a:	4293      	cmp	r3, r2
 800602c:	f000 80b9 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006030:	4a6a      	ldr	r2, [pc, #424]	@ (80061dc <HAL_TIM_ConfigClockSource+0x218>)
 8006032:	4293      	cmp	r3, r2
 8006034:	f200 80be 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006038:	4a69      	ldr	r2, [pc, #420]	@ (80061e0 <HAL_TIM_ConfigClockSource+0x21c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	f000 80b1 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006040:	4a67      	ldr	r2, [pc, #412]	@ (80061e0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	f200 80b6 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006048:	4a66      	ldr	r2, [pc, #408]	@ (80061e4 <HAL_TIM_ConfigClockSource+0x220>)
 800604a:	4293      	cmp	r3, r2
 800604c:	f000 80a9 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006050:	4a64      	ldr	r2, [pc, #400]	@ (80061e4 <HAL_TIM_ConfigClockSource+0x220>)
 8006052:	4293      	cmp	r3, r2
 8006054:	f200 80ae 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006058:	4a63      	ldr	r2, [pc, #396]	@ (80061e8 <HAL_TIM_ConfigClockSource+0x224>)
 800605a:	4293      	cmp	r3, r2
 800605c:	f000 80a1 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006060:	4a61      	ldr	r2, [pc, #388]	@ (80061e8 <HAL_TIM_ConfigClockSource+0x224>)
 8006062:	4293      	cmp	r3, r2
 8006064:	f200 80a6 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006068:	4a60      	ldr	r2, [pc, #384]	@ (80061ec <HAL_TIM_ConfigClockSource+0x228>)
 800606a:	4293      	cmp	r3, r2
 800606c:	f000 8099 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006070:	4a5e      	ldr	r2, [pc, #376]	@ (80061ec <HAL_TIM_ConfigClockSource+0x228>)
 8006072:	4293      	cmp	r3, r2
 8006074:	f200 809e 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006078:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800607c:	f000 8091 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006080:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006084:	f200 8096 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006088:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800608c:	f000 8089 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006090:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006094:	f200 808e 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800609c:	d03e      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x158>
 800609e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a2:	f200 8087 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80060a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060aa:	f000 8086 	beq.w	80061ba <HAL_TIM_ConfigClockSource+0x1f6>
 80060ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060b2:	d87f      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80060b4:	2b70      	cmp	r3, #112	@ 0x70
 80060b6:	d01a      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x12a>
 80060b8:	2b70      	cmp	r3, #112	@ 0x70
 80060ba:	d87b      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80060bc:	2b60      	cmp	r3, #96	@ 0x60
 80060be:	d050      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x19e>
 80060c0:	2b60      	cmp	r3, #96	@ 0x60
 80060c2:	d877      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80060c4:	2b50      	cmp	r3, #80	@ 0x50
 80060c6:	d03c      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x17e>
 80060c8:	2b50      	cmp	r3, #80	@ 0x50
 80060ca:	d873      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80060cc:	2b40      	cmp	r3, #64	@ 0x40
 80060ce:	d058      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x1be>
 80060d0:	2b40      	cmp	r3, #64	@ 0x40
 80060d2:	d86f      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80060d4:	2b30      	cmp	r3, #48	@ 0x30
 80060d6:	d064      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 80060d8:	2b30      	cmp	r3, #48	@ 0x30
 80060da:	d86b      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d060      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d867      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05c      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d05a      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x1de>
 80060ec:	e062      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060fe:	f000 f9a7 	bl	8006450 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	609a      	str	r2, [r3, #8]
      break;
 800611a:	e04f      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800612c:	f000 f990 	bl	8006450 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800613e:	609a      	str	r2, [r3, #8]
      break;
 8006140:	e03c      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614e:	461a      	mov	r2, r3
 8006150:	f000 f902 	bl	8006358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2150      	movs	r1, #80	@ 0x50
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f95b 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8006160:	e02c      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800616e:	461a      	mov	r2, r3
 8006170:	f000 f921 	bl	80063b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2160      	movs	r1, #96	@ 0x60
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f94b 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8006180:	e01c      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	461a      	mov	r2, r3
 8006190:	f000 f8e2 	bl	8006358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2140      	movs	r1, #64	@ 0x40
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f93b 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 80061a0:	e00c      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f000 f932 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 80061b2:	e003      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
      break;
 80061b8:	e000      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80061ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	00100070 	.word	0x00100070
 80061dc:	00100060 	.word	0x00100060
 80061e0:	00100050 	.word	0x00100050
 80061e4:	00100040 	.word	0x00100040
 80061e8:	00100030 	.word	0x00100030
 80061ec:	00100020 	.word	0x00100020

080061f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a4c      	ldr	r2, [pc, #304]	@ (8006334 <TIM_Base_SetConfig+0x144>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d017      	beq.n	8006238 <TIM_Base_SetConfig+0x48>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620e:	d013      	beq.n	8006238 <TIM_Base_SetConfig+0x48>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a49      	ldr	r2, [pc, #292]	@ (8006338 <TIM_Base_SetConfig+0x148>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00f      	beq.n	8006238 <TIM_Base_SetConfig+0x48>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a48      	ldr	r2, [pc, #288]	@ (800633c <TIM_Base_SetConfig+0x14c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00b      	beq.n	8006238 <TIM_Base_SetConfig+0x48>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a47      	ldr	r2, [pc, #284]	@ (8006340 <TIM_Base_SetConfig+0x150>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d007      	beq.n	8006238 <TIM_Base_SetConfig+0x48>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a46      	ldr	r2, [pc, #280]	@ (8006344 <TIM_Base_SetConfig+0x154>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_Base_SetConfig+0x48>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a45      	ldr	r2, [pc, #276]	@ (8006348 <TIM_Base_SetConfig+0x158>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d108      	bne.n	800624a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800623e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a39      	ldr	r2, [pc, #228]	@ (8006334 <TIM_Base_SetConfig+0x144>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d023      	beq.n	800629a <TIM_Base_SetConfig+0xaa>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006258:	d01f      	beq.n	800629a <TIM_Base_SetConfig+0xaa>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a36      	ldr	r2, [pc, #216]	@ (8006338 <TIM_Base_SetConfig+0x148>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01b      	beq.n	800629a <TIM_Base_SetConfig+0xaa>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a35      	ldr	r2, [pc, #212]	@ (800633c <TIM_Base_SetConfig+0x14c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d017      	beq.n	800629a <TIM_Base_SetConfig+0xaa>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a34      	ldr	r2, [pc, #208]	@ (8006340 <TIM_Base_SetConfig+0x150>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <TIM_Base_SetConfig+0xaa>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a33      	ldr	r2, [pc, #204]	@ (8006344 <TIM_Base_SetConfig+0x154>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00f      	beq.n	800629a <TIM_Base_SetConfig+0xaa>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a33      	ldr	r2, [pc, #204]	@ (800634c <TIM_Base_SetConfig+0x15c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00b      	beq.n	800629a <TIM_Base_SetConfig+0xaa>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a32      	ldr	r2, [pc, #200]	@ (8006350 <TIM_Base_SetConfig+0x160>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d007      	beq.n	800629a <TIM_Base_SetConfig+0xaa>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a31      	ldr	r2, [pc, #196]	@ (8006354 <TIM_Base_SetConfig+0x164>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_Base_SetConfig+0xaa>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2c      	ldr	r2, [pc, #176]	@ (8006348 <TIM_Base_SetConfig+0x158>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d108      	bne.n	80062ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a18      	ldr	r2, [pc, #96]	@ (8006334 <TIM_Base_SetConfig+0x144>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d013      	beq.n	8006300 <TIM_Base_SetConfig+0x110>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1a      	ldr	r2, [pc, #104]	@ (8006344 <TIM_Base_SetConfig+0x154>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00f      	beq.n	8006300 <TIM_Base_SetConfig+0x110>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1a      	ldr	r2, [pc, #104]	@ (800634c <TIM_Base_SetConfig+0x15c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00b      	beq.n	8006300 <TIM_Base_SetConfig+0x110>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a19      	ldr	r2, [pc, #100]	@ (8006350 <TIM_Base_SetConfig+0x160>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d007      	beq.n	8006300 <TIM_Base_SetConfig+0x110>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a18      	ldr	r2, [pc, #96]	@ (8006354 <TIM_Base_SetConfig+0x164>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_Base_SetConfig+0x110>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a13      	ldr	r2, [pc, #76]	@ (8006348 <TIM_Base_SetConfig+0x158>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d103      	bne.n	8006308 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b01      	cmp	r3, #1
 8006318:	d105      	bne.n	8006326 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	611a      	str	r2, [r3, #16]
  }
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40012c00 	.word	0x40012c00
 8006338:	40000400 	.word	0x40000400
 800633c:	40000800 	.word	0x40000800
 8006340:	40000c00 	.word	0x40000c00
 8006344:	40013400 	.word	0x40013400
 8006348:	40015000 	.word	0x40015000
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800

08006358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f023 0201 	bic.w	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f023 030a 	bic.w	r3, r3, #10
 8006394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b087      	sub	sp, #28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f023 0210 	bic.w	r2, r3, #16
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800642c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	f043 0307 	orr.w	r3, r3, #7
 800643c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	609a      	str	r2, [r3, #8]
}
 8006444:	bf00      	nop
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800646a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	021a      	lsls	r2, r3, #8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	431a      	orrs	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4313      	orrs	r3, r2
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	bf00      	nop
 8006486:	371c      	adds	r7, #28
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e074      	b.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a34      	ldr	r2, [pc, #208]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a33      	ldr	r2, [pc, #204]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d004      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a31      	ldr	r2, [pc, #196]	@ (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d108      	bne.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80064fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a21      	ldr	r2, [pc, #132]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d022      	beq.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006528:	d01d      	beq.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1f      	ldr	r2, [pc, #124]	@ (80065ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d018      	beq.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1d      	ldr	r2, [pc, #116]	@ (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1c      	ldr	r2, [pc, #112]	@ (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00e      	beq.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a15      	ldr	r2, [pc, #84]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a18      	ldr	r2, [pc, #96]	@ (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a11      	ldr	r2, [pc, #68]	@ (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d10c      	bne.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800656c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	4313      	orrs	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40013400 	.word	0x40013400
 80065a8:	40015000 	.word	0x40015000
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40000c00 	.word	0x40000c00
 80065b8:	40014000 	.word	0x40014000

080065bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e042      	b.n	8006654 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fb fb77 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2224      	movs	r2, #36	@ 0x24
 80065ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0201 	bic.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fbb2 	bl	8006d70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f8b3 	bl	8006778 <UART_SetConfig>
 8006612:	4603      	mov	r3, r0
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e01b      	b.n	8006654 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800662a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800663a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0201 	orr.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fc31 	bl	8006eb4 <UART_CheckIdleState>
 8006652:	4603      	mov	r3, r0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	@ 0x28
 8006660:	af02      	add	r7, sp, #8
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	4613      	mov	r3, r2
 800666a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006672:	2b20      	cmp	r3, #32
 8006674:	d17b      	bne.n	800676e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <HAL_UART_Transmit+0x26>
 800667c:	88fb      	ldrh	r3, [r7, #6]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e074      	b.n	8006770 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2221      	movs	r2, #33	@ 0x21
 8006692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006696:	f7fb fd0f 	bl	80020b8 <HAL_GetTick>
 800669a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	88fa      	ldrh	r2, [r7, #6]
 80066a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b4:	d108      	bne.n	80066c8 <HAL_UART_Transmit+0x6c>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e003      	b.n	80066d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066cc:	2300      	movs	r3, #0
 80066ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066d0:	e030      	b.n	8006734 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2200      	movs	r2, #0
 80066da:	2180      	movs	r1, #128	@ 0x80
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fc93 	bl	8007008 <UART_WaitOnFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e03d      	b.n	8006770 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006708:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3302      	adds	r3, #2
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e007      	b.n	8006722 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	3301      	adds	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1c8      	bne.n	80066d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2200      	movs	r2, #0
 8006748:	2140      	movs	r1, #64	@ 0x40
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fc5c 	bl	8007008 <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e006      	b.n	8006770 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	e000      	b.n	8006770 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800676e:	2302      	movs	r3, #2
  }
}
 8006770:	4618      	mov	r0, r3
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800677c:	b08c      	sub	sp, #48	@ 0x30
 800677e:	af00      	add	r7, sp, #0
 8006780:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	431a      	orrs	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	431a      	orrs	r2, r3
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	4313      	orrs	r3, r2
 800679e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4baa      	ldr	r3, [pc, #680]	@ (8006a50 <UART_SetConfig+0x2d8>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a9f      	ldr	r2, [pc, #636]	@ (8006a54 <UART_SetConfig+0x2dc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067e0:	4313      	orrs	r3, r2
 80067e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80067ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006802:	f023 010f 	bic.w	r1, r3, #15
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a90      	ldr	r2, [pc, #576]	@ (8006a58 <UART_SetConfig+0x2e0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d125      	bne.n	8006868 <UART_SetConfig+0xf0>
 800681c:	4b8f      	ldr	r3, [pc, #572]	@ (8006a5c <UART_SetConfig+0x2e4>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	2b03      	cmp	r3, #3
 8006828:	d81a      	bhi.n	8006860 <UART_SetConfig+0xe8>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <UART_SetConfig+0xb8>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006841 	.word	0x08006841
 8006834:	08006851 	.word	0x08006851
 8006838:	08006849 	.word	0x08006849
 800683c:	08006859 	.word	0x08006859
 8006840:	2301      	movs	r3, #1
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006846:	e116      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006848:	2302      	movs	r3, #2
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684e:	e112      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006850:	2304      	movs	r3, #4
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006856:	e10e      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006858:	2308      	movs	r3, #8
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800685e:	e10a      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006860:	2310      	movs	r3, #16
 8006862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006866:	e106      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a7c      	ldr	r2, [pc, #496]	@ (8006a60 <UART_SetConfig+0x2e8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d138      	bne.n	80068e4 <UART_SetConfig+0x16c>
 8006872:	4b7a      	ldr	r3, [pc, #488]	@ (8006a5c <UART_SetConfig+0x2e4>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b0c      	cmp	r3, #12
 800687e:	d82d      	bhi.n	80068dc <UART_SetConfig+0x164>
 8006880:	a201      	add	r2, pc, #4	@ (adr r2, 8006888 <UART_SetConfig+0x110>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068bd 	.word	0x080068bd
 800688c:	080068dd 	.word	0x080068dd
 8006890:	080068dd 	.word	0x080068dd
 8006894:	080068dd 	.word	0x080068dd
 8006898:	080068cd 	.word	0x080068cd
 800689c:	080068dd 	.word	0x080068dd
 80068a0:	080068dd 	.word	0x080068dd
 80068a4:	080068dd 	.word	0x080068dd
 80068a8:	080068c5 	.word	0x080068c5
 80068ac:	080068dd 	.word	0x080068dd
 80068b0:	080068dd 	.word	0x080068dd
 80068b4:	080068dd 	.word	0x080068dd
 80068b8:	080068d5 	.word	0x080068d5
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c2:	e0d8      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80068c4:	2302      	movs	r3, #2
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ca:	e0d4      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80068cc:	2304      	movs	r3, #4
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d2:	e0d0      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80068d4:	2308      	movs	r3, #8
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068da:	e0cc      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80068dc:	2310      	movs	r3, #16
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e2:	e0c8      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a5e      	ldr	r2, [pc, #376]	@ (8006a64 <UART_SetConfig+0x2ec>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d125      	bne.n	800693a <UART_SetConfig+0x1c2>
 80068ee:	4b5b      	ldr	r3, [pc, #364]	@ (8006a5c <UART_SetConfig+0x2e4>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068f8:	2b30      	cmp	r3, #48	@ 0x30
 80068fa:	d016      	beq.n	800692a <UART_SetConfig+0x1b2>
 80068fc:	2b30      	cmp	r3, #48	@ 0x30
 80068fe:	d818      	bhi.n	8006932 <UART_SetConfig+0x1ba>
 8006900:	2b20      	cmp	r3, #32
 8006902:	d00a      	beq.n	800691a <UART_SetConfig+0x1a2>
 8006904:	2b20      	cmp	r3, #32
 8006906:	d814      	bhi.n	8006932 <UART_SetConfig+0x1ba>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <UART_SetConfig+0x19a>
 800690c:	2b10      	cmp	r3, #16
 800690e:	d008      	beq.n	8006922 <UART_SetConfig+0x1aa>
 8006910:	e00f      	b.n	8006932 <UART_SetConfig+0x1ba>
 8006912:	2300      	movs	r3, #0
 8006914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006918:	e0ad      	b.n	8006a76 <UART_SetConfig+0x2fe>
 800691a:	2302      	movs	r3, #2
 800691c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006920:	e0a9      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006922:	2304      	movs	r3, #4
 8006924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006928:	e0a5      	b.n	8006a76 <UART_SetConfig+0x2fe>
 800692a:	2308      	movs	r3, #8
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006930:	e0a1      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006932:	2310      	movs	r3, #16
 8006934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006938:	e09d      	b.n	8006a76 <UART_SetConfig+0x2fe>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a4a      	ldr	r2, [pc, #296]	@ (8006a68 <UART_SetConfig+0x2f0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d125      	bne.n	8006990 <UART_SetConfig+0x218>
 8006944:	4b45      	ldr	r3, [pc, #276]	@ (8006a5c <UART_SetConfig+0x2e4>)
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800694e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006950:	d016      	beq.n	8006980 <UART_SetConfig+0x208>
 8006952:	2bc0      	cmp	r3, #192	@ 0xc0
 8006954:	d818      	bhi.n	8006988 <UART_SetConfig+0x210>
 8006956:	2b80      	cmp	r3, #128	@ 0x80
 8006958:	d00a      	beq.n	8006970 <UART_SetConfig+0x1f8>
 800695a:	2b80      	cmp	r3, #128	@ 0x80
 800695c:	d814      	bhi.n	8006988 <UART_SetConfig+0x210>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <UART_SetConfig+0x1f0>
 8006962:	2b40      	cmp	r3, #64	@ 0x40
 8006964:	d008      	beq.n	8006978 <UART_SetConfig+0x200>
 8006966:	e00f      	b.n	8006988 <UART_SetConfig+0x210>
 8006968:	2300      	movs	r3, #0
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800696e:	e082      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006970:	2302      	movs	r3, #2
 8006972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006976:	e07e      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006978:	2304      	movs	r3, #4
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697e:	e07a      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006980:	2308      	movs	r3, #8
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006986:	e076      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006988:	2310      	movs	r3, #16
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800698e:	e072      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a35      	ldr	r2, [pc, #212]	@ (8006a6c <UART_SetConfig+0x2f4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d12a      	bne.n	80069f0 <UART_SetConfig+0x278>
 800699a:	4b30      	ldr	r3, [pc, #192]	@ (8006a5c <UART_SetConfig+0x2e4>)
 800699c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069a8:	d01a      	beq.n	80069e0 <UART_SetConfig+0x268>
 80069aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ae:	d81b      	bhi.n	80069e8 <UART_SetConfig+0x270>
 80069b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b4:	d00c      	beq.n	80069d0 <UART_SetConfig+0x258>
 80069b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ba:	d815      	bhi.n	80069e8 <UART_SetConfig+0x270>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <UART_SetConfig+0x250>
 80069c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c4:	d008      	beq.n	80069d8 <UART_SetConfig+0x260>
 80069c6:	e00f      	b.n	80069e8 <UART_SetConfig+0x270>
 80069c8:	2300      	movs	r3, #0
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ce:	e052      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80069d0:	2302      	movs	r3, #2
 80069d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d6:	e04e      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80069d8:	2304      	movs	r3, #4
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069de:	e04a      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80069e0:	2308      	movs	r3, #8
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e6:	e046      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80069e8:	2310      	movs	r3, #16
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	e042      	b.n	8006a76 <UART_SetConfig+0x2fe>
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a17      	ldr	r2, [pc, #92]	@ (8006a54 <UART_SetConfig+0x2dc>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d13a      	bne.n	8006a70 <UART_SetConfig+0x2f8>
 80069fa:	4b18      	ldr	r3, [pc, #96]	@ (8006a5c <UART_SetConfig+0x2e4>)
 80069fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a08:	d01a      	beq.n	8006a40 <UART_SetConfig+0x2c8>
 8006a0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a0e:	d81b      	bhi.n	8006a48 <UART_SetConfig+0x2d0>
 8006a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a14:	d00c      	beq.n	8006a30 <UART_SetConfig+0x2b8>
 8006a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a1a:	d815      	bhi.n	8006a48 <UART_SetConfig+0x2d0>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <UART_SetConfig+0x2b0>
 8006a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a24:	d008      	beq.n	8006a38 <UART_SetConfig+0x2c0>
 8006a26:	e00f      	b.n	8006a48 <UART_SetConfig+0x2d0>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	e022      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006a30:	2302      	movs	r3, #2
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	e01e      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e01a      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006a40:	2308      	movs	r3, #8
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e016      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e012      	b.n	8006a76 <UART_SetConfig+0x2fe>
 8006a50:	cfff69f3 	.word	0xcfff69f3
 8006a54:	40008000 	.word	0x40008000
 8006a58:	40013800 	.word	0x40013800
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40004400 	.word	0x40004400
 8006a64:	40004800 	.word	0x40004800
 8006a68:	40004c00 	.word	0x40004c00
 8006a6c:	40005000 	.word	0x40005000
 8006a70:	2310      	movs	r3, #16
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4aae      	ldr	r2, [pc, #696]	@ (8006d34 <UART_SetConfig+0x5bc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	f040 8097 	bne.w	8006bb0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d823      	bhi.n	8006ad2 <UART_SetConfig+0x35a>
 8006a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <UART_SetConfig+0x318>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006ad3 	.word	0x08006ad3
 8006a98:	08006abd 	.word	0x08006abd
 8006a9c:	08006ad3 	.word	0x08006ad3
 8006aa0:	08006ac3 	.word	0x08006ac3
 8006aa4:	08006ad3 	.word	0x08006ad3
 8006aa8:	08006ad3 	.word	0x08006ad3
 8006aac:	08006ad3 	.word	0x08006ad3
 8006ab0:	08006acb 	.word	0x08006acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab4:	f7fe fefe 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 8006ab8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aba:	e010      	b.n	8006ade <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006abc:	4b9e      	ldr	r3, [pc, #632]	@ (8006d38 <UART_SetConfig+0x5c0>)
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ac0:	e00d      	b.n	8006ade <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac2:	f7fe fe89 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 8006ac6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ac8:	e009      	b.n	8006ade <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ad0:	e005      	b.n	8006ade <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8130 	beq.w	8006d46 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aea:	4a94      	ldr	r2, [pc, #592]	@ (8006d3c <UART_SetConfig+0x5c4>)
 8006aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	4613      	mov	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	4413      	add	r3, r2
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d305      	bcc.n	8006b16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d903      	bls.n	8006b1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b1c:	e113      	b.n	8006d46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	2200      	movs	r2, #0
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	60fa      	str	r2, [r7, #12]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	4a84      	ldr	r2, [pc, #528]	@ (8006d3c <UART_SetConfig+0x5c4>)
 8006b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2200      	movs	r2, #0
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b40:	f7fa f87a 	bl	8000c38 <__aeabi_uldivmod>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	020b      	lsls	r3, r1, #8
 8006b56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b5a:	0202      	lsls	r2, r0, #8
 8006b5c:	6979      	ldr	r1, [r7, #20]
 8006b5e:	6849      	ldr	r1, [r1, #4]
 8006b60:	0849      	lsrs	r1, r1, #1
 8006b62:	2000      	movs	r0, #0
 8006b64:	460c      	mov	r4, r1
 8006b66:	4605      	mov	r5, r0
 8006b68:	eb12 0804 	adds.w	r8, r2, r4
 8006b6c:	eb43 0905 	adc.w	r9, r3, r5
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	469a      	mov	sl, r3
 8006b78:	4693      	mov	fp, r2
 8006b7a:	4652      	mov	r2, sl
 8006b7c:	465b      	mov	r3, fp
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7fa f859 	bl	8000c38 <__aeabi_uldivmod>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b94:	d308      	bcc.n	8006ba8 <UART_SetConfig+0x430>
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b9c:	d204      	bcs.n	8006ba8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	e0ce      	b.n	8006d46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bae:	e0ca      	b.n	8006d46 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb8:	d166      	bne.n	8006c88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006bba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d827      	bhi.n	8006c12 <UART_SetConfig+0x49a>
 8006bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc8 <UART_SetConfig+0x450>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006bed 	.word	0x08006bed
 8006bcc:	08006bf5 	.word	0x08006bf5
 8006bd0:	08006bfd 	.word	0x08006bfd
 8006bd4:	08006c13 	.word	0x08006c13
 8006bd8:	08006c03 	.word	0x08006c03
 8006bdc:	08006c13 	.word	0x08006c13
 8006be0:	08006c13 	.word	0x08006c13
 8006be4:	08006c13 	.word	0x08006c13
 8006be8:	08006c0b 	.word	0x08006c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bec:	f7fe fe62 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 8006bf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bf2:	e014      	b.n	8006c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf4:	f7fe fe74 	bl	80058e0 <HAL_RCC_GetPCLK2Freq>
 8006bf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bfa:	e010      	b.n	8006c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8006d38 <UART_SetConfig+0x5c0>)
 8006bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c00:	e00d      	b.n	8006c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c02:	f7fe fde9 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 8006c06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c08:	e009      	b.n	8006c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c10:	e005      	b.n	8006c1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8090 	beq.w	8006d46 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2a:	4a44      	ldr	r2, [pc, #272]	@ (8006d3c <UART_SetConfig+0x5c4>)
 8006c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c38:	005a      	lsls	r2, r3, #1
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	441a      	add	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	2b0f      	cmp	r3, #15
 8006c50:	d916      	bls.n	8006c80 <UART_SetConfig+0x508>
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c58:	d212      	bcs.n	8006c80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f023 030f 	bic.w	r3, r3, #15
 8006c62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	8bfb      	ldrh	r3, [r7, #30]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	8bfa      	ldrh	r2, [r7, #30]
 8006c7c:	60da      	str	r2, [r3, #12]
 8006c7e:	e062      	b.n	8006d46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c86:	e05e      	b.n	8006d46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d828      	bhi.n	8006ce2 <UART_SetConfig+0x56a>
 8006c90:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <UART_SetConfig+0x520>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006cc5 	.word	0x08006cc5
 8006ca0:	08006ccd 	.word	0x08006ccd
 8006ca4:	08006ce3 	.word	0x08006ce3
 8006ca8:	08006cd3 	.word	0x08006cd3
 8006cac:	08006ce3 	.word	0x08006ce3
 8006cb0:	08006ce3 	.word	0x08006ce3
 8006cb4:	08006ce3 	.word	0x08006ce3
 8006cb8:	08006cdb 	.word	0x08006cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cbc:	f7fe fdfa 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 8006cc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cc2:	e014      	b.n	8006cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc4:	f7fe fe0c 	bl	80058e0 <HAL_RCC_GetPCLK2Freq>
 8006cc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cca:	e010      	b.n	8006cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <UART_SetConfig+0x5c0>)
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cd0:	e00d      	b.n	8006cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cd2:	f7fe fd81 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 8006cd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cd8:	e009      	b.n	8006cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ce0:	e005      	b.n	8006cee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cec:	bf00      	nop
    }

    if (pclk != 0U)
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d028      	beq.n	8006d46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf8:	4a10      	ldr	r2, [pc, #64]	@ (8006d3c <UART_SetConfig+0x5c4>)
 8006cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d02:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	085b      	lsrs	r3, r3, #1
 8006d0c:	441a      	add	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	2b0f      	cmp	r3, #15
 8006d1c:	d910      	bls.n	8006d40 <UART_SetConfig+0x5c8>
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d24:	d20c      	bcs.n	8006d40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60da      	str	r2, [r3, #12]
 8006d30:	e009      	b.n	8006d46 <UART_SetConfig+0x5ce>
 8006d32:	bf00      	nop
 8006d34:	40008000 	.word	0x40008000
 8006d38:	00f42400 	.word	0x00f42400
 8006d3c:	0800b258 	.word	0x0800b258
      }
      else
      {
        ret = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3730      	adds	r7, #48	@ 0x30
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01a      	beq.n	8006e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e6e:	d10a      	bne.n	8006e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	605a      	str	r2, [r3, #4]
  }
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b098      	sub	sp, #96	@ 0x60
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ec4:	f7fb f8f8 	bl	80020b8 <HAL_GetTick>
 8006ec8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d12f      	bne.n	8006f38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f88e 	bl	8007008 <UART_WaitOnFlagUntilTimeout>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d022      	beq.n	8006f38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f06:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e6      	bne.n	8006ef2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e063      	b.n	8007000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d149      	bne.n	8006fda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f857 	bl	8007008 <UART_WaitOnFlagUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d03c      	beq.n	8006fda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e6      	bne.n	8006f60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3308      	adds	r3, #8
 8006f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f023 0301 	bic.w	r3, r3, #1
 8006fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fb2:	61fa      	str	r2, [r7, #28]
 8006fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	69b9      	ldr	r1, [r7, #24]
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e5      	bne.n	8006f92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e012      	b.n	8007000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3758      	adds	r7, #88	@ 0x58
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	4613      	mov	r3, r2
 8007016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007018:	e04f      	b.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007020:	d04b      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007022:	f7fb f849 	bl	80020b8 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	429a      	cmp	r2, r3
 8007030:	d302      	bcc.n	8007038 <UART_WaitOnFlagUntilTimeout+0x30>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e04e      	b.n	80070da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	d037      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b80      	cmp	r3, #128	@ 0x80
 800704e:	d034      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b40      	cmp	r3, #64	@ 0x40
 8007054:	d031      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b08      	cmp	r3, #8
 8007062:	d110      	bne.n	8007086 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2208      	movs	r2, #8
 800706a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f838 	bl	80070e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2208      	movs	r2, #8
 8007076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e029      	b.n	80070da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007094:	d111      	bne.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800709e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f81e 	bl	80070e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e00f      	b.n	80070da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69da      	ldr	r2, [r3, #28]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4013      	ands	r3, r2
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	bf0c      	ite	eq
 80070ca:	2301      	moveq	r3, #1
 80070cc:	2300      	movne	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d0a0      	beq.n	800701a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b095      	sub	sp, #84	@ 0x54
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007108:	643b      	str	r3, [r7, #64]	@ 0x40
 800710a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800710e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e6      	bne.n	80070ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3308      	adds	r3, #8
 8007122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	61fb      	str	r3, [r7, #28]
   return(result);
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007132:	f023 0301 	bic.w	r3, r3, #1
 8007136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e3      	bne.n	800711c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d118      	bne.n	800718e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	60bb      	str	r3, [r7, #8]
   return(result);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f023 0310 	bic.w	r3, r3, #16
 8007170:	647b      	str	r3, [r7, #68]	@ 0x44
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6979      	ldr	r1, [r7, #20]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	613b      	str	r3, [r7, #16]
   return(result);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071a2:	bf00      	nop
 80071a4:	3754      	adds	r7, #84	@ 0x54
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e027      	b.n	8007214 <HAL_UARTEx_DisableFifoMode+0x66>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2224      	movs	r2, #36	@ 0x24
 80071d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0201 	bic.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e02d      	b.n	8007294 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2224      	movs	r2, #36	@ 0x24
 8007244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0201 	bic.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f84f 	bl	8007318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e02d      	b.n	8007310 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2224      	movs	r2, #36	@ 0x24
 80072c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0201 	bic.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f811 	bl	8007318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007324:	2b00      	cmp	r3, #0
 8007326:	d108      	bne.n	800733a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007338:	e031      	b.n	800739e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800733a:	2308      	movs	r3, #8
 800733c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800733e:	2308      	movs	r3, #8
 8007340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	0e5b      	lsrs	r3, r3, #25
 800734a:	b2db      	uxtb	r3, r3
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	0f5b      	lsrs	r3, r3, #29
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	7b3a      	ldrb	r2, [r7, #12]
 8007366:	4911      	ldr	r1, [pc, #68]	@ (80073ac <UARTEx_SetNbDataToProcess+0x94>)
 8007368:	5c8a      	ldrb	r2, [r1, r2]
 800736a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800736e:	7b3a      	ldrb	r2, [r7, #12]
 8007370:	490f      	ldr	r1, [pc, #60]	@ (80073b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007372:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007374:	fb93 f3f2 	sdiv	r3, r3, r2
 8007378:	b29a      	uxth	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	7b7a      	ldrb	r2, [r7, #13]
 8007384:	4909      	ldr	r1, [pc, #36]	@ (80073ac <UARTEx_SetNbDataToProcess+0x94>)
 8007386:	5c8a      	ldrb	r2, [r1, r2]
 8007388:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800738c:	7b7a      	ldrb	r2, [r7, #13]
 800738e:	4908      	ldr	r1, [pc, #32]	@ (80073b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007390:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007392:	fb93 f3f2 	sdiv	r3, r3, r2
 8007396:	b29a      	uxth	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	0800b270 	.word	0x0800b270
 80073b0:	0800b278 	.word	0x0800b278

080073b4 <__cvt>:
 80073b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	ec57 6b10 	vmov	r6, r7, d0
 80073bc:	2f00      	cmp	r7, #0
 80073be:	460c      	mov	r4, r1
 80073c0:	4619      	mov	r1, r3
 80073c2:	463b      	mov	r3, r7
 80073c4:	bfbb      	ittet	lt
 80073c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80073ca:	461f      	movlt	r7, r3
 80073cc:	2300      	movge	r3, #0
 80073ce:	232d      	movlt	r3, #45	@ 0x2d
 80073d0:	700b      	strb	r3, [r1, #0]
 80073d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80073d8:	4691      	mov	r9, r2
 80073da:	f023 0820 	bic.w	r8, r3, #32
 80073de:	bfbc      	itt	lt
 80073e0:	4632      	movlt	r2, r6
 80073e2:	4616      	movlt	r6, r2
 80073e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073e8:	d005      	beq.n	80073f6 <__cvt+0x42>
 80073ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80073ee:	d100      	bne.n	80073f2 <__cvt+0x3e>
 80073f0:	3401      	adds	r4, #1
 80073f2:	2102      	movs	r1, #2
 80073f4:	e000      	b.n	80073f8 <__cvt+0x44>
 80073f6:	2103      	movs	r1, #3
 80073f8:	ab03      	add	r3, sp, #12
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	ab02      	add	r3, sp, #8
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	ec47 6b10 	vmov	d0, r6, r7
 8007404:	4653      	mov	r3, sl
 8007406:	4622      	mov	r2, r4
 8007408:	f000 fe6e 	bl	80080e8 <_dtoa_r>
 800740c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007410:	4605      	mov	r5, r0
 8007412:	d119      	bne.n	8007448 <__cvt+0x94>
 8007414:	f019 0f01 	tst.w	r9, #1
 8007418:	d00e      	beq.n	8007438 <__cvt+0x84>
 800741a:	eb00 0904 	add.w	r9, r0, r4
 800741e:	2200      	movs	r2, #0
 8007420:	2300      	movs	r3, #0
 8007422:	4630      	mov	r0, r6
 8007424:	4639      	mov	r1, r7
 8007426:	f7f9 fb77 	bl	8000b18 <__aeabi_dcmpeq>
 800742a:	b108      	cbz	r0, 8007430 <__cvt+0x7c>
 800742c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007430:	2230      	movs	r2, #48	@ 0x30
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	454b      	cmp	r3, r9
 8007436:	d31e      	bcc.n	8007476 <__cvt+0xc2>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800743c:	1b5b      	subs	r3, r3, r5
 800743e:	4628      	mov	r0, r5
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	b004      	add	sp, #16
 8007444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007448:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800744c:	eb00 0904 	add.w	r9, r0, r4
 8007450:	d1e5      	bne.n	800741e <__cvt+0x6a>
 8007452:	7803      	ldrb	r3, [r0, #0]
 8007454:	2b30      	cmp	r3, #48	@ 0x30
 8007456:	d10a      	bne.n	800746e <__cvt+0xba>
 8007458:	2200      	movs	r2, #0
 800745a:	2300      	movs	r3, #0
 800745c:	4630      	mov	r0, r6
 800745e:	4639      	mov	r1, r7
 8007460:	f7f9 fb5a 	bl	8000b18 <__aeabi_dcmpeq>
 8007464:	b918      	cbnz	r0, 800746e <__cvt+0xba>
 8007466:	f1c4 0401 	rsb	r4, r4, #1
 800746a:	f8ca 4000 	str.w	r4, [sl]
 800746e:	f8da 3000 	ldr.w	r3, [sl]
 8007472:	4499      	add	r9, r3
 8007474:	e7d3      	b.n	800741e <__cvt+0x6a>
 8007476:	1c59      	adds	r1, r3, #1
 8007478:	9103      	str	r1, [sp, #12]
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e7d9      	b.n	8007432 <__cvt+0x7e>

0800747e <__exponent>:
 800747e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007480:	2900      	cmp	r1, #0
 8007482:	bfba      	itte	lt
 8007484:	4249      	neglt	r1, r1
 8007486:	232d      	movlt	r3, #45	@ 0x2d
 8007488:	232b      	movge	r3, #43	@ 0x2b
 800748a:	2909      	cmp	r1, #9
 800748c:	7002      	strb	r2, [r0, #0]
 800748e:	7043      	strb	r3, [r0, #1]
 8007490:	dd29      	ble.n	80074e6 <__exponent+0x68>
 8007492:	f10d 0307 	add.w	r3, sp, #7
 8007496:	461d      	mov	r5, r3
 8007498:	270a      	movs	r7, #10
 800749a:	461a      	mov	r2, r3
 800749c:	fbb1 f6f7 	udiv	r6, r1, r7
 80074a0:	fb07 1416 	mls	r4, r7, r6, r1
 80074a4:	3430      	adds	r4, #48	@ 0x30
 80074a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074aa:	460c      	mov	r4, r1
 80074ac:	2c63      	cmp	r4, #99	@ 0x63
 80074ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80074b2:	4631      	mov	r1, r6
 80074b4:	dcf1      	bgt.n	800749a <__exponent+0x1c>
 80074b6:	3130      	adds	r1, #48	@ 0x30
 80074b8:	1e94      	subs	r4, r2, #2
 80074ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074be:	1c41      	adds	r1, r0, #1
 80074c0:	4623      	mov	r3, r4
 80074c2:	42ab      	cmp	r3, r5
 80074c4:	d30a      	bcc.n	80074dc <__exponent+0x5e>
 80074c6:	f10d 0309 	add.w	r3, sp, #9
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	42ac      	cmp	r4, r5
 80074ce:	bf88      	it	hi
 80074d0:	2300      	movhi	r3, #0
 80074d2:	3302      	adds	r3, #2
 80074d4:	4403      	add	r3, r0
 80074d6:	1a18      	subs	r0, r3, r0
 80074d8:	b003      	add	sp, #12
 80074da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80074e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80074e4:	e7ed      	b.n	80074c2 <__exponent+0x44>
 80074e6:	2330      	movs	r3, #48	@ 0x30
 80074e8:	3130      	adds	r1, #48	@ 0x30
 80074ea:	7083      	strb	r3, [r0, #2]
 80074ec:	70c1      	strb	r1, [r0, #3]
 80074ee:	1d03      	adds	r3, r0, #4
 80074f0:	e7f1      	b.n	80074d6 <__exponent+0x58>
	...

080074f4 <_printf_float>:
 80074f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	b08d      	sub	sp, #52	@ 0x34
 80074fa:	460c      	mov	r4, r1
 80074fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007500:	4616      	mov	r6, r2
 8007502:	461f      	mov	r7, r3
 8007504:	4605      	mov	r5, r0
 8007506:	f000 fcef 	bl	8007ee8 <_localeconv_r>
 800750a:	6803      	ldr	r3, [r0, #0]
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	4618      	mov	r0, r3
 8007510:	f7f8 fed6 	bl	80002c0 <strlen>
 8007514:	2300      	movs	r3, #0
 8007516:	930a      	str	r3, [sp, #40]	@ 0x28
 8007518:	f8d8 3000 	ldr.w	r3, [r8]
 800751c:	9005      	str	r0, [sp, #20]
 800751e:	3307      	adds	r3, #7
 8007520:	f023 0307 	bic.w	r3, r3, #7
 8007524:	f103 0208 	add.w	r2, r3, #8
 8007528:	f894 a018 	ldrb.w	sl, [r4, #24]
 800752c:	f8d4 b000 	ldr.w	fp, [r4]
 8007530:	f8c8 2000 	str.w	r2, [r8]
 8007534:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007538:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800753c:	9307      	str	r3, [sp, #28]
 800753e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007542:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800754a:	4b9c      	ldr	r3, [pc, #624]	@ (80077bc <_printf_float+0x2c8>)
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	f7f9 fb14 	bl	8000b7c <__aeabi_dcmpun>
 8007554:	bb70      	cbnz	r0, 80075b4 <_printf_float+0xc0>
 8007556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800755a:	4b98      	ldr	r3, [pc, #608]	@ (80077bc <_printf_float+0x2c8>)
 800755c:	f04f 32ff 	mov.w	r2, #4294967295
 8007560:	f7f9 faee 	bl	8000b40 <__aeabi_dcmple>
 8007564:	bb30      	cbnz	r0, 80075b4 <_printf_float+0xc0>
 8007566:	2200      	movs	r2, #0
 8007568:	2300      	movs	r3, #0
 800756a:	4640      	mov	r0, r8
 800756c:	4649      	mov	r1, r9
 800756e:	f7f9 fadd 	bl	8000b2c <__aeabi_dcmplt>
 8007572:	b110      	cbz	r0, 800757a <_printf_float+0x86>
 8007574:	232d      	movs	r3, #45	@ 0x2d
 8007576:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800757a:	4a91      	ldr	r2, [pc, #580]	@ (80077c0 <_printf_float+0x2cc>)
 800757c:	4b91      	ldr	r3, [pc, #580]	@ (80077c4 <_printf_float+0x2d0>)
 800757e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007582:	bf8c      	ite	hi
 8007584:	4690      	movhi	r8, r2
 8007586:	4698      	movls	r8, r3
 8007588:	2303      	movs	r3, #3
 800758a:	6123      	str	r3, [r4, #16]
 800758c:	f02b 0304 	bic.w	r3, fp, #4
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	9700      	str	r7, [sp, #0]
 8007598:	4633      	mov	r3, r6
 800759a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 f9d2 	bl	8007948 <_printf_common>
 80075a4:	3001      	adds	r0, #1
 80075a6:	f040 808d 	bne.w	80076c4 <_printf_float+0x1d0>
 80075aa:	f04f 30ff 	mov.w	r0, #4294967295
 80075ae:	b00d      	add	sp, #52	@ 0x34
 80075b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b4:	4642      	mov	r2, r8
 80075b6:	464b      	mov	r3, r9
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f9 fade 	bl	8000b7c <__aeabi_dcmpun>
 80075c0:	b140      	cbz	r0, 80075d4 <_printf_float+0xe0>
 80075c2:	464b      	mov	r3, r9
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bfbc      	itt	lt
 80075c8:	232d      	movlt	r3, #45	@ 0x2d
 80075ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80075ce:	4a7e      	ldr	r2, [pc, #504]	@ (80077c8 <_printf_float+0x2d4>)
 80075d0:	4b7e      	ldr	r3, [pc, #504]	@ (80077cc <_printf_float+0x2d8>)
 80075d2:	e7d4      	b.n	800757e <_printf_float+0x8a>
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80075da:	9206      	str	r2, [sp, #24]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	d13b      	bne.n	8007658 <_printf_float+0x164>
 80075e0:	2306      	movs	r3, #6
 80075e2:	6063      	str	r3, [r4, #4]
 80075e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80075e8:	2300      	movs	r3, #0
 80075ea:	6022      	str	r2, [r4, #0]
 80075ec:	9303      	str	r3, [sp, #12]
 80075ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80075f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80075f4:	ab09      	add	r3, sp, #36	@ 0x24
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	6861      	ldr	r1, [r4, #4]
 80075fa:	ec49 8b10 	vmov	d0, r8, r9
 80075fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007602:	4628      	mov	r0, r5
 8007604:	f7ff fed6 	bl	80073b4 <__cvt>
 8007608:	9b06      	ldr	r3, [sp, #24]
 800760a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800760c:	2b47      	cmp	r3, #71	@ 0x47
 800760e:	4680      	mov	r8, r0
 8007610:	d129      	bne.n	8007666 <_printf_float+0x172>
 8007612:	1cc8      	adds	r0, r1, #3
 8007614:	db02      	blt.n	800761c <_printf_float+0x128>
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	4299      	cmp	r1, r3
 800761a:	dd41      	ble.n	80076a0 <_printf_float+0x1ac>
 800761c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007620:	fa5f fa8a 	uxtb.w	sl, sl
 8007624:	3901      	subs	r1, #1
 8007626:	4652      	mov	r2, sl
 8007628:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800762c:	9109      	str	r1, [sp, #36]	@ 0x24
 800762e:	f7ff ff26 	bl	800747e <__exponent>
 8007632:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007634:	1813      	adds	r3, r2, r0
 8007636:	2a01      	cmp	r2, #1
 8007638:	4681      	mov	r9, r0
 800763a:	6123      	str	r3, [r4, #16]
 800763c:	dc02      	bgt.n	8007644 <_printf_float+0x150>
 800763e:	6822      	ldr	r2, [r4, #0]
 8007640:	07d2      	lsls	r2, r2, #31
 8007642:	d501      	bpl.n	8007648 <_printf_float+0x154>
 8007644:	3301      	adds	r3, #1
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0a2      	beq.n	8007596 <_printf_float+0xa2>
 8007650:	232d      	movs	r3, #45	@ 0x2d
 8007652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007656:	e79e      	b.n	8007596 <_printf_float+0xa2>
 8007658:	9a06      	ldr	r2, [sp, #24]
 800765a:	2a47      	cmp	r2, #71	@ 0x47
 800765c:	d1c2      	bne.n	80075e4 <_printf_float+0xf0>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1c0      	bne.n	80075e4 <_printf_float+0xf0>
 8007662:	2301      	movs	r3, #1
 8007664:	e7bd      	b.n	80075e2 <_printf_float+0xee>
 8007666:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800766a:	d9db      	bls.n	8007624 <_printf_float+0x130>
 800766c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007670:	d118      	bne.n	80076a4 <_printf_float+0x1b0>
 8007672:	2900      	cmp	r1, #0
 8007674:	6863      	ldr	r3, [r4, #4]
 8007676:	dd0b      	ble.n	8007690 <_printf_float+0x19c>
 8007678:	6121      	str	r1, [r4, #16]
 800767a:	b913      	cbnz	r3, 8007682 <_printf_float+0x18e>
 800767c:	6822      	ldr	r2, [r4, #0]
 800767e:	07d0      	lsls	r0, r2, #31
 8007680:	d502      	bpl.n	8007688 <_printf_float+0x194>
 8007682:	3301      	adds	r3, #1
 8007684:	440b      	add	r3, r1
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	65a1      	str	r1, [r4, #88]	@ 0x58
 800768a:	f04f 0900 	mov.w	r9, #0
 800768e:	e7db      	b.n	8007648 <_printf_float+0x154>
 8007690:	b913      	cbnz	r3, 8007698 <_printf_float+0x1a4>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	07d2      	lsls	r2, r2, #31
 8007696:	d501      	bpl.n	800769c <_printf_float+0x1a8>
 8007698:	3302      	adds	r3, #2
 800769a:	e7f4      	b.n	8007686 <_printf_float+0x192>
 800769c:	2301      	movs	r3, #1
 800769e:	e7f2      	b.n	8007686 <_printf_float+0x192>
 80076a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80076a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a6:	4299      	cmp	r1, r3
 80076a8:	db05      	blt.n	80076b6 <_printf_float+0x1c2>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	6121      	str	r1, [r4, #16]
 80076ae:	07d8      	lsls	r0, r3, #31
 80076b0:	d5ea      	bpl.n	8007688 <_printf_float+0x194>
 80076b2:	1c4b      	adds	r3, r1, #1
 80076b4:	e7e7      	b.n	8007686 <_printf_float+0x192>
 80076b6:	2900      	cmp	r1, #0
 80076b8:	bfd4      	ite	le
 80076ba:	f1c1 0202 	rsble	r2, r1, #2
 80076be:	2201      	movgt	r2, #1
 80076c0:	4413      	add	r3, r2
 80076c2:	e7e0      	b.n	8007686 <_printf_float+0x192>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	055a      	lsls	r2, r3, #21
 80076c8:	d407      	bmi.n	80076da <_printf_float+0x1e6>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	4642      	mov	r2, r8
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	d12b      	bne.n	8007730 <_printf_float+0x23c>
 80076d8:	e767      	b.n	80075aa <_printf_float+0xb6>
 80076da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076de:	f240 80dd 	bls.w	800789c <_printf_float+0x3a8>
 80076e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076e6:	2200      	movs	r2, #0
 80076e8:	2300      	movs	r3, #0
 80076ea:	f7f9 fa15 	bl	8000b18 <__aeabi_dcmpeq>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d033      	beq.n	800775a <_printf_float+0x266>
 80076f2:	4a37      	ldr	r2, [pc, #220]	@ (80077d0 <_printf_float+0x2dc>)
 80076f4:	2301      	movs	r3, #1
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f af54 	beq.w	80075aa <_printf_float+0xb6>
 8007702:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007706:	4543      	cmp	r3, r8
 8007708:	db02      	blt.n	8007710 <_printf_float+0x21c>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	07d8      	lsls	r0, r3, #31
 800770e:	d50f      	bpl.n	8007730 <_printf_float+0x23c>
 8007710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	f43f af45 	beq.w	80075aa <_printf_float+0xb6>
 8007720:	f04f 0900 	mov.w	r9, #0
 8007724:	f108 38ff 	add.w	r8, r8, #4294967295
 8007728:	f104 0a1a 	add.w	sl, r4, #26
 800772c:	45c8      	cmp	r8, r9
 800772e:	dc09      	bgt.n	8007744 <_printf_float+0x250>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	079b      	lsls	r3, r3, #30
 8007734:	f100 8103 	bmi.w	800793e <_printf_float+0x44a>
 8007738:	68e0      	ldr	r0, [r4, #12]
 800773a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800773c:	4298      	cmp	r0, r3
 800773e:	bfb8      	it	lt
 8007740:	4618      	movlt	r0, r3
 8007742:	e734      	b.n	80075ae <_printf_float+0xba>
 8007744:	2301      	movs	r3, #1
 8007746:	4652      	mov	r2, sl
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af2b 	beq.w	80075aa <_printf_float+0xb6>
 8007754:	f109 0901 	add.w	r9, r9, #1
 8007758:	e7e8      	b.n	800772c <_printf_float+0x238>
 800775a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	dc39      	bgt.n	80077d4 <_printf_float+0x2e0>
 8007760:	4a1b      	ldr	r2, [pc, #108]	@ (80077d0 <_printf_float+0x2dc>)
 8007762:	2301      	movs	r3, #1
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	f43f af1d 	beq.w	80075aa <_printf_float+0xb6>
 8007770:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007774:	ea59 0303 	orrs.w	r3, r9, r3
 8007778:	d102      	bne.n	8007780 <_printf_float+0x28c>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	07d9      	lsls	r1, r3, #31
 800777e:	d5d7      	bpl.n	8007730 <_printf_float+0x23c>
 8007780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	f43f af0d 	beq.w	80075aa <_printf_float+0xb6>
 8007790:	f04f 0a00 	mov.w	sl, #0
 8007794:	f104 0b1a 	add.w	fp, r4, #26
 8007798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779a:	425b      	negs	r3, r3
 800779c:	4553      	cmp	r3, sl
 800779e:	dc01      	bgt.n	80077a4 <_printf_float+0x2b0>
 80077a0:	464b      	mov	r3, r9
 80077a2:	e793      	b.n	80076cc <_printf_float+0x1d8>
 80077a4:	2301      	movs	r3, #1
 80077a6:	465a      	mov	r2, fp
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b8      	blx	r7
 80077ae:	3001      	adds	r0, #1
 80077b0:	f43f aefb 	beq.w	80075aa <_printf_float+0xb6>
 80077b4:	f10a 0a01 	add.w	sl, sl, #1
 80077b8:	e7ee      	b.n	8007798 <_printf_float+0x2a4>
 80077ba:	bf00      	nop
 80077bc:	7fefffff 	.word	0x7fefffff
 80077c0:	0800b284 	.word	0x0800b284
 80077c4:	0800b280 	.word	0x0800b280
 80077c8:	0800b28c 	.word	0x0800b28c
 80077cc:	0800b288 	.word	0x0800b288
 80077d0:	0800b290 	.word	0x0800b290
 80077d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077da:	4553      	cmp	r3, sl
 80077dc:	bfa8      	it	ge
 80077de:	4653      	movge	r3, sl
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	4699      	mov	r9, r3
 80077e4:	dc36      	bgt.n	8007854 <_printf_float+0x360>
 80077e6:	f04f 0b00 	mov.w	fp, #0
 80077ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077ee:	f104 021a 	add.w	r2, r4, #26
 80077f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077f4:	9306      	str	r3, [sp, #24]
 80077f6:	eba3 0309 	sub.w	r3, r3, r9
 80077fa:	455b      	cmp	r3, fp
 80077fc:	dc31      	bgt.n	8007862 <_printf_float+0x36e>
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	459a      	cmp	sl, r3
 8007802:	dc3a      	bgt.n	800787a <_printf_float+0x386>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	07da      	lsls	r2, r3, #31
 8007808:	d437      	bmi.n	800787a <_printf_float+0x386>
 800780a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780c:	ebaa 0903 	sub.w	r9, sl, r3
 8007810:	9b06      	ldr	r3, [sp, #24]
 8007812:	ebaa 0303 	sub.w	r3, sl, r3
 8007816:	4599      	cmp	r9, r3
 8007818:	bfa8      	it	ge
 800781a:	4699      	movge	r9, r3
 800781c:	f1b9 0f00 	cmp.w	r9, #0
 8007820:	dc33      	bgt.n	800788a <_printf_float+0x396>
 8007822:	f04f 0800 	mov.w	r8, #0
 8007826:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800782a:	f104 0b1a 	add.w	fp, r4, #26
 800782e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007830:	ebaa 0303 	sub.w	r3, sl, r3
 8007834:	eba3 0309 	sub.w	r3, r3, r9
 8007838:	4543      	cmp	r3, r8
 800783a:	f77f af79 	ble.w	8007730 <_printf_float+0x23c>
 800783e:	2301      	movs	r3, #1
 8007840:	465a      	mov	r2, fp
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	f43f aeae 	beq.w	80075aa <_printf_float+0xb6>
 800784e:	f108 0801 	add.w	r8, r8, #1
 8007852:	e7ec      	b.n	800782e <_printf_float+0x33a>
 8007854:	4642      	mov	r2, r8
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	d1c2      	bne.n	80077e6 <_printf_float+0x2f2>
 8007860:	e6a3      	b.n	80075aa <_printf_float+0xb6>
 8007862:	2301      	movs	r3, #1
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	9206      	str	r2, [sp, #24]
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f ae9c 	beq.w	80075aa <_printf_float+0xb6>
 8007872:	9a06      	ldr	r2, [sp, #24]
 8007874:	f10b 0b01 	add.w	fp, fp, #1
 8007878:	e7bb      	b.n	80077f2 <_printf_float+0x2fe>
 800787a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800787e:	4631      	mov	r1, r6
 8007880:	4628      	mov	r0, r5
 8007882:	47b8      	blx	r7
 8007884:	3001      	adds	r0, #1
 8007886:	d1c0      	bne.n	800780a <_printf_float+0x316>
 8007888:	e68f      	b.n	80075aa <_printf_float+0xb6>
 800788a:	9a06      	ldr	r2, [sp, #24]
 800788c:	464b      	mov	r3, r9
 800788e:	4442      	add	r2, r8
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	d1c3      	bne.n	8007822 <_printf_float+0x32e>
 800789a:	e686      	b.n	80075aa <_printf_float+0xb6>
 800789c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078a0:	f1ba 0f01 	cmp.w	sl, #1
 80078a4:	dc01      	bgt.n	80078aa <_printf_float+0x3b6>
 80078a6:	07db      	lsls	r3, r3, #31
 80078a8:	d536      	bpl.n	8007918 <_printf_float+0x424>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4642      	mov	r2, r8
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	f43f ae78 	beq.w	80075aa <_printf_float+0xb6>
 80078ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b8      	blx	r7
 80078c4:	3001      	adds	r0, #1
 80078c6:	f43f ae70 	beq.w	80075aa <_printf_float+0xb6>
 80078ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078ce:	2200      	movs	r2, #0
 80078d0:	2300      	movs	r3, #0
 80078d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078d6:	f7f9 f91f 	bl	8000b18 <__aeabi_dcmpeq>
 80078da:	b9c0      	cbnz	r0, 800790e <_printf_float+0x41a>
 80078dc:	4653      	mov	r3, sl
 80078de:	f108 0201 	add.w	r2, r8, #1
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	d10c      	bne.n	8007906 <_printf_float+0x412>
 80078ec:	e65d      	b.n	80075aa <_printf_float+0xb6>
 80078ee:	2301      	movs	r3, #1
 80078f0:	465a      	mov	r2, fp
 80078f2:	4631      	mov	r1, r6
 80078f4:	4628      	mov	r0, r5
 80078f6:	47b8      	blx	r7
 80078f8:	3001      	adds	r0, #1
 80078fa:	f43f ae56 	beq.w	80075aa <_printf_float+0xb6>
 80078fe:	f108 0801 	add.w	r8, r8, #1
 8007902:	45d0      	cmp	r8, sl
 8007904:	dbf3      	blt.n	80078ee <_printf_float+0x3fa>
 8007906:	464b      	mov	r3, r9
 8007908:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800790c:	e6df      	b.n	80076ce <_printf_float+0x1da>
 800790e:	f04f 0800 	mov.w	r8, #0
 8007912:	f104 0b1a 	add.w	fp, r4, #26
 8007916:	e7f4      	b.n	8007902 <_printf_float+0x40e>
 8007918:	2301      	movs	r3, #1
 800791a:	4642      	mov	r2, r8
 800791c:	e7e1      	b.n	80078e2 <_printf_float+0x3ee>
 800791e:	2301      	movs	r3, #1
 8007920:	464a      	mov	r2, r9
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	f43f ae3e 	beq.w	80075aa <_printf_float+0xb6>
 800792e:	f108 0801 	add.w	r8, r8, #1
 8007932:	68e3      	ldr	r3, [r4, #12]
 8007934:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007936:	1a5b      	subs	r3, r3, r1
 8007938:	4543      	cmp	r3, r8
 800793a:	dcf0      	bgt.n	800791e <_printf_float+0x42a>
 800793c:	e6fc      	b.n	8007738 <_printf_float+0x244>
 800793e:	f04f 0800 	mov.w	r8, #0
 8007942:	f104 0919 	add.w	r9, r4, #25
 8007946:	e7f4      	b.n	8007932 <_printf_float+0x43e>

08007948 <_printf_common>:
 8007948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	4616      	mov	r6, r2
 800794e:	4698      	mov	r8, r3
 8007950:	688a      	ldr	r2, [r1, #8]
 8007952:	690b      	ldr	r3, [r1, #16]
 8007954:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007958:	4293      	cmp	r3, r2
 800795a:	bfb8      	it	lt
 800795c:	4613      	movlt	r3, r2
 800795e:	6033      	str	r3, [r6, #0]
 8007960:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007964:	4607      	mov	r7, r0
 8007966:	460c      	mov	r4, r1
 8007968:	b10a      	cbz	r2, 800796e <_printf_common+0x26>
 800796a:	3301      	adds	r3, #1
 800796c:	6033      	str	r3, [r6, #0]
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	0699      	lsls	r1, r3, #26
 8007972:	bf42      	ittt	mi
 8007974:	6833      	ldrmi	r3, [r6, #0]
 8007976:	3302      	addmi	r3, #2
 8007978:	6033      	strmi	r3, [r6, #0]
 800797a:	6825      	ldr	r5, [r4, #0]
 800797c:	f015 0506 	ands.w	r5, r5, #6
 8007980:	d106      	bne.n	8007990 <_printf_common+0x48>
 8007982:	f104 0a19 	add.w	sl, r4, #25
 8007986:	68e3      	ldr	r3, [r4, #12]
 8007988:	6832      	ldr	r2, [r6, #0]
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	42ab      	cmp	r3, r5
 800798e:	dc26      	bgt.n	80079de <_printf_common+0x96>
 8007990:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	3b00      	subs	r3, #0
 8007998:	bf18      	it	ne
 800799a:	2301      	movne	r3, #1
 800799c:	0692      	lsls	r2, r2, #26
 800799e:	d42b      	bmi.n	80079f8 <_printf_common+0xb0>
 80079a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079a4:	4641      	mov	r1, r8
 80079a6:	4638      	mov	r0, r7
 80079a8:	47c8      	blx	r9
 80079aa:	3001      	adds	r0, #1
 80079ac:	d01e      	beq.n	80079ec <_printf_common+0xa4>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	f003 0306 	and.w	r3, r3, #6
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	bf02      	ittt	eq
 80079ba:	68e5      	ldreq	r5, [r4, #12]
 80079bc:	6833      	ldreq	r3, [r6, #0]
 80079be:	1aed      	subeq	r5, r5, r3
 80079c0:	68a3      	ldr	r3, [r4, #8]
 80079c2:	bf0c      	ite	eq
 80079c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079c8:	2500      	movne	r5, #0
 80079ca:	4293      	cmp	r3, r2
 80079cc:	bfc4      	itt	gt
 80079ce:	1a9b      	subgt	r3, r3, r2
 80079d0:	18ed      	addgt	r5, r5, r3
 80079d2:	2600      	movs	r6, #0
 80079d4:	341a      	adds	r4, #26
 80079d6:	42b5      	cmp	r5, r6
 80079d8:	d11a      	bne.n	8007a10 <_printf_common+0xc8>
 80079da:	2000      	movs	r0, #0
 80079dc:	e008      	b.n	80079f0 <_printf_common+0xa8>
 80079de:	2301      	movs	r3, #1
 80079e0:	4652      	mov	r2, sl
 80079e2:	4641      	mov	r1, r8
 80079e4:	4638      	mov	r0, r7
 80079e6:	47c8      	blx	r9
 80079e8:	3001      	adds	r0, #1
 80079ea:	d103      	bne.n	80079f4 <_printf_common+0xac>
 80079ec:	f04f 30ff 	mov.w	r0, #4294967295
 80079f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f4:	3501      	adds	r5, #1
 80079f6:	e7c6      	b.n	8007986 <_printf_common+0x3e>
 80079f8:	18e1      	adds	r1, r4, r3
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	2030      	movs	r0, #48	@ 0x30
 80079fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a02:	4422      	add	r2, r4
 8007a04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a0c:	3302      	adds	r3, #2
 8007a0e:	e7c7      	b.n	80079a0 <_printf_common+0x58>
 8007a10:	2301      	movs	r3, #1
 8007a12:	4622      	mov	r2, r4
 8007a14:	4641      	mov	r1, r8
 8007a16:	4638      	mov	r0, r7
 8007a18:	47c8      	blx	r9
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d0e6      	beq.n	80079ec <_printf_common+0xa4>
 8007a1e:	3601      	adds	r6, #1
 8007a20:	e7d9      	b.n	80079d6 <_printf_common+0x8e>
	...

08007a24 <_printf_i>:
 8007a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	7e0f      	ldrb	r7, [r1, #24]
 8007a2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a2c:	2f78      	cmp	r7, #120	@ 0x78
 8007a2e:	4691      	mov	r9, r2
 8007a30:	4680      	mov	r8, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	469a      	mov	sl, r3
 8007a36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a3a:	d807      	bhi.n	8007a4c <_printf_i+0x28>
 8007a3c:	2f62      	cmp	r7, #98	@ 0x62
 8007a3e:	d80a      	bhi.n	8007a56 <_printf_i+0x32>
 8007a40:	2f00      	cmp	r7, #0
 8007a42:	f000 80d1 	beq.w	8007be8 <_printf_i+0x1c4>
 8007a46:	2f58      	cmp	r7, #88	@ 0x58
 8007a48:	f000 80b8 	beq.w	8007bbc <_printf_i+0x198>
 8007a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a54:	e03a      	b.n	8007acc <_printf_i+0xa8>
 8007a56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a5a:	2b15      	cmp	r3, #21
 8007a5c:	d8f6      	bhi.n	8007a4c <_printf_i+0x28>
 8007a5e:	a101      	add	r1, pc, #4	@ (adr r1, 8007a64 <_printf_i+0x40>)
 8007a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a64:	08007abd 	.word	0x08007abd
 8007a68:	08007ad1 	.word	0x08007ad1
 8007a6c:	08007a4d 	.word	0x08007a4d
 8007a70:	08007a4d 	.word	0x08007a4d
 8007a74:	08007a4d 	.word	0x08007a4d
 8007a78:	08007a4d 	.word	0x08007a4d
 8007a7c:	08007ad1 	.word	0x08007ad1
 8007a80:	08007a4d 	.word	0x08007a4d
 8007a84:	08007a4d 	.word	0x08007a4d
 8007a88:	08007a4d 	.word	0x08007a4d
 8007a8c:	08007a4d 	.word	0x08007a4d
 8007a90:	08007bcf 	.word	0x08007bcf
 8007a94:	08007afb 	.word	0x08007afb
 8007a98:	08007b89 	.word	0x08007b89
 8007a9c:	08007a4d 	.word	0x08007a4d
 8007aa0:	08007a4d 	.word	0x08007a4d
 8007aa4:	08007bf1 	.word	0x08007bf1
 8007aa8:	08007a4d 	.word	0x08007a4d
 8007aac:	08007afb 	.word	0x08007afb
 8007ab0:	08007a4d 	.word	0x08007a4d
 8007ab4:	08007a4d 	.word	0x08007a4d
 8007ab8:	08007b91 	.word	0x08007b91
 8007abc:	6833      	ldr	r3, [r6, #0]
 8007abe:	1d1a      	adds	r2, r3, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6032      	str	r2, [r6, #0]
 8007ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007acc:	2301      	movs	r3, #1
 8007ace:	e09c      	b.n	8007c0a <_printf_i+0x1e6>
 8007ad0:	6833      	ldr	r3, [r6, #0]
 8007ad2:	6820      	ldr	r0, [r4, #0]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	6031      	str	r1, [r6, #0]
 8007ad8:	0606      	lsls	r6, r0, #24
 8007ada:	d501      	bpl.n	8007ae0 <_printf_i+0xbc>
 8007adc:	681d      	ldr	r5, [r3, #0]
 8007ade:	e003      	b.n	8007ae8 <_printf_i+0xc4>
 8007ae0:	0645      	lsls	r5, r0, #25
 8007ae2:	d5fb      	bpl.n	8007adc <_printf_i+0xb8>
 8007ae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	da03      	bge.n	8007af4 <_printf_i+0xd0>
 8007aec:	232d      	movs	r3, #45	@ 0x2d
 8007aee:	426d      	negs	r5, r5
 8007af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007af4:	4858      	ldr	r0, [pc, #352]	@ (8007c58 <_printf_i+0x234>)
 8007af6:	230a      	movs	r3, #10
 8007af8:	e011      	b.n	8007b1e <_printf_i+0xfa>
 8007afa:	6821      	ldr	r1, [r4, #0]
 8007afc:	6833      	ldr	r3, [r6, #0]
 8007afe:	0608      	lsls	r0, r1, #24
 8007b00:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b04:	d402      	bmi.n	8007b0c <_printf_i+0xe8>
 8007b06:	0649      	lsls	r1, r1, #25
 8007b08:	bf48      	it	mi
 8007b0a:	b2ad      	uxthmi	r5, r5
 8007b0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b0e:	4852      	ldr	r0, [pc, #328]	@ (8007c58 <_printf_i+0x234>)
 8007b10:	6033      	str	r3, [r6, #0]
 8007b12:	bf14      	ite	ne
 8007b14:	230a      	movne	r3, #10
 8007b16:	2308      	moveq	r3, #8
 8007b18:	2100      	movs	r1, #0
 8007b1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b1e:	6866      	ldr	r6, [r4, #4]
 8007b20:	60a6      	str	r6, [r4, #8]
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	db05      	blt.n	8007b32 <_printf_i+0x10e>
 8007b26:	6821      	ldr	r1, [r4, #0]
 8007b28:	432e      	orrs	r6, r5
 8007b2a:	f021 0104 	bic.w	r1, r1, #4
 8007b2e:	6021      	str	r1, [r4, #0]
 8007b30:	d04b      	beq.n	8007bca <_printf_i+0x1a6>
 8007b32:	4616      	mov	r6, r2
 8007b34:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b38:	fb03 5711 	mls	r7, r3, r1, r5
 8007b3c:	5dc7      	ldrb	r7, [r0, r7]
 8007b3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b42:	462f      	mov	r7, r5
 8007b44:	42bb      	cmp	r3, r7
 8007b46:	460d      	mov	r5, r1
 8007b48:	d9f4      	bls.n	8007b34 <_printf_i+0x110>
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d10b      	bne.n	8007b66 <_printf_i+0x142>
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	07df      	lsls	r7, r3, #31
 8007b52:	d508      	bpl.n	8007b66 <_printf_i+0x142>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	6861      	ldr	r1, [r4, #4]
 8007b58:	4299      	cmp	r1, r3
 8007b5a:	bfde      	ittt	le
 8007b5c:	2330      	movle	r3, #48	@ 0x30
 8007b5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b66:	1b92      	subs	r2, r2, r6
 8007b68:	6122      	str	r2, [r4, #16]
 8007b6a:	f8cd a000 	str.w	sl, [sp]
 8007b6e:	464b      	mov	r3, r9
 8007b70:	aa03      	add	r2, sp, #12
 8007b72:	4621      	mov	r1, r4
 8007b74:	4640      	mov	r0, r8
 8007b76:	f7ff fee7 	bl	8007948 <_printf_common>
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d14a      	bne.n	8007c14 <_printf_i+0x1f0>
 8007b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b82:	b004      	add	sp, #16
 8007b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	f043 0320 	orr.w	r3, r3, #32
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	4832      	ldr	r0, [pc, #200]	@ (8007c5c <_printf_i+0x238>)
 8007b92:	2778      	movs	r7, #120	@ 0x78
 8007b94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	6831      	ldr	r1, [r6, #0]
 8007b9c:	061f      	lsls	r7, r3, #24
 8007b9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ba2:	d402      	bmi.n	8007baa <_printf_i+0x186>
 8007ba4:	065f      	lsls	r7, r3, #25
 8007ba6:	bf48      	it	mi
 8007ba8:	b2ad      	uxthmi	r5, r5
 8007baa:	6031      	str	r1, [r6, #0]
 8007bac:	07d9      	lsls	r1, r3, #31
 8007bae:	bf44      	itt	mi
 8007bb0:	f043 0320 	orrmi.w	r3, r3, #32
 8007bb4:	6023      	strmi	r3, [r4, #0]
 8007bb6:	b11d      	cbz	r5, 8007bc0 <_printf_i+0x19c>
 8007bb8:	2310      	movs	r3, #16
 8007bba:	e7ad      	b.n	8007b18 <_printf_i+0xf4>
 8007bbc:	4826      	ldr	r0, [pc, #152]	@ (8007c58 <_printf_i+0x234>)
 8007bbe:	e7e9      	b.n	8007b94 <_printf_i+0x170>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	f023 0320 	bic.w	r3, r3, #32
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	e7f6      	b.n	8007bb8 <_printf_i+0x194>
 8007bca:	4616      	mov	r6, r2
 8007bcc:	e7bd      	b.n	8007b4a <_printf_i+0x126>
 8007bce:	6833      	ldr	r3, [r6, #0]
 8007bd0:	6825      	ldr	r5, [r4, #0]
 8007bd2:	6961      	ldr	r1, [r4, #20]
 8007bd4:	1d18      	adds	r0, r3, #4
 8007bd6:	6030      	str	r0, [r6, #0]
 8007bd8:	062e      	lsls	r6, r5, #24
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	d501      	bpl.n	8007be2 <_printf_i+0x1be>
 8007bde:	6019      	str	r1, [r3, #0]
 8007be0:	e002      	b.n	8007be8 <_printf_i+0x1c4>
 8007be2:	0668      	lsls	r0, r5, #25
 8007be4:	d5fb      	bpl.n	8007bde <_printf_i+0x1ba>
 8007be6:	8019      	strh	r1, [r3, #0]
 8007be8:	2300      	movs	r3, #0
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	4616      	mov	r6, r2
 8007bee:	e7bc      	b.n	8007b6a <_printf_i+0x146>
 8007bf0:	6833      	ldr	r3, [r6, #0]
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	6032      	str	r2, [r6, #0]
 8007bf6:	681e      	ldr	r6, [r3, #0]
 8007bf8:	6862      	ldr	r2, [r4, #4]
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7f8 fb0f 	bl	8000220 <memchr>
 8007c02:	b108      	cbz	r0, 8007c08 <_printf_i+0x1e4>
 8007c04:	1b80      	subs	r0, r0, r6
 8007c06:	6060      	str	r0, [r4, #4]
 8007c08:	6863      	ldr	r3, [r4, #4]
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c12:	e7aa      	b.n	8007b6a <_printf_i+0x146>
 8007c14:	6923      	ldr	r3, [r4, #16]
 8007c16:	4632      	mov	r2, r6
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	47d0      	blx	sl
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d0ad      	beq.n	8007b7e <_printf_i+0x15a>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	079b      	lsls	r3, r3, #30
 8007c26:	d413      	bmi.n	8007c50 <_printf_i+0x22c>
 8007c28:	68e0      	ldr	r0, [r4, #12]
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	4298      	cmp	r0, r3
 8007c2e:	bfb8      	it	lt
 8007c30:	4618      	movlt	r0, r3
 8007c32:	e7a6      	b.n	8007b82 <_printf_i+0x15e>
 8007c34:	2301      	movs	r3, #1
 8007c36:	4632      	mov	r2, r6
 8007c38:	4649      	mov	r1, r9
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	47d0      	blx	sl
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d09d      	beq.n	8007b7e <_printf_i+0x15a>
 8007c42:	3501      	adds	r5, #1
 8007c44:	68e3      	ldr	r3, [r4, #12]
 8007c46:	9903      	ldr	r1, [sp, #12]
 8007c48:	1a5b      	subs	r3, r3, r1
 8007c4a:	42ab      	cmp	r3, r5
 8007c4c:	dcf2      	bgt.n	8007c34 <_printf_i+0x210>
 8007c4e:	e7eb      	b.n	8007c28 <_printf_i+0x204>
 8007c50:	2500      	movs	r5, #0
 8007c52:	f104 0619 	add.w	r6, r4, #25
 8007c56:	e7f5      	b.n	8007c44 <_printf_i+0x220>
 8007c58:	0800b292 	.word	0x0800b292
 8007c5c:	0800b2a3 	.word	0x0800b2a3

08007c60 <std>:
 8007c60:	2300      	movs	r3, #0
 8007c62:	b510      	push	{r4, lr}
 8007c64:	4604      	mov	r4, r0
 8007c66:	e9c0 3300 	strd	r3, r3, [r0]
 8007c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c6e:	6083      	str	r3, [r0, #8]
 8007c70:	8181      	strh	r1, [r0, #12]
 8007c72:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c74:	81c2      	strh	r2, [r0, #14]
 8007c76:	6183      	str	r3, [r0, #24]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	2208      	movs	r2, #8
 8007c7c:	305c      	adds	r0, #92	@ 0x5c
 8007c7e:	f000 f92a 	bl	8007ed6 <memset>
 8007c82:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb8 <std+0x58>)
 8007c84:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c86:	4b0d      	ldr	r3, [pc, #52]	@ (8007cbc <std+0x5c>)
 8007c88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc0 <std+0x60>)
 8007c8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc4 <std+0x64>)
 8007c90:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c92:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc8 <std+0x68>)
 8007c94:	6224      	str	r4, [r4, #32]
 8007c96:	429c      	cmp	r4, r3
 8007c98:	d006      	beq.n	8007ca8 <std+0x48>
 8007c9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c9e:	4294      	cmp	r4, r2
 8007ca0:	d002      	beq.n	8007ca8 <std+0x48>
 8007ca2:	33d0      	adds	r3, #208	@ 0xd0
 8007ca4:	429c      	cmp	r4, r3
 8007ca6:	d105      	bne.n	8007cb4 <std+0x54>
 8007ca8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb0:	f000 b98e 	b.w	8007fd0 <__retarget_lock_init_recursive>
 8007cb4:	bd10      	pop	{r4, pc}
 8007cb6:	bf00      	nop
 8007cb8:	08007e51 	.word	0x08007e51
 8007cbc:	08007e73 	.word	0x08007e73
 8007cc0:	08007eab 	.word	0x08007eab
 8007cc4:	08007ecf 	.word	0x08007ecf
 8007cc8:	200006b8 	.word	0x200006b8

08007ccc <stdio_exit_handler>:
 8007ccc:	4a02      	ldr	r2, [pc, #8]	@ (8007cd8 <stdio_exit_handler+0xc>)
 8007cce:	4903      	ldr	r1, [pc, #12]	@ (8007cdc <stdio_exit_handler+0x10>)
 8007cd0:	4803      	ldr	r0, [pc, #12]	@ (8007ce0 <stdio_exit_handler+0x14>)
 8007cd2:	f000 b869 	b.w	8007da8 <_fwalk_sglue>
 8007cd6:	bf00      	nop
 8007cd8:	20000010 	.word	0x20000010
 8007cdc:	08009935 	.word	0x08009935
 8007ce0:	20000020 	.word	0x20000020

08007ce4 <cleanup_stdio>:
 8007ce4:	6841      	ldr	r1, [r0, #4]
 8007ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <cleanup_stdio+0x34>)
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	b510      	push	{r4, lr}
 8007cec:	4604      	mov	r4, r0
 8007cee:	d001      	beq.n	8007cf4 <cleanup_stdio+0x10>
 8007cf0:	f001 fe20 	bl	8009934 <_fflush_r>
 8007cf4:	68a1      	ldr	r1, [r4, #8]
 8007cf6:	4b09      	ldr	r3, [pc, #36]	@ (8007d1c <cleanup_stdio+0x38>)
 8007cf8:	4299      	cmp	r1, r3
 8007cfa:	d002      	beq.n	8007d02 <cleanup_stdio+0x1e>
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f001 fe19 	bl	8009934 <_fflush_r>
 8007d02:	68e1      	ldr	r1, [r4, #12]
 8007d04:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <cleanup_stdio+0x3c>)
 8007d06:	4299      	cmp	r1, r3
 8007d08:	d004      	beq.n	8007d14 <cleanup_stdio+0x30>
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d10:	f001 be10 	b.w	8009934 <_fflush_r>
 8007d14:	bd10      	pop	{r4, pc}
 8007d16:	bf00      	nop
 8007d18:	200006b8 	.word	0x200006b8
 8007d1c:	20000720 	.word	0x20000720
 8007d20:	20000788 	.word	0x20000788

08007d24 <global_stdio_init.part.0>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	4b0b      	ldr	r3, [pc, #44]	@ (8007d54 <global_stdio_init.part.0+0x30>)
 8007d28:	4c0b      	ldr	r4, [pc, #44]	@ (8007d58 <global_stdio_init.part.0+0x34>)
 8007d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d5c <global_stdio_init.part.0+0x38>)
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	2200      	movs	r2, #0
 8007d32:	2104      	movs	r1, #4
 8007d34:	f7ff ff94 	bl	8007c60 <std>
 8007d38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	2109      	movs	r1, #9
 8007d40:	f7ff ff8e 	bl	8007c60 <std>
 8007d44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d48:	2202      	movs	r2, #2
 8007d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d4e:	2112      	movs	r1, #18
 8007d50:	f7ff bf86 	b.w	8007c60 <std>
 8007d54:	200007f0 	.word	0x200007f0
 8007d58:	200006b8 	.word	0x200006b8
 8007d5c:	08007ccd 	.word	0x08007ccd

08007d60 <__sfp_lock_acquire>:
 8007d60:	4801      	ldr	r0, [pc, #4]	@ (8007d68 <__sfp_lock_acquire+0x8>)
 8007d62:	f000 b936 	b.w	8007fd2 <__retarget_lock_acquire_recursive>
 8007d66:	bf00      	nop
 8007d68:	200007f9 	.word	0x200007f9

08007d6c <__sfp_lock_release>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	@ (8007d74 <__sfp_lock_release+0x8>)
 8007d6e:	f000 b931 	b.w	8007fd4 <__retarget_lock_release_recursive>
 8007d72:	bf00      	nop
 8007d74:	200007f9 	.word	0x200007f9

08007d78 <__sinit>:
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	f7ff fff0 	bl	8007d60 <__sfp_lock_acquire>
 8007d80:	6a23      	ldr	r3, [r4, #32]
 8007d82:	b11b      	cbz	r3, 8007d8c <__sinit+0x14>
 8007d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d88:	f7ff bff0 	b.w	8007d6c <__sfp_lock_release>
 8007d8c:	4b04      	ldr	r3, [pc, #16]	@ (8007da0 <__sinit+0x28>)
 8007d8e:	6223      	str	r3, [r4, #32]
 8007d90:	4b04      	ldr	r3, [pc, #16]	@ (8007da4 <__sinit+0x2c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1f5      	bne.n	8007d84 <__sinit+0xc>
 8007d98:	f7ff ffc4 	bl	8007d24 <global_stdio_init.part.0>
 8007d9c:	e7f2      	b.n	8007d84 <__sinit+0xc>
 8007d9e:	bf00      	nop
 8007da0:	08007ce5 	.word	0x08007ce5
 8007da4:	200007f0 	.word	0x200007f0

08007da8 <_fwalk_sglue>:
 8007da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dac:	4607      	mov	r7, r0
 8007dae:	4688      	mov	r8, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	2600      	movs	r6, #0
 8007db4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007db8:	f1b9 0901 	subs.w	r9, r9, #1
 8007dbc:	d505      	bpl.n	8007dca <_fwalk_sglue+0x22>
 8007dbe:	6824      	ldr	r4, [r4, #0]
 8007dc0:	2c00      	cmp	r4, #0
 8007dc2:	d1f7      	bne.n	8007db4 <_fwalk_sglue+0xc>
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dca:	89ab      	ldrh	r3, [r5, #12]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d907      	bls.n	8007de0 <_fwalk_sglue+0x38>
 8007dd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	d003      	beq.n	8007de0 <_fwalk_sglue+0x38>
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4638      	mov	r0, r7
 8007ddc:	47c0      	blx	r8
 8007dde:	4306      	orrs	r6, r0
 8007de0:	3568      	adds	r5, #104	@ 0x68
 8007de2:	e7e9      	b.n	8007db8 <_fwalk_sglue+0x10>

08007de4 <sniprintf>:
 8007de4:	b40c      	push	{r2, r3}
 8007de6:	b530      	push	{r4, r5, lr}
 8007de8:	4b18      	ldr	r3, [pc, #96]	@ (8007e4c <sniprintf+0x68>)
 8007dea:	1e0c      	subs	r4, r1, #0
 8007dec:	681d      	ldr	r5, [r3, #0]
 8007dee:	b09d      	sub	sp, #116	@ 0x74
 8007df0:	da08      	bge.n	8007e04 <sniprintf+0x20>
 8007df2:	238b      	movs	r3, #139	@ 0x8b
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfa:	b01d      	add	sp, #116	@ 0x74
 8007dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e00:	b002      	add	sp, #8
 8007e02:	4770      	bx	lr
 8007e04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e0c:	f04f 0300 	mov.w	r3, #0
 8007e10:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007e12:	bf14      	ite	ne
 8007e14:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e18:	4623      	moveq	r3, r4
 8007e1a:	9304      	str	r3, [sp, #16]
 8007e1c:	9307      	str	r3, [sp, #28]
 8007e1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e22:	9002      	str	r0, [sp, #8]
 8007e24:	9006      	str	r0, [sp, #24]
 8007e26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e2c:	ab21      	add	r3, sp, #132	@ 0x84
 8007e2e:	a902      	add	r1, sp, #8
 8007e30:	4628      	mov	r0, r5
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	f001 fbfe 	bl	8009634 <_svfiprintf_r>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	bfbc      	itt	lt
 8007e3c:	238b      	movlt	r3, #139	@ 0x8b
 8007e3e:	602b      	strlt	r3, [r5, #0]
 8007e40:	2c00      	cmp	r4, #0
 8007e42:	d0da      	beq.n	8007dfa <sniprintf+0x16>
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	2200      	movs	r2, #0
 8007e48:	701a      	strb	r2, [r3, #0]
 8007e4a:	e7d6      	b.n	8007dfa <sniprintf+0x16>
 8007e4c:	2000001c 	.word	0x2000001c

08007e50 <__sread>:
 8007e50:	b510      	push	{r4, lr}
 8007e52:	460c      	mov	r4, r1
 8007e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e58:	f000 f86c 	bl	8007f34 <_read_r>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	bfab      	itete	ge
 8007e60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e62:	89a3      	ldrhlt	r3, [r4, #12]
 8007e64:	181b      	addge	r3, r3, r0
 8007e66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e6a:	bfac      	ite	ge
 8007e6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e6e:	81a3      	strhlt	r3, [r4, #12]
 8007e70:	bd10      	pop	{r4, pc}

08007e72 <__swrite>:
 8007e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e76:	461f      	mov	r7, r3
 8007e78:	898b      	ldrh	r3, [r1, #12]
 8007e7a:	05db      	lsls	r3, r3, #23
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	4616      	mov	r6, r2
 8007e82:	d505      	bpl.n	8007e90 <__swrite+0x1e>
 8007e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e88:	2302      	movs	r3, #2
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f000 f840 	bl	8007f10 <_lseek_r>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea6:	f000 b857 	b.w	8007f58 <_write_r>

08007eaa <__sseek>:
 8007eaa:	b510      	push	{r4, lr}
 8007eac:	460c      	mov	r4, r1
 8007eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb2:	f000 f82d 	bl	8007f10 <_lseek_r>
 8007eb6:	1c43      	adds	r3, r0, #1
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	bf15      	itete	ne
 8007ebc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ebe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ec6:	81a3      	strheq	r3, [r4, #12]
 8007ec8:	bf18      	it	ne
 8007eca:	81a3      	strhne	r3, [r4, #12]
 8007ecc:	bd10      	pop	{r4, pc}

08007ece <__sclose>:
 8007ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed2:	f000 b80d 	b.w	8007ef0 <_close_r>

08007ed6 <memset>:
 8007ed6:	4402      	add	r2, r0
 8007ed8:	4603      	mov	r3, r0
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d100      	bne.n	8007ee0 <memset+0xa>
 8007ede:	4770      	bx	lr
 8007ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ee4:	e7f9      	b.n	8007eda <memset+0x4>
	...

08007ee8 <_localeconv_r>:
 8007ee8:	4800      	ldr	r0, [pc, #0]	@ (8007eec <_localeconv_r+0x4>)
 8007eea:	4770      	bx	lr
 8007eec:	2000015c 	.word	0x2000015c

08007ef0 <_close_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d06      	ldr	r5, [pc, #24]	@ (8007f0c <_close_r+0x1c>)
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	602b      	str	r3, [r5, #0]
 8007efc:	f7f9 ffd2 	bl	8001ea4 <_close>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d102      	bne.n	8007f0a <_close_r+0x1a>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b103      	cbz	r3, 8007f0a <_close_r+0x1a>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	200007f4 	.word	0x200007f4

08007f10 <_lseek_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d07      	ldr	r5, [pc, #28]	@ (8007f30 <_lseek_r+0x20>)
 8007f14:	4604      	mov	r4, r0
 8007f16:	4608      	mov	r0, r1
 8007f18:	4611      	mov	r1, r2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	602a      	str	r2, [r5, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f7f9 ffe7 	bl	8001ef2 <_lseek>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d102      	bne.n	8007f2e <_lseek_r+0x1e>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	b103      	cbz	r3, 8007f2e <_lseek_r+0x1e>
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	200007f4 	.word	0x200007f4

08007f34 <_read_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d07      	ldr	r5, [pc, #28]	@ (8007f54 <_read_r+0x20>)
 8007f38:	4604      	mov	r4, r0
 8007f3a:	4608      	mov	r0, r1
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	602a      	str	r2, [r5, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f7f9 ff91 	bl	8001e6a <_read>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_read_r+0x1e>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_read_r+0x1e>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	200007f4 	.word	0x200007f4

08007f58 <_write_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d07      	ldr	r5, [pc, #28]	@ (8007f78 <_write_r+0x20>)
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	2200      	movs	r2, #0
 8007f64:	602a      	str	r2, [r5, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f7f9 fa50 	bl	800140c <_write>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_write_r+0x1e>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_write_r+0x1e>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	200007f4 	.word	0x200007f4

08007f7c <__errno>:
 8007f7c:	4b01      	ldr	r3, [pc, #4]	@ (8007f84 <__errno+0x8>)
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	2000001c 	.word	0x2000001c

08007f88 <__libc_init_array>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8007fc0 <__libc_init_array+0x38>)
 8007f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8007fc4 <__libc_init_array+0x3c>)
 8007f8e:	1b64      	subs	r4, r4, r5
 8007f90:	10a4      	asrs	r4, r4, #2
 8007f92:	2600      	movs	r6, #0
 8007f94:	42a6      	cmp	r6, r4
 8007f96:	d109      	bne.n	8007fac <__libc_init_array+0x24>
 8007f98:	4d0b      	ldr	r5, [pc, #44]	@ (8007fc8 <__libc_init_array+0x40>)
 8007f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8007fcc <__libc_init_array+0x44>)
 8007f9c:	f003 f8e0 	bl	800b160 <_init>
 8007fa0:	1b64      	subs	r4, r4, r5
 8007fa2:	10a4      	asrs	r4, r4, #2
 8007fa4:	2600      	movs	r6, #0
 8007fa6:	42a6      	cmp	r6, r4
 8007fa8:	d105      	bne.n	8007fb6 <__libc_init_array+0x2e>
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb0:	4798      	blx	r3
 8007fb2:	3601      	adds	r6, #1
 8007fb4:	e7ee      	b.n	8007f94 <__libc_init_array+0xc>
 8007fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fba:	4798      	blx	r3
 8007fbc:	3601      	adds	r6, #1
 8007fbe:	e7f2      	b.n	8007fa6 <__libc_init_array+0x1e>
 8007fc0:	0800b7d8 	.word	0x0800b7d8
 8007fc4:	0800b7d8 	.word	0x0800b7d8
 8007fc8:	0800b7d8 	.word	0x0800b7d8
 8007fcc:	0800b7dc 	.word	0x0800b7dc

08007fd0 <__retarget_lock_init_recursive>:
 8007fd0:	4770      	bx	lr

08007fd2 <__retarget_lock_acquire_recursive>:
 8007fd2:	4770      	bx	lr

08007fd4 <__retarget_lock_release_recursive>:
 8007fd4:	4770      	bx	lr

08007fd6 <quorem>:
 8007fd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	6903      	ldr	r3, [r0, #16]
 8007fdc:	690c      	ldr	r4, [r1, #16]
 8007fde:	42a3      	cmp	r3, r4
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	db7e      	blt.n	80080e2 <quorem+0x10c>
 8007fe4:	3c01      	subs	r4, #1
 8007fe6:	f101 0814 	add.w	r8, r1, #20
 8007fea:	00a3      	lsls	r3, r4, #2
 8007fec:	f100 0514 	add.w	r5, r0, #20
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008000:	3301      	adds	r3, #1
 8008002:	429a      	cmp	r2, r3
 8008004:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008008:	fbb2 f6f3 	udiv	r6, r2, r3
 800800c:	d32e      	bcc.n	800806c <quorem+0x96>
 800800e:	f04f 0a00 	mov.w	sl, #0
 8008012:	46c4      	mov	ip, r8
 8008014:	46ae      	mov	lr, r5
 8008016:	46d3      	mov	fp, sl
 8008018:	f85c 3b04 	ldr.w	r3, [ip], #4
 800801c:	b298      	uxth	r0, r3
 800801e:	fb06 a000 	mla	r0, r6, r0, sl
 8008022:	0c02      	lsrs	r2, r0, #16
 8008024:	0c1b      	lsrs	r3, r3, #16
 8008026:	fb06 2303 	mla	r3, r6, r3, r2
 800802a:	f8de 2000 	ldr.w	r2, [lr]
 800802e:	b280      	uxth	r0, r0
 8008030:	b292      	uxth	r2, r2
 8008032:	1a12      	subs	r2, r2, r0
 8008034:	445a      	add	r2, fp
 8008036:	f8de 0000 	ldr.w	r0, [lr]
 800803a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800803e:	b29b      	uxth	r3, r3
 8008040:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008044:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008048:	b292      	uxth	r2, r2
 800804a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800804e:	45e1      	cmp	r9, ip
 8008050:	f84e 2b04 	str.w	r2, [lr], #4
 8008054:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008058:	d2de      	bcs.n	8008018 <quorem+0x42>
 800805a:	9b00      	ldr	r3, [sp, #0]
 800805c:	58eb      	ldr	r3, [r5, r3]
 800805e:	b92b      	cbnz	r3, 800806c <quorem+0x96>
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	3b04      	subs	r3, #4
 8008064:	429d      	cmp	r5, r3
 8008066:	461a      	mov	r2, r3
 8008068:	d32f      	bcc.n	80080ca <quorem+0xf4>
 800806a:	613c      	str	r4, [r7, #16]
 800806c:	4638      	mov	r0, r7
 800806e:	f001 f97d 	bl	800936c <__mcmp>
 8008072:	2800      	cmp	r0, #0
 8008074:	db25      	blt.n	80080c2 <quorem+0xec>
 8008076:	4629      	mov	r1, r5
 8008078:	2000      	movs	r0, #0
 800807a:	f858 2b04 	ldr.w	r2, [r8], #4
 800807e:	f8d1 c000 	ldr.w	ip, [r1]
 8008082:	fa1f fe82 	uxth.w	lr, r2
 8008086:	fa1f f38c 	uxth.w	r3, ip
 800808a:	eba3 030e 	sub.w	r3, r3, lr
 800808e:	4403      	add	r3, r0
 8008090:	0c12      	lsrs	r2, r2, #16
 8008092:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008096:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800809a:	b29b      	uxth	r3, r3
 800809c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080a0:	45c1      	cmp	r9, r8
 80080a2:	f841 3b04 	str.w	r3, [r1], #4
 80080a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080aa:	d2e6      	bcs.n	800807a <quorem+0xa4>
 80080ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080b4:	b922      	cbnz	r2, 80080c0 <quorem+0xea>
 80080b6:	3b04      	subs	r3, #4
 80080b8:	429d      	cmp	r5, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	d30b      	bcc.n	80080d6 <quorem+0x100>
 80080be:	613c      	str	r4, [r7, #16]
 80080c0:	3601      	adds	r6, #1
 80080c2:	4630      	mov	r0, r6
 80080c4:	b003      	add	sp, #12
 80080c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ca:	6812      	ldr	r2, [r2, #0]
 80080cc:	3b04      	subs	r3, #4
 80080ce:	2a00      	cmp	r2, #0
 80080d0:	d1cb      	bne.n	800806a <quorem+0x94>
 80080d2:	3c01      	subs	r4, #1
 80080d4:	e7c6      	b.n	8008064 <quorem+0x8e>
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	3b04      	subs	r3, #4
 80080da:	2a00      	cmp	r2, #0
 80080dc:	d1ef      	bne.n	80080be <quorem+0xe8>
 80080de:	3c01      	subs	r4, #1
 80080e0:	e7ea      	b.n	80080b8 <quorem+0xe2>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e7ee      	b.n	80080c4 <quorem+0xee>
	...

080080e8 <_dtoa_r>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	69c7      	ldr	r7, [r0, #28]
 80080ee:	b097      	sub	sp, #92	@ 0x5c
 80080f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80080f4:	ec55 4b10 	vmov	r4, r5, d0
 80080f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80080fa:	9107      	str	r1, [sp, #28]
 80080fc:	4681      	mov	r9, r0
 80080fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008100:	9311      	str	r3, [sp, #68]	@ 0x44
 8008102:	b97f      	cbnz	r7, 8008124 <_dtoa_r+0x3c>
 8008104:	2010      	movs	r0, #16
 8008106:	f000 fe09 	bl	8008d1c <malloc>
 800810a:	4602      	mov	r2, r0
 800810c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008110:	b920      	cbnz	r0, 800811c <_dtoa_r+0x34>
 8008112:	4ba9      	ldr	r3, [pc, #676]	@ (80083b8 <_dtoa_r+0x2d0>)
 8008114:	21ef      	movs	r1, #239	@ 0xef
 8008116:	48a9      	ldr	r0, [pc, #676]	@ (80083bc <_dtoa_r+0x2d4>)
 8008118:	f001 fc6c 	bl	80099f4 <__assert_func>
 800811c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008120:	6007      	str	r7, [r0, #0]
 8008122:	60c7      	str	r7, [r0, #12]
 8008124:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	b159      	cbz	r1, 8008144 <_dtoa_r+0x5c>
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	604a      	str	r2, [r1, #4]
 8008130:	2301      	movs	r3, #1
 8008132:	4093      	lsls	r3, r2
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	4648      	mov	r0, r9
 8008138:	f000 fee6 	bl	8008f08 <_Bfree>
 800813c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	1e2b      	subs	r3, r5, #0
 8008146:	bfb9      	ittee	lt
 8008148:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800814c:	9305      	strlt	r3, [sp, #20]
 800814e:	2300      	movge	r3, #0
 8008150:	6033      	strge	r3, [r6, #0]
 8008152:	9f05      	ldr	r7, [sp, #20]
 8008154:	4b9a      	ldr	r3, [pc, #616]	@ (80083c0 <_dtoa_r+0x2d8>)
 8008156:	bfbc      	itt	lt
 8008158:	2201      	movlt	r2, #1
 800815a:	6032      	strlt	r2, [r6, #0]
 800815c:	43bb      	bics	r3, r7
 800815e:	d112      	bne.n	8008186 <_dtoa_r+0x9e>
 8008160:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008162:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800816c:	4323      	orrs	r3, r4
 800816e:	f000 855a 	beq.w	8008c26 <_dtoa_r+0xb3e>
 8008172:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008174:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80083d4 <_dtoa_r+0x2ec>
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 855c 	beq.w	8008c36 <_dtoa_r+0xb4e>
 800817e:	f10a 0303 	add.w	r3, sl, #3
 8008182:	f000 bd56 	b.w	8008c32 <_dtoa_r+0xb4a>
 8008186:	ed9d 7b04 	vldr	d7, [sp, #16]
 800818a:	2200      	movs	r2, #0
 800818c:	ec51 0b17 	vmov	r0, r1, d7
 8008190:	2300      	movs	r3, #0
 8008192:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008196:	f7f8 fcbf 	bl	8000b18 <__aeabi_dcmpeq>
 800819a:	4680      	mov	r8, r0
 800819c:	b158      	cbz	r0, 80081b6 <_dtoa_r+0xce>
 800819e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80081a0:	2301      	movs	r3, #1
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081a6:	b113      	cbz	r3, 80081ae <_dtoa_r+0xc6>
 80081a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80081aa:	4b86      	ldr	r3, [pc, #536]	@ (80083c4 <_dtoa_r+0x2dc>)
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80083d8 <_dtoa_r+0x2f0>
 80081b2:	f000 bd40 	b.w	8008c36 <_dtoa_r+0xb4e>
 80081b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80081ba:	aa14      	add	r2, sp, #80	@ 0x50
 80081bc:	a915      	add	r1, sp, #84	@ 0x54
 80081be:	4648      	mov	r0, r9
 80081c0:	f001 f984 	bl	80094cc <__d2b>
 80081c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80081c8:	9002      	str	r0, [sp, #8]
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d078      	beq.n	80082c0 <_dtoa_r+0x1d8>
 80081ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80081d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80081e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80081e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081e8:	4619      	mov	r1, r3
 80081ea:	2200      	movs	r2, #0
 80081ec:	4b76      	ldr	r3, [pc, #472]	@ (80083c8 <_dtoa_r+0x2e0>)
 80081ee:	f7f8 f873 	bl	80002d8 <__aeabi_dsub>
 80081f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80083a0 <_dtoa_r+0x2b8>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f8 fa26 	bl	8000648 <__aeabi_dmul>
 80081fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80083a8 <_dtoa_r+0x2c0>)
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	f7f8 f86b 	bl	80002dc <__adddf3>
 8008206:	4604      	mov	r4, r0
 8008208:	4630      	mov	r0, r6
 800820a:	460d      	mov	r5, r1
 800820c:	f7f8 f9b2 	bl	8000574 <__aeabi_i2d>
 8008210:	a367      	add	r3, pc, #412	@ (adr r3, 80083b0 <_dtoa_r+0x2c8>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f8 fa17 	bl	8000648 <__aeabi_dmul>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4620      	mov	r0, r4
 8008220:	4629      	mov	r1, r5
 8008222:	f7f8 f85b 	bl	80002dc <__adddf3>
 8008226:	4604      	mov	r4, r0
 8008228:	460d      	mov	r5, r1
 800822a:	f7f8 fcbd 	bl	8000ba8 <__aeabi_d2iz>
 800822e:	2200      	movs	r2, #0
 8008230:	4607      	mov	r7, r0
 8008232:	2300      	movs	r3, #0
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 fc78 	bl	8000b2c <__aeabi_dcmplt>
 800823c:	b140      	cbz	r0, 8008250 <_dtoa_r+0x168>
 800823e:	4638      	mov	r0, r7
 8008240:	f7f8 f998 	bl	8000574 <__aeabi_i2d>
 8008244:	4622      	mov	r2, r4
 8008246:	462b      	mov	r3, r5
 8008248:	f7f8 fc66 	bl	8000b18 <__aeabi_dcmpeq>
 800824c:	b900      	cbnz	r0, 8008250 <_dtoa_r+0x168>
 800824e:	3f01      	subs	r7, #1
 8008250:	2f16      	cmp	r7, #22
 8008252:	d852      	bhi.n	80082fa <_dtoa_r+0x212>
 8008254:	4b5d      	ldr	r3, [pc, #372]	@ (80083cc <_dtoa_r+0x2e4>)
 8008256:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008262:	f7f8 fc63 	bl	8000b2c <__aeabi_dcmplt>
 8008266:	2800      	cmp	r0, #0
 8008268:	d049      	beq.n	80082fe <_dtoa_r+0x216>
 800826a:	3f01      	subs	r7, #1
 800826c:	2300      	movs	r3, #0
 800826e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008270:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008272:	1b9b      	subs	r3, r3, r6
 8008274:	1e5a      	subs	r2, r3, #1
 8008276:	bf45      	ittet	mi
 8008278:	f1c3 0301 	rsbmi	r3, r3, #1
 800827c:	9300      	strmi	r3, [sp, #0]
 800827e:	2300      	movpl	r3, #0
 8008280:	2300      	movmi	r3, #0
 8008282:	9206      	str	r2, [sp, #24]
 8008284:	bf54      	ite	pl
 8008286:	9300      	strpl	r3, [sp, #0]
 8008288:	9306      	strmi	r3, [sp, #24]
 800828a:	2f00      	cmp	r7, #0
 800828c:	db39      	blt.n	8008302 <_dtoa_r+0x21a>
 800828e:	9b06      	ldr	r3, [sp, #24]
 8008290:	970d      	str	r7, [sp, #52]	@ 0x34
 8008292:	443b      	add	r3, r7
 8008294:	9306      	str	r3, [sp, #24]
 8008296:	2300      	movs	r3, #0
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	9b07      	ldr	r3, [sp, #28]
 800829c:	2b09      	cmp	r3, #9
 800829e:	d863      	bhi.n	8008368 <_dtoa_r+0x280>
 80082a0:	2b05      	cmp	r3, #5
 80082a2:	bfc4      	itt	gt
 80082a4:	3b04      	subgt	r3, #4
 80082a6:	9307      	strgt	r3, [sp, #28]
 80082a8:	9b07      	ldr	r3, [sp, #28]
 80082aa:	f1a3 0302 	sub.w	r3, r3, #2
 80082ae:	bfcc      	ite	gt
 80082b0:	2400      	movgt	r4, #0
 80082b2:	2401      	movle	r4, #1
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d863      	bhi.n	8008380 <_dtoa_r+0x298>
 80082b8:	e8df f003 	tbb	[pc, r3]
 80082bc:	2b375452 	.word	0x2b375452
 80082c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80082c4:	441e      	add	r6, r3
 80082c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80082ca:	2b20      	cmp	r3, #32
 80082cc:	bfc1      	itttt	gt
 80082ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80082d2:	409f      	lslgt	r7, r3
 80082d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80082d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80082dc:	bfd6      	itet	le
 80082de:	f1c3 0320 	rsble	r3, r3, #32
 80082e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80082e6:	fa04 f003 	lslle.w	r0, r4, r3
 80082ea:	f7f8 f933 	bl	8000554 <__aeabi_ui2d>
 80082ee:	2201      	movs	r2, #1
 80082f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80082f4:	3e01      	subs	r6, #1
 80082f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80082f8:	e776      	b.n	80081e8 <_dtoa_r+0x100>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e7b7      	b.n	800826e <_dtoa_r+0x186>
 80082fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8008300:	e7b6      	b.n	8008270 <_dtoa_r+0x188>
 8008302:	9b00      	ldr	r3, [sp, #0]
 8008304:	1bdb      	subs	r3, r3, r7
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	427b      	negs	r3, r7
 800830a:	9308      	str	r3, [sp, #32]
 800830c:	2300      	movs	r3, #0
 800830e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008310:	e7c3      	b.n	800829a <_dtoa_r+0x1b2>
 8008312:	2301      	movs	r3, #1
 8008314:	9309      	str	r3, [sp, #36]	@ 0x24
 8008316:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008318:	eb07 0b03 	add.w	fp, r7, r3
 800831c:	f10b 0301 	add.w	r3, fp, #1
 8008320:	2b01      	cmp	r3, #1
 8008322:	9303      	str	r3, [sp, #12]
 8008324:	bfb8      	it	lt
 8008326:	2301      	movlt	r3, #1
 8008328:	e006      	b.n	8008338 <_dtoa_r+0x250>
 800832a:	2301      	movs	r3, #1
 800832c:	9309      	str	r3, [sp, #36]	@ 0x24
 800832e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008330:	2b00      	cmp	r3, #0
 8008332:	dd28      	ble.n	8008386 <_dtoa_r+0x29e>
 8008334:	469b      	mov	fp, r3
 8008336:	9303      	str	r3, [sp, #12]
 8008338:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800833c:	2100      	movs	r1, #0
 800833e:	2204      	movs	r2, #4
 8008340:	f102 0514 	add.w	r5, r2, #20
 8008344:	429d      	cmp	r5, r3
 8008346:	d926      	bls.n	8008396 <_dtoa_r+0x2ae>
 8008348:	6041      	str	r1, [r0, #4]
 800834a:	4648      	mov	r0, r9
 800834c:	f000 fd9c 	bl	8008e88 <_Balloc>
 8008350:	4682      	mov	sl, r0
 8008352:	2800      	cmp	r0, #0
 8008354:	d142      	bne.n	80083dc <_dtoa_r+0x2f4>
 8008356:	4b1e      	ldr	r3, [pc, #120]	@ (80083d0 <_dtoa_r+0x2e8>)
 8008358:	4602      	mov	r2, r0
 800835a:	f240 11af 	movw	r1, #431	@ 0x1af
 800835e:	e6da      	b.n	8008116 <_dtoa_r+0x2e>
 8008360:	2300      	movs	r3, #0
 8008362:	e7e3      	b.n	800832c <_dtoa_r+0x244>
 8008364:	2300      	movs	r3, #0
 8008366:	e7d5      	b.n	8008314 <_dtoa_r+0x22c>
 8008368:	2401      	movs	r4, #1
 800836a:	2300      	movs	r3, #0
 800836c:	9307      	str	r3, [sp, #28]
 800836e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008370:	f04f 3bff 	mov.w	fp, #4294967295
 8008374:	2200      	movs	r2, #0
 8008376:	f8cd b00c 	str.w	fp, [sp, #12]
 800837a:	2312      	movs	r3, #18
 800837c:	920c      	str	r2, [sp, #48]	@ 0x30
 800837e:	e7db      	b.n	8008338 <_dtoa_r+0x250>
 8008380:	2301      	movs	r3, #1
 8008382:	9309      	str	r3, [sp, #36]	@ 0x24
 8008384:	e7f4      	b.n	8008370 <_dtoa_r+0x288>
 8008386:	f04f 0b01 	mov.w	fp, #1
 800838a:	f8cd b00c 	str.w	fp, [sp, #12]
 800838e:	465b      	mov	r3, fp
 8008390:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008394:	e7d0      	b.n	8008338 <_dtoa_r+0x250>
 8008396:	3101      	adds	r1, #1
 8008398:	0052      	lsls	r2, r2, #1
 800839a:	e7d1      	b.n	8008340 <_dtoa_r+0x258>
 800839c:	f3af 8000 	nop.w
 80083a0:	636f4361 	.word	0x636f4361
 80083a4:	3fd287a7 	.word	0x3fd287a7
 80083a8:	8b60c8b3 	.word	0x8b60c8b3
 80083ac:	3fc68a28 	.word	0x3fc68a28
 80083b0:	509f79fb 	.word	0x509f79fb
 80083b4:	3fd34413 	.word	0x3fd34413
 80083b8:	0800b2c1 	.word	0x0800b2c1
 80083bc:	0800b2d8 	.word	0x0800b2d8
 80083c0:	7ff00000 	.word	0x7ff00000
 80083c4:	0800b291 	.word	0x0800b291
 80083c8:	3ff80000 	.word	0x3ff80000
 80083cc:	0800b428 	.word	0x0800b428
 80083d0:	0800b330 	.word	0x0800b330
 80083d4:	0800b2bd 	.word	0x0800b2bd
 80083d8:	0800b290 	.word	0x0800b290
 80083dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083e0:	6018      	str	r0, [r3, #0]
 80083e2:	9b03      	ldr	r3, [sp, #12]
 80083e4:	2b0e      	cmp	r3, #14
 80083e6:	f200 80a1 	bhi.w	800852c <_dtoa_r+0x444>
 80083ea:	2c00      	cmp	r4, #0
 80083ec:	f000 809e 	beq.w	800852c <_dtoa_r+0x444>
 80083f0:	2f00      	cmp	r7, #0
 80083f2:	dd33      	ble.n	800845c <_dtoa_r+0x374>
 80083f4:	4b9c      	ldr	r3, [pc, #624]	@ (8008668 <_dtoa_r+0x580>)
 80083f6:	f007 020f 	and.w	r2, r7, #15
 80083fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083fe:	ed93 7b00 	vldr	d7, [r3]
 8008402:	05f8      	lsls	r0, r7, #23
 8008404:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008408:	ea4f 1427 	mov.w	r4, r7, asr #4
 800840c:	d516      	bpl.n	800843c <_dtoa_r+0x354>
 800840e:	4b97      	ldr	r3, [pc, #604]	@ (800866c <_dtoa_r+0x584>)
 8008410:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008414:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008418:	f7f8 fa40 	bl	800089c <__aeabi_ddiv>
 800841c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008420:	f004 040f 	and.w	r4, r4, #15
 8008424:	2603      	movs	r6, #3
 8008426:	4d91      	ldr	r5, [pc, #580]	@ (800866c <_dtoa_r+0x584>)
 8008428:	b954      	cbnz	r4, 8008440 <_dtoa_r+0x358>
 800842a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800842e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008432:	f7f8 fa33 	bl	800089c <__aeabi_ddiv>
 8008436:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800843a:	e028      	b.n	800848e <_dtoa_r+0x3a6>
 800843c:	2602      	movs	r6, #2
 800843e:	e7f2      	b.n	8008426 <_dtoa_r+0x33e>
 8008440:	07e1      	lsls	r1, r4, #31
 8008442:	d508      	bpl.n	8008456 <_dtoa_r+0x36e>
 8008444:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008448:	e9d5 2300 	ldrd	r2, r3, [r5]
 800844c:	f7f8 f8fc 	bl	8000648 <__aeabi_dmul>
 8008450:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008454:	3601      	adds	r6, #1
 8008456:	1064      	asrs	r4, r4, #1
 8008458:	3508      	adds	r5, #8
 800845a:	e7e5      	b.n	8008428 <_dtoa_r+0x340>
 800845c:	f000 80af 	beq.w	80085be <_dtoa_r+0x4d6>
 8008460:	427c      	negs	r4, r7
 8008462:	4b81      	ldr	r3, [pc, #516]	@ (8008668 <_dtoa_r+0x580>)
 8008464:	4d81      	ldr	r5, [pc, #516]	@ (800866c <_dtoa_r+0x584>)
 8008466:	f004 020f 	and.w	r2, r4, #15
 800846a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008476:	f7f8 f8e7 	bl	8000648 <__aeabi_dmul>
 800847a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800847e:	1124      	asrs	r4, r4, #4
 8008480:	2300      	movs	r3, #0
 8008482:	2602      	movs	r6, #2
 8008484:	2c00      	cmp	r4, #0
 8008486:	f040 808f 	bne.w	80085a8 <_dtoa_r+0x4c0>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1d3      	bne.n	8008436 <_dtoa_r+0x34e>
 800848e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008490:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 8094 	beq.w	80085c2 <_dtoa_r+0x4da>
 800849a:	4b75      	ldr	r3, [pc, #468]	@ (8008670 <_dtoa_r+0x588>)
 800849c:	2200      	movs	r2, #0
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f8 fb43 	bl	8000b2c <__aeabi_dcmplt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f000 808b 	beq.w	80085c2 <_dtoa_r+0x4da>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 8087 	beq.w	80085c2 <_dtoa_r+0x4da>
 80084b4:	f1bb 0f00 	cmp.w	fp, #0
 80084b8:	dd34      	ble.n	8008524 <_dtoa_r+0x43c>
 80084ba:	4620      	mov	r0, r4
 80084bc:	4b6d      	ldr	r3, [pc, #436]	@ (8008674 <_dtoa_r+0x58c>)
 80084be:	2200      	movs	r2, #0
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f8 f8c1 	bl	8000648 <__aeabi_dmul>
 80084c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80084ce:	3601      	adds	r6, #1
 80084d0:	465c      	mov	r4, fp
 80084d2:	4630      	mov	r0, r6
 80084d4:	f7f8 f84e 	bl	8000574 <__aeabi_i2d>
 80084d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084dc:	f7f8 f8b4 	bl	8000648 <__aeabi_dmul>
 80084e0:	4b65      	ldr	r3, [pc, #404]	@ (8008678 <_dtoa_r+0x590>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	f7f7 fefa 	bl	80002dc <__adddf3>
 80084e8:	4605      	mov	r5, r0
 80084ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80084ee:	2c00      	cmp	r4, #0
 80084f0:	d16a      	bne.n	80085c8 <_dtoa_r+0x4e0>
 80084f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084f6:	4b61      	ldr	r3, [pc, #388]	@ (800867c <_dtoa_r+0x594>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	f7f7 feed 	bl	80002d8 <__aeabi_dsub>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008506:	462a      	mov	r2, r5
 8008508:	4633      	mov	r3, r6
 800850a:	f7f8 fb2d 	bl	8000b68 <__aeabi_dcmpgt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f040 8298 	bne.w	8008a44 <_dtoa_r+0x95c>
 8008514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008518:	462a      	mov	r2, r5
 800851a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800851e:	f7f8 fb05 	bl	8000b2c <__aeabi_dcmplt>
 8008522:	bb38      	cbnz	r0, 8008574 <_dtoa_r+0x48c>
 8008524:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008528:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800852c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800852e:	2b00      	cmp	r3, #0
 8008530:	f2c0 8157 	blt.w	80087e2 <_dtoa_r+0x6fa>
 8008534:	2f0e      	cmp	r7, #14
 8008536:	f300 8154 	bgt.w	80087e2 <_dtoa_r+0x6fa>
 800853a:	4b4b      	ldr	r3, [pc, #300]	@ (8008668 <_dtoa_r+0x580>)
 800853c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008540:	ed93 7b00 	vldr	d7, [r3]
 8008544:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008546:	2b00      	cmp	r3, #0
 8008548:	ed8d 7b00 	vstr	d7, [sp]
 800854c:	f280 80e5 	bge.w	800871a <_dtoa_r+0x632>
 8008550:	9b03      	ldr	r3, [sp, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f300 80e1 	bgt.w	800871a <_dtoa_r+0x632>
 8008558:	d10c      	bne.n	8008574 <_dtoa_r+0x48c>
 800855a:	4b48      	ldr	r3, [pc, #288]	@ (800867c <_dtoa_r+0x594>)
 800855c:	2200      	movs	r2, #0
 800855e:	ec51 0b17 	vmov	r0, r1, d7
 8008562:	f7f8 f871 	bl	8000648 <__aeabi_dmul>
 8008566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800856a:	f7f8 faf3 	bl	8000b54 <__aeabi_dcmpge>
 800856e:	2800      	cmp	r0, #0
 8008570:	f000 8266 	beq.w	8008a40 <_dtoa_r+0x958>
 8008574:	2400      	movs	r4, #0
 8008576:	4625      	mov	r5, r4
 8008578:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800857a:	4656      	mov	r6, sl
 800857c:	ea6f 0803 	mvn.w	r8, r3
 8008580:	2700      	movs	r7, #0
 8008582:	4621      	mov	r1, r4
 8008584:	4648      	mov	r0, r9
 8008586:	f000 fcbf 	bl	8008f08 <_Bfree>
 800858a:	2d00      	cmp	r5, #0
 800858c:	f000 80bd 	beq.w	800870a <_dtoa_r+0x622>
 8008590:	b12f      	cbz	r7, 800859e <_dtoa_r+0x4b6>
 8008592:	42af      	cmp	r7, r5
 8008594:	d003      	beq.n	800859e <_dtoa_r+0x4b6>
 8008596:	4639      	mov	r1, r7
 8008598:	4648      	mov	r0, r9
 800859a:	f000 fcb5 	bl	8008f08 <_Bfree>
 800859e:	4629      	mov	r1, r5
 80085a0:	4648      	mov	r0, r9
 80085a2:	f000 fcb1 	bl	8008f08 <_Bfree>
 80085a6:	e0b0      	b.n	800870a <_dtoa_r+0x622>
 80085a8:	07e2      	lsls	r2, r4, #31
 80085aa:	d505      	bpl.n	80085b8 <_dtoa_r+0x4d0>
 80085ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085b0:	f7f8 f84a 	bl	8000648 <__aeabi_dmul>
 80085b4:	3601      	adds	r6, #1
 80085b6:	2301      	movs	r3, #1
 80085b8:	1064      	asrs	r4, r4, #1
 80085ba:	3508      	adds	r5, #8
 80085bc:	e762      	b.n	8008484 <_dtoa_r+0x39c>
 80085be:	2602      	movs	r6, #2
 80085c0:	e765      	b.n	800848e <_dtoa_r+0x3a6>
 80085c2:	9c03      	ldr	r4, [sp, #12]
 80085c4:	46b8      	mov	r8, r7
 80085c6:	e784      	b.n	80084d2 <_dtoa_r+0x3ea>
 80085c8:	4b27      	ldr	r3, [pc, #156]	@ (8008668 <_dtoa_r+0x580>)
 80085ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085d4:	4454      	add	r4, sl
 80085d6:	2900      	cmp	r1, #0
 80085d8:	d054      	beq.n	8008684 <_dtoa_r+0x59c>
 80085da:	4929      	ldr	r1, [pc, #164]	@ (8008680 <_dtoa_r+0x598>)
 80085dc:	2000      	movs	r0, #0
 80085de:	f7f8 f95d 	bl	800089c <__aeabi_ddiv>
 80085e2:	4633      	mov	r3, r6
 80085e4:	462a      	mov	r2, r5
 80085e6:	f7f7 fe77 	bl	80002d8 <__aeabi_dsub>
 80085ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085ee:	4656      	mov	r6, sl
 80085f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085f4:	f7f8 fad8 	bl	8000ba8 <__aeabi_d2iz>
 80085f8:	4605      	mov	r5, r0
 80085fa:	f7f7 ffbb 	bl	8000574 <__aeabi_i2d>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008606:	f7f7 fe67 	bl	80002d8 <__aeabi_dsub>
 800860a:	3530      	adds	r5, #48	@ 0x30
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008614:	f806 5b01 	strb.w	r5, [r6], #1
 8008618:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800861c:	f7f8 fa86 	bl	8000b2c <__aeabi_dcmplt>
 8008620:	2800      	cmp	r0, #0
 8008622:	d172      	bne.n	800870a <_dtoa_r+0x622>
 8008624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008628:	4911      	ldr	r1, [pc, #68]	@ (8008670 <_dtoa_r+0x588>)
 800862a:	2000      	movs	r0, #0
 800862c:	f7f7 fe54 	bl	80002d8 <__aeabi_dsub>
 8008630:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008634:	f7f8 fa7a 	bl	8000b2c <__aeabi_dcmplt>
 8008638:	2800      	cmp	r0, #0
 800863a:	f040 80b4 	bne.w	80087a6 <_dtoa_r+0x6be>
 800863e:	42a6      	cmp	r6, r4
 8008640:	f43f af70 	beq.w	8008524 <_dtoa_r+0x43c>
 8008644:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008648:	4b0a      	ldr	r3, [pc, #40]	@ (8008674 <_dtoa_r+0x58c>)
 800864a:	2200      	movs	r2, #0
 800864c:	f7f7 fffc 	bl	8000648 <__aeabi_dmul>
 8008650:	4b08      	ldr	r3, [pc, #32]	@ (8008674 <_dtoa_r+0x58c>)
 8008652:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008656:	2200      	movs	r2, #0
 8008658:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800865c:	f7f7 fff4 	bl	8000648 <__aeabi_dmul>
 8008660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008664:	e7c4      	b.n	80085f0 <_dtoa_r+0x508>
 8008666:	bf00      	nop
 8008668:	0800b428 	.word	0x0800b428
 800866c:	0800b400 	.word	0x0800b400
 8008670:	3ff00000 	.word	0x3ff00000
 8008674:	40240000 	.word	0x40240000
 8008678:	401c0000 	.word	0x401c0000
 800867c:	40140000 	.word	0x40140000
 8008680:	3fe00000 	.word	0x3fe00000
 8008684:	4631      	mov	r1, r6
 8008686:	4628      	mov	r0, r5
 8008688:	f7f7 ffde 	bl	8000648 <__aeabi_dmul>
 800868c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008690:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008692:	4656      	mov	r6, sl
 8008694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008698:	f7f8 fa86 	bl	8000ba8 <__aeabi_d2iz>
 800869c:	4605      	mov	r5, r0
 800869e:	f7f7 ff69 	bl	8000574 <__aeabi_i2d>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086aa:	f7f7 fe15 	bl	80002d8 <__aeabi_dsub>
 80086ae:	3530      	adds	r5, #48	@ 0x30
 80086b0:	f806 5b01 	strb.w	r5, [r6], #1
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	d124      	bne.n	800870e <_dtoa_r+0x626>
 80086c4:	4baf      	ldr	r3, [pc, #700]	@ (8008984 <_dtoa_r+0x89c>)
 80086c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086ca:	f7f7 fe07 	bl	80002dc <__adddf3>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086d6:	f7f8 fa47 	bl	8000b68 <__aeabi_dcmpgt>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d163      	bne.n	80087a6 <_dtoa_r+0x6be>
 80086de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086e2:	49a8      	ldr	r1, [pc, #672]	@ (8008984 <_dtoa_r+0x89c>)
 80086e4:	2000      	movs	r0, #0
 80086e6:	f7f7 fdf7 	bl	80002d8 <__aeabi_dsub>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086f2:	f7f8 fa1b 	bl	8000b2c <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	f43f af14 	beq.w	8008524 <_dtoa_r+0x43c>
 80086fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80086fe:	1e73      	subs	r3, r6, #1
 8008700:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008702:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008706:	2b30      	cmp	r3, #48	@ 0x30
 8008708:	d0f8      	beq.n	80086fc <_dtoa_r+0x614>
 800870a:	4647      	mov	r7, r8
 800870c:	e03b      	b.n	8008786 <_dtoa_r+0x69e>
 800870e:	4b9e      	ldr	r3, [pc, #632]	@ (8008988 <_dtoa_r+0x8a0>)
 8008710:	f7f7 ff9a 	bl	8000648 <__aeabi_dmul>
 8008714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008718:	e7bc      	b.n	8008694 <_dtoa_r+0x5ac>
 800871a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800871e:	4656      	mov	r6, sl
 8008720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008724:	4620      	mov	r0, r4
 8008726:	4629      	mov	r1, r5
 8008728:	f7f8 f8b8 	bl	800089c <__aeabi_ddiv>
 800872c:	f7f8 fa3c 	bl	8000ba8 <__aeabi_d2iz>
 8008730:	4680      	mov	r8, r0
 8008732:	f7f7 ff1f 	bl	8000574 <__aeabi_i2d>
 8008736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800873a:	f7f7 ff85 	bl	8000648 <__aeabi_dmul>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	4620      	mov	r0, r4
 8008744:	4629      	mov	r1, r5
 8008746:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800874a:	f7f7 fdc5 	bl	80002d8 <__aeabi_dsub>
 800874e:	f806 4b01 	strb.w	r4, [r6], #1
 8008752:	9d03      	ldr	r5, [sp, #12]
 8008754:	eba6 040a 	sub.w	r4, r6, sl
 8008758:	42a5      	cmp	r5, r4
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	d133      	bne.n	80087c8 <_dtoa_r+0x6e0>
 8008760:	f7f7 fdbc 	bl	80002dc <__adddf3>
 8008764:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008768:	4604      	mov	r4, r0
 800876a:	460d      	mov	r5, r1
 800876c:	f7f8 f9fc 	bl	8000b68 <__aeabi_dcmpgt>
 8008770:	b9c0      	cbnz	r0, 80087a4 <_dtoa_r+0x6bc>
 8008772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008776:	4620      	mov	r0, r4
 8008778:	4629      	mov	r1, r5
 800877a:	f7f8 f9cd 	bl	8000b18 <__aeabi_dcmpeq>
 800877e:	b110      	cbz	r0, 8008786 <_dtoa_r+0x69e>
 8008780:	f018 0f01 	tst.w	r8, #1
 8008784:	d10e      	bne.n	80087a4 <_dtoa_r+0x6bc>
 8008786:	9902      	ldr	r1, [sp, #8]
 8008788:	4648      	mov	r0, r9
 800878a:	f000 fbbd 	bl	8008f08 <_Bfree>
 800878e:	2300      	movs	r3, #0
 8008790:	7033      	strb	r3, [r6, #0]
 8008792:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008794:	3701      	adds	r7, #1
 8008796:	601f      	str	r7, [r3, #0]
 8008798:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 824b 	beq.w	8008c36 <_dtoa_r+0xb4e>
 80087a0:	601e      	str	r6, [r3, #0]
 80087a2:	e248      	b.n	8008c36 <_dtoa_r+0xb4e>
 80087a4:	46b8      	mov	r8, r7
 80087a6:	4633      	mov	r3, r6
 80087a8:	461e      	mov	r6, r3
 80087aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ae:	2a39      	cmp	r2, #57	@ 0x39
 80087b0:	d106      	bne.n	80087c0 <_dtoa_r+0x6d8>
 80087b2:	459a      	cmp	sl, r3
 80087b4:	d1f8      	bne.n	80087a8 <_dtoa_r+0x6c0>
 80087b6:	2230      	movs	r2, #48	@ 0x30
 80087b8:	f108 0801 	add.w	r8, r8, #1
 80087bc:	f88a 2000 	strb.w	r2, [sl]
 80087c0:	781a      	ldrb	r2, [r3, #0]
 80087c2:	3201      	adds	r2, #1
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	e7a0      	b.n	800870a <_dtoa_r+0x622>
 80087c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008988 <_dtoa_r+0x8a0>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	f7f7 ff3c 	bl	8000648 <__aeabi_dmul>
 80087d0:	2200      	movs	r2, #0
 80087d2:	2300      	movs	r3, #0
 80087d4:	4604      	mov	r4, r0
 80087d6:	460d      	mov	r5, r1
 80087d8:	f7f8 f99e 	bl	8000b18 <__aeabi_dcmpeq>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d09f      	beq.n	8008720 <_dtoa_r+0x638>
 80087e0:	e7d1      	b.n	8008786 <_dtoa_r+0x69e>
 80087e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087e4:	2a00      	cmp	r2, #0
 80087e6:	f000 80ea 	beq.w	80089be <_dtoa_r+0x8d6>
 80087ea:	9a07      	ldr	r2, [sp, #28]
 80087ec:	2a01      	cmp	r2, #1
 80087ee:	f300 80cd 	bgt.w	800898c <_dtoa_r+0x8a4>
 80087f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	f000 80c1 	beq.w	800897c <_dtoa_r+0x894>
 80087fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80087fe:	9c08      	ldr	r4, [sp, #32]
 8008800:	9e00      	ldr	r6, [sp, #0]
 8008802:	9a00      	ldr	r2, [sp, #0]
 8008804:	441a      	add	r2, r3
 8008806:	9200      	str	r2, [sp, #0]
 8008808:	9a06      	ldr	r2, [sp, #24]
 800880a:	2101      	movs	r1, #1
 800880c:	441a      	add	r2, r3
 800880e:	4648      	mov	r0, r9
 8008810:	9206      	str	r2, [sp, #24]
 8008812:	f000 fc2d 	bl	8009070 <__i2b>
 8008816:	4605      	mov	r5, r0
 8008818:	b166      	cbz	r6, 8008834 <_dtoa_r+0x74c>
 800881a:	9b06      	ldr	r3, [sp, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd09      	ble.n	8008834 <_dtoa_r+0x74c>
 8008820:	42b3      	cmp	r3, r6
 8008822:	9a00      	ldr	r2, [sp, #0]
 8008824:	bfa8      	it	ge
 8008826:	4633      	movge	r3, r6
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	9200      	str	r2, [sp, #0]
 800882c:	9a06      	ldr	r2, [sp, #24]
 800882e:	1af6      	subs	r6, r6, r3
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	9306      	str	r3, [sp, #24]
 8008834:	9b08      	ldr	r3, [sp, #32]
 8008836:	b30b      	cbz	r3, 800887c <_dtoa_r+0x794>
 8008838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80c6 	beq.w	80089cc <_dtoa_r+0x8e4>
 8008840:	2c00      	cmp	r4, #0
 8008842:	f000 80c0 	beq.w	80089c6 <_dtoa_r+0x8de>
 8008846:	4629      	mov	r1, r5
 8008848:	4622      	mov	r2, r4
 800884a:	4648      	mov	r0, r9
 800884c:	f000 fcc8 	bl	80091e0 <__pow5mult>
 8008850:	9a02      	ldr	r2, [sp, #8]
 8008852:	4601      	mov	r1, r0
 8008854:	4605      	mov	r5, r0
 8008856:	4648      	mov	r0, r9
 8008858:	f000 fc20 	bl	800909c <__multiply>
 800885c:	9902      	ldr	r1, [sp, #8]
 800885e:	4680      	mov	r8, r0
 8008860:	4648      	mov	r0, r9
 8008862:	f000 fb51 	bl	8008f08 <_Bfree>
 8008866:	9b08      	ldr	r3, [sp, #32]
 8008868:	1b1b      	subs	r3, r3, r4
 800886a:	9308      	str	r3, [sp, #32]
 800886c:	f000 80b1 	beq.w	80089d2 <_dtoa_r+0x8ea>
 8008870:	9a08      	ldr	r2, [sp, #32]
 8008872:	4641      	mov	r1, r8
 8008874:	4648      	mov	r0, r9
 8008876:	f000 fcb3 	bl	80091e0 <__pow5mult>
 800887a:	9002      	str	r0, [sp, #8]
 800887c:	2101      	movs	r1, #1
 800887e:	4648      	mov	r0, r9
 8008880:	f000 fbf6 	bl	8009070 <__i2b>
 8008884:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008886:	4604      	mov	r4, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 81d8 	beq.w	8008c3e <_dtoa_r+0xb56>
 800888e:	461a      	mov	r2, r3
 8008890:	4601      	mov	r1, r0
 8008892:	4648      	mov	r0, r9
 8008894:	f000 fca4 	bl	80091e0 <__pow5mult>
 8008898:	9b07      	ldr	r3, [sp, #28]
 800889a:	2b01      	cmp	r3, #1
 800889c:	4604      	mov	r4, r0
 800889e:	f300 809f 	bgt.w	80089e0 <_dtoa_r+0x8f8>
 80088a2:	9b04      	ldr	r3, [sp, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f040 8097 	bne.w	80089d8 <_dtoa_r+0x8f0>
 80088aa:	9b05      	ldr	r3, [sp, #20]
 80088ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f040 8093 	bne.w	80089dc <_dtoa_r+0x8f4>
 80088b6:	9b05      	ldr	r3, [sp, #20]
 80088b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088bc:	0d1b      	lsrs	r3, r3, #20
 80088be:	051b      	lsls	r3, r3, #20
 80088c0:	b133      	cbz	r3, 80088d0 <_dtoa_r+0x7e8>
 80088c2:	9b00      	ldr	r3, [sp, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	9b06      	ldr	r3, [sp, #24]
 80088ca:	3301      	adds	r3, #1
 80088cc:	9306      	str	r3, [sp, #24]
 80088ce:	2301      	movs	r3, #1
 80088d0:	9308      	str	r3, [sp, #32]
 80088d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 81b8 	beq.w	8008c4a <_dtoa_r+0xb62>
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088e0:	6918      	ldr	r0, [r3, #16]
 80088e2:	f000 fb79 	bl	8008fd8 <__hi0bits>
 80088e6:	f1c0 0020 	rsb	r0, r0, #32
 80088ea:	9b06      	ldr	r3, [sp, #24]
 80088ec:	4418      	add	r0, r3
 80088ee:	f010 001f 	ands.w	r0, r0, #31
 80088f2:	f000 8082 	beq.w	80089fa <_dtoa_r+0x912>
 80088f6:	f1c0 0320 	rsb	r3, r0, #32
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	dd73      	ble.n	80089e6 <_dtoa_r+0x8fe>
 80088fe:	9b00      	ldr	r3, [sp, #0]
 8008900:	f1c0 001c 	rsb	r0, r0, #28
 8008904:	4403      	add	r3, r0
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	9b06      	ldr	r3, [sp, #24]
 800890a:	4403      	add	r3, r0
 800890c:	4406      	add	r6, r0
 800890e:	9306      	str	r3, [sp, #24]
 8008910:	9b00      	ldr	r3, [sp, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd05      	ble.n	8008922 <_dtoa_r+0x83a>
 8008916:	9902      	ldr	r1, [sp, #8]
 8008918:	461a      	mov	r2, r3
 800891a:	4648      	mov	r0, r9
 800891c:	f000 fcba 	bl	8009294 <__lshift>
 8008920:	9002      	str	r0, [sp, #8]
 8008922:	9b06      	ldr	r3, [sp, #24]
 8008924:	2b00      	cmp	r3, #0
 8008926:	dd05      	ble.n	8008934 <_dtoa_r+0x84c>
 8008928:	4621      	mov	r1, r4
 800892a:	461a      	mov	r2, r3
 800892c:	4648      	mov	r0, r9
 800892e:	f000 fcb1 	bl	8009294 <__lshift>
 8008932:	4604      	mov	r4, r0
 8008934:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	d061      	beq.n	80089fe <_dtoa_r+0x916>
 800893a:	9802      	ldr	r0, [sp, #8]
 800893c:	4621      	mov	r1, r4
 800893e:	f000 fd15 	bl	800936c <__mcmp>
 8008942:	2800      	cmp	r0, #0
 8008944:	da5b      	bge.n	80089fe <_dtoa_r+0x916>
 8008946:	2300      	movs	r3, #0
 8008948:	9902      	ldr	r1, [sp, #8]
 800894a:	220a      	movs	r2, #10
 800894c:	4648      	mov	r0, r9
 800894e:	f000 fafd 	bl	8008f4c <__multadd>
 8008952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008954:	9002      	str	r0, [sp, #8]
 8008956:	f107 38ff 	add.w	r8, r7, #4294967295
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8177 	beq.w	8008c4e <_dtoa_r+0xb66>
 8008960:	4629      	mov	r1, r5
 8008962:	2300      	movs	r3, #0
 8008964:	220a      	movs	r2, #10
 8008966:	4648      	mov	r0, r9
 8008968:	f000 faf0 	bl	8008f4c <__multadd>
 800896c:	f1bb 0f00 	cmp.w	fp, #0
 8008970:	4605      	mov	r5, r0
 8008972:	dc6f      	bgt.n	8008a54 <_dtoa_r+0x96c>
 8008974:	9b07      	ldr	r3, [sp, #28]
 8008976:	2b02      	cmp	r3, #2
 8008978:	dc49      	bgt.n	8008a0e <_dtoa_r+0x926>
 800897a:	e06b      	b.n	8008a54 <_dtoa_r+0x96c>
 800897c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800897e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008982:	e73c      	b.n	80087fe <_dtoa_r+0x716>
 8008984:	3fe00000 	.word	0x3fe00000
 8008988:	40240000 	.word	0x40240000
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	1e5c      	subs	r4, r3, #1
 8008990:	9b08      	ldr	r3, [sp, #32]
 8008992:	42a3      	cmp	r3, r4
 8008994:	db09      	blt.n	80089aa <_dtoa_r+0x8c2>
 8008996:	1b1c      	subs	r4, r3, r4
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f6bf af30 	bge.w	8008800 <_dtoa_r+0x718>
 80089a0:	9b00      	ldr	r3, [sp, #0]
 80089a2:	9a03      	ldr	r2, [sp, #12]
 80089a4:	1a9e      	subs	r6, r3, r2
 80089a6:	2300      	movs	r3, #0
 80089a8:	e72b      	b.n	8008802 <_dtoa_r+0x71a>
 80089aa:	9b08      	ldr	r3, [sp, #32]
 80089ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089ae:	9408      	str	r4, [sp, #32]
 80089b0:	1ae3      	subs	r3, r4, r3
 80089b2:	441a      	add	r2, r3
 80089b4:	9e00      	ldr	r6, [sp, #0]
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80089ba:	2400      	movs	r4, #0
 80089bc:	e721      	b.n	8008802 <_dtoa_r+0x71a>
 80089be:	9c08      	ldr	r4, [sp, #32]
 80089c0:	9e00      	ldr	r6, [sp, #0]
 80089c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80089c4:	e728      	b.n	8008818 <_dtoa_r+0x730>
 80089c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80089ca:	e751      	b.n	8008870 <_dtoa_r+0x788>
 80089cc:	9a08      	ldr	r2, [sp, #32]
 80089ce:	9902      	ldr	r1, [sp, #8]
 80089d0:	e750      	b.n	8008874 <_dtoa_r+0x78c>
 80089d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80089d6:	e751      	b.n	800887c <_dtoa_r+0x794>
 80089d8:	2300      	movs	r3, #0
 80089da:	e779      	b.n	80088d0 <_dtoa_r+0x7e8>
 80089dc:	9b04      	ldr	r3, [sp, #16]
 80089de:	e777      	b.n	80088d0 <_dtoa_r+0x7e8>
 80089e0:	2300      	movs	r3, #0
 80089e2:	9308      	str	r3, [sp, #32]
 80089e4:	e779      	b.n	80088da <_dtoa_r+0x7f2>
 80089e6:	d093      	beq.n	8008910 <_dtoa_r+0x828>
 80089e8:	9a00      	ldr	r2, [sp, #0]
 80089ea:	331c      	adds	r3, #28
 80089ec:	441a      	add	r2, r3
 80089ee:	9200      	str	r2, [sp, #0]
 80089f0:	9a06      	ldr	r2, [sp, #24]
 80089f2:	441a      	add	r2, r3
 80089f4:	441e      	add	r6, r3
 80089f6:	9206      	str	r2, [sp, #24]
 80089f8:	e78a      	b.n	8008910 <_dtoa_r+0x828>
 80089fa:	4603      	mov	r3, r0
 80089fc:	e7f4      	b.n	80089e8 <_dtoa_r+0x900>
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	46b8      	mov	r8, r7
 8008a04:	dc20      	bgt.n	8008a48 <_dtoa_r+0x960>
 8008a06:	469b      	mov	fp, r3
 8008a08:	9b07      	ldr	r3, [sp, #28]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	dd1e      	ble.n	8008a4c <_dtoa_r+0x964>
 8008a0e:	f1bb 0f00 	cmp.w	fp, #0
 8008a12:	f47f adb1 	bne.w	8008578 <_dtoa_r+0x490>
 8008a16:	4621      	mov	r1, r4
 8008a18:	465b      	mov	r3, fp
 8008a1a:	2205      	movs	r2, #5
 8008a1c:	4648      	mov	r0, r9
 8008a1e:	f000 fa95 	bl	8008f4c <__multadd>
 8008a22:	4601      	mov	r1, r0
 8008a24:	4604      	mov	r4, r0
 8008a26:	9802      	ldr	r0, [sp, #8]
 8008a28:	f000 fca0 	bl	800936c <__mcmp>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	f77f ada3 	ble.w	8008578 <_dtoa_r+0x490>
 8008a32:	4656      	mov	r6, sl
 8008a34:	2331      	movs	r3, #49	@ 0x31
 8008a36:	f806 3b01 	strb.w	r3, [r6], #1
 8008a3a:	f108 0801 	add.w	r8, r8, #1
 8008a3e:	e59f      	b.n	8008580 <_dtoa_r+0x498>
 8008a40:	9c03      	ldr	r4, [sp, #12]
 8008a42:	46b8      	mov	r8, r7
 8008a44:	4625      	mov	r5, r4
 8008a46:	e7f4      	b.n	8008a32 <_dtoa_r+0x94a>
 8008a48:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 8101 	beq.w	8008c56 <_dtoa_r+0xb6e>
 8008a54:	2e00      	cmp	r6, #0
 8008a56:	dd05      	ble.n	8008a64 <_dtoa_r+0x97c>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4632      	mov	r2, r6
 8008a5c:	4648      	mov	r0, r9
 8008a5e:	f000 fc19 	bl	8009294 <__lshift>
 8008a62:	4605      	mov	r5, r0
 8008a64:	9b08      	ldr	r3, [sp, #32]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d05c      	beq.n	8008b24 <_dtoa_r+0xa3c>
 8008a6a:	6869      	ldr	r1, [r5, #4]
 8008a6c:	4648      	mov	r0, r9
 8008a6e:	f000 fa0b 	bl	8008e88 <_Balloc>
 8008a72:	4606      	mov	r6, r0
 8008a74:	b928      	cbnz	r0, 8008a82 <_dtoa_r+0x99a>
 8008a76:	4b82      	ldr	r3, [pc, #520]	@ (8008c80 <_dtoa_r+0xb98>)
 8008a78:	4602      	mov	r2, r0
 8008a7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a7e:	f7ff bb4a 	b.w	8008116 <_dtoa_r+0x2e>
 8008a82:	692a      	ldr	r2, [r5, #16]
 8008a84:	3202      	adds	r2, #2
 8008a86:	0092      	lsls	r2, r2, #2
 8008a88:	f105 010c 	add.w	r1, r5, #12
 8008a8c:	300c      	adds	r0, #12
 8008a8e:	f000 ffa3 	bl	80099d8 <memcpy>
 8008a92:	2201      	movs	r2, #1
 8008a94:	4631      	mov	r1, r6
 8008a96:	4648      	mov	r0, r9
 8008a98:	f000 fbfc 	bl	8009294 <__lshift>
 8008a9c:	f10a 0301 	add.w	r3, sl, #1
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	eb0a 030b 	add.w	r3, sl, fp
 8008aa6:	9308      	str	r3, [sp, #32]
 8008aa8:	9b04      	ldr	r3, [sp, #16]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	462f      	mov	r7, r5
 8008ab0:	9306      	str	r3, [sp, #24]
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	9b00      	ldr	r3, [sp, #0]
 8008ab6:	9802      	ldr	r0, [sp, #8]
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f103 3bff 	add.w	fp, r3, #4294967295
 8008abe:	f7ff fa8a 	bl	8007fd6 <quorem>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	3330      	adds	r3, #48	@ 0x30
 8008ac6:	9003      	str	r0, [sp, #12]
 8008ac8:	4639      	mov	r1, r7
 8008aca:	9802      	ldr	r0, [sp, #8]
 8008acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ace:	f000 fc4d 	bl	800936c <__mcmp>
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	9004      	str	r0, [sp, #16]
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4648      	mov	r0, r9
 8008ada:	f000 fc63 	bl	80093a4 <__mdiff>
 8008ade:	68c2      	ldr	r2, [r0, #12]
 8008ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	bb02      	cbnz	r2, 8008b28 <_dtoa_r+0xa40>
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	9802      	ldr	r0, [sp, #8]
 8008aea:	f000 fc3f 	bl	800936c <__mcmp>
 8008aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af0:	4602      	mov	r2, r0
 8008af2:	4631      	mov	r1, r6
 8008af4:	4648      	mov	r0, r9
 8008af6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008afa:	f000 fa05 	bl	8008f08 <_Bfree>
 8008afe:	9b07      	ldr	r3, [sp, #28]
 8008b00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b02:	9e00      	ldr	r6, [sp, #0]
 8008b04:	ea42 0103 	orr.w	r1, r2, r3
 8008b08:	9b06      	ldr	r3, [sp, #24]
 8008b0a:	4319      	orrs	r1, r3
 8008b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0e:	d10d      	bne.n	8008b2c <_dtoa_r+0xa44>
 8008b10:	2b39      	cmp	r3, #57	@ 0x39
 8008b12:	d027      	beq.n	8008b64 <_dtoa_r+0xa7c>
 8008b14:	9a04      	ldr	r2, [sp, #16]
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	dd01      	ble.n	8008b1e <_dtoa_r+0xa36>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	3331      	adds	r3, #49	@ 0x31
 8008b1e:	f88b 3000 	strb.w	r3, [fp]
 8008b22:	e52e      	b.n	8008582 <_dtoa_r+0x49a>
 8008b24:	4628      	mov	r0, r5
 8008b26:	e7b9      	b.n	8008a9c <_dtoa_r+0x9b4>
 8008b28:	2201      	movs	r2, #1
 8008b2a:	e7e2      	b.n	8008af2 <_dtoa_r+0xa0a>
 8008b2c:	9904      	ldr	r1, [sp, #16]
 8008b2e:	2900      	cmp	r1, #0
 8008b30:	db04      	blt.n	8008b3c <_dtoa_r+0xa54>
 8008b32:	9807      	ldr	r0, [sp, #28]
 8008b34:	4301      	orrs	r1, r0
 8008b36:	9806      	ldr	r0, [sp, #24]
 8008b38:	4301      	orrs	r1, r0
 8008b3a:	d120      	bne.n	8008b7e <_dtoa_r+0xa96>
 8008b3c:	2a00      	cmp	r2, #0
 8008b3e:	ddee      	ble.n	8008b1e <_dtoa_r+0xa36>
 8008b40:	9902      	ldr	r1, [sp, #8]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	2201      	movs	r2, #1
 8008b46:	4648      	mov	r0, r9
 8008b48:	f000 fba4 	bl	8009294 <__lshift>
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	9002      	str	r0, [sp, #8]
 8008b50:	f000 fc0c 	bl	800936c <__mcmp>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	9b00      	ldr	r3, [sp, #0]
 8008b58:	dc02      	bgt.n	8008b60 <_dtoa_r+0xa78>
 8008b5a:	d1e0      	bne.n	8008b1e <_dtoa_r+0xa36>
 8008b5c:	07da      	lsls	r2, r3, #31
 8008b5e:	d5de      	bpl.n	8008b1e <_dtoa_r+0xa36>
 8008b60:	2b39      	cmp	r3, #57	@ 0x39
 8008b62:	d1da      	bne.n	8008b1a <_dtoa_r+0xa32>
 8008b64:	2339      	movs	r3, #57	@ 0x39
 8008b66:	f88b 3000 	strb.w	r3, [fp]
 8008b6a:	4633      	mov	r3, r6
 8008b6c:	461e      	mov	r6, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b74:	2a39      	cmp	r2, #57	@ 0x39
 8008b76:	d04e      	beq.n	8008c16 <_dtoa_r+0xb2e>
 8008b78:	3201      	adds	r2, #1
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	e501      	b.n	8008582 <_dtoa_r+0x49a>
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	dd03      	ble.n	8008b8a <_dtoa_r+0xaa2>
 8008b82:	2b39      	cmp	r3, #57	@ 0x39
 8008b84:	d0ee      	beq.n	8008b64 <_dtoa_r+0xa7c>
 8008b86:	3301      	adds	r3, #1
 8008b88:	e7c9      	b.n	8008b1e <_dtoa_r+0xa36>
 8008b8a:	9a00      	ldr	r2, [sp, #0]
 8008b8c:	9908      	ldr	r1, [sp, #32]
 8008b8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b92:	428a      	cmp	r2, r1
 8008b94:	d028      	beq.n	8008be8 <_dtoa_r+0xb00>
 8008b96:	9902      	ldr	r1, [sp, #8]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	220a      	movs	r2, #10
 8008b9c:	4648      	mov	r0, r9
 8008b9e:	f000 f9d5 	bl	8008f4c <__multadd>
 8008ba2:	42af      	cmp	r7, r5
 8008ba4:	9002      	str	r0, [sp, #8]
 8008ba6:	f04f 0300 	mov.w	r3, #0
 8008baa:	f04f 020a 	mov.w	r2, #10
 8008bae:	4639      	mov	r1, r7
 8008bb0:	4648      	mov	r0, r9
 8008bb2:	d107      	bne.n	8008bc4 <_dtoa_r+0xadc>
 8008bb4:	f000 f9ca 	bl	8008f4c <__multadd>
 8008bb8:	4607      	mov	r7, r0
 8008bba:	4605      	mov	r5, r0
 8008bbc:	9b00      	ldr	r3, [sp, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	e777      	b.n	8008ab4 <_dtoa_r+0x9cc>
 8008bc4:	f000 f9c2 	bl	8008f4c <__multadd>
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4607      	mov	r7, r0
 8008bcc:	2300      	movs	r3, #0
 8008bce:	220a      	movs	r2, #10
 8008bd0:	4648      	mov	r0, r9
 8008bd2:	f000 f9bb 	bl	8008f4c <__multadd>
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	e7f0      	b.n	8008bbc <_dtoa_r+0xad4>
 8008bda:	f1bb 0f00 	cmp.w	fp, #0
 8008bde:	bfcc      	ite	gt
 8008be0:	465e      	movgt	r6, fp
 8008be2:	2601      	movle	r6, #1
 8008be4:	4456      	add	r6, sl
 8008be6:	2700      	movs	r7, #0
 8008be8:	9902      	ldr	r1, [sp, #8]
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	2201      	movs	r2, #1
 8008bee:	4648      	mov	r0, r9
 8008bf0:	f000 fb50 	bl	8009294 <__lshift>
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	9002      	str	r0, [sp, #8]
 8008bf8:	f000 fbb8 	bl	800936c <__mcmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	dcb4      	bgt.n	8008b6a <_dtoa_r+0xa82>
 8008c00:	d102      	bne.n	8008c08 <_dtoa_r+0xb20>
 8008c02:	9b00      	ldr	r3, [sp, #0]
 8008c04:	07db      	lsls	r3, r3, #31
 8008c06:	d4b0      	bmi.n	8008b6a <_dtoa_r+0xa82>
 8008c08:	4633      	mov	r3, r6
 8008c0a:	461e      	mov	r6, r3
 8008c0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c10:	2a30      	cmp	r2, #48	@ 0x30
 8008c12:	d0fa      	beq.n	8008c0a <_dtoa_r+0xb22>
 8008c14:	e4b5      	b.n	8008582 <_dtoa_r+0x49a>
 8008c16:	459a      	cmp	sl, r3
 8008c18:	d1a8      	bne.n	8008b6c <_dtoa_r+0xa84>
 8008c1a:	2331      	movs	r3, #49	@ 0x31
 8008c1c:	f108 0801 	add.w	r8, r8, #1
 8008c20:	f88a 3000 	strb.w	r3, [sl]
 8008c24:	e4ad      	b.n	8008582 <_dtoa_r+0x49a>
 8008c26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008c84 <_dtoa_r+0xb9c>
 8008c2c:	b11b      	cbz	r3, 8008c36 <_dtoa_r+0xb4e>
 8008c2e:	f10a 0308 	add.w	r3, sl, #8
 8008c32:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	4650      	mov	r0, sl
 8008c38:	b017      	add	sp, #92	@ 0x5c
 8008c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3e:	9b07      	ldr	r3, [sp, #28]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	f77f ae2e 	ble.w	80088a2 <_dtoa_r+0x7ba>
 8008c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c48:	9308      	str	r3, [sp, #32]
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	e64d      	b.n	80088ea <_dtoa_r+0x802>
 8008c4e:	f1bb 0f00 	cmp.w	fp, #0
 8008c52:	f77f aed9 	ble.w	8008a08 <_dtoa_r+0x920>
 8008c56:	4656      	mov	r6, sl
 8008c58:	9802      	ldr	r0, [sp, #8]
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	f7ff f9bb 	bl	8007fd6 <quorem>
 8008c60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008c64:	f806 3b01 	strb.w	r3, [r6], #1
 8008c68:	eba6 020a 	sub.w	r2, r6, sl
 8008c6c:	4593      	cmp	fp, r2
 8008c6e:	ddb4      	ble.n	8008bda <_dtoa_r+0xaf2>
 8008c70:	9902      	ldr	r1, [sp, #8]
 8008c72:	2300      	movs	r3, #0
 8008c74:	220a      	movs	r2, #10
 8008c76:	4648      	mov	r0, r9
 8008c78:	f000 f968 	bl	8008f4c <__multadd>
 8008c7c:	9002      	str	r0, [sp, #8]
 8008c7e:	e7eb      	b.n	8008c58 <_dtoa_r+0xb70>
 8008c80:	0800b330 	.word	0x0800b330
 8008c84:	0800b2b4 	.word	0x0800b2b4

08008c88 <_free_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	d041      	beq.n	8008d14 <_free_r+0x8c>
 8008c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c94:	1f0c      	subs	r4, r1, #4
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bfb8      	it	lt
 8008c9a:	18e4      	addlt	r4, r4, r3
 8008c9c:	f000 f8e8 	bl	8008e70 <__malloc_lock>
 8008ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d18 <_free_r+0x90>)
 8008ca2:	6813      	ldr	r3, [r2, #0]
 8008ca4:	b933      	cbnz	r3, 8008cb4 <_free_r+0x2c>
 8008ca6:	6063      	str	r3, [r4, #4]
 8008ca8:	6014      	str	r4, [r2, #0]
 8008caa:	4628      	mov	r0, r5
 8008cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb0:	f000 b8e4 	b.w	8008e7c <__malloc_unlock>
 8008cb4:	42a3      	cmp	r3, r4
 8008cb6:	d908      	bls.n	8008cca <_free_r+0x42>
 8008cb8:	6820      	ldr	r0, [r4, #0]
 8008cba:	1821      	adds	r1, r4, r0
 8008cbc:	428b      	cmp	r3, r1
 8008cbe:	bf01      	itttt	eq
 8008cc0:	6819      	ldreq	r1, [r3, #0]
 8008cc2:	685b      	ldreq	r3, [r3, #4]
 8008cc4:	1809      	addeq	r1, r1, r0
 8008cc6:	6021      	streq	r1, [r4, #0]
 8008cc8:	e7ed      	b.n	8008ca6 <_free_r+0x1e>
 8008cca:	461a      	mov	r2, r3
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	b10b      	cbz	r3, 8008cd4 <_free_r+0x4c>
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	d9fa      	bls.n	8008cca <_free_r+0x42>
 8008cd4:	6811      	ldr	r1, [r2, #0]
 8008cd6:	1850      	adds	r0, r2, r1
 8008cd8:	42a0      	cmp	r0, r4
 8008cda:	d10b      	bne.n	8008cf4 <_free_r+0x6c>
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	4401      	add	r1, r0
 8008ce0:	1850      	adds	r0, r2, r1
 8008ce2:	4283      	cmp	r3, r0
 8008ce4:	6011      	str	r1, [r2, #0]
 8008ce6:	d1e0      	bne.n	8008caa <_free_r+0x22>
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	6053      	str	r3, [r2, #4]
 8008cee:	4408      	add	r0, r1
 8008cf0:	6010      	str	r0, [r2, #0]
 8008cf2:	e7da      	b.n	8008caa <_free_r+0x22>
 8008cf4:	d902      	bls.n	8008cfc <_free_r+0x74>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	e7d6      	b.n	8008caa <_free_r+0x22>
 8008cfc:	6820      	ldr	r0, [r4, #0]
 8008cfe:	1821      	adds	r1, r4, r0
 8008d00:	428b      	cmp	r3, r1
 8008d02:	bf04      	itt	eq
 8008d04:	6819      	ldreq	r1, [r3, #0]
 8008d06:	685b      	ldreq	r3, [r3, #4]
 8008d08:	6063      	str	r3, [r4, #4]
 8008d0a:	bf04      	itt	eq
 8008d0c:	1809      	addeq	r1, r1, r0
 8008d0e:	6021      	streq	r1, [r4, #0]
 8008d10:	6054      	str	r4, [r2, #4]
 8008d12:	e7ca      	b.n	8008caa <_free_r+0x22>
 8008d14:	bd38      	pop	{r3, r4, r5, pc}
 8008d16:	bf00      	nop
 8008d18:	20000800 	.word	0x20000800

08008d1c <malloc>:
 8008d1c:	4b02      	ldr	r3, [pc, #8]	@ (8008d28 <malloc+0xc>)
 8008d1e:	4601      	mov	r1, r0
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	f000 b825 	b.w	8008d70 <_malloc_r>
 8008d26:	bf00      	nop
 8008d28:	2000001c 	.word	0x2000001c

08008d2c <sbrk_aligned>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8008d6c <sbrk_aligned+0x40>)
 8008d30:	460c      	mov	r4, r1
 8008d32:	6831      	ldr	r1, [r6, #0]
 8008d34:	4605      	mov	r5, r0
 8008d36:	b911      	cbnz	r1, 8008d3e <sbrk_aligned+0x12>
 8008d38:	f000 fe3e 	bl	80099b8 <_sbrk_r>
 8008d3c:	6030      	str	r0, [r6, #0]
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4628      	mov	r0, r5
 8008d42:	f000 fe39 	bl	80099b8 <_sbrk_r>
 8008d46:	1c43      	adds	r3, r0, #1
 8008d48:	d103      	bne.n	8008d52 <sbrk_aligned+0x26>
 8008d4a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d4e:	4620      	mov	r0, r4
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	1cc4      	adds	r4, r0, #3
 8008d54:	f024 0403 	bic.w	r4, r4, #3
 8008d58:	42a0      	cmp	r0, r4
 8008d5a:	d0f8      	beq.n	8008d4e <sbrk_aligned+0x22>
 8008d5c:	1a21      	subs	r1, r4, r0
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f000 fe2a 	bl	80099b8 <_sbrk_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	d1f2      	bne.n	8008d4e <sbrk_aligned+0x22>
 8008d68:	e7ef      	b.n	8008d4a <sbrk_aligned+0x1e>
 8008d6a:	bf00      	nop
 8008d6c:	200007fc 	.word	0x200007fc

08008d70 <_malloc_r>:
 8008d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d74:	1ccd      	adds	r5, r1, #3
 8008d76:	f025 0503 	bic.w	r5, r5, #3
 8008d7a:	3508      	adds	r5, #8
 8008d7c:	2d0c      	cmp	r5, #12
 8008d7e:	bf38      	it	cc
 8008d80:	250c      	movcc	r5, #12
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	4606      	mov	r6, r0
 8008d86:	db01      	blt.n	8008d8c <_malloc_r+0x1c>
 8008d88:	42a9      	cmp	r1, r5
 8008d8a:	d904      	bls.n	8008d96 <_malloc_r+0x26>
 8008d8c:	230c      	movs	r3, #12
 8008d8e:	6033      	str	r3, [r6, #0]
 8008d90:	2000      	movs	r0, #0
 8008d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e6c <_malloc_r+0xfc>
 8008d9a:	f000 f869 	bl	8008e70 <__malloc_lock>
 8008d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008da2:	461c      	mov	r4, r3
 8008da4:	bb44      	cbnz	r4, 8008df8 <_malloc_r+0x88>
 8008da6:	4629      	mov	r1, r5
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7ff ffbf 	bl	8008d2c <sbrk_aligned>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	4604      	mov	r4, r0
 8008db2:	d158      	bne.n	8008e66 <_malloc_r+0xf6>
 8008db4:	f8d8 4000 	ldr.w	r4, [r8]
 8008db8:	4627      	mov	r7, r4
 8008dba:	2f00      	cmp	r7, #0
 8008dbc:	d143      	bne.n	8008e46 <_malloc_r+0xd6>
 8008dbe:	2c00      	cmp	r4, #0
 8008dc0:	d04b      	beq.n	8008e5a <_malloc_r+0xea>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	eb04 0903 	add.w	r9, r4, r3
 8008dcc:	f000 fdf4 	bl	80099b8 <_sbrk_r>
 8008dd0:	4581      	cmp	r9, r0
 8008dd2:	d142      	bne.n	8008e5a <_malloc_r+0xea>
 8008dd4:	6821      	ldr	r1, [r4, #0]
 8008dd6:	1a6d      	subs	r5, r5, r1
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff ffa6 	bl	8008d2c <sbrk_aligned>
 8008de0:	3001      	adds	r0, #1
 8008de2:	d03a      	beq.n	8008e5a <_malloc_r+0xea>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	442b      	add	r3, r5
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	f8d8 3000 	ldr.w	r3, [r8]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	bb62      	cbnz	r2, 8008e4c <_malloc_r+0xdc>
 8008df2:	f8c8 7000 	str.w	r7, [r8]
 8008df6:	e00f      	b.n	8008e18 <_malloc_r+0xa8>
 8008df8:	6822      	ldr	r2, [r4, #0]
 8008dfa:	1b52      	subs	r2, r2, r5
 8008dfc:	d420      	bmi.n	8008e40 <_malloc_r+0xd0>
 8008dfe:	2a0b      	cmp	r2, #11
 8008e00:	d917      	bls.n	8008e32 <_malloc_r+0xc2>
 8008e02:	1961      	adds	r1, r4, r5
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	6025      	str	r5, [r4, #0]
 8008e08:	bf18      	it	ne
 8008e0a:	6059      	strne	r1, [r3, #4]
 8008e0c:	6863      	ldr	r3, [r4, #4]
 8008e0e:	bf08      	it	eq
 8008e10:	f8c8 1000 	streq.w	r1, [r8]
 8008e14:	5162      	str	r2, [r4, r5]
 8008e16:	604b      	str	r3, [r1, #4]
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f000 f82f 	bl	8008e7c <__malloc_unlock>
 8008e1e:	f104 000b 	add.w	r0, r4, #11
 8008e22:	1d23      	adds	r3, r4, #4
 8008e24:	f020 0007 	bic.w	r0, r0, #7
 8008e28:	1ac2      	subs	r2, r0, r3
 8008e2a:	bf1c      	itt	ne
 8008e2c:	1a1b      	subne	r3, r3, r0
 8008e2e:	50a3      	strne	r3, [r4, r2]
 8008e30:	e7af      	b.n	8008d92 <_malloc_r+0x22>
 8008e32:	6862      	ldr	r2, [r4, #4]
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	bf0c      	ite	eq
 8008e38:	f8c8 2000 	streq.w	r2, [r8]
 8008e3c:	605a      	strne	r2, [r3, #4]
 8008e3e:	e7eb      	b.n	8008e18 <_malloc_r+0xa8>
 8008e40:	4623      	mov	r3, r4
 8008e42:	6864      	ldr	r4, [r4, #4]
 8008e44:	e7ae      	b.n	8008da4 <_malloc_r+0x34>
 8008e46:	463c      	mov	r4, r7
 8008e48:	687f      	ldr	r7, [r7, #4]
 8008e4a:	e7b6      	b.n	8008dba <_malloc_r+0x4a>
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	d1fb      	bne.n	8008e4c <_malloc_r+0xdc>
 8008e54:	2300      	movs	r3, #0
 8008e56:	6053      	str	r3, [r2, #4]
 8008e58:	e7de      	b.n	8008e18 <_malloc_r+0xa8>
 8008e5a:	230c      	movs	r3, #12
 8008e5c:	6033      	str	r3, [r6, #0]
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f000 f80c 	bl	8008e7c <__malloc_unlock>
 8008e64:	e794      	b.n	8008d90 <_malloc_r+0x20>
 8008e66:	6005      	str	r5, [r0, #0]
 8008e68:	e7d6      	b.n	8008e18 <_malloc_r+0xa8>
 8008e6a:	bf00      	nop
 8008e6c:	20000800 	.word	0x20000800

08008e70 <__malloc_lock>:
 8008e70:	4801      	ldr	r0, [pc, #4]	@ (8008e78 <__malloc_lock+0x8>)
 8008e72:	f7ff b8ae 	b.w	8007fd2 <__retarget_lock_acquire_recursive>
 8008e76:	bf00      	nop
 8008e78:	200007f8 	.word	0x200007f8

08008e7c <__malloc_unlock>:
 8008e7c:	4801      	ldr	r0, [pc, #4]	@ (8008e84 <__malloc_unlock+0x8>)
 8008e7e:	f7ff b8a9 	b.w	8007fd4 <__retarget_lock_release_recursive>
 8008e82:	bf00      	nop
 8008e84:	200007f8 	.word	0x200007f8

08008e88 <_Balloc>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	69c6      	ldr	r6, [r0, #28]
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	b976      	cbnz	r6, 8008eb0 <_Balloc+0x28>
 8008e92:	2010      	movs	r0, #16
 8008e94:	f7ff ff42 	bl	8008d1c <malloc>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	61e0      	str	r0, [r4, #28]
 8008e9c:	b920      	cbnz	r0, 8008ea8 <_Balloc+0x20>
 8008e9e:	4b18      	ldr	r3, [pc, #96]	@ (8008f00 <_Balloc+0x78>)
 8008ea0:	4818      	ldr	r0, [pc, #96]	@ (8008f04 <_Balloc+0x7c>)
 8008ea2:	216b      	movs	r1, #107	@ 0x6b
 8008ea4:	f000 fda6 	bl	80099f4 <__assert_func>
 8008ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eac:	6006      	str	r6, [r0, #0]
 8008eae:	60c6      	str	r6, [r0, #12]
 8008eb0:	69e6      	ldr	r6, [r4, #28]
 8008eb2:	68f3      	ldr	r3, [r6, #12]
 8008eb4:	b183      	cbz	r3, 8008ed8 <_Balloc+0x50>
 8008eb6:	69e3      	ldr	r3, [r4, #28]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ebe:	b9b8      	cbnz	r0, 8008ef0 <_Balloc+0x68>
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ec6:	1d72      	adds	r2, r6, #5
 8008ec8:	0092      	lsls	r2, r2, #2
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 fdb0 	bl	8009a30 <_calloc_r>
 8008ed0:	b160      	cbz	r0, 8008eec <_Balloc+0x64>
 8008ed2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ed6:	e00e      	b.n	8008ef6 <_Balloc+0x6e>
 8008ed8:	2221      	movs	r2, #33	@ 0x21
 8008eda:	2104      	movs	r1, #4
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fda7 	bl	8009a30 <_calloc_r>
 8008ee2:	69e3      	ldr	r3, [r4, #28]
 8008ee4:	60f0      	str	r0, [r6, #12]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e4      	bne.n	8008eb6 <_Balloc+0x2e>
 8008eec:	2000      	movs	r0, #0
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	6802      	ldr	r2, [r0, #0]
 8008ef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008efc:	e7f7      	b.n	8008eee <_Balloc+0x66>
 8008efe:	bf00      	nop
 8008f00:	0800b2c1 	.word	0x0800b2c1
 8008f04:	0800b341 	.word	0x0800b341

08008f08 <_Bfree>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	69c6      	ldr	r6, [r0, #28]
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	b976      	cbnz	r6, 8008f30 <_Bfree+0x28>
 8008f12:	2010      	movs	r0, #16
 8008f14:	f7ff ff02 	bl	8008d1c <malloc>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	61e8      	str	r0, [r5, #28]
 8008f1c:	b920      	cbnz	r0, 8008f28 <_Bfree+0x20>
 8008f1e:	4b09      	ldr	r3, [pc, #36]	@ (8008f44 <_Bfree+0x3c>)
 8008f20:	4809      	ldr	r0, [pc, #36]	@ (8008f48 <_Bfree+0x40>)
 8008f22:	218f      	movs	r1, #143	@ 0x8f
 8008f24:	f000 fd66 	bl	80099f4 <__assert_func>
 8008f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f2c:	6006      	str	r6, [r0, #0]
 8008f2e:	60c6      	str	r6, [r0, #12]
 8008f30:	b13c      	cbz	r4, 8008f42 <_Bfree+0x3a>
 8008f32:	69eb      	ldr	r3, [r5, #28]
 8008f34:	6862      	ldr	r2, [r4, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f3c:	6021      	str	r1, [r4, #0]
 8008f3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	0800b2c1 	.word	0x0800b2c1
 8008f48:	0800b341 	.word	0x0800b341

08008f4c <__multadd>:
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	690d      	ldr	r5, [r1, #16]
 8008f52:	4607      	mov	r7, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	461e      	mov	r6, r3
 8008f58:	f101 0c14 	add.w	ip, r1, #20
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	f8dc 3000 	ldr.w	r3, [ip]
 8008f62:	b299      	uxth	r1, r3
 8008f64:	fb02 6101 	mla	r1, r2, r1, r6
 8008f68:	0c1e      	lsrs	r6, r3, #16
 8008f6a:	0c0b      	lsrs	r3, r1, #16
 8008f6c:	fb02 3306 	mla	r3, r2, r6, r3
 8008f70:	b289      	uxth	r1, r1
 8008f72:	3001      	adds	r0, #1
 8008f74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f78:	4285      	cmp	r5, r0
 8008f7a:	f84c 1b04 	str.w	r1, [ip], #4
 8008f7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f82:	dcec      	bgt.n	8008f5e <__multadd+0x12>
 8008f84:	b30e      	cbz	r6, 8008fca <__multadd+0x7e>
 8008f86:	68a3      	ldr	r3, [r4, #8]
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	dc19      	bgt.n	8008fc0 <__multadd+0x74>
 8008f8c:	6861      	ldr	r1, [r4, #4]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	3101      	adds	r1, #1
 8008f92:	f7ff ff79 	bl	8008e88 <_Balloc>
 8008f96:	4680      	mov	r8, r0
 8008f98:	b928      	cbnz	r0, 8008fa6 <__multadd+0x5a>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd0 <__multadd+0x84>)
 8008f9e:	480d      	ldr	r0, [pc, #52]	@ (8008fd4 <__multadd+0x88>)
 8008fa0:	21ba      	movs	r1, #186	@ 0xba
 8008fa2:	f000 fd27 	bl	80099f4 <__assert_func>
 8008fa6:	6922      	ldr	r2, [r4, #16]
 8008fa8:	3202      	adds	r2, #2
 8008faa:	f104 010c 	add.w	r1, r4, #12
 8008fae:	0092      	lsls	r2, r2, #2
 8008fb0:	300c      	adds	r0, #12
 8008fb2:	f000 fd11 	bl	80099d8 <memcpy>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7ff ffa5 	bl	8008f08 <_Bfree>
 8008fbe:	4644      	mov	r4, r8
 8008fc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fc4:	3501      	adds	r5, #1
 8008fc6:	615e      	str	r6, [r3, #20]
 8008fc8:	6125      	str	r5, [r4, #16]
 8008fca:	4620      	mov	r0, r4
 8008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd0:	0800b330 	.word	0x0800b330
 8008fd4:	0800b341 	.word	0x0800b341

08008fd8 <__hi0bits>:
 8008fd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008fdc:	4603      	mov	r3, r0
 8008fde:	bf36      	itet	cc
 8008fe0:	0403      	lslcc	r3, r0, #16
 8008fe2:	2000      	movcs	r0, #0
 8008fe4:	2010      	movcc	r0, #16
 8008fe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fea:	bf3c      	itt	cc
 8008fec:	021b      	lslcc	r3, r3, #8
 8008fee:	3008      	addcc	r0, #8
 8008ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ff4:	bf3c      	itt	cc
 8008ff6:	011b      	lslcc	r3, r3, #4
 8008ff8:	3004      	addcc	r0, #4
 8008ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ffe:	bf3c      	itt	cc
 8009000:	009b      	lslcc	r3, r3, #2
 8009002:	3002      	addcc	r0, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	db05      	blt.n	8009014 <__hi0bits+0x3c>
 8009008:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800900c:	f100 0001 	add.w	r0, r0, #1
 8009010:	bf08      	it	eq
 8009012:	2020      	moveq	r0, #32
 8009014:	4770      	bx	lr

08009016 <__lo0bits>:
 8009016:	6803      	ldr	r3, [r0, #0]
 8009018:	4602      	mov	r2, r0
 800901a:	f013 0007 	ands.w	r0, r3, #7
 800901e:	d00b      	beq.n	8009038 <__lo0bits+0x22>
 8009020:	07d9      	lsls	r1, r3, #31
 8009022:	d421      	bmi.n	8009068 <__lo0bits+0x52>
 8009024:	0798      	lsls	r0, r3, #30
 8009026:	bf49      	itett	mi
 8009028:	085b      	lsrmi	r3, r3, #1
 800902a:	089b      	lsrpl	r3, r3, #2
 800902c:	2001      	movmi	r0, #1
 800902e:	6013      	strmi	r3, [r2, #0]
 8009030:	bf5c      	itt	pl
 8009032:	6013      	strpl	r3, [r2, #0]
 8009034:	2002      	movpl	r0, #2
 8009036:	4770      	bx	lr
 8009038:	b299      	uxth	r1, r3
 800903a:	b909      	cbnz	r1, 8009040 <__lo0bits+0x2a>
 800903c:	0c1b      	lsrs	r3, r3, #16
 800903e:	2010      	movs	r0, #16
 8009040:	b2d9      	uxtb	r1, r3
 8009042:	b909      	cbnz	r1, 8009048 <__lo0bits+0x32>
 8009044:	3008      	adds	r0, #8
 8009046:	0a1b      	lsrs	r3, r3, #8
 8009048:	0719      	lsls	r1, r3, #28
 800904a:	bf04      	itt	eq
 800904c:	091b      	lsreq	r3, r3, #4
 800904e:	3004      	addeq	r0, #4
 8009050:	0799      	lsls	r1, r3, #30
 8009052:	bf04      	itt	eq
 8009054:	089b      	lsreq	r3, r3, #2
 8009056:	3002      	addeq	r0, #2
 8009058:	07d9      	lsls	r1, r3, #31
 800905a:	d403      	bmi.n	8009064 <__lo0bits+0x4e>
 800905c:	085b      	lsrs	r3, r3, #1
 800905e:	f100 0001 	add.w	r0, r0, #1
 8009062:	d003      	beq.n	800906c <__lo0bits+0x56>
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	4770      	bx	lr
 8009068:	2000      	movs	r0, #0
 800906a:	4770      	bx	lr
 800906c:	2020      	movs	r0, #32
 800906e:	4770      	bx	lr

08009070 <__i2b>:
 8009070:	b510      	push	{r4, lr}
 8009072:	460c      	mov	r4, r1
 8009074:	2101      	movs	r1, #1
 8009076:	f7ff ff07 	bl	8008e88 <_Balloc>
 800907a:	4602      	mov	r2, r0
 800907c:	b928      	cbnz	r0, 800908a <__i2b+0x1a>
 800907e:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <__i2b+0x24>)
 8009080:	4805      	ldr	r0, [pc, #20]	@ (8009098 <__i2b+0x28>)
 8009082:	f240 1145 	movw	r1, #325	@ 0x145
 8009086:	f000 fcb5 	bl	80099f4 <__assert_func>
 800908a:	2301      	movs	r3, #1
 800908c:	6144      	str	r4, [r0, #20]
 800908e:	6103      	str	r3, [r0, #16]
 8009090:	bd10      	pop	{r4, pc}
 8009092:	bf00      	nop
 8009094:	0800b330 	.word	0x0800b330
 8009098:	0800b341 	.word	0x0800b341

0800909c <__multiply>:
 800909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a0:	4617      	mov	r7, r2
 80090a2:	690a      	ldr	r2, [r1, #16]
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	bfa8      	it	ge
 80090aa:	463b      	movge	r3, r7
 80090ac:	4689      	mov	r9, r1
 80090ae:	bfa4      	itt	ge
 80090b0:	460f      	movge	r7, r1
 80090b2:	4699      	movge	r9, r3
 80090b4:	693d      	ldr	r5, [r7, #16]
 80090b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	eb05 060a 	add.w	r6, r5, sl
 80090c2:	42b3      	cmp	r3, r6
 80090c4:	b085      	sub	sp, #20
 80090c6:	bfb8      	it	lt
 80090c8:	3101      	addlt	r1, #1
 80090ca:	f7ff fedd 	bl	8008e88 <_Balloc>
 80090ce:	b930      	cbnz	r0, 80090de <__multiply+0x42>
 80090d0:	4602      	mov	r2, r0
 80090d2:	4b41      	ldr	r3, [pc, #260]	@ (80091d8 <__multiply+0x13c>)
 80090d4:	4841      	ldr	r0, [pc, #260]	@ (80091dc <__multiply+0x140>)
 80090d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80090da:	f000 fc8b 	bl	80099f4 <__assert_func>
 80090de:	f100 0414 	add.w	r4, r0, #20
 80090e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80090e6:	4623      	mov	r3, r4
 80090e8:	2200      	movs	r2, #0
 80090ea:	4573      	cmp	r3, lr
 80090ec:	d320      	bcc.n	8009130 <__multiply+0x94>
 80090ee:	f107 0814 	add.w	r8, r7, #20
 80090f2:	f109 0114 	add.w	r1, r9, #20
 80090f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80090fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80090fe:	9302      	str	r3, [sp, #8]
 8009100:	1beb      	subs	r3, r5, r7
 8009102:	3b15      	subs	r3, #21
 8009104:	f023 0303 	bic.w	r3, r3, #3
 8009108:	3304      	adds	r3, #4
 800910a:	3715      	adds	r7, #21
 800910c:	42bd      	cmp	r5, r7
 800910e:	bf38      	it	cc
 8009110:	2304      	movcc	r3, #4
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	9103      	str	r1, [sp, #12]
 8009118:	428b      	cmp	r3, r1
 800911a:	d80c      	bhi.n	8009136 <__multiply+0x9a>
 800911c:	2e00      	cmp	r6, #0
 800911e:	dd03      	ble.n	8009128 <__multiply+0x8c>
 8009120:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009124:	2b00      	cmp	r3, #0
 8009126:	d055      	beq.n	80091d4 <__multiply+0x138>
 8009128:	6106      	str	r6, [r0, #16]
 800912a:	b005      	add	sp, #20
 800912c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009130:	f843 2b04 	str.w	r2, [r3], #4
 8009134:	e7d9      	b.n	80090ea <__multiply+0x4e>
 8009136:	f8b1 a000 	ldrh.w	sl, [r1]
 800913a:	f1ba 0f00 	cmp.w	sl, #0
 800913e:	d01f      	beq.n	8009180 <__multiply+0xe4>
 8009140:	46c4      	mov	ip, r8
 8009142:	46a1      	mov	r9, r4
 8009144:	2700      	movs	r7, #0
 8009146:	f85c 2b04 	ldr.w	r2, [ip], #4
 800914a:	f8d9 3000 	ldr.w	r3, [r9]
 800914e:	fa1f fb82 	uxth.w	fp, r2
 8009152:	b29b      	uxth	r3, r3
 8009154:	fb0a 330b 	mla	r3, sl, fp, r3
 8009158:	443b      	add	r3, r7
 800915a:	f8d9 7000 	ldr.w	r7, [r9]
 800915e:	0c12      	lsrs	r2, r2, #16
 8009160:	0c3f      	lsrs	r7, r7, #16
 8009162:	fb0a 7202 	mla	r2, sl, r2, r7
 8009166:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800916a:	b29b      	uxth	r3, r3
 800916c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009170:	4565      	cmp	r5, ip
 8009172:	f849 3b04 	str.w	r3, [r9], #4
 8009176:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800917a:	d8e4      	bhi.n	8009146 <__multiply+0xaa>
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	50e7      	str	r7, [r4, r3]
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009186:	3104      	adds	r1, #4
 8009188:	f1b9 0f00 	cmp.w	r9, #0
 800918c:	d020      	beq.n	80091d0 <__multiply+0x134>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	4647      	mov	r7, r8
 8009192:	46a4      	mov	ip, r4
 8009194:	f04f 0a00 	mov.w	sl, #0
 8009198:	f8b7 b000 	ldrh.w	fp, [r7]
 800919c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80091a0:	fb09 220b 	mla	r2, r9, fp, r2
 80091a4:	4452      	add	r2, sl
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091ac:	f84c 3b04 	str.w	r3, [ip], #4
 80091b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80091b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80091bc:	fb09 330a 	mla	r3, r9, sl, r3
 80091c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80091c4:	42bd      	cmp	r5, r7
 80091c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091ca:	d8e5      	bhi.n	8009198 <__multiply+0xfc>
 80091cc:	9a01      	ldr	r2, [sp, #4]
 80091ce:	50a3      	str	r3, [r4, r2]
 80091d0:	3404      	adds	r4, #4
 80091d2:	e79f      	b.n	8009114 <__multiply+0x78>
 80091d4:	3e01      	subs	r6, #1
 80091d6:	e7a1      	b.n	800911c <__multiply+0x80>
 80091d8:	0800b330 	.word	0x0800b330
 80091dc:	0800b341 	.word	0x0800b341

080091e0 <__pow5mult>:
 80091e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e4:	4615      	mov	r5, r2
 80091e6:	f012 0203 	ands.w	r2, r2, #3
 80091ea:	4607      	mov	r7, r0
 80091ec:	460e      	mov	r6, r1
 80091ee:	d007      	beq.n	8009200 <__pow5mult+0x20>
 80091f0:	4c25      	ldr	r4, [pc, #148]	@ (8009288 <__pow5mult+0xa8>)
 80091f2:	3a01      	subs	r2, #1
 80091f4:	2300      	movs	r3, #0
 80091f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091fa:	f7ff fea7 	bl	8008f4c <__multadd>
 80091fe:	4606      	mov	r6, r0
 8009200:	10ad      	asrs	r5, r5, #2
 8009202:	d03d      	beq.n	8009280 <__pow5mult+0xa0>
 8009204:	69fc      	ldr	r4, [r7, #28]
 8009206:	b97c      	cbnz	r4, 8009228 <__pow5mult+0x48>
 8009208:	2010      	movs	r0, #16
 800920a:	f7ff fd87 	bl	8008d1c <malloc>
 800920e:	4602      	mov	r2, r0
 8009210:	61f8      	str	r0, [r7, #28]
 8009212:	b928      	cbnz	r0, 8009220 <__pow5mult+0x40>
 8009214:	4b1d      	ldr	r3, [pc, #116]	@ (800928c <__pow5mult+0xac>)
 8009216:	481e      	ldr	r0, [pc, #120]	@ (8009290 <__pow5mult+0xb0>)
 8009218:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800921c:	f000 fbea 	bl	80099f4 <__assert_func>
 8009220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009224:	6004      	str	r4, [r0, #0]
 8009226:	60c4      	str	r4, [r0, #12]
 8009228:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800922c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009230:	b94c      	cbnz	r4, 8009246 <__pow5mult+0x66>
 8009232:	f240 2171 	movw	r1, #625	@ 0x271
 8009236:	4638      	mov	r0, r7
 8009238:	f7ff ff1a 	bl	8009070 <__i2b>
 800923c:	2300      	movs	r3, #0
 800923e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009242:	4604      	mov	r4, r0
 8009244:	6003      	str	r3, [r0, #0]
 8009246:	f04f 0900 	mov.w	r9, #0
 800924a:	07eb      	lsls	r3, r5, #31
 800924c:	d50a      	bpl.n	8009264 <__pow5mult+0x84>
 800924e:	4631      	mov	r1, r6
 8009250:	4622      	mov	r2, r4
 8009252:	4638      	mov	r0, r7
 8009254:	f7ff ff22 	bl	800909c <__multiply>
 8009258:	4631      	mov	r1, r6
 800925a:	4680      	mov	r8, r0
 800925c:	4638      	mov	r0, r7
 800925e:	f7ff fe53 	bl	8008f08 <_Bfree>
 8009262:	4646      	mov	r6, r8
 8009264:	106d      	asrs	r5, r5, #1
 8009266:	d00b      	beq.n	8009280 <__pow5mult+0xa0>
 8009268:	6820      	ldr	r0, [r4, #0]
 800926a:	b938      	cbnz	r0, 800927c <__pow5mult+0x9c>
 800926c:	4622      	mov	r2, r4
 800926e:	4621      	mov	r1, r4
 8009270:	4638      	mov	r0, r7
 8009272:	f7ff ff13 	bl	800909c <__multiply>
 8009276:	6020      	str	r0, [r4, #0]
 8009278:	f8c0 9000 	str.w	r9, [r0]
 800927c:	4604      	mov	r4, r0
 800927e:	e7e4      	b.n	800924a <__pow5mult+0x6a>
 8009280:	4630      	mov	r0, r6
 8009282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009286:	bf00      	nop
 8009288:	0800b3f4 	.word	0x0800b3f4
 800928c:	0800b2c1 	.word	0x0800b2c1
 8009290:	0800b341 	.word	0x0800b341

08009294 <__lshift>:
 8009294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009298:	460c      	mov	r4, r1
 800929a:	6849      	ldr	r1, [r1, #4]
 800929c:	6923      	ldr	r3, [r4, #16]
 800929e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092a2:	68a3      	ldr	r3, [r4, #8]
 80092a4:	4607      	mov	r7, r0
 80092a6:	4691      	mov	r9, r2
 80092a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092ac:	f108 0601 	add.w	r6, r8, #1
 80092b0:	42b3      	cmp	r3, r6
 80092b2:	db0b      	blt.n	80092cc <__lshift+0x38>
 80092b4:	4638      	mov	r0, r7
 80092b6:	f7ff fde7 	bl	8008e88 <_Balloc>
 80092ba:	4605      	mov	r5, r0
 80092bc:	b948      	cbnz	r0, 80092d2 <__lshift+0x3e>
 80092be:	4602      	mov	r2, r0
 80092c0:	4b28      	ldr	r3, [pc, #160]	@ (8009364 <__lshift+0xd0>)
 80092c2:	4829      	ldr	r0, [pc, #164]	@ (8009368 <__lshift+0xd4>)
 80092c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80092c8:	f000 fb94 	bl	80099f4 <__assert_func>
 80092cc:	3101      	adds	r1, #1
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	e7ee      	b.n	80092b0 <__lshift+0x1c>
 80092d2:	2300      	movs	r3, #0
 80092d4:	f100 0114 	add.w	r1, r0, #20
 80092d8:	f100 0210 	add.w	r2, r0, #16
 80092dc:	4618      	mov	r0, r3
 80092de:	4553      	cmp	r3, sl
 80092e0:	db33      	blt.n	800934a <__lshift+0xb6>
 80092e2:	6920      	ldr	r0, [r4, #16]
 80092e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092e8:	f104 0314 	add.w	r3, r4, #20
 80092ec:	f019 091f 	ands.w	r9, r9, #31
 80092f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092f8:	d02b      	beq.n	8009352 <__lshift+0xbe>
 80092fa:	f1c9 0e20 	rsb	lr, r9, #32
 80092fe:	468a      	mov	sl, r1
 8009300:	2200      	movs	r2, #0
 8009302:	6818      	ldr	r0, [r3, #0]
 8009304:	fa00 f009 	lsl.w	r0, r0, r9
 8009308:	4310      	orrs	r0, r2
 800930a:	f84a 0b04 	str.w	r0, [sl], #4
 800930e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009312:	459c      	cmp	ip, r3
 8009314:	fa22 f20e 	lsr.w	r2, r2, lr
 8009318:	d8f3      	bhi.n	8009302 <__lshift+0x6e>
 800931a:	ebac 0304 	sub.w	r3, ip, r4
 800931e:	3b15      	subs	r3, #21
 8009320:	f023 0303 	bic.w	r3, r3, #3
 8009324:	3304      	adds	r3, #4
 8009326:	f104 0015 	add.w	r0, r4, #21
 800932a:	4560      	cmp	r0, ip
 800932c:	bf88      	it	hi
 800932e:	2304      	movhi	r3, #4
 8009330:	50ca      	str	r2, [r1, r3]
 8009332:	b10a      	cbz	r2, 8009338 <__lshift+0xa4>
 8009334:	f108 0602 	add.w	r6, r8, #2
 8009338:	3e01      	subs	r6, #1
 800933a:	4638      	mov	r0, r7
 800933c:	612e      	str	r6, [r5, #16]
 800933e:	4621      	mov	r1, r4
 8009340:	f7ff fde2 	bl	8008f08 <_Bfree>
 8009344:	4628      	mov	r0, r5
 8009346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934a:	f842 0f04 	str.w	r0, [r2, #4]!
 800934e:	3301      	adds	r3, #1
 8009350:	e7c5      	b.n	80092de <__lshift+0x4a>
 8009352:	3904      	subs	r1, #4
 8009354:	f853 2b04 	ldr.w	r2, [r3], #4
 8009358:	f841 2f04 	str.w	r2, [r1, #4]!
 800935c:	459c      	cmp	ip, r3
 800935e:	d8f9      	bhi.n	8009354 <__lshift+0xc0>
 8009360:	e7ea      	b.n	8009338 <__lshift+0xa4>
 8009362:	bf00      	nop
 8009364:	0800b330 	.word	0x0800b330
 8009368:	0800b341 	.word	0x0800b341

0800936c <__mcmp>:
 800936c:	690a      	ldr	r2, [r1, #16]
 800936e:	4603      	mov	r3, r0
 8009370:	6900      	ldr	r0, [r0, #16]
 8009372:	1a80      	subs	r0, r0, r2
 8009374:	b530      	push	{r4, r5, lr}
 8009376:	d10e      	bne.n	8009396 <__mcmp+0x2a>
 8009378:	3314      	adds	r3, #20
 800937a:	3114      	adds	r1, #20
 800937c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009380:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009384:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009388:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800938c:	4295      	cmp	r5, r2
 800938e:	d003      	beq.n	8009398 <__mcmp+0x2c>
 8009390:	d205      	bcs.n	800939e <__mcmp+0x32>
 8009392:	f04f 30ff 	mov.w	r0, #4294967295
 8009396:	bd30      	pop	{r4, r5, pc}
 8009398:	42a3      	cmp	r3, r4
 800939a:	d3f3      	bcc.n	8009384 <__mcmp+0x18>
 800939c:	e7fb      	b.n	8009396 <__mcmp+0x2a>
 800939e:	2001      	movs	r0, #1
 80093a0:	e7f9      	b.n	8009396 <__mcmp+0x2a>
	...

080093a4 <__mdiff>:
 80093a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a8:	4689      	mov	r9, r1
 80093aa:	4606      	mov	r6, r0
 80093ac:	4611      	mov	r1, r2
 80093ae:	4648      	mov	r0, r9
 80093b0:	4614      	mov	r4, r2
 80093b2:	f7ff ffdb 	bl	800936c <__mcmp>
 80093b6:	1e05      	subs	r5, r0, #0
 80093b8:	d112      	bne.n	80093e0 <__mdiff+0x3c>
 80093ba:	4629      	mov	r1, r5
 80093bc:	4630      	mov	r0, r6
 80093be:	f7ff fd63 	bl	8008e88 <_Balloc>
 80093c2:	4602      	mov	r2, r0
 80093c4:	b928      	cbnz	r0, 80093d2 <__mdiff+0x2e>
 80093c6:	4b3f      	ldr	r3, [pc, #252]	@ (80094c4 <__mdiff+0x120>)
 80093c8:	f240 2137 	movw	r1, #567	@ 0x237
 80093cc:	483e      	ldr	r0, [pc, #248]	@ (80094c8 <__mdiff+0x124>)
 80093ce:	f000 fb11 	bl	80099f4 <__assert_func>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093d8:	4610      	mov	r0, r2
 80093da:	b003      	add	sp, #12
 80093dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e0:	bfbc      	itt	lt
 80093e2:	464b      	movlt	r3, r9
 80093e4:	46a1      	movlt	r9, r4
 80093e6:	4630      	mov	r0, r6
 80093e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093ec:	bfba      	itte	lt
 80093ee:	461c      	movlt	r4, r3
 80093f0:	2501      	movlt	r5, #1
 80093f2:	2500      	movge	r5, #0
 80093f4:	f7ff fd48 	bl	8008e88 <_Balloc>
 80093f8:	4602      	mov	r2, r0
 80093fa:	b918      	cbnz	r0, 8009404 <__mdiff+0x60>
 80093fc:	4b31      	ldr	r3, [pc, #196]	@ (80094c4 <__mdiff+0x120>)
 80093fe:	f240 2145 	movw	r1, #581	@ 0x245
 8009402:	e7e3      	b.n	80093cc <__mdiff+0x28>
 8009404:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009408:	6926      	ldr	r6, [r4, #16]
 800940a:	60c5      	str	r5, [r0, #12]
 800940c:	f109 0310 	add.w	r3, r9, #16
 8009410:	f109 0514 	add.w	r5, r9, #20
 8009414:	f104 0e14 	add.w	lr, r4, #20
 8009418:	f100 0b14 	add.w	fp, r0, #20
 800941c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009420:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	46d9      	mov	r9, fp
 8009428:	f04f 0c00 	mov.w	ip, #0
 800942c:	9b01      	ldr	r3, [sp, #4]
 800942e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009432:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	fa1f f38a 	uxth.w	r3, sl
 800943c:	4619      	mov	r1, r3
 800943e:	b283      	uxth	r3, r0
 8009440:	1acb      	subs	r3, r1, r3
 8009442:	0c00      	lsrs	r0, r0, #16
 8009444:	4463      	add	r3, ip
 8009446:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800944a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800944e:	b29b      	uxth	r3, r3
 8009450:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009454:	4576      	cmp	r6, lr
 8009456:	f849 3b04 	str.w	r3, [r9], #4
 800945a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800945e:	d8e5      	bhi.n	800942c <__mdiff+0x88>
 8009460:	1b33      	subs	r3, r6, r4
 8009462:	3b15      	subs	r3, #21
 8009464:	f023 0303 	bic.w	r3, r3, #3
 8009468:	3415      	adds	r4, #21
 800946a:	3304      	adds	r3, #4
 800946c:	42a6      	cmp	r6, r4
 800946e:	bf38      	it	cc
 8009470:	2304      	movcc	r3, #4
 8009472:	441d      	add	r5, r3
 8009474:	445b      	add	r3, fp
 8009476:	461e      	mov	r6, r3
 8009478:	462c      	mov	r4, r5
 800947a:	4544      	cmp	r4, r8
 800947c:	d30e      	bcc.n	800949c <__mdiff+0xf8>
 800947e:	f108 0103 	add.w	r1, r8, #3
 8009482:	1b49      	subs	r1, r1, r5
 8009484:	f021 0103 	bic.w	r1, r1, #3
 8009488:	3d03      	subs	r5, #3
 800948a:	45a8      	cmp	r8, r5
 800948c:	bf38      	it	cc
 800948e:	2100      	movcc	r1, #0
 8009490:	440b      	add	r3, r1
 8009492:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009496:	b191      	cbz	r1, 80094be <__mdiff+0x11a>
 8009498:	6117      	str	r7, [r2, #16]
 800949a:	e79d      	b.n	80093d8 <__mdiff+0x34>
 800949c:	f854 1b04 	ldr.w	r1, [r4], #4
 80094a0:	46e6      	mov	lr, ip
 80094a2:	0c08      	lsrs	r0, r1, #16
 80094a4:	fa1c fc81 	uxtah	ip, ip, r1
 80094a8:	4471      	add	r1, lr
 80094aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094ae:	b289      	uxth	r1, r1
 80094b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094b4:	f846 1b04 	str.w	r1, [r6], #4
 80094b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094bc:	e7dd      	b.n	800947a <__mdiff+0xd6>
 80094be:	3f01      	subs	r7, #1
 80094c0:	e7e7      	b.n	8009492 <__mdiff+0xee>
 80094c2:	bf00      	nop
 80094c4:	0800b330 	.word	0x0800b330
 80094c8:	0800b341 	.word	0x0800b341

080094cc <__d2b>:
 80094cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094d0:	460f      	mov	r7, r1
 80094d2:	2101      	movs	r1, #1
 80094d4:	ec59 8b10 	vmov	r8, r9, d0
 80094d8:	4616      	mov	r6, r2
 80094da:	f7ff fcd5 	bl	8008e88 <_Balloc>
 80094de:	4604      	mov	r4, r0
 80094e0:	b930      	cbnz	r0, 80094f0 <__d2b+0x24>
 80094e2:	4602      	mov	r2, r0
 80094e4:	4b23      	ldr	r3, [pc, #140]	@ (8009574 <__d2b+0xa8>)
 80094e6:	4824      	ldr	r0, [pc, #144]	@ (8009578 <__d2b+0xac>)
 80094e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80094ec:	f000 fa82 	bl	80099f4 <__assert_func>
 80094f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094f8:	b10d      	cbz	r5, 80094fe <__d2b+0x32>
 80094fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	f1b8 0300 	subs.w	r3, r8, #0
 8009504:	d023      	beq.n	800954e <__d2b+0x82>
 8009506:	4668      	mov	r0, sp
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	f7ff fd84 	bl	8009016 <__lo0bits>
 800950e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009512:	b1d0      	cbz	r0, 800954a <__d2b+0x7e>
 8009514:	f1c0 0320 	rsb	r3, r0, #32
 8009518:	fa02 f303 	lsl.w	r3, r2, r3
 800951c:	430b      	orrs	r3, r1
 800951e:	40c2      	lsrs	r2, r0
 8009520:	6163      	str	r3, [r4, #20]
 8009522:	9201      	str	r2, [sp, #4]
 8009524:	9b01      	ldr	r3, [sp, #4]
 8009526:	61a3      	str	r3, [r4, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	bf0c      	ite	eq
 800952c:	2201      	moveq	r2, #1
 800952e:	2202      	movne	r2, #2
 8009530:	6122      	str	r2, [r4, #16]
 8009532:	b1a5      	cbz	r5, 800955e <__d2b+0x92>
 8009534:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009538:	4405      	add	r5, r0
 800953a:	603d      	str	r5, [r7, #0]
 800953c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009540:	6030      	str	r0, [r6, #0]
 8009542:	4620      	mov	r0, r4
 8009544:	b003      	add	sp, #12
 8009546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800954a:	6161      	str	r1, [r4, #20]
 800954c:	e7ea      	b.n	8009524 <__d2b+0x58>
 800954e:	a801      	add	r0, sp, #4
 8009550:	f7ff fd61 	bl	8009016 <__lo0bits>
 8009554:	9b01      	ldr	r3, [sp, #4]
 8009556:	6163      	str	r3, [r4, #20]
 8009558:	3020      	adds	r0, #32
 800955a:	2201      	movs	r2, #1
 800955c:	e7e8      	b.n	8009530 <__d2b+0x64>
 800955e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009562:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009566:	6038      	str	r0, [r7, #0]
 8009568:	6918      	ldr	r0, [r3, #16]
 800956a:	f7ff fd35 	bl	8008fd8 <__hi0bits>
 800956e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009572:	e7e5      	b.n	8009540 <__d2b+0x74>
 8009574:	0800b330 	.word	0x0800b330
 8009578:	0800b341 	.word	0x0800b341

0800957c <__ssputs_r>:
 800957c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	688e      	ldr	r6, [r1, #8]
 8009582:	461f      	mov	r7, r3
 8009584:	42be      	cmp	r6, r7
 8009586:	680b      	ldr	r3, [r1, #0]
 8009588:	4682      	mov	sl, r0
 800958a:	460c      	mov	r4, r1
 800958c:	4690      	mov	r8, r2
 800958e:	d82d      	bhi.n	80095ec <__ssputs_r+0x70>
 8009590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009594:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009598:	d026      	beq.n	80095e8 <__ssputs_r+0x6c>
 800959a:	6965      	ldr	r5, [r4, #20]
 800959c:	6909      	ldr	r1, [r1, #16]
 800959e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095a2:	eba3 0901 	sub.w	r9, r3, r1
 80095a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095aa:	1c7b      	adds	r3, r7, #1
 80095ac:	444b      	add	r3, r9
 80095ae:	106d      	asrs	r5, r5, #1
 80095b0:	429d      	cmp	r5, r3
 80095b2:	bf38      	it	cc
 80095b4:	461d      	movcc	r5, r3
 80095b6:	0553      	lsls	r3, r2, #21
 80095b8:	d527      	bpl.n	800960a <__ssputs_r+0x8e>
 80095ba:	4629      	mov	r1, r5
 80095bc:	f7ff fbd8 	bl	8008d70 <_malloc_r>
 80095c0:	4606      	mov	r6, r0
 80095c2:	b360      	cbz	r0, 800961e <__ssputs_r+0xa2>
 80095c4:	6921      	ldr	r1, [r4, #16]
 80095c6:	464a      	mov	r2, r9
 80095c8:	f000 fa06 	bl	80099d8 <memcpy>
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095d6:	81a3      	strh	r3, [r4, #12]
 80095d8:	6126      	str	r6, [r4, #16]
 80095da:	6165      	str	r5, [r4, #20]
 80095dc:	444e      	add	r6, r9
 80095de:	eba5 0509 	sub.w	r5, r5, r9
 80095e2:	6026      	str	r6, [r4, #0]
 80095e4:	60a5      	str	r5, [r4, #8]
 80095e6:	463e      	mov	r6, r7
 80095e8:	42be      	cmp	r6, r7
 80095ea:	d900      	bls.n	80095ee <__ssputs_r+0x72>
 80095ec:	463e      	mov	r6, r7
 80095ee:	6820      	ldr	r0, [r4, #0]
 80095f0:	4632      	mov	r2, r6
 80095f2:	4641      	mov	r1, r8
 80095f4:	f000 f9c6 	bl	8009984 <memmove>
 80095f8:	68a3      	ldr	r3, [r4, #8]
 80095fa:	1b9b      	subs	r3, r3, r6
 80095fc:	60a3      	str	r3, [r4, #8]
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	4433      	add	r3, r6
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	2000      	movs	r0, #0
 8009606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960a:	462a      	mov	r2, r5
 800960c:	f000 fa36 	bl	8009a7c <_realloc_r>
 8009610:	4606      	mov	r6, r0
 8009612:	2800      	cmp	r0, #0
 8009614:	d1e0      	bne.n	80095d8 <__ssputs_r+0x5c>
 8009616:	6921      	ldr	r1, [r4, #16]
 8009618:	4650      	mov	r0, sl
 800961a:	f7ff fb35 	bl	8008c88 <_free_r>
 800961e:	230c      	movs	r3, #12
 8009620:	f8ca 3000 	str.w	r3, [sl]
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	e7e9      	b.n	8009606 <__ssputs_r+0x8a>
	...

08009634 <_svfiprintf_r>:
 8009634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	4698      	mov	r8, r3
 800963a:	898b      	ldrh	r3, [r1, #12]
 800963c:	061b      	lsls	r3, r3, #24
 800963e:	b09d      	sub	sp, #116	@ 0x74
 8009640:	4607      	mov	r7, r0
 8009642:	460d      	mov	r5, r1
 8009644:	4614      	mov	r4, r2
 8009646:	d510      	bpl.n	800966a <_svfiprintf_r+0x36>
 8009648:	690b      	ldr	r3, [r1, #16]
 800964a:	b973      	cbnz	r3, 800966a <_svfiprintf_r+0x36>
 800964c:	2140      	movs	r1, #64	@ 0x40
 800964e:	f7ff fb8f 	bl	8008d70 <_malloc_r>
 8009652:	6028      	str	r0, [r5, #0]
 8009654:	6128      	str	r0, [r5, #16]
 8009656:	b930      	cbnz	r0, 8009666 <_svfiprintf_r+0x32>
 8009658:	230c      	movs	r3, #12
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	b01d      	add	sp, #116	@ 0x74
 8009662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009666:	2340      	movs	r3, #64	@ 0x40
 8009668:	616b      	str	r3, [r5, #20]
 800966a:	2300      	movs	r3, #0
 800966c:	9309      	str	r3, [sp, #36]	@ 0x24
 800966e:	2320      	movs	r3, #32
 8009670:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009674:	f8cd 800c 	str.w	r8, [sp, #12]
 8009678:	2330      	movs	r3, #48	@ 0x30
 800967a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009818 <_svfiprintf_r+0x1e4>
 800967e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009682:	f04f 0901 	mov.w	r9, #1
 8009686:	4623      	mov	r3, r4
 8009688:	469a      	mov	sl, r3
 800968a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800968e:	b10a      	cbz	r2, 8009694 <_svfiprintf_r+0x60>
 8009690:	2a25      	cmp	r2, #37	@ 0x25
 8009692:	d1f9      	bne.n	8009688 <_svfiprintf_r+0x54>
 8009694:	ebba 0b04 	subs.w	fp, sl, r4
 8009698:	d00b      	beq.n	80096b2 <_svfiprintf_r+0x7e>
 800969a:	465b      	mov	r3, fp
 800969c:	4622      	mov	r2, r4
 800969e:	4629      	mov	r1, r5
 80096a0:	4638      	mov	r0, r7
 80096a2:	f7ff ff6b 	bl	800957c <__ssputs_r>
 80096a6:	3001      	adds	r0, #1
 80096a8:	f000 80a7 	beq.w	80097fa <_svfiprintf_r+0x1c6>
 80096ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096ae:	445a      	add	r2, fp
 80096b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80096b2:	f89a 3000 	ldrb.w	r3, [sl]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 809f 	beq.w	80097fa <_svfiprintf_r+0x1c6>
 80096bc:	2300      	movs	r3, #0
 80096be:	f04f 32ff 	mov.w	r2, #4294967295
 80096c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096c6:	f10a 0a01 	add.w	sl, sl, #1
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	9307      	str	r3, [sp, #28]
 80096ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80096d4:	4654      	mov	r4, sl
 80096d6:	2205      	movs	r2, #5
 80096d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096dc:	484e      	ldr	r0, [pc, #312]	@ (8009818 <_svfiprintf_r+0x1e4>)
 80096de:	f7f6 fd9f 	bl	8000220 <memchr>
 80096e2:	9a04      	ldr	r2, [sp, #16]
 80096e4:	b9d8      	cbnz	r0, 800971e <_svfiprintf_r+0xea>
 80096e6:	06d0      	lsls	r0, r2, #27
 80096e8:	bf44      	itt	mi
 80096ea:	2320      	movmi	r3, #32
 80096ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096f0:	0711      	lsls	r1, r2, #28
 80096f2:	bf44      	itt	mi
 80096f4:	232b      	movmi	r3, #43	@ 0x2b
 80096f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096fa:	f89a 3000 	ldrb.w	r3, [sl]
 80096fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009700:	d015      	beq.n	800972e <_svfiprintf_r+0xfa>
 8009702:	9a07      	ldr	r2, [sp, #28]
 8009704:	4654      	mov	r4, sl
 8009706:	2000      	movs	r0, #0
 8009708:	f04f 0c0a 	mov.w	ip, #10
 800970c:	4621      	mov	r1, r4
 800970e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009712:	3b30      	subs	r3, #48	@ 0x30
 8009714:	2b09      	cmp	r3, #9
 8009716:	d94b      	bls.n	80097b0 <_svfiprintf_r+0x17c>
 8009718:	b1b0      	cbz	r0, 8009748 <_svfiprintf_r+0x114>
 800971a:	9207      	str	r2, [sp, #28]
 800971c:	e014      	b.n	8009748 <_svfiprintf_r+0x114>
 800971e:	eba0 0308 	sub.w	r3, r0, r8
 8009722:	fa09 f303 	lsl.w	r3, r9, r3
 8009726:	4313      	orrs	r3, r2
 8009728:	9304      	str	r3, [sp, #16]
 800972a:	46a2      	mov	sl, r4
 800972c:	e7d2      	b.n	80096d4 <_svfiprintf_r+0xa0>
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	1d19      	adds	r1, r3, #4
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	9103      	str	r1, [sp, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	bfbb      	ittet	lt
 800973a:	425b      	neglt	r3, r3
 800973c:	f042 0202 	orrlt.w	r2, r2, #2
 8009740:	9307      	strge	r3, [sp, #28]
 8009742:	9307      	strlt	r3, [sp, #28]
 8009744:	bfb8      	it	lt
 8009746:	9204      	strlt	r2, [sp, #16]
 8009748:	7823      	ldrb	r3, [r4, #0]
 800974a:	2b2e      	cmp	r3, #46	@ 0x2e
 800974c:	d10a      	bne.n	8009764 <_svfiprintf_r+0x130>
 800974e:	7863      	ldrb	r3, [r4, #1]
 8009750:	2b2a      	cmp	r3, #42	@ 0x2a
 8009752:	d132      	bne.n	80097ba <_svfiprintf_r+0x186>
 8009754:	9b03      	ldr	r3, [sp, #12]
 8009756:	1d1a      	adds	r2, r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	9203      	str	r2, [sp, #12]
 800975c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009760:	3402      	adds	r4, #2
 8009762:	9305      	str	r3, [sp, #20]
 8009764:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009828 <_svfiprintf_r+0x1f4>
 8009768:	7821      	ldrb	r1, [r4, #0]
 800976a:	2203      	movs	r2, #3
 800976c:	4650      	mov	r0, sl
 800976e:	f7f6 fd57 	bl	8000220 <memchr>
 8009772:	b138      	cbz	r0, 8009784 <_svfiprintf_r+0x150>
 8009774:	9b04      	ldr	r3, [sp, #16]
 8009776:	eba0 000a 	sub.w	r0, r0, sl
 800977a:	2240      	movs	r2, #64	@ 0x40
 800977c:	4082      	lsls	r2, r0
 800977e:	4313      	orrs	r3, r2
 8009780:	3401      	adds	r4, #1
 8009782:	9304      	str	r3, [sp, #16]
 8009784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009788:	4824      	ldr	r0, [pc, #144]	@ (800981c <_svfiprintf_r+0x1e8>)
 800978a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800978e:	2206      	movs	r2, #6
 8009790:	f7f6 fd46 	bl	8000220 <memchr>
 8009794:	2800      	cmp	r0, #0
 8009796:	d036      	beq.n	8009806 <_svfiprintf_r+0x1d2>
 8009798:	4b21      	ldr	r3, [pc, #132]	@ (8009820 <_svfiprintf_r+0x1ec>)
 800979a:	bb1b      	cbnz	r3, 80097e4 <_svfiprintf_r+0x1b0>
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	3307      	adds	r3, #7
 80097a0:	f023 0307 	bic.w	r3, r3, #7
 80097a4:	3308      	adds	r3, #8
 80097a6:	9303      	str	r3, [sp, #12]
 80097a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097aa:	4433      	add	r3, r6
 80097ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ae:	e76a      	b.n	8009686 <_svfiprintf_r+0x52>
 80097b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80097b4:	460c      	mov	r4, r1
 80097b6:	2001      	movs	r0, #1
 80097b8:	e7a8      	b.n	800970c <_svfiprintf_r+0xd8>
 80097ba:	2300      	movs	r3, #0
 80097bc:	3401      	adds	r4, #1
 80097be:	9305      	str	r3, [sp, #20]
 80097c0:	4619      	mov	r1, r3
 80097c2:	f04f 0c0a 	mov.w	ip, #10
 80097c6:	4620      	mov	r0, r4
 80097c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097cc:	3a30      	subs	r2, #48	@ 0x30
 80097ce:	2a09      	cmp	r2, #9
 80097d0:	d903      	bls.n	80097da <_svfiprintf_r+0x1a6>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0c6      	beq.n	8009764 <_svfiprintf_r+0x130>
 80097d6:	9105      	str	r1, [sp, #20]
 80097d8:	e7c4      	b.n	8009764 <_svfiprintf_r+0x130>
 80097da:	fb0c 2101 	mla	r1, ip, r1, r2
 80097de:	4604      	mov	r4, r0
 80097e0:	2301      	movs	r3, #1
 80097e2:	e7f0      	b.n	80097c6 <_svfiprintf_r+0x192>
 80097e4:	ab03      	add	r3, sp, #12
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	462a      	mov	r2, r5
 80097ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009824 <_svfiprintf_r+0x1f0>)
 80097ec:	a904      	add	r1, sp, #16
 80097ee:	4638      	mov	r0, r7
 80097f0:	f7fd fe80 	bl	80074f4 <_printf_float>
 80097f4:	1c42      	adds	r2, r0, #1
 80097f6:	4606      	mov	r6, r0
 80097f8:	d1d6      	bne.n	80097a8 <_svfiprintf_r+0x174>
 80097fa:	89ab      	ldrh	r3, [r5, #12]
 80097fc:	065b      	lsls	r3, r3, #25
 80097fe:	f53f af2d 	bmi.w	800965c <_svfiprintf_r+0x28>
 8009802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009804:	e72c      	b.n	8009660 <_svfiprintf_r+0x2c>
 8009806:	ab03      	add	r3, sp, #12
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	462a      	mov	r2, r5
 800980c:	4b05      	ldr	r3, [pc, #20]	@ (8009824 <_svfiprintf_r+0x1f0>)
 800980e:	a904      	add	r1, sp, #16
 8009810:	4638      	mov	r0, r7
 8009812:	f7fe f907 	bl	8007a24 <_printf_i>
 8009816:	e7ed      	b.n	80097f4 <_svfiprintf_r+0x1c0>
 8009818:	0800b39a 	.word	0x0800b39a
 800981c:	0800b3a4 	.word	0x0800b3a4
 8009820:	080074f5 	.word	0x080074f5
 8009824:	0800957d 	.word	0x0800957d
 8009828:	0800b3a0 	.word	0x0800b3a0

0800982c <__sflush_r>:
 800982c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009834:	0716      	lsls	r6, r2, #28
 8009836:	4605      	mov	r5, r0
 8009838:	460c      	mov	r4, r1
 800983a:	d454      	bmi.n	80098e6 <__sflush_r+0xba>
 800983c:	684b      	ldr	r3, [r1, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	dc02      	bgt.n	8009848 <__sflush_r+0x1c>
 8009842:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009844:	2b00      	cmp	r3, #0
 8009846:	dd48      	ble.n	80098da <__sflush_r+0xae>
 8009848:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800984a:	2e00      	cmp	r6, #0
 800984c:	d045      	beq.n	80098da <__sflush_r+0xae>
 800984e:	2300      	movs	r3, #0
 8009850:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009854:	682f      	ldr	r7, [r5, #0]
 8009856:	6a21      	ldr	r1, [r4, #32]
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	d030      	beq.n	80098be <__sflush_r+0x92>
 800985c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	0759      	lsls	r1, r3, #29
 8009862:	d505      	bpl.n	8009870 <__sflush_r+0x44>
 8009864:	6863      	ldr	r3, [r4, #4]
 8009866:	1ad2      	subs	r2, r2, r3
 8009868:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800986a:	b10b      	cbz	r3, 8009870 <__sflush_r+0x44>
 800986c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800986e:	1ad2      	subs	r2, r2, r3
 8009870:	2300      	movs	r3, #0
 8009872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009874:	6a21      	ldr	r1, [r4, #32]
 8009876:	4628      	mov	r0, r5
 8009878:	47b0      	blx	r6
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	d106      	bne.n	800988e <__sflush_r+0x62>
 8009880:	6829      	ldr	r1, [r5, #0]
 8009882:	291d      	cmp	r1, #29
 8009884:	d82b      	bhi.n	80098de <__sflush_r+0xb2>
 8009886:	4a2a      	ldr	r2, [pc, #168]	@ (8009930 <__sflush_r+0x104>)
 8009888:	40ca      	lsrs	r2, r1
 800988a:	07d6      	lsls	r6, r2, #31
 800988c:	d527      	bpl.n	80098de <__sflush_r+0xb2>
 800988e:	2200      	movs	r2, #0
 8009890:	6062      	str	r2, [r4, #4]
 8009892:	04d9      	lsls	r1, r3, #19
 8009894:	6922      	ldr	r2, [r4, #16]
 8009896:	6022      	str	r2, [r4, #0]
 8009898:	d504      	bpl.n	80098a4 <__sflush_r+0x78>
 800989a:	1c42      	adds	r2, r0, #1
 800989c:	d101      	bne.n	80098a2 <__sflush_r+0x76>
 800989e:	682b      	ldr	r3, [r5, #0]
 80098a0:	b903      	cbnz	r3, 80098a4 <__sflush_r+0x78>
 80098a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80098a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098a6:	602f      	str	r7, [r5, #0]
 80098a8:	b1b9      	cbz	r1, 80098da <__sflush_r+0xae>
 80098aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098ae:	4299      	cmp	r1, r3
 80098b0:	d002      	beq.n	80098b8 <__sflush_r+0x8c>
 80098b2:	4628      	mov	r0, r5
 80098b4:	f7ff f9e8 	bl	8008c88 <_free_r>
 80098b8:	2300      	movs	r3, #0
 80098ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80098bc:	e00d      	b.n	80098da <__sflush_r+0xae>
 80098be:	2301      	movs	r3, #1
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b0      	blx	r6
 80098c4:	4602      	mov	r2, r0
 80098c6:	1c50      	adds	r0, r2, #1
 80098c8:	d1c9      	bne.n	800985e <__sflush_r+0x32>
 80098ca:	682b      	ldr	r3, [r5, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0c6      	beq.n	800985e <__sflush_r+0x32>
 80098d0:	2b1d      	cmp	r3, #29
 80098d2:	d001      	beq.n	80098d8 <__sflush_r+0xac>
 80098d4:	2b16      	cmp	r3, #22
 80098d6:	d11e      	bne.n	8009916 <__sflush_r+0xea>
 80098d8:	602f      	str	r7, [r5, #0]
 80098da:	2000      	movs	r0, #0
 80098dc:	e022      	b.n	8009924 <__sflush_r+0xf8>
 80098de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098e2:	b21b      	sxth	r3, r3
 80098e4:	e01b      	b.n	800991e <__sflush_r+0xf2>
 80098e6:	690f      	ldr	r7, [r1, #16]
 80098e8:	2f00      	cmp	r7, #0
 80098ea:	d0f6      	beq.n	80098da <__sflush_r+0xae>
 80098ec:	0793      	lsls	r3, r2, #30
 80098ee:	680e      	ldr	r6, [r1, #0]
 80098f0:	bf08      	it	eq
 80098f2:	694b      	ldreq	r3, [r1, #20]
 80098f4:	600f      	str	r7, [r1, #0]
 80098f6:	bf18      	it	ne
 80098f8:	2300      	movne	r3, #0
 80098fa:	eba6 0807 	sub.w	r8, r6, r7
 80098fe:	608b      	str	r3, [r1, #8]
 8009900:	f1b8 0f00 	cmp.w	r8, #0
 8009904:	dde9      	ble.n	80098da <__sflush_r+0xae>
 8009906:	6a21      	ldr	r1, [r4, #32]
 8009908:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800990a:	4643      	mov	r3, r8
 800990c:	463a      	mov	r2, r7
 800990e:	4628      	mov	r0, r5
 8009910:	47b0      	blx	r6
 8009912:	2800      	cmp	r0, #0
 8009914:	dc08      	bgt.n	8009928 <__sflush_r+0xfc>
 8009916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800991e:	81a3      	strh	r3, [r4, #12]
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009928:	4407      	add	r7, r0
 800992a:	eba8 0800 	sub.w	r8, r8, r0
 800992e:	e7e7      	b.n	8009900 <__sflush_r+0xd4>
 8009930:	20400001 	.word	0x20400001

08009934 <_fflush_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	690b      	ldr	r3, [r1, #16]
 8009938:	4605      	mov	r5, r0
 800993a:	460c      	mov	r4, r1
 800993c:	b913      	cbnz	r3, 8009944 <_fflush_r+0x10>
 800993e:	2500      	movs	r5, #0
 8009940:	4628      	mov	r0, r5
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	b118      	cbz	r0, 800994e <_fflush_r+0x1a>
 8009946:	6a03      	ldr	r3, [r0, #32]
 8009948:	b90b      	cbnz	r3, 800994e <_fflush_r+0x1a>
 800994a:	f7fe fa15 	bl	8007d78 <__sinit>
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0f3      	beq.n	800993e <_fflush_r+0xa>
 8009956:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009958:	07d0      	lsls	r0, r2, #31
 800995a:	d404      	bmi.n	8009966 <_fflush_r+0x32>
 800995c:	0599      	lsls	r1, r3, #22
 800995e:	d402      	bmi.n	8009966 <_fflush_r+0x32>
 8009960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009962:	f7fe fb36 	bl	8007fd2 <__retarget_lock_acquire_recursive>
 8009966:	4628      	mov	r0, r5
 8009968:	4621      	mov	r1, r4
 800996a:	f7ff ff5f 	bl	800982c <__sflush_r>
 800996e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009970:	07da      	lsls	r2, r3, #31
 8009972:	4605      	mov	r5, r0
 8009974:	d4e4      	bmi.n	8009940 <_fflush_r+0xc>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	059b      	lsls	r3, r3, #22
 800997a:	d4e1      	bmi.n	8009940 <_fflush_r+0xc>
 800997c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800997e:	f7fe fb29 	bl	8007fd4 <__retarget_lock_release_recursive>
 8009982:	e7dd      	b.n	8009940 <_fflush_r+0xc>

08009984 <memmove>:
 8009984:	4288      	cmp	r0, r1
 8009986:	b510      	push	{r4, lr}
 8009988:	eb01 0402 	add.w	r4, r1, r2
 800998c:	d902      	bls.n	8009994 <memmove+0x10>
 800998e:	4284      	cmp	r4, r0
 8009990:	4623      	mov	r3, r4
 8009992:	d807      	bhi.n	80099a4 <memmove+0x20>
 8009994:	1e43      	subs	r3, r0, #1
 8009996:	42a1      	cmp	r1, r4
 8009998:	d008      	beq.n	80099ac <memmove+0x28>
 800999a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800999e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099a2:	e7f8      	b.n	8009996 <memmove+0x12>
 80099a4:	4402      	add	r2, r0
 80099a6:	4601      	mov	r1, r0
 80099a8:	428a      	cmp	r2, r1
 80099aa:	d100      	bne.n	80099ae <memmove+0x2a>
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099b6:	e7f7      	b.n	80099a8 <memmove+0x24>

080099b8 <_sbrk_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d06      	ldr	r5, [pc, #24]	@ (80099d4 <_sbrk_r+0x1c>)
 80099bc:	2300      	movs	r3, #0
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	602b      	str	r3, [r5, #0]
 80099c4:	f7f8 faa2 	bl	8001f0c <_sbrk>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_sbrk_r+0x1a>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_sbrk_r+0x1a>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	200007f4 	.word	0x200007f4

080099d8 <memcpy>:
 80099d8:	440a      	add	r2, r1
 80099da:	4291      	cmp	r1, r2
 80099dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80099e0:	d100      	bne.n	80099e4 <memcpy+0xc>
 80099e2:	4770      	bx	lr
 80099e4:	b510      	push	{r4, lr}
 80099e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099ee:	4291      	cmp	r1, r2
 80099f0:	d1f9      	bne.n	80099e6 <memcpy+0xe>
 80099f2:	bd10      	pop	{r4, pc}

080099f4 <__assert_func>:
 80099f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099f6:	4614      	mov	r4, r2
 80099f8:	461a      	mov	r2, r3
 80099fa:	4b09      	ldr	r3, [pc, #36]	@ (8009a20 <__assert_func+0x2c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4605      	mov	r5, r0
 8009a00:	68d8      	ldr	r0, [r3, #12]
 8009a02:	b14c      	cbz	r4, 8009a18 <__assert_func+0x24>
 8009a04:	4b07      	ldr	r3, [pc, #28]	@ (8009a24 <__assert_func+0x30>)
 8009a06:	9100      	str	r1, [sp, #0]
 8009a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a0c:	4906      	ldr	r1, [pc, #24]	@ (8009a28 <__assert_func+0x34>)
 8009a0e:	462b      	mov	r3, r5
 8009a10:	f000 f870 	bl	8009af4 <fiprintf>
 8009a14:	f000 f880 	bl	8009b18 <abort>
 8009a18:	4b04      	ldr	r3, [pc, #16]	@ (8009a2c <__assert_func+0x38>)
 8009a1a:	461c      	mov	r4, r3
 8009a1c:	e7f3      	b.n	8009a06 <__assert_func+0x12>
 8009a1e:	bf00      	nop
 8009a20:	2000001c 	.word	0x2000001c
 8009a24:	0800b3b5 	.word	0x0800b3b5
 8009a28:	0800b3c2 	.word	0x0800b3c2
 8009a2c:	0800b3f0 	.word	0x0800b3f0

08009a30 <_calloc_r>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	fba1 5402 	umull	r5, r4, r1, r2
 8009a36:	b934      	cbnz	r4, 8009a46 <_calloc_r+0x16>
 8009a38:	4629      	mov	r1, r5
 8009a3a:	f7ff f999 	bl	8008d70 <_malloc_r>
 8009a3e:	4606      	mov	r6, r0
 8009a40:	b928      	cbnz	r0, 8009a4e <_calloc_r+0x1e>
 8009a42:	4630      	mov	r0, r6
 8009a44:	bd70      	pop	{r4, r5, r6, pc}
 8009a46:	220c      	movs	r2, #12
 8009a48:	6002      	str	r2, [r0, #0]
 8009a4a:	2600      	movs	r6, #0
 8009a4c:	e7f9      	b.n	8009a42 <_calloc_r+0x12>
 8009a4e:	462a      	mov	r2, r5
 8009a50:	4621      	mov	r1, r4
 8009a52:	f7fe fa40 	bl	8007ed6 <memset>
 8009a56:	e7f4      	b.n	8009a42 <_calloc_r+0x12>

08009a58 <__ascii_mbtowc>:
 8009a58:	b082      	sub	sp, #8
 8009a5a:	b901      	cbnz	r1, 8009a5e <__ascii_mbtowc+0x6>
 8009a5c:	a901      	add	r1, sp, #4
 8009a5e:	b142      	cbz	r2, 8009a72 <__ascii_mbtowc+0x1a>
 8009a60:	b14b      	cbz	r3, 8009a76 <__ascii_mbtowc+0x1e>
 8009a62:	7813      	ldrb	r3, [r2, #0]
 8009a64:	600b      	str	r3, [r1, #0]
 8009a66:	7812      	ldrb	r2, [r2, #0]
 8009a68:	1e10      	subs	r0, r2, #0
 8009a6a:	bf18      	it	ne
 8009a6c:	2001      	movne	r0, #1
 8009a6e:	b002      	add	sp, #8
 8009a70:	4770      	bx	lr
 8009a72:	4610      	mov	r0, r2
 8009a74:	e7fb      	b.n	8009a6e <__ascii_mbtowc+0x16>
 8009a76:	f06f 0001 	mvn.w	r0, #1
 8009a7a:	e7f8      	b.n	8009a6e <__ascii_mbtowc+0x16>

08009a7c <_realloc_r>:
 8009a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a80:	4607      	mov	r7, r0
 8009a82:	4614      	mov	r4, r2
 8009a84:	460d      	mov	r5, r1
 8009a86:	b921      	cbnz	r1, 8009a92 <_realloc_r+0x16>
 8009a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	f7ff b96f 	b.w	8008d70 <_malloc_r>
 8009a92:	b92a      	cbnz	r2, 8009aa0 <_realloc_r+0x24>
 8009a94:	f7ff f8f8 	bl	8008c88 <_free_r>
 8009a98:	4625      	mov	r5, r4
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa0:	f000 f841 	bl	8009b26 <_malloc_usable_size_r>
 8009aa4:	4284      	cmp	r4, r0
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	d802      	bhi.n	8009ab0 <_realloc_r+0x34>
 8009aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009aae:	d8f4      	bhi.n	8009a9a <_realloc_r+0x1e>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	f7ff f95c 	bl	8008d70 <_malloc_r>
 8009ab8:	4680      	mov	r8, r0
 8009aba:	b908      	cbnz	r0, 8009ac0 <_realloc_r+0x44>
 8009abc:	4645      	mov	r5, r8
 8009abe:	e7ec      	b.n	8009a9a <_realloc_r+0x1e>
 8009ac0:	42b4      	cmp	r4, r6
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	bf28      	it	cs
 8009ac8:	4632      	movcs	r2, r6
 8009aca:	f7ff ff85 	bl	80099d8 <memcpy>
 8009ace:	4629      	mov	r1, r5
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff f8d9 	bl	8008c88 <_free_r>
 8009ad6:	e7f1      	b.n	8009abc <_realloc_r+0x40>

08009ad8 <__ascii_wctomb>:
 8009ad8:	4603      	mov	r3, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	b141      	cbz	r1, 8009af0 <__ascii_wctomb+0x18>
 8009ade:	2aff      	cmp	r2, #255	@ 0xff
 8009ae0:	d904      	bls.n	8009aec <__ascii_wctomb+0x14>
 8009ae2:	228a      	movs	r2, #138	@ 0x8a
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aea:	4770      	bx	lr
 8009aec:	700a      	strb	r2, [r1, #0]
 8009aee:	2001      	movs	r0, #1
 8009af0:	4770      	bx	lr
	...

08009af4 <fiprintf>:
 8009af4:	b40e      	push	{r1, r2, r3}
 8009af6:	b503      	push	{r0, r1, lr}
 8009af8:	4601      	mov	r1, r0
 8009afa:	ab03      	add	r3, sp, #12
 8009afc:	4805      	ldr	r0, [pc, #20]	@ (8009b14 <fiprintf+0x20>)
 8009afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b02:	6800      	ldr	r0, [r0, #0]
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	f000 f83f 	bl	8009b88 <_vfiprintf_r>
 8009b0a:	b002      	add	sp, #8
 8009b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b10:	b003      	add	sp, #12
 8009b12:	4770      	bx	lr
 8009b14:	2000001c 	.word	0x2000001c

08009b18 <abort>:
 8009b18:	b508      	push	{r3, lr}
 8009b1a:	2006      	movs	r0, #6
 8009b1c:	f000 fa08 	bl	8009f30 <raise>
 8009b20:	2001      	movs	r0, #1
 8009b22:	f7f8 f997 	bl	8001e54 <_exit>

08009b26 <_malloc_usable_size_r>:
 8009b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b2a:	1f18      	subs	r0, r3, #4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	bfbc      	itt	lt
 8009b30:	580b      	ldrlt	r3, [r1, r0]
 8009b32:	18c0      	addlt	r0, r0, r3
 8009b34:	4770      	bx	lr

08009b36 <__sfputc_r>:
 8009b36:	6893      	ldr	r3, [r2, #8]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	b410      	push	{r4}
 8009b3e:	6093      	str	r3, [r2, #8]
 8009b40:	da08      	bge.n	8009b54 <__sfputc_r+0x1e>
 8009b42:	6994      	ldr	r4, [r2, #24]
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	db01      	blt.n	8009b4c <__sfputc_r+0x16>
 8009b48:	290a      	cmp	r1, #10
 8009b4a:	d103      	bne.n	8009b54 <__sfputc_r+0x1e>
 8009b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b50:	f000 b932 	b.w	8009db8 <__swbuf_r>
 8009b54:	6813      	ldr	r3, [r2, #0]
 8009b56:	1c58      	adds	r0, r3, #1
 8009b58:	6010      	str	r0, [r2, #0]
 8009b5a:	7019      	strb	r1, [r3, #0]
 8009b5c:	4608      	mov	r0, r1
 8009b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <__sfputs_r>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	4606      	mov	r6, r0
 8009b68:	460f      	mov	r7, r1
 8009b6a:	4614      	mov	r4, r2
 8009b6c:	18d5      	adds	r5, r2, r3
 8009b6e:	42ac      	cmp	r4, r5
 8009b70:	d101      	bne.n	8009b76 <__sfputs_r+0x12>
 8009b72:	2000      	movs	r0, #0
 8009b74:	e007      	b.n	8009b86 <__sfputs_r+0x22>
 8009b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b7a:	463a      	mov	r2, r7
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff ffda 	bl	8009b36 <__sfputc_r>
 8009b82:	1c43      	adds	r3, r0, #1
 8009b84:	d1f3      	bne.n	8009b6e <__sfputs_r+0xa>
 8009b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b88 <_vfiprintf_r>:
 8009b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	b09d      	sub	sp, #116	@ 0x74
 8009b90:	4614      	mov	r4, r2
 8009b92:	4698      	mov	r8, r3
 8009b94:	4606      	mov	r6, r0
 8009b96:	b118      	cbz	r0, 8009ba0 <_vfiprintf_r+0x18>
 8009b98:	6a03      	ldr	r3, [r0, #32]
 8009b9a:	b90b      	cbnz	r3, 8009ba0 <_vfiprintf_r+0x18>
 8009b9c:	f7fe f8ec 	bl	8007d78 <__sinit>
 8009ba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ba2:	07d9      	lsls	r1, r3, #31
 8009ba4:	d405      	bmi.n	8009bb2 <_vfiprintf_r+0x2a>
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	059a      	lsls	r2, r3, #22
 8009baa:	d402      	bmi.n	8009bb2 <_vfiprintf_r+0x2a>
 8009bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bae:	f7fe fa10 	bl	8007fd2 <__retarget_lock_acquire_recursive>
 8009bb2:	89ab      	ldrh	r3, [r5, #12]
 8009bb4:	071b      	lsls	r3, r3, #28
 8009bb6:	d501      	bpl.n	8009bbc <_vfiprintf_r+0x34>
 8009bb8:	692b      	ldr	r3, [r5, #16]
 8009bba:	b99b      	cbnz	r3, 8009be4 <_vfiprintf_r+0x5c>
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f000 f938 	bl	8009e34 <__swsetup_r>
 8009bc4:	b170      	cbz	r0, 8009be4 <_vfiprintf_r+0x5c>
 8009bc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bc8:	07dc      	lsls	r4, r3, #31
 8009bca:	d504      	bpl.n	8009bd6 <_vfiprintf_r+0x4e>
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	b01d      	add	sp, #116	@ 0x74
 8009bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd6:	89ab      	ldrh	r3, [r5, #12]
 8009bd8:	0598      	lsls	r0, r3, #22
 8009bda:	d4f7      	bmi.n	8009bcc <_vfiprintf_r+0x44>
 8009bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bde:	f7fe f9f9 	bl	8007fd4 <__retarget_lock_release_recursive>
 8009be2:	e7f3      	b.n	8009bcc <_vfiprintf_r+0x44>
 8009be4:	2300      	movs	r3, #0
 8009be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009be8:	2320      	movs	r3, #32
 8009bea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bf2:	2330      	movs	r3, #48	@ 0x30
 8009bf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009da4 <_vfiprintf_r+0x21c>
 8009bf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bfc:	f04f 0901 	mov.w	r9, #1
 8009c00:	4623      	mov	r3, r4
 8009c02:	469a      	mov	sl, r3
 8009c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c08:	b10a      	cbz	r2, 8009c0e <_vfiprintf_r+0x86>
 8009c0a:	2a25      	cmp	r2, #37	@ 0x25
 8009c0c:	d1f9      	bne.n	8009c02 <_vfiprintf_r+0x7a>
 8009c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c12:	d00b      	beq.n	8009c2c <_vfiprintf_r+0xa4>
 8009c14:	465b      	mov	r3, fp
 8009c16:	4622      	mov	r2, r4
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f7ff ffa2 	bl	8009b64 <__sfputs_r>
 8009c20:	3001      	adds	r0, #1
 8009c22:	f000 80a7 	beq.w	8009d74 <_vfiprintf_r+0x1ec>
 8009c26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c28:	445a      	add	r2, fp
 8009c2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 809f 	beq.w	8009d74 <_vfiprintf_r+0x1ec>
 8009c36:	2300      	movs	r3, #0
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c40:	f10a 0a01 	add.w	sl, sl, #1
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	9307      	str	r3, [sp, #28]
 8009c48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c4e:	4654      	mov	r4, sl
 8009c50:	2205      	movs	r2, #5
 8009c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c56:	4853      	ldr	r0, [pc, #332]	@ (8009da4 <_vfiprintf_r+0x21c>)
 8009c58:	f7f6 fae2 	bl	8000220 <memchr>
 8009c5c:	9a04      	ldr	r2, [sp, #16]
 8009c5e:	b9d8      	cbnz	r0, 8009c98 <_vfiprintf_r+0x110>
 8009c60:	06d1      	lsls	r1, r2, #27
 8009c62:	bf44      	itt	mi
 8009c64:	2320      	movmi	r3, #32
 8009c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c6a:	0713      	lsls	r3, r2, #28
 8009c6c:	bf44      	itt	mi
 8009c6e:	232b      	movmi	r3, #43	@ 0x2b
 8009c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c74:	f89a 3000 	ldrb.w	r3, [sl]
 8009c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c7a:	d015      	beq.n	8009ca8 <_vfiprintf_r+0x120>
 8009c7c:	9a07      	ldr	r2, [sp, #28]
 8009c7e:	4654      	mov	r4, sl
 8009c80:	2000      	movs	r0, #0
 8009c82:	f04f 0c0a 	mov.w	ip, #10
 8009c86:	4621      	mov	r1, r4
 8009c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c8c:	3b30      	subs	r3, #48	@ 0x30
 8009c8e:	2b09      	cmp	r3, #9
 8009c90:	d94b      	bls.n	8009d2a <_vfiprintf_r+0x1a2>
 8009c92:	b1b0      	cbz	r0, 8009cc2 <_vfiprintf_r+0x13a>
 8009c94:	9207      	str	r2, [sp, #28]
 8009c96:	e014      	b.n	8009cc2 <_vfiprintf_r+0x13a>
 8009c98:	eba0 0308 	sub.w	r3, r0, r8
 8009c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	9304      	str	r3, [sp, #16]
 8009ca4:	46a2      	mov	sl, r4
 8009ca6:	e7d2      	b.n	8009c4e <_vfiprintf_r+0xc6>
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	1d19      	adds	r1, r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	9103      	str	r1, [sp, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bfbb      	ittet	lt
 8009cb4:	425b      	neglt	r3, r3
 8009cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cba:	9307      	strge	r3, [sp, #28]
 8009cbc:	9307      	strlt	r3, [sp, #28]
 8009cbe:	bfb8      	it	lt
 8009cc0:	9204      	strlt	r2, [sp, #16]
 8009cc2:	7823      	ldrb	r3, [r4, #0]
 8009cc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cc6:	d10a      	bne.n	8009cde <_vfiprintf_r+0x156>
 8009cc8:	7863      	ldrb	r3, [r4, #1]
 8009cca:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ccc:	d132      	bne.n	8009d34 <_vfiprintf_r+0x1ac>
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	1d1a      	adds	r2, r3, #4
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	9203      	str	r2, [sp, #12]
 8009cd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cda:	3402      	adds	r4, #2
 8009cdc:	9305      	str	r3, [sp, #20]
 8009cde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009db4 <_vfiprintf_r+0x22c>
 8009ce2:	7821      	ldrb	r1, [r4, #0]
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	4650      	mov	r0, sl
 8009ce8:	f7f6 fa9a 	bl	8000220 <memchr>
 8009cec:	b138      	cbz	r0, 8009cfe <_vfiprintf_r+0x176>
 8009cee:	9b04      	ldr	r3, [sp, #16]
 8009cf0:	eba0 000a 	sub.w	r0, r0, sl
 8009cf4:	2240      	movs	r2, #64	@ 0x40
 8009cf6:	4082      	lsls	r2, r0
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	3401      	adds	r4, #1
 8009cfc:	9304      	str	r3, [sp, #16]
 8009cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d02:	4829      	ldr	r0, [pc, #164]	@ (8009da8 <_vfiprintf_r+0x220>)
 8009d04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d08:	2206      	movs	r2, #6
 8009d0a:	f7f6 fa89 	bl	8000220 <memchr>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d03f      	beq.n	8009d92 <_vfiprintf_r+0x20a>
 8009d12:	4b26      	ldr	r3, [pc, #152]	@ (8009dac <_vfiprintf_r+0x224>)
 8009d14:	bb1b      	cbnz	r3, 8009d5e <_vfiprintf_r+0x1d6>
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	3307      	adds	r3, #7
 8009d1a:	f023 0307 	bic.w	r3, r3, #7
 8009d1e:	3308      	adds	r3, #8
 8009d20:	9303      	str	r3, [sp, #12]
 8009d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d24:	443b      	add	r3, r7
 8009d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d28:	e76a      	b.n	8009c00 <_vfiprintf_r+0x78>
 8009d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d2e:	460c      	mov	r4, r1
 8009d30:	2001      	movs	r0, #1
 8009d32:	e7a8      	b.n	8009c86 <_vfiprintf_r+0xfe>
 8009d34:	2300      	movs	r3, #0
 8009d36:	3401      	adds	r4, #1
 8009d38:	9305      	str	r3, [sp, #20]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	f04f 0c0a 	mov.w	ip, #10
 8009d40:	4620      	mov	r0, r4
 8009d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d46:	3a30      	subs	r2, #48	@ 0x30
 8009d48:	2a09      	cmp	r2, #9
 8009d4a:	d903      	bls.n	8009d54 <_vfiprintf_r+0x1cc>
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0c6      	beq.n	8009cde <_vfiprintf_r+0x156>
 8009d50:	9105      	str	r1, [sp, #20]
 8009d52:	e7c4      	b.n	8009cde <_vfiprintf_r+0x156>
 8009d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d58:	4604      	mov	r4, r0
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e7f0      	b.n	8009d40 <_vfiprintf_r+0x1b8>
 8009d5e:	ab03      	add	r3, sp, #12
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	462a      	mov	r2, r5
 8009d64:	4b12      	ldr	r3, [pc, #72]	@ (8009db0 <_vfiprintf_r+0x228>)
 8009d66:	a904      	add	r1, sp, #16
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f7fd fbc3 	bl	80074f4 <_printf_float>
 8009d6e:	4607      	mov	r7, r0
 8009d70:	1c78      	adds	r0, r7, #1
 8009d72:	d1d6      	bne.n	8009d22 <_vfiprintf_r+0x19a>
 8009d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d76:	07d9      	lsls	r1, r3, #31
 8009d78:	d405      	bmi.n	8009d86 <_vfiprintf_r+0x1fe>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	059a      	lsls	r2, r3, #22
 8009d7e:	d402      	bmi.n	8009d86 <_vfiprintf_r+0x1fe>
 8009d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d82:	f7fe f927 	bl	8007fd4 <__retarget_lock_release_recursive>
 8009d86:	89ab      	ldrh	r3, [r5, #12]
 8009d88:	065b      	lsls	r3, r3, #25
 8009d8a:	f53f af1f 	bmi.w	8009bcc <_vfiprintf_r+0x44>
 8009d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d90:	e71e      	b.n	8009bd0 <_vfiprintf_r+0x48>
 8009d92:	ab03      	add	r3, sp, #12
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	462a      	mov	r2, r5
 8009d98:	4b05      	ldr	r3, [pc, #20]	@ (8009db0 <_vfiprintf_r+0x228>)
 8009d9a:	a904      	add	r1, sp, #16
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7fd fe41 	bl	8007a24 <_printf_i>
 8009da2:	e7e4      	b.n	8009d6e <_vfiprintf_r+0x1e6>
 8009da4:	0800b39a 	.word	0x0800b39a
 8009da8:	0800b3a4 	.word	0x0800b3a4
 8009dac:	080074f5 	.word	0x080074f5
 8009db0:	08009b65 	.word	0x08009b65
 8009db4:	0800b3a0 	.word	0x0800b3a0

08009db8 <__swbuf_r>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	460e      	mov	r6, r1
 8009dbc:	4614      	mov	r4, r2
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	b118      	cbz	r0, 8009dca <__swbuf_r+0x12>
 8009dc2:	6a03      	ldr	r3, [r0, #32]
 8009dc4:	b90b      	cbnz	r3, 8009dca <__swbuf_r+0x12>
 8009dc6:	f7fd ffd7 	bl	8007d78 <__sinit>
 8009dca:	69a3      	ldr	r3, [r4, #24]
 8009dcc:	60a3      	str	r3, [r4, #8]
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	071a      	lsls	r2, r3, #28
 8009dd2:	d501      	bpl.n	8009dd8 <__swbuf_r+0x20>
 8009dd4:	6923      	ldr	r3, [r4, #16]
 8009dd6:	b943      	cbnz	r3, 8009dea <__swbuf_r+0x32>
 8009dd8:	4621      	mov	r1, r4
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f000 f82a 	bl	8009e34 <__swsetup_r>
 8009de0:	b118      	cbz	r0, 8009dea <__swbuf_r+0x32>
 8009de2:	f04f 37ff 	mov.w	r7, #4294967295
 8009de6:	4638      	mov	r0, r7
 8009de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	6922      	ldr	r2, [r4, #16]
 8009dee:	1a98      	subs	r0, r3, r2
 8009df0:	6963      	ldr	r3, [r4, #20]
 8009df2:	b2f6      	uxtb	r6, r6
 8009df4:	4283      	cmp	r3, r0
 8009df6:	4637      	mov	r7, r6
 8009df8:	dc05      	bgt.n	8009e06 <__swbuf_r+0x4e>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f7ff fd99 	bl	8009934 <_fflush_r>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d1ed      	bne.n	8009de2 <__swbuf_r+0x2a>
 8009e06:	68a3      	ldr	r3, [r4, #8]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	60a3      	str	r3, [r4, #8]
 8009e0c:	6823      	ldr	r3, [r4, #0]
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	6022      	str	r2, [r4, #0]
 8009e12:	701e      	strb	r6, [r3, #0]
 8009e14:	6962      	ldr	r2, [r4, #20]
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d004      	beq.n	8009e26 <__swbuf_r+0x6e>
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	07db      	lsls	r3, r3, #31
 8009e20:	d5e1      	bpl.n	8009de6 <__swbuf_r+0x2e>
 8009e22:	2e0a      	cmp	r6, #10
 8009e24:	d1df      	bne.n	8009de6 <__swbuf_r+0x2e>
 8009e26:	4621      	mov	r1, r4
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f7ff fd83 	bl	8009934 <_fflush_r>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d0d9      	beq.n	8009de6 <__swbuf_r+0x2e>
 8009e32:	e7d6      	b.n	8009de2 <__swbuf_r+0x2a>

08009e34 <__swsetup_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4b29      	ldr	r3, [pc, #164]	@ (8009edc <__swsetup_r+0xa8>)
 8009e38:	4605      	mov	r5, r0
 8009e3a:	6818      	ldr	r0, [r3, #0]
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	b118      	cbz	r0, 8009e48 <__swsetup_r+0x14>
 8009e40:	6a03      	ldr	r3, [r0, #32]
 8009e42:	b90b      	cbnz	r3, 8009e48 <__swsetup_r+0x14>
 8009e44:	f7fd ff98 	bl	8007d78 <__sinit>
 8009e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e4c:	0719      	lsls	r1, r3, #28
 8009e4e:	d422      	bmi.n	8009e96 <__swsetup_r+0x62>
 8009e50:	06da      	lsls	r2, r3, #27
 8009e52:	d407      	bmi.n	8009e64 <__swsetup_r+0x30>
 8009e54:	2209      	movs	r2, #9
 8009e56:	602a      	str	r2, [r5, #0]
 8009e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e5c:	81a3      	strh	r3, [r4, #12]
 8009e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e62:	e033      	b.n	8009ecc <__swsetup_r+0x98>
 8009e64:	0758      	lsls	r0, r3, #29
 8009e66:	d512      	bpl.n	8009e8e <__swsetup_r+0x5a>
 8009e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e6a:	b141      	cbz	r1, 8009e7e <__swsetup_r+0x4a>
 8009e6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e70:	4299      	cmp	r1, r3
 8009e72:	d002      	beq.n	8009e7a <__swsetup_r+0x46>
 8009e74:	4628      	mov	r0, r5
 8009e76:	f7fe ff07 	bl	8008c88 <_free_r>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	2300      	movs	r3, #0
 8009e88:	6063      	str	r3, [r4, #4]
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f043 0308 	orr.w	r3, r3, #8
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	b94b      	cbnz	r3, 8009eae <__swsetup_r+0x7a>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ea4:	d003      	beq.n	8009eae <__swsetup_r+0x7a>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	f000 f883 	bl	8009fb4 <__smakebuf_r>
 8009eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb2:	f013 0201 	ands.w	r2, r3, #1
 8009eb6:	d00a      	beq.n	8009ece <__swsetup_r+0x9a>
 8009eb8:	2200      	movs	r2, #0
 8009eba:	60a2      	str	r2, [r4, #8]
 8009ebc:	6962      	ldr	r2, [r4, #20]
 8009ebe:	4252      	negs	r2, r2
 8009ec0:	61a2      	str	r2, [r4, #24]
 8009ec2:	6922      	ldr	r2, [r4, #16]
 8009ec4:	b942      	cbnz	r2, 8009ed8 <__swsetup_r+0xa4>
 8009ec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009eca:	d1c5      	bne.n	8009e58 <__swsetup_r+0x24>
 8009ecc:	bd38      	pop	{r3, r4, r5, pc}
 8009ece:	0799      	lsls	r1, r3, #30
 8009ed0:	bf58      	it	pl
 8009ed2:	6962      	ldrpl	r2, [r4, #20]
 8009ed4:	60a2      	str	r2, [r4, #8]
 8009ed6:	e7f4      	b.n	8009ec2 <__swsetup_r+0x8e>
 8009ed8:	2000      	movs	r0, #0
 8009eda:	e7f7      	b.n	8009ecc <__swsetup_r+0x98>
 8009edc:	2000001c 	.word	0x2000001c

08009ee0 <_raise_r>:
 8009ee0:	291f      	cmp	r1, #31
 8009ee2:	b538      	push	{r3, r4, r5, lr}
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	d904      	bls.n	8009ef4 <_raise_r+0x14>
 8009eea:	2316      	movs	r3, #22
 8009eec:	6003      	str	r3, [r0, #0]
 8009eee:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ef6:	b112      	cbz	r2, 8009efe <_raise_r+0x1e>
 8009ef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009efc:	b94b      	cbnz	r3, 8009f12 <_raise_r+0x32>
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 f830 	bl	8009f64 <_getpid_r>
 8009f04:	4622      	mov	r2, r4
 8009f06:	4601      	mov	r1, r0
 8009f08:	4628      	mov	r0, r5
 8009f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f0e:	f000 b817 	b.w	8009f40 <_kill_r>
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d00a      	beq.n	8009f2c <_raise_r+0x4c>
 8009f16:	1c59      	adds	r1, r3, #1
 8009f18:	d103      	bne.n	8009f22 <_raise_r+0x42>
 8009f1a:	2316      	movs	r3, #22
 8009f1c:	6003      	str	r3, [r0, #0]
 8009f1e:	2001      	movs	r0, #1
 8009f20:	e7e7      	b.n	8009ef2 <_raise_r+0x12>
 8009f22:	2100      	movs	r1, #0
 8009f24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f28:	4620      	mov	r0, r4
 8009f2a:	4798      	blx	r3
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	e7e0      	b.n	8009ef2 <_raise_r+0x12>

08009f30 <raise>:
 8009f30:	4b02      	ldr	r3, [pc, #8]	@ (8009f3c <raise+0xc>)
 8009f32:	4601      	mov	r1, r0
 8009f34:	6818      	ldr	r0, [r3, #0]
 8009f36:	f7ff bfd3 	b.w	8009ee0 <_raise_r>
 8009f3a:	bf00      	nop
 8009f3c:	2000001c 	.word	0x2000001c

08009f40 <_kill_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4d07      	ldr	r5, [pc, #28]	@ (8009f60 <_kill_r+0x20>)
 8009f44:	2300      	movs	r3, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	4608      	mov	r0, r1
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	602b      	str	r3, [r5, #0]
 8009f4e:	f7f7 ff71 	bl	8001e34 <_kill>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	d102      	bne.n	8009f5c <_kill_r+0x1c>
 8009f56:	682b      	ldr	r3, [r5, #0]
 8009f58:	b103      	cbz	r3, 8009f5c <_kill_r+0x1c>
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	bd38      	pop	{r3, r4, r5, pc}
 8009f5e:	bf00      	nop
 8009f60:	200007f4 	.word	0x200007f4

08009f64 <_getpid_r>:
 8009f64:	f7f7 bf5e 	b.w	8001e24 <_getpid>

08009f68 <__swhatbuf_r>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f70:	2900      	cmp	r1, #0
 8009f72:	b096      	sub	sp, #88	@ 0x58
 8009f74:	4615      	mov	r5, r2
 8009f76:	461e      	mov	r6, r3
 8009f78:	da0d      	bge.n	8009f96 <__swhatbuf_r+0x2e>
 8009f7a:	89a3      	ldrh	r3, [r4, #12]
 8009f7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f80:	f04f 0100 	mov.w	r1, #0
 8009f84:	bf14      	ite	ne
 8009f86:	2340      	movne	r3, #64	@ 0x40
 8009f88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	6031      	str	r1, [r6, #0]
 8009f90:	602b      	str	r3, [r5, #0]
 8009f92:	b016      	add	sp, #88	@ 0x58
 8009f94:	bd70      	pop	{r4, r5, r6, pc}
 8009f96:	466a      	mov	r2, sp
 8009f98:	f000 f848 	bl	800a02c <_fstat_r>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	dbec      	blt.n	8009f7a <__swhatbuf_r+0x12>
 8009fa0:	9901      	ldr	r1, [sp, #4]
 8009fa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009faa:	4259      	negs	r1, r3
 8009fac:	4159      	adcs	r1, r3
 8009fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fb2:	e7eb      	b.n	8009f8c <__swhatbuf_r+0x24>

08009fb4 <__smakebuf_r>:
 8009fb4:	898b      	ldrh	r3, [r1, #12]
 8009fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb8:	079d      	lsls	r5, r3, #30
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	d507      	bpl.n	8009fd0 <__smakebuf_r+0x1c>
 8009fc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	6123      	str	r3, [r4, #16]
 8009fc8:	2301      	movs	r3, #1
 8009fca:	6163      	str	r3, [r4, #20]
 8009fcc:	b003      	add	sp, #12
 8009fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd0:	ab01      	add	r3, sp, #4
 8009fd2:	466a      	mov	r2, sp
 8009fd4:	f7ff ffc8 	bl	8009f68 <__swhatbuf_r>
 8009fd8:	9f00      	ldr	r7, [sp, #0]
 8009fda:	4605      	mov	r5, r0
 8009fdc:	4639      	mov	r1, r7
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7fe fec6 	bl	8008d70 <_malloc_r>
 8009fe4:	b948      	cbnz	r0, 8009ffa <__smakebuf_r+0x46>
 8009fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fea:	059a      	lsls	r2, r3, #22
 8009fec:	d4ee      	bmi.n	8009fcc <__smakebuf_r+0x18>
 8009fee:	f023 0303 	bic.w	r3, r3, #3
 8009ff2:	f043 0302 	orr.w	r3, r3, #2
 8009ff6:	81a3      	strh	r3, [r4, #12]
 8009ff8:	e7e2      	b.n	8009fc0 <__smakebuf_r+0xc>
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	6020      	str	r0, [r4, #0]
 8009ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a002:	81a3      	strh	r3, [r4, #12]
 800a004:	9b01      	ldr	r3, [sp, #4]
 800a006:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a00a:	b15b      	cbz	r3, 800a024 <__smakebuf_r+0x70>
 800a00c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a010:	4630      	mov	r0, r6
 800a012:	f000 f81d 	bl	800a050 <_isatty_r>
 800a016:	b128      	cbz	r0, 800a024 <__smakebuf_r+0x70>
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	f023 0303 	bic.w	r3, r3, #3
 800a01e:	f043 0301 	orr.w	r3, r3, #1
 800a022:	81a3      	strh	r3, [r4, #12]
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	431d      	orrs	r5, r3
 800a028:	81a5      	strh	r5, [r4, #12]
 800a02a:	e7cf      	b.n	8009fcc <__smakebuf_r+0x18>

0800a02c <_fstat_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	4d07      	ldr	r5, [pc, #28]	@ (800a04c <_fstat_r+0x20>)
 800a030:	2300      	movs	r3, #0
 800a032:	4604      	mov	r4, r0
 800a034:	4608      	mov	r0, r1
 800a036:	4611      	mov	r1, r2
 800a038:	602b      	str	r3, [r5, #0]
 800a03a:	f7f7 ff3f 	bl	8001ebc <_fstat>
 800a03e:	1c43      	adds	r3, r0, #1
 800a040:	d102      	bne.n	800a048 <_fstat_r+0x1c>
 800a042:	682b      	ldr	r3, [r5, #0]
 800a044:	b103      	cbz	r3, 800a048 <_fstat_r+0x1c>
 800a046:	6023      	str	r3, [r4, #0]
 800a048:	bd38      	pop	{r3, r4, r5, pc}
 800a04a:	bf00      	nop
 800a04c:	200007f4 	.word	0x200007f4

0800a050 <_isatty_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4d06      	ldr	r5, [pc, #24]	@ (800a06c <_isatty_r+0x1c>)
 800a054:	2300      	movs	r3, #0
 800a056:	4604      	mov	r4, r0
 800a058:	4608      	mov	r0, r1
 800a05a:	602b      	str	r3, [r5, #0]
 800a05c:	f7f7 ff3e 	bl	8001edc <_isatty>
 800a060:	1c43      	adds	r3, r0, #1
 800a062:	d102      	bne.n	800a06a <_isatty_r+0x1a>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	b103      	cbz	r3, 800a06a <_isatty_r+0x1a>
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	200007f4 	.word	0x200007f4

0800a070 <cos>:
 800a070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a072:	ec53 2b10 	vmov	r2, r3, d0
 800a076:	4826      	ldr	r0, [pc, #152]	@ (800a110 <cos+0xa0>)
 800a078:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a07c:	4281      	cmp	r1, r0
 800a07e:	d806      	bhi.n	800a08e <cos+0x1e>
 800a080:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a108 <cos+0x98>
 800a084:	b005      	add	sp, #20
 800a086:	f85d eb04 	ldr.w	lr, [sp], #4
 800a08a:	f000 b899 	b.w	800a1c0 <__kernel_cos>
 800a08e:	4821      	ldr	r0, [pc, #132]	@ (800a114 <cos+0xa4>)
 800a090:	4281      	cmp	r1, r0
 800a092:	d908      	bls.n	800a0a6 <cos+0x36>
 800a094:	4610      	mov	r0, r2
 800a096:	4619      	mov	r1, r3
 800a098:	f7f6 f91e 	bl	80002d8 <__aeabi_dsub>
 800a09c:	ec41 0b10 	vmov	d0, r0, r1
 800a0a0:	b005      	add	sp, #20
 800a0a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0a6:	4668      	mov	r0, sp
 800a0a8:	f000 fa0e 	bl	800a4c8 <__ieee754_rem_pio2>
 800a0ac:	f000 0003 	and.w	r0, r0, #3
 800a0b0:	2801      	cmp	r0, #1
 800a0b2:	d00b      	beq.n	800a0cc <cos+0x5c>
 800a0b4:	2802      	cmp	r0, #2
 800a0b6:	d015      	beq.n	800a0e4 <cos+0x74>
 800a0b8:	b9d8      	cbnz	r0, 800a0f2 <cos+0x82>
 800a0ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0be:	ed9d 0b00 	vldr	d0, [sp]
 800a0c2:	f000 f87d 	bl	800a1c0 <__kernel_cos>
 800a0c6:	ec51 0b10 	vmov	r0, r1, d0
 800a0ca:	e7e7      	b.n	800a09c <cos+0x2c>
 800a0cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0d0:	ed9d 0b00 	vldr	d0, [sp]
 800a0d4:	f000 f93c 	bl	800a350 <__kernel_sin>
 800a0d8:	ec53 2b10 	vmov	r2, r3, d0
 800a0dc:	4610      	mov	r0, r2
 800a0de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a0e2:	e7db      	b.n	800a09c <cos+0x2c>
 800a0e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0e8:	ed9d 0b00 	vldr	d0, [sp]
 800a0ec:	f000 f868 	bl	800a1c0 <__kernel_cos>
 800a0f0:	e7f2      	b.n	800a0d8 <cos+0x68>
 800a0f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0f6:	ed9d 0b00 	vldr	d0, [sp]
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	f000 f928 	bl	800a350 <__kernel_sin>
 800a100:	e7e1      	b.n	800a0c6 <cos+0x56>
 800a102:	bf00      	nop
 800a104:	f3af 8000 	nop.w
	...
 800a110:	3fe921fb 	.word	0x3fe921fb
 800a114:	7fefffff 	.word	0x7fefffff

0800a118 <sin>:
 800a118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a11a:	ec53 2b10 	vmov	r2, r3, d0
 800a11e:	4826      	ldr	r0, [pc, #152]	@ (800a1b8 <sin+0xa0>)
 800a120:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a124:	4281      	cmp	r1, r0
 800a126:	d807      	bhi.n	800a138 <sin+0x20>
 800a128:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a1b0 <sin+0x98>
 800a12c:	2000      	movs	r0, #0
 800a12e:	b005      	add	sp, #20
 800a130:	f85d eb04 	ldr.w	lr, [sp], #4
 800a134:	f000 b90c 	b.w	800a350 <__kernel_sin>
 800a138:	4820      	ldr	r0, [pc, #128]	@ (800a1bc <sin+0xa4>)
 800a13a:	4281      	cmp	r1, r0
 800a13c:	d908      	bls.n	800a150 <sin+0x38>
 800a13e:	4610      	mov	r0, r2
 800a140:	4619      	mov	r1, r3
 800a142:	f7f6 f8c9 	bl	80002d8 <__aeabi_dsub>
 800a146:	ec41 0b10 	vmov	d0, r0, r1
 800a14a:	b005      	add	sp, #20
 800a14c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a150:	4668      	mov	r0, sp
 800a152:	f000 f9b9 	bl	800a4c8 <__ieee754_rem_pio2>
 800a156:	f000 0003 	and.w	r0, r0, #3
 800a15a:	2801      	cmp	r0, #1
 800a15c:	d00c      	beq.n	800a178 <sin+0x60>
 800a15e:	2802      	cmp	r0, #2
 800a160:	d011      	beq.n	800a186 <sin+0x6e>
 800a162:	b9e8      	cbnz	r0, 800a1a0 <sin+0x88>
 800a164:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a168:	ed9d 0b00 	vldr	d0, [sp]
 800a16c:	2001      	movs	r0, #1
 800a16e:	f000 f8ef 	bl	800a350 <__kernel_sin>
 800a172:	ec51 0b10 	vmov	r0, r1, d0
 800a176:	e7e6      	b.n	800a146 <sin+0x2e>
 800a178:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a17c:	ed9d 0b00 	vldr	d0, [sp]
 800a180:	f000 f81e 	bl	800a1c0 <__kernel_cos>
 800a184:	e7f5      	b.n	800a172 <sin+0x5a>
 800a186:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a18a:	ed9d 0b00 	vldr	d0, [sp]
 800a18e:	2001      	movs	r0, #1
 800a190:	f000 f8de 	bl	800a350 <__kernel_sin>
 800a194:	ec53 2b10 	vmov	r2, r3, d0
 800a198:	4610      	mov	r0, r2
 800a19a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a19e:	e7d2      	b.n	800a146 <sin+0x2e>
 800a1a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1a4:	ed9d 0b00 	vldr	d0, [sp]
 800a1a8:	f000 f80a 	bl	800a1c0 <__kernel_cos>
 800a1ac:	e7f2      	b.n	800a194 <sin+0x7c>
 800a1ae:	bf00      	nop
	...
 800a1b8:	3fe921fb 	.word	0x3fe921fb
 800a1bc:	7fefffff 	.word	0x7fefffff

0800a1c0 <__kernel_cos>:
 800a1c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c4:	ec57 6b10 	vmov	r6, r7, d0
 800a1c8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a1cc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a1d0:	ed8d 1b00 	vstr	d1, [sp]
 800a1d4:	d206      	bcs.n	800a1e4 <__kernel_cos+0x24>
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	4639      	mov	r1, r7
 800a1da:	f7f6 fce5 	bl	8000ba8 <__aeabi_d2iz>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f000 8088 	beq.w	800a2f4 <__kernel_cos+0x134>
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	463b      	mov	r3, r7
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 fa2c 	bl	8000648 <__aeabi_dmul>
 800a1f0:	4b51      	ldr	r3, [pc, #324]	@ (800a338 <__kernel_cos+0x178>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	460d      	mov	r5, r1
 800a1f8:	f7f6 fa26 	bl	8000648 <__aeabi_dmul>
 800a1fc:	a340      	add	r3, pc, #256	@ (adr r3, 800a300 <__kernel_cos+0x140>)
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	4682      	mov	sl, r0
 800a204:	468b      	mov	fp, r1
 800a206:	4620      	mov	r0, r4
 800a208:	4629      	mov	r1, r5
 800a20a:	f7f6 fa1d 	bl	8000648 <__aeabi_dmul>
 800a20e:	a33e      	add	r3, pc, #248	@ (adr r3, 800a308 <__kernel_cos+0x148>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f7f6 f862 	bl	80002dc <__adddf3>
 800a218:	4622      	mov	r2, r4
 800a21a:	462b      	mov	r3, r5
 800a21c:	f7f6 fa14 	bl	8000648 <__aeabi_dmul>
 800a220:	a33b      	add	r3, pc, #236	@ (adr r3, 800a310 <__kernel_cos+0x150>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f7f6 f857 	bl	80002d8 <__aeabi_dsub>
 800a22a:	4622      	mov	r2, r4
 800a22c:	462b      	mov	r3, r5
 800a22e:	f7f6 fa0b 	bl	8000648 <__aeabi_dmul>
 800a232:	a339      	add	r3, pc, #228	@ (adr r3, 800a318 <__kernel_cos+0x158>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	f7f6 f850 	bl	80002dc <__adddf3>
 800a23c:	4622      	mov	r2, r4
 800a23e:	462b      	mov	r3, r5
 800a240:	f7f6 fa02 	bl	8000648 <__aeabi_dmul>
 800a244:	a336      	add	r3, pc, #216	@ (adr r3, 800a320 <__kernel_cos+0x160>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f7f6 f845 	bl	80002d8 <__aeabi_dsub>
 800a24e:	4622      	mov	r2, r4
 800a250:	462b      	mov	r3, r5
 800a252:	f7f6 f9f9 	bl	8000648 <__aeabi_dmul>
 800a256:	a334      	add	r3, pc, #208	@ (adr r3, 800a328 <__kernel_cos+0x168>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f7f6 f83e 	bl	80002dc <__adddf3>
 800a260:	4622      	mov	r2, r4
 800a262:	462b      	mov	r3, r5
 800a264:	f7f6 f9f0 	bl	8000648 <__aeabi_dmul>
 800a268:	4622      	mov	r2, r4
 800a26a:	462b      	mov	r3, r5
 800a26c:	f7f6 f9ec 	bl	8000648 <__aeabi_dmul>
 800a270:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a274:	4604      	mov	r4, r0
 800a276:	460d      	mov	r5, r1
 800a278:	4630      	mov	r0, r6
 800a27a:	4639      	mov	r1, r7
 800a27c:	f7f6 f9e4 	bl	8000648 <__aeabi_dmul>
 800a280:	460b      	mov	r3, r1
 800a282:	4602      	mov	r2, r0
 800a284:	4629      	mov	r1, r5
 800a286:	4620      	mov	r0, r4
 800a288:	f7f6 f826 	bl	80002d8 <__aeabi_dsub>
 800a28c:	4b2b      	ldr	r3, [pc, #172]	@ (800a33c <__kernel_cos+0x17c>)
 800a28e:	4598      	cmp	r8, r3
 800a290:	4606      	mov	r6, r0
 800a292:	460f      	mov	r7, r1
 800a294:	d810      	bhi.n	800a2b8 <__kernel_cos+0xf8>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4650      	mov	r0, sl
 800a29c:	4659      	mov	r1, fp
 800a29e:	f7f6 f81b 	bl	80002d8 <__aeabi_dsub>
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4926      	ldr	r1, [pc, #152]	@ (800a340 <__kernel_cos+0x180>)
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f7f6 f815 	bl	80002d8 <__aeabi_dsub>
 800a2ae:	ec41 0b10 	vmov	d0, r0, r1
 800a2b2:	b003      	add	sp, #12
 800a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b8:	4b22      	ldr	r3, [pc, #136]	@ (800a344 <__kernel_cos+0x184>)
 800a2ba:	4921      	ldr	r1, [pc, #132]	@ (800a340 <__kernel_cos+0x180>)
 800a2bc:	4598      	cmp	r8, r3
 800a2be:	bf8c      	ite	hi
 800a2c0:	4d21      	ldrhi	r5, [pc, #132]	@ (800a348 <__kernel_cos+0x188>)
 800a2c2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a2c6:	2400      	movs	r4, #0
 800a2c8:	4622      	mov	r2, r4
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	f7f6 f803 	bl	80002d8 <__aeabi_dsub>
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	4689      	mov	r9, r1
 800a2d8:	462b      	mov	r3, r5
 800a2da:	4650      	mov	r0, sl
 800a2dc:	4659      	mov	r1, fp
 800a2de:	f7f5 fffb 	bl	80002d8 <__aeabi_dsub>
 800a2e2:	4632      	mov	r2, r6
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	f7f5 fff7 	bl	80002d8 <__aeabi_dsub>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	e7da      	b.n	800a2aa <__kernel_cos+0xea>
 800a2f4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a330 <__kernel_cos+0x170>
 800a2f8:	e7db      	b.n	800a2b2 <__kernel_cos+0xf2>
 800a2fa:	bf00      	nop
 800a2fc:	f3af 8000 	nop.w
 800a300:	be8838d4 	.word	0xbe8838d4
 800a304:	bda8fae9 	.word	0xbda8fae9
 800a308:	bdb4b1c4 	.word	0xbdb4b1c4
 800a30c:	3e21ee9e 	.word	0x3e21ee9e
 800a310:	809c52ad 	.word	0x809c52ad
 800a314:	3e927e4f 	.word	0x3e927e4f
 800a318:	19cb1590 	.word	0x19cb1590
 800a31c:	3efa01a0 	.word	0x3efa01a0
 800a320:	16c15177 	.word	0x16c15177
 800a324:	3f56c16c 	.word	0x3f56c16c
 800a328:	5555554c 	.word	0x5555554c
 800a32c:	3fa55555 	.word	0x3fa55555
 800a330:	00000000 	.word	0x00000000
 800a334:	3ff00000 	.word	0x3ff00000
 800a338:	3fe00000 	.word	0x3fe00000
 800a33c:	3fd33332 	.word	0x3fd33332
 800a340:	3ff00000 	.word	0x3ff00000
 800a344:	3fe90000 	.word	0x3fe90000
 800a348:	3fd20000 	.word	0x3fd20000
 800a34c:	00000000 	.word	0x00000000

0800a350 <__kernel_sin>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	ec55 4b10 	vmov	r4, r5, d0
 800a358:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a35c:	b085      	sub	sp, #20
 800a35e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a362:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a366:	4680      	mov	r8, r0
 800a368:	d205      	bcs.n	800a376 <__kernel_sin+0x26>
 800a36a:	4620      	mov	r0, r4
 800a36c:	4629      	mov	r1, r5
 800a36e:	f7f6 fc1b 	bl	8000ba8 <__aeabi_d2iz>
 800a372:	2800      	cmp	r0, #0
 800a374:	d052      	beq.n	800a41c <__kernel_sin+0xcc>
 800a376:	4622      	mov	r2, r4
 800a378:	462b      	mov	r3, r5
 800a37a:	4620      	mov	r0, r4
 800a37c:	4629      	mov	r1, r5
 800a37e:	f7f6 f963 	bl	8000648 <__aeabi_dmul>
 800a382:	4682      	mov	sl, r0
 800a384:	468b      	mov	fp, r1
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7f6 f95b 	bl	8000648 <__aeabi_dmul>
 800a392:	a342      	add	r3, pc, #264	@ (adr r3, 800a49c <__kernel_sin+0x14c>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	e9cd 0100 	strd	r0, r1, [sp]
 800a39c:	4650      	mov	r0, sl
 800a39e:	4659      	mov	r1, fp
 800a3a0:	f7f6 f952 	bl	8000648 <__aeabi_dmul>
 800a3a4:	a33f      	add	r3, pc, #252	@ (adr r3, 800a4a4 <__kernel_sin+0x154>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f5 ff95 	bl	80002d8 <__aeabi_dsub>
 800a3ae:	4652      	mov	r2, sl
 800a3b0:	465b      	mov	r3, fp
 800a3b2:	f7f6 f949 	bl	8000648 <__aeabi_dmul>
 800a3b6:	a33d      	add	r3, pc, #244	@ (adr r3, 800a4ac <__kernel_sin+0x15c>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f7f5 ff8e 	bl	80002dc <__adddf3>
 800a3c0:	4652      	mov	r2, sl
 800a3c2:	465b      	mov	r3, fp
 800a3c4:	f7f6 f940 	bl	8000648 <__aeabi_dmul>
 800a3c8:	a33a      	add	r3, pc, #232	@ (adr r3, 800a4b4 <__kernel_sin+0x164>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f7f5 ff83 	bl	80002d8 <__aeabi_dsub>
 800a3d2:	4652      	mov	r2, sl
 800a3d4:	465b      	mov	r3, fp
 800a3d6:	f7f6 f937 	bl	8000648 <__aeabi_dmul>
 800a3da:	a338      	add	r3, pc, #224	@ (adr r3, 800a4bc <__kernel_sin+0x16c>)
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	f7f5 ff7c 	bl	80002dc <__adddf3>
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	460f      	mov	r7, r1
 800a3e8:	f1b8 0f00 	cmp.w	r8, #0
 800a3ec:	d11b      	bne.n	800a426 <__kernel_sin+0xd6>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4650      	mov	r0, sl
 800a3f4:	4659      	mov	r1, fp
 800a3f6:	f7f6 f927 	bl	8000648 <__aeabi_dmul>
 800a3fa:	a325      	add	r3, pc, #148	@ (adr r3, 800a490 <__kernel_sin+0x140>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f5 ff6a 	bl	80002d8 <__aeabi_dsub>
 800a404:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a408:	f7f6 f91e 	bl	8000648 <__aeabi_dmul>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4620      	mov	r0, r4
 800a412:	4629      	mov	r1, r5
 800a414:	f7f5 ff62 	bl	80002dc <__adddf3>
 800a418:	4604      	mov	r4, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	ec45 4b10 	vmov	d0, r4, r5
 800a420:	b005      	add	sp, #20
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a42a:	4b1b      	ldr	r3, [pc, #108]	@ (800a498 <__kernel_sin+0x148>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	f7f6 f90b 	bl	8000648 <__aeabi_dmul>
 800a432:	4632      	mov	r2, r6
 800a434:	4680      	mov	r8, r0
 800a436:	4689      	mov	r9, r1
 800a438:	463b      	mov	r3, r7
 800a43a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a43e:	f7f6 f903 	bl	8000648 <__aeabi_dmul>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f5 ff45 	bl	80002d8 <__aeabi_dsub>
 800a44e:	4652      	mov	r2, sl
 800a450:	465b      	mov	r3, fp
 800a452:	f7f6 f8f9 	bl	8000648 <__aeabi_dmul>
 800a456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a45a:	f7f5 ff3d 	bl	80002d8 <__aeabi_dsub>
 800a45e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a490 <__kernel_sin+0x140>)
 800a460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a464:	4606      	mov	r6, r0
 800a466:	460f      	mov	r7, r1
 800a468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a46c:	f7f6 f8ec 	bl	8000648 <__aeabi_dmul>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4630      	mov	r0, r6
 800a476:	4639      	mov	r1, r7
 800a478:	f7f5 ff30 	bl	80002dc <__adddf3>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4620      	mov	r0, r4
 800a482:	4629      	mov	r1, r5
 800a484:	f7f5 ff28 	bl	80002d8 <__aeabi_dsub>
 800a488:	e7c6      	b.n	800a418 <__kernel_sin+0xc8>
 800a48a:	bf00      	nop
 800a48c:	f3af 8000 	nop.w
 800a490:	55555549 	.word	0x55555549
 800a494:	3fc55555 	.word	0x3fc55555
 800a498:	3fe00000 	.word	0x3fe00000
 800a49c:	5acfd57c 	.word	0x5acfd57c
 800a4a0:	3de5d93a 	.word	0x3de5d93a
 800a4a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a4a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a4ac:	57b1fe7d 	.word	0x57b1fe7d
 800a4b0:	3ec71de3 	.word	0x3ec71de3
 800a4b4:	19c161d5 	.word	0x19c161d5
 800a4b8:	3f2a01a0 	.word	0x3f2a01a0
 800a4bc:	1110f8a6 	.word	0x1110f8a6
 800a4c0:	3f811111 	.word	0x3f811111
 800a4c4:	00000000 	.word	0x00000000

0800a4c8 <__ieee754_rem_pio2>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	ec57 6b10 	vmov	r6, r7, d0
 800a4d0:	4bc5      	ldr	r3, [pc, #788]	@ (800a7e8 <__ieee754_rem_pio2+0x320>)
 800a4d2:	b08d      	sub	sp, #52	@ 0x34
 800a4d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a4d8:	4598      	cmp	r8, r3
 800a4da:	4604      	mov	r4, r0
 800a4dc:	9704      	str	r7, [sp, #16]
 800a4de:	d807      	bhi.n	800a4f0 <__ieee754_rem_pio2+0x28>
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	ed80 0b00 	vstr	d0, [r0]
 800a4e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a4ec:	2500      	movs	r5, #0
 800a4ee:	e028      	b.n	800a542 <__ieee754_rem_pio2+0x7a>
 800a4f0:	4bbe      	ldr	r3, [pc, #760]	@ (800a7ec <__ieee754_rem_pio2+0x324>)
 800a4f2:	4598      	cmp	r8, r3
 800a4f4:	d878      	bhi.n	800a5e8 <__ieee754_rem_pio2+0x120>
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	4dbd      	ldr	r5, [pc, #756]	@ (800a7f0 <__ieee754_rem_pio2+0x328>)
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a7b0 <__ieee754_rem_pio2+0x2e8>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	4639      	mov	r1, r7
 800a506:	dd38      	ble.n	800a57a <__ieee754_rem_pio2+0xb2>
 800a508:	f7f5 fee6 	bl	80002d8 <__aeabi_dsub>
 800a50c:	45a8      	cmp	r8, r5
 800a50e:	4606      	mov	r6, r0
 800a510:	460f      	mov	r7, r1
 800a512:	d01a      	beq.n	800a54a <__ieee754_rem_pio2+0x82>
 800a514:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a7b8 <__ieee754_rem_pio2+0x2f0>)
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	f7f5 fedd 	bl	80002d8 <__aeabi_dsub>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	4680      	mov	r8, r0
 800a524:	4689      	mov	r9, r1
 800a526:	4630      	mov	r0, r6
 800a528:	4639      	mov	r1, r7
 800a52a:	f7f5 fed5 	bl	80002d8 <__aeabi_dsub>
 800a52e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a7b8 <__ieee754_rem_pio2+0x2f0>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f5 fed0 	bl	80002d8 <__aeabi_dsub>
 800a538:	e9c4 8900 	strd	r8, r9, [r4]
 800a53c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a540:	2501      	movs	r5, #1
 800a542:	4628      	mov	r0, r5
 800a544:	b00d      	add	sp, #52	@ 0x34
 800a546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54a:	a39d      	add	r3, pc, #628	@ (adr r3, 800a7c0 <__ieee754_rem_pio2+0x2f8>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f7f5 fec2 	bl	80002d8 <__aeabi_dsub>
 800a554:	a39c      	add	r3, pc, #624	@ (adr r3, 800a7c8 <__ieee754_rem_pio2+0x300>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	4606      	mov	r6, r0
 800a55c:	460f      	mov	r7, r1
 800a55e:	f7f5 febb 	bl	80002d8 <__aeabi_dsub>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4680      	mov	r8, r0
 800a568:	4689      	mov	r9, r1
 800a56a:	4630      	mov	r0, r6
 800a56c:	4639      	mov	r1, r7
 800a56e:	f7f5 feb3 	bl	80002d8 <__aeabi_dsub>
 800a572:	a395      	add	r3, pc, #596	@ (adr r3, 800a7c8 <__ieee754_rem_pio2+0x300>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	e7dc      	b.n	800a534 <__ieee754_rem_pio2+0x6c>
 800a57a:	f7f5 feaf 	bl	80002dc <__adddf3>
 800a57e:	45a8      	cmp	r8, r5
 800a580:	4606      	mov	r6, r0
 800a582:	460f      	mov	r7, r1
 800a584:	d018      	beq.n	800a5b8 <__ieee754_rem_pio2+0xf0>
 800a586:	a38c      	add	r3, pc, #560	@ (adr r3, 800a7b8 <__ieee754_rem_pio2+0x2f0>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f7f5 fea6 	bl	80002dc <__adddf3>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4680      	mov	r8, r0
 800a596:	4689      	mov	r9, r1
 800a598:	4630      	mov	r0, r6
 800a59a:	4639      	mov	r1, r7
 800a59c:	f7f5 fe9c 	bl	80002d8 <__aeabi_dsub>
 800a5a0:	a385      	add	r3, pc, #532	@ (adr r3, 800a7b8 <__ieee754_rem_pio2+0x2f0>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f7f5 fe99 	bl	80002dc <__adddf3>
 800a5aa:	f04f 35ff 	mov.w	r5, #4294967295
 800a5ae:	e9c4 8900 	strd	r8, r9, [r4]
 800a5b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5b6:	e7c4      	b.n	800a542 <__ieee754_rem_pio2+0x7a>
 800a5b8:	a381      	add	r3, pc, #516	@ (adr r3, 800a7c0 <__ieee754_rem_pio2+0x2f8>)
 800a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5be:	f7f5 fe8d 	bl	80002dc <__adddf3>
 800a5c2:	a381      	add	r3, pc, #516	@ (adr r3, 800a7c8 <__ieee754_rem_pio2+0x300>)
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	460f      	mov	r7, r1
 800a5cc:	f7f5 fe86 	bl	80002dc <__adddf3>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	4689      	mov	r9, r1
 800a5d8:	4630      	mov	r0, r6
 800a5da:	4639      	mov	r1, r7
 800a5dc:	f7f5 fe7c 	bl	80002d8 <__aeabi_dsub>
 800a5e0:	a379      	add	r3, pc, #484	@ (adr r3, 800a7c8 <__ieee754_rem_pio2+0x300>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	e7de      	b.n	800a5a6 <__ieee754_rem_pio2+0xde>
 800a5e8:	4b82      	ldr	r3, [pc, #520]	@ (800a7f4 <__ieee754_rem_pio2+0x32c>)
 800a5ea:	4598      	cmp	r8, r3
 800a5ec:	f200 80d1 	bhi.w	800a792 <__ieee754_rem_pio2+0x2ca>
 800a5f0:	f000 f966 	bl	800a8c0 <fabs>
 800a5f4:	ec57 6b10 	vmov	r6, r7, d0
 800a5f8:	a375      	add	r3, pc, #468	@ (adr r3, 800a7d0 <__ieee754_rem_pio2+0x308>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	4630      	mov	r0, r6
 800a600:	4639      	mov	r1, r7
 800a602:	f7f6 f821 	bl	8000648 <__aeabi_dmul>
 800a606:	4b7c      	ldr	r3, [pc, #496]	@ (800a7f8 <__ieee754_rem_pio2+0x330>)
 800a608:	2200      	movs	r2, #0
 800a60a:	f7f5 fe67 	bl	80002dc <__adddf3>
 800a60e:	f7f6 facb 	bl	8000ba8 <__aeabi_d2iz>
 800a612:	4605      	mov	r5, r0
 800a614:	f7f5 ffae 	bl	8000574 <__aeabi_i2d>
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a620:	a363      	add	r3, pc, #396	@ (adr r3, 800a7b0 <__ieee754_rem_pio2+0x2e8>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f7f6 f80f 	bl	8000648 <__aeabi_dmul>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4630      	mov	r0, r6
 800a630:	4639      	mov	r1, r7
 800a632:	f7f5 fe51 	bl	80002d8 <__aeabi_dsub>
 800a636:	a360      	add	r3, pc, #384	@ (adr r3, 800a7b8 <__ieee754_rem_pio2+0x2f0>)
 800a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63c:	4682      	mov	sl, r0
 800a63e:	468b      	mov	fp, r1
 800a640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a644:	f7f6 f800 	bl	8000648 <__aeabi_dmul>
 800a648:	2d1f      	cmp	r5, #31
 800a64a:	4606      	mov	r6, r0
 800a64c:	460f      	mov	r7, r1
 800a64e:	dc0c      	bgt.n	800a66a <__ieee754_rem_pio2+0x1a2>
 800a650:	4b6a      	ldr	r3, [pc, #424]	@ (800a7fc <__ieee754_rem_pio2+0x334>)
 800a652:	1e6a      	subs	r2, r5, #1
 800a654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a658:	4543      	cmp	r3, r8
 800a65a:	d006      	beq.n	800a66a <__ieee754_rem_pio2+0x1a2>
 800a65c:	4632      	mov	r2, r6
 800a65e:	463b      	mov	r3, r7
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7f5 fe38 	bl	80002d8 <__aeabi_dsub>
 800a668:	e00e      	b.n	800a688 <__ieee754_rem_pio2+0x1c0>
 800a66a:	463b      	mov	r3, r7
 800a66c:	4632      	mov	r2, r6
 800a66e:	4650      	mov	r0, sl
 800a670:	4659      	mov	r1, fp
 800a672:	f7f5 fe31 	bl	80002d8 <__aeabi_dsub>
 800a676:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a67a:	9305      	str	r3, [sp, #20]
 800a67c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a680:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a684:	2b10      	cmp	r3, #16
 800a686:	dc02      	bgt.n	800a68e <__ieee754_rem_pio2+0x1c6>
 800a688:	e9c4 0100 	strd	r0, r1, [r4]
 800a68c:	e039      	b.n	800a702 <__ieee754_rem_pio2+0x23a>
 800a68e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a7c0 <__ieee754_rem_pio2+0x2f8>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a698:	f7f5 ffd6 	bl	8000648 <__aeabi_dmul>
 800a69c:	4606      	mov	r6, r0
 800a69e:	460f      	mov	r7, r1
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4650      	mov	r0, sl
 800a6a6:	4659      	mov	r1, fp
 800a6a8:	f7f5 fe16 	bl	80002d8 <__aeabi_dsub>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4680      	mov	r8, r0
 800a6b2:	4689      	mov	r9, r1
 800a6b4:	4650      	mov	r0, sl
 800a6b6:	4659      	mov	r1, fp
 800a6b8:	f7f5 fe0e 	bl	80002d8 <__aeabi_dsub>
 800a6bc:	4632      	mov	r2, r6
 800a6be:	463b      	mov	r3, r7
 800a6c0:	f7f5 fe0a 	bl	80002d8 <__aeabi_dsub>
 800a6c4:	a340      	add	r3, pc, #256	@ (adr r3, 800a7c8 <__ieee754_rem_pio2+0x300>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d2:	f7f5 ffb9 	bl	8000648 <__aeabi_dmul>
 800a6d6:	4632      	mov	r2, r6
 800a6d8:	463b      	mov	r3, r7
 800a6da:	f7f5 fdfd 	bl	80002d8 <__aeabi_dsub>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	460f      	mov	r7, r1
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	f7f5 fdf5 	bl	80002d8 <__aeabi_dsub>
 800a6ee:	9a05      	ldr	r2, [sp, #20]
 800a6f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b31      	cmp	r3, #49	@ 0x31
 800a6f8:	dc20      	bgt.n	800a73c <__ieee754_rem_pio2+0x274>
 800a6fa:	e9c4 0100 	strd	r0, r1, [r4]
 800a6fe:	46c2      	mov	sl, r8
 800a700:	46cb      	mov	fp, r9
 800a702:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a706:	4650      	mov	r0, sl
 800a708:	4642      	mov	r2, r8
 800a70a:	464b      	mov	r3, r9
 800a70c:	4659      	mov	r1, fp
 800a70e:	f7f5 fde3 	bl	80002d8 <__aeabi_dsub>
 800a712:	463b      	mov	r3, r7
 800a714:	4632      	mov	r2, r6
 800a716:	f7f5 fddf 	bl	80002d8 <__aeabi_dsub>
 800a71a:	9b04      	ldr	r3, [sp, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a722:	f6bf af0e 	bge.w	800a542 <__ieee754_rem_pio2+0x7a>
 800a726:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a72a:	6063      	str	r3, [r4, #4]
 800a72c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a730:	f8c4 8000 	str.w	r8, [r4]
 800a734:	60a0      	str	r0, [r4, #8]
 800a736:	60e3      	str	r3, [r4, #12]
 800a738:	426d      	negs	r5, r5
 800a73a:	e702      	b.n	800a542 <__ieee754_rem_pio2+0x7a>
 800a73c:	a326      	add	r3, pc, #152	@ (adr r3, 800a7d8 <__ieee754_rem_pio2+0x310>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a746:	f7f5 ff7f 	bl	8000648 <__aeabi_dmul>
 800a74a:	4606      	mov	r6, r0
 800a74c:	460f      	mov	r7, r1
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4640      	mov	r0, r8
 800a754:	4649      	mov	r1, r9
 800a756:	f7f5 fdbf 	bl	80002d8 <__aeabi_dsub>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4682      	mov	sl, r0
 800a760:	468b      	mov	fp, r1
 800a762:	4640      	mov	r0, r8
 800a764:	4649      	mov	r1, r9
 800a766:	f7f5 fdb7 	bl	80002d8 <__aeabi_dsub>
 800a76a:	4632      	mov	r2, r6
 800a76c:	463b      	mov	r3, r7
 800a76e:	f7f5 fdb3 	bl	80002d8 <__aeabi_dsub>
 800a772:	a31b      	add	r3, pc, #108	@ (adr r3, 800a7e0 <__ieee754_rem_pio2+0x318>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	4606      	mov	r6, r0
 800a77a:	460f      	mov	r7, r1
 800a77c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a780:	f7f5 ff62 	bl	8000648 <__aeabi_dmul>
 800a784:	4632      	mov	r2, r6
 800a786:	463b      	mov	r3, r7
 800a788:	f7f5 fda6 	bl	80002d8 <__aeabi_dsub>
 800a78c:	4606      	mov	r6, r0
 800a78e:	460f      	mov	r7, r1
 800a790:	e764      	b.n	800a65c <__ieee754_rem_pio2+0x194>
 800a792:	4b1b      	ldr	r3, [pc, #108]	@ (800a800 <__ieee754_rem_pio2+0x338>)
 800a794:	4598      	cmp	r8, r3
 800a796:	d935      	bls.n	800a804 <__ieee754_rem_pio2+0x33c>
 800a798:	4632      	mov	r2, r6
 800a79a:	463b      	mov	r3, r7
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f7f5 fd9a 	bl	80002d8 <__aeabi_dsub>
 800a7a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7a8:	e9c4 0100 	strd	r0, r1, [r4]
 800a7ac:	e69e      	b.n	800a4ec <__ieee754_rem_pio2+0x24>
 800a7ae:	bf00      	nop
 800a7b0:	54400000 	.word	0x54400000
 800a7b4:	3ff921fb 	.word	0x3ff921fb
 800a7b8:	1a626331 	.word	0x1a626331
 800a7bc:	3dd0b461 	.word	0x3dd0b461
 800a7c0:	1a600000 	.word	0x1a600000
 800a7c4:	3dd0b461 	.word	0x3dd0b461
 800a7c8:	2e037073 	.word	0x2e037073
 800a7cc:	3ba3198a 	.word	0x3ba3198a
 800a7d0:	6dc9c883 	.word	0x6dc9c883
 800a7d4:	3fe45f30 	.word	0x3fe45f30
 800a7d8:	2e000000 	.word	0x2e000000
 800a7dc:	3ba3198a 	.word	0x3ba3198a
 800a7e0:	252049c1 	.word	0x252049c1
 800a7e4:	397b839a 	.word	0x397b839a
 800a7e8:	3fe921fb 	.word	0x3fe921fb
 800a7ec:	4002d97b 	.word	0x4002d97b
 800a7f0:	3ff921fb 	.word	0x3ff921fb
 800a7f4:	413921fb 	.word	0x413921fb
 800a7f8:	3fe00000 	.word	0x3fe00000
 800a7fc:	0800b5f4 	.word	0x0800b5f4
 800a800:	7fefffff 	.word	0x7fefffff
 800a804:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a808:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a80c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a810:	4630      	mov	r0, r6
 800a812:	460f      	mov	r7, r1
 800a814:	f7f6 f9c8 	bl	8000ba8 <__aeabi_d2iz>
 800a818:	f7f5 feac 	bl	8000574 <__aeabi_i2d>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4630      	mov	r0, r6
 800a822:	4639      	mov	r1, r7
 800a824:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a828:	f7f5 fd56 	bl	80002d8 <__aeabi_dsub>
 800a82c:	4b22      	ldr	r3, [pc, #136]	@ (800a8b8 <__ieee754_rem_pio2+0x3f0>)
 800a82e:	2200      	movs	r2, #0
 800a830:	f7f5 ff0a 	bl	8000648 <__aeabi_dmul>
 800a834:	460f      	mov	r7, r1
 800a836:	4606      	mov	r6, r0
 800a838:	f7f6 f9b6 	bl	8000ba8 <__aeabi_d2iz>
 800a83c:	f7f5 fe9a 	bl	8000574 <__aeabi_i2d>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4630      	mov	r0, r6
 800a846:	4639      	mov	r1, r7
 800a848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a84c:	f7f5 fd44 	bl	80002d8 <__aeabi_dsub>
 800a850:	4b19      	ldr	r3, [pc, #100]	@ (800a8b8 <__ieee754_rem_pio2+0x3f0>)
 800a852:	2200      	movs	r2, #0
 800a854:	f7f5 fef8 	bl	8000648 <__aeabi_dmul>
 800a858:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a85c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a860:	f04f 0803 	mov.w	r8, #3
 800a864:	2600      	movs	r6, #0
 800a866:	2700      	movs	r7, #0
 800a868:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	46c2      	mov	sl, r8
 800a872:	f108 38ff 	add.w	r8, r8, #4294967295
 800a876:	f7f6 f94f 	bl	8000b18 <__aeabi_dcmpeq>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d1f4      	bne.n	800a868 <__ieee754_rem_pio2+0x3a0>
 800a87e:	4b0f      	ldr	r3, [pc, #60]	@ (800a8bc <__ieee754_rem_pio2+0x3f4>)
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	2302      	movs	r3, #2
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	462a      	mov	r2, r5
 800a888:	4653      	mov	r3, sl
 800a88a:	4621      	mov	r1, r4
 800a88c:	a806      	add	r0, sp, #24
 800a88e:	f000 f81f 	bl	800a8d0 <__kernel_rem_pio2>
 800a892:	9b04      	ldr	r3, [sp, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	4605      	mov	r5, r0
 800a898:	f6bf ae53 	bge.w	800a542 <__ieee754_rem_pio2+0x7a>
 800a89c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a8a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8a4:	e9c4 2300 	strd	r2, r3, [r4]
 800a8a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a8ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a8b4:	e740      	b.n	800a738 <__ieee754_rem_pio2+0x270>
 800a8b6:	bf00      	nop
 800a8b8:	41700000 	.word	0x41700000
 800a8bc:	0800b674 	.word	0x0800b674

0800a8c0 <fabs>:
 800a8c0:	ec51 0b10 	vmov	r0, r1, d0
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a8ca:	ec43 2b10 	vmov	d0, r2, r3
 800a8ce:	4770      	bx	lr

0800a8d0 <__kernel_rem_pio2>:
 800a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	ed2d 8b02 	vpush	{d8}
 800a8d8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a8dc:	f112 0f14 	cmn.w	r2, #20
 800a8e0:	9306      	str	r3, [sp, #24]
 800a8e2:	9104      	str	r1, [sp, #16]
 800a8e4:	4bc2      	ldr	r3, [pc, #776]	@ (800abf0 <__kernel_rem_pio2+0x320>)
 800a8e6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a8e8:	9008      	str	r0, [sp, #32]
 800a8ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	9b06      	ldr	r3, [sp, #24]
 800a8f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8f6:	bfa8      	it	ge
 800a8f8:	1ed4      	subge	r4, r2, #3
 800a8fa:	9305      	str	r3, [sp, #20]
 800a8fc:	bfb2      	itee	lt
 800a8fe:	2400      	movlt	r4, #0
 800a900:	2318      	movge	r3, #24
 800a902:	fb94 f4f3 	sdivge	r4, r4, r3
 800a906:	f06f 0317 	mvn.w	r3, #23
 800a90a:	fb04 3303 	mla	r3, r4, r3, r3
 800a90e:	eb03 0b02 	add.w	fp, r3, r2
 800a912:	9b00      	ldr	r3, [sp, #0]
 800a914:	9a05      	ldr	r2, [sp, #20]
 800a916:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800abe0 <__kernel_rem_pio2+0x310>
 800a91a:	eb03 0802 	add.w	r8, r3, r2
 800a91e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a920:	1aa7      	subs	r7, r4, r2
 800a922:	ae20      	add	r6, sp, #128	@ 0x80
 800a924:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a928:	2500      	movs	r5, #0
 800a92a:	4545      	cmp	r5, r8
 800a92c:	dd12      	ble.n	800a954 <__kernel_rem_pio2+0x84>
 800a92e:	9b06      	ldr	r3, [sp, #24]
 800a930:	aa20      	add	r2, sp, #128	@ 0x80
 800a932:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a936:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a93a:	2700      	movs	r7, #0
 800a93c:	9b00      	ldr	r3, [sp, #0]
 800a93e:	429f      	cmp	r7, r3
 800a940:	dc2e      	bgt.n	800a9a0 <__kernel_rem_pio2+0xd0>
 800a942:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800abe0 <__kernel_rem_pio2+0x310>
 800a946:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a94a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a94e:	46a8      	mov	r8, r5
 800a950:	2600      	movs	r6, #0
 800a952:	e01b      	b.n	800a98c <__kernel_rem_pio2+0xbc>
 800a954:	42ef      	cmn	r7, r5
 800a956:	d407      	bmi.n	800a968 <__kernel_rem_pio2+0x98>
 800a958:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a95c:	f7f5 fe0a 	bl	8000574 <__aeabi_i2d>
 800a960:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a964:	3501      	adds	r5, #1
 800a966:	e7e0      	b.n	800a92a <__kernel_rem_pio2+0x5a>
 800a968:	ec51 0b18 	vmov	r0, r1, d8
 800a96c:	e7f8      	b.n	800a960 <__kernel_rem_pio2+0x90>
 800a96e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800a972:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a976:	f7f5 fe67 	bl	8000648 <__aeabi_dmul>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a982:	f7f5 fcab 	bl	80002dc <__adddf3>
 800a986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a98a:	3601      	adds	r6, #1
 800a98c:	9b05      	ldr	r3, [sp, #20]
 800a98e:	429e      	cmp	r6, r3
 800a990:	dded      	ble.n	800a96e <__kernel_rem_pio2+0x9e>
 800a992:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a996:	3701      	adds	r7, #1
 800a998:	ecaa 7b02 	vstmia	sl!, {d7}
 800a99c:	3508      	adds	r5, #8
 800a99e:	e7cd      	b.n	800a93c <__kernel_rem_pio2+0x6c>
 800a9a0:	9b00      	ldr	r3, [sp, #0]
 800a9a2:	f8dd 8000 	ldr.w	r8, [sp]
 800a9a6:	aa0c      	add	r2, sp, #48	@ 0x30
 800a9a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a9b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9b6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a9ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9bc:	ab98      	add	r3, sp, #608	@ 0x260
 800a9be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a9c2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a9c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9ca:	ac0c      	add	r4, sp, #48	@ 0x30
 800a9cc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a9ce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a9d2:	46a1      	mov	r9, r4
 800a9d4:	46c2      	mov	sl, r8
 800a9d6:	f1ba 0f00 	cmp.w	sl, #0
 800a9da:	dc77      	bgt.n	800aacc <__kernel_rem_pio2+0x1fc>
 800a9dc:	4658      	mov	r0, fp
 800a9de:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a9e2:	f000 fac5 	bl	800af70 <scalbn>
 800a9e6:	ec57 6b10 	vmov	r6, r7, d0
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	f7f5 fe28 	bl	8000648 <__aeabi_dmul>
 800a9f8:	ec41 0b10 	vmov	d0, r0, r1
 800a9fc:	f000 fb34 	bl	800b068 <floor>
 800aa00:	4b7c      	ldr	r3, [pc, #496]	@ (800abf4 <__kernel_rem_pio2+0x324>)
 800aa02:	ec51 0b10 	vmov	r0, r1, d0
 800aa06:	2200      	movs	r2, #0
 800aa08:	f7f5 fe1e 	bl	8000648 <__aeabi_dmul>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4630      	mov	r0, r6
 800aa12:	4639      	mov	r1, r7
 800aa14:	f7f5 fc60 	bl	80002d8 <__aeabi_dsub>
 800aa18:	460f      	mov	r7, r1
 800aa1a:	4606      	mov	r6, r0
 800aa1c:	f7f6 f8c4 	bl	8000ba8 <__aeabi_d2iz>
 800aa20:	9002      	str	r0, [sp, #8]
 800aa22:	f7f5 fda7 	bl	8000574 <__aeabi_i2d>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f5 fc53 	bl	80002d8 <__aeabi_dsub>
 800aa32:	f1bb 0f00 	cmp.w	fp, #0
 800aa36:	4606      	mov	r6, r0
 800aa38:	460f      	mov	r7, r1
 800aa3a:	dd6c      	ble.n	800ab16 <__kernel_rem_pio2+0x246>
 800aa3c:	f108 31ff 	add.w	r1, r8, #4294967295
 800aa40:	ab0c      	add	r3, sp, #48	@ 0x30
 800aa42:	9d02      	ldr	r5, [sp, #8]
 800aa44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa48:	f1cb 0018 	rsb	r0, fp, #24
 800aa4c:	fa43 f200 	asr.w	r2, r3, r0
 800aa50:	4415      	add	r5, r2
 800aa52:	4082      	lsls	r2, r0
 800aa54:	1a9b      	subs	r3, r3, r2
 800aa56:	aa0c      	add	r2, sp, #48	@ 0x30
 800aa58:	9502      	str	r5, [sp, #8]
 800aa5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800aa5e:	f1cb 0217 	rsb	r2, fp, #23
 800aa62:	fa43 f902 	asr.w	r9, r3, r2
 800aa66:	f1b9 0f00 	cmp.w	r9, #0
 800aa6a:	dd64      	ble.n	800ab36 <__kernel_rem_pio2+0x266>
 800aa6c:	9b02      	ldr	r3, [sp, #8]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	3301      	adds	r3, #1
 800aa72:	9302      	str	r3, [sp, #8]
 800aa74:	4615      	mov	r5, r2
 800aa76:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800aa7a:	4590      	cmp	r8, r2
 800aa7c:	f300 80a1 	bgt.w	800abc2 <__kernel_rem_pio2+0x2f2>
 800aa80:	f1bb 0f00 	cmp.w	fp, #0
 800aa84:	dd07      	ble.n	800aa96 <__kernel_rem_pio2+0x1c6>
 800aa86:	f1bb 0f01 	cmp.w	fp, #1
 800aa8a:	f000 80c1 	beq.w	800ac10 <__kernel_rem_pio2+0x340>
 800aa8e:	f1bb 0f02 	cmp.w	fp, #2
 800aa92:	f000 80c8 	beq.w	800ac26 <__kernel_rem_pio2+0x356>
 800aa96:	f1b9 0f02 	cmp.w	r9, #2
 800aa9a:	d14c      	bne.n	800ab36 <__kernel_rem_pio2+0x266>
 800aa9c:	4632      	mov	r2, r6
 800aa9e:	463b      	mov	r3, r7
 800aaa0:	4955      	ldr	r1, [pc, #340]	@ (800abf8 <__kernel_rem_pio2+0x328>)
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	f7f5 fc18 	bl	80002d8 <__aeabi_dsub>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	460f      	mov	r7, r1
 800aaac:	2d00      	cmp	r5, #0
 800aaae:	d042      	beq.n	800ab36 <__kernel_rem_pio2+0x266>
 800aab0:	4658      	mov	r0, fp
 800aab2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800abe8 <__kernel_rem_pio2+0x318>
 800aab6:	f000 fa5b 	bl	800af70 <scalbn>
 800aaba:	4630      	mov	r0, r6
 800aabc:	4639      	mov	r1, r7
 800aabe:	ec53 2b10 	vmov	r2, r3, d0
 800aac2:	f7f5 fc09 	bl	80002d8 <__aeabi_dsub>
 800aac6:	4606      	mov	r6, r0
 800aac8:	460f      	mov	r7, r1
 800aaca:	e034      	b.n	800ab36 <__kernel_rem_pio2+0x266>
 800aacc:	4b4b      	ldr	r3, [pc, #300]	@ (800abfc <__kernel_rem_pio2+0x32c>)
 800aace:	2200      	movs	r2, #0
 800aad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aad4:	f7f5 fdb8 	bl	8000648 <__aeabi_dmul>
 800aad8:	f7f6 f866 	bl	8000ba8 <__aeabi_d2iz>
 800aadc:	f7f5 fd4a 	bl	8000574 <__aeabi_i2d>
 800aae0:	4b47      	ldr	r3, [pc, #284]	@ (800ac00 <__kernel_rem_pio2+0x330>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	4606      	mov	r6, r0
 800aae6:	460f      	mov	r7, r1
 800aae8:	f7f5 fdae 	bl	8000648 <__aeabi_dmul>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf4:	f7f5 fbf0 	bl	80002d8 <__aeabi_dsub>
 800aaf8:	f7f6 f856 	bl	8000ba8 <__aeabi_d2iz>
 800aafc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ab00:	f849 0b04 	str.w	r0, [r9], #4
 800ab04:	4639      	mov	r1, r7
 800ab06:	4630      	mov	r0, r6
 800ab08:	f7f5 fbe8 	bl	80002dc <__adddf3>
 800ab0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab14:	e75f      	b.n	800a9d6 <__kernel_rem_pio2+0x106>
 800ab16:	d107      	bne.n	800ab28 <__kernel_rem_pio2+0x258>
 800ab18:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab1c:	aa0c      	add	r2, sp, #48	@ 0x30
 800ab1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab22:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ab26:	e79e      	b.n	800aa66 <__kernel_rem_pio2+0x196>
 800ab28:	4b36      	ldr	r3, [pc, #216]	@ (800ac04 <__kernel_rem_pio2+0x334>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f7f6 f812 	bl	8000b54 <__aeabi_dcmpge>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d143      	bne.n	800abbc <__kernel_rem_pio2+0x2ec>
 800ab34:	4681      	mov	r9, r0
 800ab36:	2200      	movs	r2, #0
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	f7f5 ffeb 	bl	8000b18 <__aeabi_dcmpeq>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	f000 80c1 	beq.w	800acca <__kernel_rem_pio2+0x3fa>
 800ab48:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	9900      	ldr	r1, [sp, #0]
 800ab50:	428b      	cmp	r3, r1
 800ab52:	da70      	bge.n	800ac36 <__kernel_rem_pio2+0x366>
 800ab54:	2a00      	cmp	r2, #0
 800ab56:	f000 808b 	beq.w	800ac70 <__kernel_rem_pio2+0x3a0>
 800ab5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab5e:	ab0c      	add	r3, sp, #48	@ 0x30
 800ab60:	f1ab 0b18 	sub.w	fp, fp, #24
 800ab64:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0f6      	beq.n	800ab5a <__kernel_rem_pio2+0x28a>
 800ab6c:	4658      	mov	r0, fp
 800ab6e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800abe8 <__kernel_rem_pio2+0x318>
 800ab72:	f000 f9fd 	bl	800af70 <scalbn>
 800ab76:	f108 0301 	add.w	r3, r8, #1
 800ab7a:	00da      	lsls	r2, r3, #3
 800ab7c:	9205      	str	r2, [sp, #20]
 800ab7e:	ec55 4b10 	vmov	r4, r5, d0
 800ab82:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ab84:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800abfc <__kernel_rem_pio2+0x32c>
 800ab88:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ab8c:	4646      	mov	r6, r8
 800ab8e:	f04f 0a00 	mov.w	sl, #0
 800ab92:	2e00      	cmp	r6, #0
 800ab94:	f280 80d1 	bge.w	800ad3a <__kernel_rem_pio2+0x46a>
 800ab98:	4644      	mov	r4, r8
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	f2c0 80ff 	blt.w	800ad9e <__kernel_rem_pio2+0x4ce>
 800aba0:	4b19      	ldr	r3, [pc, #100]	@ (800ac08 <__kernel_rem_pio2+0x338>)
 800aba2:	461f      	mov	r7, r3
 800aba4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800aba6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abaa:	9306      	str	r3, [sp, #24]
 800abac:	f04f 0a00 	mov.w	sl, #0
 800abb0:	f04f 0b00 	mov.w	fp, #0
 800abb4:	2600      	movs	r6, #0
 800abb6:	eba8 0504 	sub.w	r5, r8, r4
 800abba:	e0e4      	b.n	800ad86 <__kernel_rem_pio2+0x4b6>
 800abbc:	f04f 0902 	mov.w	r9, #2
 800abc0:	e754      	b.n	800aa6c <__kernel_rem_pio2+0x19c>
 800abc2:	f854 3b04 	ldr.w	r3, [r4], #4
 800abc6:	bb0d      	cbnz	r5, 800ac0c <__kernel_rem_pio2+0x33c>
 800abc8:	b123      	cbz	r3, 800abd4 <__kernel_rem_pio2+0x304>
 800abca:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800abce:	f844 3c04 	str.w	r3, [r4, #-4]
 800abd2:	2301      	movs	r3, #1
 800abd4:	3201      	adds	r2, #1
 800abd6:	461d      	mov	r5, r3
 800abd8:	e74f      	b.n	800aa7a <__kernel_rem_pio2+0x1aa>
 800abda:	bf00      	nop
 800abdc:	f3af 8000 	nop.w
	...
 800abec:	3ff00000 	.word	0x3ff00000
 800abf0:	0800b7c0 	.word	0x0800b7c0
 800abf4:	40200000 	.word	0x40200000
 800abf8:	3ff00000 	.word	0x3ff00000
 800abfc:	3e700000 	.word	0x3e700000
 800ac00:	41700000 	.word	0x41700000
 800ac04:	3fe00000 	.word	0x3fe00000
 800ac08:	0800b780 	.word	0x0800b780
 800ac0c:	1acb      	subs	r3, r1, r3
 800ac0e:	e7de      	b.n	800abce <__kernel_rem_pio2+0x2fe>
 800ac10:	f108 32ff 	add.w	r2, r8, #4294967295
 800ac14:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ac1e:	a90c      	add	r1, sp, #48	@ 0x30
 800ac20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ac24:	e737      	b.n	800aa96 <__kernel_rem_pio2+0x1c6>
 800ac26:	f108 32ff 	add.w	r2, r8, #4294967295
 800ac2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ac34:	e7f3      	b.n	800ac1e <__kernel_rem_pio2+0x34e>
 800ac36:	a90c      	add	r1, sp, #48	@ 0x30
 800ac38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	e785      	b.n	800ab4e <__kernel_rem_pio2+0x27e>
 800ac42:	3401      	adds	r4, #1
 800ac44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d0fa      	beq.n	800ac42 <__kernel_rem_pio2+0x372>
 800ac4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ac52:	eb0d 0503 	add.w	r5, sp, r3
 800ac56:	9b06      	ldr	r3, [sp, #24]
 800ac58:	aa20      	add	r2, sp, #128	@ 0x80
 800ac5a:	4443      	add	r3, r8
 800ac5c:	f108 0701 	add.w	r7, r8, #1
 800ac60:	3d98      	subs	r5, #152	@ 0x98
 800ac62:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ac66:	4444      	add	r4, r8
 800ac68:	42bc      	cmp	r4, r7
 800ac6a:	da04      	bge.n	800ac76 <__kernel_rem_pio2+0x3a6>
 800ac6c:	46a0      	mov	r8, r4
 800ac6e:	e6a2      	b.n	800a9b6 <__kernel_rem_pio2+0xe6>
 800ac70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac72:	2401      	movs	r4, #1
 800ac74:	e7e6      	b.n	800ac44 <__kernel_rem_pio2+0x374>
 800ac76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac78:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ac7c:	f7f5 fc7a 	bl	8000574 <__aeabi_i2d>
 800ac80:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800af40 <__kernel_rem_pio2+0x670>
 800ac84:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac90:	46b2      	mov	sl, r6
 800ac92:	f04f 0800 	mov.w	r8, #0
 800ac96:	9b05      	ldr	r3, [sp, #20]
 800ac98:	4598      	cmp	r8, r3
 800ac9a:	dd05      	ble.n	800aca8 <__kernel_rem_pio2+0x3d8>
 800ac9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aca0:	3701      	adds	r7, #1
 800aca2:	eca5 7b02 	vstmia	r5!, {d7}
 800aca6:	e7df      	b.n	800ac68 <__kernel_rem_pio2+0x398>
 800aca8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800acac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800acb0:	f7f5 fcca 	bl	8000648 <__aeabi_dmul>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acbc:	f7f5 fb0e 	bl	80002dc <__adddf3>
 800acc0:	f108 0801 	add.w	r8, r8, #1
 800acc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc8:	e7e5      	b.n	800ac96 <__kernel_rem_pio2+0x3c6>
 800acca:	f1cb 0000 	rsb	r0, fp, #0
 800acce:	ec47 6b10 	vmov	d0, r6, r7
 800acd2:	f000 f94d 	bl	800af70 <scalbn>
 800acd6:	ec55 4b10 	vmov	r4, r5, d0
 800acda:	4b9b      	ldr	r3, [pc, #620]	@ (800af48 <__kernel_rem_pio2+0x678>)
 800acdc:	2200      	movs	r2, #0
 800acde:	4620      	mov	r0, r4
 800ace0:	4629      	mov	r1, r5
 800ace2:	f7f5 ff37 	bl	8000b54 <__aeabi_dcmpge>
 800ace6:	b300      	cbz	r0, 800ad2a <__kernel_rem_pio2+0x45a>
 800ace8:	4b98      	ldr	r3, [pc, #608]	@ (800af4c <__kernel_rem_pio2+0x67c>)
 800acea:	2200      	movs	r2, #0
 800acec:	4620      	mov	r0, r4
 800acee:	4629      	mov	r1, r5
 800acf0:	f7f5 fcaa 	bl	8000648 <__aeabi_dmul>
 800acf4:	f7f5 ff58 	bl	8000ba8 <__aeabi_d2iz>
 800acf8:	4606      	mov	r6, r0
 800acfa:	f7f5 fc3b 	bl	8000574 <__aeabi_i2d>
 800acfe:	4b92      	ldr	r3, [pc, #584]	@ (800af48 <__kernel_rem_pio2+0x678>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	f7f5 fca1 	bl	8000648 <__aeabi_dmul>
 800ad06:	460b      	mov	r3, r1
 800ad08:	4602      	mov	r2, r0
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f7f5 fae3 	bl	80002d8 <__aeabi_dsub>
 800ad12:	f7f5 ff49 	bl	8000ba8 <__aeabi_d2iz>
 800ad16:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad18:	f10b 0b18 	add.w	fp, fp, #24
 800ad1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ad20:	f108 0801 	add.w	r8, r8, #1
 800ad24:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ad28:	e720      	b.n	800ab6c <__kernel_rem_pio2+0x29c>
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f7f5 ff3b 	bl	8000ba8 <__aeabi_d2iz>
 800ad32:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad34:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ad38:	e718      	b.n	800ab6c <__kernel_rem_pio2+0x29c>
 800ad3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad3c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ad40:	f7f5 fc18 	bl	8000574 <__aeabi_i2d>
 800ad44:	4622      	mov	r2, r4
 800ad46:	462b      	mov	r3, r5
 800ad48:	f7f5 fc7e 	bl	8000648 <__aeabi_dmul>
 800ad4c:	4652      	mov	r2, sl
 800ad4e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ad52:	465b      	mov	r3, fp
 800ad54:	4620      	mov	r0, r4
 800ad56:	4629      	mov	r1, r5
 800ad58:	f7f5 fc76 	bl	8000648 <__aeabi_dmul>
 800ad5c:	3e01      	subs	r6, #1
 800ad5e:	4604      	mov	r4, r0
 800ad60:	460d      	mov	r5, r1
 800ad62:	e716      	b.n	800ab92 <__kernel_rem_pio2+0x2c2>
 800ad64:	9906      	ldr	r1, [sp, #24]
 800ad66:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ad6a:	9106      	str	r1, [sp, #24]
 800ad6c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ad70:	f7f5 fc6a 	bl	8000648 <__aeabi_dmul>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4650      	mov	r0, sl
 800ad7a:	4659      	mov	r1, fp
 800ad7c:	f7f5 faae 	bl	80002dc <__adddf3>
 800ad80:	3601      	adds	r6, #1
 800ad82:	4682      	mov	sl, r0
 800ad84:	468b      	mov	fp, r1
 800ad86:	9b00      	ldr	r3, [sp, #0]
 800ad88:	429e      	cmp	r6, r3
 800ad8a:	dc01      	bgt.n	800ad90 <__kernel_rem_pio2+0x4c0>
 800ad8c:	42ae      	cmp	r6, r5
 800ad8e:	dde9      	ble.n	800ad64 <__kernel_rem_pio2+0x494>
 800ad90:	ab48      	add	r3, sp, #288	@ 0x120
 800ad92:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ad96:	e9c5 ab00 	strd	sl, fp, [r5]
 800ad9a:	3c01      	subs	r4, #1
 800ad9c:	e6fd      	b.n	800ab9a <__kernel_rem_pio2+0x2ca>
 800ad9e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	dc0b      	bgt.n	800adbc <__kernel_rem_pio2+0x4ec>
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dc35      	bgt.n	800ae14 <__kernel_rem_pio2+0x544>
 800ada8:	d059      	beq.n	800ae5e <__kernel_rem_pio2+0x58e>
 800adaa:	9b02      	ldr	r3, [sp, #8]
 800adac:	f003 0007 	and.w	r0, r3, #7
 800adb0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800adb4:	ecbd 8b02 	vpop	{d8}
 800adb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d1f3      	bne.n	800adaa <__kernel_rem_pio2+0x4da>
 800adc2:	9b05      	ldr	r3, [sp, #20]
 800adc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800adc8:	eb0d 0403 	add.w	r4, sp, r3
 800adcc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800add0:	4625      	mov	r5, r4
 800add2:	46c2      	mov	sl, r8
 800add4:	f1ba 0f00 	cmp.w	sl, #0
 800add8:	dc69      	bgt.n	800aeae <__kernel_rem_pio2+0x5de>
 800adda:	4645      	mov	r5, r8
 800addc:	2d01      	cmp	r5, #1
 800adde:	f300 8087 	bgt.w	800aef0 <__kernel_rem_pio2+0x620>
 800ade2:	9c05      	ldr	r4, [sp, #20]
 800ade4:	ab48      	add	r3, sp, #288	@ 0x120
 800ade6:	441c      	add	r4, r3
 800ade8:	2000      	movs	r0, #0
 800adea:	2100      	movs	r1, #0
 800adec:	f1b8 0f01 	cmp.w	r8, #1
 800adf0:	f300 809c 	bgt.w	800af2c <__kernel_rem_pio2+0x65c>
 800adf4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800adf8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800adfc:	f1b9 0f00 	cmp.w	r9, #0
 800ae00:	f040 80a6 	bne.w	800af50 <__kernel_rem_pio2+0x680>
 800ae04:	9b04      	ldr	r3, [sp, #16]
 800ae06:	e9c3 5600 	strd	r5, r6, [r3]
 800ae0a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ae0e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ae12:	e7ca      	b.n	800adaa <__kernel_rem_pio2+0x4da>
 800ae14:	9d05      	ldr	r5, [sp, #20]
 800ae16:	ab48      	add	r3, sp, #288	@ 0x120
 800ae18:	441d      	add	r5, r3
 800ae1a:	4644      	mov	r4, r8
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	2100      	movs	r1, #0
 800ae20:	2c00      	cmp	r4, #0
 800ae22:	da35      	bge.n	800ae90 <__kernel_rem_pio2+0x5c0>
 800ae24:	f1b9 0f00 	cmp.w	r9, #0
 800ae28:	d038      	beq.n	800ae9c <__kernel_rem_pio2+0x5cc>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae30:	9c04      	ldr	r4, [sp, #16]
 800ae32:	e9c4 2300 	strd	r2, r3, [r4]
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ae3e:	f7f5 fa4b 	bl	80002d8 <__aeabi_dsub>
 800ae42:	ad4a      	add	r5, sp, #296	@ 0x128
 800ae44:	2401      	movs	r4, #1
 800ae46:	45a0      	cmp	r8, r4
 800ae48:	da2b      	bge.n	800aea2 <__kernel_rem_pio2+0x5d2>
 800ae4a:	f1b9 0f00 	cmp.w	r9, #0
 800ae4e:	d002      	beq.n	800ae56 <__kernel_rem_pio2+0x586>
 800ae50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae54:	4619      	mov	r1, r3
 800ae56:	9b04      	ldr	r3, [sp, #16]
 800ae58:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ae5c:	e7a5      	b.n	800adaa <__kernel_rem_pio2+0x4da>
 800ae5e:	9c05      	ldr	r4, [sp, #20]
 800ae60:	ab48      	add	r3, sp, #288	@ 0x120
 800ae62:	441c      	add	r4, r3
 800ae64:	2000      	movs	r0, #0
 800ae66:	2100      	movs	r1, #0
 800ae68:	f1b8 0f00 	cmp.w	r8, #0
 800ae6c:	da09      	bge.n	800ae82 <__kernel_rem_pio2+0x5b2>
 800ae6e:	f1b9 0f00 	cmp.w	r9, #0
 800ae72:	d002      	beq.n	800ae7a <__kernel_rem_pio2+0x5aa>
 800ae74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae78:	4619      	mov	r1, r3
 800ae7a:	9b04      	ldr	r3, [sp, #16]
 800ae7c:	e9c3 0100 	strd	r0, r1, [r3]
 800ae80:	e793      	b.n	800adaa <__kernel_rem_pio2+0x4da>
 800ae82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae86:	f7f5 fa29 	bl	80002dc <__adddf3>
 800ae8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae8e:	e7eb      	b.n	800ae68 <__kernel_rem_pio2+0x598>
 800ae90:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ae94:	f7f5 fa22 	bl	80002dc <__adddf3>
 800ae98:	3c01      	subs	r4, #1
 800ae9a:	e7c1      	b.n	800ae20 <__kernel_rem_pio2+0x550>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	e7c6      	b.n	800ae30 <__kernel_rem_pio2+0x560>
 800aea2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800aea6:	f7f5 fa19 	bl	80002dc <__adddf3>
 800aeaa:	3401      	adds	r4, #1
 800aeac:	e7cb      	b.n	800ae46 <__kernel_rem_pio2+0x576>
 800aeae:	ed35 7b02 	vldmdb	r5!, {d7}
 800aeb2:	ed8d 7b00 	vstr	d7, [sp]
 800aeb6:	ed95 7b02 	vldr	d7, [r5, #8]
 800aeba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aebe:	ec53 2b17 	vmov	r2, r3, d7
 800aec2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aec6:	f7f5 fa09 	bl	80002dc <__adddf3>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	4606      	mov	r6, r0
 800aed0:	460f      	mov	r7, r1
 800aed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aed6:	f7f5 f9ff 	bl	80002d8 <__aeabi_dsub>
 800aeda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aede:	f7f5 f9fd 	bl	80002dc <__adddf3>
 800aee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aee6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800aeea:	e9c5 6700 	strd	r6, r7, [r5]
 800aeee:	e771      	b.n	800add4 <__kernel_rem_pio2+0x504>
 800aef0:	ed34 7b02 	vldmdb	r4!, {d7}
 800aef4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800aef8:	ec51 0b17 	vmov	r0, r1, d7
 800aefc:	4652      	mov	r2, sl
 800aefe:	465b      	mov	r3, fp
 800af00:	ed8d 7b00 	vstr	d7, [sp]
 800af04:	f7f5 f9ea 	bl	80002dc <__adddf3>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4606      	mov	r6, r0
 800af0e:	460f      	mov	r7, r1
 800af10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af14:	f7f5 f9e0 	bl	80002d8 <__aeabi_dsub>
 800af18:	4652      	mov	r2, sl
 800af1a:	465b      	mov	r3, fp
 800af1c:	f7f5 f9de 	bl	80002dc <__adddf3>
 800af20:	3d01      	subs	r5, #1
 800af22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af26:	e9c4 6700 	strd	r6, r7, [r4]
 800af2a:	e757      	b.n	800addc <__kernel_rem_pio2+0x50c>
 800af2c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af30:	f7f5 f9d4 	bl	80002dc <__adddf3>
 800af34:	f108 38ff 	add.w	r8, r8, #4294967295
 800af38:	e758      	b.n	800adec <__kernel_rem_pio2+0x51c>
 800af3a:	bf00      	nop
 800af3c:	f3af 8000 	nop.w
	...
 800af48:	41700000 	.word	0x41700000
 800af4c:	3e700000 	.word	0x3e700000
 800af50:	9b04      	ldr	r3, [sp, #16]
 800af52:	9a04      	ldr	r2, [sp, #16]
 800af54:	601d      	str	r5, [r3, #0]
 800af56:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800af5a:	605c      	str	r4, [r3, #4]
 800af5c:	609f      	str	r7, [r3, #8]
 800af5e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800af62:	60d3      	str	r3, [r2, #12]
 800af64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af68:	6110      	str	r0, [r2, #16]
 800af6a:	6153      	str	r3, [r2, #20]
 800af6c:	e71d      	b.n	800adaa <__kernel_rem_pio2+0x4da>
 800af6e:	bf00      	nop

0800af70 <scalbn>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	ec55 4b10 	vmov	r4, r5, d0
 800af76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800af7a:	4606      	mov	r6, r0
 800af7c:	462b      	mov	r3, r5
 800af7e:	b991      	cbnz	r1, 800afa6 <scalbn+0x36>
 800af80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800af84:	4323      	orrs	r3, r4
 800af86:	d03b      	beq.n	800b000 <scalbn+0x90>
 800af88:	4b33      	ldr	r3, [pc, #204]	@ (800b058 <scalbn+0xe8>)
 800af8a:	4620      	mov	r0, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	2200      	movs	r2, #0
 800af90:	f7f5 fb5a 	bl	8000648 <__aeabi_dmul>
 800af94:	4b31      	ldr	r3, [pc, #196]	@ (800b05c <scalbn+0xec>)
 800af96:	429e      	cmp	r6, r3
 800af98:	4604      	mov	r4, r0
 800af9a:	460d      	mov	r5, r1
 800af9c:	da0f      	bge.n	800afbe <scalbn+0x4e>
 800af9e:	a326      	add	r3, pc, #152	@ (adr r3, 800b038 <scalbn+0xc8>)
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	e01e      	b.n	800afe4 <scalbn+0x74>
 800afa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800afaa:	4291      	cmp	r1, r2
 800afac:	d10b      	bne.n	800afc6 <scalbn+0x56>
 800afae:	4622      	mov	r2, r4
 800afb0:	4620      	mov	r0, r4
 800afb2:	4629      	mov	r1, r5
 800afb4:	f7f5 f992 	bl	80002dc <__adddf3>
 800afb8:	4604      	mov	r4, r0
 800afba:	460d      	mov	r5, r1
 800afbc:	e020      	b.n	800b000 <scalbn+0x90>
 800afbe:	460b      	mov	r3, r1
 800afc0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800afc4:	3936      	subs	r1, #54	@ 0x36
 800afc6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800afca:	4296      	cmp	r6, r2
 800afcc:	dd0d      	ble.n	800afea <scalbn+0x7a>
 800afce:	2d00      	cmp	r5, #0
 800afd0:	a11b      	add	r1, pc, #108	@ (adr r1, 800b040 <scalbn+0xd0>)
 800afd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afd6:	da02      	bge.n	800afde <scalbn+0x6e>
 800afd8:	a11b      	add	r1, pc, #108	@ (adr r1, 800b048 <scalbn+0xd8>)
 800afda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afde:	a318      	add	r3, pc, #96	@ (adr r3, 800b040 <scalbn+0xd0>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f7f5 fb30 	bl	8000648 <__aeabi_dmul>
 800afe8:	e7e6      	b.n	800afb8 <scalbn+0x48>
 800afea:	1872      	adds	r2, r6, r1
 800afec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800aff0:	428a      	cmp	r2, r1
 800aff2:	dcec      	bgt.n	800afce <scalbn+0x5e>
 800aff4:	2a00      	cmp	r2, #0
 800aff6:	dd06      	ble.n	800b006 <scalbn+0x96>
 800aff8:	f36f 531e 	bfc	r3, #20, #11
 800affc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b000:	ec45 4b10 	vmov	d0, r4, r5
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b00a:	da08      	bge.n	800b01e <scalbn+0xae>
 800b00c:	2d00      	cmp	r5, #0
 800b00e:	a10a      	add	r1, pc, #40	@ (adr r1, 800b038 <scalbn+0xc8>)
 800b010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b014:	dac3      	bge.n	800af9e <scalbn+0x2e>
 800b016:	a10e      	add	r1, pc, #56	@ (adr r1, 800b050 <scalbn+0xe0>)
 800b018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b01c:	e7bf      	b.n	800af9e <scalbn+0x2e>
 800b01e:	3236      	adds	r2, #54	@ 0x36
 800b020:	f36f 531e 	bfc	r3, #20, #11
 800b024:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b028:	4620      	mov	r0, r4
 800b02a:	4b0d      	ldr	r3, [pc, #52]	@ (800b060 <scalbn+0xf0>)
 800b02c:	4629      	mov	r1, r5
 800b02e:	2200      	movs	r2, #0
 800b030:	e7d8      	b.n	800afe4 <scalbn+0x74>
 800b032:	bf00      	nop
 800b034:	f3af 8000 	nop.w
 800b038:	c2f8f359 	.word	0xc2f8f359
 800b03c:	01a56e1f 	.word	0x01a56e1f
 800b040:	8800759c 	.word	0x8800759c
 800b044:	7e37e43c 	.word	0x7e37e43c
 800b048:	8800759c 	.word	0x8800759c
 800b04c:	fe37e43c 	.word	0xfe37e43c
 800b050:	c2f8f359 	.word	0xc2f8f359
 800b054:	81a56e1f 	.word	0x81a56e1f
 800b058:	43500000 	.word	0x43500000
 800b05c:	ffff3cb0 	.word	0xffff3cb0
 800b060:	3c900000 	.word	0x3c900000
 800b064:	00000000 	.word	0x00000000

0800b068 <floor>:
 800b068:	ec51 0b10 	vmov	r0, r1, d0
 800b06c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b074:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b078:	2e13      	cmp	r6, #19
 800b07a:	460c      	mov	r4, r1
 800b07c:	4605      	mov	r5, r0
 800b07e:	4680      	mov	r8, r0
 800b080:	dc34      	bgt.n	800b0ec <floor+0x84>
 800b082:	2e00      	cmp	r6, #0
 800b084:	da17      	bge.n	800b0b6 <floor+0x4e>
 800b086:	a332      	add	r3, pc, #200	@ (adr r3, 800b150 <floor+0xe8>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	f7f5 f926 	bl	80002dc <__adddf3>
 800b090:	2200      	movs	r2, #0
 800b092:	2300      	movs	r3, #0
 800b094:	f7f5 fd68 	bl	8000b68 <__aeabi_dcmpgt>
 800b098:	b150      	cbz	r0, 800b0b0 <floor+0x48>
 800b09a:	2c00      	cmp	r4, #0
 800b09c:	da55      	bge.n	800b14a <floor+0xe2>
 800b09e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b0a2:	432c      	orrs	r4, r5
 800b0a4:	2500      	movs	r5, #0
 800b0a6:	42ac      	cmp	r4, r5
 800b0a8:	4c2b      	ldr	r4, [pc, #172]	@ (800b158 <floor+0xf0>)
 800b0aa:	bf08      	it	eq
 800b0ac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	e023      	b.n	800b0fe <floor+0x96>
 800b0b6:	4f29      	ldr	r7, [pc, #164]	@ (800b15c <floor+0xf4>)
 800b0b8:	4137      	asrs	r7, r6
 800b0ba:	ea01 0307 	and.w	r3, r1, r7
 800b0be:	4303      	orrs	r3, r0
 800b0c0:	d01d      	beq.n	800b0fe <floor+0x96>
 800b0c2:	a323      	add	r3, pc, #140	@ (adr r3, 800b150 <floor+0xe8>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f7f5 f908 	bl	80002dc <__adddf3>
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f7f5 fd4a 	bl	8000b68 <__aeabi_dcmpgt>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d0eb      	beq.n	800b0b0 <floor+0x48>
 800b0d8:	2c00      	cmp	r4, #0
 800b0da:	bfbe      	ittt	lt
 800b0dc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b0e0:	4133      	asrlt	r3, r6
 800b0e2:	18e4      	addlt	r4, r4, r3
 800b0e4:	ea24 0407 	bic.w	r4, r4, r7
 800b0e8:	2500      	movs	r5, #0
 800b0ea:	e7e1      	b.n	800b0b0 <floor+0x48>
 800b0ec:	2e33      	cmp	r6, #51	@ 0x33
 800b0ee:	dd0a      	ble.n	800b106 <floor+0x9e>
 800b0f0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b0f4:	d103      	bne.n	800b0fe <floor+0x96>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	f7f5 f8ef 	bl	80002dc <__adddf3>
 800b0fe:	ec41 0b10 	vmov	d0, r0, r1
 800b102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b106:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b10a:	f04f 37ff 	mov.w	r7, #4294967295
 800b10e:	40df      	lsrs	r7, r3
 800b110:	4207      	tst	r7, r0
 800b112:	d0f4      	beq.n	800b0fe <floor+0x96>
 800b114:	a30e      	add	r3, pc, #56	@ (adr r3, 800b150 <floor+0xe8>)
 800b116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11a:	f7f5 f8df 	bl	80002dc <__adddf3>
 800b11e:	2200      	movs	r2, #0
 800b120:	2300      	movs	r3, #0
 800b122:	f7f5 fd21 	bl	8000b68 <__aeabi_dcmpgt>
 800b126:	2800      	cmp	r0, #0
 800b128:	d0c2      	beq.n	800b0b0 <floor+0x48>
 800b12a:	2c00      	cmp	r4, #0
 800b12c:	da0a      	bge.n	800b144 <floor+0xdc>
 800b12e:	2e14      	cmp	r6, #20
 800b130:	d101      	bne.n	800b136 <floor+0xce>
 800b132:	3401      	adds	r4, #1
 800b134:	e006      	b.n	800b144 <floor+0xdc>
 800b136:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b13a:	2301      	movs	r3, #1
 800b13c:	40b3      	lsls	r3, r6
 800b13e:	441d      	add	r5, r3
 800b140:	4545      	cmp	r5, r8
 800b142:	d3f6      	bcc.n	800b132 <floor+0xca>
 800b144:	ea25 0507 	bic.w	r5, r5, r7
 800b148:	e7b2      	b.n	800b0b0 <floor+0x48>
 800b14a:	2500      	movs	r5, #0
 800b14c:	462c      	mov	r4, r5
 800b14e:	e7af      	b.n	800b0b0 <floor+0x48>
 800b150:	8800759c 	.word	0x8800759c
 800b154:	7e37e43c 	.word	0x7e37e43c
 800b158:	bff00000 	.word	0xbff00000
 800b15c:	000fffff 	.word	0x000fffff

0800b160 <_init>:
 800b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b162:	bf00      	nop
 800b164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b166:	bc08      	pop	{r3}
 800b168:	469e      	mov	lr, r3
 800b16a:	4770      	bx	lr

0800b16c <_fini>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	bf00      	nop
 800b170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b172:	bc08      	pop	{r3}
 800b174:	469e      	mov	lr, r3
 800b176:	4770      	bx	lr
