
F103C8T6_Uart_Check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08006ad8  08006ad8  00007ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f44  08006f44  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f44  08006f44  00007f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f4c  08006f4c  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f4c  08006f4c  00007f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f50  08006f50  00007f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006f54  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001d4  08007128  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08007128  00008390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ac1  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c1  00000000  00000000  0000ecbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00010180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000513  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178bb  00000000  00000000  00010d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f50  00000000  00000000  00028606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ca0  00000000  00000000  00030556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b41f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee4  00000000  00000000  000b423c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000b7120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006abc 	.word	0x08006abc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006abc 	.word	0x08006abc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b090      	sub	sp, #64	@ 0x40
 8000bd8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bda:	f000 fa81 	bl	80010e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bde:	f000 f84d 	bl	8000c7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000be2:	f000 f8b1 	bl	8000d48 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000be6:	f000 f885 	bl	8000cf4 <MX_USART1_UART_Init>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Poll one byte from UART2
		rxByte = 0;
 8000bea:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <main+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive(&huart1, &rxByte, 1, HAL_MAX_DELAY);
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	491b      	ldr	r1, [pc, #108]	@ (8000c64 <main+0x90>)
 8000bf8:	481b      	ldr	r0, [pc, #108]	@ (8000c68 <main+0x94>)
 8000bfa:	f001 fa26 	bl	800204a <HAL_UART_Receive>
		if (rxByte != 0xAA)
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <main+0x90>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2baa      	cmp	r3, #170	@ 0xaa
 8000c04:	d12c      	bne.n	8000c60 <main+0x8c>
			continue;

		// Step 2: Read SYS, DIA, BPM
		HAL_UART_Receive(&huart1, &sysVal, 1, HAL_MAX_DELAY);
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4917      	ldr	r1, [pc, #92]	@ (8000c6c <main+0x98>)
 8000c0e:	4816      	ldr	r0, [pc, #88]	@ (8000c68 <main+0x94>)
 8000c10:	f001 fa1b 	bl	800204a <HAL_UART_Receive>
		HAL_UART_Receive(&huart1, &diaVal, 1, HAL_MAX_DELAY);
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4915      	ldr	r1, [pc, #84]	@ (8000c70 <main+0x9c>)
 8000c1c:	4812      	ldr	r0, [pc, #72]	@ (8000c68 <main+0x94>)
 8000c1e:	f001 fa14 	bl	800204a <HAL_UART_Receive>
		HAL_UART_Receive(&huart1, &bpmVal, 1, HAL_MAX_DELAY);
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	2201      	movs	r2, #1
 8000c28:	4912      	ldr	r1, [pc, #72]	@ (8000c74 <main+0xa0>)
 8000c2a:	480f      	ldr	r0, [pc, #60]	@ (8000c68 <main+0x94>)
 8000c2c:	f001 fa0d 	bl	800204a <HAL_UART_Receive>

		// Step 3: Debug - view in Live Expressions or send back over UART
		char buf[50];
		int len = sprintf(buf, "SYS=%d, DIA=%d, BPM=%d\r\n", sysVal, diaVal,
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <main+0x98>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <main+0x9c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <main+0xa0>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4638      	mov	r0, r7
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	460b      	mov	r3, r1
 8000c46:	490c      	ldr	r1, [pc, #48]	@ (8000c78 <main+0xa4>)
 8000c48:	f002 fb06 	bl	8003258 <siprintf>
 8000c4c:	6378      	str	r0, [r7, #52]	@ 0x34
				bpmVal);
		HAL_UART_Transmit(&huart1, (uint8_t*) buf, len, HAL_MAX_DELAY);
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4639      	mov	r1, r7
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <main+0x94>)
 8000c5a:	f001 f96b 	bl	8001f34 <HAL_UART_Transmit>
 8000c5e:	e7c4      	b.n	8000bea <main+0x16>
			continue;
 8000c60:	bf00      	nop
	while (1) {
 8000c62:	e7c2      	b.n	8000bea <main+0x16>
 8000c64:	200001f0 	.word	0x200001f0
 8000c68:	200001f4 	.word	0x200001f4
 8000c6c:	200001f1 	.word	0x200001f1
 8000c70:	200001f2 	.word	0x200001f2
 8000c74:	200001f3 	.word	0x200001f3
 8000c78:	08006ad8 	.word	0x08006ad8

08000c7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b090      	sub	sp, #64	@ 0x40
 8000c80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c82:	f107 0318 	add.w	r3, r7, #24
 8000c86:	2228      	movs	r2, #40	@ 0x28
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fb49 	bl	8003322 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fcde 	bl	8001674 <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x46>
		Error_Handler();
 8000cbe:	f000 f871 	bl	8000da4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cd2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 ff4b 	bl	8001b78 <HAL_RCC_ClockConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x70>
		Error_Handler();
 8000ce8:	f000 f85c 	bl	8000da4 <Error_Handler>
	}
}
 8000cec:	bf00      	nop
 8000cee:	3740      	adds	r7, #64	@ 0x40
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <MX_USART1_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d04:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f001 f8b2 	bl	8001e94 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000d36:	f000 f835 	bl	8000da4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001f4 	.word	0x200001f4
 8000d44:	40013800 	.word	0x40013800

08000d48 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_GPIO_Init+0x58>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a13      	ldr	r2, [pc, #76]	@ (8000da0 <MX_GPIO_Init+0x58>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_GPIO_Init+0x58>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_GPIO_Init+0x58>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <MX_GPIO_Init+0x58>)
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_GPIO_Init+0x58>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_GPIO_Init+0x58>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <MX_GPIO_Init+0x58>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <MX_GPIO_Init+0x58>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000

08000da4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <Error_Handler+0x8>

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_MspInit+0x60>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <HAL_MspInit+0x60>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000

08000e14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea0 <HAL_UART_MspInit+0x8c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d131      	bne.n	8000e98 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <HAL_UART_MspInit+0x94>)
 8000e7a:	f000 fa77 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <HAL_UART_MspInit+0x94>)
 8000e94:	f000 fa6a 	bl	800136c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f936 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return 1;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <_kill>:

int _kill(int pid, int sig)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f1c:	f002 fa54 	bl	80033c8 <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2216      	movs	r2, #22
 8000f24:	601a      	str	r2, [r3, #0]
  return -1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_exit>:

void _exit (int status)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffe7 	bl	8000f12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <_exit+0x12>

08000f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	4601      	mov	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
  }

  return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e009      	b.n	8000fa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf1      	blt.n	8000f94 <_write+0x12>
  }
  return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_close>:

int _close(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe0:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <_isatty>:

int _isatty(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
	...

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f002 f9bc 	bl	80033c8 <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20005000 	.word	0x20005000
 800107c:	00000400 	.word	0x00000400
 8001080:	2000023c 	.word	0x2000023c
 8001084:	20000390 	.word	0x20000390

08001088 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001094:	f7ff fff8 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800109a:	490c      	ldr	r1, [pc, #48]	@ (80010cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a09      	ldr	r2, [pc, #36]	@ (80010d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010b0:	4c09      	ldr	r4, [pc, #36]	@ (80010d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f002 f989 	bl	80033d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c2:	f7ff fd87 	bl	8000bd4 <main>
  bx lr
 80010c6:	4770      	bx	lr
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80010d0:	08006f54 	.word	0x08006f54
  ldr r2, =_sbss
 80010d4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80010d8:	20000390 	.word	0x20000390

080010dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_2_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f907 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fe58 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f911 	bl	8001352 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f8e7 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_IncTick+0x1c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_IncTick+0x20>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <HAL_IncTick+0x20>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000008 	.word	0x20000008
 800118c:	20000240 	.word	0x20000240

08001190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b02      	ldr	r3, [pc, #8]	@ (80011a0 <HAL_GetTick+0x10>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000240 	.word	0x20000240

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	@ (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff90 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff49 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff5e 	bl	80011ec <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff90 	bl	800125c <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5f 	bl	8001208 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffb0 	bl	80012c0 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b08b      	sub	sp, #44	@ 0x2c
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e169      	b.n	8001654 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001380:	2201      	movs	r2, #1
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8158 	bne.w	800164e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a9a      	ldr	r2, [pc, #616]	@ (800160c <HAL_GPIO_Init+0x2a0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d05e      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013a8:	4a98      	ldr	r2, [pc, #608]	@ (800160c <HAL_GPIO_Init+0x2a0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d875      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ae:	4a98      	ldr	r2, [pc, #608]	@ (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d058      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013b4:	4a96      	ldr	r2, [pc, #600]	@ (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d86f      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ba:	4a96      	ldr	r2, [pc, #600]	@ (8001614 <HAL_GPIO_Init+0x2a8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d052      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013c0:	4a94      	ldr	r2, [pc, #592]	@ (8001614 <HAL_GPIO_Init+0x2a8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d869      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013c6:	4a94      	ldr	r2, [pc, #592]	@ (8001618 <HAL_GPIO_Init+0x2ac>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d04c      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013cc:	4a92      	ldr	r2, [pc, #584]	@ (8001618 <HAL_GPIO_Init+0x2ac>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d863      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013d2:	4a92      	ldr	r2, [pc, #584]	@ (800161c <HAL_GPIO_Init+0x2b0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d046      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013d8:	4a90      	ldr	r2, [pc, #576]	@ (800161c <HAL_GPIO_Init+0x2b0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d85d      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013de:	2b12      	cmp	r3, #18
 80013e0:	d82a      	bhi.n	8001438 <HAL_GPIO_Init+0xcc>
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d859      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013e6:	a201      	add	r2, pc, #4	@ (adr r2, 80013ec <HAL_GPIO_Init+0x80>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	08001467 	.word	0x08001467
 80013f0:	08001441 	.word	0x08001441
 80013f4:	08001453 	.word	0x08001453
 80013f8:	08001495 	.word	0x08001495
 80013fc:	0800149b 	.word	0x0800149b
 8001400:	0800149b 	.word	0x0800149b
 8001404:	0800149b 	.word	0x0800149b
 8001408:	0800149b 	.word	0x0800149b
 800140c:	0800149b 	.word	0x0800149b
 8001410:	0800149b 	.word	0x0800149b
 8001414:	0800149b 	.word	0x0800149b
 8001418:	0800149b 	.word	0x0800149b
 800141c:	0800149b 	.word	0x0800149b
 8001420:	0800149b 	.word	0x0800149b
 8001424:	0800149b 	.word	0x0800149b
 8001428:	0800149b 	.word	0x0800149b
 800142c:	0800149b 	.word	0x0800149b
 8001430:	08001449 	.word	0x08001449
 8001434:	0800145d 	.word	0x0800145d
 8001438:	4a79      	ldr	r2, [pc, #484]	@ (8001620 <HAL_GPIO_Init+0x2b4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800143e:	e02c      	b.n	800149a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e029      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	3304      	adds	r3, #4
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e024      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	3308      	adds	r3, #8
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e01f      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	330c      	adds	r3, #12
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e01a      	b.n	800149c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800146e:	2304      	movs	r3, #4
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e013      	b.n	800149c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	611a      	str	r2, [r3, #16]
          break;
 8001486:	e009      	b.n	800149c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001488:	2308      	movs	r3, #8
 800148a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	615a      	str	r2, [r3, #20]
          break;
 8001492:	e003      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x130>
          break;
 800149a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	@ 0xff
 80014a0:	d801      	bhi.n	80014a6 <HAL_GPIO_Init+0x13a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_Init+0x13e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2bff      	cmp	r3, #255	@ 0xff
 80014b0:	d802      	bhi.n	80014b8 <HAL_GPIO_Init+0x14c>
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x152>
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	3b08      	subs	r3, #8
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	210f      	movs	r1, #15
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	6a39      	ldr	r1, [r7, #32]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80b1 	beq.w	800164e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001504:	4a48      	ldr	r2, [pc, #288]	@ (8001628 <HAL_GPIO_Init+0x2bc>)
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a40      	ldr	r2, [pc, #256]	@ (800162c <HAL_GPIO_Init+0x2c0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d013      	beq.n	8001558 <HAL_GPIO_Init+0x1ec>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3f      	ldr	r2, [pc, #252]	@ (8001630 <HAL_GPIO_Init+0x2c4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1e8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3e      	ldr	r2, [pc, #248]	@ (8001634 <HAL_GPIO_Init+0x2c8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1e4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3d      	ldr	r2, [pc, #244]	@ (8001638 <HAL_GPIO_Init+0x2cc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1e0>
 8001548:	2303      	movs	r3, #3
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 800154c:	2304      	movs	r3, #4
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001550:	2302      	movs	r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001558:	2300      	movs	r3, #0
 800155a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156a:	492f      	ldr	r1, [pc, #188]	@ (8001628 <HAL_GPIO_Init+0x2bc>)
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001584:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	492c      	ldr	r1, [pc, #176]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001592:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	4928      	ldr	r1, [pc, #160]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4922      	ldr	r1, [pc, #136]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	491e      	ldr	r1, [pc, #120]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4918      	ldr	r1, [pc, #96]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4914      	ldr	r1, [pc, #80]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d021      	beq.n	8001640 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	490e      	ldr	r1, [pc, #56]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e021      	b.n	800164e <HAL_GPIO_Init+0x2e2>
 800160a:	bf00      	nop
 800160c:	10320000 	.word	0x10320000
 8001610:	10310000 	.word	0x10310000
 8001614:	10220000 	.word	0x10220000
 8001618:	10210000 	.word	0x10210000
 800161c:	10120000 	.word	0x10120000
 8001620:	10110000 	.word	0x10110000
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	40010800 	.word	0x40010800
 8001630:	40010c00 	.word	0x40010c00
 8001634:	40011000 	.word	0x40011000
 8001638:	40011400 	.word	0x40011400
 800163c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_GPIO_Init+0x304>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	43db      	mvns	r3, r3
 8001648:	4909      	ldr	r1, [pc, #36]	@ (8001670 <HAL_GPIO_Init+0x304>)
 800164a:	4013      	ands	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	3301      	adds	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	f47f ae8e 	bne.w	8001380 <HAL_GPIO_Init+0x14>
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	372c      	adds	r7, #44	@ 0x2c
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e272      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8087 	beq.w	80017a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001694:	4b92      	ldr	r3, [pc, #584]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b04      	cmp	r3, #4
 800169e:	d00c      	beq.n	80016ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a0:	4b8f      	ldr	r3, [pc, #572]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d112      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
 80016ac:	4b8c      	ldr	r3, [pc, #560]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4b89      	ldr	r3, [pc, #548]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d06c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x12c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d168      	bne.n	80017a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e24c      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x76>
 80016dc:	4b80      	ldr	r3, [pc, #512]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a7f      	ldr	r2, [pc, #508]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x98>
 80016f2:	4b7b      	ldr	r3, [pc, #492]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7a      	ldr	r2, [pc, #488]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b78      	ldr	r3, [pc, #480]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a77      	ldr	r2, [pc, #476]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0xbc>
 8001716:	4b72      	ldr	r3, [pc, #456]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a71      	ldr	r2, [pc, #452]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6f      	ldr	r3, [pc, #444]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6e      	ldr	r2, [pc, #440]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 8001730:	4b6b      	ldr	r3, [pc, #428]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6a      	ldr	r2, [pc, #424]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b68      	ldr	r3, [pc, #416]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a67      	ldr	r2, [pc, #412]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fd1e 	bl	8001190 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fd1a 	bl	8001190 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e200      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b5d      	ldr	r3, [pc, #372]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xe4>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fd0a 	bl	8001190 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fd06 	bl	8001190 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	@ 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1ec      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x10c>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	4b4c      	ldr	r3, [pc, #304]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
 80017c6:	4b46      	ldr	r3, [pc, #280]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b43      	ldr	r3, [pc, #268]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1c0      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4939      	ldr	r1, [pc, #228]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b36      	ldr	r3, [pc, #216]	@ (80018e4 <HAL_RCC_OscConfig+0x270>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fcbf 	bl	8001190 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fcbb 	bl	8001190 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1a1      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4927      	ldr	r1, [pc, #156]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_RCC_OscConfig+0x270>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fc9e 	bl	8001190 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fc9a 	bl	8001190 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e180      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d03a      	beq.n	80018f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d019      	beq.n	80018be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <HAL_RCC_OscConfig+0x274>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff fc7e 	bl	8001190 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fc7a 	bl	8001190 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e160      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 face 	bl	8001e58 <RCC_Delay>
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_RCC_OscConfig+0x274>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fc64 	bl	8001190 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ca:	e00f      	b.n	80018ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fc60 	bl	8001190 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d908      	bls.n	80018ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e146      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	42420000 	.word	0x42420000
 80018e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b92      	ldr	r3, [pc, #584]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e9      	bne.n	80018cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a6 	beq.w	8001a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10d      	bne.n	8001932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b88      	ldr	r3, [pc, #544]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a87      	ldr	r2, [pc, #540]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b85      	ldr	r3, [pc, #532]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001932:	4b82      	ldr	r3, [pc, #520]	@ (8001b3c <HAL_RCC_OscConfig+0x4c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b3c <HAL_RCC_OscConfig+0x4c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a7e      	ldr	r2, [pc, #504]	@ (8001b3c <HAL_RCC_OscConfig+0x4c8>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194a:	f7ff fc21 	bl	8001190 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001952:	f7ff fc1d 	bl	8001190 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	@ 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e103      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	4b75      	ldr	r3, [pc, #468]	@ (8001b3c <HAL_RCC_OscConfig+0x4c8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x312>
 8001978:	4b6f      	ldr	r3, [pc, #444]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a6e      	ldr	r2, [pc, #440]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6213      	str	r3, [r2, #32]
 8001984:	e02d      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x334>
 800198e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a69      	ldr	r2, [pc, #420]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b67      	ldr	r3, [pc, #412]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a66      	ldr	r2, [pc, #408]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	e01c      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x356>
 80019b0:	4b61      	ldr	r3, [pc, #388]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a60      	ldr	r2, [pc, #384]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b58      	ldr	r3, [pc, #352]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a57      	ldr	r2, [pc, #348]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d015      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fbd1 	bl	8001190 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff fbcd 	bl	8001190 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0b1      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	4b4b      	ldr	r3, [pc, #300]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ee      	beq.n	80019f2 <HAL_RCC_OscConfig+0x37e>
 8001a14:	e014      	b.n	8001a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fbbb 	bl	8001190 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fbb7 	bl	8001190 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e09b      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	4b40      	ldr	r3, [pc, #256]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b3c      	ldr	r3, [pc, #240]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8087 	beq.w	8001b6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	4b36      	ldr	r3, [pc, #216]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d061      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d146      	bne.n	8001afe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b33      	ldr	r3, [pc, #204]	@ (8001b40 <HAL_RCC_OscConfig+0x4cc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fb8b 	bl	8001190 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fb87 	bl	8001190 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e06d      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	4b29      	ldr	r3, [pc, #164]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aa6:	4b24      	ldr	r3, [pc, #144]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	4921      	ldr	r1, [pc, #132]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a19      	ldr	r1, [r3, #32]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	491b      	ldr	r1, [pc, #108]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_RCC_OscConfig+0x4cc>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fb5b 	bl	8001190 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff fb57 	bl	8001190 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e03d      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x46a>
 8001afc:	e035      	b.n	8001b6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <HAL_RCC_OscConfig+0x4cc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fb44 	bl	8001190 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff fb40 	bl	8001190 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e026      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x498>
 8001b2a:	e01e      	b.n	8001b6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e019      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_OscConfig+0x500>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000

08001b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0d0      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d910      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b67      	ldr	r3, [pc, #412]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4965      	ldr	r1, [pc, #404]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b63      	ldr	r3, [pc, #396]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b8      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd4:	4b59      	ldr	r3, [pc, #356]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a58      	ldr	r2, [pc, #352]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bec:	4b53      	ldr	r3, [pc, #332]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001bf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b50      	ldr	r3, [pc, #320]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	494d      	ldr	r1, [pc, #308]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d040      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b47      	ldr	r3, [pc, #284]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d115      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e07f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c36:	4b41      	ldr	r3, [pc, #260]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e073      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	4b3d      	ldr	r3, [pc, #244]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e06b      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b39      	ldr	r3, [pc, #228]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4936      	ldr	r1, [pc, #216]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c68:	f7ff fa92 	bl	8001190 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7ff fa8e 	bl	8001190 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e053      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 020c 	and.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1eb      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c98:	4b27      	ldr	r3, [pc, #156]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d210      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b24      	ldr	r3, [pc, #144]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 0207 	bic.w	r2, r3, #7
 8001cae:	4922      	ldr	r1, [pc, #136]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e032      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4916      	ldr	r1, [pc, #88]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	490e      	ldr	r1, [pc, #56]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d06:	f000 f821 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	490a      	ldr	r1, [pc, #40]	@ (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	5ccb      	ldrb	r3, [r1, r3]
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	4a09      	ldr	r2, [pc, #36]	@ (8001d44 <HAL_RCC_ClockConfig+0x1cc>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_RCC_ClockConfig+0x1d0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f9f0 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08006af4 	.word	0x08006af4
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d66:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d002      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x30>
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x36>
 8001d7a:	e027      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d7c:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d7e:	613b      	str	r3, [r7, #16]
      break;
 8001d80:	e027      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d010      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	0c5b      	lsrs	r3, r3, #17
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	4a11      	ldr	r2, [pc, #68]	@ (8001dec <HAL_RCC_GetSysClockFreq+0xa0>)
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a0d      	ldr	r2, [pc, #52]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dae:	fb03 f202 	mul.w	r2, r3, r2
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e004      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	613b      	str	r3, [r7, #16]
      break;
 8001dca:	e002      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dce:	613b      	str	r3, [r7, #16]
      break;
 8001dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dd2:	693b      	ldr	r3, [r7, #16]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	007a1200 	.word	0x007a1200
 8001de8:	08006b0c 	.word	0x08006b0c
 8001dec:	08006b1c 	.word	0x08006b1c
 8001df0:	003d0900 	.word	0x003d0900

08001df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df8:	4b02      	ldr	r3, [pc, #8]	@ (8001e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	20000000 	.word	0x20000000

08001e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e0c:	f7ff fff2 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4903      	ldr	r1, [pc, #12]	@ (8001e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08006b04 	.word	0x08006b04

08001e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0adb      	lsrs	r3, r3, #11
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4903      	ldr	r1, [pc, #12]	@ (8001e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08006b04 	.word	0x08006b04

08001e58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e60:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <RCC_Delay+0x34>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <RCC_Delay+0x38>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	0a5b      	lsrs	r3, r3, #9
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e74:	bf00      	nop
  }
  while (Delay --);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1e5a      	subs	r2, r3, #1
 8001e7a:	60fa      	str	r2, [r7, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f9      	bne.n	8001e74 <RCC_Delay+0x1c>
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	10624dd3 	.word	0x10624dd3

08001e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e042      	b.n	8001f2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe ffaa 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2224      	movs	r2, #36	@ 0x24
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fa09 	bl	80022f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d175      	bne.n	8002040 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_UART_Transmit+0x2c>
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e06e      	b.n	8002042 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	@ 0x21
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f72:	f7ff f90d 	bl	8001190 <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_UART_Transmit+0x6c>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d104      	bne.n	8001fa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	e003      	b.n	8001fa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fa8:	e02e      	b.n	8002008 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f8df 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e03a      	b.n	8002042 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10b      	bne.n	8001fea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	e007      	b.n	8001ffa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1cb      	bne.n	8001faa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	2140      	movs	r1, #64	@ 0x40
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f8ab 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e006      	b.n	8002042 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b08a      	sub	sp, #40	@ 0x28
 800204e:	af02      	add	r7, sp, #8
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	f040 8081 	bne.w	800216e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_UART_Receive+0x2e>
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e079      	b.n	8002170 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2222      	movs	r2, #34	@ 0x22
 8002086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002090:	f7ff f87e 	bl	8001190 <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020aa:	d108      	bne.n	80020be <HAL_UART_Receive+0x74>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d104      	bne.n	80020be <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	e003      	b.n	80020c6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020c6:	e047      	b.n	8002158 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2200      	movs	r2, #0
 80020d0:	2120      	movs	r1, #32
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f850 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e042      	b.n	8002170 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10c      	bne.n	800210a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	3302      	adds	r3, #2
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	e01f      	b.n	800214a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002112:	d007      	beq.n	8002124 <HAL_UART_Receive+0xda>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <HAL_UART_Receive+0xe8>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e008      	b.n	8002144 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800213e:	b2da      	uxtb	r2, r3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1b2      	bne.n	80020c8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e000      	b.n	8002170 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
  }
}
 8002170:	4618      	mov	r0, r3
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002188:	e03b      	b.n	8002202 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d037      	beq.n	8002202 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002192:	f7fe fffd 	bl	8001190 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	6a3a      	ldr	r2, [r7, #32]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d302      	bcc.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e03a      	b.n	8002222 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d023      	beq.n	8002202 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b80      	cmp	r3, #128	@ 0x80
 80021be:	d020      	beq.n	8002202 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b40      	cmp	r3, #64	@ 0x40
 80021c4:	d01d      	beq.n	8002202 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d116      	bne.n	8002202 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f81d 	bl	800222a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2208      	movs	r2, #8
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4013      	ands	r3, r2
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	429a      	cmp	r2, r3
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	429a      	cmp	r2, r3
 800221e:	d0b4      	beq.n	800218a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800222a:	b480      	push	{r7}
 800222c:	b095      	sub	sp, #84	@ 0x54
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	330c      	adds	r3, #12
 8002238:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800223c:	e853 3f00 	ldrex	r3, [r3]
 8002240:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	330c      	adds	r3, #12
 8002250:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002252:	643a      	str	r2, [r7, #64]	@ 0x40
 8002254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002256:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002258:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800225a:	e841 2300 	strex	r3, r2, [r1]
 800225e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1e5      	bne.n	8002232 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3314      	adds	r3, #20
 800226c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	e853 3f00 	ldrex	r3, [r3]
 8002274:	61fb      	str	r3, [r7, #28]
   return(result);
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3314      	adds	r3, #20
 8002284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002288:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800228c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800228e:	e841 2300 	strex	r3, r2, [r1]
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1e5      	bne.n	8002266 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d119      	bne.n	80022d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	330c      	adds	r3, #12
 80022a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	e853 3f00 	ldrex	r3, [r3]
 80022b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f023 0310 	bic.w	r3, r3, #16
 80022b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022c2:	61ba      	str	r2, [r7, #24]
 80022c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	6979      	ldr	r1, [r7, #20]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	e841 2300 	strex	r3, r2, [r1]
 80022ce:	613b      	str	r3, [r7, #16]
   return(result);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e5      	bne.n	80022a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80022e4:	bf00      	nop
 80022e6:	3754      	adds	r7, #84	@ 0x54
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
	...

080022f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800232a:	f023 030c 	bic.w	r3, r3, #12
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	430b      	orrs	r3, r1
 8002336:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2c      	ldr	r2, [pc, #176]	@ (8002404 <UART_SetConfig+0x114>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d103      	bne.n	8002360 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002358:	f7ff fd6a 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	e002      	b.n	8002366 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002360:	f7ff fd52 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 8002364:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	009a      	lsls	r2, r3, #2
 8002370:	441a      	add	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	4a22      	ldr	r2, [pc, #136]	@ (8002408 <UART_SetConfig+0x118>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	0119      	lsls	r1, r3, #4
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	009a      	lsls	r2, r3, #2
 8002390:	441a      	add	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fbb2 f2f3 	udiv	r2, r2, r3
 800239c:	4b1a      	ldr	r3, [pc, #104]	@ (8002408 <UART_SetConfig+0x118>)
 800239e:	fba3 0302 	umull	r0, r3, r3, r2
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2064      	movs	r0, #100	@ 0x64
 80023a6:	fb00 f303 	mul.w	r3, r0, r3
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	3332      	adds	r3, #50	@ 0x32
 80023b0:	4a15      	ldr	r2, [pc, #84]	@ (8002408 <UART_SetConfig+0x118>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023bc:	4419      	add	r1, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <UART_SetConfig+0x118>)
 80023d6:	fba3 0302 	umull	r0, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2064      	movs	r0, #100	@ 0x64
 80023de:	fb00 f303 	mul.w	r3, r0, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	3332      	adds	r3, #50	@ 0x32
 80023e8:	4a07      	ldr	r2, [pc, #28]	@ (8002408 <UART_SetConfig+0x118>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	f003 020f 	and.w	r2, r3, #15
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	440a      	add	r2, r1
 80023fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40013800 	.word	0x40013800
 8002408:	51eb851f 	.word	0x51eb851f

0800240c <__cvt>:
 800240c:	2b00      	cmp	r3, #0
 800240e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002412:	461d      	mov	r5, r3
 8002414:	bfbb      	ittet	lt
 8002416:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800241a:	461d      	movlt	r5, r3
 800241c:	2300      	movge	r3, #0
 800241e:	232d      	movlt	r3, #45	@ 0x2d
 8002420:	b088      	sub	sp, #32
 8002422:	4614      	mov	r4, r2
 8002424:	bfb8      	it	lt
 8002426:	4614      	movlt	r4, r2
 8002428:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800242a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800242c:	7013      	strb	r3, [r2, #0]
 800242e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002430:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002434:	f023 0820 	bic.w	r8, r3, #32
 8002438:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800243c:	d005      	beq.n	800244a <__cvt+0x3e>
 800243e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002442:	d100      	bne.n	8002446 <__cvt+0x3a>
 8002444:	3601      	adds	r6, #1
 8002446:	2302      	movs	r3, #2
 8002448:	e000      	b.n	800244c <__cvt+0x40>
 800244a:	2303      	movs	r3, #3
 800244c:	aa07      	add	r2, sp, #28
 800244e:	9204      	str	r2, [sp, #16]
 8002450:	aa06      	add	r2, sp, #24
 8002452:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002456:	e9cd 3600 	strd	r3, r6, [sp]
 800245a:	4622      	mov	r2, r4
 800245c:	462b      	mov	r3, r5
 800245e:	f001 f87b 	bl	8003558 <_dtoa_r>
 8002462:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002466:	4607      	mov	r7, r0
 8002468:	d119      	bne.n	800249e <__cvt+0x92>
 800246a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800246c:	07db      	lsls	r3, r3, #31
 800246e:	d50e      	bpl.n	800248e <__cvt+0x82>
 8002470:	eb00 0906 	add.w	r9, r0, r6
 8002474:	2200      	movs	r2, #0
 8002476:	2300      	movs	r3, #0
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fe fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8002480:	b108      	cbz	r0, 8002486 <__cvt+0x7a>
 8002482:	f8cd 901c 	str.w	r9, [sp, #28]
 8002486:	2230      	movs	r2, #48	@ 0x30
 8002488:	9b07      	ldr	r3, [sp, #28]
 800248a:	454b      	cmp	r3, r9
 800248c:	d31e      	bcc.n	80024cc <__cvt+0xc0>
 800248e:	4638      	mov	r0, r7
 8002490:	9b07      	ldr	r3, [sp, #28]
 8002492:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002494:	1bdb      	subs	r3, r3, r7
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	b008      	add	sp, #32
 800249a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800249e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80024a2:	eb00 0906 	add.w	r9, r0, r6
 80024a6:	d1e5      	bne.n	8002474 <__cvt+0x68>
 80024a8:	7803      	ldrb	r3, [r0, #0]
 80024aa:	2b30      	cmp	r3, #48	@ 0x30
 80024ac:	d10a      	bne.n	80024c4 <__cvt+0xb8>
 80024ae:	2200      	movs	r2, #0
 80024b0:	2300      	movs	r3, #0
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f7fe fa77 	bl	80009a8 <__aeabi_dcmpeq>
 80024ba:	b918      	cbnz	r0, 80024c4 <__cvt+0xb8>
 80024bc:	f1c6 0601 	rsb	r6, r6, #1
 80024c0:	f8ca 6000 	str.w	r6, [sl]
 80024c4:	f8da 3000 	ldr.w	r3, [sl]
 80024c8:	4499      	add	r9, r3
 80024ca:	e7d3      	b.n	8002474 <__cvt+0x68>
 80024cc:	1c59      	adds	r1, r3, #1
 80024ce:	9107      	str	r1, [sp, #28]
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e7d9      	b.n	8002488 <__cvt+0x7c>

080024d4 <__exponent>:
 80024d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024d6:	2900      	cmp	r1, #0
 80024d8:	bfb6      	itet	lt
 80024da:	232d      	movlt	r3, #45	@ 0x2d
 80024dc:	232b      	movge	r3, #43	@ 0x2b
 80024de:	4249      	neglt	r1, r1
 80024e0:	2909      	cmp	r1, #9
 80024e2:	7002      	strb	r2, [r0, #0]
 80024e4:	7043      	strb	r3, [r0, #1]
 80024e6:	dd29      	ble.n	800253c <__exponent+0x68>
 80024e8:	f10d 0307 	add.w	r3, sp, #7
 80024ec:	461d      	mov	r5, r3
 80024ee:	270a      	movs	r7, #10
 80024f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80024f4:	461a      	mov	r2, r3
 80024f6:	fb07 1416 	mls	r4, r7, r6, r1
 80024fa:	3430      	adds	r4, #48	@ 0x30
 80024fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002500:	460c      	mov	r4, r1
 8002502:	2c63      	cmp	r4, #99	@ 0x63
 8002504:	4631      	mov	r1, r6
 8002506:	f103 33ff 	add.w	r3, r3, #4294967295
 800250a:	dcf1      	bgt.n	80024f0 <__exponent+0x1c>
 800250c:	3130      	adds	r1, #48	@ 0x30
 800250e:	1e94      	subs	r4, r2, #2
 8002510:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002514:	4623      	mov	r3, r4
 8002516:	1c41      	adds	r1, r0, #1
 8002518:	42ab      	cmp	r3, r5
 800251a:	d30a      	bcc.n	8002532 <__exponent+0x5e>
 800251c:	f10d 0309 	add.w	r3, sp, #9
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	42ac      	cmp	r4, r5
 8002524:	bf88      	it	hi
 8002526:	2300      	movhi	r3, #0
 8002528:	3302      	adds	r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	1a18      	subs	r0, r3, r0
 800252e:	b003      	add	sp, #12
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002532:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002536:	f801 6f01 	strb.w	r6, [r1, #1]!
 800253a:	e7ed      	b.n	8002518 <__exponent+0x44>
 800253c:	2330      	movs	r3, #48	@ 0x30
 800253e:	3130      	adds	r1, #48	@ 0x30
 8002540:	7083      	strb	r3, [r0, #2]
 8002542:	70c1      	strb	r1, [r0, #3]
 8002544:	1d03      	adds	r3, r0, #4
 8002546:	e7f1      	b.n	800252c <__exponent+0x58>

08002548 <_printf_float>:
 8002548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800254c:	b091      	sub	sp, #68	@ 0x44
 800254e:	460c      	mov	r4, r1
 8002550:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002554:	4616      	mov	r6, r2
 8002556:	461f      	mov	r7, r3
 8002558:	4605      	mov	r5, r0
 800255a:	f000 feeb 	bl	8003334 <_localeconv_r>
 800255e:	6803      	ldr	r3, [r0, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	9308      	str	r3, [sp, #32]
 8002564:	f7fd fdf4 	bl	8000150 <strlen>
 8002568:	2300      	movs	r3, #0
 800256a:	930e      	str	r3, [sp, #56]	@ 0x38
 800256c:	f8d8 3000 	ldr.w	r3, [r8]
 8002570:	9009      	str	r0, [sp, #36]	@ 0x24
 8002572:	3307      	adds	r3, #7
 8002574:	f023 0307 	bic.w	r3, r3, #7
 8002578:	f103 0208 	add.w	r2, r3, #8
 800257c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002580:	f8d4 b000 	ldr.w	fp, [r4]
 8002584:	f8c8 2000 	str.w	r2, [r8]
 8002588:	e9d3 8900 	ldrd	r8, r9, [r3]
 800258c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002592:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800259e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80025a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002814 <_printf_float+0x2cc>)
 80025a4:	f7fe fa32 	bl	8000a0c <__aeabi_dcmpun>
 80025a8:	bb70      	cbnz	r0, 8002608 <_printf_float+0xc0>
 80025aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80025ae:	f04f 32ff 	mov.w	r2, #4294967295
 80025b2:	4b98      	ldr	r3, [pc, #608]	@ (8002814 <_printf_float+0x2cc>)
 80025b4:	f7fe fa0c 	bl	80009d0 <__aeabi_dcmple>
 80025b8:	bb30      	cbnz	r0, 8002608 <_printf_float+0xc0>
 80025ba:	2200      	movs	r2, #0
 80025bc:	2300      	movs	r3, #0
 80025be:	4640      	mov	r0, r8
 80025c0:	4649      	mov	r1, r9
 80025c2:	f7fe f9fb 	bl	80009bc <__aeabi_dcmplt>
 80025c6:	b110      	cbz	r0, 80025ce <_printf_float+0x86>
 80025c8:	232d      	movs	r3, #45	@ 0x2d
 80025ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025ce:	4a92      	ldr	r2, [pc, #584]	@ (8002818 <_printf_float+0x2d0>)
 80025d0:	4b92      	ldr	r3, [pc, #584]	@ (800281c <_printf_float+0x2d4>)
 80025d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80025d6:	bf8c      	ite	hi
 80025d8:	4690      	movhi	r8, r2
 80025da:	4698      	movls	r8, r3
 80025dc:	2303      	movs	r3, #3
 80025de:	f04f 0900 	mov.w	r9, #0
 80025e2:	6123      	str	r3, [r4, #16]
 80025e4:	f02b 0304 	bic.w	r3, fp, #4
 80025e8:	6023      	str	r3, [r4, #0]
 80025ea:	4633      	mov	r3, r6
 80025ec:	4621      	mov	r1, r4
 80025ee:	4628      	mov	r0, r5
 80025f0:	9700      	str	r7, [sp, #0]
 80025f2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80025f4:	f000 f9d4 	bl	80029a0 <_printf_common>
 80025f8:	3001      	adds	r0, #1
 80025fa:	f040 8090 	bne.w	800271e <_printf_float+0x1d6>
 80025fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002602:	b011      	add	sp, #68	@ 0x44
 8002604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002608:	4642      	mov	r2, r8
 800260a:	464b      	mov	r3, r9
 800260c:	4640      	mov	r0, r8
 800260e:	4649      	mov	r1, r9
 8002610:	f7fe f9fc 	bl	8000a0c <__aeabi_dcmpun>
 8002614:	b148      	cbz	r0, 800262a <_printf_float+0xe2>
 8002616:	464b      	mov	r3, r9
 8002618:	2b00      	cmp	r3, #0
 800261a:	bfb8      	it	lt
 800261c:	232d      	movlt	r3, #45	@ 0x2d
 800261e:	4a80      	ldr	r2, [pc, #512]	@ (8002820 <_printf_float+0x2d8>)
 8002620:	bfb8      	it	lt
 8002622:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002626:	4b7f      	ldr	r3, [pc, #508]	@ (8002824 <_printf_float+0x2dc>)
 8002628:	e7d3      	b.n	80025d2 <_printf_float+0x8a>
 800262a:	6863      	ldr	r3, [r4, #4]
 800262c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	d13f      	bne.n	80026b4 <_printf_float+0x16c>
 8002634:	2306      	movs	r3, #6
 8002636:	6063      	str	r3, [r4, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800263e:	6023      	str	r3, [r4, #0]
 8002640:	9206      	str	r2, [sp, #24]
 8002642:	aa0e      	add	r2, sp, #56	@ 0x38
 8002644:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002648:	aa0d      	add	r2, sp, #52	@ 0x34
 800264a:	9203      	str	r2, [sp, #12]
 800264c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002650:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002654:	6863      	ldr	r3, [r4, #4]
 8002656:	4642      	mov	r2, r8
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4628      	mov	r0, r5
 800265c:	464b      	mov	r3, r9
 800265e:	910a      	str	r1, [sp, #40]	@ 0x28
 8002660:	f7ff fed4 	bl	800240c <__cvt>
 8002664:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002666:	4680      	mov	r8, r0
 8002668:	2947      	cmp	r1, #71	@ 0x47
 800266a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800266c:	d128      	bne.n	80026c0 <_printf_float+0x178>
 800266e:	1cc8      	adds	r0, r1, #3
 8002670:	db02      	blt.n	8002678 <_printf_float+0x130>
 8002672:	6863      	ldr	r3, [r4, #4]
 8002674:	4299      	cmp	r1, r3
 8002676:	dd40      	ble.n	80026fa <_printf_float+0x1b2>
 8002678:	f1aa 0a02 	sub.w	sl, sl, #2
 800267c:	fa5f fa8a 	uxtb.w	sl, sl
 8002680:	4652      	mov	r2, sl
 8002682:	3901      	subs	r1, #1
 8002684:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002688:	910d      	str	r1, [sp, #52]	@ 0x34
 800268a:	f7ff ff23 	bl	80024d4 <__exponent>
 800268e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002690:	4681      	mov	r9, r0
 8002692:	1813      	adds	r3, r2, r0
 8002694:	2a01      	cmp	r2, #1
 8002696:	6123      	str	r3, [r4, #16]
 8002698:	dc02      	bgt.n	80026a0 <_printf_float+0x158>
 800269a:	6822      	ldr	r2, [r4, #0]
 800269c:	07d2      	lsls	r2, r2, #31
 800269e:	d501      	bpl.n	80026a4 <_printf_float+0x15c>
 80026a0:	3301      	adds	r3, #1
 80026a2:	6123      	str	r3, [r4, #16]
 80026a4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d09e      	beq.n	80025ea <_printf_float+0xa2>
 80026ac:	232d      	movs	r3, #45	@ 0x2d
 80026ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026b2:	e79a      	b.n	80025ea <_printf_float+0xa2>
 80026b4:	2947      	cmp	r1, #71	@ 0x47
 80026b6:	d1bf      	bne.n	8002638 <_printf_float+0xf0>
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1bd      	bne.n	8002638 <_printf_float+0xf0>
 80026bc:	2301      	movs	r3, #1
 80026be:	e7ba      	b.n	8002636 <_printf_float+0xee>
 80026c0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80026c4:	d9dc      	bls.n	8002680 <_printf_float+0x138>
 80026c6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80026ca:	d118      	bne.n	80026fe <_printf_float+0x1b6>
 80026cc:	2900      	cmp	r1, #0
 80026ce:	6863      	ldr	r3, [r4, #4]
 80026d0:	dd0b      	ble.n	80026ea <_printf_float+0x1a2>
 80026d2:	6121      	str	r1, [r4, #16]
 80026d4:	b913      	cbnz	r3, 80026dc <_printf_float+0x194>
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	07d0      	lsls	r0, r2, #31
 80026da:	d502      	bpl.n	80026e2 <_printf_float+0x19a>
 80026dc:	3301      	adds	r3, #1
 80026de:	440b      	add	r3, r1
 80026e0:	6123      	str	r3, [r4, #16]
 80026e2:	f04f 0900 	mov.w	r9, #0
 80026e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80026e8:	e7dc      	b.n	80026a4 <_printf_float+0x15c>
 80026ea:	b913      	cbnz	r3, 80026f2 <_printf_float+0x1aa>
 80026ec:	6822      	ldr	r2, [r4, #0]
 80026ee:	07d2      	lsls	r2, r2, #31
 80026f0:	d501      	bpl.n	80026f6 <_printf_float+0x1ae>
 80026f2:	3302      	adds	r3, #2
 80026f4:	e7f4      	b.n	80026e0 <_printf_float+0x198>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e7f2      	b.n	80026e0 <_printf_float+0x198>
 80026fa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80026fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002700:	4299      	cmp	r1, r3
 8002702:	db05      	blt.n	8002710 <_printf_float+0x1c8>
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	6121      	str	r1, [r4, #16]
 8002708:	07d8      	lsls	r0, r3, #31
 800270a:	d5ea      	bpl.n	80026e2 <_printf_float+0x19a>
 800270c:	1c4b      	adds	r3, r1, #1
 800270e:	e7e7      	b.n	80026e0 <_printf_float+0x198>
 8002710:	2900      	cmp	r1, #0
 8002712:	bfcc      	ite	gt
 8002714:	2201      	movgt	r2, #1
 8002716:	f1c1 0202 	rsble	r2, r1, #2
 800271a:	4413      	add	r3, r2
 800271c:	e7e0      	b.n	80026e0 <_printf_float+0x198>
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	055a      	lsls	r2, r3, #21
 8002722:	d407      	bmi.n	8002734 <_printf_float+0x1ec>
 8002724:	6923      	ldr	r3, [r4, #16]
 8002726:	4642      	mov	r2, r8
 8002728:	4631      	mov	r1, r6
 800272a:	4628      	mov	r0, r5
 800272c:	47b8      	blx	r7
 800272e:	3001      	adds	r0, #1
 8002730:	d12b      	bne.n	800278a <_printf_float+0x242>
 8002732:	e764      	b.n	80025fe <_printf_float+0xb6>
 8002734:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002738:	f240 80dc 	bls.w	80028f4 <_printf_float+0x3ac>
 800273c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002740:	2200      	movs	r2, #0
 8002742:	2300      	movs	r3, #0
 8002744:	f7fe f930 	bl	80009a8 <__aeabi_dcmpeq>
 8002748:	2800      	cmp	r0, #0
 800274a:	d033      	beq.n	80027b4 <_printf_float+0x26c>
 800274c:	2301      	movs	r3, #1
 800274e:	4631      	mov	r1, r6
 8002750:	4628      	mov	r0, r5
 8002752:	4a35      	ldr	r2, [pc, #212]	@ (8002828 <_printf_float+0x2e0>)
 8002754:	47b8      	blx	r7
 8002756:	3001      	adds	r0, #1
 8002758:	f43f af51 	beq.w	80025fe <_printf_float+0xb6>
 800275c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002760:	4543      	cmp	r3, r8
 8002762:	db02      	blt.n	800276a <_printf_float+0x222>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	07d8      	lsls	r0, r3, #31
 8002768:	d50f      	bpl.n	800278a <_printf_float+0x242>
 800276a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800276e:	4631      	mov	r1, r6
 8002770:	4628      	mov	r0, r5
 8002772:	47b8      	blx	r7
 8002774:	3001      	adds	r0, #1
 8002776:	f43f af42 	beq.w	80025fe <_printf_float+0xb6>
 800277a:	f04f 0900 	mov.w	r9, #0
 800277e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002782:	f104 0a1a 	add.w	sl, r4, #26
 8002786:	45c8      	cmp	r8, r9
 8002788:	dc09      	bgt.n	800279e <_printf_float+0x256>
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	079b      	lsls	r3, r3, #30
 800278e:	f100 8102 	bmi.w	8002996 <_printf_float+0x44e>
 8002792:	68e0      	ldr	r0, [r4, #12]
 8002794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002796:	4298      	cmp	r0, r3
 8002798:	bfb8      	it	lt
 800279a:	4618      	movlt	r0, r3
 800279c:	e731      	b.n	8002602 <_printf_float+0xba>
 800279e:	2301      	movs	r3, #1
 80027a0:	4652      	mov	r2, sl
 80027a2:	4631      	mov	r1, r6
 80027a4:	4628      	mov	r0, r5
 80027a6:	47b8      	blx	r7
 80027a8:	3001      	adds	r0, #1
 80027aa:	f43f af28 	beq.w	80025fe <_printf_float+0xb6>
 80027ae:	f109 0901 	add.w	r9, r9, #1
 80027b2:	e7e8      	b.n	8002786 <_printf_float+0x23e>
 80027b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	dc38      	bgt.n	800282c <_printf_float+0x2e4>
 80027ba:	2301      	movs	r3, #1
 80027bc:	4631      	mov	r1, r6
 80027be:	4628      	mov	r0, r5
 80027c0:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <_printf_float+0x2e0>)
 80027c2:	47b8      	blx	r7
 80027c4:	3001      	adds	r0, #1
 80027c6:	f43f af1a 	beq.w	80025fe <_printf_float+0xb6>
 80027ca:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80027ce:	ea59 0303 	orrs.w	r3, r9, r3
 80027d2:	d102      	bne.n	80027da <_printf_float+0x292>
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	07d9      	lsls	r1, r3, #31
 80027d8:	d5d7      	bpl.n	800278a <_printf_float+0x242>
 80027da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80027de:	4631      	mov	r1, r6
 80027e0:	4628      	mov	r0, r5
 80027e2:	47b8      	blx	r7
 80027e4:	3001      	adds	r0, #1
 80027e6:	f43f af0a 	beq.w	80025fe <_printf_float+0xb6>
 80027ea:	f04f 0a00 	mov.w	sl, #0
 80027ee:	f104 0b1a 	add.w	fp, r4, #26
 80027f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80027f4:	425b      	negs	r3, r3
 80027f6:	4553      	cmp	r3, sl
 80027f8:	dc01      	bgt.n	80027fe <_printf_float+0x2b6>
 80027fa:	464b      	mov	r3, r9
 80027fc:	e793      	b.n	8002726 <_printf_float+0x1de>
 80027fe:	2301      	movs	r3, #1
 8002800:	465a      	mov	r2, fp
 8002802:	4631      	mov	r1, r6
 8002804:	4628      	mov	r0, r5
 8002806:	47b8      	blx	r7
 8002808:	3001      	adds	r0, #1
 800280a:	f43f aef8 	beq.w	80025fe <_printf_float+0xb6>
 800280e:	f10a 0a01 	add.w	sl, sl, #1
 8002812:	e7ee      	b.n	80027f2 <_printf_float+0x2aa>
 8002814:	7fefffff 	.word	0x7fefffff
 8002818:	08006b22 	.word	0x08006b22
 800281c:	08006b1e 	.word	0x08006b1e
 8002820:	08006b2a 	.word	0x08006b2a
 8002824:	08006b26 	.word	0x08006b26
 8002828:	08006b2e 	.word	0x08006b2e
 800282c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800282e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002832:	4553      	cmp	r3, sl
 8002834:	bfa8      	it	ge
 8002836:	4653      	movge	r3, sl
 8002838:	2b00      	cmp	r3, #0
 800283a:	4699      	mov	r9, r3
 800283c:	dc36      	bgt.n	80028ac <_printf_float+0x364>
 800283e:	f04f 0b00 	mov.w	fp, #0
 8002842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002846:	f104 021a 	add.w	r2, r4, #26
 800284a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800284c:	930a      	str	r3, [sp, #40]	@ 0x28
 800284e:	eba3 0309 	sub.w	r3, r3, r9
 8002852:	455b      	cmp	r3, fp
 8002854:	dc31      	bgt.n	80028ba <_printf_float+0x372>
 8002856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002858:	459a      	cmp	sl, r3
 800285a:	dc3a      	bgt.n	80028d2 <_printf_float+0x38a>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	07da      	lsls	r2, r3, #31
 8002860:	d437      	bmi.n	80028d2 <_printf_float+0x38a>
 8002862:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002864:	ebaa 0903 	sub.w	r9, sl, r3
 8002868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800286a:	ebaa 0303 	sub.w	r3, sl, r3
 800286e:	4599      	cmp	r9, r3
 8002870:	bfa8      	it	ge
 8002872:	4699      	movge	r9, r3
 8002874:	f1b9 0f00 	cmp.w	r9, #0
 8002878:	dc33      	bgt.n	80028e2 <_printf_float+0x39a>
 800287a:	f04f 0800 	mov.w	r8, #0
 800287e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002882:	f104 0b1a 	add.w	fp, r4, #26
 8002886:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002888:	ebaa 0303 	sub.w	r3, sl, r3
 800288c:	eba3 0309 	sub.w	r3, r3, r9
 8002890:	4543      	cmp	r3, r8
 8002892:	f77f af7a 	ble.w	800278a <_printf_float+0x242>
 8002896:	2301      	movs	r3, #1
 8002898:	465a      	mov	r2, fp
 800289a:	4631      	mov	r1, r6
 800289c:	4628      	mov	r0, r5
 800289e:	47b8      	blx	r7
 80028a0:	3001      	adds	r0, #1
 80028a2:	f43f aeac 	beq.w	80025fe <_printf_float+0xb6>
 80028a6:	f108 0801 	add.w	r8, r8, #1
 80028aa:	e7ec      	b.n	8002886 <_printf_float+0x33e>
 80028ac:	4642      	mov	r2, r8
 80028ae:	4631      	mov	r1, r6
 80028b0:	4628      	mov	r0, r5
 80028b2:	47b8      	blx	r7
 80028b4:	3001      	adds	r0, #1
 80028b6:	d1c2      	bne.n	800283e <_printf_float+0x2f6>
 80028b8:	e6a1      	b.n	80025fe <_printf_float+0xb6>
 80028ba:	2301      	movs	r3, #1
 80028bc:	4631      	mov	r1, r6
 80028be:	4628      	mov	r0, r5
 80028c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80028c2:	47b8      	blx	r7
 80028c4:	3001      	adds	r0, #1
 80028c6:	f43f ae9a 	beq.w	80025fe <_printf_float+0xb6>
 80028ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80028cc:	f10b 0b01 	add.w	fp, fp, #1
 80028d0:	e7bb      	b.n	800284a <_printf_float+0x302>
 80028d2:	4631      	mov	r1, r6
 80028d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80028d8:	4628      	mov	r0, r5
 80028da:	47b8      	blx	r7
 80028dc:	3001      	adds	r0, #1
 80028de:	d1c0      	bne.n	8002862 <_printf_float+0x31a>
 80028e0:	e68d      	b.n	80025fe <_printf_float+0xb6>
 80028e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80028e4:	464b      	mov	r3, r9
 80028e6:	4631      	mov	r1, r6
 80028e8:	4628      	mov	r0, r5
 80028ea:	4442      	add	r2, r8
 80028ec:	47b8      	blx	r7
 80028ee:	3001      	adds	r0, #1
 80028f0:	d1c3      	bne.n	800287a <_printf_float+0x332>
 80028f2:	e684      	b.n	80025fe <_printf_float+0xb6>
 80028f4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80028f8:	f1ba 0f01 	cmp.w	sl, #1
 80028fc:	dc01      	bgt.n	8002902 <_printf_float+0x3ba>
 80028fe:	07db      	lsls	r3, r3, #31
 8002900:	d536      	bpl.n	8002970 <_printf_float+0x428>
 8002902:	2301      	movs	r3, #1
 8002904:	4642      	mov	r2, r8
 8002906:	4631      	mov	r1, r6
 8002908:	4628      	mov	r0, r5
 800290a:	47b8      	blx	r7
 800290c:	3001      	adds	r0, #1
 800290e:	f43f ae76 	beq.w	80025fe <_printf_float+0xb6>
 8002912:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002916:	4631      	mov	r1, r6
 8002918:	4628      	mov	r0, r5
 800291a:	47b8      	blx	r7
 800291c:	3001      	adds	r0, #1
 800291e:	f43f ae6e 	beq.w	80025fe <_printf_float+0xb6>
 8002922:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002926:	2200      	movs	r2, #0
 8002928:	2300      	movs	r3, #0
 800292a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800292e:	f7fe f83b 	bl	80009a8 <__aeabi_dcmpeq>
 8002932:	b9c0      	cbnz	r0, 8002966 <_printf_float+0x41e>
 8002934:	4653      	mov	r3, sl
 8002936:	f108 0201 	add.w	r2, r8, #1
 800293a:	4631      	mov	r1, r6
 800293c:	4628      	mov	r0, r5
 800293e:	47b8      	blx	r7
 8002940:	3001      	adds	r0, #1
 8002942:	d10c      	bne.n	800295e <_printf_float+0x416>
 8002944:	e65b      	b.n	80025fe <_printf_float+0xb6>
 8002946:	2301      	movs	r3, #1
 8002948:	465a      	mov	r2, fp
 800294a:	4631      	mov	r1, r6
 800294c:	4628      	mov	r0, r5
 800294e:	47b8      	blx	r7
 8002950:	3001      	adds	r0, #1
 8002952:	f43f ae54 	beq.w	80025fe <_printf_float+0xb6>
 8002956:	f108 0801 	add.w	r8, r8, #1
 800295a:	45d0      	cmp	r8, sl
 800295c:	dbf3      	blt.n	8002946 <_printf_float+0x3fe>
 800295e:	464b      	mov	r3, r9
 8002960:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002964:	e6e0      	b.n	8002728 <_printf_float+0x1e0>
 8002966:	f04f 0800 	mov.w	r8, #0
 800296a:	f104 0b1a 	add.w	fp, r4, #26
 800296e:	e7f4      	b.n	800295a <_printf_float+0x412>
 8002970:	2301      	movs	r3, #1
 8002972:	4642      	mov	r2, r8
 8002974:	e7e1      	b.n	800293a <_printf_float+0x3f2>
 8002976:	2301      	movs	r3, #1
 8002978:	464a      	mov	r2, r9
 800297a:	4631      	mov	r1, r6
 800297c:	4628      	mov	r0, r5
 800297e:	47b8      	blx	r7
 8002980:	3001      	adds	r0, #1
 8002982:	f43f ae3c 	beq.w	80025fe <_printf_float+0xb6>
 8002986:	f108 0801 	add.w	r8, r8, #1
 800298a:	68e3      	ldr	r3, [r4, #12]
 800298c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800298e:	1a5b      	subs	r3, r3, r1
 8002990:	4543      	cmp	r3, r8
 8002992:	dcf0      	bgt.n	8002976 <_printf_float+0x42e>
 8002994:	e6fd      	b.n	8002792 <_printf_float+0x24a>
 8002996:	f04f 0800 	mov.w	r8, #0
 800299a:	f104 0919 	add.w	r9, r4, #25
 800299e:	e7f4      	b.n	800298a <_printf_float+0x442>

080029a0 <_printf_common>:
 80029a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a4:	4616      	mov	r6, r2
 80029a6:	4698      	mov	r8, r3
 80029a8:	688a      	ldr	r2, [r1, #8]
 80029aa:	690b      	ldr	r3, [r1, #16]
 80029ac:	4607      	mov	r7, r0
 80029ae:	4293      	cmp	r3, r2
 80029b0:	bfb8      	it	lt
 80029b2:	4613      	movlt	r3, r2
 80029b4:	6033      	str	r3, [r6, #0]
 80029b6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029ba:	460c      	mov	r4, r1
 80029bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029c0:	b10a      	cbz	r2, 80029c6 <_printf_common+0x26>
 80029c2:	3301      	adds	r3, #1
 80029c4:	6033      	str	r3, [r6, #0]
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	0699      	lsls	r1, r3, #26
 80029ca:	bf42      	ittt	mi
 80029cc:	6833      	ldrmi	r3, [r6, #0]
 80029ce:	3302      	addmi	r3, #2
 80029d0:	6033      	strmi	r3, [r6, #0]
 80029d2:	6825      	ldr	r5, [r4, #0]
 80029d4:	f015 0506 	ands.w	r5, r5, #6
 80029d8:	d106      	bne.n	80029e8 <_printf_common+0x48>
 80029da:	f104 0a19 	add.w	sl, r4, #25
 80029de:	68e3      	ldr	r3, [r4, #12]
 80029e0:	6832      	ldr	r2, [r6, #0]
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	42ab      	cmp	r3, r5
 80029e6:	dc2b      	bgt.n	8002a40 <_printf_common+0xa0>
 80029e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	3b00      	subs	r3, #0
 80029f0:	bf18      	it	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	0692      	lsls	r2, r2, #26
 80029f6:	d430      	bmi.n	8002a5a <_printf_common+0xba>
 80029f8:	4641      	mov	r1, r8
 80029fa:	4638      	mov	r0, r7
 80029fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a00:	47c8      	blx	r9
 8002a02:	3001      	adds	r0, #1
 8002a04:	d023      	beq.n	8002a4e <_printf_common+0xae>
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	6922      	ldr	r2, [r4, #16]
 8002a0a:	f003 0306 	and.w	r3, r3, #6
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf14      	ite	ne
 8002a12:	2500      	movne	r5, #0
 8002a14:	6833      	ldreq	r3, [r6, #0]
 8002a16:	f04f 0600 	mov.w	r6, #0
 8002a1a:	bf08      	it	eq
 8002a1c:	68e5      	ldreq	r5, [r4, #12]
 8002a1e:	f104 041a 	add.w	r4, r4, #26
 8002a22:	bf08      	it	eq
 8002a24:	1aed      	subeq	r5, r5, r3
 8002a26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a2a:	bf08      	it	eq
 8002a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a30:	4293      	cmp	r3, r2
 8002a32:	bfc4      	itt	gt
 8002a34:	1a9b      	subgt	r3, r3, r2
 8002a36:	18ed      	addgt	r5, r5, r3
 8002a38:	42b5      	cmp	r5, r6
 8002a3a:	d11a      	bne.n	8002a72 <_printf_common+0xd2>
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	e008      	b.n	8002a52 <_printf_common+0xb2>
 8002a40:	2301      	movs	r3, #1
 8002a42:	4652      	mov	r2, sl
 8002a44:	4641      	mov	r1, r8
 8002a46:	4638      	mov	r0, r7
 8002a48:	47c8      	blx	r9
 8002a4a:	3001      	adds	r0, #1
 8002a4c:	d103      	bne.n	8002a56 <_printf_common+0xb6>
 8002a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a56:	3501      	adds	r5, #1
 8002a58:	e7c1      	b.n	80029de <_printf_common+0x3e>
 8002a5a:	2030      	movs	r0, #48	@ 0x30
 8002a5c:	18e1      	adds	r1, r4, r3
 8002a5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a68:	4422      	add	r2, r4
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a70:	e7c2      	b.n	80029f8 <_printf_common+0x58>
 8002a72:	2301      	movs	r3, #1
 8002a74:	4622      	mov	r2, r4
 8002a76:	4641      	mov	r1, r8
 8002a78:	4638      	mov	r0, r7
 8002a7a:	47c8      	blx	r9
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	d0e6      	beq.n	8002a4e <_printf_common+0xae>
 8002a80:	3601      	adds	r6, #1
 8002a82:	e7d9      	b.n	8002a38 <_printf_common+0x98>

08002a84 <_printf_i>:
 8002a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a88:	7e0f      	ldrb	r7, [r1, #24]
 8002a8a:	4691      	mov	r9, r2
 8002a8c:	2f78      	cmp	r7, #120	@ 0x78
 8002a8e:	4680      	mov	r8, r0
 8002a90:	460c      	mov	r4, r1
 8002a92:	469a      	mov	sl, r3
 8002a94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002a96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a9a:	d807      	bhi.n	8002aac <_printf_i+0x28>
 8002a9c:	2f62      	cmp	r7, #98	@ 0x62
 8002a9e:	d80a      	bhi.n	8002ab6 <_printf_i+0x32>
 8002aa0:	2f00      	cmp	r7, #0
 8002aa2:	f000 80d1 	beq.w	8002c48 <_printf_i+0x1c4>
 8002aa6:	2f58      	cmp	r7, #88	@ 0x58
 8002aa8:	f000 80b8 	beq.w	8002c1c <_printf_i+0x198>
 8002aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ab4:	e03a      	b.n	8002b2c <_printf_i+0xa8>
 8002ab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002aba:	2b15      	cmp	r3, #21
 8002abc:	d8f6      	bhi.n	8002aac <_printf_i+0x28>
 8002abe:	a101      	add	r1, pc, #4	@ (adr r1, 8002ac4 <_printf_i+0x40>)
 8002ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ac4:	08002b1d 	.word	0x08002b1d
 8002ac8:	08002b31 	.word	0x08002b31
 8002acc:	08002aad 	.word	0x08002aad
 8002ad0:	08002aad 	.word	0x08002aad
 8002ad4:	08002aad 	.word	0x08002aad
 8002ad8:	08002aad 	.word	0x08002aad
 8002adc:	08002b31 	.word	0x08002b31
 8002ae0:	08002aad 	.word	0x08002aad
 8002ae4:	08002aad 	.word	0x08002aad
 8002ae8:	08002aad 	.word	0x08002aad
 8002aec:	08002aad 	.word	0x08002aad
 8002af0:	08002c2f 	.word	0x08002c2f
 8002af4:	08002b5b 	.word	0x08002b5b
 8002af8:	08002be9 	.word	0x08002be9
 8002afc:	08002aad 	.word	0x08002aad
 8002b00:	08002aad 	.word	0x08002aad
 8002b04:	08002c51 	.word	0x08002c51
 8002b08:	08002aad 	.word	0x08002aad
 8002b0c:	08002b5b 	.word	0x08002b5b
 8002b10:	08002aad 	.word	0x08002aad
 8002b14:	08002aad 	.word	0x08002aad
 8002b18:	08002bf1 	.word	0x08002bf1
 8002b1c:	6833      	ldr	r3, [r6, #0]
 8002b1e:	1d1a      	adds	r2, r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6032      	str	r2, [r6, #0]
 8002b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e09c      	b.n	8002c6a <_printf_i+0x1e6>
 8002b30:	6833      	ldr	r3, [r6, #0]
 8002b32:	6820      	ldr	r0, [r4, #0]
 8002b34:	1d19      	adds	r1, r3, #4
 8002b36:	6031      	str	r1, [r6, #0]
 8002b38:	0606      	lsls	r6, r0, #24
 8002b3a:	d501      	bpl.n	8002b40 <_printf_i+0xbc>
 8002b3c:	681d      	ldr	r5, [r3, #0]
 8002b3e:	e003      	b.n	8002b48 <_printf_i+0xc4>
 8002b40:	0645      	lsls	r5, r0, #25
 8002b42:	d5fb      	bpl.n	8002b3c <_printf_i+0xb8>
 8002b44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b48:	2d00      	cmp	r5, #0
 8002b4a:	da03      	bge.n	8002b54 <_printf_i+0xd0>
 8002b4c:	232d      	movs	r3, #45	@ 0x2d
 8002b4e:	426d      	negs	r5, r5
 8002b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b54:	230a      	movs	r3, #10
 8002b56:	4858      	ldr	r0, [pc, #352]	@ (8002cb8 <_printf_i+0x234>)
 8002b58:	e011      	b.n	8002b7e <_printf_i+0xfa>
 8002b5a:	6821      	ldr	r1, [r4, #0]
 8002b5c:	6833      	ldr	r3, [r6, #0]
 8002b5e:	0608      	lsls	r0, r1, #24
 8002b60:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b64:	d402      	bmi.n	8002b6c <_printf_i+0xe8>
 8002b66:	0649      	lsls	r1, r1, #25
 8002b68:	bf48      	it	mi
 8002b6a:	b2ad      	uxthmi	r5, r5
 8002b6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b6e:	6033      	str	r3, [r6, #0]
 8002b70:	bf14      	ite	ne
 8002b72:	230a      	movne	r3, #10
 8002b74:	2308      	moveq	r3, #8
 8002b76:	4850      	ldr	r0, [pc, #320]	@ (8002cb8 <_printf_i+0x234>)
 8002b78:	2100      	movs	r1, #0
 8002b7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b7e:	6866      	ldr	r6, [r4, #4]
 8002b80:	2e00      	cmp	r6, #0
 8002b82:	60a6      	str	r6, [r4, #8]
 8002b84:	db05      	blt.n	8002b92 <_printf_i+0x10e>
 8002b86:	6821      	ldr	r1, [r4, #0]
 8002b88:	432e      	orrs	r6, r5
 8002b8a:	f021 0104 	bic.w	r1, r1, #4
 8002b8e:	6021      	str	r1, [r4, #0]
 8002b90:	d04b      	beq.n	8002c2a <_printf_i+0x1a6>
 8002b92:	4616      	mov	r6, r2
 8002b94:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b98:	fb03 5711 	mls	r7, r3, r1, r5
 8002b9c:	5dc7      	ldrb	r7, [r0, r7]
 8002b9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ba2:	462f      	mov	r7, r5
 8002ba4:	42bb      	cmp	r3, r7
 8002ba6:	460d      	mov	r5, r1
 8002ba8:	d9f4      	bls.n	8002b94 <_printf_i+0x110>
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d10b      	bne.n	8002bc6 <_printf_i+0x142>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	07df      	lsls	r7, r3, #31
 8002bb2:	d508      	bpl.n	8002bc6 <_printf_i+0x142>
 8002bb4:	6923      	ldr	r3, [r4, #16]
 8002bb6:	6861      	ldr	r1, [r4, #4]
 8002bb8:	4299      	cmp	r1, r3
 8002bba:	bfde      	ittt	le
 8002bbc:	2330      	movle	r3, #48	@ 0x30
 8002bbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bc6:	1b92      	subs	r2, r2, r6
 8002bc8:	6122      	str	r2, [r4, #16]
 8002bca:	464b      	mov	r3, r9
 8002bcc:	4621      	mov	r1, r4
 8002bce:	4640      	mov	r0, r8
 8002bd0:	f8cd a000 	str.w	sl, [sp]
 8002bd4:	aa03      	add	r2, sp, #12
 8002bd6:	f7ff fee3 	bl	80029a0 <_printf_common>
 8002bda:	3001      	adds	r0, #1
 8002bdc:	d14a      	bne.n	8002c74 <_printf_i+0x1f0>
 8002bde:	f04f 30ff 	mov.w	r0, #4294967295
 8002be2:	b004      	add	sp, #16
 8002be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	f043 0320 	orr.w	r3, r3, #32
 8002bee:	6023      	str	r3, [r4, #0]
 8002bf0:	2778      	movs	r7, #120	@ 0x78
 8002bf2:	4832      	ldr	r0, [pc, #200]	@ (8002cbc <_printf_i+0x238>)
 8002bf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	6831      	ldr	r1, [r6, #0]
 8002bfc:	061f      	lsls	r7, r3, #24
 8002bfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c02:	d402      	bmi.n	8002c0a <_printf_i+0x186>
 8002c04:	065f      	lsls	r7, r3, #25
 8002c06:	bf48      	it	mi
 8002c08:	b2ad      	uxthmi	r5, r5
 8002c0a:	6031      	str	r1, [r6, #0]
 8002c0c:	07d9      	lsls	r1, r3, #31
 8002c0e:	bf44      	itt	mi
 8002c10:	f043 0320 	orrmi.w	r3, r3, #32
 8002c14:	6023      	strmi	r3, [r4, #0]
 8002c16:	b11d      	cbz	r5, 8002c20 <_printf_i+0x19c>
 8002c18:	2310      	movs	r3, #16
 8002c1a:	e7ad      	b.n	8002b78 <_printf_i+0xf4>
 8002c1c:	4826      	ldr	r0, [pc, #152]	@ (8002cb8 <_printf_i+0x234>)
 8002c1e:	e7e9      	b.n	8002bf4 <_printf_i+0x170>
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	f023 0320 	bic.w	r3, r3, #32
 8002c26:	6023      	str	r3, [r4, #0]
 8002c28:	e7f6      	b.n	8002c18 <_printf_i+0x194>
 8002c2a:	4616      	mov	r6, r2
 8002c2c:	e7bd      	b.n	8002baa <_printf_i+0x126>
 8002c2e:	6833      	ldr	r3, [r6, #0]
 8002c30:	6825      	ldr	r5, [r4, #0]
 8002c32:	1d18      	adds	r0, r3, #4
 8002c34:	6961      	ldr	r1, [r4, #20]
 8002c36:	6030      	str	r0, [r6, #0]
 8002c38:	062e      	lsls	r6, r5, #24
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	d501      	bpl.n	8002c42 <_printf_i+0x1be>
 8002c3e:	6019      	str	r1, [r3, #0]
 8002c40:	e002      	b.n	8002c48 <_printf_i+0x1c4>
 8002c42:	0668      	lsls	r0, r5, #25
 8002c44:	d5fb      	bpl.n	8002c3e <_printf_i+0x1ba>
 8002c46:	8019      	strh	r1, [r3, #0]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	4616      	mov	r6, r2
 8002c4c:	6123      	str	r3, [r4, #16]
 8002c4e:	e7bc      	b.n	8002bca <_printf_i+0x146>
 8002c50:	6833      	ldr	r3, [r6, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	1d1a      	adds	r2, r3, #4
 8002c56:	6032      	str	r2, [r6, #0]
 8002c58:	681e      	ldr	r6, [r3, #0]
 8002c5a:	6862      	ldr	r2, [r4, #4]
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f000 fbe0 	bl	8003422 <memchr>
 8002c62:	b108      	cbz	r0, 8002c68 <_printf_i+0x1e4>
 8002c64:	1b80      	subs	r0, r0, r6
 8002c66:	6060      	str	r0, [r4, #4]
 8002c68:	6863      	ldr	r3, [r4, #4]
 8002c6a:	6123      	str	r3, [r4, #16]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c72:	e7aa      	b.n	8002bca <_printf_i+0x146>
 8002c74:	4632      	mov	r2, r6
 8002c76:	4649      	mov	r1, r9
 8002c78:	4640      	mov	r0, r8
 8002c7a:	6923      	ldr	r3, [r4, #16]
 8002c7c:	47d0      	blx	sl
 8002c7e:	3001      	adds	r0, #1
 8002c80:	d0ad      	beq.n	8002bde <_printf_i+0x15a>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	079b      	lsls	r3, r3, #30
 8002c86:	d413      	bmi.n	8002cb0 <_printf_i+0x22c>
 8002c88:	68e0      	ldr	r0, [r4, #12]
 8002c8a:	9b03      	ldr	r3, [sp, #12]
 8002c8c:	4298      	cmp	r0, r3
 8002c8e:	bfb8      	it	lt
 8002c90:	4618      	movlt	r0, r3
 8002c92:	e7a6      	b.n	8002be2 <_printf_i+0x15e>
 8002c94:	2301      	movs	r3, #1
 8002c96:	4632      	mov	r2, r6
 8002c98:	4649      	mov	r1, r9
 8002c9a:	4640      	mov	r0, r8
 8002c9c:	47d0      	blx	sl
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	d09d      	beq.n	8002bde <_printf_i+0x15a>
 8002ca2:	3501      	adds	r5, #1
 8002ca4:	68e3      	ldr	r3, [r4, #12]
 8002ca6:	9903      	ldr	r1, [sp, #12]
 8002ca8:	1a5b      	subs	r3, r3, r1
 8002caa:	42ab      	cmp	r3, r5
 8002cac:	dcf2      	bgt.n	8002c94 <_printf_i+0x210>
 8002cae:	e7eb      	b.n	8002c88 <_printf_i+0x204>
 8002cb0:	2500      	movs	r5, #0
 8002cb2:	f104 0619 	add.w	r6, r4, #25
 8002cb6:	e7f5      	b.n	8002ca4 <_printf_i+0x220>
 8002cb8:	08006b30 	.word	0x08006b30
 8002cbc:	08006b41 	.word	0x08006b41

08002cc0 <_scanf_float>:
 8002cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	9303      	str	r3, [sp, #12]
 8002cc8:	688b      	ldr	r3, [r1, #8]
 8002cca:	4691      	mov	r9, r2
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8002cd2:	bf82      	ittt	hi
 8002cd4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002cd8:	eb03 0b05 	addhi.w	fp, r3, r5
 8002cdc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	f04f 0500 	mov.w	r5, #0
 8002ce6:	bf88      	it	hi
 8002ce8:	608b      	strhi	r3, [r1, #8]
 8002cea:	680b      	ldr	r3, [r1, #0]
 8002cec:	4680      	mov	r8, r0
 8002cee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8002cf2:	f842 3b1c 	str.w	r3, [r2], #28
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	bf98      	it	ls
 8002cfa:	f04f 0b00 	movls.w	fp, #0
 8002cfe:	4616      	mov	r6, r2
 8002d00:	46aa      	mov	sl, r5
 8002d02:	462f      	mov	r7, r5
 8002d04:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002d08:	9201      	str	r2, [sp, #4]
 8002d0a:	9502      	str	r5, [sp, #8]
 8002d0c:	68a2      	ldr	r2, [r4, #8]
 8002d0e:	b15a      	cbz	r2, 8002d28 <_scanf_float+0x68>
 8002d10:	f8d9 3000 	ldr.w	r3, [r9]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b4e      	cmp	r3, #78	@ 0x4e
 8002d18:	d862      	bhi.n	8002de0 <_scanf_float+0x120>
 8002d1a:	2b40      	cmp	r3, #64	@ 0x40
 8002d1c:	d83a      	bhi.n	8002d94 <_scanf_float+0xd4>
 8002d1e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8002d22:	b2c8      	uxtb	r0, r1
 8002d24:	280e      	cmp	r0, #14
 8002d26:	d938      	bls.n	8002d9a <_scanf_float+0xda>
 8002d28:	b11f      	cbz	r7, 8002d32 <_scanf_float+0x72>
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d30:	6023      	str	r3, [r4, #0]
 8002d32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d36:	f1ba 0f01 	cmp.w	sl, #1
 8002d3a:	f200 8114 	bhi.w	8002f66 <_scanf_float+0x2a6>
 8002d3e:	9b01      	ldr	r3, [sp, #4]
 8002d40:	429e      	cmp	r6, r3
 8002d42:	f200 8105 	bhi.w	8002f50 <_scanf_float+0x290>
 8002d46:	2001      	movs	r0, #1
 8002d48:	b007      	add	sp, #28
 8002d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d4e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8002d52:	2a0d      	cmp	r2, #13
 8002d54:	d8e8      	bhi.n	8002d28 <_scanf_float+0x68>
 8002d56:	a101      	add	r1, pc, #4	@ (adr r1, 8002d5c <_scanf_float+0x9c>)
 8002d58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002d5c:	08002ea5 	.word	0x08002ea5
 8002d60:	08002d29 	.word	0x08002d29
 8002d64:	08002d29 	.word	0x08002d29
 8002d68:	08002d29 	.word	0x08002d29
 8002d6c:	08002f01 	.word	0x08002f01
 8002d70:	08002edb 	.word	0x08002edb
 8002d74:	08002d29 	.word	0x08002d29
 8002d78:	08002d29 	.word	0x08002d29
 8002d7c:	08002eb3 	.word	0x08002eb3
 8002d80:	08002d29 	.word	0x08002d29
 8002d84:	08002d29 	.word	0x08002d29
 8002d88:	08002d29 	.word	0x08002d29
 8002d8c:	08002d29 	.word	0x08002d29
 8002d90:	08002e6f 	.word	0x08002e6f
 8002d94:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8002d98:	e7db      	b.n	8002d52 <_scanf_float+0x92>
 8002d9a:	290e      	cmp	r1, #14
 8002d9c:	d8c4      	bhi.n	8002d28 <_scanf_float+0x68>
 8002d9e:	a001      	add	r0, pc, #4	@ (adr r0, 8002da4 <_scanf_float+0xe4>)
 8002da0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002da4:	08002e5f 	.word	0x08002e5f
 8002da8:	08002d29 	.word	0x08002d29
 8002dac:	08002e5f 	.word	0x08002e5f
 8002db0:	08002eef 	.word	0x08002eef
 8002db4:	08002d29 	.word	0x08002d29
 8002db8:	08002e01 	.word	0x08002e01
 8002dbc:	08002e45 	.word	0x08002e45
 8002dc0:	08002e45 	.word	0x08002e45
 8002dc4:	08002e45 	.word	0x08002e45
 8002dc8:	08002e45 	.word	0x08002e45
 8002dcc:	08002e45 	.word	0x08002e45
 8002dd0:	08002e45 	.word	0x08002e45
 8002dd4:	08002e45 	.word	0x08002e45
 8002dd8:	08002e45 	.word	0x08002e45
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	2b6e      	cmp	r3, #110	@ 0x6e
 8002de2:	d809      	bhi.n	8002df8 <_scanf_float+0x138>
 8002de4:	2b60      	cmp	r3, #96	@ 0x60
 8002de6:	d8b2      	bhi.n	8002d4e <_scanf_float+0x8e>
 8002de8:	2b54      	cmp	r3, #84	@ 0x54
 8002dea:	d07b      	beq.n	8002ee4 <_scanf_float+0x224>
 8002dec:	2b59      	cmp	r3, #89	@ 0x59
 8002dee:	d19b      	bne.n	8002d28 <_scanf_float+0x68>
 8002df0:	2d07      	cmp	r5, #7
 8002df2:	d199      	bne.n	8002d28 <_scanf_float+0x68>
 8002df4:	2508      	movs	r5, #8
 8002df6:	e02f      	b.n	8002e58 <_scanf_float+0x198>
 8002df8:	2b74      	cmp	r3, #116	@ 0x74
 8002dfa:	d073      	beq.n	8002ee4 <_scanf_float+0x224>
 8002dfc:	2b79      	cmp	r3, #121	@ 0x79
 8002dfe:	e7f6      	b.n	8002dee <_scanf_float+0x12e>
 8002e00:	6821      	ldr	r1, [r4, #0]
 8002e02:	05c8      	lsls	r0, r1, #23
 8002e04:	d51e      	bpl.n	8002e44 <_scanf_float+0x184>
 8002e06:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8002e0a:	6021      	str	r1, [r4, #0]
 8002e0c:	3701      	adds	r7, #1
 8002e0e:	f1bb 0f00 	cmp.w	fp, #0
 8002e12:	d003      	beq.n	8002e1c <_scanf_float+0x15c>
 8002e14:	3201      	adds	r2, #1
 8002e16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002e1a:	60a2      	str	r2, [r4, #8]
 8002e1c:	68a3      	ldr	r3, [r4, #8]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	60a3      	str	r3, [r4, #8]
 8002e22:	6923      	ldr	r3, [r4, #16]
 8002e24:	3301      	adds	r3, #1
 8002e26:	6123      	str	r3, [r4, #16]
 8002e28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f8c9 3004 	str.w	r3, [r9, #4]
 8002e34:	f340 8083 	ble.w	8002f3e <_scanf_float+0x27e>
 8002e38:	f8d9 3000 	ldr.w	r3, [r9]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f8c9 3000 	str.w	r3, [r9]
 8002e42:	e763      	b.n	8002d0c <_scanf_float+0x4c>
 8002e44:	eb1a 0105 	adds.w	r1, sl, r5
 8002e48:	f47f af6e 	bne.w	8002d28 <_scanf_float+0x68>
 8002e4c:	460d      	mov	r5, r1
 8002e4e:	468a      	mov	sl, r1
 8002e50:	6822      	ldr	r2, [r4, #0]
 8002e52:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8002e56:	6022      	str	r2, [r4, #0]
 8002e58:	f806 3b01 	strb.w	r3, [r6], #1
 8002e5c:	e7de      	b.n	8002e1c <_scanf_float+0x15c>
 8002e5e:	6822      	ldr	r2, [r4, #0]
 8002e60:	0610      	lsls	r0, r2, #24
 8002e62:	f57f af61 	bpl.w	8002d28 <_scanf_float+0x68>
 8002e66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e6a:	6022      	str	r2, [r4, #0]
 8002e6c:	e7f4      	b.n	8002e58 <_scanf_float+0x198>
 8002e6e:	f1ba 0f00 	cmp.w	sl, #0
 8002e72:	d10c      	bne.n	8002e8e <_scanf_float+0x1ce>
 8002e74:	b977      	cbnz	r7, 8002e94 <_scanf_float+0x1d4>
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8002e7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8002e80:	d108      	bne.n	8002e94 <_scanf_float+0x1d4>
 8002e82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002e86:	f04f 0a01 	mov.w	sl, #1
 8002e8a:	6022      	str	r2, [r4, #0]
 8002e8c:	e7e4      	b.n	8002e58 <_scanf_float+0x198>
 8002e8e:	f1ba 0f02 	cmp.w	sl, #2
 8002e92:	d051      	beq.n	8002f38 <_scanf_float+0x278>
 8002e94:	2d01      	cmp	r5, #1
 8002e96:	d002      	beq.n	8002e9e <_scanf_float+0x1de>
 8002e98:	2d04      	cmp	r5, #4
 8002e9a:	f47f af45 	bne.w	8002d28 <_scanf_float+0x68>
 8002e9e:	3501      	adds	r5, #1
 8002ea0:	b2ed      	uxtb	r5, r5
 8002ea2:	e7d9      	b.n	8002e58 <_scanf_float+0x198>
 8002ea4:	f1ba 0f01 	cmp.w	sl, #1
 8002ea8:	f47f af3e 	bne.w	8002d28 <_scanf_float+0x68>
 8002eac:	f04f 0a02 	mov.w	sl, #2
 8002eb0:	e7d2      	b.n	8002e58 <_scanf_float+0x198>
 8002eb2:	b975      	cbnz	r5, 8002ed2 <_scanf_float+0x212>
 8002eb4:	2f00      	cmp	r7, #0
 8002eb6:	f47f af38 	bne.w	8002d2a <_scanf_float+0x6a>
 8002eba:	6822      	ldr	r2, [r4, #0]
 8002ebc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8002ec0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8002ec4:	f040 80ff 	bne.w	80030c6 <_scanf_float+0x406>
 8002ec8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002ecc:	2501      	movs	r5, #1
 8002ece:	6022      	str	r2, [r4, #0]
 8002ed0:	e7c2      	b.n	8002e58 <_scanf_float+0x198>
 8002ed2:	2d03      	cmp	r5, #3
 8002ed4:	d0e3      	beq.n	8002e9e <_scanf_float+0x1de>
 8002ed6:	2d05      	cmp	r5, #5
 8002ed8:	e7df      	b.n	8002e9a <_scanf_float+0x1da>
 8002eda:	2d02      	cmp	r5, #2
 8002edc:	f47f af24 	bne.w	8002d28 <_scanf_float+0x68>
 8002ee0:	2503      	movs	r5, #3
 8002ee2:	e7b9      	b.n	8002e58 <_scanf_float+0x198>
 8002ee4:	2d06      	cmp	r5, #6
 8002ee6:	f47f af1f 	bne.w	8002d28 <_scanf_float+0x68>
 8002eea:	2507      	movs	r5, #7
 8002eec:	e7b4      	b.n	8002e58 <_scanf_float+0x198>
 8002eee:	6822      	ldr	r2, [r4, #0]
 8002ef0:	0591      	lsls	r1, r2, #22
 8002ef2:	f57f af19 	bpl.w	8002d28 <_scanf_float+0x68>
 8002ef6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8002efa:	6022      	str	r2, [r4, #0]
 8002efc:	9702      	str	r7, [sp, #8]
 8002efe:	e7ab      	b.n	8002e58 <_scanf_float+0x198>
 8002f00:	6822      	ldr	r2, [r4, #0]
 8002f02:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8002f06:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002f0a:	d005      	beq.n	8002f18 <_scanf_float+0x258>
 8002f0c:	0550      	lsls	r0, r2, #21
 8002f0e:	f57f af0b 	bpl.w	8002d28 <_scanf_float+0x68>
 8002f12:	2f00      	cmp	r7, #0
 8002f14:	f000 80d7 	beq.w	80030c6 <_scanf_float+0x406>
 8002f18:	0591      	lsls	r1, r2, #22
 8002f1a:	bf58      	it	pl
 8002f1c:	9902      	ldrpl	r1, [sp, #8]
 8002f1e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002f22:	bf58      	it	pl
 8002f24:	1a79      	subpl	r1, r7, r1
 8002f26:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8002f2a:	f04f 0700 	mov.w	r7, #0
 8002f2e:	bf58      	it	pl
 8002f30:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002f34:	6022      	str	r2, [r4, #0]
 8002f36:	e78f      	b.n	8002e58 <_scanf_float+0x198>
 8002f38:	f04f 0a03 	mov.w	sl, #3
 8002f3c:	e78c      	b.n	8002e58 <_scanf_float+0x198>
 8002f3e:	4649      	mov	r1, r9
 8002f40:	4640      	mov	r0, r8
 8002f42:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002f46:	4798      	blx	r3
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	f43f aedf 	beq.w	8002d0c <_scanf_float+0x4c>
 8002f4e:	e6eb      	b.n	8002d28 <_scanf_float+0x68>
 8002f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002f54:	464a      	mov	r2, r9
 8002f56:	4640      	mov	r0, r8
 8002f58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002f5c:	4798      	blx	r3
 8002f5e:	6923      	ldr	r3, [r4, #16]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	6123      	str	r3, [r4, #16]
 8002f64:	e6eb      	b.n	8002d3e <_scanf_float+0x7e>
 8002f66:	1e6b      	subs	r3, r5, #1
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d824      	bhi.n	8002fb6 <_scanf_float+0x2f6>
 8002f6c:	2d02      	cmp	r5, #2
 8002f6e:	d836      	bhi.n	8002fde <_scanf_float+0x31e>
 8002f70:	9b01      	ldr	r3, [sp, #4]
 8002f72:	429e      	cmp	r6, r3
 8002f74:	f67f aee7 	bls.w	8002d46 <_scanf_float+0x86>
 8002f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002f7c:	464a      	mov	r2, r9
 8002f7e:	4640      	mov	r0, r8
 8002f80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002f84:	4798      	blx	r3
 8002f86:	6923      	ldr	r3, [r4, #16]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	6123      	str	r3, [r4, #16]
 8002f8c:	e7f0      	b.n	8002f70 <_scanf_float+0x2b0>
 8002f8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002f92:	464a      	mov	r2, r9
 8002f94:	4640      	mov	r0, r8
 8002f96:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8002f9a:	4798      	blx	r3
 8002f9c:	6923      	ldr	r3, [r4, #16]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6123      	str	r3, [r4, #16]
 8002fa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002fa6:	fa5f fa8a 	uxtb.w	sl, sl
 8002faa:	f1ba 0f02 	cmp.w	sl, #2
 8002fae:	d1ee      	bne.n	8002f8e <_scanf_float+0x2ce>
 8002fb0:	3d03      	subs	r5, #3
 8002fb2:	b2ed      	uxtb	r5, r5
 8002fb4:	1b76      	subs	r6, r6, r5
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	05da      	lsls	r2, r3, #23
 8002fba:	d530      	bpl.n	800301e <_scanf_float+0x35e>
 8002fbc:	055b      	lsls	r3, r3, #21
 8002fbe:	d511      	bpl.n	8002fe4 <_scanf_float+0x324>
 8002fc0:	9b01      	ldr	r3, [sp, #4]
 8002fc2:	429e      	cmp	r6, r3
 8002fc4:	f67f aebf 	bls.w	8002d46 <_scanf_float+0x86>
 8002fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002fcc:	464a      	mov	r2, r9
 8002fce:	4640      	mov	r0, r8
 8002fd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002fd4:	4798      	blx	r3
 8002fd6:	6923      	ldr	r3, [r4, #16]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	6123      	str	r3, [r4, #16]
 8002fdc:	e7f0      	b.n	8002fc0 <_scanf_float+0x300>
 8002fde:	46aa      	mov	sl, r5
 8002fe0:	46b3      	mov	fp, r6
 8002fe2:	e7de      	b.n	8002fa2 <_scanf_float+0x2e2>
 8002fe4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002fe8:	6923      	ldr	r3, [r4, #16]
 8002fea:	2965      	cmp	r1, #101	@ 0x65
 8002fec:	f103 33ff 	add.w	r3, r3, #4294967295
 8002ff0:	f106 35ff 	add.w	r5, r6, #4294967295
 8002ff4:	6123      	str	r3, [r4, #16]
 8002ff6:	d00c      	beq.n	8003012 <_scanf_float+0x352>
 8002ff8:	2945      	cmp	r1, #69	@ 0x45
 8002ffa:	d00a      	beq.n	8003012 <_scanf_float+0x352>
 8002ffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003000:	464a      	mov	r2, r9
 8003002:	4640      	mov	r0, r8
 8003004:	4798      	blx	r3
 8003006:	6923      	ldr	r3, [r4, #16]
 8003008:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800300c:	3b01      	subs	r3, #1
 800300e:	1eb5      	subs	r5, r6, #2
 8003010:	6123      	str	r3, [r4, #16]
 8003012:	464a      	mov	r2, r9
 8003014:	4640      	mov	r0, r8
 8003016:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800301a:	4798      	blx	r3
 800301c:	462e      	mov	r6, r5
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	f012 0210 	ands.w	r2, r2, #16
 8003024:	d001      	beq.n	800302a <_scanf_float+0x36a>
 8003026:	2000      	movs	r0, #0
 8003028:	e68e      	b.n	8002d48 <_scanf_float+0x88>
 800302a:	7032      	strb	r2, [r6, #0]
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003036:	d125      	bne.n	8003084 <_scanf_float+0x3c4>
 8003038:	9b02      	ldr	r3, [sp, #8]
 800303a:	429f      	cmp	r7, r3
 800303c:	d00a      	beq.n	8003054 <_scanf_float+0x394>
 800303e:	1bda      	subs	r2, r3, r7
 8003040:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003044:	429e      	cmp	r6, r3
 8003046:	bf28      	it	cs
 8003048:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800304c:	4630      	mov	r0, r6
 800304e:	491f      	ldr	r1, [pc, #124]	@ (80030cc <_scanf_float+0x40c>)
 8003050:	f000 f902 	bl	8003258 <siprintf>
 8003054:	2200      	movs	r2, #0
 8003056:	4640      	mov	r0, r8
 8003058:	9901      	ldr	r1, [sp, #4]
 800305a:	f002 fbe9 	bl	8005830 <_strtod_r>
 800305e:	9b03      	ldr	r3, [sp, #12]
 8003060:	6825      	ldr	r5, [r4, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f015 0f02 	tst.w	r5, #2
 8003068:	4606      	mov	r6, r0
 800306a:	460f      	mov	r7, r1
 800306c:	f103 0204 	add.w	r2, r3, #4
 8003070:	d015      	beq.n	800309e <_scanf_float+0x3de>
 8003072:	9903      	ldr	r1, [sp, #12]
 8003074:	600a      	str	r2, [r1, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e9c3 6700 	strd	r6, r7, [r3]
 800307c:	68e3      	ldr	r3, [r4, #12]
 800307e:	3301      	adds	r3, #1
 8003080:	60e3      	str	r3, [r4, #12]
 8003082:	e7d0      	b.n	8003026 <_scanf_float+0x366>
 8003084:	9b04      	ldr	r3, [sp, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0e4      	beq.n	8003054 <_scanf_float+0x394>
 800308a:	9905      	ldr	r1, [sp, #20]
 800308c:	230a      	movs	r3, #10
 800308e:	4640      	mov	r0, r8
 8003090:	3101      	adds	r1, #1
 8003092:	f002 fc4d 	bl	8005930 <_strtol_r>
 8003096:	9b04      	ldr	r3, [sp, #16]
 8003098:	9e05      	ldr	r6, [sp, #20]
 800309a:	1ac2      	subs	r2, r0, r3
 800309c:	e7d0      	b.n	8003040 <_scanf_float+0x380>
 800309e:	076d      	lsls	r5, r5, #29
 80030a0:	d4e7      	bmi.n	8003072 <_scanf_float+0x3b2>
 80030a2:	9d03      	ldr	r5, [sp, #12]
 80030a4:	602a      	str	r2, [r5, #0]
 80030a6:	681d      	ldr	r5, [r3, #0]
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	f7fd fcae 	bl	8000a0c <__aeabi_dcmpun>
 80030b0:	b120      	cbz	r0, 80030bc <_scanf_float+0x3fc>
 80030b2:	4807      	ldr	r0, [pc, #28]	@ (80030d0 <_scanf_float+0x410>)
 80030b4:	f000 f9c4 	bl	8003440 <nanf>
 80030b8:	6028      	str	r0, [r5, #0]
 80030ba:	e7df      	b.n	800307c <_scanf_float+0x3bc>
 80030bc:	4630      	mov	r0, r6
 80030be:	4639      	mov	r1, r7
 80030c0:	f7fd fd02 	bl	8000ac8 <__aeabi_d2f>
 80030c4:	e7f8      	b.n	80030b8 <_scanf_float+0x3f8>
 80030c6:	2700      	movs	r7, #0
 80030c8:	e633      	b.n	8002d32 <_scanf_float+0x72>
 80030ca:	bf00      	nop
 80030cc:	08006b52 	.word	0x08006b52
 80030d0:	08006c93 	.word	0x08006c93

080030d4 <std>:
 80030d4:	2300      	movs	r3, #0
 80030d6:	b510      	push	{r4, lr}
 80030d8:	4604      	mov	r4, r0
 80030da:	e9c0 3300 	strd	r3, r3, [r0]
 80030de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030e2:	6083      	str	r3, [r0, #8]
 80030e4:	8181      	strh	r1, [r0, #12]
 80030e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80030e8:	81c2      	strh	r2, [r0, #14]
 80030ea:	6183      	str	r3, [r0, #24]
 80030ec:	4619      	mov	r1, r3
 80030ee:	2208      	movs	r2, #8
 80030f0:	305c      	adds	r0, #92	@ 0x5c
 80030f2:	f000 f916 	bl	8003322 <memset>
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <std+0x58>)
 80030f8:	6224      	str	r4, [r4, #32]
 80030fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80030fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <std+0x5c>)
 80030fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <std+0x60>)
 8003102:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003104:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <std+0x64>)
 8003106:	6323      	str	r3, [r4, #48]	@ 0x30
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <std+0x68>)
 800310a:	429c      	cmp	r4, r3
 800310c:	d006      	beq.n	800311c <std+0x48>
 800310e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003112:	4294      	cmp	r4, r2
 8003114:	d002      	beq.n	800311c <std+0x48>
 8003116:	33d0      	adds	r3, #208	@ 0xd0
 8003118:	429c      	cmp	r4, r3
 800311a:	d105      	bne.n	8003128 <std+0x54>
 800311c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003124:	f000 b97a 	b.w	800341c <__retarget_lock_init_recursive>
 8003128:	bd10      	pop	{r4, pc}
 800312a:	bf00      	nop
 800312c:	0800329d 	.word	0x0800329d
 8003130:	080032bf 	.word	0x080032bf
 8003134:	080032f7 	.word	0x080032f7
 8003138:	0800331b 	.word	0x0800331b
 800313c:	20000244 	.word	0x20000244

08003140 <stdio_exit_handler>:
 8003140:	4a02      	ldr	r2, [pc, #8]	@ (800314c <stdio_exit_handler+0xc>)
 8003142:	4903      	ldr	r1, [pc, #12]	@ (8003150 <stdio_exit_handler+0x10>)
 8003144:	4803      	ldr	r0, [pc, #12]	@ (8003154 <stdio_exit_handler+0x14>)
 8003146:	f000 b869 	b.w	800321c <_fwalk_sglue>
 800314a:	bf00      	nop
 800314c:	2000000c 	.word	0x2000000c
 8003150:	08005ce5 	.word	0x08005ce5
 8003154:	2000001c 	.word	0x2000001c

08003158 <cleanup_stdio>:
 8003158:	6841      	ldr	r1, [r0, #4]
 800315a:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <cleanup_stdio+0x34>)
 800315c:	b510      	push	{r4, lr}
 800315e:	4299      	cmp	r1, r3
 8003160:	4604      	mov	r4, r0
 8003162:	d001      	beq.n	8003168 <cleanup_stdio+0x10>
 8003164:	f002 fdbe 	bl	8005ce4 <_fflush_r>
 8003168:	68a1      	ldr	r1, [r4, #8]
 800316a:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <cleanup_stdio+0x38>)
 800316c:	4299      	cmp	r1, r3
 800316e:	d002      	beq.n	8003176 <cleanup_stdio+0x1e>
 8003170:	4620      	mov	r0, r4
 8003172:	f002 fdb7 	bl	8005ce4 <_fflush_r>
 8003176:	68e1      	ldr	r1, [r4, #12]
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <cleanup_stdio+0x3c>)
 800317a:	4299      	cmp	r1, r3
 800317c:	d004      	beq.n	8003188 <cleanup_stdio+0x30>
 800317e:	4620      	mov	r0, r4
 8003180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003184:	f002 bdae 	b.w	8005ce4 <_fflush_r>
 8003188:	bd10      	pop	{r4, pc}
 800318a:	bf00      	nop
 800318c:	20000244 	.word	0x20000244
 8003190:	200002ac 	.word	0x200002ac
 8003194:	20000314 	.word	0x20000314

08003198 <global_stdio_init.part.0>:
 8003198:	b510      	push	{r4, lr}
 800319a:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <global_stdio_init.part.0+0x30>)
 800319c:	4c0b      	ldr	r4, [pc, #44]	@ (80031cc <global_stdio_init.part.0+0x34>)
 800319e:	4a0c      	ldr	r2, [pc, #48]	@ (80031d0 <global_stdio_init.part.0+0x38>)
 80031a0:	4620      	mov	r0, r4
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	2104      	movs	r1, #4
 80031a6:	2200      	movs	r2, #0
 80031a8:	f7ff ff94 	bl	80030d4 <std>
 80031ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80031b0:	2201      	movs	r2, #1
 80031b2:	2109      	movs	r1, #9
 80031b4:	f7ff ff8e 	bl	80030d4 <std>
 80031b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80031bc:	2202      	movs	r2, #2
 80031be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c2:	2112      	movs	r1, #18
 80031c4:	f7ff bf86 	b.w	80030d4 <std>
 80031c8:	2000037c 	.word	0x2000037c
 80031cc:	20000244 	.word	0x20000244
 80031d0:	08003141 	.word	0x08003141

080031d4 <__sfp_lock_acquire>:
 80031d4:	4801      	ldr	r0, [pc, #4]	@ (80031dc <__sfp_lock_acquire+0x8>)
 80031d6:	f000 b922 	b.w	800341e <__retarget_lock_acquire_recursive>
 80031da:	bf00      	nop
 80031dc:	20000385 	.word	0x20000385

080031e0 <__sfp_lock_release>:
 80031e0:	4801      	ldr	r0, [pc, #4]	@ (80031e8 <__sfp_lock_release+0x8>)
 80031e2:	f000 b91d 	b.w	8003420 <__retarget_lock_release_recursive>
 80031e6:	bf00      	nop
 80031e8:	20000385 	.word	0x20000385

080031ec <__sinit>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
 80031f0:	f7ff fff0 	bl	80031d4 <__sfp_lock_acquire>
 80031f4:	6a23      	ldr	r3, [r4, #32]
 80031f6:	b11b      	cbz	r3, 8003200 <__sinit+0x14>
 80031f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031fc:	f7ff bff0 	b.w	80031e0 <__sfp_lock_release>
 8003200:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <__sinit+0x28>)
 8003202:	6223      	str	r3, [r4, #32]
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <__sinit+0x2c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f5      	bne.n	80031f8 <__sinit+0xc>
 800320c:	f7ff ffc4 	bl	8003198 <global_stdio_init.part.0>
 8003210:	e7f2      	b.n	80031f8 <__sinit+0xc>
 8003212:	bf00      	nop
 8003214:	08003159 	.word	0x08003159
 8003218:	2000037c 	.word	0x2000037c

0800321c <_fwalk_sglue>:
 800321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003220:	4607      	mov	r7, r0
 8003222:	4688      	mov	r8, r1
 8003224:	4614      	mov	r4, r2
 8003226:	2600      	movs	r6, #0
 8003228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800322c:	f1b9 0901 	subs.w	r9, r9, #1
 8003230:	d505      	bpl.n	800323e <_fwalk_sglue+0x22>
 8003232:	6824      	ldr	r4, [r4, #0]
 8003234:	2c00      	cmp	r4, #0
 8003236:	d1f7      	bne.n	8003228 <_fwalk_sglue+0xc>
 8003238:	4630      	mov	r0, r6
 800323a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800323e:	89ab      	ldrh	r3, [r5, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d907      	bls.n	8003254 <_fwalk_sglue+0x38>
 8003244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003248:	3301      	adds	r3, #1
 800324a:	d003      	beq.n	8003254 <_fwalk_sglue+0x38>
 800324c:	4629      	mov	r1, r5
 800324e:	4638      	mov	r0, r7
 8003250:	47c0      	blx	r8
 8003252:	4306      	orrs	r6, r0
 8003254:	3568      	adds	r5, #104	@ 0x68
 8003256:	e7e9      	b.n	800322c <_fwalk_sglue+0x10>

08003258 <siprintf>:
 8003258:	b40e      	push	{r1, r2, r3}
 800325a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800325e:	b510      	push	{r4, lr}
 8003260:	2400      	movs	r4, #0
 8003262:	b09d      	sub	sp, #116	@ 0x74
 8003264:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003266:	9002      	str	r0, [sp, #8]
 8003268:	9006      	str	r0, [sp, #24]
 800326a:	9107      	str	r1, [sp, #28]
 800326c:	9104      	str	r1, [sp, #16]
 800326e:	4809      	ldr	r0, [pc, #36]	@ (8003294 <siprintf+0x3c>)
 8003270:	4909      	ldr	r1, [pc, #36]	@ (8003298 <siprintf+0x40>)
 8003272:	f853 2b04 	ldr.w	r2, [r3], #4
 8003276:	9105      	str	r1, [sp, #20]
 8003278:	6800      	ldr	r0, [r0, #0]
 800327a:	a902      	add	r1, sp, #8
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003280:	f002 fbb4 	bl	80059ec <_svfiprintf_r>
 8003284:	9b02      	ldr	r3, [sp, #8]
 8003286:	701c      	strb	r4, [r3, #0]
 8003288:	b01d      	add	sp, #116	@ 0x74
 800328a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800328e:	b003      	add	sp, #12
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000018 	.word	0x20000018
 8003298:	ffff0208 	.word	0xffff0208

0800329c <__sread>:
 800329c:	b510      	push	{r4, lr}
 800329e:	460c      	mov	r4, r1
 80032a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a4:	f000 f86c 	bl	8003380 <_read_r>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	bfab      	itete	ge
 80032ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80032ae:	89a3      	ldrhlt	r3, [r4, #12]
 80032b0:	181b      	addge	r3, r3, r0
 80032b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80032b6:	bfac      	ite	ge
 80032b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80032ba:	81a3      	strhlt	r3, [r4, #12]
 80032bc:	bd10      	pop	{r4, pc}

080032be <__swrite>:
 80032be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c2:	461f      	mov	r7, r3
 80032c4:	898b      	ldrh	r3, [r1, #12]
 80032c6:	4605      	mov	r5, r0
 80032c8:	05db      	lsls	r3, r3, #23
 80032ca:	460c      	mov	r4, r1
 80032cc:	4616      	mov	r6, r2
 80032ce:	d505      	bpl.n	80032dc <__swrite+0x1e>
 80032d0:	2302      	movs	r3, #2
 80032d2:	2200      	movs	r2, #0
 80032d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032d8:	f000 f840 	bl	800335c <_lseek_r>
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	4632      	mov	r2, r6
 80032e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032e4:	81a3      	strh	r3, [r4, #12]
 80032e6:	4628      	mov	r0, r5
 80032e8:	463b      	mov	r3, r7
 80032ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032f2:	f000 b857 	b.w	80033a4 <_write_r>

080032f6 <__sseek>:
 80032f6:	b510      	push	{r4, lr}
 80032f8:	460c      	mov	r4, r1
 80032fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032fe:	f000 f82d 	bl	800335c <_lseek_r>
 8003302:	1c43      	adds	r3, r0, #1
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	bf15      	itete	ne
 8003308:	6560      	strne	r0, [r4, #84]	@ 0x54
 800330a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800330e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003312:	81a3      	strheq	r3, [r4, #12]
 8003314:	bf18      	it	ne
 8003316:	81a3      	strhne	r3, [r4, #12]
 8003318:	bd10      	pop	{r4, pc}

0800331a <__sclose>:
 800331a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800331e:	f000 b80d 	b.w	800333c <_close_r>

08003322 <memset>:
 8003322:	4603      	mov	r3, r0
 8003324:	4402      	add	r2, r0
 8003326:	4293      	cmp	r3, r2
 8003328:	d100      	bne.n	800332c <memset+0xa>
 800332a:	4770      	bx	lr
 800332c:	f803 1b01 	strb.w	r1, [r3], #1
 8003330:	e7f9      	b.n	8003326 <memset+0x4>
	...

08003334 <_localeconv_r>:
 8003334:	4800      	ldr	r0, [pc, #0]	@ (8003338 <_localeconv_r+0x4>)
 8003336:	4770      	bx	lr
 8003338:	20000158 	.word	0x20000158

0800333c <_close_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	2300      	movs	r3, #0
 8003340:	4d05      	ldr	r5, [pc, #20]	@ (8003358 <_close_r+0x1c>)
 8003342:	4604      	mov	r4, r0
 8003344:	4608      	mov	r0, r1
 8003346:	602b      	str	r3, [r5, #0]
 8003348:	f7fd fe37 	bl	8000fba <_close>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	d102      	bne.n	8003356 <_close_r+0x1a>
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	b103      	cbz	r3, 8003356 <_close_r+0x1a>
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	20000380 	.word	0x20000380

0800335c <_lseek_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4604      	mov	r4, r0
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	2200      	movs	r2, #0
 8003366:	4d05      	ldr	r5, [pc, #20]	@ (800337c <_lseek_r+0x20>)
 8003368:	602a      	str	r2, [r5, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f7fd fe49 	bl	8001002 <_lseek>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d102      	bne.n	800337a <_lseek_r+0x1e>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	b103      	cbz	r3, 800337a <_lseek_r+0x1e>
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	20000380 	.word	0x20000380

08003380 <_read_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	4604      	mov	r4, r0
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	2200      	movs	r2, #0
 800338a:	4d05      	ldr	r5, [pc, #20]	@ (80033a0 <_read_r+0x20>)
 800338c:	602a      	str	r2, [r5, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	f7fd fdda 	bl	8000f48 <_read>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d102      	bne.n	800339e <_read_r+0x1e>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	b103      	cbz	r3, 800339e <_read_r+0x1e>
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	bd38      	pop	{r3, r4, r5, pc}
 80033a0:	20000380 	.word	0x20000380

080033a4 <_write_r>:
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4604      	mov	r4, r0
 80033a8:	4608      	mov	r0, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	2200      	movs	r2, #0
 80033ae:	4d05      	ldr	r5, [pc, #20]	@ (80033c4 <_write_r+0x20>)
 80033b0:	602a      	str	r2, [r5, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	f7fd fde5 	bl	8000f82 <_write>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d102      	bne.n	80033c2 <_write_r+0x1e>
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	b103      	cbz	r3, 80033c2 <_write_r+0x1e>
 80033c0:	6023      	str	r3, [r4, #0]
 80033c2:	bd38      	pop	{r3, r4, r5, pc}
 80033c4:	20000380 	.word	0x20000380

080033c8 <__errno>:
 80033c8:	4b01      	ldr	r3, [pc, #4]	@ (80033d0 <__errno+0x8>)
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000018 	.word	0x20000018

080033d4 <__libc_init_array>:
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	2600      	movs	r6, #0
 80033d8:	4d0c      	ldr	r5, [pc, #48]	@ (800340c <__libc_init_array+0x38>)
 80033da:	4c0d      	ldr	r4, [pc, #52]	@ (8003410 <__libc_init_array+0x3c>)
 80033dc:	1b64      	subs	r4, r4, r5
 80033de:	10a4      	asrs	r4, r4, #2
 80033e0:	42a6      	cmp	r6, r4
 80033e2:	d109      	bne.n	80033f8 <__libc_init_array+0x24>
 80033e4:	f003 fb6a 	bl	8006abc <_init>
 80033e8:	2600      	movs	r6, #0
 80033ea:	4d0a      	ldr	r5, [pc, #40]	@ (8003414 <__libc_init_array+0x40>)
 80033ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003418 <__libc_init_array+0x44>)
 80033ee:	1b64      	subs	r4, r4, r5
 80033f0:	10a4      	asrs	r4, r4, #2
 80033f2:	42a6      	cmp	r6, r4
 80033f4:	d105      	bne.n	8003402 <__libc_init_array+0x2e>
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
 80033f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033fc:	4798      	blx	r3
 80033fe:	3601      	adds	r6, #1
 8003400:	e7ee      	b.n	80033e0 <__libc_init_array+0xc>
 8003402:	f855 3b04 	ldr.w	r3, [r5], #4
 8003406:	4798      	blx	r3
 8003408:	3601      	adds	r6, #1
 800340a:	e7f2      	b.n	80033f2 <__libc_init_array+0x1e>
 800340c:	08006f4c 	.word	0x08006f4c
 8003410:	08006f4c 	.word	0x08006f4c
 8003414:	08006f4c 	.word	0x08006f4c
 8003418:	08006f50 	.word	0x08006f50

0800341c <__retarget_lock_init_recursive>:
 800341c:	4770      	bx	lr

0800341e <__retarget_lock_acquire_recursive>:
 800341e:	4770      	bx	lr

08003420 <__retarget_lock_release_recursive>:
 8003420:	4770      	bx	lr

08003422 <memchr>:
 8003422:	4603      	mov	r3, r0
 8003424:	b510      	push	{r4, lr}
 8003426:	b2c9      	uxtb	r1, r1
 8003428:	4402      	add	r2, r0
 800342a:	4293      	cmp	r3, r2
 800342c:	4618      	mov	r0, r3
 800342e:	d101      	bne.n	8003434 <memchr+0x12>
 8003430:	2000      	movs	r0, #0
 8003432:	e003      	b.n	800343c <memchr+0x1a>
 8003434:	7804      	ldrb	r4, [r0, #0]
 8003436:	3301      	adds	r3, #1
 8003438:	428c      	cmp	r4, r1
 800343a:	d1f6      	bne.n	800342a <memchr+0x8>
 800343c:	bd10      	pop	{r4, pc}
	...

08003440 <nanf>:
 8003440:	4800      	ldr	r0, [pc, #0]	@ (8003444 <nanf+0x4>)
 8003442:	4770      	bx	lr
 8003444:	7fc00000 	.word	0x7fc00000

08003448 <quorem>:
 8003448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344c:	6903      	ldr	r3, [r0, #16]
 800344e:	690c      	ldr	r4, [r1, #16]
 8003450:	4607      	mov	r7, r0
 8003452:	42a3      	cmp	r3, r4
 8003454:	db7e      	blt.n	8003554 <quorem+0x10c>
 8003456:	3c01      	subs	r4, #1
 8003458:	00a3      	lsls	r3, r4, #2
 800345a:	f100 0514 	add.w	r5, r0, #20
 800345e:	f101 0814 	add.w	r8, r1, #20
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800346e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003472:	3301      	adds	r3, #1
 8003474:	429a      	cmp	r2, r3
 8003476:	fbb2 f6f3 	udiv	r6, r2, r3
 800347a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800347e:	d32e      	bcc.n	80034de <quorem+0x96>
 8003480:	f04f 0a00 	mov.w	sl, #0
 8003484:	46c4      	mov	ip, r8
 8003486:	46ae      	mov	lr, r5
 8003488:	46d3      	mov	fp, sl
 800348a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800348e:	b298      	uxth	r0, r3
 8003490:	fb06 a000 	mla	r0, r6, r0, sl
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	0c02      	lsrs	r2, r0, #16
 8003498:	fb06 2303 	mla	r3, r6, r3, r2
 800349c:	f8de 2000 	ldr.w	r2, [lr]
 80034a0:	b280      	uxth	r0, r0
 80034a2:	b292      	uxth	r2, r2
 80034a4:	1a12      	subs	r2, r2, r0
 80034a6:	445a      	add	r2, fp
 80034a8:	f8de 0000 	ldr.w	r0, [lr]
 80034ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80034b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80034ba:	b292      	uxth	r2, r2
 80034bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80034c0:	45e1      	cmp	r9, ip
 80034c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80034c6:	f84e 2b04 	str.w	r2, [lr], #4
 80034ca:	d2de      	bcs.n	800348a <quorem+0x42>
 80034cc:	9b00      	ldr	r3, [sp, #0]
 80034ce:	58eb      	ldr	r3, [r5, r3]
 80034d0:	b92b      	cbnz	r3, 80034de <quorem+0x96>
 80034d2:	9b01      	ldr	r3, [sp, #4]
 80034d4:	3b04      	subs	r3, #4
 80034d6:	429d      	cmp	r5, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	d32f      	bcc.n	800353c <quorem+0xf4>
 80034dc:	613c      	str	r4, [r7, #16]
 80034de:	4638      	mov	r0, r7
 80034e0:	f001 f9c8 	bl	8004874 <__mcmp>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	db25      	blt.n	8003534 <quorem+0xec>
 80034e8:	4629      	mov	r1, r5
 80034ea:	2000      	movs	r0, #0
 80034ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80034f0:	f8d1 c000 	ldr.w	ip, [r1]
 80034f4:	fa1f fe82 	uxth.w	lr, r2
 80034f8:	fa1f f38c 	uxth.w	r3, ip
 80034fc:	eba3 030e 	sub.w	r3, r3, lr
 8003500:	4403      	add	r3, r0
 8003502:	0c12      	lsrs	r2, r2, #16
 8003504:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003508:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800350c:	b29b      	uxth	r3, r3
 800350e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003512:	45c1      	cmp	r9, r8
 8003514:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003518:	f841 3b04 	str.w	r3, [r1], #4
 800351c:	d2e6      	bcs.n	80034ec <quorem+0xa4>
 800351e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003526:	b922      	cbnz	r2, 8003532 <quorem+0xea>
 8003528:	3b04      	subs	r3, #4
 800352a:	429d      	cmp	r5, r3
 800352c:	461a      	mov	r2, r3
 800352e:	d30b      	bcc.n	8003548 <quorem+0x100>
 8003530:	613c      	str	r4, [r7, #16]
 8003532:	3601      	adds	r6, #1
 8003534:	4630      	mov	r0, r6
 8003536:	b003      	add	sp, #12
 8003538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	3b04      	subs	r3, #4
 8003540:	2a00      	cmp	r2, #0
 8003542:	d1cb      	bne.n	80034dc <quorem+0x94>
 8003544:	3c01      	subs	r4, #1
 8003546:	e7c6      	b.n	80034d6 <quorem+0x8e>
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	3b04      	subs	r3, #4
 800354c:	2a00      	cmp	r2, #0
 800354e:	d1ef      	bne.n	8003530 <quorem+0xe8>
 8003550:	3c01      	subs	r4, #1
 8003552:	e7ea      	b.n	800352a <quorem+0xe2>
 8003554:	2000      	movs	r0, #0
 8003556:	e7ee      	b.n	8003536 <quorem+0xee>

08003558 <_dtoa_r>:
 8003558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355c:	4614      	mov	r4, r2
 800355e:	461d      	mov	r5, r3
 8003560:	69c7      	ldr	r7, [r0, #28]
 8003562:	b097      	sub	sp, #92	@ 0x5c
 8003564:	4681      	mov	r9, r0
 8003566:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800356a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800356c:	b97f      	cbnz	r7, 800358e <_dtoa_r+0x36>
 800356e:	2010      	movs	r0, #16
 8003570:	f000 fe0e 	bl	8004190 <malloc>
 8003574:	4602      	mov	r2, r0
 8003576:	f8c9 001c 	str.w	r0, [r9, #28]
 800357a:	b920      	cbnz	r0, 8003586 <_dtoa_r+0x2e>
 800357c:	21ef      	movs	r1, #239	@ 0xef
 800357e:	4bac      	ldr	r3, [pc, #688]	@ (8003830 <_dtoa_r+0x2d8>)
 8003580:	48ac      	ldr	r0, [pc, #688]	@ (8003834 <_dtoa_r+0x2dc>)
 8003582:	f002 fc27 	bl	8005dd4 <__assert_func>
 8003586:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800358a:	6007      	str	r7, [r0, #0]
 800358c:	60c7      	str	r7, [r0, #12]
 800358e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	b159      	cbz	r1, 80035ae <_dtoa_r+0x56>
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	2301      	movs	r3, #1
 800359a:	4093      	lsls	r3, r2
 800359c:	604a      	str	r2, [r1, #4]
 800359e:	608b      	str	r3, [r1, #8]
 80035a0:	4648      	mov	r0, r9
 80035a2:	f000 feeb 	bl	800437c <_Bfree>
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	1e2b      	subs	r3, r5, #0
 80035b0:	bfaf      	iteee	ge
 80035b2:	2300      	movge	r3, #0
 80035b4:	2201      	movlt	r2, #1
 80035b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80035ba:	9307      	strlt	r3, [sp, #28]
 80035bc:	bfa8      	it	ge
 80035be:	6033      	strge	r3, [r6, #0]
 80035c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80035c4:	4b9c      	ldr	r3, [pc, #624]	@ (8003838 <_dtoa_r+0x2e0>)
 80035c6:	bfb8      	it	lt
 80035c8:	6032      	strlt	r2, [r6, #0]
 80035ca:	ea33 0308 	bics.w	r3, r3, r8
 80035ce:	d112      	bne.n	80035f6 <_dtoa_r+0x9e>
 80035d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80035d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80035dc:	4323      	orrs	r3, r4
 80035de:	f000 855e 	beq.w	800409e <_dtoa_r+0xb46>
 80035e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80035e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800383c <_dtoa_r+0x2e4>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8560 	beq.w	80040ae <_dtoa_r+0xb56>
 80035ee:	f10a 0303 	add.w	r3, sl, #3
 80035f2:	f000 bd5a 	b.w	80040aa <_dtoa_r+0xb52>
 80035f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80035fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003602:	2200      	movs	r2, #0
 8003604:	2300      	movs	r3, #0
 8003606:	f7fd f9cf 	bl	80009a8 <__aeabi_dcmpeq>
 800360a:	4607      	mov	r7, r0
 800360c:	b158      	cbz	r0, 8003626 <_dtoa_r+0xce>
 800360e:	2301      	movs	r3, #1
 8003610:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003616:	b113      	cbz	r3, 800361e <_dtoa_r+0xc6>
 8003618:	4b89      	ldr	r3, [pc, #548]	@ (8003840 <_dtoa_r+0x2e8>)
 800361a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003844 <_dtoa_r+0x2ec>
 8003622:	f000 bd44 	b.w	80040ae <_dtoa_r+0xb56>
 8003626:	ab14      	add	r3, sp, #80	@ 0x50
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	ab15      	add	r3, sp, #84	@ 0x54
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	4648      	mov	r0, r9
 8003630:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003634:	f001 fa36 	bl	8004aa4 <__d2b>
 8003638:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800363c:	9003      	str	r0, [sp, #12]
 800363e:	2e00      	cmp	r6, #0
 8003640:	d078      	beq.n	8003734 <_dtoa_r+0x1dc>
 8003642:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003648:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800364c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003650:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003654:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003658:	9712      	str	r7, [sp, #72]	@ 0x48
 800365a:	4619      	mov	r1, r3
 800365c:	2200      	movs	r2, #0
 800365e:	4b7a      	ldr	r3, [pc, #488]	@ (8003848 <_dtoa_r+0x2f0>)
 8003660:	f7fc fd82 	bl	8000168 <__aeabi_dsub>
 8003664:	a36c      	add	r3, pc, #432	@ (adr r3, 8003818 <_dtoa_r+0x2c0>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f7fc ff35 	bl	80004d8 <__aeabi_dmul>
 800366e:	a36c      	add	r3, pc, #432	@ (adr r3, 8003820 <_dtoa_r+0x2c8>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f7fc fd7a 	bl	800016c <__adddf3>
 8003678:	4604      	mov	r4, r0
 800367a:	4630      	mov	r0, r6
 800367c:	460d      	mov	r5, r1
 800367e:	f7fc fec1 	bl	8000404 <__aeabi_i2d>
 8003682:	a369      	add	r3, pc, #420	@ (adr r3, 8003828 <_dtoa_r+0x2d0>)
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f7fc ff26 	bl	80004d8 <__aeabi_dmul>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4620      	mov	r0, r4
 8003692:	4629      	mov	r1, r5
 8003694:	f7fc fd6a 	bl	800016c <__adddf3>
 8003698:	4604      	mov	r4, r0
 800369a:	460d      	mov	r5, r1
 800369c:	f7fd f9cc 	bl	8000a38 <__aeabi_d2iz>
 80036a0:	2200      	movs	r2, #0
 80036a2:	4607      	mov	r7, r0
 80036a4:	2300      	movs	r3, #0
 80036a6:	4620      	mov	r0, r4
 80036a8:	4629      	mov	r1, r5
 80036aa:	f7fd f987 	bl	80009bc <__aeabi_dcmplt>
 80036ae:	b140      	cbz	r0, 80036c2 <_dtoa_r+0x16a>
 80036b0:	4638      	mov	r0, r7
 80036b2:	f7fc fea7 	bl	8000404 <__aeabi_i2d>
 80036b6:	4622      	mov	r2, r4
 80036b8:	462b      	mov	r3, r5
 80036ba:	f7fd f975 	bl	80009a8 <__aeabi_dcmpeq>
 80036be:	b900      	cbnz	r0, 80036c2 <_dtoa_r+0x16a>
 80036c0:	3f01      	subs	r7, #1
 80036c2:	2f16      	cmp	r7, #22
 80036c4:	d854      	bhi.n	8003770 <_dtoa_r+0x218>
 80036c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80036ca:	4b60      	ldr	r3, [pc, #384]	@ (800384c <_dtoa_r+0x2f4>)
 80036cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f7fd f972 	bl	80009bc <__aeabi_dcmplt>
 80036d8:	2800      	cmp	r0, #0
 80036da:	d04b      	beq.n	8003774 <_dtoa_r+0x21c>
 80036dc:	2300      	movs	r3, #0
 80036de:	3f01      	subs	r7, #1
 80036e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80036e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80036e4:	1b9b      	subs	r3, r3, r6
 80036e6:	1e5a      	subs	r2, r3, #1
 80036e8:	bf49      	itett	mi
 80036ea:	f1c3 0301 	rsbmi	r3, r3, #1
 80036ee:	2300      	movpl	r3, #0
 80036f0:	9304      	strmi	r3, [sp, #16]
 80036f2:	2300      	movmi	r3, #0
 80036f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80036f6:	bf54      	ite	pl
 80036f8:	9304      	strpl	r3, [sp, #16]
 80036fa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80036fc:	2f00      	cmp	r7, #0
 80036fe:	db3b      	blt.n	8003778 <_dtoa_r+0x220>
 8003700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003702:	970e      	str	r7, [sp, #56]	@ 0x38
 8003704:	443b      	add	r3, r7
 8003706:	9309      	str	r3, [sp, #36]	@ 0x24
 8003708:	2300      	movs	r3, #0
 800370a:	930a      	str	r3, [sp, #40]	@ 0x28
 800370c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800370e:	2b09      	cmp	r3, #9
 8003710:	d865      	bhi.n	80037de <_dtoa_r+0x286>
 8003712:	2b05      	cmp	r3, #5
 8003714:	bfc4      	itt	gt
 8003716:	3b04      	subgt	r3, #4
 8003718:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800371a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800371c:	bfc8      	it	gt
 800371e:	2400      	movgt	r4, #0
 8003720:	f1a3 0302 	sub.w	r3, r3, #2
 8003724:	bfd8      	it	le
 8003726:	2401      	movle	r4, #1
 8003728:	2b03      	cmp	r3, #3
 800372a:	d864      	bhi.n	80037f6 <_dtoa_r+0x29e>
 800372c:	e8df f003 	tbb	[pc, r3]
 8003730:	2c385553 	.word	0x2c385553
 8003734:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003738:	441e      	add	r6, r3
 800373a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800373e:	2b20      	cmp	r3, #32
 8003740:	bfc1      	itttt	gt
 8003742:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003746:	fa08 f803 	lslgt.w	r8, r8, r3
 800374a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800374e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003752:	bfd6      	itet	le
 8003754:	f1c3 0320 	rsble	r3, r3, #32
 8003758:	ea48 0003 	orrgt.w	r0, r8, r3
 800375c:	fa04 f003 	lslle.w	r0, r4, r3
 8003760:	f7fc fe40 	bl	80003e4 <__aeabi_ui2d>
 8003764:	2201      	movs	r2, #1
 8003766:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800376a:	3e01      	subs	r6, #1
 800376c:	9212      	str	r2, [sp, #72]	@ 0x48
 800376e:	e774      	b.n	800365a <_dtoa_r+0x102>
 8003770:	2301      	movs	r3, #1
 8003772:	e7b5      	b.n	80036e0 <_dtoa_r+0x188>
 8003774:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003776:	e7b4      	b.n	80036e2 <_dtoa_r+0x18a>
 8003778:	9b04      	ldr	r3, [sp, #16]
 800377a:	1bdb      	subs	r3, r3, r7
 800377c:	9304      	str	r3, [sp, #16]
 800377e:	427b      	negs	r3, r7
 8003780:	930a      	str	r3, [sp, #40]	@ 0x28
 8003782:	2300      	movs	r3, #0
 8003784:	930e      	str	r3, [sp, #56]	@ 0x38
 8003786:	e7c1      	b.n	800370c <_dtoa_r+0x1b4>
 8003788:	2301      	movs	r3, #1
 800378a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800378c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800378e:	eb07 0b03 	add.w	fp, r7, r3
 8003792:	f10b 0301 	add.w	r3, fp, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	9308      	str	r3, [sp, #32]
 800379a:	bfb8      	it	lt
 800379c:	2301      	movlt	r3, #1
 800379e:	e006      	b.n	80037ae <_dtoa_r+0x256>
 80037a0:	2301      	movs	r3, #1
 80037a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	dd28      	ble.n	80037fc <_dtoa_r+0x2a4>
 80037aa:	469b      	mov	fp, r3
 80037ac:	9308      	str	r3, [sp, #32]
 80037ae:	2100      	movs	r1, #0
 80037b0:	2204      	movs	r2, #4
 80037b2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80037b6:	f102 0514 	add.w	r5, r2, #20
 80037ba:	429d      	cmp	r5, r3
 80037bc:	d926      	bls.n	800380c <_dtoa_r+0x2b4>
 80037be:	6041      	str	r1, [r0, #4]
 80037c0:	4648      	mov	r0, r9
 80037c2:	f000 fd9b 	bl	80042fc <_Balloc>
 80037c6:	4682      	mov	sl, r0
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d143      	bne.n	8003854 <_dtoa_r+0x2fc>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80037d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003850 <_dtoa_r+0x2f8>)
 80037d4:	e6d4      	b.n	8003580 <_dtoa_r+0x28>
 80037d6:	2300      	movs	r3, #0
 80037d8:	e7e3      	b.n	80037a2 <_dtoa_r+0x24a>
 80037da:	2300      	movs	r3, #0
 80037dc:	e7d5      	b.n	800378a <_dtoa_r+0x232>
 80037de:	2401      	movs	r4, #1
 80037e0:	2300      	movs	r3, #0
 80037e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80037e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80037e6:	f04f 3bff 	mov.w	fp, #4294967295
 80037ea:	2200      	movs	r2, #0
 80037ec:	2312      	movs	r3, #18
 80037ee:	f8cd b020 	str.w	fp, [sp, #32]
 80037f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80037f4:	e7db      	b.n	80037ae <_dtoa_r+0x256>
 80037f6:	2301      	movs	r3, #1
 80037f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037fa:	e7f4      	b.n	80037e6 <_dtoa_r+0x28e>
 80037fc:	f04f 0b01 	mov.w	fp, #1
 8003800:	465b      	mov	r3, fp
 8003802:	f8cd b020 	str.w	fp, [sp, #32]
 8003806:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800380a:	e7d0      	b.n	80037ae <_dtoa_r+0x256>
 800380c:	3101      	adds	r1, #1
 800380e:	0052      	lsls	r2, r2, #1
 8003810:	e7d1      	b.n	80037b6 <_dtoa_r+0x25e>
 8003812:	bf00      	nop
 8003814:	f3af 8000 	nop.w
 8003818:	636f4361 	.word	0x636f4361
 800381c:	3fd287a7 	.word	0x3fd287a7
 8003820:	8b60c8b3 	.word	0x8b60c8b3
 8003824:	3fc68a28 	.word	0x3fc68a28
 8003828:	509f79fb 	.word	0x509f79fb
 800382c:	3fd34413 	.word	0x3fd34413
 8003830:	08006b64 	.word	0x08006b64
 8003834:	08006b7b 	.word	0x08006b7b
 8003838:	7ff00000 	.word	0x7ff00000
 800383c:	08006b60 	.word	0x08006b60
 8003840:	08006b2f 	.word	0x08006b2f
 8003844:	08006b2e 	.word	0x08006b2e
 8003848:	3ff80000 	.word	0x3ff80000
 800384c:	08006d28 	.word	0x08006d28
 8003850:	08006bd3 	.word	0x08006bd3
 8003854:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003858:	6018      	str	r0, [r3, #0]
 800385a:	9b08      	ldr	r3, [sp, #32]
 800385c:	2b0e      	cmp	r3, #14
 800385e:	f200 80a1 	bhi.w	80039a4 <_dtoa_r+0x44c>
 8003862:	2c00      	cmp	r4, #0
 8003864:	f000 809e 	beq.w	80039a4 <_dtoa_r+0x44c>
 8003868:	2f00      	cmp	r7, #0
 800386a:	dd33      	ble.n	80038d4 <_dtoa_r+0x37c>
 800386c:	4b9c      	ldr	r3, [pc, #624]	@ (8003ae0 <_dtoa_r+0x588>)
 800386e:	f007 020f 	and.w	r2, r7, #15
 8003872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003876:	05f8      	lsls	r0, r7, #23
 8003878:	e9d3 3400 	ldrd	r3, r4, [r3]
 800387c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003880:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003884:	d516      	bpl.n	80038b4 <_dtoa_r+0x35c>
 8003886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800388a:	4b96      	ldr	r3, [pc, #600]	@ (8003ae4 <_dtoa_r+0x58c>)
 800388c:	2603      	movs	r6, #3
 800388e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003892:	f7fc ff4b 	bl	800072c <__aeabi_ddiv>
 8003896:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800389a:	f004 040f 	and.w	r4, r4, #15
 800389e:	4d91      	ldr	r5, [pc, #580]	@ (8003ae4 <_dtoa_r+0x58c>)
 80038a0:	b954      	cbnz	r4, 80038b8 <_dtoa_r+0x360>
 80038a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80038a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038aa:	f7fc ff3f 	bl	800072c <__aeabi_ddiv>
 80038ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80038b2:	e028      	b.n	8003906 <_dtoa_r+0x3ae>
 80038b4:	2602      	movs	r6, #2
 80038b6:	e7f2      	b.n	800389e <_dtoa_r+0x346>
 80038b8:	07e1      	lsls	r1, r4, #31
 80038ba:	d508      	bpl.n	80038ce <_dtoa_r+0x376>
 80038bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80038c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80038c4:	f7fc fe08 	bl	80004d8 <__aeabi_dmul>
 80038c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80038cc:	3601      	adds	r6, #1
 80038ce:	1064      	asrs	r4, r4, #1
 80038d0:	3508      	adds	r5, #8
 80038d2:	e7e5      	b.n	80038a0 <_dtoa_r+0x348>
 80038d4:	f000 80af 	beq.w	8003a36 <_dtoa_r+0x4de>
 80038d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80038dc:	427c      	negs	r4, r7
 80038de:	4b80      	ldr	r3, [pc, #512]	@ (8003ae0 <_dtoa_r+0x588>)
 80038e0:	f004 020f 	and.w	r2, r4, #15
 80038e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fc fdf4 	bl	80004d8 <__aeabi_dmul>
 80038f0:	2602      	movs	r6, #2
 80038f2:	2300      	movs	r3, #0
 80038f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80038f8:	4d7a      	ldr	r5, [pc, #488]	@ (8003ae4 <_dtoa_r+0x58c>)
 80038fa:	1124      	asrs	r4, r4, #4
 80038fc:	2c00      	cmp	r4, #0
 80038fe:	f040 808f 	bne.w	8003a20 <_dtoa_r+0x4c8>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1d3      	bne.n	80038ae <_dtoa_r+0x356>
 8003906:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800390a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8094 	beq.w	8003a3a <_dtoa_r+0x4e2>
 8003912:	2200      	movs	r2, #0
 8003914:	4620      	mov	r0, r4
 8003916:	4629      	mov	r1, r5
 8003918:	4b73      	ldr	r3, [pc, #460]	@ (8003ae8 <_dtoa_r+0x590>)
 800391a:	f7fd f84f 	bl	80009bc <__aeabi_dcmplt>
 800391e:	2800      	cmp	r0, #0
 8003920:	f000 808b 	beq.w	8003a3a <_dtoa_r+0x4e2>
 8003924:	9b08      	ldr	r3, [sp, #32]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8087 	beq.w	8003a3a <_dtoa_r+0x4e2>
 800392c:	f1bb 0f00 	cmp.w	fp, #0
 8003930:	dd34      	ble.n	800399c <_dtoa_r+0x444>
 8003932:	4620      	mov	r0, r4
 8003934:	2200      	movs	r2, #0
 8003936:	4629      	mov	r1, r5
 8003938:	4b6c      	ldr	r3, [pc, #432]	@ (8003aec <_dtoa_r+0x594>)
 800393a:	f7fc fdcd 	bl	80004d8 <__aeabi_dmul>
 800393e:	465c      	mov	r4, fp
 8003940:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003944:	f107 38ff 	add.w	r8, r7, #4294967295
 8003948:	3601      	adds	r6, #1
 800394a:	4630      	mov	r0, r6
 800394c:	f7fc fd5a 	bl	8000404 <__aeabi_i2d>
 8003950:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003954:	f7fc fdc0 	bl	80004d8 <__aeabi_dmul>
 8003958:	2200      	movs	r2, #0
 800395a:	4b65      	ldr	r3, [pc, #404]	@ (8003af0 <_dtoa_r+0x598>)
 800395c:	f7fc fc06 	bl	800016c <__adddf3>
 8003960:	4605      	mov	r5, r0
 8003962:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003966:	2c00      	cmp	r4, #0
 8003968:	d16a      	bne.n	8003a40 <_dtoa_r+0x4e8>
 800396a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800396e:	2200      	movs	r2, #0
 8003970:	4b60      	ldr	r3, [pc, #384]	@ (8003af4 <_dtoa_r+0x59c>)
 8003972:	f7fc fbf9 	bl	8000168 <__aeabi_dsub>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800397e:	462a      	mov	r2, r5
 8003980:	4633      	mov	r3, r6
 8003982:	f7fd f839 	bl	80009f8 <__aeabi_dcmpgt>
 8003986:	2800      	cmp	r0, #0
 8003988:	f040 8298 	bne.w	8003ebc <_dtoa_r+0x964>
 800398c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003990:	462a      	mov	r2, r5
 8003992:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003996:	f7fd f811 	bl	80009bc <__aeabi_dcmplt>
 800399a:	bb38      	cbnz	r0, 80039ec <_dtoa_r+0x494>
 800399c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80039a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80039a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f2c0 8157 	blt.w	8003c5a <_dtoa_r+0x702>
 80039ac:	2f0e      	cmp	r7, #14
 80039ae:	f300 8154 	bgt.w	8003c5a <_dtoa_r+0x702>
 80039b2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae0 <_dtoa_r+0x588>)
 80039b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80039b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80039c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f280 80e5 	bge.w	8003b92 <_dtoa_r+0x63a>
 80039c8:	9b08      	ldr	r3, [sp, #32]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f300 80e1 	bgt.w	8003b92 <_dtoa_r+0x63a>
 80039d0:	d10c      	bne.n	80039ec <_dtoa_r+0x494>
 80039d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039d6:	2200      	movs	r2, #0
 80039d8:	4b46      	ldr	r3, [pc, #280]	@ (8003af4 <_dtoa_r+0x59c>)
 80039da:	f7fc fd7d 	bl	80004d8 <__aeabi_dmul>
 80039de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039e2:	f7fc ffff 	bl	80009e4 <__aeabi_dcmpge>
 80039e6:	2800      	cmp	r0, #0
 80039e8:	f000 8266 	beq.w	8003eb8 <_dtoa_r+0x960>
 80039ec:	2400      	movs	r4, #0
 80039ee:	4625      	mov	r5, r4
 80039f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80039f2:	4656      	mov	r6, sl
 80039f4:	ea6f 0803 	mvn.w	r8, r3
 80039f8:	2700      	movs	r7, #0
 80039fa:	4621      	mov	r1, r4
 80039fc:	4648      	mov	r0, r9
 80039fe:	f000 fcbd 	bl	800437c <_Bfree>
 8003a02:	2d00      	cmp	r5, #0
 8003a04:	f000 80bd 	beq.w	8003b82 <_dtoa_r+0x62a>
 8003a08:	b12f      	cbz	r7, 8003a16 <_dtoa_r+0x4be>
 8003a0a:	42af      	cmp	r7, r5
 8003a0c:	d003      	beq.n	8003a16 <_dtoa_r+0x4be>
 8003a0e:	4639      	mov	r1, r7
 8003a10:	4648      	mov	r0, r9
 8003a12:	f000 fcb3 	bl	800437c <_Bfree>
 8003a16:	4629      	mov	r1, r5
 8003a18:	4648      	mov	r0, r9
 8003a1a:	f000 fcaf 	bl	800437c <_Bfree>
 8003a1e:	e0b0      	b.n	8003b82 <_dtoa_r+0x62a>
 8003a20:	07e2      	lsls	r2, r4, #31
 8003a22:	d505      	bpl.n	8003a30 <_dtoa_r+0x4d8>
 8003a24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003a28:	f7fc fd56 	bl	80004d8 <__aeabi_dmul>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	3601      	adds	r6, #1
 8003a30:	1064      	asrs	r4, r4, #1
 8003a32:	3508      	adds	r5, #8
 8003a34:	e762      	b.n	80038fc <_dtoa_r+0x3a4>
 8003a36:	2602      	movs	r6, #2
 8003a38:	e765      	b.n	8003906 <_dtoa_r+0x3ae>
 8003a3a:	46b8      	mov	r8, r7
 8003a3c:	9c08      	ldr	r4, [sp, #32]
 8003a3e:	e784      	b.n	800394a <_dtoa_r+0x3f2>
 8003a40:	4b27      	ldr	r3, [pc, #156]	@ (8003ae0 <_dtoa_r+0x588>)
 8003a42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003a44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003a48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003a4c:	4454      	add	r4, sl
 8003a4e:	2900      	cmp	r1, #0
 8003a50:	d054      	beq.n	8003afc <_dtoa_r+0x5a4>
 8003a52:	2000      	movs	r0, #0
 8003a54:	4928      	ldr	r1, [pc, #160]	@ (8003af8 <_dtoa_r+0x5a0>)
 8003a56:	f7fc fe69 	bl	800072c <__aeabi_ddiv>
 8003a5a:	4633      	mov	r3, r6
 8003a5c:	462a      	mov	r2, r5
 8003a5e:	f7fc fb83 	bl	8000168 <__aeabi_dsub>
 8003a62:	4656      	mov	r6, sl
 8003a64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a6c:	f7fc ffe4 	bl	8000a38 <__aeabi_d2iz>
 8003a70:	4605      	mov	r5, r0
 8003a72:	f7fc fcc7 	bl	8000404 <__aeabi_i2d>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a7e:	f7fc fb73 	bl	8000168 <__aeabi_dsub>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	3530      	adds	r5, #48	@ 0x30
 8003a88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003a90:	f806 5b01 	strb.w	r5, [r6], #1
 8003a94:	f7fc ff92 	bl	80009bc <__aeabi_dcmplt>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d172      	bne.n	8003b82 <_dtoa_r+0x62a>
 8003a9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	4911      	ldr	r1, [pc, #68]	@ (8003ae8 <_dtoa_r+0x590>)
 8003aa4:	f7fc fb60 	bl	8000168 <__aeabi_dsub>
 8003aa8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003aac:	f7fc ff86 	bl	80009bc <__aeabi_dcmplt>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	f040 80b4 	bne.w	8003c1e <_dtoa_r+0x6c6>
 8003ab6:	42a6      	cmp	r6, r4
 8003ab8:	f43f af70 	beq.w	800399c <_dtoa_r+0x444>
 8003abc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <_dtoa_r+0x594>)
 8003ac4:	f7fc fd08 	bl	80004d8 <__aeabi_dmul>
 8003ac8:	2200      	movs	r2, #0
 8003aca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003ace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <_dtoa_r+0x594>)
 8003ad4:	f7fc fd00 	bl	80004d8 <__aeabi_dmul>
 8003ad8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003adc:	e7c4      	b.n	8003a68 <_dtoa_r+0x510>
 8003ade:	bf00      	nop
 8003ae0:	08006d28 	.word	0x08006d28
 8003ae4:	08006d00 	.word	0x08006d00
 8003ae8:	3ff00000 	.word	0x3ff00000
 8003aec:	40240000 	.word	0x40240000
 8003af0:	401c0000 	.word	0x401c0000
 8003af4:	40140000 	.word	0x40140000
 8003af8:	3fe00000 	.word	0x3fe00000
 8003afc:	4631      	mov	r1, r6
 8003afe:	4628      	mov	r0, r5
 8003b00:	f7fc fcea 	bl	80004d8 <__aeabi_dmul>
 8003b04:	4656      	mov	r6, sl
 8003b06:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003b0a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b10:	f7fc ff92 	bl	8000a38 <__aeabi_d2iz>
 8003b14:	4605      	mov	r5, r0
 8003b16:	f7fc fc75 	bl	8000404 <__aeabi_i2d>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b22:	f7fc fb21 	bl	8000168 <__aeabi_dsub>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	3530      	adds	r5, #48	@ 0x30
 8003b2c:	f806 5b01 	strb.w	r5, [r6], #1
 8003b30:	42a6      	cmp	r6, r4
 8003b32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	d124      	bne.n	8003b86 <_dtoa_r+0x62e>
 8003b3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003b40:	4bae      	ldr	r3, [pc, #696]	@ (8003dfc <_dtoa_r+0x8a4>)
 8003b42:	f7fc fb13 	bl	800016c <__adddf3>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b4e:	f7fc ff53 	bl	80009f8 <__aeabi_dcmpgt>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d163      	bne.n	8003c1e <_dtoa_r+0x6c6>
 8003b56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	49a7      	ldr	r1, [pc, #668]	@ (8003dfc <_dtoa_r+0x8a4>)
 8003b5e:	f7fc fb03 	bl	8000168 <__aeabi_dsub>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b6a:	f7fc ff27 	bl	80009bc <__aeabi_dcmplt>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	f43f af14 	beq.w	800399c <_dtoa_r+0x444>
 8003b74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003b76:	1e73      	subs	r3, r6, #1
 8003b78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003b7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003b7e:	2b30      	cmp	r3, #48	@ 0x30
 8003b80:	d0f8      	beq.n	8003b74 <_dtoa_r+0x61c>
 8003b82:	4647      	mov	r7, r8
 8003b84:	e03b      	b.n	8003bfe <_dtoa_r+0x6a6>
 8003b86:	4b9e      	ldr	r3, [pc, #632]	@ (8003e00 <_dtoa_r+0x8a8>)
 8003b88:	f7fc fca6 	bl	80004d8 <__aeabi_dmul>
 8003b8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b90:	e7bc      	b.n	8003b0c <_dtoa_r+0x5b4>
 8003b92:	4656      	mov	r6, sl
 8003b94:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	f7fc fdc4 	bl	800072c <__aeabi_ddiv>
 8003ba4:	f7fc ff48 	bl	8000a38 <__aeabi_d2iz>
 8003ba8:	4680      	mov	r8, r0
 8003baa:	f7fc fc2b 	bl	8000404 <__aeabi_i2d>
 8003bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bb2:	f7fc fc91 	bl	80004d8 <__aeabi_dmul>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4620      	mov	r0, r4
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	f7fc fad3 	bl	8000168 <__aeabi_dsub>
 8003bc2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003bc6:	9d08      	ldr	r5, [sp, #32]
 8003bc8:	f806 4b01 	strb.w	r4, [r6], #1
 8003bcc:	eba6 040a 	sub.w	r4, r6, sl
 8003bd0:	42a5      	cmp	r5, r4
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	d133      	bne.n	8003c40 <_dtoa_r+0x6e8>
 8003bd8:	f7fc fac8 	bl	800016c <__adddf3>
 8003bdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003be0:	4604      	mov	r4, r0
 8003be2:	460d      	mov	r5, r1
 8003be4:	f7fc ff08 	bl	80009f8 <__aeabi_dcmpgt>
 8003be8:	b9c0      	cbnz	r0, 8003c1c <_dtoa_r+0x6c4>
 8003bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bee:	4620      	mov	r0, r4
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f7fc fed9 	bl	80009a8 <__aeabi_dcmpeq>
 8003bf6:	b110      	cbz	r0, 8003bfe <_dtoa_r+0x6a6>
 8003bf8:	f018 0f01 	tst.w	r8, #1
 8003bfc:	d10e      	bne.n	8003c1c <_dtoa_r+0x6c4>
 8003bfe:	4648      	mov	r0, r9
 8003c00:	9903      	ldr	r1, [sp, #12]
 8003c02:	f000 fbbb 	bl	800437c <_Bfree>
 8003c06:	2300      	movs	r3, #0
 8003c08:	7033      	strb	r3, [r6, #0]
 8003c0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003c0c:	3701      	adds	r7, #1
 8003c0e:	601f      	str	r7, [r3, #0]
 8003c10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 824b 	beq.w	80040ae <_dtoa_r+0xb56>
 8003c18:	601e      	str	r6, [r3, #0]
 8003c1a:	e248      	b.n	80040ae <_dtoa_r+0xb56>
 8003c1c:	46b8      	mov	r8, r7
 8003c1e:	4633      	mov	r3, r6
 8003c20:	461e      	mov	r6, r3
 8003c22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c26:	2a39      	cmp	r2, #57	@ 0x39
 8003c28:	d106      	bne.n	8003c38 <_dtoa_r+0x6e0>
 8003c2a:	459a      	cmp	sl, r3
 8003c2c:	d1f8      	bne.n	8003c20 <_dtoa_r+0x6c8>
 8003c2e:	2230      	movs	r2, #48	@ 0x30
 8003c30:	f108 0801 	add.w	r8, r8, #1
 8003c34:	f88a 2000 	strb.w	r2, [sl]
 8003c38:	781a      	ldrb	r2, [r3, #0]
 8003c3a:	3201      	adds	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e7a0      	b.n	8003b82 <_dtoa_r+0x62a>
 8003c40:	2200      	movs	r2, #0
 8003c42:	4b6f      	ldr	r3, [pc, #444]	@ (8003e00 <_dtoa_r+0x8a8>)
 8003c44:	f7fc fc48 	bl	80004d8 <__aeabi_dmul>
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	460d      	mov	r5, r1
 8003c50:	f7fc feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d09f      	beq.n	8003b98 <_dtoa_r+0x640>
 8003c58:	e7d1      	b.n	8003bfe <_dtoa_r+0x6a6>
 8003c5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003c5c:	2a00      	cmp	r2, #0
 8003c5e:	f000 80ea 	beq.w	8003e36 <_dtoa_r+0x8de>
 8003c62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003c64:	2a01      	cmp	r2, #1
 8003c66:	f300 80cd 	bgt.w	8003e04 <_dtoa_r+0x8ac>
 8003c6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003c6c:	2a00      	cmp	r2, #0
 8003c6e:	f000 80c1 	beq.w	8003df4 <_dtoa_r+0x89c>
 8003c72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003c76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003c78:	9e04      	ldr	r6, [sp, #16]
 8003c7a:	9a04      	ldr	r2, [sp, #16]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	441a      	add	r2, r3
 8003c80:	9204      	str	r2, [sp, #16]
 8003c82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c84:	4648      	mov	r0, r9
 8003c86:	441a      	add	r2, r3
 8003c88:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c8a:	f000 fc75 	bl	8004578 <__i2b>
 8003c8e:	4605      	mov	r5, r0
 8003c90:	b166      	cbz	r6, 8003cac <_dtoa_r+0x754>
 8003c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	dd09      	ble.n	8003cac <_dtoa_r+0x754>
 8003c98:	42b3      	cmp	r3, r6
 8003c9a:	bfa8      	it	ge
 8003c9c:	4633      	movge	r3, r6
 8003c9e:	9a04      	ldr	r2, [sp, #16]
 8003ca0:	1af6      	subs	r6, r6, r3
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	9204      	str	r2, [sp, #16]
 8003ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003cae:	b30b      	cbz	r3, 8003cf4 <_dtoa_r+0x79c>
 8003cb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80c6 	beq.w	8003e44 <_dtoa_r+0x8ec>
 8003cb8:	2c00      	cmp	r4, #0
 8003cba:	f000 80c0 	beq.w	8003e3e <_dtoa_r+0x8e6>
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	4648      	mov	r0, r9
 8003cc4:	f000 fd10 	bl	80046e8 <__pow5mult>
 8003cc8:	9a03      	ldr	r2, [sp, #12]
 8003cca:	4601      	mov	r1, r0
 8003ccc:	4605      	mov	r5, r0
 8003cce:	4648      	mov	r0, r9
 8003cd0:	f000 fc68 	bl	80045a4 <__multiply>
 8003cd4:	9903      	ldr	r1, [sp, #12]
 8003cd6:	4680      	mov	r8, r0
 8003cd8:	4648      	mov	r0, r9
 8003cda:	f000 fb4f 	bl	800437c <_Bfree>
 8003cde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ce0:	1b1b      	subs	r3, r3, r4
 8003ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ce4:	f000 80b1 	beq.w	8003e4a <_dtoa_r+0x8f2>
 8003ce8:	4641      	mov	r1, r8
 8003cea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003cec:	4648      	mov	r0, r9
 8003cee:	f000 fcfb 	bl	80046e8 <__pow5mult>
 8003cf2:	9003      	str	r0, [sp, #12]
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	4648      	mov	r0, r9
 8003cf8:	f000 fc3e 	bl	8004578 <__i2b>
 8003cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003cfe:	4604      	mov	r4, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 81d8 	beq.w	80040b6 <_dtoa_r+0xb5e>
 8003d06:	461a      	mov	r2, r3
 8003d08:	4601      	mov	r1, r0
 8003d0a:	4648      	mov	r0, r9
 8003d0c:	f000 fcec 	bl	80046e8 <__pow5mult>
 8003d10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d12:	4604      	mov	r4, r0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f300 809f 	bgt.w	8003e58 <_dtoa_r+0x900>
 8003d1a:	9b06      	ldr	r3, [sp, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 8097 	bne.w	8003e50 <_dtoa_r+0x8f8>
 8003d22:	9b07      	ldr	r3, [sp, #28]
 8003d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f040 8093 	bne.w	8003e54 <_dtoa_r+0x8fc>
 8003d2e:	9b07      	ldr	r3, [sp, #28]
 8003d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d34:	0d1b      	lsrs	r3, r3, #20
 8003d36:	051b      	lsls	r3, r3, #20
 8003d38:	b133      	cbz	r3, 8003d48 <_dtoa_r+0x7f0>
 8003d3a:	9b04      	ldr	r3, [sp, #16]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	9304      	str	r3, [sp, #16]
 8003d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d42:	3301      	adds	r3, #1
 8003d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d46:	2301      	movs	r3, #1
 8003d48:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 81b8 	beq.w	80040c2 <_dtoa_r+0xb6a>
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d58:	6918      	ldr	r0, [r3, #16]
 8003d5a:	f000 fbc1 	bl	80044e0 <__hi0bits>
 8003d5e:	f1c0 0020 	rsb	r0, r0, #32
 8003d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d64:	4418      	add	r0, r3
 8003d66:	f010 001f 	ands.w	r0, r0, #31
 8003d6a:	f000 8082 	beq.w	8003e72 <_dtoa_r+0x91a>
 8003d6e:	f1c0 0320 	rsb	r3, r0, #32
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	dd73      	ble.n	8003e5e <_dtoa_r+0x906>
 8003d76:	9b04      	ldr	r3, [sp, #16]
 8003d78:	f1c0 001c 	rsb	r0, r0, #28
 8003d7c:	4403      	add	r3, r0
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d82:	4406      	add	r6, r0
 8003d84:	4403      	add	r3, r0
 8003d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d88:	9b04      	ldr	r3, [sp, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	dd05      	ble.n	8003d9a <_dtoa_r+0x842>
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4648      	mov	r0, r9
 8003d92:	9903      	ldr	r1, [sp, #12]
 8003d94:	f000 fd02 	bl	800479c <__lshift>
 8003d98:	9003      	str	r0, [sp, #12]
 8003d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	dd05      	ble.n	8003dac <_dtoa_r+0x854>
 8003da0:	4621      	mov	r1, r4
 8003da2:	461a      	mov	r2, r3
 8003da4:	4648      	mov	r0, r9
 8003da6:	f000 fcf9 	bl	800479c <__lshift>
 8003daa:	4604      	mov	r4, r0
 8003dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d061      	beq.n	8003e76 <_dtoa_r+0x91e>
 8003db2:	4621      	mov	r1, r4
 8003db4:	9803      	ldr	r0, [sp, #12]
 8003db6:	f000 fd5d 	bl	8004874 <__mcmp>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	da5b      	bge.n	8003e76 <_dtoa_r+0x91e>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	220a      	movs	r2, #10
 8003dc2:	4648      	mov	r0, r9
 8003dc4:	9903      	ldr	r1, [sp, #12]
 8003dc6:	f000 fafb 	bl	80043c0 <__multadd>
 8003dca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003dcc:	f107 38ff 	add.w	r8, r7, #4294967295
 8003dd0:	9003      	str	r0, [sp, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8177 	beq.w	80040c6 <_dtoa_r+0xb6e>
 8003dd8:	4629      	mov	r1, r5
 8003dda:	2300      	movs	r3, #0
 8003ddc:	220a      	movs	r2, #10
 8003dde:	4648      	mov	r0, r9
 8003de0:	f000 faee 	bl	80043c0 <__multadd>
 8003de4:	f1bb 0f00 	cmp.w	fp, #0
 8003de8:	4605      	mov	r5, r0
 8003dea:	dc6f      	bgt.n	8003ecc <_dtoa_r+0x974>
 8003dec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	dc49      	bgt.n	8003e86 <_dtoa_r+0x92e>
 8003df2:	e06b      	b.n	8003ecc <_dtoa_r+0x974>
 8003df4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003df6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003dfa:	e73c      	b.n	8003c76 <_dtoa_r+0x71e>
 8003dfc:	3fe00000 	.word	0x3fe00000
 8003e00:	40240000 	.word	0x40240000
 8003e04:	9b08      	ldr	r3, [sp, #32]
 8003e06:	1e5c      	subs	r4, r3, #1
 8003e08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e0a:	42a3      	cmp	r3, r4
 8003e0c:	db09      	blt.n	8003e22 <_dtoa_r+0x8ca>
 8003e0e:	1b1c      	subs	r4, r3, r4
 8003e10:	9b08      	ldr	r3, [sp, #32]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f6bf af30 	bge.w	8003c78 <_dtoa_r+0x720>
 8003e18:	9b04      	ldr	r3, [sp, #16]
 8003e1a:	9a08      	ldr	r2, [sp, #32]
 8003e1c:	1a9e      	subs	r6, r3, r2
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e72b      	b.n	8003c7a <_dtoa_r+0x722>
 8003e22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e26:	1ae3      	subs	r3, r4, r3
 8003e28:	441a      	add	r2, r3
 8003e2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e2c:	9e04      	ldr	r6, [sp, #16]
 8003e2e:	2400      	movs	r4, #0
 8003e30:	9b08      	ldr	r3, [sp, #32]
 8003e32:	920e      	str	r2, [sp, #56]	@ 0x38
 8003e34:	e721      	b.n	8003c7a <_dtoa_r+0x722>
 8003e36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003e38:	9e04      	ldr	r6, [sp, #16]
 8003e3a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003e3c:	e728      	b.n	8003c90 <_dtoa_r+0x738>
 8003e3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003e42:	e751      	b.n	8003ce8 <_dtoa_r+0x790>
 8003e44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e46:	9903      	ldr	r1, [sp, #12]
 8003e48:	e750      	b.n	8003cec <_dtoa_r+0x794>
 8003e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e4e:	e751      	b.n	8003cf4 <_dtoa_r+0x79c>
 8003e50:	2300      	movs	r3, #0
 8003e52:	e779      	b.n	8003d48 <_dtoa_r+0x7f0>
 8003e54:	9b06      	ldr	r3, [sp, #24]
 8003e56:	e777      	b.n	8003d48 <_dtoa_r+0x7f0>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e5c:	e779      	b.n	8003d52 <_dtoa_r+0x7fa>
 8003e5e:	d093      	beq.n	8003d88 <_dtoa_r+0x830>
 8003e60:	9a04      	ldr	r2, [sp, #16]
 8003e62:	331c      	adds	r3, #28
 8003e64:	441a      	add	r2, r3
 8003e66:	9204      	str	r2, [sp, #16]
 8003e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e6a:	441e      	add	r6, r3
 8003e6c:	441a      	add	r2, r3
 8003e6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e70:	e78a      	b.n	8003d88 <_dtoa_r+0x830>
 8003e72:	4603      	mov	r3, r0
 8003e74:	e7f4      	b.n	8003e60 <_dtoa_r+0x908>
 8003e76:	9b08      	ldr	r3, [sp, #32]
 8003e78:	46b8      	mov	r8, r7
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	dc20      	bgt.n	8003ec0 <_dtoa_r+0x968>
 8003e7e:	469b      	mov	fp, r3
 8003e80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	dd1e      	ble.n	8003ec4 <_dtoa_r+0x96c>
 8003e86:	f1bb 0f00 	cmp.w	fp, #0
 8003e8a:	f47f adb1 	bne.w	80039f0 <_dtoa_r+0x498>
 8003e8e:	4621      	mov	r1, r4
 8003e90:	465b      	mov	r3, fp
 8003e92:	2205      	movs	r2, #5
 8003e94:	4648      	mov	r0, r9
 8003e96:	f000 fa93 	bl	80043c0 <__multadd>
 8003e9a:	4601      	mov	r1, r0
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	9803      	ldr	r0, [sp, #12]
 8003ea0:	f000 fce8 	bl	8004874 <__mcmp>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	f77f ada3 	ble.w	80039f0 <_dtoa_r+0x498>
 8003eaa:	4656      	mov	r6, sl
 8003eac:	2331      	movs	r3, #49	@ 0x31
 8003eae:	f108 0801 	add.w	r8, r8, #1
 8003eb2:	f806 3b01 	strb.w	r3, [r6], #1
 8003eb6:	e59f      	b.n	80039f8 <_dtoa_r+0x4a0>
 8003eb8:	46b8      	mov	r8, r7
 8003eba:	9c08      	ldr	r4, [sp, #32]
 8003ebc:	4625      	mov	r5, r4
 8003ebe:	e7f4      	b.n	8003eaa <_dtoa_r+0x952>
 8003ec0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003ec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8101 	beq.w	80040ce <_dtoa_r+0xb76>
 8003ecc:	2e00      	cmp	r6, #0
 8003ece:	dd05      	ble.n	8003edc <_dtoa_r+0x984>
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	4648      	mov	r0, r9
 8003ed6:	f000 fc61 	bl	800479c <__lshift>
 8003eda:	4605      	mov	r5, r0
 8003edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d05c      	beq.n	8003f9c <_dtoa_r+0xa44>
 8003ee2:	4648      	mov	r0, r9
 8003ee4:	6869      	ldr	r1, [r5, #4]
 8003ee6:	f000 fa09 	bl	80042fc <_Balloc>
 8003eea:	4606      	mov	r6, r0
 8003eec:	b928      	cbnz	r0, 8003efa <_dtoa_r+0x9a2>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003ef4:	4b80      	ldr	r3, [pc, #512]	@ (80040f8 <_dtoa_r+0xba0>)
 8003ef6:	f7ff bb43 	b.w	8003580 <_dtoa_r+0x28>
 8003efa:	692a      	ldr	r2, [r5, #16]
 8003efc:	f105 010c 	add.w	r1, r5, #12
 8003f00:	3202      	adds	r2, #2
 8003f02:	0092      	lsls	r2, r2, #2
 8003f04:	300c      	adds	r0, #12
 8003f06:	f001 ff51 	bl	8005dac <memcpy>
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	4648      	mov	r0, r9
 8003f10:	f000 fc44 	bl	800479c <__lshift>
 8003f14:	462f      	mov	r7, r5
 8003f16:	4605      	mov	r5, r0
 8003f18:	f10a 0301 	add.w	r3, sl, #1
 8003f1c:	9304      	str	r3, [sp, #16]
 8003f1e:	eb0a 030b 	add.w	r3, sl, fp
 8003f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f24:	9b06      	ldr	r3, [sp, #24]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f2c:	9b04      	ldr	r3, [sp, #16]
 8003f2e:	4621      	mov	r1, r4
 8003f30:	9803      	ldr	r0, [sp, #12]
 8003f32:	f103 3bff 	add.w	fp, r3, #4294967295
 8003f36:	f7ff fa87 	bl	8003448 <quorem>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4639      	mov	r1, r7
 8003f3e:	3330      	adds	r3, #48	@ 0x30
 8003f40:	9006      	str	r0, [sp, #24]
 8003f42:	9803      	ldr	r0, [sp, #12]
 8003f44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f46:	f000 fc95 	bl	8004874 <__mcmp>
 8003f4a:	462a      	mov	r2, r5
 8003f4c:	9008      	str	r0, [sp, #32]
 8003f4e:	4621      	mov	r1, r4
 8003f50:	4648      	mov	r0, r9
 8003f52:	f000 fcab 	bl	80048ac <__mdiff>
 8003f56:	68c2      	ldr	r2, [r0, #12]
 8003f58:	4606      	mov	r6, r0
 8003f5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f5c:	bb02      	cbnz	r2, 8003fa0 <_dtoa_r+0xa48>
 8003f5e:	4601      	mov	r1, r0
 8003f60:	9803      	ldr	r0, [sp, #12]
 8003f62:	f000 fc87 	bl	8004874 <__mcmp>
 8003f66:	4602      	mov	r2, r0
 8003f68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4648      	mov	r0, r9
 8003f6e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8003f72:	f000 fa03 	bl	800437c <_Bfree>
 8003f76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003f7a:	9e04      	ldr	r6, [sp, #16]
 8003f7c:	ea42 0103 	orr.w	r1, r2, r3
 8003f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f82:	4319      	orrs	r1, r3
 8003f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f86:	d10d      	bne.n	8003fa4 <_dtoa_r+0xa4c>
 8003f88:	2b39      	cmp	r3, #57	@ 0x39
 8003f8a:	d027      	beq.n	8003fdc <_dtoa_r+0xa84>
 8003f8c:	9a08      	ldr	r2, [sp, #32]
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	dd01      	ble.n	8003f96 <_dtoa_r+0xa3e>
 8003f92:	9b06      	ldr	r3, [sp, #24]
 8003f94:	3331      	adds	r3, #49	@ 0x31
 8003f96:	f88b 3000 	strb.w	r3, [fp]
 8003f9a:	e52e      	b.n	80039fa <_dtoa_r+0x4a2>
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	e7b9      	b.n	8003f14 <_dtoa_r+0x9bc>
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	e7e2      	b.n	8003f6a <_dtoa_r+0xa12>
 8003fa4:	9908      	ldr	r1, [sp, #32]
 8003fa6:	2900      	cmp	r1, #0
 8003fa8:	db04      	blt.n	8003fb4 <_dtoa_r+0xa5c>
 8003faa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8003fac:	4301      	orrs	r1, r0
 8003fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003fb0:	4301      	orrs	r1, r0
 8003fb2:	d120      	bne.n	8003ff6 <_dtoa_r+0xa9e>
 8003fb4:	2a00      	cmp	r2, #0
 8003fb6:	ddee      	ble.n	8003f96 <_dtoa_r+0xa3e>
 8003fb8:	2201      	movs	r2, #1
 8003fba:	9903      	ldr	r1, [sp, #12]
 8003fbc:	4648      	mov	r0, r9
 8003fbe:	9304      	str	r3, [sp, #16]
 8003fc0:	f000 fbec 	bl	800479c <__lshift>
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	9003      	str	r0, [sp, #12]
 8003fc8:	f000 fc54 	bl	8004874 <__mcmp>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	9b04      	ldr	r3, [sp, #16]
 8003fd0:	dc02      	bgt.n	8003fd8 <_dtoa_r+0xa80>
 8003fd2:	d1e0      	bne.n	8003f96 <_dtoa_r+0xa3e>
 8003fd4:	07da      	lsls	r2, r3, #31
 8003fd6:	d5de      	bpl.n	8003f96 <_dtoa_r+0xa3e>
 8003fd8:	2b39      	cmp	r3, #57	@ 0x39
 8003fda:	d1da      	bne.n	8003f92 <_dtoa_r+0xa3a>
 8003fdc:	2339      	movs	r3, #57	@ 0x39
 8003fde:	f88b 3000 	strb.w	r3, [fp]
 8003fe2:	4633      	mov	r3, r6
 8003fe4:	461e      	mov	r6, r3
 8003fe6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	2a39      	cmp	r2, #57	@ 0x39
 8003fee:	d04e      	beq.n	800408e <_dtoa_r+0xb36>
 8003ff0:	3201      	adds	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	e501      	b.n	80039fa <_dtoa_r+0x4a2>
 8003ff6:	2a00      	cmp	r2, #0
 8003ff8:	dd03      	ble.n	8004002 <_dtoa_r+0xaaa>
 8003ffa:	2b39      	cmp	r3, #57	@ 0x39
 8003ffc:	d0ee      	beq.n	8003fdc <_dtoa_r+0xa84>
 8003ffe:	3301      	adds	r3, #1
 8004000:	e7c9      	b.n	8003f96 <_dtoa_r+0xa3e>
 8004002:	9a04      	ldr	r2, [sp, #16]
 8004004:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004006:	f802 3c01 	strb.w	r3, [r2, #-1]
 800400a:	428a      	cmp	r2, r1
 800400c:	d028      	beq.n	8004060 <_dtoa_r+0xb08>
 800400e:	2300      	movs	r3, #0
 8004010:	220a      	movs	r2, #10
 8004012:	9903      	ldr	r1, [sp, #12]
 8004014:	4648      	mov	r0, r9
 8004016:	f000 f9d3 	bl	80043c0 <__multadd>
 800401a:	42af      	cmp	r7, r5
 800401c:	9003      	str	r0, [sp, #12]
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	f04f 020a 	mov.w	r2, #10
 8004026:	4639      	mov	r1, r7
 8004028:	4648      	mov	r0, r9
 800402a:	d107      	bne.n	800403c <_dtoa_r+0xae4>
 800402c:	f000 f9c8 	bl	80043c0 <__multadd>
 8004030:	4607      	mov	r7, r0
 8004032:	4605      	mov	r5, r0
 8004034:	9b04      	ldr	r3, [sp, #16]
 8004036:	3301      	adds	r3, #1
 8004038:	9304      	str	r3, [sp, #16]
 800403a:	e777      	b.n	8003f2c <_dtoa_r+0x9d4>
 800403c:	f000 f9c0 	bl	80043c0 <__multadd>
 8004040:	4629      	mov	r1, r5
 8004042:	4607      	mov	r7, r0
 8004044:	2300      	movs	r3, #0
 8004046:	220a      	movs	r2, #10
 8004048:	4648      	mov	r0, r9
 800404a:	f000 f9b9 	bl	80043c0 <__multadd>
 800404e:	4605      	mov	r5, r0
 8004050:	e7f0      	b.n	8004034 <_dtoa_r+0xadc>
 8004052:	f1bb 0f00 	cmp.w	fp, #0
 8004056:	bfcc      	ite	gt
 8004058:	465e      	movgt	r6, fp
 800405a:	2601      	movle	r6, #1
 800405c:	2700      	movs	r7, #0
 800405e:	4456      	add	r6, sl
 8004060:	2201      	movs	r2, #1
 8004062:	9903      	ldr	r1, [sp, #12]
 8004064:	4648      	mov	r0, r9
 8004066:	9304      	str	r3, [sp, #16]
 8004068:	f000 fb98 	bl	800479c <__lshift>
 800406c:	4621      	mov	r1, r4
 800406e:	9003      	str	r0, [sp, #12]
 8004070:	f000 fc00 	bl	8004874 <__mcmp>
 8004074:	2800      	cmp	r0, #0
 8004076:	dcb4      	bgt.n	8003fe2 <_dtoa_r+0xa8a>
 8004078:	d102      	bne.n	8004080 <_dtoa_r+0xb28>
 800407a:	9b04      	ldr	r3, [sp, #16]
 800407c:	07db      	lsls	r3, r3, #31
 800407e:	d4b0      	bmi.n	8003fe2 <_dtoa_r+0xa8a>
 8004080:	4633      	mov	r3, r6
 8004082:	461e      	mov	r6, r3
 8004084:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004088:	2a30      	cmp	r2, #48	@ 0x30
 800408a:	d0fa      	beq.n	8004082 <_dtoa_r+0xb2a>
 800408c:	e4b5      	b.n	80039fa <_dtoa_r+0x4a2>
 800408e:	459a      	cmp	sl, r3
 8004090:	d1a8      	bne.n	8003fe4 <_dtoa_r+0xa8c>
 8004092:	2331      	movs	r3, #49	@ 0x31
 8004094:	f108 0801 	add.w	r8, r8, #1
 8004098:	f88a 3000 	strb.w	r3, [sl]
 800409c:	e4ad      	b.n	80039fa <_dtoa_r+0x4a2>
 800409e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80040fc <_dtoa_r+0xba4>
 80040a4:	b11b      	cbz	r3, 80040ae <_dtoa_r+0xb56>
 80040a6:	f10a 0308 	add.w	r3, sl, #8
 80040aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4650      	mov	r0, sl
 80040b0:	b017      	add	sp, #92	@ 0x5c
 80040b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f77f ae2e 	ble.w	8003d1a <_dtoa_r+0x7c2>
 80040be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80040c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80040c2:	2001      	movs	r0, #1
 80040c4:	e64d      	b.n	8003d62 <_dtoa_r+0x80a>
 80040c6:	f1bb 0f00 	cmp.w	fp, #0
 80040ca:	f77f aed9 	ble.w	8003e80 <_dtoa_r+0x928>
 80040ce:	4656      	mov	r6, sl
 80040d0:	4621      	mov	r1, r4
 80040d2:	9803      	ldr	r0, [sp, #12]
 80040d4:	f7ff f9b8 	bl	8003448 <quorem>
 80040d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80040dc:	f806 3b01 	strb.w	r3, [r6], #1
 80040e0:	eba6 020a 	sub.w	r2, r6, sl
 80040e4:	4593      	cmp	fp, r2
 80040e6:	ddb4      	ble.n	8004052 <_dtoa_r+0xafa>
 80040e8:	2300      	movs	r3, #0
 80040ea:	220a      	movs	r2, #10
 80040ec:	4648      	mov	r0, r9
 80040ee:	9903      	ldr	r1, [sp, #12]
 80040f0:	f000 f966 	bl	80043c0 <__multadd>
 80040f4:	9003      	str	r0, [sp, #12]
 80040f6:	e7eb      	b.n	80040d0 <_dtoa_r+0xb78>
 80040f8:	08006bd3 	.word	0x08006bd3
 80040fc:	08006b57 	.word	0x08006b57

08004100 <_free_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	2900      	cmp	r1, #0
 8004106:	d040      	beq.n	800418a <_free_r+0x8a>
 8004108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800410c:	1f0c      	subs	r4, r1, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	18e4      	addlt	r4, r4, r3
 8004114:	f000 f8e6 	bl	80042e4 <__malloc_lock>
 8004118:	4a1c      	ldr	r2, [pc, #112]	@ (800418c <_free_r+0x8c>)
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	b933      	cbnz	r3, 800412c <_free_r+0x2c>
 800411e:	6063      	str	r3, [r4, #4]
 8004120:	6014      	str	r4, [r2, #0]
 8004122:	4628      	mov	r0, r5
 8004124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004128:	f000 b8e2 	b.w	80042f0 <__malloc_unlock>
 800412c:	42a3      	cmp	r3, r4
 800412e:	d908      	bls.n	8004142 <_free_r+0x42>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	1821      	adds	r1, r4, r0
 8004134:	428b      	cmp	r3, r1
 8004136:	bf01      	itttt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	1809      	addeq	r1, r1, r0
 800413e:	6021      	streq	r1, [r4, #0]
 8004140:	e7ed      	b.n	800411e <_free_r+0x1e>
 8004142:	461a      	mov	r2, r3
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b10b      	cbz	r3, 800414c <_free_r+0x4c>
 8004148:	42a3      	cmp	r3, r4
 800414a:	d9fa      	bls.n	8004142 <_free_r+0x42>
 800414c:	6811      	ldr	r1, [r2, #0]
 800414e:	1850      	adds	r0, r2, r1
 8004150:	42a0      	cmp	r0, r4
 8004152:	d10b      	bne.n	800416c <_free_r+0x6c>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	4401      	add	r1, r0
 8004158:	1850      	adds	r0, r2, r1
 800415a:	4283      	cmp	r3, r0
 800415c:	6011      	str	r1, [r2, #0]
 800415e:	d1e0      	bne.n	8004122 <_free_r+0x22>
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4408      	add	r0, r1
 8004166:	6010      	str	r0, [r2, #0]
 8004168:	6053      	str	r3, [r2, #4]
 800416a:	e7da      	b.n	8004122 <_free_r+0x22>
 800416c:	d902      	bls.n	8004174 <_free_r+0x74>
 800416e:	230c      	movs	r3, #12
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	e7d6      	b.n	8004122 <_free_r+0x22>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	1821      	adds	r1, r4, r0
 8004178:	428b      	cmp	r3, r1
 800417a:	bf01      	itttt	eq
 800417c:	6819      	ldreq	r1, [r3, #0]
 800417e:	685b      	ldreq	r3, [r3, #4]
 8004180:	1809      	addeq	r1, r1, r0
 8004182:	6021      	streq	r1, [r4, #0]
 8004184:	6063      	str	r3, [r4, #4]
 8004186:	6054      	str	r4, [r2, #4]
 8004188:	e7cb      	b.n	8004122 <_free_r+0x22>
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	2000038c 	.word	0x2000038c

08004190 <malloc>:
 8004190:	4b02      	ldr	r3, [pc, #8]	@ (800419c <malloc+0xc>)
 8004192:	4601      	mov	r1, r0
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	f000 b825 	b.w	80041e4 <_malloc_r>
 800419a:	bf00      	nop
 800419c:	20000018 	.word	0x20000018

080041a0 <sbrk_aligned>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4e0f      	ldr	r6, [pc, #60]	@ (80041e0 <sbrk_aligned+0x40>)
 80041a4:	460c      	mov	r4, r1
 80041a6:	6831      	ldr	r1, [r6, #0]
 80041a8:	4605      	mov	r5, r0
 80041aa:	b911      	cbnz	r1, 80041b2 <sbrk_aligned+0x12>
 80041ac:	f001 fdee 	bl	8005d8c <_sbrk_r>
 80041b0:	6030      	str	r0, [r6, #0]
 80041b2:	4621      	mov	r1, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	f001 fde9 	bl	8005d8c <_sbrk_r>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d103      	bne.n	80041c6 <sbrk_aligned+0x26>
 80041be:	f04f 34ff 	mov.w	r4, #4294967295
 80041c2:	4620      	mov	r0, r4
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
 80041c6:	1cc4      	adds	r4, r0, #3
 80041c8:	f024 0403 	bic.w	r4, r4, #3
 80041cc:	42a0      	cmp	r0, r4
 80041ce:	d0f8      	beq.n	80041c2 <sbrk_aligned+0x22>
 80041d0:	1a21      	subs	r1, r4, r0
 80041d2:	4628      	mov	r0, r5
 80041d4:	f001 fdda 	bl	8005d8c <_sbrk_r>
 80041d8:	3001      	adds	r0, #1
 80041da:	d1f2      	bne.n	80041c2 <sbrk_aligned+0x22>
 80041dc:	e7ef      	b.n	80041be <sbrk_aligned+0x1e>
 80041de:	bf00      	nop
 80041e0:	20000388 	.word	0x20000388

080041e4 <_malloc_r>:
 80041e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041e8:	1ccd      	adds	r5, r1, #3
 80041ea:	f025 0503 	bic.w	r5, r5, #3
 80041ee:	3508      	adds	r5, #8
 80041f0:	2d0c      	cmp	r5, #12
 80041f2:	bf38      	it	cc
 80041f4:	250c      	movcc	r5, #12
 80041f6:	2d00      	cmp	r5, #0
 80041f8:	4606      	mov	r6, r0
 80041fa:	db01      	blt.n	8004200 <_malloc_r+0x1c>
 80041fc:	42a9      	cmp	r1, r5
 80041fe:	d904      	bls.n	800420a <_malloc_r+0x26>
 8004200:	230c      	movs	r3, #12
 8004202:	6033      	str	r3, [r6, #0]
 8004204:	2000      	movs	r0, #0
 8004206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800420a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042e0 <_malloc_r+0xfc>
 800420e:	f000 f869 	bl	80042e4 <__malloc_lock>
 8004212:	f8d8 3000 	ldr.w	r3, [r8]
 8004216:	461c      	mov	r4, r3
 8004218:	bb44      	cbnz	r4, 800426c <_malloc_r+0x88>
 800421a:	4629      	mov	r1, r5
 800421c:	4630      	mov	r0, r6
 800421e:	f7ff ffbf 	bl	80041a0 <sbrk_aligned>
 8004222:	1c43      	adds	r3, r0, #1
 8004224:	4604      	mov	r4, r0
 8004226:	d158      	bne.n	80042da <_malloc_r+0xf6>
 8004228:	f8d8 4000 	ldr.w	r4, [r8]
 800422c:	4627      	mov	r7, r4
 800422e:	2f00      	cmp	r7, #0
 8004230:	d143      	bne.n	80042ba <_malloc_r+0xd6>
 8004232:	2c00      	cmp	r4, #0
 8004234:	d04b      	beq.n	80042ce <_malloc_r+0xea>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	4639      	mov	r1, r7
 800423a:	4630      	mov	r0, r6
 800423c:	eb04 0903 	add.w	r9, r4, r3
 8004240:	f001 fda4 	bl	8005d8c <_sbrk_r>
 8004244:	4581      	cmp	r9, r0
 8004246:	d142      	bne.n	80042ce <_malloc_r+0xea>
 8004248:	6821      	ldr	r1, [r4, #0]
 800424a:	4630      	mov	r0, r6
 800424c:	1a6d      	subs	r5, r5, r1
 800424e:	4629      	mov	r1, r5
 8004250:	f7ff ffa6 	bl	80041a0 <sbrk_aligned>
 8004254:	3001      	adds	r0, #1
 8004256:	d03a      	beq.n	80042ce <_malloc_r+0xea>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	442b      	add	r3, r5
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	f8d8 3000 	ldr.w	r3, [r8]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	bb62      	cbnz	r2, 80042c0 <_malloc_r+0xdc>
 8004266:	f8c8 7000 	str.w	r7, [r8]
 800426a:	e00f      	b.n	800428c <_malloc_r+0xa8>
 800426c:	6822      	ldr	r2, [r4, #0]
 800426e:	1b52      	subs	r2, r2, r5
 8004270:	d420      	bmi.n	80042b4 <_malloc_r+0xd0>
 8004272:	2a0b      	cmp	r2, #11
 8004274:	d917      	bls.n	80042a6 <_malloc_r+0xc2>
 8004276:	1961      	adds	r1, r4, r5
 8004278:	42a3      	cmp	r3, r4
 800427a:	6025      	str	r5, [r4, #0]
 800427c:	bf18      	it	ne
 800427e:	6059      	strne	r1, [r3, #4]
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	bf08      	it	eq
 8004284:	f8c8 1000 	streq.w	r1, [r8]
 8004288:	5162      	str	r2, [r4, r5]
 800428a:	604b      	str	r3, [r1, #4]
 800428c:	4630      	mov	r0, r6
 800428e:	f000 f82f 	bl	80042f0 <__malloc_unlock>
 8004292:	f104 000b 	add.w	r0, r4, #11
 8004296:	1d23      	adds	r3, r4, #4
 8004298:	f020 0007 	bic.w	r0, r0, #7
 800429c:	1ac2      	subs	r2, r0, r3
 800429e:	bf1c      	itt	ne
 80042a0:	1a1b      	subne	r3, r3, r0
 80042a2:	50a3      	strne	r3, [r4, r2]
 80042a4:	e7af      	b.n	8004206 <_malloc_r+0x22>
 80042a6:	6862      	ldr	r2, [r4, #4]
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	bf0c      	ite	eq
 80042ac:	f8c8 2000 	streq.w	r2, [r8]
 80042b0:	605a      	strne	r2, [r3, #4]
 80042b2:	e7eb      	b.n	800428c <_malloc_r+0xa8>
 80042b4:	4623      	mov	r3, r4
 80042b6:	6864      	ldr	r4, [r4, #4]
 80042b8:	e7ae      	b.n	8004218 <_malloc_r+0x34>
 80042ba:	463c      	mov	r4, r7
 80042bc:	687f      	ldr	r7, [r7, #4]
 80042be:	e7b6      	b.n	800422e <_malloc_r+0x4a>
 80042c0:	461a      	mov	r2, r3
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	d1fb      	bne.n	80042c0 <_malloc_r+0xdc>
 80042c8:	2300      	movs	r3, #0
 80042ca:	6053      	str	r3, [r2, #4]
 80042cc:	e7de      	b.n	800428c <_malloc_r+0xa8>
 80042ce:	230c      	movs	r3, #12
 80042d0:	4630      	mov	r0, r6
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	f000 f80c 	bl	80042f0 <__malloc_unlock>
 80042d8:	e794      	b.n	8004204 <_malloc_r+0x20>
 80042da:	6005      	str	r5, [r0, #0]
 80042dc:	e7d6      	b.n	800428c <_malloc_r+0xa8>
 80042de:	bf00      	nop
 80042e0:	2000038c 	.word	0x2000038c

080042e4 <__malloc_lock>:
 80042e4:	4801      	ldr	r0, [pc, #4]	@ (80042ec <__malloc_lock+0x8>)
 80042e6:	f7ff b89a 	b.w	800341e <__retarget_lock_acquire_recursive>
 80042ea:	bf00      	nop
 80042ec:	20000384 	.word	0x20000384

080042f0 <__malloc_unlock>:
 80042f0:	4801      	ldr	r0, [pc, #4]	@ (80042f8 <__malloc_unlock+0x8>)
 80042f2:	f7ff b895 	b.w	8003420 <__retarget_lock_release_recursive>
 80042f6:	bf00      	nop
 80042f8:	20000384 	.word	0x20000384

080042fc <_Balloc>:
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	69c6      	ldr	r6, [r0, #28]
 8004300:	4604      	mov	r4, r0
 8004302:	460d      	mov	r5, r1
 8004304:	b976      	cbnz	r6, 8004324 <_Balloc+0x28>
 8004306:	2010      	movs	r0, #16
 8004308:	f7ff ff42 	bl	8004190 <malloc>
 800430c:	4602      	mov	r2, r0
 800430e:	61e0      	str	r0, [r4, #28]
 8004310:	b920      	cbnz	r0, 800431c <_Balloc+0x20>
 8004312:	216b      	movs	r1, #107	@ 0x6b
 8004314:	4b17      	ldr	r3, [pc, #92]	@ (8004374 <_Balloc+0x78>)
 8004316:	4818      	ldr	r0, [pc, #96]	@ (8004378 <_Balloc+0x7c>)
 8004318:	f001 fd5c 	bl	8005dd4 <__assert_func>
 800431c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004320:	6006      	str	r6, [r0, #0]
 8004322:	60c6      	str	r6, [r0, #12]
 8004324:	69e6      	ldr	r6, [r4, #28]
 8004326:	68f3      	ldr	r3, [r6, #12]
 8004328:	b183      	cbz	r3, 800434c <_Balloc+0x50>
 800432a:	69e3      	ldr	r3, [r4, #28]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004332:	b9b8      	cbnz	r0, 8004364 <_Balloc+0x68>
 8004334:	2101      	movs	r1, #1
 8004336:	fa01 f605 	lsl.w	r6, r1, r5
 800433a:	1d72      	adds	r2, r6, #5
 800433c:	4620      	mov	r0, r4
 800433e:	0092      	lsls	r2, r2, #2
 8004340:	f001 fd66 	bl	8005e10 <_calloc_r>
 8004344:	b160      	cbz	r0, 8004360 <_Balloc+0x64>
 8004346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800434a:	e00e      	b.n	800436a <_Balloc+0x6e>
 800434c:	2221      	movs	r2, #33	@ 0x21
 800434e:	2104      	movs	r1, #4
 8004350:	4620      	mov	r0, r4
 8004352:	f001 fd5d 	bl	8005e10 <_calloc_r>
 8004356:	69e3      	ldr	r3, [r4, #28]
 8004358:	60f0      	str	r0, [r6, #12]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e4      	bne.n	800432a <_Balloc+0x2e>
 8004360:	2000      	movs	r0, #0
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	6802      	ldr	r2, [r0, #0]
 8004366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800436a:	2300      	movs	r3, #0
 800436c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004370:	e7f7      	b.n	8004362 <_Balloc+0x66>
 8004372:	bf00      	nop
 8004374:	08006b64 	.word	0x08006b64
 8004378:	08006be4 	.word	0x08006be4

0800437c <_Bfree>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	69c6      	ldr	r6, [r0, #28]
 8004380:	4605      	mov	r5, r0
 8004382:	460c      	mov	r4, r1
 8004384:	b976      	cbnz	r6, 80043a4 <_Bfree+0x28>
 8004386:	2010      	movs	r0, #16
 8004388:	f7ff ff02 	bl	8004190 <malloc>
 800438c:	4602      	mov	r2, r0
 800438e:	61e8      	str	r0, [r5, #28]
 8004390:	b920      	cbnz	r0, 800439c <_Bfree+0x20>
 8004392:	218f      	movs	r1, #143	@ 0x8f
 8004394:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <_Bfree+0x3c>)
 8004396:	4809      	ldr	r0, [pc, #36]	@ (80043bc <_Bfree+0x40>)
 8004398:	f001 fd1c 	bl	8005dd4 <__assert_func>
 800439c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80043a0:	6006      	str	r6, [r0, #0]
 80043a2:	60c6      	str	r6, [r0, #12]
 80043a4:	b13c      	cbz	r4, 80043b6 <_Bfree+0x3a>
 80043a6:	69eb      	ldr	r3, [r5, #28]
 80043a8:	6862      	ldr	r2, [r4, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043b0:	6021      	str	r1, [r4, #0]
 80043b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	08006b64 	.word	0x08006b64
 80043bc:	08006be4 	.word	0x08006be4

080043c0 <__multadd>:
 80043c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c4:	4607      	mov	r7, r0
 80043c6:	460c      	mov	r4, r1
 80043c8:	461e      	mov	r6, r3
 80043ca:	2000      	movs	r0, #0
 80043cc:	690d      	ldr	r5, [r1, #16]
 80043ce:	f101 0c14 	add.w	ip, r1, #20
 80043d2:	f8dc 3000 	ldr.w	r3, [ip]
 80043d6:	3001      	adds	r0, #1
 80043d8:	b299      	uxth	r1, r3
 80043da:	fb02 6101 	mla	r1, r2, r1, r6
 80043de:	0c1e      	lsrs	r6, r3, #16
 80043e0:	0c0b      	lsrs	r3, r1, #16
 80043e2:	fb02 3306 	mla	r3, r2, r6, r3
 80043e6:	b289      	uxth	r1, r1
 80043e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80043ec:	4285      	cmp	r5, r0
 80043ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80043f2:	f84c 1b04 	str.w	r1, [ip], #4
 80043f6:	dcec      	bgt.n	80043d2 <__multadd+0x12>
 80043f8:	b30e      	cbz	r6, 800443e <__multadd+0x7e>
 80043fa:	68a3      	ldr	r3, [r4, #8]
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	dc19      	bgt.n	8004434 <__multadd+0x74>
 8004400:	6861      	ldr	r1, [r4, #4]
 8004402:	4638      	mov	r0, r7
 8004404:	3101      	adds	r1, #1
 8004406:	f7ff ff79 	bl	80042fc <_Balloc>
 800440a:	4680      	mov	r8, r0
 800440c:	b928      	cbnz	r0, 800441a <__multadd+0x5a>
 800440e:	4602      	mov	r2, r0
 8004410:	21ba      	movs	r1, #186	@ 0xba
 8004412:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <__multadd+0x84>)
 8004414:	480c      	ldr	r0, [pc, #48]	@ (8004448 <__multadd+0x88>)
 8004416:	f001 fcdd 	bl	8005dd4 <__assert_func>
 800441a:	6922      	ldr	r2, [r4, #16]
 800441c:	f104 010c 	add.w	r1, r4, #12
 8004420:	3202      	adds	r2, #2
 8004422:	0092      	lsls	r2, r2, #2
 8004424:	300c      	adds	r0, #12
 8004426:	f001 fcc1 	bl	8005dac <memcpy>
 800442a:	4621      	mov	r1, r4
 800442c:	4638      	mov	r0, r7
 800442e:	f7ff ffa5 	bl	800437c <_Bfree>
 8004432:	4644      	mov	r4, r8
 8004434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004438:	3501      	adds	r5, #1
 800443a:	615e      	str	r6, [r3, #20]
 800443c:	6125      	str	r5, [r4, #16]
 800443e:	4620      	mov	r0, r4
 8004440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004444:	08006bd3 	.word	0x08006bd3
 8004448:	08006be4 	.word	0x08006be4

0800444c <__s2b>:
 800444c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004450:	4615      	mov	r5, r2
 8004452:	2209      	movs	r2, #9
 8004454:	461f      	mov	r7, r3
 8004456:	3308      	adds	r3, #8
 8004458:	460c      	mov	r4, r1
 800445a:	fb93 f3f2 	sdiv	r3, r3, r2
 800445e:	4606      	mov	r6, r0
 8004460:	2201      	movs	r2, #1
 8004462:	2100      	movs	r1, #0
 8004464:	429a      	cmp	r2, r3
 8004466:	db09      	blt.n	800447c <__s2b+0x30>
 8004468:	4630      	mov	r0, r6
 800446a:	f7ff ff47 	bl	80042fc <_Balloc>
 800446e:	b940      	cbnz	r0, 8004482 <__s2b+0x36>
 8004470:	4602      	mov	r2, r0
 8004472:	21d3      	movs	r1, #211	@ 0xd3
 8004474:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <__s2b+0x8c>)
 8004476:	4819      	ldr	r0, [pc, #100]	@ (80044dc <__s2b+0x90>)
 8004478:	f001 fcac 	bl	8005dd4 <__assert_func>
 800447c:	0052      	lsls	r2, r2, #1
 800447e:	3101      	adds	r1, #1
 8004480:	e7f0      	b.n	8004464 <__s2b+0x18>
 8004482:	9b08      	ldr	r3, [sp, #32]
 8004484:	2d09      	cmp	r5, #9
 8004486:	6143      	str	r3, [r0, #20]
 8004488:	f04f 0301 	mov.w	r3, #1
 800448c:	6103      	str	r3, [r0, #16]
 800448e:	dd16      	ble.n	80044be <__s2b+0x72>
 8004490:	f104 0909 	add.w	r9, r4, #9
 8004494:	46c8      	mov	r8, r9
 8004496:	442c      	add	r4, r5
 8004498:	f818 3b01 	ldrb.w	r3, [r8], #1
 800449c:	4601      	mov	r1, r0
 800449e:	220a      	movs	r2, #10
 80044a0:	4630      	mov	r0, r6
 80044a2:	3b30      	subs	r3, #48	@ 0x30
 80044a4:	f7ff ff8c 	bl	80043c0 <__multadd>
 80044a8:	45a0      	cmp	r8, r4
 80044aa:	d1f5      	bne.n	8004498 <__s2b+0x4c>
 80044ac:	f1a5 0408 	sub.w	r4, r5, #8
 80044b0:	444c      	add	r4, r9
 80044b2:	1b2d      	subs	r5, r5, r4
 80044b4:	1963      	adds	r3, r4, r5
 80044b6:	42bb      	cmp	r3, r7
 80044b8:	db04      	blt.n	80044c4 <__s2b+0x78>
 80044ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044be:	2509      	movs	r5, #9
 80044c0:	340a      	adds	r4, #10
 80044c2:	e7f6      	b.n	80044b2 <__s2b+0x66>
 80044c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80044c8:	4601      	mov	r1, r0
 80044ca:	220a      	movs	r2, #10
 80044cc:	4630      	mov	r0, r6
 80044ce:	3b30      	subs	r3, #48	@ 0x30
 80044d0:	f7ff ff76 	bl	80043c0 <__multadd>
 80044d4:	e7ee      	b.n	80044b4 <__s2b+0x68>
 80044d6:	bf00      	nop
 80044d8:	08006bd3 	.word	0x08006bd3
 80044dc:	08006be4 	.word	0x08006be4

080044e0 <__hi0bits>:
 80044e0:	4603      	mov	r3, r0
 80044e2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80044e6:	bf3a      	itte	cc
 80044e8:	0403      	lslcc	r3, r0, #16
 80044ea:	2010      	movcc	r0, #16
 80044ec:	2000      	movcs	r0, #0
 80044ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044f2:	bf3c      	itt	cc
 80044f4:	021b      	lslcc	r3, r3, #8
 80044f6:	3008      	addcc	r0, #8
 80044f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044fc:	bf3c      	itt	cc
 80044fe:	011b      	lslcc	r3, r3, #4
 8004500:	3004      	addcc	r0, #4
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004506:	bf3c      	itt	cc
 8004508:	009b      	lslcc	r3, r3, #2
 800450a:	3002      	addcc	r0, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	db05      	blt.n	800451c <__hi0bits+0x3c>
 8004510:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004514:	f100 0001 	add.w	r0, r0, #1
 8004518:	bf08      	it	eq
 800451a:	2020      	moveq	r0, #32
 800451c:	4770      	bx	lr

0800451e <__lo0bits>:
 800451e:	6803      	ldr	r3, [r0, #0]
 8004520:	4602      	mov	r2, r0
 8004522:	f013 0007 	ands.w	r0, r3, #7
 8004526:	d00b      	beq.n	8004540 <__lo0bits+0x22>
 8004528:	07d9      	lsls	r1, r3, #31
 800452a:	d421      	bmi.n	8004570 <__lo0bits+0x52>
 800452c:	0798      	lsls	r0, r3, #30
 800452e:	bf49      	itett	mi
 8004530:	085b      	lsrmi	r3, r3, #1
 8004532:	089b      	lsrpl	r3, r3, #2
 8004534:	2001      	movmi	r0, #1
 8004536:	6013      	strmi	r3, [r2, #0]
 8004538:	bf5c      	itt	pl
 800453a:	2002      	movpl	r0, #2
 800453c:	6013      	strpl	r3, [r2, #0]
 800453e:	4770      	bx	lr
 8004540:	b299      	uxth	r1, r3
 8004542:	b909      	cbnz	r1, 8004548 <__lo0bits+0x2a>
 8004544:	2010      	movs	r0, #16
 8004546:	0c1b      	lsrs	r3, r3, #16
 8004548:	b2d9      	uxtb	r1, r3
 800454a:	b909      	cbnz	r1, 8004550 <__lo0bits+0x32>
 800454c:	3008      	adds	r0, #8
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	0719      	lsls	r1, r3, #28
 8004552:	bf04      	itt	eq
 8004554:	091b      	lsreq	r3, r3, #4
 8004556:	3004      	addeq	r0, #4
 8004558:	0799      	lsls	r1, r3, #30
 800455a:	bf04      	itt	eq
 800455c:	089b      	lsreq	r3, r3, #2
 800455e:	3002      	addeq	r0, #2
 8004560:	07d9      	lsls	r1, r3, #31
 8004562:	d403      	bmi.n	800456c <__lo0bits+0x4e>
 8004564:	085b      	lsrs	r3, r3, #1
 8004566:	f100 0001 	add.w	r0, r0, #1
 800456a:	d003      	beq.n	8004574 <__lo0bits+0x56>
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4770      	bx	lr
 8004570:	2000      	movs	r0, #0
 8004572:	4770      	bx	lr
 8004574:	2020      	movs	r0, #32
 8004576:	4770      	bx	lr

08004578 <__i2b>:
 8004578:	b510      	push	{r4, lr}
 800457a:	460c      	mov	r4, r1
 800457c:	2101      	movs	r1, #1
 800457e:	f7ff febd 	bl	80042fc <_Balloc>
 8004582:	4602      	mov	r2, r0
 8004584:	b928      	cbnz	r0, 8004592 <__i2b+0x1a>
 8004586:	f240 1145 	movw	r1, #325	@ 0x145
 800458a:	4b04      	ldr	r3, [pc, #16]	@ (800459c <__i2b+0x24>)
 800458c:	4804      	ldr	r0, [pc, #16]	@ (80045a0 <__i2b+0x28>)
 800458e:	f001 fc21 	bl	8005dd4 <__assert_func>
 8004592:	2301      	movs	r3, #1
 8004594:	6144      	str	r4, [r0, #20]
 8004596:	6103      	str	r3, [r0, #16]
 8004598:	bd10      	pop	{r4, pc}
 800459a:	bf00      	nop
 800459c:	08006bd3 	.word	0x08006bd3
 80045a0:	08006be4 	.word	0x08006be4

080045a4 <__multiply>:
 80045a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a8:	4617      	mov	r7, r2
 80045aa:	690a      	ldr	r2, [r1, #16]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4689      	mov	r9, r1
 80045b0:	429a      	cmp	r2, r3
 80045b2:	bfa2      	ittt	ge
 80045b4:	463b      	movge	r3, r7
 80045b6:	460f      	movge	r7, r1
 80045b8:	4699      	movge	r9, r3
 80045ba:	693d      	ldr	r5, [r7, #16]
 80045bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	eb05 060a 	add.w	r6, r5, sl
 80045c8:	42b3      	cmp	r3, r6
 80045ca:	b085      	sub	sp, #20
 80045cc:	bfb8      	it	lt
 80045ce:	3101      	addlt	r1, #1
 80045d0:	f7ff fe94 	bl	80042fc <_Balloc>
 80045d4:	b930      	cbnz	r0, 80045e4 <__multiply+0x40>
 80045d6:	4602      	mov	r2, r0
 80045d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80045dc:	4b40      	ldr	r3, [pc, #256]	@ (80046e0 <__multiply+0x13c>)
 80045de:	4841      	ldr	r0, [pc, #260]	@ (80046e4 <__multiply+0x140>)
 80045e0:	f001 fbf8 	bl	8005dd4 <__assert_func>
 80045e4:	f100 0414 	add.w	r4, r0, #20
 80045e8:	4623      	mov	r3, r4
 80045ea:	2200      	movs	r2, #0
 80045ec:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80045f0:	4573      	cmp	r3, lr
 80045f2:	d320      	bcc.n	8004636 <__multiply+0x92>
 80045f4:	f107 0814 	add.w	r8, r7, #20
 80045f8:	f109 0114 	add.w	r1, r9, #20
 80045fc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004600:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004604:	9302      	str	r3, [sp, #8]
 8004606:	1beb      	subs	r3, r5, r7
 8004608:	3b15      	subs	r3, #21
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	3304      	adds	r3, #4
 8004610:	3715      	adds	r7, #21
 8004612:	42bd      	cmp	r5, r7
 8004614:	bf38      	it	cc
 8004616:	2304      	movcc	r3, #4
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	9b02      	ldr	r3, [sp, #8]
 800461c:	9103      	str	r1, [sp, #12]
 800461e:	428b      	cmp	r3, r1
 8004620:	d80c      	bhi.n	800463c <__multiply+0x98>
 8004622:	2e00      	cmp	r6, #0
 8004624:	dd03      	ble.n	800462e <__multiply+0x8a>
 8004626:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800462a:	2b00      	cmp	r3, #0
 800462c:	d055      	beq.n	80046da <__multiply+0x136>
 800462e:	6106      	str	r6, [r0, #16]
 8004630:	b005      	add	sp, #20
 8004632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004636:	f843 2b04 	str.w	r2, [r3], #4
 800463a:	e7d9      	b.n	80045f0 <__multiply+0x4c>
 800463c:	f8b1 a000 	ldrh.w	sl, [r1]
 8004640:	f1ba 0f00 	cmp.w	sl, #0
 8004644:	d01f      	beq.n	8004686 <__multiply+0xe2>
 8004646:	46c4      	mov	ip, r8
 8004648:	46a1      	mov	r9, r4
 800464a:	2700      	movs	r7, #0
 800464c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004650:	f8d9 3000 	ldr.w	r3, [r9]
 8004654:	fa1f fb82 	uxth.w	fp, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	fb0a 330b 	mla	r3, sl, fp, r3
 800465e:	443b      	add	r3, r7
 8004660:	f8d9 7000 	ldr.w	r7, [r9]
 8004664:	0c12      	lsrs	r2, r2, #16
 8004666:	0c3f      	lsrs	r7, r7, #16
 8004668:	fb0a 7202 	mla	r2, sl, r2, r7
 800466c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004670:	b29b      	uxth	r3, r3
 8004672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004676:	4565      	cmp	r5, ip
 8004678:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800467c:	f849 3b04 	str.w	r3, [r9], #4
 8004680:	d8e4      	bhi.n	800464c <__multiply+0xa8>
 8004682:	9b01      	ldr	r3, [sp, #4]
 8004684:	50e7      	str	r7, [r4, r3]
 8004686:	9b03      	ldr	r3, [sp, #12]
 8004688:	3104      	adds	r1, #4
 800468a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800468e:	f1b9 0f00 	cmp.w	r9, #0
 8004692:	d020      	beq.n	80046d6 <__multiply+0x132>
 8004694:	4647      	mov	r7, r8
 8004696:	46a4      	mov	ip, r4
 8004698:	f04f 0a00 	mov.w	sl, #0
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f8b7 b000 	ldrh.w	fp, [r7]
 80046a2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	fb09 220b 	mla	r2, r9, fp, r2
 80046ac:	4452      	add	r2, sl
 80046ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046b2:	f84c 3b04 	str.w	r3, [ip], #4
 80046b6:	f857 3b04 	ldr.w	r3, [r7], #4
 80046ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046be:	f8bc 3000 	ldrh.w	r3, [ip]
 80046c2:	42bd      	cmp	r5, r7
 80046c4:	fb09 330a 	mla	r3, r9, sl, r3
 80046c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80046cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046d0:	d8e5      	bhi.n	800469e <__multiply+0xfa>
 80046d2:	9a01      	ldr	r2, [sp, #4]
 80046d4:	50a3      	str	r3, [r4, r2]
 80046d6:	3404      	adds	r4, #4
 80046d8:	e79f      	b.n	800461a <__multiply+0x76>
 80046da:	3e01      	subs	r6, #1
 80046dc:	e7a1      	b.n	8004622 <__multiply+0x7e>
 80046de:	bf00      	nop
 80046e0:	08006bd3 	.word	0x08006bd3
 80046e4:	08006be4 	.word	0x08006be4

080046e8 <__pow5mult>:
 80046e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ec:	4615      	mov	r5, r2
 80046ee:	f012 0203 	ands.w	r2, r2, #3
 80046f2:	4607      	mov	r7, r0
 80046f4:	460e      	mov	r6, r1
 80046f6:	d007      	beq.n	8004708 <__pow5mult+0x20>
 80046f8:	4c25      	ldr	r4, [pc, #148]	@ (8004790 <__pow5mult+0xa8>)
 80046fa:	3a01      	subs	r2, #1
 80046fc:	2300      	movs	r3, #0
 80046fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004702:	f7ff fe5d 	bl	80043c0 <__multadd>
 8004706:	4606      	mov	r6, r0
 8004708:	10ad      	asrs	r5, r5, #2
 800470a:	d03d      	beq.n	8004788 <__pow5mult+0xa0>
 800470c:	69fc      	ldr	r4, [r7, #28]
 800470e:	b97c      	cbnz	r4, 8004730 <__pow5mult+0x48>
 8004710:	2010      	movs	r0, #16
 8004712:	f7ff fd3d 	bl	8004190 <malloc>
 8004716:	4602      	mov	r2, r0
 8004718:	61f8      	str	r0, [r7, #28]
 800471a:	b928      	cbnz	r0, 8004728 <__pow5mult+0x40>
 800471c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004720:	4b1c      	ldr	r3, [pc, #112]	@ (8004794 <__pow5mult+0xac>)
 8004722:	481d      	ldr	r0, [pc, #116]	@ (8004798 <__pow5mult+0xb0>)
 8004724:	f001 fb56 	bl	8005dd4 <__assert_func>
 8004728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800472c:	6004      	str	r4, [r0, #0]
 800472e:	60c4      	str	r4, [r0, #12]
 8004730:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004738:	b94c      	cbnz	r4, 800474e <__pow5mult+0x66>
 800473a:	f240 2171 	movw	r1, #625	@ 0x271
 800473e:	4638      	mov	r0, r7
 8004740:	f7ff ff1a 	bl	8004578 <__i2b>
 8004744:	2300      	movs	r3, #0
 8004746:	4604      	mov	r4, r0
 8004748:	f8c8 0008 	str.w	r0, [r8, #8]
 800474c:	6003      	str	r3, [r0, #0]
 800474e:	f04f 0900 	mov.w	r9, #0
 8004752:	07eb      	lsls	r3, r5, #31
 8004754:	d50a      	bpl.n	800476c <__pow5mult+0x84>
 8004756:	4631      	mov	r1, r6
 8004758:	4622      	mov	r2, r4
 800475a:	4638      	mov	r0, r7
 800475c:	f7ff ff22 	bl	80045a4 <__multiply>
 8004760:	4680      	mov	r8, r0
 8004762:	4631      	mov	r1, r6
 8004764:	4638      	mov	r0, r7
 8004766:	f7ff fe09 	bl	800437c <_Bfree>
 800476a:	4646      	mov	r6, r8
 800476c:	106d      	asrs	r5, r5, #1
 800476e:	d00b      	beq.n	8004788 <__pow5mult+0xa0>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	b938      	cbnz	r0, 8004784 <__pow5mult+0x9c>
 8004774:	4622      	mov	r2, r4
 8004776:	4621      	mov	r1, r4
 8004778:	4638      	mov	r0, r7
 800477a:	f7ff ff13 	bl	80045a4 <__multiply>
 800477e:	6020      	str	r0, [r4, #0]
 8004780:	f8c0 9000 	str.w	r9, [r0]
 8004784:	4604      	mov	r4, r0
 8004786:	e7e4      	b.n	8004752 <__pow5mult+0x6a>
 8004788:	4630      	mov	r0, r6
 800478a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800478e:	bf00      	nop
 8004790:	08006cf4 	.word	0x08006cf4
 8004794:	08006b64 	.word	0x08006b64
 8004798:	08006be4 	.word	0x08006be4

0800479c <__lshift>:
 800479c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a0:	460c      	mov	r4, r1
 80047a2:	4607      	mov	r7, r0
 80047a4:	4691      	mov	r9, r2
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	6849      	ldr	r1, [r1, #4]
 80047aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80047ae:	68a3      	ldr	r3, [r4, #8]
 80047b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80047b4:	f108 0601 	add.w	r6, r8, #1
 80047b8:	42b3      	cmp	r3, r6
 80047ba:	db0b      	blt.n	80047d4 <__lshift+0x38>
 80047bc:	4638      	mov	r0, r7
 80047be:	f7ff fd9d 	bl	80042fc <_Balloc>
 80047c2:	4605      	mov	r5, r0
 80047c4:	b948      	cbnz	r0, 80047da <__lshift+0x3e>
 80047c6:	4602      	mov	r2, r0
 80047c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80047cc:	4b27      	ldr	r3, [pc, #156]	@ (800486c <__lshift+0xd0>)
 80047ce:	4828      	ldr	r0, [pc, #160]	@ (8004870 <__lshift+0xd4>)
 80047d0:	f001 fb00 	bl	8005dd4 <__assert_func>
 80047d4:	3101      	adds	r1, #1
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	e7ee      	b.n	80047b8 <__lshift+0x1c>
 80047da:	2300      	movs	r3, #0
 80047dc:	f100 0114 	add.w	r1, r0, #20
 80047e0:	f100 0210 	add.w	r2, r0, #16
 80047e4:	4618      	mov	r0, r3
 80047e6:	4553      	cmp	r3, sl
 80047e8:	db33      	blt.n	8004852 <__lshift+0xb6>
 80047ea:	6920      	ldr	r0, [r4, #16]
 80047ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80047f0:	f104 0314 	add.w	r3, r4, #20
 80047f4:	f019 091f 	ands.w	r9, r9, #31
 80047f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80047fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004800:	d02b      	beq.n	800485a <__lshift+0xbe>
 8004802:	468a      	mov	sl, r1
 8004804:	2200      	movs	r2, #0
 8004806:	f1c9 0e20 	rsb	lr, r9, #32
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	fa00 f009 	lsl.w	r0, r0, r9
 8004810:	4310      	orrs	r0, r2
 8004812:	f84a 0b04 	str.w	r0, [sl], #4
 8004816:	f853 2b04 	ldr.w	r2, [r3], #4
 800481a:	459c      	cmp	ip, r3
 800481c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004820:	d8f3      	bhi.n	800480a <__lshift+0x6e>
 8004822:	ebac 0304 	sub.w	r3, ip, r4
 8004826:	3b15      	subs	r3, #21
 8004828:	f023 0303 	bic.w	r3, r3, #3
 800482c:	3304      	adds	r3, #4
 800482e:	f104 0015 	add.w	r0, r4, #21
 8004832:	4560      	cmp	r0, ip
 8004834:	bf88      	it	hi
 8004836:	2304      	movhi	r3, #4
 8004838:	50ca      	str	r2, [r1, r3]
 800483a:	b10a      	cbz	r2, 8004840 <__lshift+0xa4>
 800483c:	f108 0602 	add.w	r6, r8, #2
 8004840:	3e01      	subs	r6, #1
 8004842:	4638      	mov	r0, r7
 8004844:	4621      	mov	r1, r4
 8004846:	612e      	str	r6, [r5, #16]
 8004848:	f7ff fd98 	bl	800437c <_Bfree>
 800484c:	4628      	mov	r0, r5
 800484e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004852:	f842 0f04 	str.w	r0, [r2, #4]!
 8004856:	3301      	adds	r3, #1
 8004858:	e7c5      	b.n	80047e6 <__lshift+0x4a>
 800485a:	3904      	subs	r1, #4
 800485c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004860:	459c      	cmp	ip, r3
 8004862:	f841 2f04 	str.w	r2, [r1, #4]!
 8004866:	d8f9      	bhi.n	800485c <__lshift+0xc0>
 8004868:	e7ea      	b.n	8004840 <__lshift+0xa4>
 800486a:	bf00      	nop
 800486c:	08006bd3 	.word	0x08006bd3
 8004870:	08006be4 	.word	0x08006be4

08004874 <__mcmp>:
 8004874:	4603      	mov	r3, r0
 8004876:	690a      	ldr	r2, [r1, #16]
 8004878:	6900      	ldr	r0, [r0, #16]
 800487a:	b530      	push	{r4, r5, lr}
 800487c:	1a80      	subs	r0, r0, r2
 800487e:	d10e      	bne.n	800489e <__mcmp+0x2a>
 8004880:	3314      	adds	r3, #20
 8004882:	3114      	adds	r1, #20
 8004884:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004888:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800488c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004890:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004894:	4295      	cmp	r5, r2
 8004896:	d003      	beq.n	80048a0 <__mcmp+0x2c>
 8004898:	d205      	bcs.n	80048a6 <__mcmp+0x32>
 800489a:	f04f 30ff 	mov.w	r0, #4294967295
 800489e:	bd30      	pop	{r4, r5, pc}
 80048a0:	42a3      	cmp	r3, r4
 80048a2:	d3f3      	bcc.n	800488c <__mcmp+0x18>
 80048a4:	e7fb      	b.n	800489e <__mcmp+0x2a>
 80048a6:	2001      	movs	r0, #1
 80048a8:	e7f9      	b.n	800489e <__mcmp+0x2a>
	...

080048ac <__mdiff>:
 80048ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	4689      	mov	r9, r1
 80048b2:	4606      	mov	r6, r0
 80048b4:	4611      	mov	r1, r2
 80048b6:	4648      	mov	r0, r9
 80048b8:	4614      	mov	r4, r2
 80048ba:	f7ff ffdb 	bl	8004874 <__mcmp>
 80048be:	1e05      	subs	r5, r0, #0
 80048c0:	d112      	bne.n	80048e8 <__mdiff+0x3c>
 80048c2:	4629      	mov	r1, r5
 80048c4:	4630      	mov	r0, r6
 80048c6:	f7ff fd19 	bl	80042fc <_Balloc>
 80048ca:	4602      	mov	r2, r0
 80048cc:	b928      	cbnz	r0, 80048da <__mdiff+0x2e>
 80048ce:	f240 2137 	movw	r1, #567	@ 0x237
 80048d2:	4b3e      	ldr	r3, [pc, #248]	@ (80049cc <__mdiff+0x120>)
 80048d4:	483e      	ldr	r0, [pc, #248]	@ (80049d0 <__mdiff+0x124>)
 80048d6:	f001 fa7d 	bl	8005dd4 <__assert_func>
 80048da:	2301      	movs	r3, #1
 80048dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80048e0:	4610      	mov	r0, r2
 80048e2:	b003      	add	sp, #12
 80048e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e8:	bfbc      	itt	lt
 80048ea:	464b      	movlt	r3, r9
 80048ec:	46a1      	movlt	r9, r4
 80048ee:	4630      	mov	r0, r6
 80048f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80048f4:	bfba      	itte	lt
 80048f6:	461c      	movlt	r4, r3
 80048f8:	2501      	movlt	r5, #1
 80048fa:	2500      	movge	r5, #0
 80048fc:	f7ff fcfe 	bl	80042fc <_Balloc>
 8004900:	4602      	mov	r2, r0
 8004902:	b918      	cbnz	r0, 800490c <__mdiff+0x60>
 8004904:	f240 2145 	movw	r1, #581	@ 0x245
 8004908:	4b30      	ldr	r3, [pc, #192]	@ (80049cc <__mdiff+0x120>)
 800490a:	e7e3      	b.n	80048d4 <__mdiff+0x28>
 800490c:	f100 0b14 	add.w	fp, r0, #20
 8004910:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004914:	f109 0310 	add.w	r3, r9, #16
 8004918:	60c5      	str	r5, [r0, #12]
 800491a:	f04f 0c00 	mov.w	ip, #0
 800491e:	f109 0514 	add.w	r5, r9, #20
 8004922:	46d9      	mov	r9, fp
 8004924:	6926      	ldr	r6, [r4, #16]
 8004926:	f104 0e14 	add.w	lr, r4, #20
 800492a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800492e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	9b01      	ldr	r3, [sp, #4]
 8004936:	f85e 0b04 	ldr.w	r0, [lr], #4
 800493a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800493e:	b281      	uxth	r1, r0
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	fa1f f38a 	uxth.w	r3, sl
 8004946:	1a5b      	subs	r3, r3, r1
 8004948:	0c00      	lsrs	r0, r0, #16
 800494a:	4463      	add	r3, ip
 800494c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004950:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004954:	b29b      	uxth	r3, r3
 8004956:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800495a:	4576      	cmp	r6, lr
 800495c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004960:	f849 3b04 	str.w	r3, [r9], #4
 8004964:	d8e6      	bhi.n	8004934 <__mdiff+0x88>
 8004966:	1b33      	subs	r3, r6, r4
 8004968:	3b15      	subs	r3, #21
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	3415      	adds	r4, #21
 8004970:	3304      	adds	r3, #4
 8004972:	42a6      	cmp	r6, r4
 8004974:	bf38      	it	cc
 8004976:	2304      	movcc	r3, #4
 8004978:	441d      	add	r5, r3
 800497a:	445b      	add	r3, fp
 800497c:	461e      	mov	r6, r3
 800497e:	462c      	mov	r4, r5
 8004980:	4544      	cmp	r4, r8
 8004982:	d30e      	bcc.n	80049a2 <__mdiff+0xf6>
 8004984:	f108 0103 	add.w	r1, r8, #3
 8004988:	1b49      	subs	r1, r1, r5
 800498a:	f021 0103 	bic.w	r1, r1, #3
 800498e:	3d03      	subs	r5, #3
 8004990:	45a8      	cmp	r8, r5
 8004992:	bf38      	it	cc
 8004994:	2100      	movcc	r1, #0
 8004996:	440b      	add	r3, r1
 8004998:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800499c:	b199      	cbz	r1, 80049c6 <__mdiff+0x11a>
 800499e:	6117      	str	r7, [r2, #16]
 80049a0:	e79e      	b.n	80048e0 <__mdiff+0x34>
 80049a2:	46e6      	mov	lr, ip
 80049a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80049a8:	fa1f fc81 	uxth.w	ip, r1
 80049ac:	44f4      	add	ip, lr
 80049ae:	0c08      	lsrs	r0, r1, #16
 80049b0:	4471      	add	r1, lr
 80049b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80049b6:	b289      	uxth	r1, r1
 80049b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80049bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80049c0:	f846 1b04 	str.w	r1, [r6], #4
 80049c4:	e7dc      	b.n	8004980 <__mdiff+0xd4>
 80049c6:	3f01      	subs	r7, #1
 80049c8:	e7e6      	b.n	8004998 <__mdiff+0xec>
 80049ca:	bf00      	nop
 80049cc:	08006bd3 	.word	0x08006bd3
 80049d0:	08006be4 	.word	0x08006be4

080049d4 <__ulp>:
 80049d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <__ulp+0x3c>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	dc08      	bgt.n	80049f2 <__ulp+0x1e>
 80049e0:	425b      	negs	r3, r3
 80049e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80049e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80049ea:	da04      	bge.n	80049f6 <__ulp+0x22>
 80049ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80049f0:	4113      	asrs	r3, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	e008      	b.n	8004a08 <__ulp+0x34>
 80049f6:	f1a2 0314 	sub.w	r3, r2, #20
 80049fa:	2b1e      	cmp	r3, #30
 80049fc:	bfd6      	itet	le
 80049fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8004a02:	2201      	movgt	r2, #1
 8004a04:	40da      	lsrle	r2, r3
 8004a06:	2300      	movs	r3, #0
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	7ff00000 	.word	0x7ff00000

08004a14 <__b2d>:
 8004a14:	6902      	ldr	r2, [r0, #16]
 8004a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a18:	f100 0614 	add.w	r6, r0, #20
 8004a1c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004a20:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8004a24:	4f1e      	ldr	r7, [pc, #120]	@ (8004aa0 <__b2d+0x8c>)
 8004a26:	4620      	mov	r0, r4
 8004a28:	f7ff fd5a 	bl	80044e0 <__hi0bits>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f1c0 0020 	rsb	r0, r0, #32
 8004a32:	2b0a      	cmp	r3, #10
 8004a34:	f1a2 0504 	sub.w	r5, r2, #4
 8004a38:	6008      	str	r0, [r1, #0]
 8004a3a:	dc12      	bgt.n	8004a62 <__b2d+0x4e>
 8004a3c:	42ae      	cmp	r6, r5
 8004a3e:	bf2c      	ite	cs
 8004a40:	2200      	movcs	r2, #0
 8004a42:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004a46:	f1c3 0c0b 	rsb	ip, r3, #11
 8004a4a:	3315      	adds	r3, #21
 8004a4c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8004a50:	fa04 f303 	lsl.w	r3, r4, r3
 8004a54:	fa22 f20c 	lsr.w	r2, r2, ip
 8004a58:	ea4e 0107 	orr.w	r1, lr, r7
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a62:	42ae      	cmp	r6, r5
 8004a64:	bf36      	itet	cc
 8004a66:	f1a2 0508 	subcc.w	r5, r2, #8
 8004a6a:	2200      	movcs	r2, #0
 8004a6c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004a70:	3b0b      	subs	r3, #11
 8004a72:	d012      	beq.n	8004a9a <__b2d+0x86>
 8004a74:	f1c3 0720 	rsb	r7, r3, #32
 8004a78:	fa22 f107 	lsr.w	r1, r2, r7
 8004a7c:	409c      	lsls	r4, r3
 8004a7e:	430c      	orrs	r4, r1
 8004a80:	42b5      	cmp	r5, r6
 8004a82:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8004a86:	bf94      	ite	ls
 8004a88:	2400      	movls	r4, #0
 8004a8a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	40fc      	lsrs	r4, r7
 8004a92:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004a96:	4322      	orrs	r2, r4
 8004a98:	e7e1      	b.n	8004a5e <__b2d+0x4a>
 8004a9a:	ea44 0107 	orr.w	r1, r4, r7
 8004a9e:	e7de      	b.n	8004a5e <__b2d+0x4a>
 8004aa0:	3ff00000 	.word	0x3ff00000

08004aa4 <__d2b>:
 8004aa4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	4690      	mov	r8, r2
 8004aac:	4699      	mov	r9, r3
 8004aae:	9e08      	ldr	r6, [sp, #32]
 8004ab0:	f7ff fc24 	bl	80042fc <_Balloc>
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	b930      	cbnz	r0, 8004ac6 <__d2b+0x22>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	f240 310f 	movw	r1, #783	@ 0x30f
 8004abe:	4b23      	ldr	r3, [pc, #140]	@ (8004b4c <__d2b+0xa8>)
 8004ac0:	4823      	ldr	r0, [pc, #140]	@ (8004b50 <__d2b+0xac>)
 8004ac2:	f001 f987 	bl	8005dd4 <__assert_func>
 8004ac6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004aca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ace:	b10d      	cbz	r5, 8004ad4 <__d2b+0x30>
 8004ad0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	f1b8 0300 	subs.w	r3, r8, #0
 8004ada:	d024      	beq.n	8004b26 <__d2b+0x82>
 8004adc:	4668      	mov	r0, sp
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	f7ff fd1d 	bl	800451e <__lo0bits>
 8004ae4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004ae8:	b1d8      	cbz	r0, 8004b22 <__d2b+0x7e>
 8004aea:	f1c0 0320 	rsb	r3, r0, #32
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	430b      	orrs	r3, r1
 8004af4:	40c2      	lsrs	r2, r0
 8004af6:	6163      	str	r3, [r4, #20]
 8004af8:	9201      	str	r2, [sp, #4]
 8004afa:	9b01      	ldr	r3, [sp, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2201      	moveq	r2, #1
 8004b02:	2202      	movne	r2, #2
 8004b04:	61a3      	str	r3, [r4, #24]
 8004b06:	6122      	str	r2, [r4, #16]
 8004b08:	b1ad      	cbz	r5, 8004b36 <__d2b+0x92>
 8004b0a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004b0e:	4405      	add	r5, r0
 8004b10:	6035      	str	r5, [r6, #0]
 8004b12:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b18:	6018      	str	r0, [r3, #0]
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	b002      	add	sp, #8
 8004b1e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004b22:	6161      	str	r1, [r4, #20]
 8004b24:	e7e9      	b.n	8004afa <__d2b+0x56>
 8004b26:	a801      	add	r0, sp, #4
 8004b28:	f7ff fcf9 	bl	800451e <__lo0bits>
 8004b2c:	9b01      	ldr	r3, [sp, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	6163      	str	r3, [r4, #20]
 8004b32:	3020      	adds	r0, #32
 8004b34:	e7e7      	b.n	8004b06 <__d2b+0x62>
 8004b36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004b3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004b3e:	6030      	str	r0, [r6, #0]
 8004b40:	6918      	ldr	r0, [r3, #16]
 8004b42:	f7ff fccd 	bl	80044e0 <__hi0bits>
 8004b46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004b4a:	e7e4      	b.n	8004b16 <__d2b+0x72>
 8004b4c:	08006bd3 	.word	0x08006bd3
 8004b50:	08006be4 	.word	0x08006be4

08004b54 <__ratio>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	e9cd 1000 	strd	r1, r0, [sp]
 8004b5e:	a902      	add	r1, sp, #8
 8004b60:	f7ff ff58 	bl	8004a14 <__b2d>
 8004b64:	468b      	mov	fp, r1
 8004b66:	4606      	mov	r6, r0
 8004b68:	460f      	mov	r7, r1
 8004b6a:	9800      	ldr	r0, [sp, #0]
 8004b6c:	a903      	add	r1, sp, #12
 8004b6e:	f7ff ff51 	bl	8004a14 <__b2d>
 8004b72:	460d      	mov	r5, r1
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	4689      	mov	r9, r1
 8004b78:	6919      	ldr	r1, [r3, #16]
 8004b7a:	9b00      	ldr	r3, [sp, #0]
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	4630      	mov	r0, r6
 8004b82:	1ac9      	subs	r1, r1, r3
 8004b84:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bfcd      	iteet	gt
 8004b92:	463a      	movgt	r2, r7
 8004b94:	462a      	movle	r2, r5
 8004b96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004b9a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8004b9e:	bfd8      	it	le
 8004ba0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	4659      	mov	r1, fp
 8004baa:	f7fb fdbf 	bl	800072c <__aeabi_ddiv>
 8004bae:	b005      	add	sp, #20
 8004bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004bb4 <__copybits>:
 8004bb4:	3901      	subs	r1, #1
 8004bb6:	b570      	push	{r4, r5, r6, lr}
 8004bb8:	1149      	asrs	r1, r1, #5
 8004bba:	6914      	ldr	r4, [r2, #16]
 8004bbc:	3101      	adds	r1, #1
 8004bbe:	f102 0314 	add.w	r3, r2, #20
 8004bc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004bc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004bca:	1f05      	subs	r5, r0, #4
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	d30c      	bcc.n	8004bea <__copybits+0x36>
 8004bd0:	1aa3      	subs	r3, r4, r2
 8004bd2:	3b11      	subs	r3, #17
 8004bd4:	f023 0303 	bic.w	r3, r3, #3
 8004bd8:	3211      	adds	r2, #17
 8004bda:	42a2      	cmp	r2, r4
 8004bdc:	bf88      	it	hi
 8004bde:	2300      	movhi	r3, #0
 8004be0:	4418      	add	r0, r3
 8004be2:	2300      	movs	r3, #0
 8004be4:	4288      	cmp	r0, r1
 8004be6:	d305      	bcc.n	8004bf4 <__copybits+0x40>
 8004be8:	bd70      	pop	{r4, r5, r6, pc}
 8004bea:	f853 6b04 	ldr.w	r6, [r3], #4
 8004bee:	f845 6f04 	str.w	r6, [r5, #4]!
 8004bf2:	e7eb      	b.n	8004bcc <__copybits+0x18>
 8004bf4:	f840 3b04 	str.w	r3, [r0], #4
 8004bf8:	e7f4      	b.n	8004be4 <__copybits+0x30>

08004bfa <__any_on>:
 8004bfa:	f100 0214 	add.w	r2, r0, #20
 8004bfe:	6900      	ldr	r0, [r0, #16]
 8004c00:	114b      	asrs	r3, r1, #5
 8004c02:	4298      	cmp	r0, r3
 8004c04:	b510      	push	{r4, lr}
 8004c06:	db11      	blt.n	8004c2c <__any_on+0x32>
 8004c08:	dd0a      	ble.n	8004c20 <__any_on+0x26>
 8004c0a:	f011 011f 	ands.w	r1, r1, #31
 8004c0e:	d007      	beq.n	8004c20 <__any_on+0x26>
 8004c10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004c14:	fa24 f001 	lsr.w	r0, r4, r1
 8004c18:	fa00 f101 	lsl.w	r1, r0, r1
 8004c1c:	428c      	cmp	r4, r1
 8004c1e:	d10b      	bne.n	8004c38 <__any_on+0x3e>
 8004c20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d803      	bhi.n	8004c30 <__any_on+0x36>
 8004c28:	2000      	movs	r0, #0
 8004c2a:	bd10      	pop	{r4, pc}
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	e7f7      	b.n	8004c20 <__any_on+0x26>
 8004c30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d0f5      	beq.n	8004c24 <__any_on+0x2a>
 8004c38:	2001      	movs	r0, #1
 8004c3a:	e7f6      	b.n	8004c2a <__any_on+0x30>

08004c3c <sulp>:
 8004c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c40:	460f      	mov	r7, r1
 8004c42:	4690      	mov	r8, r2
 8004c44:	f7ff fec6 	bl	80049d4 <__ulp>
 8004c48:	4604      	mov	r4, r0
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	f1b8 0f00 	cmp.w	r8, #0
 8004c50:	d011      	beq.n	8004c76 <sulp+0x3a>
 8004c52:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004c56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	dd0b      	ble.n	8004c76 <sulp+0x3a>
 8004c5e:	2400      	movs	r4, #0
 8004c60:	051b      	lsls	r3, r3, #20
 8004c62:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004c66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	f7fb fc33 	bl	80004d8 <__aeabi_dmul>
 8004c72:	4604      	mov	r4, r0
 8004c74:	460d      	mov	r5, r1
 8004c76:	4620      	mov	r0, r4
 8004c78:	4629      	mov	r1, r5
 8004c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004c80 <_strtod_l>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	b09f      	sub	sp, #124	@ 0x7c
 8004c86:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004c88:	2200      	movs	r2, #0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8004c8e:	f04f 0a00 	mov.w	sl, #0
 8004c92:	f04f 0b00 	mov.w	fp, #0
 8004c96:	460a      	mov	r2, r1
 8004c98:	9005      	str	r0, [sp, #20]
 8004c9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8004c9c:	7811      	ldrb	r1, [r2, #0]
 8004c9e:	292b      	cmp	r1, #43	@ 0x2b
 8004ca0:	d048      	beq.n	8004d34 <_strtod_l+0xb4>
 8004ca2:	d836      	bhi.n	8004d12 <_strtod_l+0x92>
 8004ca4:	290d      	cmp	r1, #13
 8004ca6:	d830      	bhi.n	8004d0a <_strtod_l+0x8a>
 8004ca8:	2908      	cmp	r1, #8
 8004caa:	d830      	bhi.n	8004d0e <_strtod_l+0x8e>
 8004cac:	2900      	cmp	r1, #0
 8004cae:	d039      	beq.n	8004d24 <_strtod_l+0xa4>
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8004cb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004cb6:	782a      	ldrb	r2, [r5, #0]
 8004cb8:	2a30      	cmp	r2, #48	@ 0x30
 8004cba:	f040 80b0 	bne.w	8004e1e <_strtod_l+0x19e>
 8004cbe:	786a      	ldrb	r2, [r5, #1]
 8004cc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004cc4:	2a58      	cmp	r2, #88	@ 0x58
 8004cc6:	d16c      	bne.n	8004da2 <_strtod_l+0x122>
 8004cc8:	9302      	str	r3, [sp, #8]
 8004cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ccc:	4a8f      	ldr	r2, [pc, #572]	@ (8004f0c <_strtod_l+0x28c>)
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	ab1a      	add	r3, sp, #104	@ 0x68
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	9805      	ldr	r0, [sp, #20]
 8004cd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004cd8:	a919      	add	r1, sp, #100	@ 0x64
 8004cda:	f001 f915 	bl	8005f08 <__gethex>
 8004cde:	f010 060f 	ands.w	r6, r0, #15
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	d005      	beq.n	8004cf2 <_strtod_l+0x72>
 8004ce6:	2e06      	cmp	r6, #6
 8004ce8:	d126      	bne.n	8004d38 <_strtod_l+0xb8>
 8004cea:	2300      	movs	r3, #0
 8004cec:	3501      	adds	r5, #1
 8004cee:	9519      	str	r5, [sp, #100]	@ 0x64
 8004cf0:	930e      	str	r3, [sp, #56]	@ 0x38
 8004cf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f040 8582 	bne.w	80057fe <_strtod_l+0xb7e>
 8004cfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cfc:	b1bb      	cbz	r3, 8004d2e <_strtod_l+0xae>
 8004cfe:	4650      	mov	r0, sl
 8004d00:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8004d04:	b01f      	add	sp, #124	@ 0x7c
 8004d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0a:	2920      	cmp	r1, #32
 8004d0c:	d1d0      	bne.n	8004cb0 <_strtod_l+0x30>
 8004d0e:	3201      	adds	r2, #1
 8004d10:	e7c3      	b.n	8004c9a <_strtod_l+0x1a>
 8004d12:	292d      	cmp	r1, #45	@ 0x2d
 8004d14:	d1cc      	bne.n	8004cb0 <_strtod_l+0x30>
 8004d16:	2101      	movs	r1, #1
 8004d18:	910e      	str	r1, [sp, #56]	@ 0x38
 8004d1a:	1c51      	adds	r1, r2, #1
 8004d1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8004d1e:	7852      	ldrb	r2, [r2, #1]
 8004d20:	2a00      	cmp	r2, #0
 8004d22:	d1c7      	bne.n	8004cb4 <_strtod_l+0x34>
 8004d24:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004d26:	9419      	str	r4, [sp, #100]	@ 0x64
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f040 8566 	bne.w	80057fa <_strtod_l+0xb7a>
 8004d2e:	4650      	mov	r0, sl
 8004d30:	4659      	mov	r1, fp
 8004d32:	e7e7      	b.n	8004d04 <_strtod_l+0x84>
 8004d34:	2100      	movs	r1, #0
 8004d36:	e7ef      	b.n	8004d18 <_strtod_l+0x98>
 8004d38:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004d3a:	b13a      	cbz	r2, 8004d4c <_strtod_l+0xcc>
 8004d3c:	2135      	movs	r1, #53	@ 0x35
 8004d3e:	a81c      	add	r0, sp, #112	@ 0x70
 8004d40:	f7ff ff38 	bl	8004bb4 <__copybits>
 8004d44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d46:	9805      	ldr	r0, [sp, #20]
 8004d48:	f7ff fb18 	bl	800437c <_Bfree>
 8004d4c:	3e01      	subs	r6, #1
 8004d4e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004d50:	2e04      	cmp	r6, #4
 8004d52:	d806      	bhi.n	8004d62 <_strtod_l+0xe2>
 8004d54:	e8df f006 	tbb	[pc, r6]
 8004d58:	201d0314 	.word	0x201d0314
 8004d5c:	14          	.byte	0x14
 8004d5d:	00          	.byte	0x00
 8004d5e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004d62:	05e1      	lsls	r1, r4, #23
 8004d64:	bf48      	it	mi
 8004d66:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004d6a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004d6e:	0d1b      	lsrs	r3, r3, #20
 8004d70:	051b      	lsls	r3, r3, #20
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1bd      	bne.n	8004cf2 <_strtod_l+0x72>
 8004d76:	f7fe fb27 	bl	80033c8 <__errno>
 8004d7a:	2322      	movs	r3, #34	@ 0x22
 8004d7c:	6003      	str	r3, [r0, #0]
 8004d7e:	e7b8      	b.n	8004cf2 <_strtod_l+0x72>
 8004d80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004d84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004d88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d8c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004d90:	e7e7      	b.n	8004d62 <_strtod_l+0xe2>
 8004d92:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004f10 <_strtod_l+0x290>
 8004d96:	e7e4      	b.n	8004d62 <_strtod_l+0xe2>
 8004d98:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004d9c:	f04f 3aff 	mov.w	sl, #4294967295
 8004da0:	e7df      	b.n	8004d62 <_strtod_l+0xe2>
 8004da2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	9219      	str	r2, [sp, #100]	@ 0x64
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b30      	cmp	r3, #48	@ 0x30
 8004dac:	d0f9      	beq.n	8004da2 <_strtod_l+0x122>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d09f      	beq.n	8004cf2 <_strtod_l+0x72>
 8004db2:	2301      	movs	r3, #1
 8004db4:	2700      	movs	r7, #0
 8004db6:	220a      	movs	r2, #10
 8004db8:	46b9      	mov	r9, r7
 8004dba:	9308      	str	r3, [sp, #32]
 8004dbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004dbe:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004dc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8004dc2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004dc4:	7805      	ldrb	r5, [r0, #0]
 8004dc6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004dca:	b2d9      	uxtb	r1, r3
 8004dcc:	2909      	cmp	r1, #9
 8004dce:	d928      	bls.n	8004e22 <_strtod_l+0x1a2>
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	4950      	ldr	r1, [pc, #320]	@ (8004f14 <_strtod_l+0x294>)
 8004dd4:	f000 ffc8 	bl	8005d68 <strncmp>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d032      	beq.n	8004e42 <_strtod_l+0x1c2>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	462a      	mov	r2, r5
 8004de0:	4603      	mov	r3, r0
 8004de2:	464d      	mov	r5, r9
 8004de4:	900a      	str	r0, [sp, #40]	@ 0x28
 8004de6:	2a65      	cmp	r2, #101	@ 0x65
 8004de8:	d001      	beq.n	8004dee <_strtod_l+0x16e>
 8004dea:	2a45      	cmp	r2, #69	@ 0x45
 8004dec:	d114      	bne.n	8004e18 <_strtod_l+0x198>
 8004dee:	b91d      	cbnz	r5, 8004df8 <_strtod_l+0x178>
 8004df0:	9a08      	ldr	r2, [sp, #32]
 8004df2:	4302      	orrs	r2, r0
 8004df4:	d096      	beq.n	8004d24 <_strtod_l+0xa4>
 8004df6:	2500      	movs	r5, #0
 8004df8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004dfa:	1c62      	adds	r2, r4, #1
 8004dfc:	9219      	str	r2, [sp, #100]	@ 0x64
 8004dfe:	7862      	ldrb	r2, [r4, #1]
 8004e00:	2a2b      	cmp	r2, #43	@ 0x2b
 8004e02:	d07a      	beq.n	8004efa <_strtod_l+0x27a>
 8004e04:	2a2d      	cmp	r2, #45	@ 0x2d
 8004e06:	d07e      	beq.n	8004f06 <_strtod_l+0x286>
 8004e08:	f04f 0c00 	mov.w	ip, #0
 8004e0c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004e10:	2909      	cmp	r1, #9
 8004e12:	f240 8085 	bls.w	8004f20 <_strtod_l+0x2a0>
 8004e16:	9419      	str	r4, [sp, #100]	@ 0x64
 8004e18:	f04f 0800 	mov.w	r8, #0
 8004e1c:	e0a5      	b.n	8004f6a <_strtod_l+0x2ea>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e7c8      	b.n	8004db4 <_strtod_l+0x134>
 8004e22:	f1b9 0f08 	cmp.w	r9, #8
 8004e26:	bfd8      	it	le
 8004e28:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8004e2a:	f100 0001 	add.w	r0, r0, #1
 8004e2e:	bfd6      	itet	le
 8004e30:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e34:	fb02 3707 	mlagt	r7, r2, r7, r3
 8004e38:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8004e3a:	f109 0901 	add.w	r9, r9, #1
 8004e3e:	9019      	str	r0, [sp, #100]	@ 0x64
 8004e40:	e7bf      	b.n	8004dc2 <_strtod_l+0x142>
 8004e42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	9219      	str	r2, [sp, #100]	@ 0x64
 8004e48:	785a      	ldrb	r2, [r3, #1]
 8004e4a:	f1b9 0f00 	cmp.w	r9, #0
 8004e4e:	d03b      	beq.n	8004ec8 <_strtod_l+0x248>
 8004e50:	464d      	mov	r5, r9
 8004e52:	900a      	str	r0, [sp, #40]	@ 0x28
 8004e54:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004e58:	2b09      	cmp	r3, #9
 8004e5a:	d912      	bls.n	8004e82 <_strtod_l+0x202>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e7c2      	b.n	8004de6 <_strtod_l+0x166>
 8004e60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004e62:	3001      	adds	r0, #1
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	9219      	str	r2, [sp, #100]	@ 0x64
 8004e68:	785a      	ldrb	r2, [r3, #1]
 8004e6a:	2a30      	cmp	r2, #48	@ 0x30
 8004e6c:	d0f8      	beq.n	8004e60 <_strtod_l+0x1e0>
 8004e6e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	f200 84c8 	bhi.w	8005808 <_strtod_l+0xb88>
 8004e78:	900a      	str	r0, [sp, #40]	@ 0x28
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004e80:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e82:	3a30      	subs	r2, #48	@ 0x30
 8004e84:	f100 0301 	add.w	r3, r0, #1
 8004e88:	d018      	beq.n	8004ebc <_strtod_l+0x23c>
 8004e8a:	462e      	mov	r6, r5
 8004e8c:	f04f 0e0a 	mov.w	lr, #10
 8004e90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e92:	4419      	add	r1, r3
 8004e94:	910a      	str	r1, [sp, #40]	@ 0x28
 8004e96:	1c71      	adds	r1, r6, #1
 8004e98:	eba1 0c05 	sub.w	ip, r1, r5
 8004e9c:	4563      	cmp	r3, ip
 8004e9e:	dc15      	bgt.n	8004ecc <_strtod_l+0x24c>
 8004ea0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004ea4:	182b      	adds	r3, r5, r0
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	f105 0501 	add.w	r5, r5, #1
 8004eac:	4405      	add	r5, r0
 8004eae:	dc1a      	bgt.n	8004ee6 <_strtod_l+0x266>
 8004eb0:	230a      	movs	r3, #10
 8004eb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004eb4:	fb03 2301 	mla	r3, r3, r1, r2
 8004eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	1c51      	adds	r1, r2, #1
 8004ec2:	9119      	str	r1, [sp, #100]	@ 0x64
 8004ec4:	7852      	ldrb	r2, [r2, #1]
 8004ec6:	e7c5      	b.n	8004e54 <_strtod_l+0x1d4>
 8004ec8:	4648      	mov	r0, r9
 8004eca:	e7ce      	b.n	8004e6a <_strtod_l+0x1ea>
 8004ecc:	2e08      	cmp	r6, #8
 8004ece:	dc05      	bgt.n	8004edc <_strtod_l+0x25c>
 8004ed0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004ed2:	fb0e f606 	mul.w	r6, lr, r6
 8004ed6:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004ed8:	460e      	mov	r6, r1
 8004eda:	e7dc      	b.n	8004e96 <_strtod_l+0x216>
 8004edc:	2910      	cmp	r1, #16
 8004ede:	bfd8      	it	le
 8004ee0:	fb0e f707 	mulle.w	r7, lr, r7
 8004ee4:	e7f8      	b.n	8004ed8 <_strtod_l+0x258>
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	bfdc      	itt	le
 8004eea:	230a      	movle	r3, #10
 8004eec:	fb03 2707 	mlale	r7, r3, r7, r2
 8004ef0:	e7e3      	b.n	8004eba <_strtod_l+0x23a>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e77a      	b.n	8004df0 <_strtod_l+0x170>
 8004efa:	f04f 0c00 	mov.w	ip, #0
 8004efe:	1ca2      	adds	r2, r4, #2
 8004f00:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f02:	78a2      	ldrb	r2, [r4, #2]
 8004f04:	e782      	b.n	8004e0c <_strtod_l+0x18c>
 8004f06:	f04f 0c01 	mov.w	ip, #1
 8004f0a:	e7f8      	b.n	8004efe <_strtod_l+0x27e>
 8004f0c:	08006e04 	.word	0x08006e04
 8004f10:	7ff00000 	.word	0x7ff00000
 8004f14:	08006c3d 	.word	0x08006c3d
 8004f18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004f1a:	1c51      	adds	r1, r2, #1
 8004f1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8004f1e:	7852      	ldrb	r2, [r2, #1]
 8004f20:	2a30      	cmp	r2, #48	@ 0x30
 8004f22:	d0f9      	beq.n	8004f18 <_strtod_l+0x298>
 8004f24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004f28:	2908      	cmp	r1, #8
 8004f2a:	f63f af75 	bhi.w	8004e18 <_strtod_l+0x198>
 8004f2e:	f04f 080a 	mov.w	r8, #10
 8004f32:	3a30      	subs	r2, #48	@ 0x30
 8004f34:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004f38:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004f3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004f3c:	1c56      	adds	r6, r2, #1
 8004f3e:	9619      	str	r6, [sp, #100]	@ 0x64
 8004f40:	7852      	ldrb	r2, [r2, #1]
 8004f42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004f46:	f1be 0f09 	cmp.w	lr, #9
 8004f4a:	d939      	bls.n	8004fc0 <_strtod_l+0x340>
 8004f4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004f4e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004f52:	1a76      	subs	r6, r6, r1
 8004f54:	2e08      	cmp	r6, #8
 8004f56:	dc03      	bgt.n	8004f60 <_strtod_l+0x2e0>
 8004f58:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f5a:	4588      	cmp	r8, r1
 8004f5c:	bfa8      	it	ge
 8004f5e:	4688      	movge	r8, r1
 8004f60:	f1bc 0f00 	cmp.w	ip, #0
 8004f64:	d001      	beq.n	8004f6a <_strtod_l+0x2ea>
 8004f66:	f1c8 0800 	rsb	r8, r8, #0
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	d14e      	bne.n	800500c <_strtod_l+0x38c>
 8004f6e:	9908      	ldr	r1, [sp, #32]
 8004f70:	4308      	orrs	r0, r1
 8004f72:	f47f aebe 	bne.w	8004cf2 <_strtod_l+0x72>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f47f aed4 	bne.w	8004d24 <_strtod_l+0xa4>
 8004f7c:	2a69      	cmp	r2, #105	@ 0x69
 8004f7e:	d028      	beq.n	8004fd2 <_strtod_l+0x352>
 8004f80:	dc25      	bgt.n	8004fce <_strtod_l+0x34e>
 8004f82:	2a49      	cmp	r2, #73	@ 0x49
 8004f84:	d025      	beq.n	8004fd2 <_strtod_l+0x352>
 8004f86:	2a4e      	cmp	r2, #78	@ 0x4e
 8004f88:	f47f aecc 	bne.w	8004d24 <_strtod_l+0xa4>
 8004f8c:	4999      	ldr	r1, [pc, #612]	@ (80051f4 <_strtod_l+0x574>)
 8004f8e:	a819      	add	r0, sp, #100	@ 0x64
 8004f90:	f001 f9dc 	bl	800634c <__match>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f43f aec5 	beq.w	8004d24 <_strtod_l+0xa4>
 8004f9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b28      	cmp	r3, #40	@ 0x28
 8004fa0:	d12e      	bne.n	8005000 <_strtod_l+0x380>
 8004fa2:	4995      	ldr	r1, [pc, #596]	@ (80051f8 <_strtod_l+0x578>)
 8004fa4:	aa1c      	add	r2, sp, #112	@ 0x70
 8004fa6:	a819      	add	r0, sp, #100	@ 0x64
 8004fa8:	f001 f9e4 	bl	8006374 <__hexnan>
 8004fac:	2805      	cmp	r0, #5
 8004fae:	d127      	bne.n	8005000 <_strtod_l+0x380>
 8004fb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004fb2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004fb6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004fba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004fbe:	e698      	b.n	8004cf2 <_strtod_l+0x72>
 8004fc0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fc2:	fb08 2101 	mla	r1, r8, r1, r2
 8004fc6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004fca:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fcc:	e7b5      	b.n	8004f3a <_strtod_l+0x2ba>
 8004fce:	2a6e      	cmp	r2, #110	@ 0x6e
 8004fd0:	e7da      	b.n	8004f88 <_strtod_l+0x308>
 8004fd2:	498a      	ldr	r1, [pc, #552]	@ (80051fc <_strtod_l+0x57c>)
 8004fd4:	a819      	add	r0, sp, #100	@ 0x64
 8004fd6:	f001 f9b9 	bl	800634c <__match>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	f43f aea2 	beq.w	8004d24 <_strtod_l+0xa4>
 8004fe0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004fe2:	4987      	ldr	r1, [pc, #540]	@ (8005200 <_strtod_l+0x580>)
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	a819      	add	r0, sp, #100	@ 0x64
 8004fe8:	9319      	str	r3, [sp, #100]	@ 0x64
 8004fea:	f001 f9af 	bl	800634c <__match>
 8004fee:	b910      	cbnz	r0, 8004ff6 <_strtod_l+0x376>
 8004ff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	9319      	str	r3, [sp, #100]	@ 0x64
 8004ff6:	f04f 0a00 	mov.w	sl, #0
 8004ffa:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8005204 <_strtod_l+0x584>
 8004ffe:	e678      	b.n	8004cf2 <_strtod_l+0x72>
 8005000:	4881      	ldr	r0, [pc, #516]	@ (8005208 <_strtod_l+0x588>)
 8005002:	f000 fee1 	bl	8005dc8 <nan>
 8005006:	4682      	mov	sl, r0
 8005008:	468b      	mov	fp, r1
 800500a:	e672      	b.n	8004cf2 <_strtod_l+0x72>
 800500c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800500e:	f1b9 0f00 	cmp.w	r9, #0
 8005012:	bf08      	it	eq
 8005014:	46a9      	moveq	r9, r5
 8005016:	eba8 0303 	sub.w	r3, r8, r3
 800501a:	2d10      	cmp	r5, #16
 800501c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800501e:	462c      	mov	r4, r5
 8005020:	9309      	str	r3, [sp, #36]	@ 0x24
 8005022:	bfa8      	it	ge
 8005024:	2410      	movge	r4, #16
 8005026:	f7fb f9dd 	bl	80003e4 <__aeabi_ui2d>
 800502a:	2d09      	cmp	r5, #9
 800502c:	4682      	mov	sl, r0
 800502e:	468b      	mov	fp, r1
 8005030:	dc11      	bgt.n	8005056 <_strtod_l+0x3d6>
 8005032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005034:	2b00      	cmp	r3, #0
 8005036:	f43f ae5c 	beq.w	8004cf2 <_strtod_l+0x72>
 800503a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503c:	dd76      	ble.n	800512c <_strtod_l+0x4ac>
 800503e:	2b16      	cmp	r3, #22
 8005040:	dc5d      	bgt.n	80050fe <_strtod_l+0x47e>
 8005042:	4972      	ldr	r1, [pc, #456]	@ (800520c <_strtod_l+0x58c>)
 8005044:	4652      	mov	r2, sl
 8005046:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800504a:	465b      	mov	r3, fp
 800504c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005050:	f7fb fa42 	bl	80004d8 <__aeabi_dmul>
 8005054:	e7d7      	b.n	8005006 <_strtod_l+0x386>
 8005056:	4b6d      	ldr	r3, [pc, #436]	@ (800520c <_strtod_l+0x58c>)
 8005058:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800505c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005060:	f7fb fa3a 	bl	80004d8 <__aeabi_dmul>
 8005064:	4682      	mov	sl, r0
 8005066:	4638      	mov	r0, r7
 8005068:	468b      	mov	fp, r1
 800506a:	f7fb f9bb 	bl	80003e4 <__aeabi_ui2d>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4650      	mov	r0, sl
 8005074:	4659      	mov	r1, fp
 8005076:	f7fb f879 	bl	800016c <__adddf3>
 800507a:	2d0f      	cmp	r5, #15
 800507c:	4682      	mov	sl, r0
 800507e:	468b      	mov	fp, r1
 8005080:	ddd7      	ble.n	8005032 <_strtod_l+0x3b2>
 8005082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005084:	1b2c      	subs	r4, r5, r4
 8005086:	441c      	add	r4, r3
 8005088:	2c00      	cmp	r4, #0
 800508a:	f340 8093 	ble.w	80051b4 <_strtod_l+0x534>
 800508e:	f014 030f 	ands.w	r3, r4, #15
 8005092:	d00a      	beq.n	80050aa <_strtod_l+0x42a>
 8005094:	495d      	ldr	r1, [pc, #372]	@ (800520c <_strtod_l+0x58c>)
 8005096:	4652      	mov	r2, sl
 8005098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800509c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a0:	465b      	mov	r3, fp
 80050a2:	f7fb fa19 	bl	80004d8 <__aeabi_dmul>
 80050a6:	4682      	mov	sl, r0
 80050a8:	468b      	mov	fp, r1
 80050aa:	f034 040f 	bics.w	r4, r4, #15
 80050ae:	d073      	beq.n	8005198 <_strtod_l+0x518>
 80050b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80050b4:	dd49      	ble.n	800514a <_strtod_l+0x4ca>
 80050b6:	2400      	movs	r4, #0
 80050b8:	46a0      	mov	r8, r4
 80050ba:	46a1      	mov	r9, r4
 80050bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80050be:	2322      	movs	r3, #34	@ 0x22
 80050c0:	f04f 0a00 	mov.w	sl, #0
 80050c4:	9a05      	ldr	r2, [sp, #20]
 80050c6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8005204 <_strtod_l+0x584>
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f43f ae0f 	beq.w	8004cf2 <_strtod_l+0x72>
 80050d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80050d6:	9805      	ldr	r0, [sp, #20]
 80050d8:	f7ff f950 	bl	800437c <_Bfree>
 80050dc:	4649      	mov	r1, r9
 80050de:	9805      	ldr	r0, [sp, #20]
 80050e0:	f7ff f94c 	bl	800437c <_Bfree>
 80050e4:	4641      	mov	r1, r8
 80050e6:	9805      	ldr	r0, [sp, #20]
 80050e8:	f7ff f948 	bl	800437c <_Bfree>
 80050ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80050ee:	9805      	ldr	r0, [sp, #20]
 80050f0:	f7ff f944 	bl	800437c <_Bfree>
 80050f4:	4621      	mov	r1, r4
 80050f6:	9805      	ldr	r0, [sp, #20]
 80050f8:	f7ff f940 	bl	800437c <_Bfree>
 80050fc:	e5f9      	b.n	8004cf2 <_strtod_l+0x72>
 80050fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005100:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005104:	4293      	cmp	r3, r2
 8005106:	dbbc      	blt.n	8005082 <_strtod_l+0x402>
 8005108:	4c40      	ldr	r4, [pc, #256]	@ (800520c <_strtod_l+0x58c>)
 800510a:	f1c5 050f 	rsb	r5, r5, #15
 800510e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005112:	4652      	mov	r2, sl
 8005114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005118:	465b      	mov	r3, fp
 800511a:	f7fb f9dd 	bl	80004d8 <__aeabi_dmul>
 800511e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005120:	1b5d      	subs	r5, r3, r5
 8005122:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005126:	e9d4 2300 	ldrd	r2, r3, [r4]
 800512a:	e791      	b.n	8005050 <_strtod_l+0x3d0>
 800512c:	3316      	adds	r3, #22
 800512e:	dba8      	blt.n	8005082 <_strtod_l+0x402>
 8005130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005132:	4650      	mov	r0, sl
 8005134:	eba3 0808 	sub.w	r8, r3, r8
 8005138:	4b34      	ldr	r3, [pc, #208]	@ (800520c <_strtod_l+0x58c>)
 800513a:	4659      	mov	r1, fp
 800513c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005140:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005144:	f7fb faf2 	bl	800072c <__aeabi_ddiv>
 8005148:	e75d      	b.n	8005006 <_strtod_l+0x386>
 800514a:	2300      	movs	r3, #0
 800514c:	4650      	mov	r0, sl
 800514e:	4659      	mov	r1, fp
 8005150:	461e      	mov	r6, r3
 8005152:	4f2f      	ldr	r7, [pc, #188]	@ (8005210 <_strtod_l+0x590>)
 8005154:	1124      	asrs	r4, r4, #4
 8005156:	2c01      	cmp	r4, #1
 8005158:	dc21      	bgt.n	800519e <_strtod_l+0x51e>
 800515a:	b10b      	cbz	r3, 8005160 <_strtod_l+0x4e0>
 800515c:	4682      	mov	sl, r0
 800515e:	468b      	mov	fp, r1
 8005160:	492b      	ldr	r1, [pc, #172]	@ (8005210 <_strtod_l+0x590>)
 8005162:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005166:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800516a:	4652      	mov	r2, sl
 800516c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005170:	465b      	mov	r3, fp
 8005172:	f7fb f9b1 	bl	80004d8 <__aeabi_dmul>
 8005176:	4b23      	ldr	r3, [pc, #140]	@ (8005204 <_strtod_l+0x584>)
 8005178:	460a      	mov	r2, r1
 800517a:	400b      	ands	r3, r1
 800517c:	4925      	ldr	r1, [pc, #148]	@ (8005214 <_strtod_l+0x594>)
 800517e:	4682      	mov	sl, r0
 8005180:	428b      	cmp	r3, r1
 8005182:	d898      	bhi.n	80050b6 <_strtod_l+0x436>
 8005184:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005188:	428b      	cmp	r3, r1
 800518a:	bf86      	itte	hi
 800518c:	f04f 3aff 	movhi.w	sl, #4294967295
 8005190:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8005218 <_strtod_l+0x598>
 8005194:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005198:	2300      	movs	r3, #0
 800519a:	9308      	str	r3, [sp, #32]
 800519c:	e076      	b.n	800528c <_strtod_l+0x60c>
 800519e:	07e2      	lsls	r2, r4, #31
 80051a0:	d504      	bpl.n	80051ac <_strtod_l+0x52c>
 80051a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a6:	f7fb f997 	bl	80004d8 <__aeabi_dmul>
 80051aa:	2301      	movs	r3, #1
 80051ac:	3601      	adds	r6, #1
 80051ae:	1064      	asrs	r4, r4, #1
 80051b0:	3708      	adds	r7, #8
 80051b2:	e7d0      	b.n	8005156 <_strtod_l+0x4d6>
 80051b4:	d0f0      	beq.n	8005198 <_strtod_l+0x518>
 80051b6:	4264      	negs	r4, r4
 80051b8:	f014 020f 	ands.w	r2, r4, #15
 80051bc:	d00a      	beq.n	80051d4 <_strtod_l+0x554>
 80051be:	4b13      	ldr	r3, [pc, #76]	@ (800520c <_strtod_l+0x58c>)
 80051c0:	4650      	mov	r0, sl
 80051c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051c6:	4659      	mov	r1, fp
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb faae 	bl	800072c <__aeabi_ddiv>
 80051d0:	4682      	mov	sl, r0
 80051d2:	468b      	mov	fp, r1
 80051d4:	1124      	asrs	r4, r4, #4
 80051d6:	d0df      	beq.n	8005198 <_strtod_l+0x518>
 80051d8:	2c1f      	cmp	r4, #31
 80051da:	dd1f      	ble.n	800521c <_strtod_l+0x59c>
 80051dc:	2400      	movs	r4, #0
 80051de:	46a0      	mov	r8, r4
 80051e0:	46a1      	mov	r9, r4
 80051e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80051e4:	2322      	movs	r3, #34	@ 0x22
 80051e6:	9a05      	ldr	r2, [sp, #20]
 80051e8:	f04f 0a00 	mov.w	sl, #0
 80051ec:	f04f 0b00 	mov.w	fp, #0
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e76b      	b.n	80050cc <_strtod_l+0x44c>
 80051f4:	08006b2b 	.word	0x08006b2b
 80051f8:	08006df0 	.word	0x08006df0
 80051fc:	08006b23 	.word	0x08006b23
 8005200:	08006b5a 	.word	0x08006b5a
 8005204:	7ff00000 	.word	0x7ff00000
 8005208:	08006c93 	.word	0x08006c93
 800520c:	08006d28 	.word	0x08006d28
 8005210:	08006d00 	.word	0x08006d00
 8005214:	7ca00000 	.word	0x7ca00000
 8005218:	7fefffff 	.word	0x7fefffff
 800521c:	f014 0310 	ands.w	r3, r4, #16
 8005220:	bf18      	it	ne
 8005222:	236a      	movne	r3, #106	@ 0x6a
 8005224:	4650      	mov	r0, sl
 8005226:	9308      	str	r3, [sp, #32]
 8005228:	4659      	mov	r1, fp
 800522a:	2300      	movs	r3, #0
 800522c:	4e77      	ldr	r6, [pc, #476]	@ (800540c <_strtod_l+0x78c>)
 800522e:	07e7      	lsls	r7, r4, #31
 8005230:	d504      	bpl.n	800523c <_strtod_l+0x5bc>
 8005232:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005236:	f7fb f94f 	bl	80004d8 <__aeabi_dmul>
 800523a:	2301      	movs	r3, #1
 800523c:	1064      	asrs	r4, r4, #1
 800523e:	f106 0608 	add.w	r6, r6, #8
 8005242:	d1f4      	bne.n	800522e <_strtod_l+0x5ae>
 8005244:	b10b      	cbz	r3, 800524a <_strtod_l+0x5ca>
 8005246:	4682      	mov	sl, r0
 8005248:	468b      	mov	fp, r1
 800524a:	9b08      	ldr	r3, [sp, #32]
 800524c:	b1b3      	cbz	r3, 800527c <_strtod_l+0x5fc>
 800524e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005252:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005256:	2b00      	cmp	r3, #0
 8005258:	4659      	mov	r1, fp
 800525a:	dd0f      	ble.n	800527c <_strtod_l+0x5fc>
 800525c:	2b1f      	cmp	r3, #31
 800525e:	dd58      	ble.n	8005312 <_strtod_l+0x692>
 8005260:	2b34      	cmp	r3, #52	@ 0x34
 8005262:	bfd8      	it	le
 8005264:	f04f 33ff 	movle.w	r3, #4294967295
 8005268:	f04f 0a00 	mov.w	sl, #0
 800526c:	bfcf      	iteee	gt
 800526e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005272:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005276:	4093      	lslle	r3, r2
 8005278:	ea03 0b01 	andle.w	fp, r3, r1
 800527c:	2200      	movs	r2, #0
 800527e:	2300      	movs	r3, #0
 8005280:	4650      	mov	r0, sl
 8005282:	4659      	mov	r1, fp
 8005284:	f7fb fb90 	bl	80009a8 <__aeabi_dcmpeq>
 8005288:	2800      	cmp	r0, #0
 800528a:	d1a7      	bne.n	80051dc <_strtod_l+0x55c>
 800528c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800528e:	464a      	mov	r2, r9
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005294:	462b      	mov	r3, r5
 8005296:	9805      	ldr	r0, [sp, #20]
 8005298:	f7ff f8d8 	bl	800444c <__s2b>
 800529c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800529e:	2800      	cmp	r0, #0
 80052a0:	f43f af09 	beq.w	80050b6 <_strtod_l+0x436>
 80052a4:	2400      	movs	r4, #0
 80052a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	eba3 0308 	sub.w	r3, r3, r8
 80052b0:	bfa8      	it	ge
 80052b2:	2300      	movge	r3, #0
 80052b4:	46a0      	mov	r8, r4
 80052b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80052b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80052bc:	9316      	str	r3, [sp, #88]	@ 0x58
 80052be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052c0:	9805      	ldr	r0, [sp, #20]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	f7ff f81a 	bl	80042fc <_Balloc>
 80052c8:	4681      	mov	r9, r0
 80052ca:	2800      	cmp	r0, #0
 80052cc:	f43f aef7 	beq.w	80050be <_strtod_l+0x43e>
 80052d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052d2:	300c      	adds	r0, #12
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	f103 010c 	add.w	r1, r3, #12
 80052da:	3202      	adds	r2, #2
 80052dc:	0092      	lsls	r2, r2, #2
 80052de:	f000 fd65 	bl	8005dac <memcpy>
 80052e2:	ab1c      	add	r3, sp, #112	@ 0x70
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	4652      	mov	r2, sl
 80052ec:	465b      	mov	r3, fp
 80052ee:	9805      	ldr	r0, [sp, #20]
 80052f0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80052f4:	f7ff fbd6 	bl	8004aa4 <__d2b>
 80052f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80052fa:	2800      	cmp	r0, #0
 80052fc:	f43f aedf 	beq.w	80050be <_strtod_l+0x43e>
 8005300:	2101      	movs	r1, #1
 8005302:	9805      	ldr	r0, [sp, #20]
 8005304:	f7ff f938 	bl	8004578 <__i2b>
 8005308:	4680      	mov	r8, r0
 800530a:	b948      	cbnz	r0, 8005320 <_strtod_l+0x6a0>
 800530c:	f04f 0800 	mov.w	r8, #0
 8005310:	e6d5      	b.n	80050be <_strtod_l+0x43e>
 8005312:	f04f 32ff 	mov.w	r2, #4294967295
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	ea03 0a0a 	and.w	sl, r3, sl
 800531e:	e7ad      	b.n	800527c <_strtod_l+0x5fc>
 8005320:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005322:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005324:	2d00      	cmp	r5, #0
 8005326:	bfab      	itete	ge
 8005328:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800532a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800532c:	18ef      	addge	r7, r5, r3
 800532e:	1b5e      	sublt	r6, r3, r5
 8005330:	9b08      	ldr	r3, [sp, #32]
 8005332:	bfa8      	it	ge
 8005334:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005336:	eba5 0503 	sub.w	r5, r5, r3
 800533a:	4415      	add	r5, r2
 800533c:	4b34      	ldr	r3, [pc, #208]	@ (8005410 <_strtod_l+0x790>)
 800533e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005342:	bfb8      	it	lt
 8005344:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005346:	429d      	cmp	r5, r3
 8005348:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800534c:	da50      	bge.n	80053f0 <_strtod_l+0x770>
 800534e:	1b5b      	subs	r3, r3, r5
 8005350:	2b1f      	cmp	r3, #31
 8005352:	f04f 0101 	mov.w	r1, #1
 8005356:	eba2 0203 	sub.w	r2, r2, r3
 800535a:	dc3d      	bgt.n	80053d8 <_strtod_l+0x758>
 800535c:	fa01 f303 	lsl.w	r3, r1, r3
 8005360:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005362:	2300      	movs	r3, #0
 8005364:	9310      	str	r3, [sp, #64]	@ 0x40
 8005366:	18bd      	adds	r5, r7, r2
 8005368:	9b08      	ldr	r3, [sp, #32]
 800536a:	42af      	cmp	r7, r5
 800536c:	4416      	add	r6, r2
 800536e:	441e      	add	r6, r3
 8005370:	463b      	mov	r3, r7
 8005372:	bfa8      	it	ge
 8005374:	462b      	movge	r3, r5
 8005376:	42b3      	cmp	r3, r6
 8005378:	bfa8      	it	ge
 800537a:	4633      	movge	r3, r6
 800537c:	2b00      	cmp	r3, #0
 800537e:	bfc2      	ittt	gt
 8005380:	1aed      	subgt	r5, r5, r3
 8005382:	1af6      	subgt	r6, r6, r3
 8005384:	1aff      	subgt	r7, r7, r3
 8005386:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005388:	2b00      	cmp	r3, #0
 800538a:	dd16      	ble.n	80053ba <_strtod_l+0x73a>
 800538c:	4641      	mov	r1, r8
 800538e:	461a      	mov	r2, r3
 8005390:	9805      	ldr	r0, [sp, #20]
 8005392:	f7ff f9a9 	bl	80046e8 <__pow5mult>
 8005396:	4680      	mov	r8, r0
 8005398:	2800      	cmp	r0, #0
 800539a:	d0b7      	beq.n	800530c <_strtod_l+0x68c>
 800539c:	4601      	mov	r1, r0
 800539e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80053a0:	9805      	ldr	r0, [sp, #20]
 80053a2:	f7ff f8ff 	bl	80045a4 <__multiply>
 80053a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80053a8:	2800      	cmp	r0, #0
 80053aa:	f43f ae88 	beq.w	80050be <_strtod_l+0x43e>
 80053ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80053b0:	9805      	ldr	r0, [sp, #20]
 80053b2:	f7fe ffe3 	bl	800437c <_Bfree>
 80053b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80053ba:	2d00      	cmp	r5, #0
 80053bc:	dc1d      	bgt.n	80053fa <_strtod_l+0x77a>
 80053be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	dd27      	ble.n	8005414 <_strtod_l+0x794>
 80053c4:	4649      	mov	r1, r9
 80053c6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80053c8:	9805      	ldr	r0, [sp, #20]
 80053ca:	f7ff f98d 	bl	80046e8 <__pow5mult>
 80053ce:	4681      	mov	r9, r0
 80053d0:	bb00      	cbnz	r0, 8005414 <_strtod_l+0x794>
 80053d2:	f04f 0900 	mov.w	r9, #0
 80053d6:	e672      	b.n	80050be <_strtod_l+0x43e>
 80053d8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80053dc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80053e0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80053e4:	35e2      	adds	r5, #226	@ 0xe2
 80053e6:	fa01 f305 	lsl.w	r3, r1, r5
 80053ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80053ec:	9113      	str	r1, [sp, #76]	@ 0x4c
 80053ee:	e7ba      	b.n	8005366 <_strtod_l+0x6e6>
 80053f0:	2300      	movs	r3, #0
 80053f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80053f4:	2301      	movs	r3, #1
 80053f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80053f8:	e7b5      	b.n	8005366 <_strtod_l+0x6e6>
 80053fa:	462a      	mov	r2, r5
 80053fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80053fe:	9805      	ldr	r0, [sp, #20]
 8005400:	f7ff f9cc 	bl	800479c <__lshift>
 8005404:	901a      	str	r0, [sp, #104]	@ 0x68
 8005406:	2800      	cmp	r0, #0
 8005408:	d1d9      	bne.n	80053be <_strtod_l+0x73e>
 800540a:	e658      	b.n	80050be <_strtod_l+0x43e>
 800540c:	08006e18 	.word	0x08006e18
 8005410:	fffffc02 	.word	0xfffffc02
 8005414:	2e00      	cmp	r6, #0
 8005416:	dd07      	ble.n	8005428 <_strtod_l+0x7a8>
 8005418:	4649      	mov	r1, r9
 800541a:	4632      	mov	r2, r6
 800541c:	9805      	ldr	r0, [sp, #20]
 800541e:	f7ff f9bd 	bl	800479c <__lshift>
 8005422:	4681      	mov	r9, r0
 8005424:	2800      	cmp	r0, #0
 8005426:	d0d4      	beq.n	80053d2 <_strtod_l+0x752>
 8005428:	2f00      	cmp	r7, #0
 800542a:	dd08      	ble.n	800543e <_strtod_l+0x7be>
 800542c:	4641      	mov	r1, r8
 800542e:	463a      	mov	r2, r7
 8005430:	9805      	ldr	r0, [sp, #20]
 8005432:	f7ff f9b3 	bl	800479c <__lshift>
 8005436:	4680      	mov	r8, r0
 8005438:	2800      	cmp	r0, #0
 800543a:	f43f ae40 	beq.w	80050be <_strtod_l+0x43e>
 800543e:	464a      	mov	r2, r9
 8005440:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005442:	9805      	ldr	r0, [sp, #20]
 8005444:	f7ff fa32 	bl	80048ac <__mdiff>
 8005448:	4604      	mov	r4, r0
 800544a:	2800      	cmp	r0, #0
 800544c:	f43f ae37 	beq.w	80050be <_strtod_l+0x43e>
 8005450:	68c3      	ldr	r3, [r0, #12]
 8005452:	4641      	mov	r1, r8
 8005454:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005456:	2300      	movs	r3, #0
 8005458:	60c3      	str	r3, [r0, #12]
 800545a:	f7ff fa0b 	bl	8004874 <__mcmp>
 800545e:	2800      	cmp	r0, #0
 8005460:	da3d      	bge.n	80054de <_strtod_l+0x85e>
 8005462:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005464:	ea53 030a 	orrs.w	r3, r3, sl
 8005468:	d163      	bne.n	8005532 <_strtod_l+0x8b2>
 800546a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800546e:	2b00      	cmp	r3, #0
 8005470:	d15f      	bne.n	8005532 <_strtod_l+0x8b2>
 8005472:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005476:	0d1b      	lsrs	r3, r3, #20
 8005478:	051b      	lsls	r3, r3, #20
 800547a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800547e:	d958      	bls.n	8005532 <_strtod_l+0x8b2>
 8005480:	6963      	ldr	r3, [r4, #20]
 8005482:	b913      	cbnz	r3, 800548a <_strtod_l+0x80a>
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	2b01      	cmp	r3, #1
 8005488:	dd53      	ble.n	8005532 <_strtod_l+0x8b2>
 800548a:	4621      	mov	r1, r4
 800548c:	2201      	movs	r2, #1
 800548e:	9805      	ldr	r0, [sp, #20]
 8005490:	f7ff f984 	bl	800479c <__lshift>
 8005494:	4641      	mov	r1, r8
 8005496:	4604      	mov	r4, r0
 8005498:	f7ff f9ec 	bl	8004874 <__mcmp>
 800549c:	2800      	cmp	r0, #0
 800549e:	dd48      	ble.n	8005532 <_strtod_l+0x8b2>
 80054a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80054a4:	9a08      	ldr	r2, [sp, #32]
 80054a6:	0d1b      	lsrs	r3, r3, #20
 80054a8:	051b      	lsls	r3, r3, #20
 80054aa:	2a00      	cmp	r2, #0
 80054ac:	d062      	beq.n	8005574 <_strtod_l+0x8f4>
 80054ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80054b2:	d85f      	bhi.n	8005574 <_strtod_l+0x8f4>
 80054b4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80054b8:	f67f ae94 	bls.w	80051e4 <_strtod_l+0x564>
 80054bc:	4650      	mov	r0, sl
 80054be:	4659      	mov	r1, fp
 80054c0:	4ba3      	ldr	r3, [pc, #652]	@ (8005750 <_strtod_l+0xad0>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	f7fb f808 	bl	80004d8 <__aeabi_dmul>
 80054c8:	4ba2      	ldr	r3, [pc, #648]	@ (8005754 <_strtod_l+0xad4>)
 80054ca:	4682      	mov	sl, r0
 80054cc:	400b      	ands	r3, r1
 80054ce:	468b      	mov	fp, r1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f adff 	bne.w	80050d4 <_strtod_l+0x454>
 80054d6:	2322      	movs	r3, #34	@ 0x22
 80054d8:	9a05      	ldr	r2, [sp, #20]
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e5fa      	b.n	80050d4 <_strtod_l+0x454>
 80054de:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80054e2:	d165      	bne.n	80055b0 <_strtod_l+0x930>
 80054e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80054e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054ea:	b35a      	cbz	r2, 8005544 <_strtod_l+0x8c4>
 80054ec:	4a9a      	ldr	r2, [pc, #616]	@ (8005758 <_strtod_l+0xad8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d12b      	bne.n	800554a <_strtod_l+0x8ca>
 80054f2:	9b08      	ldr	r3, [sp, #32]
 80054f4:	4651      	mov	r1, sl
 80054f6:	b303      	cbz	r3, 800553a <_strtod_l+0x8ba>
 80054f8:	465a      	mov	r2, fp
 80054fa:	4b96      	ldr	r3, [pc, #600]	@ (8005754 <_strtod_l+0xad4>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005502:	f04f 32ff 	mov.w	r2, #4294967295
 8005506:	d81b      	bhi.n	8005540 <_strtod_l+0x8c0>
 8005508:	0d1b      	lsrs	r3, r3, #20
 800550a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	4299      	cmp	r1, r3
 8005514:	d119      	bne.n	800554a <_strtod_l+0x8ca>
 8005516:	4b91      	ldr	r3, [pc, #580]	@ (800575c <_strtod_l+0xadc>)
 8005518:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800551a:	429a      	cmp	r2, r3
 800551c:	d102      	bne.n	8005524 <_strtod_l+0x8a4>
 800551e:	3101      	adds	r1, #1
 8005520:	f43f adcd 	beq.w	80050be <_strtod_l+0x43e>
 8005524:	f04f 0a00 	mov.w	sl, #0
 8005528:	4b8a      	ldr	r3, [pc, #552]	@ (8005754 <_strtod_l+0xad4>)
 800552a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800552c:	401a      	ands	r2, r3
 800552e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005532:	9b08      	ldr	r3, [sp, #32]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1c1      	bne.n	80054bc <_strtod_l+0x83c>
 8005538:	e5cc      	b.n	80050d4 <_strtod_l+0x454>
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
 800553e:	e7e8      	b.n	8005512 <_strtod_l+0x892>
 8005540:	4613      	mov	r3, r2
 8005542:	e7e6      	b.n	8005512 <_strtod_l+0x892>
 8005544:	ea53 030a 	orrs.w	r3, r3, sl
 8005548:	d0aa      	beq.n	80054a0 <_strtod_l+0x820>
 800554a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800554c:	b1db      	cbz	r3, 8005586 <_strtod_l+0x906>
 800554e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005550:	4213      	tst	r3, r2
 8005552:	d0ee      	beq.n	8005532 <_strtod_l+0x8b2>
 8005554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005556:	4650      	mov	r0, sl
 8005558:	4659      	mov	r1, fp
 800555a:	9a08      	ldr	r2, [sp, #32]
 800555c:	b1bb      	cbz	r3, 800558e <_strtod_l+0x90e>
 800555e:	f7ff fb6d 	bl	8004c3c <sulp>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800556a:	f7fa fdff 	bl	800016c <__adddf3>
 800556e:	4682      	mov	sl, r0
 8005570:	468b      	mov	fp, r1
 8005572:	e7de      	b.n	8005532 <_strtod_l+0x8b2>
 8005574:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005578:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800557c:	f04f 3aff 	mov.w	sl, #4294967295
 8005580:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005584:	e7d5      	b.n	8005532 <_strtod_l+0x8b2>
 8005586:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005588:	ea13 0f0a 	tst.w	r3, sl
 800558c:	e7e1      	b.n	8005552 <_strtod_l+0x8d2>
 800558e:	f7ff fb55 	bl	8004c3c <sulp>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800559a:	f7fa fde5 	bl	8000168 <__aeabi_dsub>
 800559e:	2200      	movs	r2, #0
 80055a0:	2300      	movs	r3, #0
 80055a2:	4682      	mov	sl, r0
 80055a4:	468b      	mov	fp, r1
 80055a6:	f7fb f9ff 	bl	80009a8 <__aeabi_dcmpeq>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d0c1      	beq.n	8005532 <_strtod_l+0x8b2>
 80055ae:	e619      	b.n	80051e4 <_strtod_l+0x564>
 80055b0:	4641      	mov	r1, r8
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff face 	bl	8004b54 <__ratio>
 80055b8:	2200      	movs	r2, #0
 80055ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80055be:	4606      	mov	r6, r0
 80055c0:	460f      	mov	r7, r1
 80055c2:	f7fb fa05 	bl	80009d0 <__aeabi_dcmple>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d06d      	beq.n	80056a6 <_strtod_l+0xa26>
 80055ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d178      	bne.n	80056c2 <_strtod_l+0xa42>
 80055d0:	f1ba 0f00 	cmp.w	sl, #0
 80055d4:	d156      	bne.n	8005684 <_strtod_l+0xa04>
 80055d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d158      	bne.n	8005692 <_strtod_l+0xa12>
 80055e0:	2200      	movs	r2, #0
 80055e2:	4630      	mov	r0, r6
 80055e4:	4639      	mov	r1, r7
 80055e6:	4b5e      	ldr	r3, [pc, #376]	@ (8005760 <_strtod_l+0xae0>)
 80055e8:	f7fb f9e8 	bl	80009bc <__aeabi_dcmplt>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d157      	bne.n	80056a0 <_strtod_l+0xa20>
 80055f0:	4630      	mov	r0, r6
 80055f2:	4639      	mov	r1, r7
 80055f4:	2200      	movs	r2, #0
 80055f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005764 <_strtod_l+0xae4>)
 80055f8:	f7fa ff6e 	bl	80004d8 <__aeabi_dmul>
 80055fc:	4606      	mov	r6, r0
 80055fe:	460f      	mov	r7, r1
 8005600:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005604:	9606      	str	r6, [sp, #24]
 8005606:	9307      	str	r3, [sp, #28]
 8005608:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800560c:	4d51      	ldr	r5, [pc, #324]	@ (8005754 <_strtod_l+0xad4>)
 800560e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005614:	401d      	ands	r5, r3
 8005616:	4b54      	ldr	r3, [pc, #336]	@ (8005768 <_strtod_l+0xae8>)
 8005618:	429d      	cmp	r5, r3
 800561a:	f040 80ab 	bne.w	8005774 <_strtod_l+0xaf4>
 800561e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005620:	4650      	mov	r0, sl
 8005622:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005626:	4659      	mov	r1, fp
 8005628:	f7ff f9d4 	bl	80049d4 <__ulp>
 800562c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005630:	f7fa ff52 	bl	80004d8 <__aeabi_dmul>
 8005634:	4652      	mov	r2, sl
 8005636:	465b      	mov	r3, fp
 8005638:	f7fa fd98 	bl	800016c <__adddf3>
 800563c:	460b      	mov	r3, r1
 800563e:	4945      	ldr	r1, [pc, #276]	@ (8005754 <_strtod_l+0xad4>)
 8005640:	4a4a      	ldr	r2, [pc, #296]	@ (800576c <_strtod_l+0xaec>)
 8005642:	4019      	ands	r1, r3
 8005644:	4291      	cmp	r1, r2
 8005646:	4682      	mov	sl, r0
 8005648:	d942      	bls.n	80056d0 <_strtod_l+0xa50>
 800564a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800564c:	4b43      	ldr	r3, [pc, #268]	@ (800575c <_strtod_l+0xadc>)
 800564e:	429a      	cmp	r2, r3
 8005650:	d103      	bne.n	800565a <_strtod_l+0x9da>
 8005652:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005654:	3301      	adds	r3, #1
 8005656:	f43f ad32 	beq.w	80050be <_strtod_l+0x43e>
 800565a:	f04f 3aff 	mov.w	sl, #4294967295
 800565e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800575c <_strtod_l+0xadc>
 8005662:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005664:	9805      	ldr	r0, [sp, #20]
 8005666:	f7fe fe89 	bl	800437c <_Bfree>
 800566a:	4649      	mov	r1, r9
 800566c:	9805      	ldr	r0, [sp, #20]
 800566e:	f7fe fe85 	bl	800437c <_Bfree>
 8005672:	4641      	mov	r1, r8
 8005674:	9805      	ldr	r0, [sp, #20]
 8005676:	f7fe fe81 	bl	800437c <_Bfree>
 800567a:	4621      	mov	r1, r4
 800567c:	9805      	ldr	r0, [sp, #20]
 800567e:	f7fe fe7d 	bl	800437c <_Bfree>
 8005682:	e61c      	b.n	80052be <_strtod_l+0x63e>
 8005684:	f1ba 0f01 	cmp.w	sl, #1
 8005688:	d103      	bne.n	8005692 <_strtod_l+0xa12>
 800568a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800568c:	2b00      	cmp	r3, #0
 800568e:	f43f ada9 	beq.w	80051e4 <_strtod_l+0x564>
 8005692:	2200      	movs	r2, #0
 8005694:	4b36      	ldr	r3, [pc, #216]	@ (8005770 <_strtod_l+0xaf0>)
 8005696:	2600      	movs	r6, #0
 8005698:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800569c:	4f30      	ldr	r7, [pc, #192]	@ (8005760 <_strtod_l+0xae0>)
 800569e:	e7b3      	b.n	8005608 <_strtod_l+0x988>
 80056a0:	2600      	movs	r6, #0
 80056a2:	4f30      	ldr	r7, [pc, #192]	@ (8005764 <_strtod_l+0xae4>)
 80056a4:	e7ac      	b.n	8005600 <_strtod_l+0x980>
 80056a6:	4630      	mov	r0, r6
 80056a8:	4639      	mov	r1, r7
 80056aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005764 <_strtod_l+0xae4>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	f7fa ff13 	bl	80004d8 <__aeabi_dmul>
 80056b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056b4:	4606      	mov	r6, r0
 80056b6:	460f      	mov	r7, r1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0a1      	beq.n	8005600 <_strtod_l+0x980>
 80056bc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80056c0:	e7a2      	b.n	8005608 <_strtod_l+0x988>
 80056c2:	2200      	movs	r2, #0
 80056c4:	4b26      	ldr	r3, [pc, #152]	@ (8005760 <_strtod_l+0xae0>)
 80056c6:	4616      	mov	r6, r2
 80056c8:	461f      	mov	r7, r3
 80056ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056ce:	e79b      	b.n	8005608 <_strtod_l+0x988>
 80056d0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80056d4:	9b08      	ldr	r3, [sp, #32]
 80056d6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1c1      	bne.n	8005662 <_strtod_l+0x9e2>
 80056de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80056e2:	0d1b      	lsrs	r3, r3, #20
 80056e4:	051b      	lsls	r3, r3, #20
 80056e6:	429d      	cmp	r5, r3
 80056e8:	d1bb      	bne.n	8005662 <_strtod_l+0x9e2>
 80056ea:	4630      	mov	r0, r6
 80056ec:	4639      	mov	r1, r7
 80056ee:	f7fb fa3b 	bl	8000b68 <__aeabi_d2lz>
 80056f2:	f7fa fec3 	bl	800047c <__aeabi_l2d>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4630      	mov	r0, r6
 80056fc:	4639      	mov	r1, r7
 80056fe:	f7fa fd33 	bl	8000168 <__aeabi_dsub>
 8005702:	460b      	mov	r3, r1
 8005704:	4602      	mov	r2, r0
 8005706:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800570a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800570e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005710:	ea46 060a 	orr.w	r6, r6, sl
 8005714:	431e      	orrs	r6, r3
 8005716:	d06a      	beq.n	80057ee <_strtod_l+0xb6e>
 8005718:	a309      	add	r3, pc, #36	@ (adr r3, 8005740 <_strtod_l+0xac0>)
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	f7fb f94d 	bl	80009bc <__aeabi_dcmplt>
 8005722:	2800      	cmp	r0, #0
 8005724:	f47f acd6 	bne.w	80050d4 <_strtod_l+0x454>
 8005728:	a307      	add	r3, pc, #28	@ (adr r3, 8005748 <_strtod_l+0xac8>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005732:	f7fb f961 	bl	80009f8 <__aeabi_dcmpgt>
 8005736:	2800      	cmp	r0, #0
 8005738:	d093      	beq.n	8005662 <_strtod_l+0x9e2>
 800573a:	e4cb      	b.n	80050d4 <_strtod_l+0x454>
 800573c:	f3af 8000 	nop.w
 8005740:	94a03595 	.word	0x94a03595
 8005744:	3fdfffff 	.word	0x3fdfffff
 8005748:	35afe535 	.word	0x35afe535
 800574c:	3fe00000 	.word	0x3fe00000
 8005750:	39500000 	.word	0x39500000
 8005754:	7ff00000 	.word	0x7ff00000
 8005758:	000fffff 	.word	0x000fffff
 800575c:	7fefffff 	.word	0x7fefffff
 8005760:	3ff00000 	.word	0x3ff00000
 8005764:	3fe00000 	.word	0x3fe00000
 8005768:	7fe00000 	.word	0x7fe00000
 800576c:	7c9fffff 	.word	0x7c9fffff
 8005770:	bff00000 	.word	0xbff00000
 8005774:	9b08      	ldr	r3, [sp, #32]
 8005776:	b323      	cbz	r3, 80057c2 <_strtod_l+0xb42>
 8005778:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800577c:	d821      	bhi.n	80057c2 <_strtod_l+0xb42>
 800577e:	a328      	add	r3, pc, #160	@ (adr r3, 8005820 <_strtod_l+0xba0>)
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	f7fb f922 	bl	80009d0 <__aeabi_dcmple>
 800578c:	b1a0      	cbz	r0, 80057b8 <_strtod_l+0xb38>
 800578e:	4639      	mov	r1, r7
 8005790:	4630      	mov	r0, r6
 8005792:	f7fb f979 	bl	8000a88 <__aeabi_d2uiz>
 8005796:	2801      	cmp	r0, #1
 8005798:	bf38      	it	cc
 800579a:	2001      	movcc	r0, #1
 800579c:	f7fa fe22 	bl	80003e4 <__aeabi_ui2d>
 80057a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057a2:	4606      	mov	r6, r0
 80057a4:	460f      	mov	r7, r1
 80057a6:	b9fb      	cbnz	r3, 80057e8 <_strtod_l+0xb68>
 80057a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80057ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80057ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80057b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80057b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80057b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80057ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80057be:	1b5b      	subs	r3, r3, r5
 80057c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80057c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80057ca:	f7ff f903 	bl	80049d4 <__ulp>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4650      	mov	r0, sl
 80057d4:	4659      	mov	r1, fp
 80057d6:	f7fa fe7f 	bl	80004d8 <__aeabi_dmul>
 80057da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80057de:	f7fa fcc5 	bl	800016c <__adddf3>
 80057e2:	4682      	mov	sl, r0
 80057e4:	468b      	mov	fp, r1
 80057e6:	e775      	b.n	80056d4 <_strtod_l+0xa54>
 80057e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80057ec:	e7e0      	b.n	80057b0 <_strtod_l+0xb30>
 80057ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8005828 <_strtod_l+0xba8>)
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f7fb f8e2 	bl	80009bc <__aeabi_dcmplt>
 80057f8:	e79d      	b.n	8005736 <_strtod_l+0xab6>
 80057fa:	2300      	movs	r3, #0
 80057fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80057fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005800:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	f7ff ba79 	b.w	8004cfa <_strtod_l+0x7a>
 8005808:	2a65      	cmp	r2, #101	@ 0x65
 800580a:	f43f ab72 	beq.w	8004ef2 <_strtod_l+0x272>
 800580e:	2a45      	cmp	r2, #69	@ 0x45
 8005810:	f43f ab6f 	beq.w	8004ef2 <_strtod_l+0x272>
 8005814:	2301      	movs	r3, #1
 8005816:	f7ff bbaa 	b.w	8004f6e <_strtod_l+0x2ee>
 800581a:	bf00      	nop
 800581c:	f3af 8000 	nop.w
 8005820:	ffc00000 	.word	0xffc00000
 8005824:	41dfffff 	.word	0x41dfffff
 8005828:	94a03595 	.word	0x94a03595
 800582c:	3fcfffff 	.word	0x3fcfffff

08005830 <_strtod_r>:
 8005830:	4b01      	ldr	r3, [pc, #4]	@ (8005838 <_strtod_r+0x8>)
 8005832:	f7ff ba25 	b.w	8004c80 <_strtod_l>
 8005836:	bf00      	nop
 8005838:	20000068 	.word	0x20000068

0800583c <_strtol_l.isra.0>:
 800583c:	2b24      	cmp	r3, #36	@ 0x24
 800583e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005842:	4686      	mov	lr, r0
 8005844:	4690      	mov	r8, r2
 8005846:	d801      	bhi.n	800584c <_strtol_l.isra.0+0x10>
 8005848:	2b01      	cmp	r3, #1
 800584a:	d106      	bne.n	800585a <_strtol_l.isra.0+0x1e>
 800584c:	f7fd fdbc 	bl	80033c8 <__errno>
 8005850:	2316      	movs	r3, #22
 8005852:	6003      	str	r3, [r0, #0]
 8005854:	2000      	movs	r0, #0
 8005856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585a:	460d      	mov	r5, r1
 800585c:	4833      	ldr	r0, [pc, #204]	@ (800592c <_strtol_l.isra.0+0xf0>)
 800585e:	462a      	mov	r2, r5
 8005860:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005864:	5d06      	ldrb	r6, [r0, r4]
 8005866:	f016 0608 	ands.w	r6, r6, #8
 800586a:	d1f8      	bne.n	800585e <_strtol_l.isra.0+0x22>
 800586c:	2c2d      	cmp	r4, #45	@ 0x2d
 800586e:	d110      	bne.n	8005892 <_strtol_l.isra.0+0x56>
 8005870:	2601      	movs	r6, #1
 8005872:	782c      	ldrb	r4, [r5, #0]
 8005874:	1c95      	adds	r5, r2, #2
 8005876:	f033 0210 	bics.w	r2, r3, #16
 800587a:	d115      	bne.n	80058a8 <_strtol_l.isra.0+0x6c>
 800587c:	2c30      	cmp	r4, #48	@ 0x30
 800587e:	d10d      	bne.n	800589c <_strtol_l.isra.0+0x60>
 8005880:	782a      	ldrb	r2, [r5, #0]
 8005882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005886:	2a58      	cmp	r2, #88	@ 0x58
 8005888:	d108      	bne.n	800589c <_strtol_l.isra.0+0x60>
 800588a:	786c      	ldrb	r4, [r5, #1]
 800588c:	3502      	adds	r5, #2
 800588e:	2310      	movs	r3, #16
 8005890:	e00a      	b.n	80058a8 <_strtol_l.isra.0+0x6c>
 8005892:	2c2b      	cmp	r4, #43	@ 0x2b
 8005894:	bf04      	itt	eq
 8005896:	782c      	ldrbeq	r4, [r5, #0]
 8005898:	1c95      	addeq	r5, r2, #2
 800589a:	e7ec      	b.n	8005876 <_strtol_l.isra.0+0x3a>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f6      	bne.n	800588e <_strtol_l.isra.0+0x52>
 80058a0:	2c30      	cmp	r4, #48	@ 0x30
 80058a2:	bf14      	ite	ne
 80058a4:	230a      	movne	r3, #10
 80058a6:	2308      	moveq	r3, #8
 80058a8:	2200      	movs	r2, #0
 80058aa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80058ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80058b2:	fbbc f9f3 	udiv	r9, ip, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80058bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80058c0:	2f09      	cmp	r7, #9
 80058c2:	d80f      	bhi.n	80058e4 <_strtol_l.isra.0+0xa8>
 80058c4:	463c      	mov	r4, r7
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	dd1b      	ble.n	8005902 <_strtol_l.isra.0+0xc6>
 80058ca:	1c57      	adds	r7, r2, #1
 80058cc:	d007      	beq.n	80058de <_strtol_l.isra.0+0xa2>
 80058ce:	4581      	cmp	r9, r0
 80058d0:	d314      	bcc.n	80058fc <_strtol_l.isra.0+0xc0>
 80058d2:	d101      	bne.n	80058d8 <_strtol_l.isra.0+0x9c>
 80058d4:	45a2      	cmp	sl, r4
 80058d6:	db11      	blt.n	80058fc <_strtol_l.isra.0+0xc0>
 80058d8:	2201      	movs	r2, #1
 80058da:	fb00 4003 	mla	r0, r0, r3, r4
 80058de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058e2:	e7eb      	b.n	80058bc <_strtol_l.isra.0+0x80>
 80058e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80058e8:	2f19      	cmp	r7, #25
 80058ea:	d801      	bhi.n	80058f0 <_strtol_l.isra.0+0xb4>
 80058ec:	3c37      	subs	r4, #55	@ 0x37
 80058ee:	e7ea      	b.n	80058c6 <_strtol_l.isra.0+0x8a>
 80058f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80058f4:	2f19      	cmp	r7, #25
 80058f6:	d804      	bhi.n	8005902 <_strtol_l.isra.0+0xc6>
 80058f8:	3c57      	subs	r4, #87	@ 0x57
 80058fa:	e7e4      	b.n	80058c6 <_strtol_l.isra.0+0x8a>
 80058fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005900:	e7ed      	b.n	80058de <_strtol_l.isra.0+0xa2>
 8005902:	1c53      	adds	r3, r2, #1
 8005904:	d108      	bne.n	8005918 <_strtol_l.isra.0+0xdc>
 8005906:	2322      	movs	r3, #34	@ 0x22
 8005908:	4660      	mov	r0, ip
 800590a:	f8ce 3000 	str.w	r3, [lr]
 800590e:	f1b8 0f00 	cmp.w	r8, #0
 8005912:	d0a0      	beq.n	8005856 <_strtol_l.isra.0+0x1a>
 8005914:	1e69      	subs	r1, r5, #1
 8005916:	e006      	b.n	8005926 <_strtol_l.isra.0+0xea>
 8005918:	b106      	cbz	r6, 800591c <_strtol_l.isra.0+0xe0>
 800591a:	4240      	negs	r0, r0
 800591c:	f1b8 0f00 	cmp.w	r8, #0
 8005920:	d099      	beq.n	8005856 <_strtol_l.isra.0+0x1a>
 8005922:	2a00      	cmp	r2, #0
 8005924:	d1f6      	bne.n	8005914 <_strtol_l.isra.0+0xd8>
 8005926:	f8c8 1000 	str.w	r1, [r8]
 800592a:	e794      	b.n	8005856 <_strtol_l.isra.0+0x1a>
 800592c:	08006e41 	.word	0x08006e41

08005930 <_strtol_r>:
 8005930:	f7ff bf84 	b.w	800583c <_strtol_l.isra.0>

08005934 <__ssputs_r>:
 8005934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005938:	461f      	mov	r7, r3
 800593a:	688e      	ldr	r6, [r1, #8]
 800593c:	4682      	mov	sl, r0
 800593e:	42be      	cmp	r6, r7
 8005940:	460c      	mov	r4, r1
 8005942:	4690      	mov	r8, r2
 8005944:	680b      	ldr	r3, [r1, #0]
 8005946:	d82d      	bhi.n	80059a4 <__ssputs_r+0x70>
 8005948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800594c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005950:	d026      	beq.n	80059a0 <__ssputs_r+0x6c>
 8005952:	6965      	ldr	r5, [r4, #20]
 8005954:	6909      	ldr	r1, [r1, #16]
 8005956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800595a:	eba3 0901 	sub.w	r9, r3, r1
 800595e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005962:	1c7b      	adds	r3, r7, #1
 8005964:	444b      	add	r3, r9
 8005966:	106d      	asrs	r5, r5, #1
 8005968:	429d      	cmp	r5, r3
 800596a:	bf38      	it	cc
 800596c:	461d      	movcc	r5, r3
 800596e:	0553      	lsls	r3, r2, #21
 8005970:	d527      	bpl.n	80059c2 <__ssputs_r+0x8e>
 8005972:	4629      	mov	r1, r5
 8005974:	f7fe fc36 	bl	80041e4 <_malloc_r>
 8005978:	4606      	mov	r6, r0
 800597a:	b360      	cbz	r0, 80059d6 <__ssputs_r+0xa2>
 800597c:	464a      	mov	r2, r9
 800597e:	6921      	ldr	r1, [r4, #16]
 8005980:	f000 fa14 	bl	8005dac <memcpy>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800598a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	6126      	str	r6, [r4, #16]
 8005992:	444e      	add	r6, r9
 8005994:	6026      	str	r6, [r4, #0]
 8005996:	463e      	mov	r6, r7
 8005998:	6165      	str	r5, [r4, #20]
 800599a:	eba5 0509 	sub.w	r5, r5, r9
 800599e:	60a5      	str	r5, [r4, #8]
 80059a0:	42be      	cmp	r6, r7
 80059a2:	d900      	bls.n	80059a6 <__ssputs_r+0x72>
 80059a4:	463e      	mov	r6, r7
 80059a6:	4632      	mov	r2, r6
 80059a8:	4641      	mov	r1, r8
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	f000 f9c2 	bl	8005d34 <memmove>
 80059b0:	2000      	movs	r0, #0
 80059b2:	68a3      	ldr	r3, [r4, #8]
 80059b4:	1b9b      	subs	r3, r3, r6
 80059b6:	60a3      	str	r3, [r4, #8]
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	4433      	add	r3, r6
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c2:	462a      	mov	r2, r5
 80059c4:	f000 fd83 	bl	80064ce <_realloc_r>
 80059c8:	4606      	mov	r6, r0
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d1e0      	bne.n	8005990 <__ssputs_r+0x5c>
 80059ce:	4650      	mov	r0, sl
 80059d0:	6921      	ldr	r1, [r4, #16]
 80059d2:	f7fe fb95 	bl	8004100 <_free_r>
 80059d6:	230c      	movs	r3, #12
 80059d8:	f8ca 3000 	str.w	r3, [sl]
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	f04f 30ff 	mov.w	r0, #4294967295
 80059e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	e7e9      	b.n	80059be <__ssputs_r+0x8a>
	...

080059ec <_svfiprintf_r>:
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	4698      	mov	r8, r3
 80059f2:	898b      	ldrh	r3, [r1, #12]
 80059f4:	4607      	mov	r7, r0
 80059f6:	061b      	lsls	r3, r3, #24
 80059f8:	460d      	mov	r5, r1
 80059fa:	4614      	mov	r4, r2
 80059fc:	b09d      	sub	sp, #116	@ 0x74
 80059fe:	d510      	bpl.n	8005a22 <_svfiprintf_r+0x36>
 8005a00:	690b      	ldr	r3, [r1, #16]
 8005a02:	b973      	cbnz	r3, 8005a22 <_svfiprintf_r+0x36>
 8005a04:	2140      	movs	r1, #64	@ 0x40
 8005a06:	f7fe fbed 	bl	80041e4 <_malloc_r>
 8005a0a:	6028      	str	r0, [r5, #0]
 8005a0c:	6128      	str	r0, [r5, #16]
 8005a0e:	b930      	cbnz	r0, 8005a1e <_svfiprintf_r+0x32>
 8005a10:	230c      	movs	r3, #12
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	b01d      	add	sp, #116	@ 0x74
 8005a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1e:	2340      	movs	r3, #64	@ 0x40
 8005a20:	616b      	str	r3, [r5, #20]
 8005a22:	2300      	movs	r3, #0
 8005a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a26:	2320      	movs	r3, #32
 8005a28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a2c:	2330      	movs	r3, #48	@ 0x30
 8005a2e:	f04f 0901 	mov.w	r9, #1
 8005a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005bd0 <_svfiprintf_r+0x1e4>
 8005a3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a3e:	4623      	mov	r3, r4
 8005a40:	469a      	mov	sl, r3
 8005a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a46:	b10a      	cbz	r2, 8005a4c <_svfiprintf_r+0x60>
 8005a48:	2a25      	cmp	r2, #37	@ 0x25
 8005a4a:	d1f9      	bne.n	8005a40 <_svfiprintf_r+0x54>
 8005a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a50:	d00b      	beq.n	8005a6a <_svfiprintf_r+0x7e>
 8005a52:	465b      	mov	r3, fp
 8005a54:	4622      	mov	r2, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f7ff ff6b 	bl	8005934 <__ssputs_r>
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f000 80a7 	beq.w	8005bb2 <_svfiprintf_r+0x1c6>
 8005a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a66:	445a      	add	r2, fp
 8005a68:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 809f 	beq.w	8005bb2 <_svfiprintf_r+0x1c6>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a7e:	f10a 0a01 	add.w	sl, sl, #1
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	9307      	str	r3, [sp, #28]
 8005a86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a8c:	4654      	mov	r4, sl
 8005a8e:	2205      	movs	r2, #5
 8005a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a94:	484e      	ldr	r0, [pc, #312]	@ (8005bd0 <_svfiprintf_r+0x1e4>)
 8005a96:	f7fd fcc4 	bl	8003422 <memchr>
 8005a9a:	9a04      	ldr	r2, [sp, #16]
 8005a9c:	b9d8      	cbnz	r0, 8005ad6 <_svfiprintf_r+0xea>
 8005a9e:	06d0      	lsls	r0, r2, #27
 8005aa0:	bf44      	itt	mi
 8005aa2:	2320      	movmi	r3, #32
 8005aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aa8:	0711      	lsls	r1, r2, #28
 8005aaa:	bf44      	itt	mi
 8005aac:	232b      	movmi	r3, #43	@ 0x2b
 8005aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ab8:	d015      	beq.n	8005ae6 <_svfiprintf_r+0xfa>
 8005aba:	4654      	mov	r4, sl
 8005abc:	2000      	movs	r0, #0
 8005abe:	f04f 0c0a 	mov.w	ip, #10
 8005ac2:	9a07      	ldr	r2, [sp, #28]
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aca:	3b30      	subs	r3, #48	@ 0x30
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d94b      	bls.n	8005b68 <_svfiprintf_r+0x17c>
 8005ad0:	b1b0      	cbz	r0, 8005b00 <_svfiprintf_r+0x114>
 8005ad2:	9207      	str	r2, [sp, #28]
 8005ad4:	e014      	b.n	8005b00 <_svfiprintf_r+0x114>
 8005ad6:	eba0 0308 	sub.w	r3, r0, r8
 8005ada:	fa09 f303 	lsl.w	r3, r9, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	46a2      	mov	sl, r4
 8005ae2:	9304      	str	r3, [sp, #16]
 8005ae4:	e7d2      	b.n	8005a8c <_svfiprintf_r+0xa0>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	1d19      	adds	r1, r3, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	9103      	str	r1, [sp, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfbb      	ittet	lt
 8005af2:	425b      	neglt	r3, r3
 8005af4:	f042 0202 	orrlt.w	r2, r2, #2
 8005af8:	9307      	strge	r3, [sp, #28]
 8005afa:	9307      	strlt	r3, [sp, #28]
 8005afc:	bfb8      	it	lt
 8005afe:	9204      	strlt	r2, [sp, #16]
 8005b00:	7823      	ldrb	r3, [r4, #0]
 8005b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b04:	d10a      	bne.n	8005b1c <_svfiprintf_r+0x130>
 8005b06:	7863      	ldrb	r3, [r4, #1]
 8005b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b0a:	d132      	bne.n	8005b72 <_svfiprintf_r+0x186>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	3402      	adds	r4, #2
 8005b10:	1d1a      	adds	r2, r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	9203      	str	r2, [sp, #12]
 8005b16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b1a:	9305      	str	r3, [sp, #20]
 8005b1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005bd4 <_svfiprintf_r+0x1e8>
 8005b20:	2203      	movs	r2, #3
 8005b22:	4650      	mov	r0, sl
 8005b24:	7821      	ldrb	r1, [r4, #0]
 8005b26:	f7fd fc7c 	bl	8003422 <memchr>
 8005b2a:	b138      	cbz	r0, 8005b3c <_svfiprintf_r+0x150>
 8005b2c:	2240      	movs	r2, #64	@ 0x40
 8005b2e:	9b04      	ldr	r3, [sp, #16]
 8005b30:	eba0 000a 	sub.w	r0, r0, sl
 8005b34:	4082      	lsls	r2, r0
 8005b36:	4313      	orrs	r3, r2
 8005b38:	3401      	adds	r4, #1
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b40:	2206      	movs	r2, #6
 8005b42:	4825      	ldr	r0, [pc, #148]	@ (8005bd8 <_svfiprintf_r+0x1ec>)
 8005b44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b48:	f7fd fc6b 	bl	8003422 <memchr>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d036      	beq.n	8005bbe <_svfiprintf_r+0x1d2>
 8005b50:	4b22      	ldr	r3, [pc, #136]	@ (8005bdc <_svfiprintf_r+0x1f0>)
 8005b52:	bb1b      	cbnz	r3, 8005b9c <_svfiprintf_r+0x1b0>
 8005b54:	9b03      	ldr	r3, [sp, #12]
 8005b56:	3307      	adds	r3, #7
 8005b58:	f023 0307 	bic.w	r3, r3, #7
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	9303      	str	r3, [sp, #12]
 8005b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b62:	4433      	add	r3, r6
 8005b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b66:	e76a      	b.n	8005a3e <_svfiprintf_r+0x52>
 8005b68:	460c      	mov	r4, r1
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b70:	e7a8      	b.n	8005ac4 <_svfiprintf_r+0xd8>
 8005b72:	2300      	movs	r3, #0
 8005b74:	f04f 0c0a 	mov.w	ip, #10
 8005b78:	4619      	mov	r1, r3
 8005b7a:	3401      	adds	r4, #1
 8005b7c:	9305      	str	r3, [sp, #20]
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b84:	3a30      	subs	r2, #48	@ 0x30
 8005b86:	2a09      	cmp	r2, #9
 8005b88:	d903      	bls.n	8005b92 <_svfiprintf_r+0x1a6>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0c6      	beq.n	8005b1c <_svfiprintf_r+0x130>
 8005b8e:	9105      	str	r1, [sp, #20]
 8005b90:	e7c4      	b.n	8005b1c <_svfiprintf_r+0x130>
 8005b92:	4604      	mov	r4, r0
 8005b94:	2301      	movs	r3, #1
 8005b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b9a:	e7f0      	b.n	8005b7e <_svfiprintf_r+0x192>
 8005b9c:	ab03      	add	r3, sp, #12
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8005be0 <_svfiprintf_r+0x1f4>)
 8005ba6:	a904      	add	r1, sp, #16
 8005ba8:	f7fc fcce 	bl	8002548 <_printf_float>
 8005bac:	1c42      	adds	r2, r0, #1
 8005bae:	4606      	mov	r6, r0
 8005bb0:	d1d6      	bne.n	8005b60 <_svfiprintf_r+0x174>
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	065b      	lsls	r3, r3, #25
 8005bb6:	f53f af2d 	bmi.w	8005a14 <_svfiprintf_r+0x28>
 8005bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bbc:	e72c      	b.n	8005a18 <_svfiprintf_r+0x2c>
 8005bbe:	ab03      	add	r3, sp, #12
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	462a      	mov	r2, r5
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	4b06      	ldr	r3, [pc, #24]	@ (8005be0 <_svfiprintf_r+0x1f4>)
 8005bc8:	a904      	add	r1, sp, #16
 8005bca:	f7fc ff5b 	bl	8002a84 <_printf_i>
 8005bce:	e7ed      	b.n	8005bac <_svfiprintf_r+0x1c0>
 8005bd0:	08006c3f 	.word	0x08006c3f
 8005bd4:	08006c45 	.word	0x08006c45
 8005bd8:	08006c49 	.word	0x08006c49
 8005bdc:	08002549 	.word	0x08002549
 8005be0:	08005935 	.word	0x08005935

08005be4 <__sflush_r>:
 8005be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	0716      	lsls	r6, r2, #28
 8005bec:	4605      	mov	r5, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	d454      	bmi.n	8005c9c <__sflush_r+0xb8>
 8005bf2:	684b      	ldr	r3, [r1, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	dc02      	bgt.n	8005bfe <__sflush_r+0x1a>
 8005bf8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	dd48      	ble.n	8005c90 <__sflush_r+0xac>
 8005bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c00:	2e00      	cmp	r6, #0
 8005c02:	d045      	beq.n	8005c90 <__sflush_r+0xac>
 8005c04:	2300      	movs	r3, #0
 8005c06:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c0a:	682f      	ldr	r7, [r5, #0]
 8005c0c:	6a21      	ldr	r1, [r4, #32]
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	d030      	beq.n	8005c74 <__sflush_r+0x90>
 8005c12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	0759      	lsls	r1, r3, #29
 8005c18:	d505      	bpl.n	8005c26 <__sflush_r+0x42>
 8005c1a:	6863      	ldr	r3, [r4, #4]
 8005c1c:	1ad2      	subs	r2, r2, r3
 8005c1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c20:	b10b      	cbz	r3, 8005c26 <__sflush_r+0x42>
 8005c22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c24:	1ad2      	subs	r2, r2, r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	4628      	mov	r0, r5
 8005c2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c2c:	6a21      	ldr	r1, [r4, #32]
 8005c2e:	47b0      	blx	r6
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	d106      	bne.n	8005c44 <__sflush_r+0x60>
 8005c36:	6829      	ldr	r1, [r5, #0]
 8005c38:	291d      	cmp	r1, #29
 8005c3a:	d82b      	bhi.n	8005c94 <__sflush_r+0xb0>
 8005c3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ce0 <__sflush_r+0xfc>)
 8005c3e:	40ca      	lsrs	r2, r1
 8005c40:	07d6      	lsls	r6, r2, #31
 8005c42:	d527      	bpl.n	8005c94 <__sflush_r+0xb0>
 8005c44:	2200      	movs	r2, #0
 8005c46:	6062      	str	r2, [r4, #4]
 8005c48:	6922      	ldr	r2, [r4, #16]
 8005c4a:	04d9      	lsls	r1, r3, #19
 8005c4c:	6022      	str	r2, [r4, #0]
 8005c4e:	d504      	bpl.n	8005c5a <__sflush_r+0x76>
 8005c50:	1c42      	adds	r2, r0, #1
 8005c52:	d101      	bne.n	8005c58 <__sflush_r+0x74>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b903      	cbnz	r3, 8005c5a <__sflush_r+0x76>
 8005c58:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c5c:	602f      	str	r7, [r5, #0]
 8005c5e:	b1b9      	cbz	r1, 8005c90 <__sflush_r+0xac>
 8005c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c64:	4299      	cmp	r1, r3
 8005c66:	d002      	beq.n	8005c6e <__sflush_r+0x8a>
 8005c68:	4628      	mov	r0, r5
 8005c6a:	f7fe fa49 	bl	8004100 <_free_r>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c72:	e00d      	b.n	8005c90 <__sflush_r+0xac>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b0      	blx	r6
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	1c50      	adds	r0, r2, #1
 8005c7e:	d1c9      	bne.n	8005c14 <__sflush_r+0x30>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0c6      	beq.n	8005c14 <__sflush_r+0x30>
 8005c86:	2b1d      	cmp	r3, #29
 8005c88:	d001      	beq.n	8005c8e <__sflush_r+0xaa>
 8005c8a:	2b16      	cmp	r3, #22
 8005c8c:	d11d      	bne.n	8005cca <__sflush_r+0xe6>
 8005c8e:	602f      	str	r7, [r5, #0]
 8005c90:	2000      	movs	r0, #0
 8005c92:	e021      	b.n	8005cd8 <__sflush_r+0xf4>
 8005c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c98:	b21b      	sxth	r3, r3
 8005c9a:	e01a      	b.n	8005cd2 <__sflush_r+0xee>
 8005c9c:	690f      	ldr	r7, [r1, #16]
 8005c9e:	2f00      	cmp	r7, #0
 8005ca0:	d0f6      	beq.n	8005c90 <__sflush_r+0xac>
 8005ca2:	0793      	lsls	r3, r2, #30
 8005ca4:	bf18      	it	ne
 8005ca6:	2300      	movne	r3, #0
 8005ca8:	680e      	ldr	r6, [r1, #0]
 8005caa:	bf08      	it	eq
 8005cac:	694b      	ldreq	r3, [r1, #20]
 8005cae:	1bf6      	subs	r6, r6, r7
 8005cb0:	600f      	str	r7, [r1, #0]
 8005cb2:	608b      	str	r3, [r1, #8]
 8005cb4:	2e00      	cmp	r6, #0
 8005cb6:	ddeb      	ble.n	8005c90 <__sflush_r+0xac>
 8005cb8:	4633      	mov	r3, r6
 8005cba:	463a      	mov	r2, r7
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	6a21      	ldr	r1, [r4, #32]
 8005cc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005cc4:	47e0      	blx	ip
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	dc07      	bgt.n	8005cda <__sflush_r+0xf6>
 8005cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cda:	4407      	add	r7, r0
 8005cdc:	1a36      	subs	r6, r6, r0
 8005cde:	e7e9      	b.n	8005cb4 <__sflush_r+0xd0>
 8005ce0:	20400001 	.word	0x20400001

08005ce4 <_fflush_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	690b      	ldr	r3, [r1, #16]
 8005ce8:	4605      	mov	r5, r0
 8005cea:	460c      	mov	r4, r1
 8005cec:	b913      	cbnz	r3, 8005cf4 <_fflush_r+0x10>
 8005cee:	2500      	movs	r5, #0
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	b118      	cbz	r0, 8005cfe <_fflush_r+0x1a>
 8005cf6:	6a03      	ldr	r3, [r0, #32]
 8005cf8:	b90b      	cbnz	r3, 8005cfe <_fflush_r+0x1a>
 8005cfa:	f7fd fa77 	bl	80031ec <__sinit>
 8005cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f3      	beq.n	8005cee <_fflush_r+0xa>
 8005d06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d08:	07d0      	lsls	r0, r2, #31
 8005d0a:	d404      	bmi.n	8005d16 <_fflush_r+0x32>
 8005d0c:	0599      	lsls	r1, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <_fflush_r+0x32>
 8005d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d12:	f7fd fb84 	bl	800341e <__retarget_lock_acquire_recursive>
 8005d16:	4628      	mov	r0, r5
 8005d18:	4621      	mov	r1, r4
 8005d1a:	f7ff ff63 	bl	8005be4 <__sflush_r>
 8005d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d20:	4605      	mov	r5, r0
 8005d22:	07da      	lsls	r2, r3, #31
 8005d24:	d4e4      	bmi.n	8005cf0 <_fflush_r+0xc>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	059b      	lsls	r3, r3, #22
 8005d2a:	d4e1      	bmi.n	8005cf0 <_fflush_r+0xc>
 8005d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d2e:	f7fd fb77 	bl	8003420 <__retarget_lock_release_recursive>
 8005d32:	e7dd      	b.n	8005cf0 <_fflush_r+0xc>

08005d34 <memmove>:
 8005d34:	4288      	cmp	r0, r1
 8005d36:	b510      	push	{r4, lr}
 8005d38:	eb01 0402 	add.w	r4, r1, r2
 8005d3c:	d902      	bls.n	8005d44 <memmove+0x10>
 8005d3e:	4284      	cmp	r4, r0
 8005d40:	4623      	mov	r3, r4
 8005d42:	d807      	bhi.n	8005d54 <memmove+0x20>
 8005d44:	1e43      	subs	r3, r0, #1
 8005d46:	42a1      	cmp	r1, r4
 8005d48:	d008      	beq.n	8005d5c <memmove+0x28>
 8005d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d52:	e7f8      	b.n	8005d46 <memmove+0x12>
 8005d54:	4601      	mov	r1, r0
 8005d56:	4402      	add	r2, r0
 8005d58:	428a      	cmp	r2, r1
 8005d5a:	d100      	bne.n	8005d5e <memmove+0x2a>
 8005d5c:	bd10      	pop	{r4, pc}
 8005d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d66:	e7f7      	b.n	8005d58 <memmove+0x24>

08005d68 <strncmp>:
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	b16a      	cbz	r2, 8005d88 <strncmp+0x20>
 8005d6c:	3901      	subs	r1, #1
 8005d6e:	1884      	adds	r4, r0, r2
 8005d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d103      	bne.n	8005d84 <strncmp+0x1c>
 8005d7c:	42a0      	cmp	r0, r4
 8005d7e:	d001      	beq.n	8005d84 <strncmp+0x1c>
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	d1f5      	bne.n	8005d70 <strncmp+0x8>
 8005d84:	1ad0      	subs	r0, r2, r3
 8005d86:	bd10      	pop	{r4, pc}
 8005d88:	4610      	mov	r0, r2
 8005d8a:	e7fc      	b.n	8005d86 <strncmp+0x1e>

08005d8c <_sbrk_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4d05      	ldr	r5, [pc, #20]	@ (8005da8 <_sbrk_r+0x1c>)
 8005d92:	4604      	mov	r4, r0
 8005d94:	4608      	mov	r0, r1
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	f7fb f940 	bl	800101c <_sbrk>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_sbrk_r+0x1a>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_sbrk_r+0x1a>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	20000380 	.word	0x20000380

08005dac <memcpy>:
 8005dac:	440a      	add	r2, r1
 8005dae:	4291      	cmp	r1, r2
 8005db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005db4:	d100      	bne.n	8005db8 <memcpy+0xc>
 8005db6:	4770      	bx	lr
 8005db8:	b510      	push	{r4, lr}
 8005dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dbe:	4291      	cmp	r1, r2
 8005dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dc4:	d1f9      	bne.n	8005dba <memcpy+0xe>
 8005dc6:	bd10      	pop	{r4, pc}

08005dc8 <nan>:
 8005dc8:	2000      	movs	r0, #0
 8005dca:	4901      	ldr	r1, [pc, #4]	@ (8005dd0 <nan+0x8>)
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	7ff80000 	.word	0x7ff80000

08005dd4 <__assert_func>:
 8005dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dd6:	4614      	mov	r4, r2
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b09      	ldr	r3, [pc, #36]	@ (8005e00 <__assert_func+0x2c>)
 8005ddc:	4605      	mov	r5, r0
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68d8      	ldr	r0, [r3, #12]
 8005de2:	b14c      	cbz	r4, 8005df8 <__assert_func+0x24>
 8005de4:	4b07      	ldr	r3, [pc, #28]	@ (8005e04 <__assert_func+0x30>)
 8005de6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dea:	9100      	str	r1, [sp, #0]
 8005dec:	462b      	mov	r3, r5
 8005dee:	4906      	ldr	r1, [pc, #24]	@ (8005e08 <__assert_func+0x34>)
 8005df0:	f000 fba8 	bl	8006544 <fiprintf>
 8005df4:	f000 fbb8 	bl	8006568 <abort>
 8005df8:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <__assert_func+0x38>)
 8005dfa:	461c      	mov	r4, r3
 8005dfc:	e7f3      	b.n	8005de6 <__assert_func+0x12>
 8005dfe:	bf00      	nop
 8005e00:	20000018 	.word	0x20000018
 8005e04:	08006c58 	.word	0x08006c58
 8005e08:	08006c65 	.word	0x08006c65
 8005e0c:	08006c93 	.word	0x08006c93

08005e10 <_calloc_r>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	fba1 5402 	umull	r5, r4, r1, r2
 8005e16:	b934      	cbnz	r4, 8005e26 <_calloc_r+0x16>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f7fe f9e3 	bl	80041e4 <_malloc_r>
 8005e1e:	4606      	mov	r6, r0
 8005e20:	b928      	cbnz	r0, 8005e2e <_calloc_r+0x1e>
 8005e22:	4630      	mov	r0, r6
 8005e24:	bd70      	pop	{r4, r5, r6, pc}
 8005e26:	220c      	movs	r2, #12
 8005e28:	2600      	movs	r6, #0
 8005e2a:	6002      	str	r2, [r0, #0]
 8005e2c:	e7f9      	b.n	8005e22 <_calloc_r+0x12>
 8005e2e:	462a      	mov	r2, r5
 8005e30:	4621      	mov	r1, r4
 8005e32:	f7fd fa76 	bl	8003322 <memset>
 8005e36:	e7f4      	b.n	8005e22 <_calloc_r+0x12>

08005e38 <rshift>:
 8005e38:	6903      	ldr	r3, [r0, #16]
 8005e3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005e42:	f100 0414 	add.w	r4, r0, #20
 8005e46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005e4a:	dd46      	ble.n	8005eda <rshift+0xa2>
 8005e4c:	f011 011f 	ands.w	r1, r1, #31
 8005e50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005e54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005e58:	d10c      	bne.n	8005e74 <rshift+0x3c>
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f100 0710 	add.w	r7, r0, #16
 8005e60:	42b1      	cmp	r1, r6
 8005e62:	d335      	bcc.n	8005ed0 <rshift+0x98>
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	1eea      	subs	r2, r5, #3
 8005e6a:	4296      	cmp	r6, r2
 8005e6c:	bf38      	it	cc
 8005e6e:	2300      	movcc	r3, #0
 8005e70:	4423      	add	r3, r4
 8005e72:	e015      	b.n	8005ea0 <rshift+0x68>
 8005e74:	46a1      	mov	r9, r4
 8005e76:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005e7a:	f1c1 0820 	rsb	r8, r1, #32
 8005e7e:	40cf      	lsrs	r7, r1
 8005e80:	f105 0e04 	add.w	lr, r5, #4
 8005e84:	4576      	cmp	r6, lr
 8005e86:	46f4      	mov	ip, lr
 8005e88:	d816      	bhi.n	8005eb8 <rshift+0x80>
 8005e8a:	1a9a      	subs	r2, r3, r2
 8005e8c:	0092      	lsls	r2, r2, #2
 8005e8e:	3a04      	subs	r2, #4
 8005e90:	3501      	adds	r5, #1
 8005e92:	42ae      	cmp	r6, r5
 8005e94:	bf38      	it	cc
 8005e96:	2200      	movcc	r2, #0
 8005e98:	18a3      	adds	r3, r4, r2
 8005e9a:	50a7      	str	r7, [r4, r2]
 8005e9c:	b107      	cbz	r7, 8005ea0 <rshift+0x68>
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	eba3 0204 	sub.w	r2, r3, r4
 8005ea6:	bf08      	it	eq
 8005ea8:	2300      	moveq	r3, #0
 8005eaa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005eae:	6102      	str	r2, [r0, #16]
 8005eb0:	bf08      	it	eq
 8005eb2:	6143      	streq	r3, [r0, #20]
 8005eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eb8:	f8dc c000 	ldr.w	ip, [ip]
 8005ebc:	fa0c fc08 	lsl.w	ip, ip, r8
 8005ec0:	ea4c 0707 	orr.w	r7, ip, r7
 8005ec4:	f849 7b04 	str.w	r7, [r9], #4
 8005ec8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ecc:	40cf      	lsrs	r7, r1
 8005ece:	e7d9      	b.n	8005e84 <rshift+0x4c>
 8005ed0:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ed4:	f847 cf04 	str.w	ip, [r7, #4]!
 8005ed8:	e7c2      	b.n	8005e60 <rshift+0x28>
 8005eda:	4623      	mov	r3, r4
 8005edc:	e7e0      	b.n	8005ea0 <rshift+0x68>

08005ede <__hexdig_fun>:
 8005ede:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8005ee2:	2b09      	cmp	r3, #9
 8005ee4:	d802      	bhi.n	8005eec <__hexdig_fun+0xe>
 8005ee6:	3820      	subs	r0, #32
 8005ee8:	b2c0      	uxtb	r0, r0
 8005eea:	4770      	bx	lr
 8005eec:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8005ef0:	2b05      	cmp	r3, #5
 8005ef2:	d801      	bhi.n	8005ef8 <__hexdig_fun+0x1a>
 8005ef4:	3847      	subs	r0, #71	@ 0x47
 8005ef6:	e7f7      	b.n	8005ee8 <__hexdig_fun+0xa>
 8005ef8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d801      	bhi.n	8005f04 <__hexdig_fun+0x26>
 8005f00:	3827      	subs	r0, #39	@ 0x27
 8005f02:	e7f1      	b.n	8005ee8 <__hexdig_fun+0xa>
 8005f04:	2000      	movs	r0, #0
 8005f06:	4770      	bx	lr

08005f08 <__gethex>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	468a      	mov	sl, r1
 8005f0e:	4690      	mov	r8, r2
 8005f10:	b085      	sub	sp, #20
 8005f12:	9302      	str	r3, [sp, #8]
 8005f14:	680b      	ldr	r3, [r1, #0]
 8005f16:	9001      	str	r0, [sp, #4]
 8005f18:	1c9c      	adds	r4, r3, #2
 8005f1a:	46a1      	mov	r9, r4
 8005f1c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005f20:	2830      	cmp	r0, #48	@ 0x30
 8005f22:	d0fa      	beq.n	8005f1a <__gethex+0x12>
 8005f24:	eba9 0303 	sub.w	r3, r9, r3
 8005f28:	f1a3 0b02 	sub.w	fp, r3, #2
 8005f2c:	f7ff ffd7 	bl	8005ede <__hexdig_fun>
 8005f30:	4605      	mov	r5, r0
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d168      	bne.n	8006008 <__gethex+0x100>
 8005f36:	2201      	movs	r2, #1
 8005f38:	4648      	mov	r0, r9
 8005f3a:	499f      	ldr	r1, [pc, #636]	@ (80061b8 <__gethex+0x2b0>)
 8005f3c:	f7ff ff14 	bl	8005d68 <strncmp>
 8005f40:	4607      	mov	r7, r0
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d167      	bne.n	8006016 <__gethex+0x10e>
 8005f46:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005f4a:	4626      	mov	r6, r4
 8005f4c:	f7ff ffc7 	bl	8005ede <__hexdig_fun>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d062      	beq.n	800601a <__gethex+0x112>
 8005f54:	4623      	mov	r3, r4
 8005f56:	7818      	ldrb	r0, [r3, #0]
 8005f58:	4699      	mov	r9, r3
 8005f5a:	2830      	cmp	r0, #48	@ 0x30
 8005f5c:	f103 0301 	add.w	r3, r3, #1
 8005f60:	d0f9      	beq.n	8005f56 <__gethex+0x4e>
 8005f62:	f7ff ffbc 	bl	8005ede <__hexdig_fun>
 8005f66:	fab0 f580 	clz	r5, r0
 8005f6a:	f04f 0b01 	mov.w	fp, #1
 8005f6e:	096d      	lsrs	r5, r5, #5
 8005f70:	464a      	mov	r2, r9
 8005f72:	4616      	mov	r6, r2
 8005f74:	7830      	ldrb	r0, [r6, #0]
 8005f76:	3201      	adds	r2, #1
 8005f78:	f7ff ffb1 	bl	8005ede <__hexdig_fun>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d1f8      	bne.n	8005f72 <__gethex+0x6a>
 8005f80:	2201      	movs	r2, #1
 8005f82:	4630      	mov	r0, r6
 8005f84:	498c      	ldr	r1, [pc, #560]	@ (80061b8 <__gethex+0x2b0>)
 8005f86:	f7ff feef 	bl	8005d68 <strncmp>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d13f      	bne.n	800600e <__gethex+0x106>
 8005f8e:	b944      	cbnz	r4, 8005fa2 <__gethex+0x9a>
 8005f90:	1c74      	adds	r4, r6, #1
 8005f92:	4622      	mov	r2, r4
 8005f94:	4616      	mov	r6, r2
 8005f96:	7830      	ldrb	r0, [r6, #0]
 8005f98:	3201      	adds	r2, #1
 8005f9a:	f7ff ffa0 	bl	8005ede <__hexdig_fun>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d1f8      	bne.n	8005f94 <__gethex+0x8c>
 8005fa2:	1ba4      	subs	r4, r4, r6
 8005fa4:	00a7      	lsls	r7, r4, #2
 8005fa6:	7833      	ldrb	r3, [r6, #0]
 8005fa8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005fac:	2b50      	cmp	r3, #80	@ 0x50
 8005fae:	d13e      	bne.n	800602e <__gethex+0x126>
 8005fb0:	7873      	ldrb	r3, [r6, #1]
 8005fb2:	2b2b      	cmp	r3, #43	@ 0x2b
 8005fb4:	d033      	beq.n	800601e <__gethex+0x116>
 8005fb6:	2b2d      	cmp	r3, #45	@ 0x2d
 8005fb8:	d034      	beq.n	8006024 <__gethex+0x11c>
 8005fba:	2400      	movs	r4, #0
 8005fbc:	1c71      	adds	r1, r6, #1
 8005fbe:	7808      	ldrb	r0, [r1, #0]
 8005fc0:	f7ff ff8d 	bl	8005ede <__hexdig_fun>
 8005fc4:	1e43      	subs	r3, r0, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b18      	cmp	r3, #24
 8005fca:	d830      	bhi.n	800602e <__gethex+0x126>
 8005fcc:	f1a0 0210 	sub.w	r2, r0, #16
 8005fd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005fd4:	f7ff ff83 	bl	8005ede <__hexdig_fun>
 8005fd8:	f100 3cff 	add.w	ip, r0, #4294967295
 8005fdc:	fa5f fc8c 	uxtb.w	ip, ip
 8005fe0:	f1bc 0f18 	cmp.w	ip, #24
 8005fe4:	f04f 030a 	mov.w	r3, #10
 8005fe8:	d91e      	bls.n	8006028 <__gethex+0x120>
 8005fea:	b104      	cbz	r4, 8005fee <__gethex+0xe6>
 8005fec:	4252      	negs	r2, r2
 8005fee:	4417      	add	r7, r2
 8005ff0:	f8ca 1000 	str.w	r1, [sl]
 8005ff4:	b1ed      	cbz	r5, 8006032 <__gethex+0x12a>
 8005ff6:	f1bb 0f00 	cmp.w	fp, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2506      	moveq	r5, #6
 8005ffe:	2500      	movne	r5, #0
 8006000:	4628      	mov	r0, r5
 8006002:	b005      	add	sp, #20
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	2500      	movs	r5, #0
 800600a:	462c      	mov	r4, r5
 800600c:	e7b0      	b.n	8005f70 <__gethex+0x68>
 800600e:	2c00      	cmp	r4, #0
 8006010:	d1c7      	bne.n	8005fa2 <__gethex+0x9a>
 8006012:	4627      	mov	r7, r4
 8006014:	e7c7      	b.n	8005fa6 <__gethex+0x9e>
 8006016:	464e      	mov	r6, r9
 8006018:	462f      	mov	r7, r5
 800601a:	2501      	movs	r5, #1
 800601c:	e7c3      	b.n	8005fa6 <__gethex+0x9e>
 800601e:	2400      	movs	r4, #0
 8006020:	1cb1      	adds	r1, r6, #2
 8006022:	e7cc      	b.n	8005fbe <__gethex+0xb6>
 8006024:	2401      	movs	r4, #1
 8006026:	e7fb      	b.n	8006020 <__gethex+0x118>
 8006028:	fb03 0002 	mla	r0, r3, r2, r0
 800602c:	e7ce      	b.n	8005fcc <__gethex+0xc4>
 800602e:	4631      	mov	r1, r6
 8006030:	e7de      	b.n	8005ff0 <__gethex+0xe8>
 8006032:	4629      	mov	r1, r5
 8006034:	eba6 0309 	sub.w	r3, r6, r9
 8006038:	3b01      	subs	r3, #1
 800603a:	2b07      	cmp	r3, #7
 800603c:	dc0a      	bgt.n	8006054 <__gethex+0x14c>
 800603e:	9801      	ldr	r0, [sp, #4]
 8006040:	f7fe f95c 	bl	80042fc <_Balloc>
 8006044:	4604      	mov	r4, r0
 8006046:	b940      	cbnz	r0, 800605a <__gethex+0x152>
 8006048:	4602      	mov	r2, r0
 800604a:	21e4      	movs	r1, #228	@ 0xe4
 800604c:	4b5b      	ldr	r3, [pc, #364]	@ (80061bc <__gethex+0x2b4>)
 800604e:	485c      	ldr	r0, [pc, #368]	@ (80061c0 <__gethex+0x2b8>)
 8006050:	f7ff fec0 	bl	8005dd4 <__assert_func>
 8006054:	3101      	adds	r1, #1
 8006056:	105b      	asrs	r3, r3, #1
 8006058:	e7ef      	b.n	800603a <__gethex+0x132>
 800605a:	2300      	movs	r3, #0
 800605c:	f100 0a14 	add.w	sl, r0, #20
 8006060:	4655      	mov	r5, sl
 8006062:	469b      	mov	fp, r3
 8006064:	45b1      	cmp	r9, r6
 8006066:	d337      	bcc.n	80060d8 <__gethex+0x1d0>
 8006068:	f845 bb04 	str.w	fp, [r5], #4
 800606c:	eba5 050a 	sub.w	r5, r5, sl
 8006070:	10ad      	asrs	r5, r5, #2
 8006072:	6125      	str	r5, [r4, #16]
 8006074:	4658      	mov	r0, fp
 8006076:	f7fe fa33 	bl	80044e0 <__hi0bits>
 800607a:	016d      	lsls	r5, r5, #5
 800607c:	f8d8 6000 	ldr.w	r6, [r8]
 8006080:	1a2d      	subs	r5, r5, r0
 8006082:	42b5      	cmp	r5, r6
 8006084:	dd54      	ble.n	8006130 <__gethex+0x228>
 8006086:	1bad      	subs	r5, r5, r6
 8006088:	4629      	mov	r1, r5
 800608a:	4620      	mov	r0, r4
 800608c:	f7fe fdb5 	bl	8004bfa <__any_on>
 8006090:	4681      	mov	r9, r0
 8006092:	b178      	cbz	r0, 80060b4 <__gethex+0x1ac>
 8006094:	f04f 0901 	mov.w	r9, #1
 8006098:	1e6b      	subs	r3, r5, #1
 800609a:	1159      	asrs	r1, r3, #5
 800609c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80060a0:	f003 021f 	and.w	r2, r3, #31
 80060a4:	fa09 f202 	lsl.w	r2, r9, r2
 80060a8:	420a      	tst	r2, r1
 80060aa:	d003      	beq.n	80060b4 <__gethex+0x1ac>
 80060ac:	454b      	cmp	r3, r9
 80060ae:	dc36      	bgt.n	800611e <__gethex+0x216>
 80060b0:	f04f 0902 	mov.w	r9, #2
 80060b4:	4629      	mov	r1, r5
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7ff febe 	bl	8005e38 <rshift>
 80060bc:	442f      	add	r7, r5
 80060be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060c2:	42bb      	cmp	r3, r7
 80060c4:	da42      	bge.n	800614c <__gethex+0x244>
 80060c6:	4621      	mov	r1, r4
 80060c8:	9801      	ldr	r0, [sp, #4]
 80060ca:	f7fe f957 	bl	800437c <_Bfree>
 80060ce:	2300      	movs	r3, #0
 80060d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060d2:	25a3      	movs	r5, #163	@ 0xa3
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e793      	b.n	8006000 <__gethex+0xf8>
 80060d8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80060dc:	2a2e      	cmp	r2, #46	@ 0x2e
 80060de:	d012      	beq.n	8006106 <__gethex+0x1fe>
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d104      	bne.n	80060ee <__gethex+0x1e6>
 80060e4:	f845 bb04 	str.w	fp, [r5], #4
 80060e8:	f04f 0b00 	mov.w	fp, #0
 80060ec:	465b      	mov	r3, fp
 80060ee:	7830      	ldrb	r0, [r6, #0]
 80060f0:	9303      	str	r3, [sp, #12]
 80060f2:	f7ff fef4 	bl	8005ede <__hexdig_fun>
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	f000 000f 	and.w	r0, r0, #15
 80060fc:	4098      	lsls	r0, r3
 80060fe:	ea4b 0b00 	orr.w	fp, fp, r0
 8006102:	3304      	adds	r3, #4
 8006104:	e7ae      	b.n	8006064 <__gethex+0x15c>
 8006106:	45b1      	cmp	r9, r6
 8006108:	d8ea      	bhi.n	80060e0 <__gethex+0x1d8>
 800610a:	2201      	movs	r2, #1
 800610c:	4630      	mov	r0, r6
 800610e:	492a      	ldr	r1, [pc, #168]	@ (80061b8 <__gethex+0x2b0>)
 8006110:	9303      	str	r3, [sp, #12]
 8006112:	f7ff fe29 	bl	8005d68 <strncmp>
 8006116:	9b03      	ldr	r3, [sp, #12]
 8006118:	2800      	cmp	r0, #0
 800611a:	d1e1      	bne.n	80060e0 <__gethex+0x1d8>
 800611c:	e7a2      	b.n	8006064 <__gethex+0x15c>
 800611e:	4620      	mov	r0, r4
 8006120:	1ea9      	subs	r1, r5, #2
 8006122:	f7fe fd6a 	bl	8004bfa <__any_on>
 8006126:	2800      	cmp	r0, #0
 8006128:	d0c2      	beq.n	80060b0 <__gethex+0x1a8>
 800612a:	f04f 0903 	mov.w	r9, #3
 800612e:	e7c1      	b.n	80060b4 <__gethex+0x1ac>
 8006130:	da09      	bge.n	8006146 <__gethex+0x23e>
 8006132:	1b75      	subs	r5, r6, r5
 8006134:	4621      	mov	r1, r4
 8006136:	462a      	mov	r2, r5
 8006138:	9801      	ldr	r0, [sp, #4]
 800613a:	f7fe fb2f 	bl	800479c <__lshift>
 800613e:	4604      	mov	r4, r0
 8006140:	1b7f      	subs	r7, r7, r5
 8006142:	f100 0a14 	add.w	sl, r0, #20
 8006146:	f04f 0900 	mov.w	r9, #0
 800614a:	e7b8      	b.n	80060be <__gethex+0x1b6>
 800614c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006150:	42bd      	cmp	r5, r7
 8006152:	dd6f      	ble.n	8006234 <__gethex+0x32c>
 8006154:	1bed      	subs	r5, r5, r7
 8006156:	42ae      	cmp	r6, r5
 8006158:	dc34      	bgt.n	80061c4 <__gethex+0x2bc>
 800615a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d022      	beq.n	80061a8 <__gethex+0x2a0>
 8006162:	2b03      	cmp	r3, #3
 8006164:	d024      	beq.n	80061b0 <__gethex+0x2a8>
 8006166:	2b01      	cmp	r3, #1
 8006168:	d115      	bne.n	8006196 <__gethex+0x28e>
 800616a:	42ae      	cmp	r6, r5
 800616c:	d113      	bne.n	8006196 <__gethex+0x28e>
 800616e:	2e01      	cmp	r6, #1
 8006170:	d10b      	bne.n	800618a <__gethex+0x282>
 8006172:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006176:	9a02      	ldr	r2, [sp, #8]
 8006178:	2562      	movs	r5, #98	@ 0x62
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	2301      	movs	r3, #1
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	f8ca 3000 	str.w	r3, [sl]
 8006184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006186:	601c      	str	r4, [r3, #0]
 8006188:	e73a      	b.n	8006000 <__gethex+0xf8>
 800618a:	4620      	mov	r0, r4
 800618c:	1e71      	subs	r1, r6, #1
 800618e:	f7fe fd34 	bl	8004bfa <__any_on>
 8006192:	2800      	cmp	r0, #0
 8006194:	d1ed      	bne.n	8006172 <__gethex+0x26a>
 8006196:	4621      	mov	r1, r4
 8006198:	9801      	ldr	r0, [sp, #4]
 800619a:	f7fe f8ef 	bl	800437c <_Bfree>
 800619e:	2300      	movs	r3, #0
 80061a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061a2:	2550      	movs	r5, #80	@ 0x50
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e72b      	b.n	8006000 <__gethex+0xf8>
 80061a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f3      	bne.n	8006196 <__gethex+0x28e>
 80061ae:	e7e0      	b.n	8006172 <__gethex+0x26a>
 80061b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1dd      	bne.n	8006172 <__gethex+0x26a>
 80061b6:	e7ee      	b.n	8006196 <__gethex+0x28e>
 80061b8:	08006c3d 	.word	0x08006c3d
 80061bc:	08006bd3 	.word	0x08006bd3
 80061c0:	08006c94 	.word	0x08006c94
 80061c4:	1e6f      	subs	r7, r5, #1
 80061c6:	f1b9 0f00 	cmp.w	r9, #0
 80061ca:	d130      	bne.n	800622e <__gethex+0x326>
 80061cc:	b127      	cbz	r7, 80061d8 <__gethex+0x2d0>
 80061ce:	4639      	mov	r1, r7
 80061d0:	4620      	mov	r0, r4
 80061d2:	f7fe fd12 	bl	8004bfa <__any_on>
 80061d6:	4681      	mov	r9, r0
 80061d8:	2301      	movs	r3, #1
 80061da:	4629      	mov	r1, r5
 80061dc:	1b76      	subs	r6, r6, r5
 80061de:	2502      	movs	r5, #2
 80061e0:	117a      	asrs	r2, r7, #5
 80061e2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80061e6:	f007 071f 	and.w	r7, r7, #31
 80061ea:	40bb      	lsls	r3, r7
 80061ec:	4213      	tst	r3, r2
 80061ee:	4620      	mov	r0, r4
 80061f0:	bf18      	it	ne
 80061f2:	f049 0902 	orrne.w	r9, r9, #2
 80061f6:	f7ff fe1f 	bl	8005e38 <rshift>
 80061fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80061fe:	f1b9 0f00 	cmp.w	r9, #0
 8006202:	d047      	beq.n	8006294 <__gethex+0x38c>
 8006204:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d015      	beq.n	8006238 <__gethex+0x330>
 800620c:	2b03      	cmp	r3, #3
 800620e:	d017      	beq.n	8006240 <__gethex+0x338>
 8006210:	2b01      	cmp	r3, #1
 8006212:	d109      	bne.n	8006228 <__gethex+0x320>
 8006214:	f019 0f02 	tst.w	r9, #2
 8006218:	d006      	beq.n	8006228 <__gethex+0x320>
 800621a:	f8da 3000 	ldr.w	r3, [sl]
 800621e:	ea49 0903 	orr.w	r9, r9, r3
 8006222:	f019 0f01 	tst.w	r9, #1
 8006226:	d10e      	bne.n	8006246 <__gethex+0x33e>
 8006228:	f045 0510 	orr.w	r5, r5, #16
 800622c:	e032      	b.n	8006294 <__gethex+0x38c>
 800622e:	f04f 0901 	mov.w	r9, #1
 8006232:	e7d1      	b.n	80061d8 <__gethex+0x2d0>
 8006234:	2501      	movs	r5, #1
 8006236:	e7e2      	b.n	80061fe <__gethex+0x2f6>
 8006238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800623a:	f1c3 0301 	rsb	r3, r3, #1
 800623e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <__gethex+0x320>
 8006246:	f04f 0c00 	mov.w	ip, #0
 800624a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800624e:	f104 0314 	add.w	r3, r4, #20
 8006252:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006256:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800625a:	4618      	mov	r0, r3
 800625c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006260:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006264:	d01b      	beq.n	800629e <__gethex+0x396>
 8006266:	3201      	adds	r2, #1
 8006268:	6002      	str	r2, [r0, #0]
 800626a:	2d02      	cmp	r5, #2
 800626c:	f104 0314 	add.w	r3, r4, #20
 8006270:	d13c      	bne.n	80062ec <__gethex+0x3e4>
 8006272:	f8d8 2000 	ldr.w	r2, [r8]
 8006276:	3a01      	subs	r2, #1
 8006278:	42b2      	cmp	r2, r6
 800627a:	d109      	bne.n	8006290 <__gethex+0x388>
 800627c:	2201      	movs	r2, #1
 800627e:	1171      	asrs	r1, r6, #5
 8006280:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006284:	f006 061f 	and.w	r6, r6, #31
 8006288:	fa02 f606 	lsl.w	r6, r2, r6
 800628c:	421e      	tst	r6, r3
 800628e:	d13a      	bne.n	8006306 <__gethex+0x3fe>
 8006290:	f045 0520 	orr.w	r5, r5, #32
 8006294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006296:	601c      	str	r4, [r3, #0]
 8006298:	9b02      	ldr	r3, [sp, #8]
 800629a:	601f      	str	r7, [r3, #0]
 800629c:	e6b0      	b.n	8006000 <__gethex+0xf8>
 800629e:	4299      	cmp	r1, r3
 80062a0:	f843 cc04 	str.w	ip, [r3, #-4]
 80062a4:	d8d9      	bhi.n	800625a <__gethex+0x352>
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	459b      	cmp	fp, r3
 80062aa:	db17      	blt.n	80062dc <__gethex+0x3d4>
 80062ac:	6861      	ldr	r1, [r4, #4]
 80062ae:	9801      	ldr	r0, [sp, #4]
 80062b0:	3101      	adds	r1, #1
 80062b2:	f7fe f823 	bl	80042fc <_Balloc>
 80062b6:	4681      	mov	r9, r0
 80062b8:	b918      	cbnz	r0, 80062c2 <__gethex+0x3ba>
 80062ba:	4602      	mov	r2, r0
 80062bc:	2184      	movs	r1, #132	@ 0x84
 80062be:	4b19      	ldr	r3, [pc, #100]	@ (8006324 <__gethex+0x41c>)
 80062c0:	e6c5      	b.n	800604e <__gethex+0x146>
 80062c2:	6922      	ldr	r2, [r4, #16]
 80062c4:	f104 010c 	add.w	r1, r4, #12
 80062c8:	3202      	adds	r2, #2
 80062ca:	0092      	lsls	r2, r2, #2
 80062cc:	300c      	adds	r0, #12
 80062ce:	f7ff fd6d 	bl	8005dac <memcpy>
 80062d2:	4621      	mov	r1, r4
 80062d4:	9801      	ldr	r0, [sp, #4]
 80062d6:	f7fe f851 	bl	800437c <_Bfree>
 80062da:	464c      	mov	r4, r9
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	6122      	str	r2, [r4, #16]
 80062e2:	2201      	movs	r2, #1
 80062e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062e8:	615a      	str	r2, [r3, #20]
 80062ea:	e7be      	b.n	800626a <__gethex+0x362>
 80062ec:	6922      	ldr	r2, [r4, #16]
 80062ee:	455a      	cmp	r2, fp
 80062f0:	dd0b      	ble.n	800630a <__gethex+0x402>
 80062f2:	2101      	movs	r1, #1
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff fd9f 	bl	8005e38 <rshift>
 80062fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80062fe:	3701      	adds	r7, #1
 8006300:	42bb      	cmp	r3, r7
 8006302:	f6ff aee0 	blt.w	80060c6 <__gethex+0x1be>
 8006306:	2501      	movs	r5, #1
 8006308:	e7c2      	b.n	8006290 <__gethex+0x388>
 800630a:	f016 061f 	ands.w	r6, r6, #31
 800630e:	d0fa      	beq.n	8006306 <__gethex+0x3fe>
 8006310:	4453      	add	r3, sl
 8006312:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006316:	f7fe f8e3 	bl	80044e0 <__hi0bits>
 800631a:	f1c6 0620 	rsb	r6, r6, #32
 800631e:	42b0      	cmp	r0, r6
 8006320:	dbe7      	blt.n	80062f2 <__gethex+0x3ea>
 8006322:	e7f0      	b.n	8006306 <__gethex+0x3fe>
 8006324:	08006bd3 	.word	0x08006bd3

08006328 <L_shift>:
 8006328:	f1c2 0208 	rsb	r2, r2, #8
 800632c:	0092      	lsls	r2, r2, #2
 800632e:	b570      	push	{r4, r5, r6, lr}
 8006330:	f1c2 0620 	rsb	r6, r2, #32
 8006334:	6843      	ldr	r3, [r0, #4]
 8006336:	6804      	ldr	r4, [r0, #0]
 8006338:	fa03 f506 	lsl.w	r5, r3, r6
 800633c:	432c      	orrs	r4, r5
 800633e:	40d3      	lsrs	r3, r2
 8006340:	6004      	str	r4, [r0, #0]
 8006342:	f840 3f04 	str.w	r3, [r0, #4]!
 8006346:	4288      	cmp	r0, r1
 8006348:	d3f4      	bcc.n	8006334 <L_shift+0xc>
 800634a:	bd70      	pop	{r4, r5, r6, pc}

0800634c <__match>:
 800634c:	b530      	push	{r4, r5, lr}
 800634e:	6803      	ldr	r3, [r0, #0]
 8006350:	3301      	adds	r3, #1
 8006352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006356:	b914      	cbnz	r4, 800635e <__match+0x12>
 8006358:	6003      	str	r3, [r0, #0]
 800635a:	2001      	movs	r0, #1
 800635c:	bd30      	pop	{r4, r5, pc}
 800635e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006362:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006366:	2d19      	cmp	r5, #25
 8006368:	bf98      	it	ls
 800636a:	3220      	addls	r2, #32
 800636c:	42a2      	cmp	r2, r4
 800636e:	d0f0      	beq.n	8006352 <__match+0x6>
 8006370:	2000      	movs	r0, #0
 8006372:	e7f3      	b.n	800635c <__match+0x10>

08006374 <__hexnan>:
 8006374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006378:	2500      	movs	r5, #0
 800637a:	680b      	ldr	r3, [r1, #0]
 800637c:	4682      	mov	sl, r0
 800637e:	115e      	asrs	r6, r3, #5
 8006380:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006384:	f013 031f 	ands.w	r3, r3, #31
 8006388:	bf18      	it	ne
 800638a:	3604      	addne	r6, #4
 800638c:	1f37      	subs	r7, r6, #4
 800638e:	4690      	mov	r8, r2
 8006390:	46b9      	mov	r9, r7
 8006392:	463c      	mov	r4, r7
 8006394:	46ab      	mov	fp, r5
 8006396:	b087      	sub	sp, #28
 8006398:	6801      	ldr	r1, [r0, #0]
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	f846 5c04 	str.w	r5, [r6, #-4]
 80063a0:	9502      	str	r5, [sp, #8]
 80063a2:	784a      	ldrb	r2, [r1, #1]
 80063a4:	1c4b      	adds	r3, r1, #1
 80063a6:	9303      	str	r3, [sp, #12]
 80063a8:	b342      	cbz	r2, 80063fc <__hexnan+0x88>
 80063aa:	4610      	mov	r0, r2
 80063ac:	9105      	str	r1, [sp, #20]
 80063ae:	9204      	str	r2, [sp, #16]
 80063b0:	f7ff fd95 	bl	8005ede <__hexdig_fun>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d151      	bne.n	800645c <__hexnan+0xe8>
 80063b8:	9a04      	ldr	r2, [sp, #16]
 80063ba:	9905      	ldr	r1, [sp, #20]
 80063bc:	2a20      	cmp	r2, #32
 80063be:	d818      	bhi.n	80063f2 <__hexnan+0x7e>
 80063c0:	9b02      	ldr	r3, [sp, #8]
 80063c2:	459b      	cmp	fp, r3
 80063c4:	dd13      	ble.n	80063ee <__hexnan+0x7a>
 80063c6:	454c      	cmp	r4, r9
 80063c8:	d206      	bcs.n	80063d8 <__hexnan+0x64>
 80063ca:	2d07      	cmp	r5, #7
 80063cc:	dc04      	bgt.n	80063d8 <__hexnan+0x64>
 80063ce:	462a      	mov	r2, r5
 80063d0:	4649      	mov	r1, r9
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff ffa8 	bl	8006328 <L_shift>
 80063d8:	4544      	cmp	r4, r8
 80063da:	d952      	bls.n	8006482 <__hexnan+0x10e>
 80063dc:	2300      	movs	r3, #0
 80063de:	f1a4 0904 	sub.w	r9, r4, #4
 80063e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80063e6:	461d      	mov	r5, r3
 80063e8:	464c      	mov	r4, r9
 80063ea:	f8cd b008 	str.w	fp, [sp, #8]
 80063ee:	9903      	ldr	r1, [sp, #12]
 80063f0:	e7d7      	b.n	80063a2 <__hexnan+0x2e>
 80063f2:	2a29      	cmp	r2, #41	@ 0x29
 80063f4:	d157      	bne.n	80064a6 <__hexnan+0x132>
 80063f6:	3102      	adds	r1, #2
 80063f8:	f8ca 1000 	str.w	r1, [sl]
 80063fc:	f1bb 0f00 	cmp.w	fp, #0
 8006400:	d051      	beq.n	80064a6 <__hexnan+0x132>
 8006402:	454c      	cmp	r4, r9
 8006404:	d206      	bcs.n	8006414 <__hexnan+0xa0>
 8006406:	2d07      	cmp	r5, #7
 8006408:	dc04      	bgt.n	8006414 <__hexnan+0xa0>
 800640a:	462a      	mov	r2, r5
 800640c:	4649      	mov	r1, r9
 800640e:	4620      	mov	r0, r4
 8006410:	f7ff ff8a 	bl	8006328 <L_shift>
 8006414:	4544      	cmp	r4, r8
 8006416:	d936      	bls.n	8006486 <__hexnan+0x112>
 8006418:	4623      	mov	r3, r4
 800641a:	f1a8 0204 	sub.w	r2, r8, #4
 800641e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006422:	429f      	cmp	r7, r3
 8006424:	f842 1f04 	str.w	r1, [r2, #4]!
 8006428:	d2f9      	bcs.n	800641e <__hexnan+0xaa>
 800642a:	1b3b      	subs	r3, r7, r4
 800642c:	f023 0303 	bic.w	r3, r3, #3
 8006430:	3304      	adds	r3, #4
 8006432:	3401      	adds	r4, #1
 8006434:	3e03      	subs	r6, #3
 8006436:	42b4      	cmp	r4, r6
 8006438:	bf88      	it	hi
 800643a:	2304      	movhi	r3, #4
 800643c:	2200      	movs	r2, #0
 800643e:	4443      	add	r3, r8
 8006440:	f843 2b04 	str.w	r2, [r3], #4
 8006444:	429f      	cmp	r7, r3
 8006446:	d2fb      	bcs.n	8006440 <__hexnan+0xcc>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	b91b      	cbnz	r3, 8006454 <__hexnan+0xe0>
 800644c:	4547      	cmp	r7, r8
 800644e:	d128      	bne.n	80064a2 <__hexnan+0x12e>
 8006450:	2301      	movs	r3, #1
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	2005      	movs	r0, #5
 8006456:	b007      	add	sp, #28
 8006458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645c:	3501      	adds	r5, #1
 800645e:	2d08      	cmp	r5, #8
 8006460:	f10b 0b01 	add.w	fp, fp, #1
 8006464:	dd06      	ble.n	8006474 <__hexnan+0x100>
 8006466:	4544      	cmp	r4, r8
 8006468:	d9c1      	bls.n	80063ee <__hexnan+0x7a>
 800646a:	2300      	movs	r3, #0
 800646c:	2501      	movs	r5, #1
 800646e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006472:	3c04      	subs	r4, #4
 8006474:	6822      	ldr	r2, [r4, #0]
 8006476:	f000 000f 	and.w	r0, r0, #15
 800647a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800647e:	6020      	str	r0, [r4, #0]
 8006480:	e7b5      	b.n	80063ee <__hexnan+0x7a>
 8006482:	2508      	movs	r5, #8
 8006484:	e7b3      	b.n	80063ee <__hexnan+0x7a>
 8006486:	9b01      	ldr	r3, [sp, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0dd      	beq.n	8006448 <__hexnan+0xd4>
 800648c:	f04f 32ff 	mov.w	r2, #4294967295
 8006490:	f1c3 0320 	rsb	r3, r3, #32
 8006494:	40da      	lsrs	r2, r3
 8006496:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800649a:	4013      	ands	r3, r2
 800649c:	f846 3c04 	str.w	r3, [r6, #-4]
 80064a0:	e7d2      	b.n	8006448 <__hexnan+0xd4>
 80064a2:	3f04      	subs	r7, #4
 80064a4:	e7d0      	b.n	8006448 <__hexnan+0xd4>
 80064a6:	2004      	movs	r0, #4
 80064a8:	e7d5      	b.n	8006456 <__hexnan+0xe2>

080064aa <__ascii_mbtowc>:
 80064aa:	b082      	sub	sp, #8
 80064ac:	b901      	cbnz	r1, 80064b0 <__ascii_mbtowc+0x6>
 80064ae:	a901      	add	r1, sp, #4
 80064b0:	b142      	cbz	r2, 80064c4 <__ascii_mbtowc+0x1a>
 80064b2:	b14b      	cbz	r3, 80064c8 <__ascii_mbtowc+0x1e>
 80064b4:	7813      	ldrb	r3, [r2, #0]
 80064b6:	600b      	str	r3, [r1, #0]
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	1e10      	subs	r0, r2, #0
 80064bc:	bf18      	it	ne
 80064be:	2001      	movne	r0, #1
 80064c0:	b002      	add	sp, #8
 80064c2:	4770      	bx	lr
 80064c4:	4610      	mov	r0, r2
 80064c6:	e7fb      	b.n	80064c0 <__ascii_mbtowc+0x16>
 80064c8:	f06f 0001 	mvn.w	r0, #1
 80064cc:	e7f8      	b.n	80064c0 <__ascii_mbtowc+0x16>

080064ce <_realloc_r>:
 80064ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d2:	4607      	mov	r7, r0
 80064d4:	4614      	mov	r4, r2
 80064d6:	460d      	mov	r5, r1
 80064d8:	b921      	cbnz	r1, 80064e4 <_realloc_r+0x16>
 80064da:	4611      	mov	r1, r2
 80064dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064e0:	f7fd be80 	b.w	80041e4 <_malloc_r>
 80064e4:	b92a      	cbnz	r2, 80064f2 <_realloc_r+0x24>
 80064e6:	f7fd fe0b 	bl	8004100 <_free_r>
 80064ea:	4625      	mov	r5, r4
 80064ec:	4628      	mov	r0, r5
 80064ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f2:	f000 f840 	bl	8006576 <_malloc_usable_size_r>
 80064f6:	4284      	cmp	r4, r0
 80064f8:	4606      	mov	r6, r0
 80064fa:	d802      	bhi.n	8006502 <_realloc_r+0x34>
 80064fc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006500:	d8f4      	bhi.n	80064ec <_realloc_r+0x1e>
 8006502:	4621      	mov	r1, r4
 8006504:	4638      	mov	r0, r7
 8006506:	f7fd fe6d 	bl	80041e4 <_malloc_r>
 800650a:	4680      	mov	r8, r0
 800650c:	b908      	cbnz	r0, 8006512 <_realloc_r+0x44>
 800650e:	4645      	mov	r5, r8
 8006510:	e7ec      	b.n	80064ec <_realloc_r+0x1e>
 8006512:	42b4      	cmp	r4, r6
 8006514:	4622      	mov	r2, r4
 8006516:	4629      	mov	r1, r5
 8006518:	bf28      	it	cs
 800651a:	4632      	movcs	r2, r6
 800651c:	f7ff fc46 	bl	8005dac <memcpy>
 8006520:	4629      	mov	r1, r5
 8006522:	4638      	mov	r0, r7
 8006524:	f7fd fdec 	bl	8004100 <_free_r>
 8006528:	e7f1      	b.n	800650e <_realloc_r+0x40>

0800652a <__ascii_wctomb>:
 800652a:	4603      	mov	r3, r0
 800652c:	4608      	mov	r0, r1
 800652e:	b141      	cbz	r1, 8006542 <__ascii_wctomb+0x18>
 8006530:	2aff      	cmp	r2, #255	@ 0xff
 8006532:	d904      	bls.n	800653e <__ascii_wctomb+0x14>
 8006534:	228a      	movs	r2, #138	@ 0x8a
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	4770      	bx	lr
 800653e:	2001      	movs	r0, #1
 8006540:	700a      	strb	r2, [r1, #0]
 8006542:	4770      	bx	lr

08006544 <fiprintf>:
 8006544:	b40e      	push	{r1, r2, r3}
 8006546:	b503      	push	{r0, r1, lr}
 8006548:	4601      	mov	r1, r0
 800654a:	ab03      	add	r3, sp, #12
 800654c:	4805      	ldr	r0, [pc, #20]	@ (8006564 <fiprintf+0x20>)
 800654e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006552:	6800      	ldr	r0, [r0, #0]
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	f000 f83d 	bl	80065d4 <_vfiprintf_r>
 800655a:	b002      	add	sp, #8
 800655c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006560:	b003      	add	sp, #12
 8006562:	4770      	bx	lr
 8006564:	20000018 	.word	0x20000018

08006568 <abort>:
 8006568:	2006      	movs	r0, #6
 800656a:	b508      	push	{r3, lr}
 800656c:	f000 fa06 	bl	800697c <raise>
 8006570:	2001      	movs	r0, #1
 8006572:	f7fa fcde 	bl	8000f32 <_exit>

08006576 <_malloc_usable_size_r>:
 8006576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800657a:	1f18      	subs	r0, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	bfbc      	itt	lt
 8006580:	580b      	ldrlt	r3, [r1, r0]
 8006582:	18c0      	addlt	r0, r0, r3
 8006584:	4770      	bx	lr

08006586 <__sfputc_r>:
 8006586:	6893      	ldr	r3, [r2, #8]
 8006588:	b410      	push	{r4}
 800658a:	3b01      	subs	r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	6093      	str	r3, [r2, #8]
 8006590:	da07      	bge.n	80065a2 <__sfputc_r+0x1c>
 8006592:	6994      	ldr	r4, [r2, #24]
 8006594:	42a3      	cmp	r3, r4
 8006596:	db01      	blt.n	800659c <__sfputc_r+0x16>
 8006598:	290a      	cmp	r1, #10
 800659a:	d102      	bne.n	80065a2 <__sfputc_r+0x1c>
 800659c:	bc10      	pop	{r4}
 800659e:	f000 b931 	b.w	8006804 <__swbuf_r>
 80065a2:	6813      	ldr	r3, [r2, #0]
 80065a4:	1c58      	adds	r0, r3, #1
 80065a6:	6010      	str	r0, [r2, #0]
 80065a8:	7019      	strb	r1, [r3, #0]
 80065aa:	4608      	mov	r0, r1
 80065ac:	bc10      	pop	{r4}
 80065ae:	4770      	bx	lr

080065b0 <__sfputs_r>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	4606      	mov	r6, r0
 80065b4:	460f      	mov	r7, r1
 80065b6:	4614      	mov	r4, r2
 80065b8:	18d5      	adds	r5, r2, r3
 80065ba:	42ac      	cmp	r4, r5
 80065bc:	d101      	bne.n	80065c2 <__sfputs_r+0x12>
 80065be:	2000      	movs	r0, #0
 80065c0:	e007      	b.n	80065d2 <__sfputs_r+0x22>
 80065c2:	463a      	mov	r2, r7
 80065c4:	4630      	mov	r0, r6
 80065c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ca:	f7ff ffdc 	bl	8006586 <__sfputc_r>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	d1f3      	bne.n	80065ba <__sfputs_r+0xa>
 80065d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065d4 <_vfiprintf_r>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	460d      	mov	r5, r1
 80065da:	4614      	mov	r4, r2
 80065dc:	4698      	mov	r8, r3
 80065de:	4606      	mov	r6, r0
 80065e0:	b09d      	sub	sp, #116	@ 0x74
 80065e2:	b118      	cbz	r0, 80065ec <_vfiprintf_r+0x18>
 80065e4:	6a03      	ldr	r3, [r0, #32]
 80065e6:	b90b      	cbnz	r3, 80065ec <_vfiprintf_r+0x18>
 80065e8:	f7fc fe00 	bl	80031ec <__sinit>
 80065ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065ee:	07d9      	lsls	r1, r3, #31
 80065f0:	d405      	bmi.n	80065fe <_vfiprintf_r+0x2a>
 80065f2:	89ab      	ldrh	r3, [r5, #12]
 80065f4:	059a      	lsls	r2, r3, #22
 80065f6:	d402      	bmi.n	80065fe <_vfiprintf_r+0x2a>
 80065f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065fa:	f7fc ff10 	bl	800341e <__retarget_lock_acquire_recursive>
 80065fe:	89ab      	ldrh	r3, [r5, #12]
 8006600:	071b      	lsls	r3, r3, #28
 8006602:	d501      	bpl.n	8006608 <_vfiprintf_r+0x34>
 8006604:	692b      	ldr	r3, [r5, #16]
 8006606:	b99b      	cbnz	r3, 8006630 <_vfiprintf_r+0x5c>
 8006608:	4629      	mov	r1, r5
 800660a:	4630      	mov	r0, r6
 800660c:	f000 f938 	bl	8006880 <__swsetup_r>
 8006610:	b170      	cbz	r0, 8006630 <_vfiprintf_r+0x5c>
 8006612:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006614:	07dc      	lsls	r4, r3, #31
 8006616:	d504      	bpl.n	8006622 <_vfiprintf_r+0x4e>
 8006618:	f04f 30ff 	mov.w	r0, #4294967295
 800661c:	b01d      	add	sp, #116	@ 0x74
 800661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006622:	89ab      	ldrh	r3, [r5, #12]
 8006624:	0598      	lsls	r0, r3, #22
 8006626:	d4f7      	bmi.n	8006618 <_vfiprintf_r+0x44>
 8006628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800662a:	f7fc fef9 	bl	8003420 <__retarget_lock_release_recursive>
 800662e:	e7f3      	b.n	8006618 <_vfiprintf_r+0x44>
 8006630:	2300      	movs	r3, #0
 8006632:	9309      	str	r3, [sp, #36]	@ 0x24
 8006634:	2320      	movs	r3, #32
 8006636:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800663a:	2330      	movs	r3, #48	@ 0x30
 800663c:	f04f 0901 	mov.w	r9, #1
 8006640:	f8cd 800c 	str.w	r8, [sp, #12]
 8006644:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80067f0 <_vfiprintf_r+0x21c>
 8006648:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800664c:	4623      	mov	r3, r4
 800664e:	469a      	mov	sl, r3
 8006650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006654:	b10a      	cbz	r2, 800665a <_vfiprintf_r+0x86>
 8006656:	2a25      	cmp	r2, #37	@ 0x25
 8006658:	d1f9      	bne.n	800664e <_vfiprintf_r+0x7a>
 800665a:	ebba 0b04 	subs.w	fp, sl, r4
 800665e:	d00b      	beq.n	8006678 <_vfiprintf_r+0xa4>
 8006660:	465b      	mov	r3, fp
 8006662:	4622      	mov	r2, r4
 8006664:	4629      	mov	r1, r5
 8006666:	4630      	mov	r0, r6
 8006668:	f7ff ffa2 	bl	80065b0 <__sfputs_r>
 800666c:	3001      	adds	r0, #1
 800666e:	f000 80a7 	beq.w	80067c0 <_vfiprintf_r+0x1ec>
 8006672:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006674:	445a      	add	r2, fp
 8006676:	9209      	str	r2, [sp, #36]	@ 0x24
 8006678:	f89a 3000 	ldrb.w	r3, [sl]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 809f 	beq.w	80067c0 <_vfiprintf_r+0x1ec>
 8006682:	2300      	movs	r3, #0
 8006684:	f04f 32ff 	mov.w	r2, #4294967295
 8006688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800668c:	f10a 0a01 	add.w	sl, sl, #1
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	9307      	str	r3, [sp, #28]
 8006694:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006698:	931a      	str	r3, [sp, #104]	@ 0x68
 800669a:	4654      	mov	r4, sl
 800669c:	2205      	movs	r2, #5
 800669e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a2:	4853      	ldr	r0, [pc, #332]	@ (80067f0 <_vfiprintf_r+0x21c>)
 80066a4:	f7fc febd 	bl	8003422 <memchr>
 80066a8:	9a04      	ldr	r2, [sp, #16]
 80066aa:	b9d8      	cbnz	r0, 80066e4 <_vfiprintf_r+0x110>
 80066ac:	06d1      	lsls	r1, r2, #27
 80066ae:	bf44      	itt	mi
 80066b0:	2320      	movmi	r3, #32
 80066b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066b6:	0713      	lsls	r3, r2, #28
 80066b8:	bf44      	itt	mi
 80066ba:	232b      	movmi	r3, #43	@ 0x2b
 80066bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066c0:	f89a 3000 	ldrb.w	r3, [sl]
 80066c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80066c6:	d015      	beq.n	80066f4 <_vfiprintf_r+0x120>
 80066c8:	4654      	mov	r4, sl
 80066ca:	2000      	movs	r0, #0
 80066cc:	f04f 0c0a 	mov.w	ip, #10
 80066d0:	9a07      	ldr	r2, [sp, #28]
 80066d2:	4621      	mov	r1, r4
 80066d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066d8:	3b30      	subs	r3, #48	@ 0x30
 80066da:	2b09      	cmp	r3, #9
 80066dc:	d94b      	bls.n	8006776 <_vfiprintf_r+0x1a2>
 80066de:	b1b0      	cbz	r0, 800670e <_vfiprintf_r+0x13a>
 80066e0:	9207      	str	r2, [sp, #28]
 80066e2:	e014      	b.n	800670e <_vfiprintf_r+0x13a>
 80066e4:	eba0 0308 	sub.w	r3, r0, r8
 80066e8:	fa09 f303 	lsl.w	r3, r9, r3
 80066ec:	4313      	orrs	r3, r2
 80066ee:	46a2      	mov	sl, r4
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	e7d2      	b.n	800669a <_vfiprintf_r+0xc6>
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	1d19      	adds	r1, r3, #4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	9103      	str	r1, [sp, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfbb      	ittet	lt
 8006700:	425b      	neglt	r3, r3
 8006702:	f042 0202 	orrlt.w	r2, r2, #2
 8006706:	9307      	strge	r3, [sp, #28]
 8006708:	9307      	strlt	r3, [sp, #28]
 800670a:	bfb8      	it	lt
 800670c:	9204      	strlt	r2, [sp, #16]
 800670e:	7823      	ldrb	r3, [r4, #0]
 8006710:	2b2e      	cmp	r3, #46	@ 0x2e
 8006712:	d10a      	bne.n	800672a <_vfiprintf_r+0x156>
 8006714:	7863      	ldrb	r3, [r4, #1]
 8006716:	2b2a      	cmp	r3, #42	@ 0x2a
 8006718:	d132      	bne.n	8006780 <_vfiprintf_r+0x1ac>
 800671a:	9b03      	ldr	r3, [sp, #12]
 800671c:	3402      	adds	r4, #2
 800671e:	1d1a      	adds	r2, r3, #4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	9203      	str	r2, [sp, #12]
 8006724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006728:	9305      	str	r3, [sp, #20]
 800672a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80067f4 <_vfiprintf_r+0x220>
 800672e:	2203      	movs	r2, #3
 8006730:	4650      	mov	r0, sl
 8006732:	7821      	ldrb	r1, [r4, #0]
 8006734:	f7fc fe75 	bl	8003422 <memchr>
 8006738:	b138      	cbz	r0, 800674a <_vfiprintf_r+0x176>
 800673a:	2240      	movs	r2, #64	@ 0x40
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	eba0 000a 	sub.w	r0, r0, sl
 8006742:	4082      	lsls	r2, r0
 8006744:	4313      	orrs	r3, r2
 8006746:	3401      	adds	r4, #1
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800674e:	2206      	movs	r2, #6
 8006750:	4829      	ldr	r0, [pc, #164]	@ (80067f8 <_vfiprintf_r+0x224>)
 8006752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006756:	f7fc fe64 	bl	8003422 <memchr>
 800675a:	2800      	cmp	r0, #0
 800675c:	d03f      	beq.n	80067de <_vfiprintf_r+0x20a>
 800675e:	4b27      	ldr	r3, [pc, #156]	@ (80067fc <_vfiprintf_r+0x228>)
 8006760:	bb1b      	cbnz	r3, 80067aa <_vfiprintf_r+0x1d6>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	3307      	adds	r3, #7
 8006766:	f023 0307 	bic.w	r3, r3, #7
 800676a:	3308      	adds	r3, #8
 800676c:	9303      	str	r3, [sp, #12]
 800676e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006770:	443b      	add	r3, r7
 8006772:	9309      	str	r3, [sp, #36]	@ 0x24
 8006774:	e76a      	b.n	800664c <_vfiprintf_r+0x78>
 8006776:	460c      	mov	r4, r1
 8006778:	2001      	movs	r0, #1
 800677a:	fb0c 3202 	mla	r2, ip, r2, r3
 800677e:	e7a8      	b.n	80066d2 <_vfiprintf_r+0xfe>
 8006780:	2300      	movs	r3, #0
 8006782:	f04f 0c0a 	mov.w	ip, #10
 8006786:	4619      	mov	r1, r3
 8006788:	3401      	adds	r4, #1
 800678a:	9305      	str	r3, [sp, #20]
 800678c:	4620      	mov	r0, r4
 800678e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006792:	3a30      	subs	r2, #48	@ 0x30
 8006794:	2a09      	cmp	r2, #9
 8006796:	d903      	bls.n	80067a0 <_vfiprintf_r+0x1cc>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0c6      	beq.n	800672a <_vfiprintf_r+0x156>
 800679c:	9105      	str	r1, [sp, #20]
 800679e:	e7c4      	b.n	800672a <_vfiprintf_r+0x156>
 80067a0:	4604      	mov	r4, r0
 80067a2:	2301      	movs	r3, #1
 80067a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067a8:	e7f0      	b.n	800678c <_vfiprintf_r+0x1b8>
 80067aa:	ab03      	add	r3, sp, #12
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	462a      	mov	r2, r5
 80067b0:	4630      	mov	r0, r6
 80067b2:	4b13      	ldr	r3, [pc, #76]	@ (8006800 <_vfiprintf_r+0x22c>)
 80067b4:	a904      	add	r1, sp, #16
 80067b6:	f7fb fec7 	bl	8002548 <_printf_float>
 80067ba:	4607      	mov	r7, r0
 80067bc:	1c78      	adds	r0, r7, #1
 80067be:	d1d6      	bne.n	800676e <_vfiprintf_r+0x19a>
 80067c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067c2:	07d9      	lsls	r1, r3, #31
 80067c4:	d405      	bmi.n	80067d2 <_vfiprintf_r+0x1fe>
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	059a      	lsls	r2, r3, #22
 80067ca:	d402      	bmi.n	80067d2 <_vfiprintf_r+0x1fe>
 80067cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ce:	f7fc fe27 	bl	8003420 <__retarget_lock_release_recursive>
 80067d2:	89ab      	ldrh	r3, [r5, #12]
 80067d4:	065b      	lsls	r3, r3, #25
 80067d6:	f53f af1f 	bmi.w	8006618 <_vfiprintf_r+0x44>
 80067da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067dc:	e71e      	b.n	800661c <_vfiprintf_r+0x48>
 80067de:	ab03      	add	r3, sp, #12
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	462a      	mov	r2, r5
 80067e4:	4630      	mov	r0, r6
 80067e6:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <_vfiprintf_r+0x22c>)
 80067e8:	a904      	add	r1, sp, #16
 80067ea:	f7fc f94b 	bl	8002a84 <_printf_i>
 80067ee:	e7e4      	b.n	80067ba <_vfiprintf_r+0x1e6>
 80067f0:	08006c3f 	.word	0x08006c3f
 80067f4:	08006c45 	.word	0x08006c45
 80067f8:	08006c49 	.word	0x08006c49
 80067fc:	08002549 	.word	0x08002549
 8006800:	080065b1 	.word	0x080065b1

08006804 <__swbuf_r>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	460e      	mov	r6, r1
 8006808:	4614      	mov	r4, r2
 800680a:	4605      	mov	r5, r0
 800680c:	b118      	cbz	r0, 8006816 <__swbuf_r+0x12>
 800680e:	6a03      	ldr	r3, [r0, #32]
 8006810:	b90b      	cbnz	r3, 8006816 <__swbuf_r+0x12>
 8006812:	f7fc fceb 	bl	80031ec <__sinit>
 8006816:	69a3      	ldr	r3, [r4, #24]
 8006818:	60a3      	str	r3, [r4, #8]
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	071a      	lsls	r2, r3, #28
 800681e:	d501      	bpl.n	8006824 <__swbuf_r+0x20>
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	b943      	cbnz	r3, 8006836 <__swbuf_r+0x32>
 8006824:	4621      	mov	r1, r4
 8006826:	4628      	mov	r0, r5
 8006828:	f000 f82a 	bl	8006880 <__swsetup_r>
 800682c:	b118      	cbz	r0, 8006836 <__swbuf_r+0x32>
 800682e:	f04f 37ff 	mov.w	r7, #4294967295
 8006832:	4638      	mov	r0, r7
 8006834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	6922      	ldr	r2, [r4, #16]
 800683a:	b2f6      	uxtb	r6, r6
 800683c:	1a98      	subs	r0, r3, r2
 800683e:	6963      	ldr	r3, [r4, #20]
 8006840:	4637      	mov	r7, r6
 8006842:	4283      	cmp	r3, r0
 8006844:	dc05      	bgt.n	8006852 <__swbuf_r+0x4e>
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	f7ff fa4b 	bl	8005ce4 <_fflush_r>
 800684e:	2800      	cmp	r0, #0
 8006850:	d1ed      	bne.n	800682e <__swbuf_r+0x2a>
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	3b01      	subs	r3, #1
 8006856:	60a3      	str	r3, [r4, #8]
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	6022      	str	r2, [r4, #0]
 800685e:	701e      	strb	r6, [r3, #0]
 8006860:	6962      	ldr	r2, [r4, #20]
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	429a      	cmp	r2, r3
 8006866:	d004      	beq.n	8006872 <__swbuf_r+0x6e>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d5e1      	bpl.n	8006832 <__swbuf_r+0x2e>
 800686e:	2e0a      	cmp	r6, #10
 8006870:	d1df      	bne.n	8006832 <__swbuf_r+0x2e>
 8006872:	4621      	mov	r1, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f7ff fa35 	bl	8005ce4 <_fflush_r>
 800687a:	2800      	cmp	r0, #0
 800687c:	d0d9      	beq.n	8006832 <__swbuf_r+0x2e>
 800687e:	e7d6      	b.n	800682e <__swbuf_r+0x2a>

08006880 <__swsetup_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4b29      	ldr	r3, [pc, #164]	@ (8006928 <__swsetup_r+0xa8>)
 8006884:	4605      	mov	r5, r0
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	460c      	mov	r4, r1
 800688a:	b118      	cbz	r0, 8006894 <__swsetup_r+0x14>
 800688c:	6a03      	ldr	r3, [r0, #32]
 800688e:	b90b      	cbnz	r3, 8006894 <__swsetup_r+0x14>
 8006890:	f7fc fcac 	bl	80031ec <__sinit>
 8006894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006898:	0719      	lsls	r1, r3, #28
 800689a:	d422      	bmi.n	80068e2 <__swsetup_r+0x62>
 800689c:	06da      	lsls	r2, r3, #27
 800689e:	d407      	bmi.n	80068b0 <__swsetup_r+0x30>
 80068a0:	2209      	movs	r2, #9
 80068a2:	602a      	str	r2, [r5, #0]
 80068a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	e033      	b.n	8006918 <__swsetup_r+0x98>
 80068b0:	0758      	lsls	r0, r3, #29
 80068b2:	d512      	bpl.n	80068da <__swsetup_r+0x5a>
 80068b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068b6:	b141      	cbz	r1, 80068ca <__swsetup_r+0x4a>
 80068b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068bc:	4299      	cmp	r1, r3
 80068be:	d002      	beq.n	80068c6 <__swsetup_r+0x46>
 80068c0:	4628      	mov	r0, r5
 80068c2:	f7fd fc1d 	bl	8004100 <_free_r>
 80068c6:	2300      	movs	r3, #0
 80068c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	2300      	movs	r3, #0
 80068d4:	6063      	str	r3, [r4, #4]
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f043 0308 	orr.w	r3, r3, #8
 80068e0:	81a3      	strh	r3, [r4, #12]
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	b94b      	cbnz	r3, 80068fa <__swsetup_r+0x7a>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f0:	d003      	beq.n	80068fa <__swsetup_r+0x7a>
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 f882 	bl	80069fe <__smakebuf_r>
 80068fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068fe:	f013 0201 	ands.w	r2, r3, #1
 8006902:	d00a      	beq.n	800691a <__swsetup_r+0x9a>
 8006904:	2200      	movs	r2, #0
 8006906:	60a2      	str	r2, [r4, #8]
 8006908:	6962      	ldr	r2, [r4, #20]
 800690a:	4252      	negs	r2, r2
 800690c:	61a2      	str	r2, [r4, #24]
 800690e:	6922      	ldr	r2, [r4, #16]
 8006910:	b942      	cbnz	r2, 8006924 <__swsetup_r+0xa4>
 8006912:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006916:	d1c5      	bne.n	80068a4 <__swsetup_r+0x24>
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	0799      	lsls	r1, r3, #30
 800691c:	bf58      	it	pl
 800691e:	6962      	ldrpl	r2, [r4, #20]
 8006920:	60a2      	str	r2, [r4, #8]
 8006922:	e7f4      	b.n	800690e <__swsetup_r+0x8e>
 8006924:	2000      	movs	r0, #0
 8006926:	e7f7      	b.n	8006918 <__swsetup_r+0x98>
 8006928:	20000018 	.word	0x20000018

0800692c <_raise_r>:
 800692c:	291f      	cmp	r1, #31
 800692e:	b538      	push	{r3, r4, r5, lr}
 8006930:	4605      	mov	r5, r0
 8006932:	460c      	mov	r4, r1
 8006934:	d904      	bls.n	8006940 <_raise_r+0x14>
 8006936:	2316      	movs	r3, #22
 8006938:	6003      	str	r3, [r0, #0]
 800693a:	f04f 30ff 	mov.w	r0, #4294967295
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006942:	b112      	cbz	r2, 800694a <_raise_r+0x1e>
 8006944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006948:	b94b      	cbnz	r3, 800695e <_raise_r+0x32>
 800694a:	4628      	mov	r0, r5
 800694c:	f000 f830 	bl	80069b0 <_getpid_r>
 8006950:	4622      	mov	r2, r4
 8006952:	4601      	mov	r1, r0
 8006954:	4628      	mov	r0, r5
 8006956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800695a:	f000 b817 	b.w	800698c <_kill_r>
 800695e:	2b01      	cmp	r3, #1
 8006960:	d00a      	beq.n	8006978 <_raise_r+0x4c>
 8006962:	1c59      	adds	r1, r3, #1
 8006964:	d103      	bne.n	800696e <_raise_r+0x42>
 8006966:	2316      	movs	r3, #22
 8006968:	6003      	str	r3, [r0, #0]
 800696a:	2001      	movs	r0, #1
 800696c:	e7e7      	b.n	800693e <_raise_r+0x12>
 800696e:	2100      	movs	r1, #0
 8006970:	4620      	mov	r0, r4
 8006972:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006976:	4798      	blx	r3
 8006978:	2000      	movs	r0, #0
 800697a:	e7e0      	b.n	800693e <_raise_r+0x12>

0800697c <raise>:
 800697c:	4b02      	ldr	r3, [pc, #8]	@ (8006988 <raise+0xc>)
 800697e:	4601      	mov	r1, r0
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	f7ff bfd3 	b.w	800692c <_raise_r>
 8006986:	bf00      	nop
 8006988:	20000018 	.word	0x20000018

0800698c <_kill_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	2300      	movs	r3, #0
 8006990:	4d06      	ldr	r5, [pc, #24]	@ (80069ac <_kill_r+0x20>)
 8006992:	4604      	mov	r4, r0
 8006994:	4608      	mov	r0, r1
 8006996:	4611      	mov	r1, r2
 8006998:	602b      	str	r3, [r5, #0]
 800699a:	f7fa faba 	bl	8000f12 <_kill>
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	d102      	bne.n	80069a8 <_kill_r+0x1c>
 80069a2:	682b      	ldr	r3, [r5, #0]
 80069a4:	b103      	cbz	r3, 80069a8 <_kill_r+0x1c>
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
 80069aa:	bf00      	nop
 80069ac:	20000380 	.word	0x20000380

080069b0 <_getpid_r>:
 80069b0:	f7fa baa8 	b.w	8000f04 <_getpid>

080069b4 <__swhatbuf_r>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	460c      	mov	r4, r1
 80069b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069bc:	4615      	mov	r5, r2
 80069be:	2900      	cmp	r1, #0
 80069c0:	461e      	mov	r6, r3
 80069c2:	b096      	sub	sp, #88	@ 0x58
 80069c4:	da0c      	bge.n	80069e0 <__swhatbuf_r+0x2c>
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	2100      	movs	r1, #0
 80069ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069ce:	bf14      	ite	ne
 80069d0:	2340      	movne	r3, #64	@ 0x40
 80069d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069d6:	2000      	movs	r0, #0
 80069d8:	6031      	str	r1, [r6, #0]
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	b016      	add	sp, #88	@ 0x58
 80069de:	bd70      	pop	{r4, r5, r6, pc}
 80069e0:	466a      	mov	r2, sp
 80069e2:	f000 f849 	bl	8006a78 <_fstat_r>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	dbed      	blt.n	80069c6 <__swhatbuf_r+0x12>
 80069ea:	9901      	ldr	r1, [sp, #4]
 80069ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069f4:	4259      	negs	r1, r3
 80069f6:	4159      	adcs	r1, r3
 80069f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069fc:	e7eb      	b.n	80069d6 <__swhatbuf_r+0x22>

080069fe <__smakebuf_r>:
 80069fe:	898b      	ldrh	r3, [r1, #12]
 8006a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a02:	079d      	lsls	r5, r3, #30
 8006a04:	4606      	mov	r6, r0
 8006a06:	460c      	mov	r4, r1
 8006a08:	d507      	bpl.n	8006a1a <__smakebuf_r+0x1c>
 8006a0a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	6123      	str	r3, [r4, #16]
 8006a12:	2301      	movs	r3, #1
 8006a14:	6163      	str	r3, [r4, #20]
 8006a16:	b003      	add	sp, #12
 8006a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a1a:	466a      	mov	r2, sp
 8006a1c:	ab01      	add	r3, sp, #4
 8006a1e:	f7ff ffc9 	bl	80069b4 <__swhatbuf_r>
 8006a22:	9f00      	ldr	r7, [sp, #0]
 8006a24:	4605      	mov	r5, r0
 8006a26:	4639      	mov	r1, r7
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7fd fbdb 	bl	80041e4 <_malloc_r>
 8006a2e:	b948      	cbnz	r0, 8006a44 <__smakebuf_r+0x46>
 8006a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a34:	059a      	lsls	r2, r3, #22
 8006a36:	d4ee      	bmi.n	8006a16 <__smakebuf_r+0x18>
 8006a38:	f023 0303 	bic.w	r3, r3, #3
 8006a3c:	f043 0302 	orr.w	r3, r3, #2
 8006a40:	81a3      	strh	r3, [r4, #12]
 8006a42:	e7e2      	b.n	8006a0a <__smakebuf_r+0xc>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	9b01      	ldr	r3, [sp, #4]
 8006a52:	6020      	str	r0, [r4, #0]
 8006a54:	b15b      	cbz	r3, 8006a6e <__smakebuf_r+0x70>
 8006a56:	4630      	mov	r0, r6
 8006a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a5c:	f000 f81e 	bl	8006a9c <_isatty_r>
 8006a60:	b128      	cbz	r0, 8006a6e <__smakebuf_r+0x70>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f023 0303 	bic.w	r3, r3, #3
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	431d      	orrs	r5, r3
 8006a72:	81a5      	strh	r5, [r4, #12]
 8006a74:	e7cf      	b.n	8006a16 <__smakebuf_r+0x18>
	...

08006a78 <_fstat_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	4d06      	ldr	r5, [pc, #24]	@ (8006a98 <_fstat_r+0x20>)
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4608      	mov	r0, r1
 8006a82:	4611      	mov	r1, r2
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	f7fa faa3 	bl	8000fd0 <_fstat>
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	d102      	bne.n	8006a94 <_fstat_r+0x1c>
 8006a8e:	682b      	ldr	r3, [r5, #0]
 8006a90:	b103      	cbz	r3, 8006a94 <_fstat_r+0x1c>
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	bd38      	pop	{r3, r4, r5, pc}
 8006a96:	bf00      	nop
 8006a98:	20000380 	.word	0x20000380

08006a9c <_isatty_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4d05      	ldr	r5, [pc, #20]	@ (8006ab8 <_isatty_r+0x1c>)
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	602b      	str	r3, [r5, #0]
 8006aa8:	f7fa faa1 	bl	8000fee <_isatty>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_isatty_r+0x1a>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_isatty_r+0x1a>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20000380 	.word	0x20000380

08006abc <_init>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr

08006ac8 <_fini>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr
