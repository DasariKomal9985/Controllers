
G474RE_Sine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08003cc8  08003cc8  00004cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a8  080040a8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080040a8  080040a8  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080040a8  080040a8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a8  080040a8  000050a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040ac  080040ac  000050ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  080040bc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080040bc  00006290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2b5  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be8  00000000  00000000  000122f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00013ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ed  00000000  00000000  00014bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025947  00000000  00000000  000155b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d260  00000000  00000000  0003aefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7aaf  00000000  00000000  0004815c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fc0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c4  00000000  00000000  0013fc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00143514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003cb0 	.word	0x08003cb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003cb0 	.word	0x08003cb0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	0000      	movs	r0, r0
	...

08000a58 <SineTable_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void SineTable_Init(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < TABLE_SIZE; ++i) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e044      	b.n	8000aee <SineTable_Init+0x96>
		float angle = (2.0f * M_PI * (float) i) / (float) TABLE_SIZE;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	ee07 3a90 	vmov	s15, r3
 8000a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a6e:	ee17 0a90 	vmov	r0, s15
 8000a72:	f7ff fd35 	bl	80004e0 <__aeabi_f2d>
 8000a76:	a325      	add	r3, pc, #148	@ (adr r3, 8000b0c <SineTable_Init+0xb4>)
 8000a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7c:	f7ff fd88 	bl	8000590 <__aeabi_dmul>
 8000a80:	4602      	mov	r2, r0
 8000a82:	460b      	mov	r3, r1
 8000a84:	4610      	mov	r0, r2
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <SineTable_Init+0xa8>)
 8000a8e:	f7ff fea9 	bl	80007e4 <__aeabi_ddiv>
 8000a92:	4602      	mov	r2, r0
 8000a94:	460b      	mov	r3, r1
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f7ff ff8b 	bl	80009b4 <__aeabi_d2f>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	607b      	str	r3, [r7, #4]
		int32_t sample = (int32_t) DAC_MID
				+ (int32_t) ((float) DAC_AMP * sinf(angle));
 8000aa2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000aa6:	f002 fbd3 	bl	8003250 <sinf>
 8000aaa:	eef0 7a40 	vmov.f32	s15, s0
 8000aae:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000b04 <SineTable_Init+0xac>
 8000ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aba:	ee17 3a90 	vmov	r3, s15
		int32_t sample = (int32_t) DAC_MID
 8000abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000ac2:	60bb      	str	r3, [r7, #8]
		if (sample < 0)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	da01      	bge.n	8000ace <SineTable_Init+0x76>
			sample = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
		if (sample > 4095)
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ad4:	db02      	blt.n	8000adc <SineTable_Init+0x84>
			sample = 4095;
 8000ad6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000ada:	60bb      	str	r3, [r7, #8]
		g_sine[i] = (uint16_t) sample;
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	b299      	uxth	r1, r3
 8000ae0:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <SineTable_Init+0xb0>)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint32_t i = 0; i < TABLE_SIZE; ++i) {
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2bff      	cmp	r3, #255	@ 0xff
 8000af2:	d9b7      	bls.n	8000a64 <SineTable_Init+0xc>
	}
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40700000 	.word	0x40700000
 8000b04:	44fa0000 	.word	0x44fa0000
 8000b08:	20000088 	.word	0x20000088
 8000b0c:	54442d18 	.word	0x54442d18
 8000b10:	401921fb 	.word	0x401921fb

08000b14 <SineOut_Init>:

void SineOut_Init(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	@ 0x50
 8000b18:	af00      	add	r7, sp, #0
	// TIM2 base init (DIV1, Up, internal clock); if using CubeMX, match these values
	htim2.Instance = TIM2;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <SineOut_Init+0xbc>)
 8000b1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b20:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = TIM2_PSC;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd0 <SineOut_Init+0xbc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <SineOut_Init+0xbc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = TIM2_ARR;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <SineOut_Init+0xbc>)
 8000b30:	223d      	movs	r2, #61	@ 0x3d
 8000b32:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;   // DIV1 as requested
 8000b34:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <SineOut_Init+0xbc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b25      	ldr	r3, [pc, #148]	@ (8000bd0 <SineOut_Init+0xbc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 8000b40:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <SineOut_Init+0xbc>)
 8000b42:	f001 fdcf 	bl	80026e4 <HAL_TIM_Base_Init>

	TIM_ClockConfigTypeDef sClock = { 0 };
 8000b46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
	sClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b58:	643b      	str	r3, [r7, #64]	@ 0x40
	HAL_TIM_ConfigClockSource(&htim2, &sClock);
 8000b5a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481b      	ldr	r0, [pc, #108]	@ (8000bd0 <SineOut_Init+0xbc>)
 8000b62:	f001 ffdf 	bl	8002b24 <HAL_TIM_ConfigClockSource>

	TIM_MasterConfigTypeDef sMaster = { 0 };
 8000b66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
	sMaster.MasterOutputTrigger = TIM_TRGO_RESET;        // Not used (no DMA)
 8000b72:	2300      	movs	r3, #0
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
	sMaster.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMaster);
 8000b7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4813      	ldr	r0, [pc, #76]	@ (8000bd0 <SineOut_Init+0xbc>)
 8000b82:	f002 fa5d 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>

	// NVIC for TIM2
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	f000 fbc7 	bl	800131e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b90:	201c      	movs	r0, #28
 8000b92:	f000 fbde 	bl	8001352 <HAL_NVIC_EnableIRQ>

	// DAC2 init: Trigger = NONE
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2230      	movs	r2, #48	@ 0x30
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 fb2b 	bl	80031f8 <memset>
	hdac2.Instance = DAC2;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <SineOut_Init+0xc0>)
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd8 <SineOut_Init+0xc4>)
 8000ba6:	601a      	str	r2, [r3, #0]
	HAL_DAC_Init(&hdac2);
 8000ba8:	480a      	ldr	r0, [pc, #40]	@ (8000bd4 <SineOut_Init+0xc0>)
 8000baa:	f000 fbec 	bl	8001386 <HAL_DAC_Init>

	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;        // No trigger: we poke in ISR
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
	HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1);
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <SineOut_Init+0xc0>)
 8000bbe:	f000 fc9f 	bl	8001500 <HAL_DAC_ConfigChannel>

	// Build LUT once (float OK here; not in ISR)
	SineTable_Init();
 8000bc2:	f7ff ff49 	bl	8000a58 <SineTable_Init>
}
 8000bc6:	bf00      	nop
 8000bc8:	3750      	adds	r7, #80	@ 0x50
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000003c 	.word	0x2000003c
 8000bd4:	20000028 	.word	0x20000028
 8000bd8:	50000c00 	.word	0x50000c00

08000bdc <SineOut_Start>:

void SineOut_Start(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	g_idx = 0;
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SineOut_Start+0x1c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000be6:	2100      	movs	r1, #0
 8000be8:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <SineOut_Start+0x20>)
 8000bea:	f000 fbef 	bl	80013cc <HAL_DAC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000bee:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <SineOut_Start+0x24>)
 8000bf0:	f001 fdd0 	bl	8002794 <HAL_TIM_Base_Start_IT>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000288 	.word	0x20000288
 8000bfc:	20000028 	.word	0x20000028
 8000c00:	2000003c 	.word	0x2000003c

08000c04 <HAL_TIM_PeriodElapsedCallback>:
	HAL_TIM_Base_Stop_IT(&htim2);
	HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

// HAL ISR callback: write next sample to DAC2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c14:	d117      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x42>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN, g_sine[g_idx++]);
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	b291      	uxth	r1, r2
 8000c20:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c22:	8011      	strh	r1, [r2, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4809      	ldr	r0, [pc, #36]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c32:	f000 fc37 	bl	80014a4 <HAL_DAC_SetValue>
		if (g_idx >= TABLE_SIZE)
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	2bff      	cmp	r3, #255	@ 0xff
 8000c3e:	d902      	bls.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x42>
			g_idx = 0;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	801a      	strh	r2, [r3, #0]
	}
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000288 	.word	0x20000288
 8000c54:	20000088 	.word	0x20000088
 8000c58:	20000028 	.word	0x20000028

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c60:	f000 fa11 	bl	8001086 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c64:	f000 f80c 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c68:	f000 f8dc 	bl	8000e24 <MX_GPIO_Init>
  MX_DAC2_Init();
 8000c6c:	f000 f854 	bl	8000d18 <MX_DAC2_Init>
  MX_TIM2_Init();
 8000c70:	f000 f88c 	bl	8000d8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	SineOut_Init();
 8000c74:	f7ff ff4e 	bl	8000b14 <SineOut_Init>
	SineOut_Start();
 8000c78:	f7ff ffb0 	bl	8000bdc <SineOut_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <main+0x20>

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	@ 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	2238      	movs	r2, #56	@ 0x38
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 fab2 	bl	80031f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 ff68 	bl	8001b78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb2:	2340      	movs	r3, #64	@ 0x40
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cc2:	2355      	movs	r3, #85	@ 0x55
 8000cc4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 f802 	bl	8001ce0 <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ce2:	f000 f8cf 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cea:	2303      	movs	r3, #3
 8000cec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fb00 	bl	8002304 <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d0a:	f000 f8bb 	bl	8000e84 <Error_Handler>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3750      	adds	r7, #80	@ 0x50
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	@ 0x30
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2230      	movs	r2, #48	@ 0x30
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 fa67 	bl	80031f8 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_DAC2_Init+0x6c>)
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <MX_DAC2_Init+0x70>)
 8000d2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000d30:	4814      	ldr	r0, [pc, #80]	@ (8000d84 <MX_DAC2_Init+0x6c>)
 8000d32:	f000 fb28 	bl	8001386 <HAL_DAC_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000d3c:	f000 f8a2 	bl	8000e84 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d40:	2302      	movs	r3, #2
 8000d42:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <MX_DAC2_Init+0x6c>)
 8000d6c:	f000 fbc8 	bl	8001500 <HAL_DAC_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000d76:	f000 f885 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3730      	adds	r7, #48	@ 0x30
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000028 	.word	0x20000028
 8000d88:	50000c00 	.word	0x50000c00

08000d8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_TIM2_Init+0x94>)
 8000dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000db0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <MX_TIM2_Init+0x94>)
 8000db4:	22a9      	movs	r2, #169	@ 0xa9
 8000db6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <MX_TIM2_Init+0x94>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <MX_TIM2_Init+0x94>)
 8000dc0:	2263      	movs	r2, #99	@ 0x63
 8000dc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <MX_TIM2_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <MX_TIM2_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dd0:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <MX_TIM2_Init+0x94>)
 8000dd2:	f001 fc87 	bl	80026e4 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ddc:	f000 f852 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <MX_TIM2_Init+0x94>)
 8000dee:	f001 fe99 	bl	8002b24 <HAL_TIM_ConfigClockSource>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 f844 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dfc:	2320      	movs	r3, #32
 8000dfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_TIM2_Init+0x94>)
 8000e0a:	f002 f919 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 f836 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000003c 	.word	0x2000003c

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_GPIO_Init+0x5c>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <MX_GPIO_Init+0x5c>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <MX_GPIO_Init+0x5c>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_GPIO_Init+0x5c>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	4a0e      	ldr	r2, [pc, #56]	@ (8000e80 <MX_GPIO_Init+0x5c>)
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_GPIO_Init+0x5c>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_GPIO_Init+0x5c>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	4a08      	ldr	r2, [pc, #32]	@ (8000e80 <MX_GPIO_Init+0x5c>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_GPIO_Init+0x5c>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <Error_Handler+0x8>

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb2:	4a08      	ldr	r2, [pc, #32]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ec6:	f000 fefb 	bl	8001cc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a15      	ldr	r2, [pc, #84]	@ (8000f4c <HAL_DAC_MspInit+0x74>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d124      	bne.n	8000f44 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <HAL_DAC_MspInit+0x78>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <HAL_DAC_MspInit+0x78>)
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f06:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_DAC_MspInit+0x78>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <HAL_DAC_MspInit+0x78>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <HAL_DAC_MspInit+0x78>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_DAC_MspInit+0x78>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f2a:	2340      	movs	r3, #64	@ 0x40
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f000 fc98 	bl	8001874 <HAL_GPIO_Init>

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	@ 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	50000c00 	.word	0x50000c00
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f64:	d113      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <HAL_TIM_Base_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f98 <HAL_TIM_Base_MspInit+0x44>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <HAL_TIM_Base_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	201c      	movs	r0, #28
 8000f84:	f000 f9cb 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f88:	201c      	movs	r0, #28
 8000f8a:	f000 f9e2 	bl	8001352 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff2:	f000 f89b 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <TIM2_IRQHandler+0x10>)
 8001002:	f001 fc3f 	bl	8002884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000003c 	.word	0x2000003c

08001010 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <SystemInit+0x20>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <SystemInit+0x20>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001034:	480d      	ldr	r0, [pc, #52]	@ (800106c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001036:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001038:	f7ff ffea 	bl	8001010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480c      	ldr	r0, [pc, #48]	@ (8001070 <LoopForever+0x6>)
  ldr r1, =_edata
 800103e:	490d      	ldr	r1, [pc, #52]	@ (8001074 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <LoopForever+0xe>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001054:	4c0a      	ldr	r4, [pc, #40]	@ (8001080 <LoopForever+0x16>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001062:	f002 f8d1 	bl	8003208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001066:	f7ff fdf9 	bl	8000c5c <main>

0800106a <LoopForever>:

LoopForever:
    b LoopForever
 800106a:	e7fe      	b.n	800106a <LoopForever>
  ldr   r0, =_estack
 800106c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001078:	080040b0 	.word	0x080040b0
  ldr r2, =_sbss
 800107c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001080:	20000290 	.word	0x20000290

08001084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_2_IRQHandler>

08001086 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f939 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f80e 	bl	80010b8 <HAL_InitTick>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	e001      	b.n	80010ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a8:	f7ff fef2 	bl	8000e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ac:	79fb      	ldrb	r3, [r7, #7]

}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <HAL_InitTick+0x68>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d022      	beq.n	8001112 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_InitTick+0x6c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <HAL_InitTick+0x68>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 f944 	bl	800136e <HAL_SYSTICK_Config>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10f      	bne.n	800110c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	d809      	bhi.n	8001106 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f2:	2200      	movs	r2, #0
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	f04f 30ff 	mov.w	r0, #4294967295
 80010fa:	f000 f910 	bl	800131e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <HAL_InitTick+0x70>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	e007      	b.n	8001116 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e004      	b.n	8001116 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e001      	b.n	8001116 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000008 	.word	0x20000008
 8001124:	20000000 	.word	0x20000000
 8001128:	20000004 	.word	0x20000004

0800112c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_IncTick+0x1c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <HAL_IncTick+0x20>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4413      	add	r3, r2
 800113a:	4a03      	ldr	r2, [pc, #12]	@ (8001148 <HAL_IncTick+0x1c>)
 800113c:	6013      	str	r3, [r2, #0]
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	2000028c 	.word	0x2000028c
 800114c:	20000008 	.word	0x20000008

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2000028c 	.word	0x2000028c

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	@ (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	@ (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff29 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff40 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff90 	bl	800125c <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5f 	bl	8001208 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff33 	bl	80011cc <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa4 	bl	80012c4 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e014      	b.n	80013c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d105      	bne.n	80013ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fd95 	bl	8000ed8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2202      	movs	r2, #2
 80013b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e056      	b.n	800148e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	795b      	ldrb	r3, [r3, #5]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_DAC_Start+0x20>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e050      	b.n	800148e <HAL_DAC_Start+0xc2>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2202      	movs	r2, #2
 80013f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	2201      	movs	r2, #1
 8001406:	409a      	lsls	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <HAL_DAC_Start+0xd0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	4a22      	ldr	r2, [pc, #136]	@ (80014a0 <HAL_DAC_Start+0xd4>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	3301      	adds	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8001422:	e002      	b.n	800142a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3b01      	subs	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f9      	bne.n	8001424 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10f      	bne.n	8001456 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001440:	2b02      	cmp	r3, #2
 8001442:	d11d      	bne.n	8001480 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	e014      	b.n	8001480 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2102      	movs	r1, #2
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	429a      	cmp	r2, r3
 800146e:	d107      	bne.n	8001480 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0202 	orr.w	r2, r2, #2
 800147e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000000 	.word	0x20000000
 80014a0:	053e2d63 	.word	0x053e2d63

080014a4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e018      	b.n	80014f2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d105      	bne.n	80014de <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	3308      	adds	r3, #8
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e004      	b.n	80014e8 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	3314      	adds	r3, #20
 80014e6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	461a      	mov	r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <HAL_DAC_ConfigChannel+0x1c>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e1a1      	b.n	8001864 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	795b      	ldrb	r3, [r3, #5]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_DAC_ConfigChannel+0x32>
 800152e:	2302      	movs	r3, #2
 8001530:	e198      	b.n	8001864 <HAL_DAC_ConfigChannel+0x364>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2202      	movs	r2, #2
 800153c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b04      	cmp	r3, #4
 8001544:	d17a      	bne.n	800163c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001546:	f7ff fe03 	bl	8001150 <HAL_GetTick>
 800154a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d13d      	bne.n	80015ce <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001552:	e018      	b.n	8001586 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001554:	f7ff fdfc 	bl	8001150 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d911      	bls.n	8001586 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00a      	beq.n	8001586 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	f043 0208 	orr.w	r2, r3, #8
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2203      	movs	r2, #3
 8001580:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e16e      	b.n	8001864 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1df      	bne.n	8001554 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
 800159e:	e020      	b.n	80015e2 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015a0:	f7ff fdd6 	bl	8001150 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d90f      	bls.n	80015ce <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da0a      	bge.n	80015ce <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	f043 0208 	orr.w	r2, r3, #8
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2203      	movs	r2, #3
 80015c8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e14a      	b.n	8001864 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	dbe3      	blt.n	80015a0 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	ea02 0103 	and.w	r1, r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	409a      	lsls	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	21ff      	movs	r1, #255	@ 0xff
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	ea02 0103 	and.w	r1, r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d11d      	bne.n	8001680 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	221f      	movs	r2, #31
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165c:	4013      	ands	r3, r2
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001674:	4313      	orrs	r3, r2
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2207      	movs	r2, #7
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001698:	4013      	ands	r3, r2
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	e00f      	b.n	80016ca <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d102      	bne.n	80016b8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80016b2:	2301      	movs	r3, #1
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	e008      	b.n	80016ca <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80016c0:	2301      	movs	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
 80016c4:	e001      	b.n	80016ca <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ec:	4013      	ands	r3, r2
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	791b      	ldrb	r3, [r3, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <HAL_DAC_ConfigChannel+0x1fe>
 80016f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016fc:	e000      	b.n	8001700 <HAL_DAC_ConfigChannel+0x200>
 80016fe:	2300      	movs	r3, #0
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001718:	4013      	ands	r3, r2
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	795b      	ldrb	r3, [r3, #5]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d102      	bne.n	800172a <HAL_DAC_ConfigChannel+0x22a>
 8001724:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001728:	e000      	b.n	800172c <HAL_DAC_ConfigChannel+0x22c>
 800172a:	2300      	movs	r3, #0
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	4313      	orrs	r3, r2
 8001730:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d114      	bne.n	800176c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001742:	f000 ff7d 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8001746:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4a48      	ldr	r2, [pc, #288]	@ (800186c <HAL_DAC_ConfigChannel+0x36c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d904      	bls.n	800175a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
 8001758:	e00f      	b.n	800177a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4a44      	ldr	r2, [pc, #272]	@ (8001870 <HAL_DAC_ConfigChannel+0x370>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d90a      	bls.n	8001778 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
 800176a:	e006      	b.n	800177a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001772:	4313      	orrs	r3, r2
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
 8001776:	e000      	b.n	800177a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001778:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001788:	4313      	orrs	r3, r2
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001792:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43da      	mvns	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	400a      	ands	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017cc:	4013      	ands	r3, r2
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e4:	4313      	orrs	r3, r2
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	22c0      	movs	r2, #192	@ 0xc0
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	400a      	ands	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	ea02 0103 	and.w	r1, r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	409a      	lsls	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001862:	7ffb      	ldrb	r3, [r7, #31]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3728      	adds	r7, #40	@ 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	09896800 	.word	0x09896800
 8001870:	04c4b400 	.word	0x04c4b400

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001882:	e15a      	b.n	8001b3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 814c 	beq.w	8001b34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d005      	beq.n	80018b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d130      	bne.n	8001916 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ea:	2201      	movs	r2, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	f003 0201 	and.w	r2, r3, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b03      	cmp	r3, #3
 8001920:	d017      	beq.n	8001952 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d123      	bne.n	80019a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	220f      	movs	r2, #15
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	6939      	ldr	r1, [r7, #16]
 80019a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0203 	and.w	r2, r3, #3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80a6 	beq.w	8001b34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b58 <HAL_GPIO_Init+0x2e4>)
 80019ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001b58 <HAL_GPIO_Init+0x2e4>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f4:	4b58      	ldr	r3, [pc, #352]	@ (8001b58 <HAL_GPIO_Init+0x2e4>)
 80019f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a00:	4a56      	ldr	r2, [pc, #344]	@ (8001b5c <HAL_GPIO_Init+0x2e8>)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a2a:	d01f      	beq.n	8001a6c <HAL_GPIO_Init+0x1f8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b60 <HAL_GPIO_Init+0x2ec>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d019      	beq.n	8001a68 <HAL_GPIO_Init+0x1f4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a4b      	ldr	r2, [pc, #300]	@ (8001b64 <HAL_GPIO_Init+0x2f0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d013      	beq.n	8001a64 <HAL_GPIO_Init+0x1f0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b68 <HAL_GPIO_Init+0x2f4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_GPIO_Init+0x1ec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a49      	ldr	r2, [pc, #292]	@ (8001b6c <HAL_GPIO_Init+0x2f8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0x1e8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a48      	ldr	r2, [pc, #288]	@ (8001b70 <HAL_GPIO_Init+0x2fc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_GPIO_Init+0x1e4>
 8001a54:	2305      	movs	r3, #5
 8001a56:	e00a      	b.n	8001a6e <HAL_GPIO_Init+0x1fa>
 8001a58:	2306      	movs	r3, #6
 8001a5a:	e008      	b.n	8001a6e <HAL_GPIO_Init+0x1fa>
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1fa>
 8001a60:	2303      	movs	r3, #3
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1fa>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1fa>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1fa>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a7e:	4937      	ldr	r1, [pc, #220]	@ (8001b5c <HAL_GPIO_Init+0x2e8>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a8c:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab0:	4a30      	ldr	r2, [pc, #192]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ada:	4a26      	ldr	r2, [pc, #152]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b04:	4a1b      	ldr	r2, [pc, #108]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b2e:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f47f ae9d 	bne.w	8001884 <HAL_GPIO_Init+0x10>
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	48000400 	.word	0x48000400
 8001b64:	48000800 	.word	0x48000800
 8001b68:	48000c00 	.word	0x48000c00
 8001b6c:	48001000 	.word	0x48001000
 8001b70:	48001400 	.word	0x48001400
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d141      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b86:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b92:	d131      	bne.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b94:	4b47      	ldr	r3, [pc, #284]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b9a:	4a46      	ldr	r2, [pc, #280]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bac:	4a41      	ldr	r2, [pc, #260]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2232      	movs	r2, #50	@ 0x32
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	0c9b      	lsrs	r3, r3, #18
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bca:	e002      	b.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bde:	d102      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f2      	bne.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf2:	d158      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e057      	b.n	8001ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c08:	e04d      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c10:	d141      	bne.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c12:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1e:	d131      	bne.n	8001c84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c20:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c26:	4a23      	ldr	r2, [pc, #140]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c30:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c38:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2232      	movs	r2, #50	@ 0x32
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c56:	e002      	b.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6a:	d102      	bne.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f2      	bne.n	8001c58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7e:	d112      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e011      	b.n	8001ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c94:	e007      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c96:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	431bde83 	.word	0x431bde83

08001cc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cce:	6093      	str	r3, [r2, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40007000 	.word	0x40007000

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e2fe      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d075      	beq.n	8001dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfe:	4b97      	ldr	r3, [pc, #604]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d08:	4b94      	ldr	r3, [pc, #592]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3e>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_OscConfig+0x44>
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d10b      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	4b8d      	ldr	r3, [pc, #564]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x108>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d157      	bne.n	8001de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e2d9      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x74>
 8001d46:	4b85      	ldr	r3, [pc, #532]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a84      	ldr	r2, [pc, #528]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e01d      	b.n	8001d90 <HAL_RCC_OscConfig+0xb0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7e      	ldr	r2, [pc, #504]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0xb0>
 8001d78:	4b78      	ldr	r3, [pc, #480]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a77      	ldr	r2, [pc, #476]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b75      	ldr	r3, [pc, #468]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a74      	ldr	r2, [pc, #464]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f9da 	bl	8001150 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f9d6 	bl	8001150 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	@ 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e29e      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0xc0>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f9c6 	bl	8001150 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f9c2 	bl	8001150 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	@ 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e28a      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dda:	4b60      	ldr	r3, [pc, #384]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xe8>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d075      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df6:	4b59      	ldr	r3, [pc, #356]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e00:	4b56      	ldr	r3, [pc, #344]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d102      	bne.n	8001e16 <HAL_RCC_OscConfig+0x136>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_OscConfig+0x13c>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d11f      	bne.n	8001e5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_OscConfig+0x154>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e25d      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b49      	ldr	r3, [pc, #292]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	061b      	lsls	r3, r3, #24
 8001e42:	4946      	ldr	r1, [pc, #280]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e48:	4b45      	ldr	r3, [pc, #276]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f933 	bl	80010b8 <HAL_InitTick>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d043      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e249      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d023      	beq.n	8001eac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b3d      	ldr	r3, [pc, #244]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a3c      	ldr	r2, [pc, #240]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff f96e 	bl	8001150 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e78:	f7ff f96a 	bl	8001150 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e232      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8a:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	061b      	lsls	r3, r3, #24
 8001ea4:	492d      	ldr	r1, [pc, #180]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
 8001eaa:	e01a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eac:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f94a 	bl	8001150 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff f946 	bl	8001150 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e20e      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed2:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1e0>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d041      	beq.n	8001f72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001efc:	4a17      	ldr	r2, [pc, #92]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff f923 	bl	8001150 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0e:	f7ff f91f 	bl	8001150 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e1e7      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f20:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ef      	beq.n	8001f0e <HAL_RCC_OscConfig+0x22e>
 8001f2e:	e020      	b.n	8001f72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f36:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7ff f906 	bl	8001150 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f46:	e00d      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff f902 	bl	8001150 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d906      	bls.n	8001f64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1ca      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f64:	4b8c      	ldr	r3, [pc, #560]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ea      	bne.n	8001f48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80a6 	beq.w	80020cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f84:	4b84      	ldr	r3, [pc, #528]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_OscConfig+0x2b4>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x2b6>
 8001f94:	2300      	movs	r3, #0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb6:	4b79      	ldr	r3, [pc, #484]	@ (800219c <HAL_RCC_OscConfig+0x4bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc2:	4b76      	ldr	r3, [pc, #472]	@ (800219c <HAL_RCC_OscConfig+0x4bc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a75      	ldr	r2, [pc, #468]	@ (800219c <HAL_RCC_OscConfig+0x4bc>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7ff f8bf 	bl	8001150 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7ff f8bb 	bl	8001150 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e183      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800219c <HAL_RCC_OscConfig+0x4bc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d108      	bne.n	800200e <HAL_RCC_OscConfig+0x32e>
 8001ffc:	4b66      	ldr	r3, [pc, #408]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002002:	4a65      	ldr	r2, [pc, #404]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800200c:	e024      	b.n	8002058 <HAL_RCC_OscConfig+0x378>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b05      	cmp	r3, #5
 8002014:	d110      	bne.n	8002038 <HAL_RCC_OscConfig+0x358>
 8002016:	4b60      	ldr	r3, [pc, #384]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201c:	4a5e      	ldr	r2, [pc, #376]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002026:	4b5c      	ldr	r3, [pc, #368]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202c:	4a5a      	ldr	r2, [pc, #360]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002036:	e00f      	b.n	8002058 <HAL_RCC_OscConfig+0x378>
 8002038:	4b57      	ldr	r3, [pc, #348]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	4a56      	ldr	r2, [pc, #344]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002048:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	4a52      	ldr	r2, [pc, #328]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d016      	beq.n	800208e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7ff f876 	bl	8001150 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7ff f872 	bl	8001150 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e138      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	4b46      	ldr	r3, [pc, #280]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ed      	beq.n	8002068 <HAL_RCC_OscConfig+0x388>
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff f85f 	bl	8001150 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff f85b 	bl	8001150 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e121      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1ed      	bne.n	8002096 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ba:	7ffb      	ldrb	r3, [r7, #31]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c0:	4b35      	ldr	r3, [pc, #212]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	4a34      	ldr	r2, [pc, #208]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03c      	beq.n	8002152 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01c      	beq.n	800211a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7ff f82e 	bl	8001150 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f8:	f7ff f82a 	bl	8001150 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0f2      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800210a:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800210c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ef      	beq.n	80020f8 <HAL_RCC_OscConfig+0x418>
 8002118:	e01b      	b.n	8002152 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800211a:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800211c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002120:	4a1d      	ldr	r2, [pc, #116]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7ff f811 	bl	8001150 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002132:	f7ff f80d 	bl	8001150 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0d5      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ef      	bne.n	8002132 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80c9 	beq.w	80022ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800215c:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b0c      	cmp	r3, #12
 8002166:	f000 8083 	beq.w	8002270 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d15e      	bne.n	8002230 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a08      	ldr	r2, [pc, #32]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002178:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800217c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7fe ffe7 	bl	8001150 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	e00c      	b.n	80021a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe ffe3 	bl	8001150 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d905      	bls.n	80021a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0ab      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
 8002198:	40021000 	.word	0x40021000
 800219c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	4b55      	ldr	r3, [pc, #340]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ec      	bne.n	8002186 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b52      	ldr	r3, [pc, #328]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	4b52      	ldr	r3, [pc, #328]	@ (80022fc <HAL_RCC_OscConfig+0x61c>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6a11      	ldr	r1, [r2, #32]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021bc:	3a01      	subs	r2, #1
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80021c6:	0212      	lsls	r2, r2, #8
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021ce:	0852      	lsrs	r2, r2, #1
 80021d0:	3a01      	subs	r2, #1
 80021d2:	0552      	lsls	r2, r2, #21
 80021d4:	4311      	orrs	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021da:	0852      	lsrs	r2, r2, #1
 80021dc:	3a01      	subs	r2, #1
 80021de:	0652      	lsls	r2, r2, #25
 80021e0:	4311      	orrs	r1, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021e6:	06d2      	lsls	r2, r2, #27
 80021e8:	430a      	orrs	r2, r1
 80021ea:	4943      	ldr	r1, [pc, #268]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b41      	ldr	r3, [pc, #260]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a40      	ldr	r2, [pc, #256]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021fc:	4b3e      	ldr	r3, [pc, #248]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a3d      	ldr	r2, [pc, #244]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002206:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe ffa2 	bl	8001150 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe ff9e 	bl	8001150 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e066      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	4b35      	ldr	r3, [pc, #212]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x530>
 800222e:	e05e      	b.n	80022ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a30      	ldr	r2, [pc, #192]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800223a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe ff88 	bl	8001150 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe ff84 	bl	8001150 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e04c      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002256:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002262:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	4924      	ldr	r1, [pc, #144]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002268:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <HAL_RCC_OscConfig+0x620>)
 800226a:	4013      	ands	r3, r2
 800226c:	60cb      	str	r3, [r1, #12]
 800226e:	e03e      	b.n	80022ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e039      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0203 	and.w	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	429a      	cmp	r2, r3
 800228e:	d12c      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	3b01      	subs	r3, #1
 800229c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d123      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d11b      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d113      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d109      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	3b01      	subs	r3, #1
 80022e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	019f800c 	.word	0x019f800c
 8002300:	feeefffc 	.word	0xfeeefffc

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e11e      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800231c:	4b91      	ldr	r3, [pc, #580]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d910      	bls.n	800234c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b8e      	ldr	r3, [pc, #568]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 020f 	bic.w	r2, r3, #15
 8002332:	498c      	ldr	r1, [pc, #560]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b8a      	ldr	r3, [pc, #552]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e106      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d073      	beq.n	8002440 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d129      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002360:	4b81      	ldr	r3, [pc, #516]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0f4      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002370:	f000 f972 	bl	8002658 <RCC_GetSysClockFreqFromPLLSource>
 8002374:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4a7c      	ldr	r2, [pc, #496]	@ (800256c <HAL_RCC_ClockConfig+0x268>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d93f      	bls.n	80023fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800237e:	4b7a      	ldr	r3, [pc, #488]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002392:	2b00      	cmp	r3, #0
 8002394:	d033      	beq.n	80023fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	d12f      	bne.n	80023fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800239e:	4b72      	ldr	r3, [pc, #456]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023a6:	4a70      	ldr	r2, [pc, #448]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e024      	b.n	80023fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0c6      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023cc:	4b66      	ldr	r3, [pc, #408]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0be      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023dc:	f000 f8ce 	bl	800257c <HAL_RCC_GetSysClockFreq>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4a61      	ldr	r2, [pc, #388]	@ (800256c <HAL_RCC_ClockConfig+0x268>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d909      	bls.n	80023fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4957      	ldr	r1, [pc, #348]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002410:	f7fe fe9e 	bl	8001150 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7fe fe9a 	bl	8001150 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e095      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b4e      	ldr	r3, [pc, #312]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002458:	4b43      	ldr	r3, [pc, #268]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a42      	ldr	r2, [pc, #264]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002470:	4b3d      	ldr	r3, [pc, #244]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002478:	4a3b      	ldr	r2, [pc, #236]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800247a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800247e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4936      	ldr	r1, [pc, #216]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
 8002492:	e008      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b80      	cmp	r3, #128	@ 0x80
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800249a:	4b33      	ldr	r3, [pc, #204]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4a32      	ldr	r2, [pc, #200]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80024a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d21d      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 020f 	bic.w	r2, r3, #15
 80024bc:	4929      	ldr	r1, [pc, #164]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fe44 	bl	8001150 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fe40 	bl	8001150 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e03b      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1ed      	bne.n	80024cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4917      	ldr	r1, [pc, #92]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490f      	ldr	r1, [pc, #60]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800252e:	f000 f825 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490c      	ldr	r1, [pc, #48]	@ (8002570 <HAL_RCC_ClockConfig+0x26c>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <HAL_RCC_ClockConfig+0x270>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800254e:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <HAL_RCC_ClockConfig+0x274>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fdb0 	bl	80010b8 <HAL_InitTick>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40022000 	.word	0x40022000
 8002568:	40021000 	.word	0x40021000
 800256c:	04c4b400 	.word	0x04c4b400
 8002570:	08003cc8 	.word	0x08003cc8
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002582:	4b2c      	ldr	r3, [pc, #176]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b04      	cmp	r3, #4
 800258c:	d102      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	e047      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002594:	4b27      	ldr	r3, [pc, #156]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025a0:	4b26      	ldr	r3, [pc, #152]	@ (800263c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	e03e      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025a6:	4b23      	ldr	r3, [pc, #140]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d136      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025b2:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3301      	adds	r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d10c      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d0:	4a1a      	ldr	r2, [pc, #104]	@ (800263c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	4a16      	ldr	r2, [pc, #88]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025da:	68d2      	ldr	r2, [r2, #12]
 80025dc:	0a12      	lsrs	r2, r2, #8
 80025de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
      break;
 80025e8:	e00c      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ea:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	4a10      	ldr	r2, [pc, #64]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	68d2      	ldr	r2, [r2, #12]
 80025f6:	0a12      	lsrs	r2, r2, #8
 80025f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
      break;
 8002602:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0e5b      	lsrs	r3, r3, #25
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	3301      	adds	r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	e001      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002624:	693b      	ldr	r3, [r7, #16]
}
 8002626:	4618      	mov	r0, r3
 8002628:	371c      	adds	r7, #28
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	00f42400 	.word	0x00f42400
 800263c:	007a1200 	.word	0x007a1200

08002640 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <HAL_RCC_GetHCLKFreq+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000000 	.word	0x20000000

08002658 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800265e:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3301      	adds	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d10c      	bne.n	8002696 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800267c:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	4a14      	ldr	r2, [pc, #80]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002686:	68d2      	ldr	r2, [r2, #12]
 8002688:	0a12      	lsrs	r2, r2, #8
 800268a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	617b      	str	r3, [r7, #20]
    break;
 8002694:	e00c      	b.n	80026b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002696:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4a0e      	ldr	r2, [pc, #56]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a0:	68d2      	ldr	r2, [r2, #12]
 80026a2:	0a12      	lsrs	r2, r2, #8
 80026a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
    break;
 80026ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0e5b      	lsrs	r3, r3, #25
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	3301      	adds	r3, #1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026ca:	687b      	ldr	r3, [r7, #4]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40021000 	.word	0x40021000
 80026dc:	007a1200 	.word	0x007a1200
 80026e0:	00f42400 	.word	0x00f42400

080026e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e049      	b.n	800278a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fc22 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3304      	adds	r3, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f000 fb3c 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d001      	beq.n	80027ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e054      	b.n	8002856 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a26      	ldr	r2, [pc, #152]	@ (8002864 <HAL_TIM_Base_Start_IT+0xd0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x80>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d6:	d01d      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x80>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a22      	ldr	r2, [pc, #136]	@ (8002868 <HAL_TIM_Base_Start_IT+0xd4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d018      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x80>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a21      	ldr	r2, [pc, #132]	@ (800286c <HAL_TIM_Base_Start_IT+0xd8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x80>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002870 <HAL_TIM_Base_Start_IT+0xdc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x80>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002874 <HAL_TIM_Base_Start_IT+0xe0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x80>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1c      	ldr	r2, [pc, #112]	@ (8002878 <HAL_TIM_Base_Start_IT+0xe4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x80>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <HAL_TIM_Base_Start_IT+0xe8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d115      	bne.n	8002840 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <HAL_TIM_Base_Start_IT+0xec>)
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b06      	cmp	r3, #6
 8002824:	d015      	beq.n	8002852 <HAL_TIM_Base_Start_IT+0xbe>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800282c:	d011      	beq.n	8002852 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0201 	orr.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283e:	e008      	b.n	8002852 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e000      	b.n	8002854 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002852:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40013400 	.word	0x40013400
 8002878:	40014000 	.word	0x40014000
 800287c:	40015000 	.word	0x40015000
 8002880:	00010007 	.word	0x00010007

08002884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d020      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0202 	mvn.w	r2, #2
 80028b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fa48 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fa3a 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fa4b 	bl	8002d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d020      	beq.n	8002934 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0204 	mvn.w	r2, #4
 8002904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fa22 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa14 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fa25 	bl	8002d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d020      	beq.n	8002980 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0208 	mvn.w	r2, #8
 8002950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2204      	movs	r2, #4
 8002956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f9fc 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9ee 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f9ff 	bl	8002d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d020      	beq.n	80029cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0210 	mvn.w	r2, #16
 800299c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2208      	movs	r2, #8
 80029a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f9d6 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 80029b8:	e005      	b.n	80029c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f9c8 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f9d9 	bl	8002d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0201 	mvn.w	r2, #1
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe f90a 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00c      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fbb1 	bl	8003180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00c      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fba9 	bl	8003194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00c      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f993 	bl	8002d8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00c      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0220 	mvn.w	r2, #32
 8002a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fb71 	bl	800316c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00c      	beq.n	8002aae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fb7d 	bl	80031a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fb75 	bl	80031bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00c      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fb6d 	bl	80031d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00c      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fb65 	bl	80031e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIM_ConfigClockSource+0x1c>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e0f6      	b.n	8002d2e <HAL_TIM_ConfigClockSource+0x20a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002b5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a6f      	ldr	r2, [pc, #444]	@ (8002d38 <HAL_TIM_ConfigClockSource+0x214>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	f000 80c1 	beq.w	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002b80:	4a6d      	ldr	r2, [pc, #436]	@ (8002d38 <HAL_TIM_ConfigClockSource+0x214>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	f200 80c6 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002b88:	4a6c      	ldr	r2, [pc, #432]	@ (8002d3c <HAL_TIM_ConfigClockSource+0x218>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	f000 80b9 	beq.w	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002b90:	4a6a      	ldr	r2, [pc, #424]	@ (8002d3c <HAL_TIM_ConfigClockSource+0x218>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f200 80be 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002b98:	4a69      	ldr	r2, [pc, #420]	@ (8002d40 <HAL_TIM_ConfigClockSource+0x21c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	f000 80b1 	beq.w	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002ba0:	4a67      	ldr	r2, [pc, #412]	@ (8002d40 <HAL_TIM_ConfigClockSource+0x21c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	f200 80b6 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002ba8:	4a66      	ldr	r2, [pc, #408]	@ (8002d44 <HAL_TIM_ConfigClockSource+0x220>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	f000 80a9 	beq.w	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002bb0:	4a64      	ldr	r2, [pc, #400]	@ (8002d44 <HAL_TIM_ConfigClockSource+0x220>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	f200 80ae 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bb8:	4a63      	ldr	r2, [pc, #396]	@ (8002d48 <HAL_TIM_ConfigClockSource+0x224>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f000 80a1 	beq.w	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002bc0:	4a61      	ldr	r2, [pc, #388]	@ (8002d48 <HAL_TIM_ConfigClockSource+0x224>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	f200 80a6 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bc8:	4a60      	ldr	r2, [pc, #384]	@ (8002d4c <HAL_TIM_ConfigClockSource+0x228>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	f000 8099 	beq.w	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002bd0:	4a5e      	ldr	r2, [pc, #376]	@ (8002d4c <HAL_TIM_ConfigClockSource+0x228>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	f200 809e 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002bdc:	f000 8091 	beq.w	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002be0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002be4:	f200 8096 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002be8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bec:	f000 8089 	beq.w	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002bf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf4:	f200 808e 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bfc:	d03e      	beq.n	8002c7c <HAL_TIM_ConfigClockSource+0x158>
 8002bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c02:	f200 8087 	bhi.w	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0a:	f000 8086 	beq.w	8002d1a <HAL_TIM_ConfigClockSource+0x1f6>
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c12:	d87f      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c14:	2b70      	cmp	r3, #112	@ 0x70
 8002c16:	d01a      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x12a>
 8002c18:	2b70      	cmp	r3, #112	@ 0x70
 8002c1a:	d87b      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c1c:	2b60      	cmp	r3, #96	@ 0x60
 8002c1e:	d050      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x19e>
 8002c20:	2b60      	cmp	r3, #96	@ 0x60
 8002c22:	d877      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c24:	2b50      	cmp	r3, #80	@ 0x50
 8002c26:	d03c      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x17e>
 8002c28:	2b50      	cmp	r3, #80	@ 0x50
 8002c2a:	d873      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c2c:	2b40      	cmp	r3, #64	@ 0x40
 8002c2e:	d058      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x1be>
 8002c30:	2b40      	cmp	r3, #64	@ 0x40
 8002c32:	d86f      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c34:	2b30      	cmp	r3, #48	@ 0x30
 8002c36:	d064      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002c38:	2b30      	cmp	r3, #48	@ 0x30
 8002c3a:	d86b      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d060      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d867      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d05c      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d05a      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x1de>
 8002c4c:	e062      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c5e:	f000 f9cf 	bl	8003000 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	609a      	str	r2, [r3, #8]
      break;
 8002c7a:	e04f      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c8c:	f000 f9b8 	bl	8003000 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c9e:	609a      	str	r2, [r3, #8]
      break;
 8002ca0:	e03c      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 f92a 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2150      	movs	r1, #80	@ 0x50
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f983 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e02c      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 f949 	bl	8002f66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2160      	movs	r1, #96	@ 0x60
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f973 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e01c      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f000 f90a 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2140      	movs	r1, #64	@ 0x40
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f963 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002d00:	e00c      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f000 f95a 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002d12:	e003      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e000      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	00100070 	.word	0x00100070
 8002d3c:	00100060 	.word	0x00100060
 8002d40:	00100050 	.word	0x00100050
 8002d44:	00100040 	.word	0x00100040
 8002d48:	00100030 	.word	0x00100030
 8002d4c:	00100020 	.word	0x00100020

08002d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee4 <TIM_Base_SetConfig+0x144>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d017      	beq.n	8002de8 <TIM_Base_SetConfig+0x48>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dbe:	d013      	beq.n	8002de8 <TIM_Base_SetConfig+0x48>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a49      	ldr	r2, [pc, #292]	@ (8002ee8 <TIM_Base_SetConfig+0x148>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00f      	beq.n	8002de8 <TIM_Base_SetConfig+0x48>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a48      	ldr	r2, [pc, #288]	@ (8002eec <TIM_Base_SetConfig+0x14c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <TIM_Base_SetConfig+0x48>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a47      	ldr	r2, [pc, #284]	@ (8002ef0 <TIM_Base_SetConfig+0x150>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d007      	beq.n	8002de8 <TIM_Base_SetConfig+0x48>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a46      	ldr	r2, [pc, #280]	@ (8002ef4 <TIM_Base_SetConfig+0x154>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d003      	beq.n	8002de8 <TIM_Base_SetConfig+0x48>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a45      	ldr	r2, [pc, #276]	@ (8002ef8 <TIM_Base_SetConfig+0x158>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d108      	bne.n	8002dfa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a39      	ldr	r2, [pc, #228]	@ (8002ee4 <TIM_Base_SetConfig+0x144>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d023      	beq.n	8002e4a <TIM_Base_SetConfig+0xaa>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e08:	d01f      	beq.n	8002e4a <TIM_Base_SetConfig+0xaa>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a36      	ldr	r2, [pc, #216]	@ (8002ee8 <TIM_Base_SetConfig+0x148>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01b      	beq.n	8002e4a <TIM_Base_SetConfig+0xaa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a35      	ldr	r2, [pc, #212]	@ (8002eec <TIM_Base_SetConfig+0x14c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d017      	beq.n	8002e4a <TIM_Base_SetConfig+0xaa>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a34      	ldr	r2, [pc, #208]	@ (8002ef0 <TIM_Base_SetConfig+0x150>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <TIM_Base_SetConfig+0xaa>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a33      	ldr	r2, [pc, #204]	@ (8002ef4 <TIM_Base_SetConfig+0x154>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00f      	beq.n	8002e4a <TIM_Base_SetConfig+0xaa>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a33      	ldr	r2, [pc, #204]	@ (8002efc <TIM_Base_SetConfig+0x15c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <TIM_Base_SetConfig+0xaa>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a32      	ldr	r2, [pc, #200]	@ (8002f00 <TIM_Base_SetConfig+0x160>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0xaa>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a31      	ldr	r2, [pc, #196]	@ (8002f04 <TIM_Base_SetConfig+0x164>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0xaa>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef8 <TIM_Base_SetConfig+0x158>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a18      	ldr	r2, [pc, #96]	@ (8002ee4 <TIM_Base_SetConfig+0x144>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <TIM_Base_SetConfig+0x110>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef4 <TIM_Base_SetConfig+0x154>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00f      	beq.n	8002eb0 <TIM_Base_SetConfig+0x110>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a1a      	ldr	r2, [pc, #104]	@ (8002efc <TIM_Base_SetConfig+0x15c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00b      	beq.n	8002eb0 <TIM_Base_SetConfig+0x110>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a19      	ldr	r2, [pc, #100]	@ (8002f00 <TIM_Base_SetConfig+0x160>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d007      	beq.n	8002eb0 <TIM_Base_SetConfig+0x110>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <TIM_Base_SetConfig+0x164>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_Base_SetConfig+0x110>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a13      	ldr	r2, [pc, #76]	@ (8002ef8 <TIM_Base_SetConfig+0x158>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d103      	bne.n	8002eb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f023 0201 	bic.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00
 8002ef4:	40013400 	.word	0x40013400
 8002ef8:	40015000 	.word	0x40015000
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40014400 	.word	0x40014400
 8002f04:	40014800 	.word	0x40014800

08002f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 030a 	bic.w	r3, r3, #10
 8002f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b087      	sub	sp, #28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 0210 	bic.w	r2, r3, #16
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f043 0307 	orr.w	r3, r3, #7
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800301a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	431a      	orrs	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003054:	2302      	movs	r3, #2
 8003056:	e074      	b.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a34      	ldr	r2, [pc, #208]	@ (8003150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a33      	ldr	r2, [pc, #204]	@ (8003154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a31      	ldr	r2, [pc, #196]	@ (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800309c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a21      	ldr	r2, [pc, #132]	@ (8003150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d8:	d01d      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1f      	ldr	r2, [pc, #124]	@ (800315c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d018      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003160 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003164 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a15      	ldr	r2, [pc, #84]	@ (8003154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a18      	ldr	r2, [pc, #96]	@ (8003168 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a11      	ldr	r2, [pc, #68]	@ (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10c      	bne.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800311c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40013400 	.word	0x40013400
 8003158:	40015000 	.word	0x40015000
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800
 8003164:	40000c00 	.word	0x40000c00
 8003168:	40014000 	.word	0x40014000

0800316c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <memset>:
 80031f8:	4402      	add	r2, r0
 80031fa:	4603      	mov	r3, r0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d100      	bne.n	8003202 <memset+0xa>
 8003200:	4770      	bx	lr
 8003202:	f803 1b01 	strb.w	r1, [r3], #1
 8003206:	e7f9      	b.n	80031fc <memset+0x4>

08003208 <__libc_init_array>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	4d0d      	ldr	r5, [pc, #52]	@ (8003240 <__libc_init_array+0x38>)
 800320c:	4c0d      	ldr	r4, [pc, #52]	@ (8003244 <__libc_init_array+0x3c>)
 800320e:	1b64      	subs	r4, r4, r5
 8003210:	10a4      	asrs	r4, r4, #2
 8003212:	2600      	movs	r6, #0
 8003214:	42a6      	cmp	r6, r4
 8003216:	d109      	bne.n	800322c <__libc_init_array+0x24>
 8003218:	4d0b      	ldr	r5, [pc, #44]	@ (8003248 <__libc_init_array+0x40>)
 800321a:	4c0c      	ldr	r4, [pc, #48]	@ (800324c <__libc_init_array+0x44>)
 800321c:	f000 fd48 	bl	8003cb0 <_init>
 8003220:	1b64      	subs	r4, r4, r5
 8003222:	10a4      	asrs	r4, r4, #2
 8003224:	2600      	movs	r6, #0
 8003226:	42a6      	cmp	r6, r4
 8003228:	d105      	bne.n	8003236 <__libc_init_array+0x2e>
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003230:	4798      	blx	r3
 8003232:	3601      	adds	r6, #1
 8003234:	e7ee      	b.n	8003214 <__libc_init_array+0xc>
 8003236:	f855 3b04 	ldr.w	r3, [r5], #4
 800323a:	4798      	blx	r3
 800323c:	3601      	adds	r6, #1
 800323e:	e7f2      	b.n	8003226 <__libc_init_array+0x1e>
 8003240:	080040a8 	.word	0x080040a8
 8003244:	080040a8 	.word	0x080040a8
 8003248:	080040a8 	.word	0x080040a8
 800324c:	080040ac 	.word	0x080040ac

08003250 <sinf>:
 8003250:	ee10 3a10 	vmov	r3, s0
 8003254:	b507      	push	{r0, r1, r2, lr}
 8003256:	4a1f      	ldr	r2, [pc, #124]	@ (80032d4 <sinf+0x84>)
 8003258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800325c:	4293      	cmp	r3, r2
 800325e:	d807      	bhi.n	8003270 <sinf+0x20>
 8003260:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80032d8 <sinf+0x88>
 8003264:	2000      	movs	r0, #0
 8003266:	b003      	add	sp, #12
 8003268:	f85d eb04 	ldr.w	lr, [sp], #4
 800326c:	f000 b88e 	b.w	800338c <__kernel_sinf>
 8003270:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003274:	d304      	bcc.n	8003280 <sinf+0x30>
 8003276:	ee30 0a40 	vsub.f32	s0, s0, s0
 800327a:	b003      	add	sp, #12
 800327c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003280:	4668      	mov	r0, sp
 8003282:	f000 f8cb 	bl	800341c <__ieee754_rem_pio2f>
 8003286:	f000 0003 	and.w	r0, r0, #3
 800328a:	2801      	cmp	r0, #1
 800328c:	d00a      	beq.n	80032a4 <sinf+0x54>
 800328e:	2802      	cmp	r0, #2
 8003290:	d00f      	beq.n	80032b2 <sinf+0x62>
 8003292:	b9c0      	cbnz	r0, 80032c6 <sinf+0x76>
 8003294:	eddd 0a01 	vldr	s1, [sp, #4]
 8003298:	ed9d 0a00 	vldr	s0, [sp]
 800329c:	2001      	movs	r0, #1
 800329e:	f000 f875 	bl	800338c <__kernel_sinf>
 80032a2:	e7ea      	b.n	800327a <sinf+0x2a>
 80032a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80032a8:	ed9d 0a00 	vldr	s0, [sp]
 80032ac:	f000 f816 	bl	80032dc <__kernel_cosf>
 80032b0:	e7e3      	b.n	800327a <sinf+0x2a>
 80032b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80032b6:	ed9d 0a00 	vldr	s0, [sp]
 80032ba:	2001      	movs	r0, #1
 80032bc:	f000 f866 	bl	800338c <__kernel_sinf>
 80032c0:	eeb1 0a40 	vneg.f32	s0, s0
 80032c4:	e7d9      	b.n	800327a <sinf+0x2a>
 80032c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80032ca:	ed9d 0a00 	vldr	s0, [sp]
 80032ce:	f000 f805 	bl	80032dc <__kernel_cosf>
 80032d2:	e7f5      	b.n	80032c0 <sinf+0x70>
 80032d4:	3f490fd8 	.word	0x3f490fd8
 80032d8:	00000000 	.word	0x00000000

080032dc <__kernel_cosf>:
 80032dc:	ee10 3a10 	vmov	r3, s0
 80032e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032e4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80032e8:	eef0 6a40 	vmov.f32	s13, s0
 80032ec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80032f0:	d204      	bcs.n	80032fc <__kernel_cosf+0x20>
 80032f2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80032f6:	ee17 2a90 	vmov	r2, s15
 80032fa:	b342      	cbz	r2, 800334e <__kernel_cosf+0x72>
 80032fc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8003300:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800336c <__kernel_cosf+0x90>
 8003304:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003370 <__kernel_cosf+0x94>
 8003308:	4a1a      	ldr	r2, [pc, #104]	@ (8003374 <__kernel_cosf+0x98>)
 800330a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800330e:	4293      	cmp	r3, r2
 8003310:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003378 <__kernel_cosf+0x9c>
 8003314:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003318:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800337c <__kernel_cosf+0xa0>
 800331c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003320:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003380 <__kernel_cosf+0xa4>
 8003324:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003328:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8003384 <__kernel_cosf+0xa8>
 800332c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003330:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8003334:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003338:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800333c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8003340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003344:	d804      	bhi.n	8003350 <__kernel_cosf+0x74>
 8003346:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800334a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800334e:	4770      	bx	lr
 8003350:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <__kernel_cosf+0xac>)
 8003352:	4293      	cmp	r3, r2
 8003354:	bf9a      	itte	ls
 8003356:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800335a:	ee07 3a10 	vmovls	s14, r3
 800335e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8003362:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003366:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800336a:	e7ec      	b.n	8003346 <__kernel_cosf+0x6a>
 800336c:	ad47d74e 	.word	0xad47d74e
 8003370:	310f74f6 	.word	0x310f74f6
 8003374:	3e999999 	.word	0x3e999999
 8003378:	b493f27c 	.word	0xb493f27c
 800337c:	37d00d01 	.word	0x37d00d01
 8003380:	bab60b61 	.word	0xbab60b61
 8003384:	3d2aaaab 	.word	0x3d2aaaab
 8003388:	3f480000 	.word	0x3f480000

0800338c <__kernel_sinf>:
 800338c:	ee10 3a10 	vmov	r3, s0
 8003390:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003394:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003398:	d204      	bcs.n	80033a4 <__kernel_sinf+0x18>
 800339a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800339e:	ee17 3a90 	vmov	r3, s15
 80033a2:	b35b      	cbz	r3, 80033fc <__kernel_sinf+0x70>
 80033a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80033a8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003400 <__kernel_sinf+0x74>
 80033ac:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8003404 <__kernel_sinf+0x78>
 80033b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80033b4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8003408 <__kernel_sinf+0x7c>
 80033b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80033bc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800340c <__kernel_sinf+0x80>
 80033c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80033c4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8003410 <__kernel_sinf+0x84>
 80033c8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80033cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80033d0:	b930      	cbnz	r0, 80033e0 <__kernel_sinf+0x54>
 80033d2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8003414 <__kernel_sinf+0x88>
 80033d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80033da:	eea6 0a26 	vfma.f32	s0, s12, s13
 80033de:	4770      	bx	lr
 80033e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80033e4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80033e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80033ec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80033f0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8003418 <__kernel_sinf+0x8c>
 80033f4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80033f8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	2f2ec9d3 	.word	0x2f2ec9d3
 8003404:	b2d72f34 	.word	0xb2d72f34
 8003408:	3638ef1b 	.word	0x3638ef1b
 800340c:	b9500d01 	.word	0xb9500d01
 8003410:	3c088889 	.word	0x3c088889
 8003414:	be2aaaab 	.word	0xbe2aaaab
 8003418:	3e2aaaab 	.word	0x3e2aaaab

0800341c <__ieee754_rem_pio2f>:
 800341c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800341e:	ee10 6a10 	vmov	r6, s0
 8003422:	4b88      	ldr	r3, [pc, #544]	@ (8003644 <__ieee754_rem_pio2f+0x228>)
 8003424:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8003428:	429d      	cmp	r5, r3
 800342a:	b087      	sub	sp, #28
 800342c:	4604      	mov	r4, r0
 800342e:	d805      	bhi.n	800343c <__ieee754_rem_pio2f+0x20>
 8003430:	2300      	movs	r3, #0
 8003432:	ed80 0a00 	vstr	s0, [r0]
 8003436:	6043      	str	r3, [r0, #4]
 8003438:	2000      	movs	r0, #0
 800343a:	e022      	b.n	8003482 <__ieee754_rem_pio2f+0x66>
 800343c:	4b82      	ldr	r3, [pc, #520]	@ (8003648 <__ieee754_rem_pio2f+0x22c>)
 800343e:	429d      	cmp	r5, r3
 8003440:	d83a      	bhi.n	80034b8 <__ieee754_rem_pio2f+0x9c>
 8003442:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003446:	2e00      	cmp	r6, #0
 8003448:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800364c <__ieee754_rem_pio2f+0x230>
 800344c:	4a80      	ldr	r2, [pc, #512]	@ (8003650 <__ieee754_rem_pio2f+0x234>)
 800344e:	f023 030f 	bic.w	r3, r3, #15
 8003452:	dd18      	ble.n	8003486 <__ieee754_rem_pio2f+0x6a>
 8003454:	4293      	cmp	r3, r2
 8003456:	ee70 7a47 	vsub.f32	s15, s0, s14
 800345a:	bf09      	itett	eq
 800345c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8003654 <__ieee754_rem_pio2f+0x238>
 8003460:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8003658 <__ieee754_rem_pio2f+0x23c>
 8003464:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800365c <__ieee754_rem_pio2f+0x240>
 8003468:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800346c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003470:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003474:	ed80 7a00 	vstr	s14, [r0]
 8003478:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800347c:	edc0 7a01 	vstr	s15, [r0, #4]
 8003480:	2001      	movs	r0, #1
 8003482:	b007      	add	sp, #28
 8003484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003486:	4293      	cmp	r3, r2
 8003488:	ee70 7a07 	vadd.f32	s15, s0, s14
 800348c:	bf09      	itett	eq
 800348e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8003654 <__ieee754_rem_pio2f+0x238>
 8003492:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8003658 <__ieee754_rem_pio2f+0x23c>
 8003496:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800365c <__ieee754_rem_pio2f+0x240>
 800349a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800349e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80034a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034a6:	ed80 7a00 	vstr	s14, [r0]
 80034aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ae:	edc0 7a01 	vstr	s15, [r0, #4]
 80034b2:	f04f 30ff 	mov.w	r0, #4294967295
 80034b6:	e7e4      	b.n	8003482 <__ieee754_rem_pio2f+0x66>
 80034b8:	4b69      	ldr	r3, [pc, #420]	@ (8003660 <__ieee754_rem_pio2f+0x244>)
 80034ba:	429d      	cmp	r5, r3
 80034bc:	d873      	bhi.n	80035a6 <__ieee754_rem_pio2f+0x18a>
 80034be:	f000 f8dd 	bl	800367c <fabsf>
 80034c2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003664 <__ieee754_rem_pio2f+0x248>
 80034c6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80034ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 80034ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034d6:	ee17 0a90 	vmov	r0, s15
 80034da:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800364c <__ieee754_rem_pio2f+0x230>
 80034de:	eea7 0a67 	vfms.f32	s0, s14, s15
 80034e2:	281f      	cmp	r0, #31
 80034e4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003658 <__ieee754_rem_pio2f+0x23c>
 80034e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ec:	eeb1 6a47 	vneg.f32	s12, s14
 80034f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80034f4:	ee16 1a90 	vmov	r1, s13
 80034f8:	dc09      	bgt.n	800350e <__ieee754_rem_pio2f+0xf2>
 80034fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003668 <__ieee754_rem_pio2f+0x24c>)
 80034fc:	1e47      	subs	r7, r0, #1
 80034fe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003502:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8003506:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800350a:	4293      	cmp	r3, r2
 800350c:	d107      	bne.n	800351e <__ieee754_rem_pio2f+0x102>
 800350e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8003512:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8003516:	2a08      	cmp	r2, #8
 8003518:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800351c:	dc14      	bgt.n	8003548 <__ieee754_rem_pio2f+0x12c>
 800351e:	6021      	str	r1, [r4, #0]
 8003520:	ed94 7a00 	vldr	s14, [r4]
 8003524:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003528:	2e00      	cmp	r6, #0
 800352a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800352e:	ed84 0a01 	vstr	s0, [r4, #4]
 8003532:	daa6      	bge.n	8003482 <__ieee754_rem_pio2f+0x66>
 8003534:	eeb1 7a47 	vneg.f32	s14, s14
 8003538:	eeb1 0a40 	vneg.f32	s0, s0
 800353c:	ed84 7a00 	vstr	s14, [r4]
 8003540:	ed84 0a01 	vstr	s0, [r4, #4]
 8003544:	4240      	negs	r0, r0
 8003546:	e79c      	b.n	8003482 <__ieee754_rem_pio2f+0x66>
 8003548:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8003654 <__ieee754_rem_pio2f+0x238>
 800354c:	eef0 6a40 	vmov.f32	s13, s0
 8003550:	eee6 6a25 	vfma.f32	s13, s12, s11
 8003554:	ee70 7a66 	vsub.f32	s15, s0, s13
 8003558:	eee6 7a25 	vfma.f32	s15, s12, s11
 800355c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800365c <__ieee754_rem_pio2f+0x240>
 8003560:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003564:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003568:	ee15 2a90 	vmov	r2, s11
 800356c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003570:	1a5b      	subs	r3, r3, r1
 8003572:	2b19      	cmp	r3, #25
 8003574:	dc04      	bgt.n	8003580 <__ieee754_rem_pio2f+0x164>
 8003576:	edc4 5a00 	vstr	s11, [r4]
 800357a:	eeb0 0a66 	vmov.f32	s0, s13
 800357e:	e7cf      	b.n	8003520 <__ieee754_rem_pio2f+0x104>
 8003580:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800366c <__ieee754_rem_pio2f+0x250>
 8003584:	eeb0 0a66 	vmov.f32	s0, s13
 8003588:	eea6 0a25 	vfma.f32	s0, s12, s11
 800358c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003590:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8003670 <__ieee754_rem_pio2f+0x254>
 8003594:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003598:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800359c:	ee30 7a67 	vsub.f32	s14, s0, s15
 80035a0:	ed84 7a00 	vstr	s14, [r4]
 80035a4:	e7bc      	b.n	8003520 <__ieee754_rem_pio2f+0x104>
 80035a6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80035aa:	d306      	bcc.n	80035ba <__ieee754_rem_pio2f+0x19e>
 80035ac:	ee70 7a40 	vsub.f32	s15, s0, s0
 80035b0:	edc0 7a01 	vstr	s15, [r0, #4]
 80035b4:	edc0 7a00 	vstr	s15, [r0]
 80035b8:	e73e      	b.n	8003438 <__ieee754_rem_pio2f+0x1c>
 80035ba:	15ea      	asrs	r2, r5, #23
 80035bc:	3a86      	subs	r2, #134	@ 0x86
 80035be:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80035ca:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003674 <__ieee754_rem_pio2f+0x258>
 80035ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035d6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80035da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80035e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ea:	ed8d 7a04 	vstr	s14, [sp, #16]
 80035ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fa:	edcd 7a05 	vstr	s15, [sp, #20]
 80035fe:	d11e      	bne.n	800363e <__ieee754_rem_pio2f+0x222>
 8003600:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2302      	movne	r3, #2
 800360e:	491a      	ldr	r1, [pc, #104]	@ (8003678 <__ieee754_rem_pio2f+0x25c>)
 8003610:	9101      	str	r1, [sp, #4]
 8003612:	2102      	movs	r1, #2
 8003614:	9100      	str	r1, [sp, #0]
 8003616:	a803      	add	r0, sp, #12
 8003618:	4621      	mov	r1, r4
 800361a:	f000 f837 	bl	800368c <__kernel_rem_pio2f>
 800361e:	2e00      	cmp	r6, #0
 8003620:	f6bf af2f 	bge.w	8003482 <__ieee754_rem_pio2f+0x66>
 8003624:	edd4 7a00 	vldr	s15, [r4]
 8003628:	eef1 7a67 	vneg.f32	s15, s15
 800362c:	edc4 7a00 	vstr	s15, [r4]
 8003630:	edd4 7a01 	vldr	s15, [r4, #4]
 8003634:	eef1 7a67 	vneg.f32	s15, s15
 8003638:	edc4 7a01 	vstr	s15, [r4, #4]
 800363c:	e782      	b.n	8003544 <__ieee754_rem_pio2f+0x128>
 800363e:	2303      	movs	r3, #3
 8003640:	e7e5      	b.n	800360e <__ieee754_rem_pio2f+0x1f2>
 8003642:	bf00      	nop
 8003644:	3f490fd8 	.word	0x3f490fd8
 8003648:	4016cbe3 	.word	0x4016cbe3
 800364c:	3fc90f80 	.word	0x3fc90f80
 8003650:	3fc90fd0 	.word	0x3fc90fd0
 8003654:	37354400 	.word	0x37354400
 8003658:	37354443 	.word	0x37354443
 800365c:	2e85a308 	.word	0x2e85a308
 8003660:	43490f80 	.word	0x43490f80
 8003664:	3f22f984 	.word	0x3f22f984
 8003668:	08003cd8 	.word	0x08003cd8
 800366c:	2e85a300 	.word	0x2e85a300
 8003670:	248d3132 	.word	0x248d3132
 8003674:	43800000 	.word	0x43800000
 8003678:	08003d58 	.word	0x08003d58

0800367c <fabsf>:
 800367c:	ee10 3a10 	vmov	r3, s0
 8003680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003684:	ee00 3a10 	vmov	s0, r3
 8003688:	4770      	bx	lr
	...

0800368c <__kernel_rem_pio2f>:
 800368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003690:	ed2d 8b04 	vpush	{d8-d9}
 8003694:	b0d9      	sub	sp, #356	@ 0x164
 8003696:	4690      	mov	r8, r2
 8003698:	9001      	str	r0, [sp, #4]
 800369a:	4ab6      	ldr	r2, [pc, #728]	@ (8003974 <__kernel_rem_pio2f+0x2e8>)
 800369c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800369e:	f118 0f04 	cmn.w	r8, #4
 80036a2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80036a6:	460f      	mov	r7, r1
 80036a8:	f103 3bff 	add.w	fp, r3, #4294967295
 80036ac:	db26      	blt.n	80036fc <__kernel_rem_pio2f+0x70>
 80036ae:	f1b8 0203 	subs.w	r2, r8, #3
 80036b2:	bf48      	it	mi
 80036b4:	f108 0204 	addmi.w	r2, r8, #4
 80036b8:	10d2      	asrs	r2, r2, #3
 80036ba:	1c55      	adds	r5, r2, #1
 80036bc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80036be:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8003984 <__kernel_rem_pio2f+0x2f8>
 80036c2:	00e8      	lsls	r0, r5, #3
 80036c4:	eba2 060b 	sub.w	r6, r2, fp
 80036c8:	9002      	str	r0, [sp, #8]
 80036ca:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80036ce:	eb0a 0c0b 	add.w	ip, sl, fp
 80036d2:	ac1c      	add	r4, sp, #112	@ 0x70
 80036d4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80036d8:	2000      	movs	r0, #0
 80036da:	4560      	cmp	r0, ip
 80036dc:	dd10      	ble.n	8003700 <__kernel_rem_pio2f+0x74>
 80036de:	a91c      	add	r1, sp, #112	@ 0x70
 80036e0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80036e4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80036e8:	2600      	movs	r6, #0
 80036ea:	4556      	cmp	r6, sl
 80036ec:	dc24      	bgt.n	8003738 <__kernel_rem_pio2f+0xac>
 80036ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80036f2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8003984 <__kernel_rem_pio2f+0x2f8>
 80036f6:	4684      	mov	ip, r0
 80036f8:	2400      	movs	r4, #0
 80036fa:	e016      	b.n	800372a <__kernel_rem_pio2f+0x9e>
 80036fc:	2200      	movs	r2, #0
 80036fe:	e7dc      	b.n	80036ba <__kernel_rem_pio2f+0x2e>
 8003700:	42c6      	cmn	r6, r0
 8003702:	bf5d      	ittte	pl
 8003704:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8003708:	ee07 1a90 	vmovpl	s15, r1
 800370c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003710:	eef0 7a47 	vmovmi.f32	s15, s14
 8003714:	ece4 7a01 	vstmia	r4!, {s15}
 8003718:	3001      	adds	r0, #1
 800371a:	e7de      	b.n	80036da <__kernel_rem_pio2f+0x4e>
 800371c:	ecfe 6a01 	vldmia	lr!, {s13}
 8003720:	ed3c 7a01 	vldmdb	ip!, {s14}
 8003724:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003728:	3401      	adds	r4, #1
 800372a:	455c      	cmp	r4, fp
 800372c:	ddf6      	ble.n	800371c <__kernel_rem_pio2f+0x90>
 800372e:	ece9 7a01 	vstmia	r9!, {s15}
 8003732:	3601      	adds	r6, #1
 8003734:	3004      	adds	r0, #4
 8003736:	e7d8      	b.n	80036ea <__kernel_rem_pio2f+0x5e>
 8003738:	a908      	add	r1, sp, #32
 800373a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800373e:	9104      	str	r1, [sp, #16]
 8003740:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003742:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8003980 <__kernel_rem_pio2f+0x2f4>
 8003746:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800397c <__kernel_rem_pio2f+0x2f0>
 800374a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800374e:	9203      	str	r2, [sp, #12]
 8003750:	4654      	mov	r4, sl
 8003752:	00a2      	lsls	r2, r4, #2
 8003754:	9205      	str	r2, [sp, #20]
 8003756:	aa58      	add	r2, sp, #352	@ 0x160
 8003758:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800375c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8003760:	a944      	add	r1, sp, #272	@ 0x110
 8003762:	aa08      	add	r2, sp, #32
 8003764:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003768:	4694      	mov	ip, r2
 800376a:	4626      	mov	r6, r4
 800376c:	2e00      	cmp	r6, #0
 800376e:	dc4c      	bgt.n	800380a <__kernel_rem_pio2f+0x17e>
 8003770:	4628      	mov	r0, r5
 8003772:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003776:	f000 f9f1 	bl	8003b5c <scalbnf>
 800377a:	eeb0 8a40 	vmov.f32	s16, s0
 800377e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8003782:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003786:	f000 fa4f 	bl	8003c28 <floorf>
 800378a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800378e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003792:	2d00      	cmp	r5, #0
 8003794:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003798:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800379c:	ee17 9a90 	vmov	r9, s15
 80037a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80037a8:	dd41      	ble.n	800382e <__kernel_rem_pio2f+0x1a2>
 80037aa:	f104 3cff 	add.w	ip, r4, #4294967295
 80037ae:	a908      	add	r1, sp, #32
 80037b0:	f1c5 0e08 	rsb	lr, r5, #8
 80037b4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80037b8:	fa46 f00e 	asr.w	r0, r6, lr
 80037bc:	4481      	add	r9, r0
 80037be:	fa00 f00e 	lsl.w	r0, r0, lr
 80037c2:	1a36      	subs	r6, r6, r0
 80037c4:	f1c5 0007 	rsb	r0, r5, #7
 80037c8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80037cc:	4106      	asrs	r6, r0
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	dd3c      	ble.n	800384c <__kernel_rem_pio2f+0x1c0>
 80037d2:	f04f 0e00 	mov.w	lr, #0
 80037d6:	f109 0901 	add.w	r9, r9, #1
 80037da:	4670      	mov	r0, lr
 80037dc:	4574      	cmp	r4, lr
 80037de:	dc68      	bgt.n	80038b2 <__kernel_rem_pio2f+0x226>
 80037e0:	2d00      	cmp	r5, #0
 80037e2:	dd03      	ble.n	80037ec <__kernel_rem_pio2f+0x160>
 80037e4:	2d01      	cmp	r5, #1
 80037e6:	d074      	beq.n	80038d2 <__kernel_rem_pio2f+0x246>
 80037e8:	2d02      	cmp	r5, #2
 80037ea:	d07d      	beq.n	80038e8 <__kernel_rem_pio2f+0x25c>
 80037ec:	2e02      	cmp	r6, #2
 80037ee:	d12d      	bne.n	800384c <__kernel_rem_pio2f+0x1c0>
 80037f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80037f4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80037f8:	b340      	cbz	r0, 800384c <__kernel_rem_pio2f+0x1c0>
 80037fa:	4628      	mov	r0, r5
 80037fc:	9306      	str	r3, [sp, #24]
 80037fe:	f000 f9ad 	bl	8003b5c <scalbnf>
 8003802:	9b06      	ldr	r3, [sp, #24]
 8003804:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003808:	e020      	b.n	800384c <__kernel_rem_pio2f+0x1c0>
 800380a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800380e:	3e01      	subs	r6, #1
 8003810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003818:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800381c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003820:	ecac 0a01 	vstmia	ip!, {s0}
 8003824:	ed30 0a01 	vldmdb	r0!, {s0}
 8003828:	ee37 0a80 	vadd.f32	s0, s15, s0
 800382c:	e79e      	b.n	800376c <__kernel_rem_pio2f+0xe0>
 800382e:	d105      	bne.n	800383c <__kernel_rem_pio2f+0x1b0>
 8003830:	1e60      	subs	r0, r4, #1
 8003832:	a908      	add	r1, sp, #32
 8003834:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8003838:	11f6      	asrs	r6, r6, #7
 800383a:	e7c8      	b.n	80037ce <__kernel_rem_pio2f+0x142>
 800383c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003840:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	da31      	bge.n	80038ae <__kernel_rem_pio2f+0x222>
 800384a:	2600      	movs	r6, #0
 800384c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003854:	f040 8098 	bne.w	8003988 <__kernel_rem_pio2f+0x2fc>
 8003858:	1e60      	subs	r0, r4, #1
 800385a:	2200      	movs	r2, #0
 800385c:	4550      	cmp	r0, sl
 800385e:	da4b      	bge.n	80038f8 <__kernel_rem_pio2f+0x26c>
 8003860:	2a00      	cmp	r2, #0
 8003862:	d065      	beq.n	8003930 <__kernel_rem_pio2f+0x2a4>
 8003864:	3c01      	subs	r4, #1
 8003866:	ab08      	add	r3, sp, #32
 8003868:	3d08      	subs	r5, #8
 800386a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f8      	beq.n	8003864 <__kernel_rem_pio2f+0x1d8>
 8003872:	4628      	mov	r0, r5
 8003874:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003878:	f000 f970 	bl	8003b5c <scalbnf>
 800387c:	1c63      	adds	r3, r4, #1
 800387e:	aa44      	add	r2, sp, #272	@ 0x110
 8003880:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003980 <__kernel_rem_pio2f+0x2f4>
 8003884:	0099      	lsls	r1, r3, #2
 8003886:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800388a:	4623      	mov	r3, r4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f280 80a9 	bge.w	80039e4 <__kernel_rem_pio2f+0x358>
 8003892:	4623      	mov	r3, r4
 8003894:	2b00      	cmp	r3, #0
 8003896:	f2c0 80c7 	blt.w	8003a28 <__kernel_rem_pio2f+0x39c>
 800389a:	aa44      	add	r2, sp, #272	@ 0x110
 800389c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80038a0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8003978 <__kernel_rem_pio2f+0x2ec>
 80038a4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8003984 <__kernel_rem_pio2f+0x2f8>
 80038a8:	2000      	movs	r0, #0
 80038aa:	1ae2      	subs	r2, r4, r3
 80038ac:	e0b1      	b.n	8003a12 <__kernel_rem_pio2f+0x386>
 80038ae:	2602      	movs	r6, #2
 80038b0:	e78f      	b.n	80037d2 <__kernel_rem_pio2f+0x146>
 80038b2:	f852 1b04 	ldr.w	r1, [r2], #4
 80038b6:	b948      	cbnz	r0, 80038cc <__kernel_rem_pio2f+0x240>
 80038b8:	b121      	cbz	r1, 80038c4 <__kernel_rem_pio2f+0x238>
 80038ba:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80038be:	f842 1c04 	str.w	r1, [r2, #-4]
 80038c2:	2101      	movs	r1, #1
 80038c4:	f10e 0e01 	add.w	lr, lr, #1
 80038c8:	4608      	mov	r0, r1
 80038ca:	e787      	b.n	80037dc <__kernel_rem_pio2f+0x150>
 80038cc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80038d0:	e7f5      	b.n	80038be <__kernel_rem_pio2f+0x232>
 80038d2:	f104 3cff 	add.w	ip, r4, #4294967295
 80038d6:	aa08      	add	r2, sp, #32
 80038d8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80038dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038e0:	a908      	add	r1, sp, #32
 80038e2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80038e6:	e781      	b.n	80037ec <__kernel_rem_pio2f+0x160>
 80038e8:	f104 3cff 	add.w	ip, r4, #4294967295
 80038ec:	aa08      	add	r2, sp, #32
 80038ee:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80038f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80038f6:	e7f3      	b.n	80038e0 <__kernel_rem_pio2f+0x254>
 80038f8:	a908      	add	r1, sp, #32
 80038fa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80038fe:	3801      	subs	r0, #1
 8003900:	430a      	orrs	r2, r1
 8003902:	e7ab      	b.n	800385c <__kernel_rem_pio2f+0x1d0>
 8003904:	3201      	adds	r2, #1
 8003906:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800390a:	2e00      	cmp	r6, #0
 800390c:	d0fa      	beq.n	8003904 <__kernel_rem_pio2f+0x278>
 800390e:	9905      	ldr	r1, [sp, #20]
 8003910:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8003914:	eb0d 0001 	add.w	r0, sp, r1
 8003918:	18e6      	adds	r6, r4, r3
 800391a:	a91c      	add	r1, sp, #112	@ 0x70
 800391c:	f104 0c01 	add.w	ip, r4, #1
 8003920:	384c      	subs	r0, #76	@ 0x4c
 8003922:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8003926:	4422      	add	r2, r4
 8003928:	4562      	cmp	r2, ip
 800392a:	da04      	bge.n	8003936 <__kernel_rem_pio2f+0x2aa>
 800392c:	4614      	mov	r4, r2
 800392e:	e710      	b.n	8003752 <__kernel_rem_pio2f+0xc6>
 8003930:	9804      	ldr	r0, [sp, #16]
 8003932:	2201      	movs	r2, #1
 8003934:	e7e7      	b.n	8003906 <__kernel_rem_pio2f+0x27a>
 8003936:	9903      	ldr	r1, [sp, #12]
 8003938:	f8dd e004 	ldr.w	lr, [sp, #4]
 800393c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8003940:	9105      	str	r1, [sp, #20]
 8003942:	ee07 1a90 	vmov	s15, r1
 8003946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800394a:	2400      	movs	r4, #0
 800394c:	ece6 7a01 	vstmia	r6!, {s15}
 8003950:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003984 <__kernel_rem_pio2f+0x2f8>
 8003954:	46b1      	mov	r9, r6
 8003956:	455c      	cmp	r4, fp
 8003958:	dd04      	ble.n	8003964 <__kernel_rem_pio2f+0x2d8>
 800395a:	ece0 7a01 	vstmia	r0!, {s15}
 800395e:	f10c 0c01 	add.w	ip, ip, #1
 8003962:	e7e1      	b.n	8003928 <__kernel_rem_pio2f+0x29c>
 8003964:	ecfe 6a01 	vldmia	lr!, {s13}
 8003968:	ed39 7a01 	vldmdb	r9!, {s14}
 800396c:	3401      	adds	r4, #1
 800396e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003972:	e7f0      	b.n	8003956 <__kernel_rem_pio2f+0x2ca>
 8003974:	0800409c 	.word	0x0800409c
 8003978:	08004070 	.word	0x08004070
 800397c:	43800000 	.word	0x43800000
 8003980:	3b800000 	.word	0x3b800000
 8003984:	00000000 	.word	0x00000000
 8003988:	9b02      	ldr	r3, [sp, #8]
 800398a:	eeb0 0a48 	vmov.f32	s0, s16
 800398e:	eba3 0008 	sub.w	r0, r3, r8
 8003992:	f000 f8e3 	bl	8003b5c <scalbnf>
 8003996:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800397c <__kernel_rem_pio2f+0x2f0>
 800399a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800399e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a2:	db19      	blt.n	80039d8 <__kernel_rem_pio2f+0x34c>
 80039a4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8003980 <__kernel_rem_pio2f+0x2f4>
 80039a8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80039ac:	aa08      	add	r2, sp, #32
 80039ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b2:	3508      	adds	r5, #8
 80039b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80039bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80039c4:	ee10 3a10 	vmov	r3, s0
 80039c8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80039cc:	ee17 3a90 	vmov	r3, s15
 80039d0:	3401      	adds	r4, #1
 80039d2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80039d6:	e74c      	b.n	8003872 <__kernel_rem_pio2f+0x1e6>
 80039d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80039dc:	aa08      	add	r2, sp, #32
 80039de:	ee10 3a10 	vmov	r3, s0
 80039e2:	e7f6      	b.n	80039d2 <__kernel_rem_pio2f+0x346>
 80039e4:	a808      	add	r0, sp, #32
 80039e6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80039ea:	9001      	str	r0, [sp, #4]
 80039ec:	ee07 0a90 	vmov	s15, r0
 80039f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039f4:	3b01      	subs	r3, #1
 80039f6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80039fa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80039fe:	ed62 7a01 	vstmdb	r2!, {s15}
 8003a02:	e743      	b.n	800388c <__kernel_rem_pio2f+0x200>
 8003a04:	ecfc 6a01 	vldmia	ip!, {s13}
 8003a08:	ecb5 7a01 	vldmia	r5!, {s14}
 8003a0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003a10:	3001      	adds	r0, #1
 8003a12:	4550      	cmp	r0, sl
 8003a14:	dc01      	bgt.n	8003a1a <__kernel_rem_pio2f+0x38e>
 8003a16:	4290      	cmp	r0, r2
 8003a18:	ddf4      	ble.n	8003a04 <__kernel_rem_pio2f+0x378>
 8003a1a:	a858      	add	r0, sp, #352	@ 0x160
 8003a1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a20:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8003a24:	3b01      	subs	r3, #1
 8003a26:	e735      	b.n	8003894 <__kernel_rem_pio2f+0x208>
 8003a28:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	dc09      	bgt.n	8003a42 <__kernel_rem_pio2f+0x3b6>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	dc27      	bgt.n	8003a82 <__kernel_rem_pio2f+0x3f6>
 8003a32:	d040      	beq.n	8003ab6 <__kernel_rem_pio2f+0x42a>
 8003a34:	f009 0007 	and.w	r0, r9, #7
 8003a38:	b059      	add	sp, #356	@ 0x164
 8003a3a:	ecbd 8b04 	vpop	{d8-d9}
 8003a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a42:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d1f5      	bne.n	8003a34 <__kernel_rem_pio2f+0x3a8>
 8003a48:	aa30      	add	r2, sp, #192	@ 0xc0
 8003a4a:	1f0b      	subs	r3, r1, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4620      	mov	r0, r4
 8003a52:	2800      	cmp	r0, #0
 8003a54:	dc50      	bgt.n	8003af8 <__kernel_rem_pio2f+0x46c>
 8003a56:	4622      	mov	r2, r4
 8003a58:	2a01      	cmp	r2, #1
 8003a5a:	dc5d      	bgt.n	8003b18 <__kernel_rem_pio2f+0x48c>
 8003a5c:	ab30      	add	r3, sp, #192	@ 0xc0
 8003a5e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8003984 <__kernel_rem_pio2f+0x2f8>
 8003a62:	440b      	add	r3, r1
 8003a64:	2c01      	cmp	r4, #1
 8003a66:	dc67      	bgt.n	8003b38 <__kernel_rem_pio2f+0x4ac>
 8003a68:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8003a6c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8003a70:	2e00      	cmp	r6, #0
 8003a72:	d167      	bne.n	8003b44 <__kernel_rem_pio2f+0x4b8>
 8003a74:	edc7 6a00 	vstr	s13, [r7]
 8003a78:	ed87 7a01 	vstr	s14, [r7, #4]
 8003a7c:	edc7 7a02 	vstr	s15, [r7, #8]
 8003a80:	e7d8      	b.n	8003a34 <__kernel_rem_pio2f+0x3a8>
 8003a82:	ab30      	add	r3, sp, #192	@ 0xc0
 8003a84:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8003984 <__kernel_rem_pio2f+0x2f8>
 8003a88:	440b      	add	r3, r1
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	2a00      	cmp	r2, #0
 8003a8e:	da24      	bge.n	8003ada <__kernel_rem_pio2f+0x44e>
 8003a90:	b34e      	cbz	r6, 8003ae6 <__kernel_rem_pio2f+0x45a>
 8003a92:	eef1 7a47 	vneg.f32	s15, s14
 8003a96:	edc7 7a00 	vstr	s15, [r7]
 8003a9a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8003a9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003aa2:	aa31      	add	r2, sp, #196	@ 0xc4
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	da20      	bge.n	8003aec <__kernel_rem_pio2f+0x460>
 8003aaa:	b10e      	cbz	r6, 8003ab0 <__kernel_rem_pio2f+0x424>
 8003aac:	eef1 7a67 	vneg.f32	s15, s15
 8003ab0:	edc7 7a01 	vstr	s15, [r7, #4]
 8003ab4:	e7be      	b.n	8003a34 <__kernel_rem_pio2f+0x3a8>
 8003ab6:	ab30      	add	r3, sp, #192	@ 0xc0
 8003ab8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8003984 <__kernel_rem_pio2f+0x2f8>
 8003abc:	440b      	add	r3, r1
 8003abe:	2c00      	cmp	r4, #0
 8003ac0:	da05      	bge.n	8003ace <__kernel_rem_pio2f+0x442>
 8003ac2:	b10e      	cbz	r6, 8003ac8 <__kernel_rem_pio2f+0x43c>
 8003ac4:	eef1 7a67 	vneg.f32	s15, s15
 8003ac8:	edc7 7a00 	vstr	s15, [r7]
 8003acc:	e7b2      	b.n	8003a34 <__kernel_rem_pio2f+0x3a8>
 8003ace:	ed33 7a01 	vldmdb	r3!, {s14}
 8003ad2:	3c01      	subs	r4, #1
 8003ad4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ad8:	e7f1      	b.n	8003abe <__kernel_rem_pio2f+0x432>
 8003ada:	ed73 7a01 	vldmdb	r3!, {s15}
 8003ade:	3a01      	subs	r2, #1
 8003ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ae4:	e7d2      	b.n	8003a8c <__kernel_rem_pio2f+0x400>
 8003ae6:	eef0 7a47 	vmov.f32	s15, s14
 8003aea:	e7d4      	b.n	8003a96 <__kernel_rem_pio2f+0x40a>
 8003aec:	ecb2 7a01 	vldmia	r2!, {s14}
 8003af0:	3301      	adds	r3, #1
 8003af2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003af6:	e7d6      	b.n	8003aa6 <__kernel_rem_pio2f+0x41a>
 8003af8:	ed72 7a01 	vldmdb	r2!, {s15}
 8003afc:	edd2 6a01 	vldr	s13, [r2, #4]
 8003b00:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003b04:	3801      	subs	r0, #1
 8003b06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b0a:	ed82 7a00 	vstr	s14, [r2]
 8003b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b12:	edc2 7a01 	vstr	s15, [r2, #4]
 8003b16:	e79c      	b.n	8003a52 <__kernel_rem_pio2f+0x3c6>
 8003b18:	ed73 7a01 	vldmdb	r3!, {s15}
 8003b1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003b20:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003b24:	3a01      	subs	r2, #1
 8003b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b2a:	ed83 7a00 	vstr	s14, [r3]
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	edc3 7a01 	vstr	s15, [r3, #4]
 8003b36:	e78f      	b.n	8003a58 <__kernel_rem_pio2f+0x3cc>
 8003b38:	ed33 7a01 	vldmdb	r3!, {s14}
 8003b3c:	3c01      	subs	r4, #1
 8003b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b42:	e78f      	b.n	8003a64 <__kernel_rem_pio2f+0x3d8>
 8003b44:	eef1 6a66 	vneg.f32	s13, s13
 8003b48:	eeb1 7a47 	vneg.f32	s14, s14
 8003b4c:	edc7 6a00 	vstr	s13, [r7]
 8003b50:	ed87 7a01 	vstr	s14, [r7, #4]
 8003b54:	eef1 7a67 	vneg.f32	s15, s15
 8003b58:	e790      	b.n	8003a7c <__kernel_rem_pio2f+0x3f0>
 8003b5a:	bf00      	nop

08003b5c <scalbnf>:
 8003b5c:	ee10 3a10 	vmov	r3, s0
 8003b60:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8003b64:	d02b      	beq.n	8003bbe <scalbnf+0x62>
 8003b66:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003b6a:	d302      	bcc.n	8003b72 <scalbnf+0x16>
 8003b6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003b70:	4770      	bx	lr
 8003b72:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8003b76:	d123      	bne.n	8003bc0 <scalbnf+0x64>
 8003b78:	4b24      	ldr	r3, [pc, #144]	@ (8003c0c <scalbnf+0xb0>)
 8003b7a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8003c10 <scalbnf+0xb4>
 8003b7e:	4298      	cmp	r0, r3
 8003b80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003b84:	db17      	blt.n	8003bb6 <scalbnf+0x5a>
 8003b86:	ee10 3a10 	vmov	r3, s0
 8003b8a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003b8e:	3a19      	subs	r2, #25
 8003b90:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003b94:	4288      	cmp	r0, r1
 8003b96:	dd15      	ble.n	8003bc4 <scalbnf+0x68>
 8003b98:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8003c14 <scalbnf+0xb8>
 8003b9c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8003c18 <scalbnf+0xbc>
 8003ba0:	ee10 3a10 	vmov	r3, s0
 8003ba4:	eeb0 7a67 	vmov.f32	s14, s15
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bfb8      	it	lt
 8003bac:	eef0 7a66 	vmovlt.f32	s15, s13
 8003bb0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003bb4:	4770      	bx	lr
 8003bb6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003c1c <scalbnf+0xc0>
 8003bba:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003bbe:	4770      	bx	lr
 8003bc0:	0dd2      	lsrs	r2, r2, #23
 8003bc2:	e7e5      	b.n	8003b90 <scalbnf+0x34>
 8003bc4:	4410      	add	r0, r2
 8003bc6:	28fe      	cmp	r0, #254	@ 0xfe
 8003bc8:	dce6      	bgt.n	8003b98 <scalbnf+0x3c>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	dd06      	ble.n	8003bdc <scalbnf+0x80>
 8003bce:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003bd2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8003bd6:	ee00 3a10 	vmov	s0, r3
 8003bda:	4770      	bx	lr
 8003bdc:	f110 0f16 	cmn.w	r0, #22
 8003be0:	da09      	bge.n	8003bf6 <scalbnf+0x9a>
 8003be2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003c1c <scalbnf+0xc0>
 8003be6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003c20 <scalbnf+0xc4>
 8003bea:	ee10 3a10 	vmov	r3, s0
 8003bee:	eeb0 7a67 	vmov.f32	s14, s15
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	e7d9      	b.n	8003baa <scalbnf+0x4e>
 8003bf6:	3019      	adds	r0, #25
 8003bf8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003bfc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8003c00:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003c24 <scalbnf+0xc8>
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	e7d7      	b.n	8003bba <scalbnf+0x5e>
 8003c0a:	bf00      	nop
 8003c0c:	ffff3cb0 	.word	0xffff3cb0
 8003c10:	4c000000 	.word	0x4c000000
 8003c14:	7149f2ca 	.word	0x7149f2ca
 8003c18:	f149f2ca 	.word	0xf149f2ca
 8003c1c:	0da24260 	.word	0x0da24260
 8003c20:	8da24260 	.word	0x8da24260
 8003c24:	33000000 	.word	0x33000000

08003c28 <floorf>:
 8003c28:	ee10 3a10 	vmov	r3, s0
 8003c2c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003c30:	3a7f      	subs	r2, #127	@ 0x7f
 8003c32:	2a16      	cmp	r2, #22
 8003c34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c38:	dc2b      	bgt.n	8003c92 <floorf+0x6a>
 8003c3a:	2a00      	cmp	r2, #0
 8003c3c:	da12      	bge.n	8003c64 <floorf+0x3c>
 8003c3e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003ca4 <floorf+0x7c>
 8003c42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003c46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4e:	dd06      	ble.n	8003c5e <floorf+0x36>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	da24      	bge.n	8003c9e <floorf+0x76>
 8003c54:	2900      	cmp	r1, #0
 8003c56:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <floorf+0x80>)
 8003c58:	bf08      	it	eq
 8003c5a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8003c5e:	ee00 3a10 	vmov	s0, r3
 8003c62:	4770      	bx	lr
 8003c64:	4911      	ldr	r1, [pc, #68]	@ (8003cac <floorf+0x84>)
 8003c66:	4111      	asrs	r1, r2
 8003c68:	420b      	tst	r3, r1
 8003c6a:	d0fa      	beq.n	8003c62 <floorf+0x3a>
 8003c6c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8003ca4 <floorf+0x7c>
 8003c70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003c74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7c:	ddef      	ble.n	8003c5e <floorf+0x36>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bfbe      	ittt	lt
 8003c82:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8003c86:	fa40 f202 	asrlt.w	r2, r0, r2
 8003c8a:	189b      	addlt	r3, r3, r2
 8003c8c:	ea23 0301 	bic.w	r3, r3, r1
 8003c90:	e7e5      	b.n	8003c5e <floorf+0x36>
 8003c92:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8003c96:	d3e4      	bcc.n	8003c62 <floorf+0x3a>
 8003c98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003c9c:	4770      	bx	lr
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e7dd      	b.n	8003c5e <floorf+0x36>
 8003ca2:	bf00      	nop
 8003ca4:	7149f2ca 	.word	0x7149f2ca
 8003ca8:	bf800000 	.word	0xbf800000
 8003cac:	007fffff 	.word	0x007fffff

08003cb0 <_init>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr

08003cbc <_fini>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr
