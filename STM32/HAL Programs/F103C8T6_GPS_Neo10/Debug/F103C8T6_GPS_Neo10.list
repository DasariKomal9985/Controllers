
F103C8T6_GPS_Neo10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007704  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08007818  08007818  00008818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d1c  08007d1c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d1c  08007d1c  00008d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d24  08007d24  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d24  08007d24  00008d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d28  08007d28  00008d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d2c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001d4  08007f00  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08007f00  00009458  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079bc  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000181a  00000000  00000000  00010bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  000123d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000590  00000000  00000000  00012b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a1e  00000000  00000000  000130c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e4d  00000000  00000000  0002aade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083efc  00000000  00000000  0003392b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003218  00000000  00000000  000b786c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000baa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080077fc 	.word	0x080077fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080077fc 	.word	0x080077fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010e0:	f000 fc1c 	bl	800191c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010e4:	f000 f976 	bl	80013d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010e8:	f000 fa0e 	bl	8001508 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80010ec:	f000 f9b8 	bl	8001460 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80010f0:	f000 f9e0 	bl	80014b4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart1, (uint8_t*) "Hello from STM32 UART1\r\n", 25,
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	2219      	movs	r2, #25
 80010fa:	490e      	ldr	r1, [pc, #56]	@ (8001134 <main+0x58>)
 80010fc:	480e      	ldr	r0, [pc, #56]	@ (8001138 <main+0x5c>)
 80010fe:	f001 fc13 	bl	8002928 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // Start GPS reception
 8001102:	2201      	movs	r2, #1
 8001104:	490d      	ldr	r1, [pc, #52]	@ (800113c <main+0x60>)
 8001106:	480e      	ldr	r0, [pc, #56]	@ (8001140 <main+0x64>)
 8001108:	f001 fc99 	bl	8002a3e <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (gps_ready) {
 800110c:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <main+0x68>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0fa      	beq.n	800110c <main+0x30>
			gps_ready = 0;
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <main+0x68>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]

			// Check if sentence starts with $GNGLL
			if (strncmp(gps_buffer, "$GNGLL", 6) == 0) {
 800111c:	2206      	movs	r2, #6
 800111e:	490a      	ldr	r1, [pc, #40]	@ (8001148 <main+0x6c>)
 8001120:	480a      	ldr	r0, [pc, #40]	@ (800114c <main+0x70>)
 8001122:	f003 fdc2 	bl	8004caa <strncmp>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1ef      	bne.n	800110c <main+0x30>
				parse_GNGLL(gps_buffer);
 800112c:	4807      	ldr	r0, [pc, #28]	@ (800114c <main+0x70>)
 800112e:	f000 f84d 	bl	80011cc <parse_GNGLL>
		if (gps_ready) {
 8001132:	e7eb      	b.n	800110c <main+0x30>
 8001134:	08007818 	.word	0x08007818
 8001138:	200001f0 	.word	0x200001f0
 800113c:	20000301 	.word	0x20000301
 8001140:	20000238 	.word	0x20000238
 8001144:	20000300 	.word	0x20000300
 8001148:	08007834 	.word	0x08007834
 800114c:	20000280 	.word	0x20000280

08001150 <HAL_UART_RxCpltCallback>:
/**
 * @brief System Clock Configuration
 * @retval None
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a15      	ldr	r2, [pc, #84]	@ (80011b4 <HAL_UART_RxCpltCallback+0x64>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d124      	bne.n	80011ac <HAL_UART_RxCpltCallback+0x5c>
		if (rx_index < sizeof(gps_buffer) - 1) {
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b7e      	cmp	r3, #126	@ 0x7e
 8001168:	d81b      	bhi.n	80011a2 <HAL_UART_RxCpltCallback+0x52>
			if (rx_data == '\n') {
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <HAL_UART_RxCpltCallback+0x6c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b0a      	cmp	r3, #10
 8001170:	d10c      	bne.n	800118c <HAL_UART_RxCpltCallback+0x3c>
				gps_buffer[rx_index] = '\0';
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_UART_RxCpltCallback+0x70>)
 800117a:	2100      	movs	r1, #0
 800117c:	5499      	strb	r1, [r3, r2]
				gps_ready = 1;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <HAL_UART_RxCpltCallback+0x74>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
				rx_index = 0;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	e00a      	b.n	80011a2 <HAL_UART_RxCpltCallback+0x52>
			} else {
				gps_buffer[rx_index++] = rx_data;
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	b2d1      	uxtb	r1, r2
 8001194:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 8001196:	7011      	strb	r1, [r2, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_UART_RxCpltCallback+0x6c>)
 800119c:	7819      	ldrb	r1, [r3, #0]
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_UART_RxCpltCallback+0x70>)
 80011a0:	5499      	strb	r1, [r3, r2]
			}
		}

		HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // Continue reception
 80011a2:	2201      	movs	r2, #1
 80011a4:	4905      	ldr	r1, [pc, #20]	@ (80011bc <HAL_UART_RxCpltCallback+0x6c>)
 80011a6:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <HAL_UART_RxCpltCallback+0x78>)
 80011a8:	f001 fc49 	bl	8002a3e <HAL_UART_Receive_IT>
	}
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40004400 	.word	0x40004400
 80011b8:	20000302 	.word	0x20000302
 80011bc:	20000301 	.word	0x20000301
 80011c0:	20000280 	.word	0x20000280
 80011c4:	20000300 	.word	0x20000300
 80011c8:	20000238 	.word	0x20000238

080011cc <parse_GNGLL>:

void parse_GNGLL(const char *sentence) {
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	b0df      	sub	sp, #380	@ 0x17c
 80011d0:	af08      	add	r7, sp, #32
 80011d2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80011da:	6018      	str	r0, [r3, #0]
	char buffer[128];
	strcpy(buffer, sentence); // Make a local copy
 80011dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011e0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80011e4:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	4610      	mov	r0, r2
 80011ec:	f003 fe43 	bl	8004e76 <strcpy>

	char *token;
	char *fields[10] = { 0 };
 80011f0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80011f4:	2228      	movs	r2, #40	@ 0x28
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 fd4e 	bl	8004c9a <memset>
	int i = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

	token = strtok(buffer, ",");
 8001204:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001208:	496d      	ldr	r1, [pc, #436]	@ (80013c0 <parse_GNGLL+0x1f4>)
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fd60 	bl	8004cd0 <strtok>
 8001210:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	while (token && i < 10) {
 8001214:	e012      	b.n	800123c <parse_GNGLL+0x70>
		fields[i++] = token;
 8001216:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001226:	443b      	add	r3, r7
 8001228:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800122c:	f843 2cd0 	str.w	r2, [r3, #-208]
		token = strtok(NULL, ",");
 8001230:	4963      	ldr	r1, [pc, #396]	@ (80013c0 <parse_GNGLL+0x1f4>)
 8001232:	2000      	movs	r0, #0
 8001234:	f003 fd4c 	bl	8004cd0 <strtok>
 8001238:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	while (token && i < 10) {
 800123c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <parse_GNGLL+0x80>
 8001244:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001248:	2b09      	cmp	r3, #9
 800124a:	dde4      	ble.n	8001216 <parse_GNGLL+0x4a>
	}

	if (i < 6 || !fields[1] || !fields[3])
 800124c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001250:	2b05      	cmp	r3, #5
 8001252:	f340 80af 	ble.w	80013b4 <parse_GNGLL+0x1e8>
 8001256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80aa 	beq.w	80013b4 <parse_GNGLL+0x1e8>
 8001260:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a5 	beq.w	80013b4 <parse_GNGLL+0x1e8>
		return;

	// NMEA format: Latitude = DDMM.MMMM, Longitude = DDDMM.MMMM
	float raw_lat = atof(fields[1]);
 800126a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800126e:	4618      	mov	r0, r3
 8001270:	f002 f974 	bl	800355c <atof>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fc24 	bl	8000ac8 <__aeabi_d2f>
 8001280:	4603      	mov	r3, r0
 8001282:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	float raw_lon = atof(fields[3]);
 8001286:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800128a:	4618      	mov	r0, r3
 800128c:	f002 f966 	bl	800355c <atof>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fc16 	bl	8000ac8 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	int lat_deg = (int) (raw_lat / 100);
 80012a2:	4948      	ldr	r1, [pc, #288]	@ (80013c4 <parse_GNGLL+0x1f8>)
 80012a4:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80012a8:	f7ff fe20 	bl	8000eec <__aeabi_fdiv>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff feb8 	bl	8001024 <__aeabi_f2iz>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	float lat_min = raw_lat - (lat_deg * 100);
 80012ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80012be:	2264      	movs	r2, #100	@ 0x64
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd09 	bl	8000cdc <__aeabi_i2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4619      	mov	r1, r3
 80012ce:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80012d2:	f7ff fc4d 	bl	8000b70 <__aeabi_fsub>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	float lat_decimal = lat_deg + (lat_min / 60.0f);
 80012dc:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80012e0:	f7ff fcfc 	bl	8000cdc <__aeabi_i2f>
 80012e4:	4604      	mov	r4, r0
 80012e6:	4938      	ldr	r1, [pc, #224]	@ (80013c8 <parse_GNGLL+0x1fc>)
 80012e8:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 80012ec:	f7ff fdfe 	bl	8000eec <__aeabi_fdiv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff fc3d 	bl	8000b74 <__addsf3>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	int lon_deg = (int) (raw_lon / 100);
 8001300:	4930      	ldr	r1, [pc, #192]	@ (80013c4 <parse_GNGLL+0x1f8>)
 8001302:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8001306:	f7ff fdf1 	bl	8000eec <__aeabi_fdiv>
 800130a:	4603      	mov	r3, r0
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe89 	bl	8001024 <__aeabi_f2iz>
 8001312:	4603      	mov	r3, r0
 8001314:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	float lon_min = raw_lon - (lon_deg * 100);
 8001318:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800131c:	2264      	movs	r2, #100	@ 0x64
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fcda 	bl	8000cdc <__aeabi_i2f>
 8001328:	4603      	mov	r3, r0
 800132a:	4619      	mov	r1, r3
 800132c:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8001330:	f7ff fc1e 	bl	8000b70 <__aeabi_fsub>
 8001334:	4603      	mov	r3, r0
 8001336:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	float lon_decimal = lon_deg + (lon_min / 60.0f);
 800133a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800133e:	f7ff fccd 	bl	8000cdc <__aeabi_i2f>
 8001342:	4604      	mov	r4, r0
 8001344:	4920      	ldr	r1, [pc, #128]	@ (80013c8 <parse_GNGLL+0x1fc>)
 8001346:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800134a:	f7ff fdcf 	bl	8000eec <__aeabi_fdiv>
 800134e:	4603      	mov	r3, r0
 8001350:	4619      	mov	r1, r3
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff fc0e 	bl	8000b74 <__addsf3>
 8001358:	4603      	mov	r3, r0
 800135a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	char result[128];
	snprintf(result, sizeof(result),
 800135e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001362:	f7ff f861 	bl	8000428 <__aeabi_f2d>
 8001366:	4604      	mov	r4, r0
 8001368:	460d      	mov	r5, r1
 800136a:	f8d7 6090 	ldr.w	r6, [r7, #144]	@ 0x90
 800136e:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001372:	f7ff f859 	bl	8000428 <__aeabi_f2d>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800137e:	f107 0008 	add.w	r0, r7, #8
 8001382:	9106      	str	r1, [sp, #24]
 8001384:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001388:	9602      	str	r6, [sp, #8]
 800138a:	e9cd 4500 	strd	r4, r5, [sp]
 800138e:	4a0f      	ldr	r2, [pc, #60]	@ (80013cc <parse_GNGLL+0x200>)
 8001390:	2180      	movs	r1, #128	@ 0x80
 8001392:	f003 fc09 	bl	8004ba8 <sniprintf>
			"Latitude: %.5f %s\r\nLongitude: %.5f %s\r\n\r\n", lat_decimal,
			fields[2], lon_decimal, fields[4]);

	HAL_UART_Transmit(&huart1, (uint8_t*) result, strlen(result),
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4618      	mov	r0, r3
 800139c:	f7fe fed8 	bl	8000150 <strlen>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f107 0108 	add.w	r1, r7, #8
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <parse_GNGLL+0x204>)
 80013ae:	f001 fabb 	bl	8002928 <HAL_UART_Transmit>
 80013b2:	e000      	b.n	80013b6 <parse_GNGLL+0x1ea>
		return;
 80013b4:	bf00      	nop
			HAL_MAX_DELAY);
}
 80013b6:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	bf00      	nop
 80013c0:	0800783c 	.word	0x0800783c
 80013c4:	42c80000 	.word	0x42c80000
 80013c8:	42700000 	.word	0x42700000
 80013cc:	08007840 	.word	0x08007840
 80013d0:	200001f0 	.word	0x200001f0

080013d4 <SystemClock_Config>:

void SystemClock_Config(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b090      	sub	sp, #64	@ 0x40
 80013d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	2228      	movs	r2, #40	@ 0x28
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 fc59 	bl	8004c9a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001404:	2301      	movs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001408:	2302      	movs	r3, #2
 800140a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001410:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001412:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001416:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fe23 	bl	8002068 <HAL_RCC_OscConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0x58>
		Error_Handler();
 8001428:	f000 f890 	bl	800154c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800142c:	230f      	movs	r3, #15
 800142e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001430:	2302      	movs	r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800143c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2102      	movs	r1, #2
 8001446:	4618      	mov	r0, r3
 8001448:	f001 f890 	bl	800256c <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x82>
		Error_Handler();
 8001452:	f000 f87b 	bl	800154c <Error_Handler>
	}
}
 8001456:	bf00      	nop
 8001458:	3740      	adds	r7, #64	@ 0x40
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_USART1_UART_Init+0x4c>)
 8001466:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <MX_USART1_UART_Init+0x50>)
 8001468:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <MX_USART1_UART_Init+0x4c>)
 800146c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001470:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_USART1_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_USART1_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <MX_USART1_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_USART1_UART_Init+0x4c>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <MX_USART1_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_USART1_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_USART1_UART_Init+0x4c>)
 8001498:	f001 f9f6 	bl	8002888 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80014a2:	f000 f853 	bl	800154c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200001f0 	.word	0x200001f0
 80014b0:	40013800 	.word	0x40013800

080014b4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <MX_USART2_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_USART2_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ec:	f001 f9cc 	bl	8002888 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80014f6:	f000 f829 	bl	800154c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000238 	.word	0x20000238
 8001504:	40004400 	.word	0x40004400

08001508 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <MX_GPIO_Init+0x40>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <MX_GPIO_Init+0x40>)
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	6193      	str	r3, [r2, #24]
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <MX_GPIO_Init+0x40>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <MX_GPIO_Init+0x40>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <MX_GPIO_Init+0x40>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <MX_GPIO_Init+0x40>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000

0800154c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <HAL_MspInit+0x5c>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <HAL_MspInit+0x5c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_MspInit+0x5c>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <HAL_MspInit+0x5c>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a0e      	ldr	r2, [pc, #56]	@ (80015b4 <HAL_MspInit+0x5c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <HAL_MspInit+0x5c>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_MspInit+0x60>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <HAL_MspInit+0x60>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000

080015bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a3b      	ldr	r2, [pc, #236]	@ (80016c4 <HAL_UART_MspInit+0x108>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d132      	bne.n	8001642 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015dc:	4b3a      	ldr	r3, [pc, #232]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a39      	ldr	r2, [pc, #228]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 80015e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b37      	ldr	r3, [pc, #220]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a33      	ldr	r2, [pc, #204]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800160c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0318 	add.w	r3, r7, #24
 800161e:	4619      	mov	r1, r3
 8001620:	482a      	ldr	r0, [pc, #168]	@ (80016cc <HAL_UART_MspInit+0x110>)
 8001622:	f000 fb9d 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	4619      	mov	r1, r3
 800163a:	4824      	ldr	r0, [pc, #144]	@ (80016cc <HAL_UART_MspInit+0x110>)
 800163c:	f000 fb90 	bl	8001d60 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001640:	e03c      	b.n	80016bc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a22      	ldr	r2, [pc, #136]	@ (80016d0 <HAL_UART_MspInit+0x114>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d137      	bne.n	80016bc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800164c:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 8001652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001656:	61d3      	str	r3, [r2, #28]
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_UART_MspInit+0x10c>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800167c:	2304      	movs	r3, #4
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	4619      	mov	r1, r3
 800168e:	480f      	ldr	r0, [pc, #60]	@ (80016cc <HAL_UART_MspInit+0x110>)
 8001690:	f000 fb66 	bl	8001d60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001694:	2308      	movs	r3, #8
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4809      	ldr	r0, [pc, #36]	@ (80016cc <HAL_UART_MspInit+0x110>)
 80016a8:	f000 fb5a 	bl	8001d60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2026      	movs	r0, #38	@ 0x26
 80016b2:	f000 fa6c 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016b6:	2026      	movs	r0, #38	@ 0x26
 80016b8:	f000 fa85 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	@ 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010800 	.word	0x40010800
 80016d0:	40004400 	.word	0x40004400

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <NMI_Handler+0x4>

080016dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <MemManage_Handler+0x4>

080016ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 f940 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <USART2_IRQHandler+0x10>)
 8001732:	f001 f9a9 	bl	8002a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000238 	.word	0x20000238

08001740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <_kill>:

int _kill(int pid, int sig)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001758:	f003 fb60 	bl	8004e1c <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	2216      	movs	r2, #22
 8001760:	601a      	str	r2, [r3, #0]
  return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_exit>:

void _exit (int status)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001776:	f04f 31ff 	mov.w	r1, #4294967295
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffe7 	bl	800174e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <_exit+0x12>

08001784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
  }

  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e009      	b.n	80017e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf1      	blt.n	80017d0 <_write+0x12>
  }
  return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_close>:

int _close(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181c:	605a      	str	r2, [r3, #4]
  return 0;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <_isatty>:

int _isatty(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	@ (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f003 fac8 	bl	8004e1c <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20005000 	.word	0x20005000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000304 	.word	0x20000304
 80018c0:	20000458 	.word	0x20000458

080018c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d0:	f7ff fff8 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480b      	ldr	r0, [pc, #44]	@ (8001904 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018d6:	490c      	ldr	r1, [pc, #48]	@ (8001908 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018d8:	4a0c      	ldr	r2, [pc, #48]	@ (800190c <LoopFillZerobss+0x16>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a09      	ldr	r2, [pc, #36]	@ (8001910 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018ec:	4c09      	ldr	r4, [pc, #36]	@ (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fa:	f003 fa95 	bl	8004e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fe:	f7ff fbed 	bl	80010dc <main>
  bx lr
 8001902:	4770      	bx	lr
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800190c:	08007d2c 	.word	0x08007d2c
  ldr r2, =_sbss
 8001910:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001914:	20000458 	.word	0x20000458

08001918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_2_IRQHandler>
	...

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <HAL_Init+0x28>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	@ (8001944 <HAL_Init+0x28>)
 8001926:	f043 0310 	orr.w	r3, r3, #16
 800192a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f923 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	200f      	movs	r0, #15
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fe0e 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f93b 	bl	8001be2 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f903 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <HAL_IncTick+0x1c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_IncTick+0x20>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a03      	ldr	r2, [pc, #12]	@ (80019c8 <HAL_IncTick+0x20>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000308 	.word	0x20000308

080019cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b02      	ldr	r3, [pc, #8]	@ (80019dc <HAL_GetTick+0x10>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	20000308 	.word	0x20000308

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4906      	ldr	r1, [pc, #24]	@ (8001a78 <__NVIC_EnableIRQ+0x34>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	@ (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	@ (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff90 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff2d 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff42 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff90 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5f 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff35 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffa2 	bl	8001b34 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d008      	beq.n	8001c24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2204      	movs	r2, #4
 8001c16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e020      	b.n	8001c66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 020e 	bic.w	r2, r2, #14
 8001c32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d005      	beq.n	8001c94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	e051      	b.n	8001d38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 020e 	bic.w	r2, r2, #14
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <HAL_DMA_Abort_IT+0xd4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d029      	beq.n	8001d12 <HAL_DMA_Abort_IT+0xa2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <HAL_DMA_Abort_IT+0xd8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d022      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x9e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <HAL_DMA_Abort_IT+0xdc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01a      	beq.n	8001d08 <HAL_DMA_Abort_IT+0x98>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d50 <HAL_DMA_Abort_IT+0xe0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d012      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x92>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <HAL_DMA_Abort_IT+0xe4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00a      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x8c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <HAL_DMA_Abort_IT+0xe8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d102      	bne.n	8001cf6 <HAL_DMA_Abort_IT+0x86>
 8001cf0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cf4:	e00e      	b.n	8001d14 <HAL_DMA_Abort_IT+0xa4>
 8001cf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cfa:	e00b      	b.n	8001d14 <HAL_DMA_Abort_IT+0xa4>
 8001cfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d00:	e008      	b.n	8001d14 <HAL_DMA_Abort_IT+0xa4>
 8001d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d06:	e005      	b.n	8001d14 <HAL_DMA_Abort_IT+0xa4>
 8001d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d0c:	e002      	b.n	8001d14 <HAL_DMA_Abort_IT+0xa4>
 8001d0e:	2310      	movs	r3, #16
 8001d10:	e000      	b.n	8001d14 <HAL_DMA_Abort_IT+0xa4>
 8001d12:	2301      	movs	r3, #1
 8001d14:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_DMA_Abort_IT+0xec>)
 8001d16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
    } 
  }
  return status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40020008 	.word	0x40020008
 8001d48:	4002001c 	.word	0x4002001c
 8001d4c:	40020030 	.word	0x40020030
 8001d50:	40020044 	.word	0x40020044
 8001d54:	40020058 	.word	0x40020058
 8001d58:	4002006c 	.word	0x4002006c
 8001d5c:	40020000 	.word	0x40020000

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b08b      	sub	sp, #44	@ 0x2c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	e169      	b.n	8002048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d74:	2201      	movs	r2, #1
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 8158 	bne.w	8002042 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a9a      	ldr	r2, [pc, #616]	@ (8002000 <HAL_GPIO_Init+0x2a0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d05e      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001d9c:	4a98      	ldr	r2, [pc, #608]	@ (8002000 <HAL_GPIO_Init+0x2a0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d875      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001da2:	4a98      	ldr	r2, [pc, #608]	@ (8002004 <HAL_GPIO_Init+0x2a4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d058      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001da8:	4a96      	ldr	r2, [pc, #600]	@ (8002004 <HAL_GPIO_Init+0x2a4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d86f      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dae:	4a96      	ldr	r2, [pc, #600]	@ (8002008 <HAL_GPIO_Init+0x2a8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d052      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001db4:	4a94      	ldr	r2, [pc, #592]	@ (8002008 <HAL_GPIO_Init+0x2a8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d869      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dba:	4a94      	ldr	r2, [pc, #592]	@ (800200c <HAL_GPIO_Init+0x2ac>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d04c      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001dc0:	4a92      	ldr	r2, [pc, #584]	@ (800200c <HAL_GPIO_Init+0x2ac>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d863      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dc6:	4a92      	ldr	r2, [pc, #584]	@ (8002010 <HAL_GPIO_Init+0x2b0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d046      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001dcc:	4a90      	ldr	r2, [pc, #576]	@ (8002010 <HAL_GPIO_Init+0x2b0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d85d      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dd2:	2b12      	cmp	r3, #18
 8001dd4:	d82a      	bhi.n	8001e2c <HAL_GPIO_Init+0xcc>
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d859      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dda:	a201      	add	r2, pc, #4	@ (adr r2, 8001de0 <HAL_GPIO_Init+0x80>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e5b 	.word	0x08001e5b
 8001de4:	08001e35 	.word	0x08001e35
 8001de8:	08001e47 	.word	0x08001e47
 8001dec:	08001e89 	.word	0x08001e89
 8001df0:	08001e8f 	.word	0x08001e8f
 8001df4:	08001e8f 	.word	0x08001e8f
 8001df8:	08001e8f 	.word	0x08001e8f
 8001dfc:	08001e8f 	.word	0x08001e8f
 8001e00:	08001e8f 	.word	0x08001e8f
 8001e04:	08001e8f 	.word	0x08001e8f
 8001e08:	08001e8f 	.word	0x08001e8f
 8001e0c:	08001e8f 	.word	0x08001e8f
 8001e10:	08001e8f 	.word	0x08001e8f
 8001e14:	08001e8f 	.word	0x08001e8f
 8001e18:	08001e8f 	.word	0x08001e8f
 8001e1c:	08001e8f 	.word	0x08001e8f
 8001e20:	08001e8f 	.word	0x08001e8f
 8001e24:	08001e3d 	.word	0x08001e3d
 8001e28:	08001e51 	.word	0x08001e51
 8001e2c:	4a79      	ldr	r2, [pc, #484]	@ (8002014 <HAL_GPIO_Init+0x2b4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e32:	e02c      	b.n	8001e8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e029      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	3304      	adds	r3, #4
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e024      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e01f      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	330c      	adds	r3, #12
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e01a      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e62:	2304      	movs	r3, #4
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e013      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e70:	2308      	movs	r3, #8
 8001e72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	611a      	str	r2, [r3, #16]
          break;
 8001e7a:	e009      	b.n	8001e90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	615a      	str	r2, [r3, #20]
          break;
 8001e86:	e003      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          break;
 8001e8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2bff      	cmp	r3, #255	@ 0xff
 8001e94:	d801      	bhi.n	8001e9a <HAL_GPIO_Init+0x13a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_Init+0x13e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2bff      	cmp	r3, #255	@ 0xff
 8001ea4:	d802      	bhi.n	8001eac <HAL_GPIO_Init+0x14c>
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x152>
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	3b08      	subs	r3, #8
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	210f      	movs	r1, #15
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	6a39      	ldr	r1, [r7, #32]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80b1 	beq.w	8002042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <HAL_GPIO_Init+0x2b8>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	@ (8002018 <HAL_GPIO_Init+0x2b8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b4a      	ldr	r3, [pc, #296]	@ (8002018 <HAL_GPIO_Init+0x2b8>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ef8:	4a48      	ldr	r2, [pc, #288]	@ (800201c <HAL_GPIO_Init+0x2bc>)
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a40      	ldr	r2, [pc, #256]	@ (8002020 <HAL_GPIO_Init+0x2c0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d013      	beq.n	8001f4c <HAL_GPIO_Init+0x1ec>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3f      	ldr	r2, [pc, #252]	@ (8002024 <HAL_GPIO_Init+0x2c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00d      	beq.n	8001f48 <HAL_GPIO_Init+0x1e8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3e      	ldr	r2, [pc, #248]	@ (8002028 <HAL_GPIO_Init+0x2c8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d007      	beq.n	8001f44 <HAL_GPIO_Init+0x1e4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3d      	ldr	r2, [pc, #244]	@ (800202c <HAL_GPIO_Init+0x2cc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_GPIO_Init+0x1e0>
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e006      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e004      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e002      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f50:	f002 0203 	and.w	r2, r2, #3
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	4093      	lsls	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f5e:	492f      	ldr	r1, [pc, #188]	@ (800201c <HAL_GPIO_Init+0x2bc>)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f78:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	492c      	ldr	r1, [pc, #176]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f86:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4928      	ldr	r1, [pc, #160]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4922      	ldr	r1, [pc, #136]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fae:	4b20      	ldr	r3, [pc, #128]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	491e      	ldr	r1, [pc, #120]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	4918      	ldr	r1, [pc, #96]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4914      	ldr	r1, [pc, #80]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d021      	beq.n	8002034 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	490e      	ldr	r1, [pc, #56]	@ (8002030 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e021      	b.n	8002042 <HAL_GPIO_Init+0x2e2>
 8001ffe:	bf00      	nop
 8002000:	10320000 	.word	0x10320000
 8002004:	10310000 	.word	0x10310000
 8002008:	10220000 	.word	0x10220000
 800200c:	10210000 	.word	0x10210000
 8002010:	10120000 	.word	0x10120000
 8002014:	10110000 	.word	0x10110000
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000
 8002020:	40010800 	.word	0x40010800
 8002024:	40010c00 	.word	0x40010c00
 8002028:	40011000 	.word	0x40011000
 800202c:	40011400 	.word	0x40011400
 8002030:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002034:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_GPIO_Init+0x304>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	43db      	mvns	r3, r3
 800203c:	4909      	ldr	r1, [pc, #36]	@ (8002064 <HAL_GPIO_Init+0x304>)
 800203e:	4013      	ands	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	f47f ae8e 	bne.w	8001d74 <HAL_GPIO_Init+0x14>
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	372c      	adds	r7, #44	@ 0x2c
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	40010400 	.word	0x40010400

08002068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e272      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8087 	beq.w	8002196 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002088:	4b92      	ldr	r3, [pc, #584]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b04      	cmp	r3, #4
 8002092:	d00c      	beq.n	80020ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002094:	4b8f      	ldr	r3, [pc, #572]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d112      	bne.n	80020c6 <HAL_RCC_OscConfig+0x5e>
 80020a0:	4b8c      	ldr	r3, [pc, #560]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ac:	d10b      	bne.n	80020c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ae:	4b89      	ldr	r3, [pc, #548]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d06c      	beq.n	8002194 <HAL_RCC_OscConfig+0x12c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d168      	bne.n	8002194 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e24c      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x76>
 80020d0:	4b80      	ldr	r3, [pc, #512]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a7f      	ldr	r2, [pc, #508]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e02e      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x98>
 80020e6:	4b7b      	ldr	r3, [pc, #492]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7a      	ldr	r2, [pc, #488]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b78      	ldr	r3, [pc, #480]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a77      	ldr	r2, [pc, #476]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0xbc>
 800210a:	4b72      	ldr	r3, [pc, #456]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a71      	ldr	r2, [pc, #452]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b6f      	ldr	r3, [pc, #444]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6e      	ldr	r2, [pc, #440]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 8002124:	4b6b      	ldr	r3, [pc, #428]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6a      	ldr	r2, [pc, #424]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b68      	ldr	r3, [pc, #416]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a67      	ldr	r2, [pc, #412]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800213a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fc42 	bl	80019cc <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff fc3e 	bl	80019cc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e200      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b5d      	ldr	r3, [pc, #372]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xe4>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fc2e 	bl	80019cc <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff fc2a 	bl	80019cc <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	@ 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1ec      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x10c>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a2:	4b4c      	ldr	r3, [pc, #304]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ae:	4b49      	ldr	r3, [pc, #292]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x18c>
 80021ba:	4b46      	ldr	r3, [pc, #280]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x176>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1c0      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4939      	ldr	r1, [pc, #228]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e03a      	b.n	800226a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <HAL_RCC_OscConfig+0x270>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7ff fbe3 	bl	80019cc <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff fbdf 	bl	80019cc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1a1      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4927      	ldr	r1, [pc, #156]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <HAL_RCC_OscConfig+0x270>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fbc2 	bl	80019cc <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7ff fbbe 	bl	80019cc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e180      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03a      	beq.n	80022ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <HAL_RCC_OscConfig+0x274>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff fba2 	bl	80019cc <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228c:	f7ff fb9e 	bl	80019cc <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e160      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b0d      	ldr	r3, [pc, #52]	@ (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f000 face 	bl	800284c <RCC_Delay>
 80022b0:	e01c      	b.n	80022ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <HAL_RCC_OscConfig+0x274>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7ff fb88 	bl	80019cc <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022be:	e00f      	b.n	80022e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c0:	f7ff fb84 	bl	80019cc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d908      	bls.n	80022e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e146      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	42420000 	.word	0x42420000
 80022dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	4b92      	ldr	r3, [pc, #584]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e9      	bne.n	80022c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a6 	beq.w	8002446 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b8b      	ldr	r3, [pc, #556]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a87      	ldr	r2, [pc, #540]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b85      	ldr	r3, [pc, #532]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b82      	ldr	r3, [pc, #520]	@ (8002530 <HAL_RCC_OscConfig+0x4c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d118      	bne.n	8002364 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002332:	4b7f      	ldr	r3, [pc, #508]	@ (8002530 <HAL_RCC_OscConfig+0x4c8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7e      	ldr	r2, [pc, #504]	@ (8002530 <HAL_RCC_OscConfig+0x4c8>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233e:	f7ff fb45 	bl	80019cc <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7ff fb41 	bl	80019cc <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b64      	cmp	r3, #100	@ 0x64
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e103      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	4b75      	ldr	r3, [pc, #468]	@ (8002530 <HAL_RCC_OscConfig+0x4c8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x312>
 800236c:	4b6f      	ldr	r3, [pc, #444]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a6e      	ldr	r2, [pc, #440]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	e02d      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x334>
 8002382:	4b6a      	ldr	r3, [pc, #424]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a69      	ldr	r2, [pc, #420]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	4b67      	ldr	r3, [pc, #412]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a66      	ldr	r2, [pc, #408]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6213      	str	r3, [r2, #32]
 800239a:	e01c      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x356>
 80023a4:	4b61      	ldr	r3, [pc, #388]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a60      	ldr	r2, [pc, #384]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	4b5e      	ldr	r3, [pc, #376]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4a5d      	ldr	r2, [pc, #372]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6213      	str	r3, [r2, #32]
 80023bc:	e00b      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 80023be:	4b5b      	ldr	r3, [pc, #364]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a5a      	ldr	r2, [pc, #360]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	4b58      	ldr	r3, [pc, #352]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a57      	ldr	r2, [pc, #348]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff faf5 	bl	80019cc <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff faf1 	bl	80019cc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0b1      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	4b4b      	ldr	r3, [pc, #300]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ee      	beq.n	80023e6 <HAL_RCC_OscConfig+0x37e>
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7ff fadf 	bl	80019cc <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7ff fadb 	bl	80019cc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e09b      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	4b40      	ldr	r3, [pc, #256]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4b3c      	ldr	r3, [pc, #240]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4a3b      	ldr	r2, [pc, #236]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002444:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8087 	beq.w	800255e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002450:	4b36      	ldr	r3, [pc, #216]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d061      	beq.n	8002520 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d146      	bne.n	80024f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b33      	ldr	r3, [pc, #204]	@ (8002534 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff faaf 	bl	80019cc <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7ff faab 	bl	80019cc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e06d      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	4b29      	ldr	r3, [pc, #164]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002498:	d108      	bne.n	80024ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249a:	4b24      	ldr	r3, [pc, #144]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4921      	ldr	r1, [pc, #132]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ac:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a19      	ldr	r1, [r3, #32]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	430b      	orrs	r3, r1
 80024be:	491b      	ldr	r1, [pc, #108]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_RCC_OscConfig+0x4cc>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff fa7f 	bl	80019cc <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7ff fa7b 	bl	80019cc <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e03d      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x46a>
 80024f0:	e035      	b.n	800255e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff fa68 	bl	80019cc <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7ff fa64 	bl	80019cc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e026      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x498>
 800251e:	e01e      	b.n	800255e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d107      	bne.n	8002538 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e019      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_RCC_OscConfig+0x500>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	429a      	cmp	r2, r3
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0d0      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b6a      	ldr	r3, [pc, #424]	@ (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d910      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b67      	ldr	r3, [pc, #412]	@ (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4965      	ldr	r1, [pc, #404]	@ (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	@ (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a58      	ldr	r2, [pc, #352]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d040      	beq.n	800268c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4b41      	ldr	r3, [pc, #260]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e073      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b3d      	ldr	r3, [pc, #244]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06b      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b39      	ldr	r3, [pc, #228]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4936      	ldr	r1, [pc, #216]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800265c:	f7ff f9b6 	bl	80019cc <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7ff f9b2 	bl	80019cc <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e053      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d210      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0207 	bic.w	r2, r3, #7
 80026a2:	4922      	ldr	r1, [pc, #136]	@ (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	@ (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e6:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f821 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	490a      	ldr	r1, [pc, #40]	@ (8002734 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	@ (8002738 <HAL_RCC_ClockConfig+0x1cc>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <HAL_RCC_ClockConfig+0x1d0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f914 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40022000 	.word	0x40022000
 8002730:	40021000 	.word	0x40021000
 8002734:	0800786c 	.word	0x0800786c
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800275a:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d002      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x30>
 800276a:	2b08      	cmp	r3, #8
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x36>
 800276e:	e027      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002770:	4b19      	ldr	r3, [pc, #100]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002772:	613b      	str	r3, [r7, #16]
      break;
 8002774:	e027      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	0c9b      	lsrs	r3, r3, #18
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d010      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0c5b      	lsrs	r3, r3, #17
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	4a11      	ldr	r2, [pc, #68]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027a2:	fb03 f202 	mul.w	r2, r3, r2
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e004      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	613b      	str	r3, [r7, #16]
      break;
 80027be:	e002      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027c2:	613b      	str	r3, [r7, #16]
      break;
 80027c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c6:	693b      	ldr	r3, [r7, #16]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	08007884 	.word	0x08007884
 80027e0:	08007894 	.word	0x08007894
 80027e4:	003d0900 	.word	0x003d0900

080027e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ec:	4b02      	ldr	r3, [pc, #8]	@ (80027f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff2 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	@ (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	0800787c 	.word	0x0800787c

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffde 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0adb      	lsrs	r3, r3, #11
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	@ (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	0800787c 	.word	0x0800787c

0800284c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002854:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <RCC_Delay+0x34>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0a      	ldr	r2, [pc, #40]	@ (8002884 <RCC_Delay+0x38>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	0a5b      	lsrs	r3, r3, #9
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002868:	bf00      	nop
  }
  while (Delay --);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e5a      	subs	r2, r3, #1
 800286e:	60fa      	str	r2, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f9      	bne.n	8002868 <RCC_Delay+0x1c>
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	20000000 	.word	0x20000000
 8002884:	10624dd3 	.word	0x10624dd3

08002888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e042      	b.n	8002920 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fe84 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	@ 0x24
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fdb7 	bl	8003440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b20      	cmp	r3, #32
 8002946:	d175      	bne.n	8002a34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_UART_Transmit+0x2c>
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e06e      	b.n	8002a36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2221      	movs	r2, #33	@ 0x21
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002966:	f7ff f831 	bl	80019cc <HAL_GetTick>
 800296a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	88fa      	ldrh	r2, [r7, #6]
 8002970:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002980:	d108      	bne.n	8002994 <HAL_UART_Transmit+0x6c>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d104      	bne.n	8002994 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	e003      	b.n	800299c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800299c:	e02e      	b.n	80029fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2180      	movs	r1, #128	@ 0x80
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fb1c 	bl	8002fe6 <UART_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e03a      	b.n	8002a36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10b      	bne.n	80029de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	3302      	adds	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	e007      	b.n	80029ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	3301      	adds	r3, #1
 80029ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1cb      	bne.n	800299e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2140      	movs	r1, #64	@ 0x40
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fae8 	bl	8002fe6 <UART_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e006      	b.n	8002a36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d112      	bne.n	8002a7e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_UART_Receive_IT+0x26>
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e00b      	b.n	8002a80 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fb0f 	bl	8003098 <UART_Start_Receive_IT>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	e000      	b.n	8002a80 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_UART_IRQHandler+0x66>
 8002ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fbec 	bl	80032c4 <UART_Receive_IT>
      return;
 8002aec:	e25b      	b.n	8002fa6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80de 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x22c>
 8002af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80d1 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_UART_IRQHandler+0xae>
 8002b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_UART_IRQHandler+0xd2>
 8002b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_UART_IRQHandler+0xf6>
 8002b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	f043 0204 	orr.w	r2, r3, #4
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d011      	beq.n	8002bae <HAL_UART_IRQHandler+0x126>
 8002b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f043 0208 	orr.w	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 81f2 	beq.w	8002f9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x14e>
 8002bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fb77 	bl	80032c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <HAL_UART_IRQHandler+0x17a>
 8002bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d04f      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa81 	bl	800310a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d041      	beq.n	8002c9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3314      	adds	r3, #20
 8002c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1d9      	bne.n	8002c16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d013      	beq.n	8002c92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e68 <HAL_UART_IRQHandler+0x3e0>)
 8002c70:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe fffa 	bl	8001c70 <HAL_DMA_Abort_IT>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c90:	e00e      	b.n	8002cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f993 	bl	8002fbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	e00a      	b.n	8002cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f98f 	bl	8002fbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca0:	e006      	b.n	8002cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f98b 	bl	8002fbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002cae:	e175      	b.n	8002f9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	bf00      	nop
    return;
 8002cb2:	e173      	b.n	8002f9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	f040 814f 	bne.w	8002f5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8148 	beq.w	8002f5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8141 	beq.w	8002f5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80b6 	beq.w	8002e6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8145 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	f080 813e 	bcs.w	8002fa0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	f000 8088 	beq.w	8002e48 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d46:	e853 3f00 	ldrex	r3, [r3]
 8002d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d64:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1d9      	bne.n	8002d38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d8e:	e853 3f00 	ldrex	r3, [r3]
 8002d92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3314      	adds	r3, #20
 8002da4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002da8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002dac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002db0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002db4:	e841 2300 	strex	r3, r2, [r1]
 8002db8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e1      	bne.n	8002d84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dca:	e853 3f00 	ldrex	r3, [r3]
 8002dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002dd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3314      	adds	r3, #20
 8002de0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002de4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002de6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002dea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e3      	bne.n	8002dc0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e18:	f023 0310 	bic.w	r3, r3, #16
 8002e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e2c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e3      	bne.n	8002e06 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fed9 	bl	8001bfa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8b6 	bl	8002fd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e64:	e09c      	b.n	8002fa0 <HAL_UART_IRQHandler+0x518>
 8002e66:	bf00      	nop
 8002e68:	080031cf 	.word	0x080031cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 808e 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8089 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002eb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e3      	bne.n	8002e92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3314      	adds	r3, #20
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	e853 3f00 	ldrex	r3, [r3]
 8002ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3314      	adds	r3, #20
 8002eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002eee:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1e3      	bne.n	8002eca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0310 	bic.w	r3, r3, #16
 8002f26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f34:	61fa      	str	r2, [r7, #28]
 8002f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	69b9      	ldr	r1, [r7, #24]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	617b      	str	r3, [r7, #20]
   return(result);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e3      	bne.n	8002f10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f83b 	bl	8002fd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f5a:	e023      	b.n	8002fa4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_UART_IRQHandler+0x4f4>
 8002f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f93e 	bl	80031f6 <UART_Transmit_IT>
    return;
 8002f7a:	e014      	b.n	8002fa6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x51e>
 8002f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f97d 	bl	8003294 <UART_EndTransmit_IT>
    return;
 8002f9a:	e004      	b.n	8002fa6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002f9c:	bf00      	nop
 8002f9e:	e002      	b.n	8002fa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002fa0:	bf00      	nop
 8002fa2:	e000      	b.n	8002fa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002fa4:	bf00      	nop
  }
}
 8002fa6:	37e8      	adds	r7, #232	@ 0xe8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff6:	e03b      	b.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d037      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003000:	f7fe fce4 	bl	80019cc <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d302      	bcc.n	8003016 <UART_WaitOnFlagUntilTimeout+0x30>
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e03a      	b.n	8003090 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d023      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b80      	cmp	r3, #128	@ 0x80
 800302c:	d020      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d01d      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b08      	cmp	r3, #8
 8003040:	d116      	bne.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f856 	bl	800310a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2208      	movs	r2, #8
 8003062:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e00f      	b.n	8003090 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	429a      	cmp	r2, r3
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	429a      	cmp	r2, r3
 800308c:	d0b4      	beq.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	4613      	mov	r3, r2
 80030a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	88fa      	ldrh	r2, [r7, #6]
 80030b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2222      	movs	r2, #34	@ 0x22
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0220 	orr.w	r2, r2, #32
 80030fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800310a:	b480      	push	{r7}
 800310c:	b095      	sub	sp, #84	@ 0x54
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	330c      	adds	r3, #12
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003128:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003132:	643a      	str	r2, [r7, #64]	@ 0x40
 8003134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003138:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e5      	bne.n	8003112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3314      	adds	r3, #20
 800314c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	61fb      	str	r3, [r7, #28]
   return(result);
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3314      	adds	r3, #20
 8003164:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003166:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003168:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800316c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e5      	bne.n	8003146 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	2b01      	cmp	r3, #1
 8003180:	d119      	bne.n	80031b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	330c      	adds	r3, #12
 8003188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	60bb      	str	r3, [r7, #8]
   return(result);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f023 0310 	bic.w	r3, r3, #16
 8003198:	647b      	str	r3, [r7, #68]	@ 0x44
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031a2:	61ba      	str	r2, [r7, #24]
 80031a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6979      	ldr	r1, [r7, #20]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	613b      	str	r3, [r7, #16]
   return(result);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e5      	bne.n	8003182 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031c4:	bf00      	nop
 80031c6:	3754      	adds	r7, #84	@ 0x54
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff fee8 	bl	8002fbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b21      	cmp	r3, #33	@ 0x21
 8003208:	d13e      	bne.n	8003288 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003212:	d114      	bne.n	800323e <UART_Transmit_IT+0x48>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d110      	bne.n	800323e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003230:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	1c9a      	adds	r2, r3, #2
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]
 800323c:	e008      	b.n	8003250 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	1c59      	adds	r1, r3, #1
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6211      	str	r1, [r2, #32]
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29b      	uxth	r3, r3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4619      	mov	r1, r3
 800325e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10f      	bne.n	8003284 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003272:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003282:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fe79 	bl	8002fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08c      	sub	sp, #48	@ 0x30
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b22      	cmp	r3, #34	@ 0x22
 80032d6:	f040 80ae 	bne.w	8003436 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e2:	d117      	bne.n	8003314 <UART_Receive_IT+0x50>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d113      	bne.n	8003314 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003302:	b29a      	uxth	r2, r3
 8003304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003306:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	629a      	str	r2, [r3, #40]	@ 0x28
 8003312:	e026      	b.n	8003362 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003326:	d007      	beq.n	8003338 <UART_Receive_IT+0x74>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <UART_Receive_IT+0x82>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d106      	bne.n	8003346 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e008      	b.n	8003358 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003352:	b2da      	uxtb	r2, r3
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003356:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29b      	uxth	r3, r3
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4619      	mov	r1, r3
 8003370:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003372:	2b00      	cmp	r3, #0
 8003374:	d15d      	bne.n	8003432 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0220 	bic.w	r2, r2, #32
 8003384:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003394:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d135      	bne.n	8003428 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	613b      	str	r3, [r7, #16]
   return(result);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f023 0310 	bic.w	r3, r3, #16
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e2:	623a      	str	r2, [r7, #32]
 80033e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	69f9      	ldr	r1, [r7, #28]
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e5      	bne.n	80033c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b10      	cmp	r3, #16
 8003402:	d10a      	bne.n	800341a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fdd5 	bl	8002fd0 <HAL_UARTEx_RxEventCallback>
 8003426:	e002      	b.n	800342e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd fe91 	bl	8001150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e002      	b.n	8003438 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e000      	b.n	8003438 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003436:	2302      	movs	r3, #2
  }
}
 8003438:	4618      	mov	r0, r3
 800343a:	3730      	adds	r7, #48	@ 0x30
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800347a:	f023 030c 	bic.w	r3, r3, #12
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	430b      	orrs	r3, r1
 8003486:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003554 <UART_SetConfig+0x114>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d103      	bne.n	80034b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034a8:	f7ff f9bc 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	e002      	b.n	80034b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034b0:	f7ff f9a4 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 80034b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009a      	lsls	r2, r3, #2
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	4a22      	ldr	r2, [pc, #136]	@ (8003558 <UART_SetConfig+0x118>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	0119      	lsls	r1, r3, #4
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009a      	lsls	r2, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003558 <UART_SetConfig+0x118>)
 80034ee:	fba3 0302 	umull	r0, r3, r3, r2
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2064      	movs	r0, #100	@ 0x64
 80034f6:	fb00 f303 	mul.w	r3, r0, r3
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	3332      	adds	r3, #50	@ 0x32
 8003500:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <UART_SetConfig+0x118>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800350c:	4419      	add	r1, r3
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	009a      	lsls	r2, r3, #2
 8003518:	441a      	add	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	fbb2 f2f3 	udiv	r2, r2, r3
 8003524:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <UART_SetConfig+0x118>)
 8003526:	fba3 0302 	umull	r0, r3, r3, r2
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2064      	movs	r0, #100	@ 0x64
 800352e:	fb00 f303 	mul.w	r3, r0, r3
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	3332      	adds	r3, #50	@ 0x32
 8003538:	4a07      	ldr	r2, [pc, #28]	@ (8003558 <UART_SetConfig+0x118>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	f003 020f 	and.w	r2, r3, #15
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	440a      	add	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40013800 	.word	0x40013800
 8003558:	51eb851f 	.word	0x51eb851f

0800355c <atof>:
 800355c:	2100      	movs	r1, #0
 800355e:	f000 bdfb 	b.w	8004158 <strtod>

08003562 <sulp>:
 8003562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003566:	460f      	mov	r7, r1
 8003568:	4690      	mov	r8, r2
 800356a:	f003 fadf 	bl	8006b2c <__ulp>
 800356e:	4604      	mov	r4, r0
 8003570:	460d      	mov	r5, r1
 8003572:	f1b8 0f00 	cmp.w	r8, #0
 8003576:	d011      	beq.n	800359c <sulp+0x3a>
 8003578:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800357c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8003580:	2b00      	cmp	r3, #0
 8003582:	dd0b      	ble.n	800359c <sulp+0x3a>
 8003584:	2400      	movs	r4, #0
 8003586:	051b      	lsls	r3, r3, #20
 8003588:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800358c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8003590:	4622      	mov	r2, r4
 8003592:	462b      	mov	r3, r5
 8003594:	f7fc ffa0 	bl	80004d8 <__aeabi_dmul>
 8003598:	4604      	mov	r4, r0
 800359a:	460d      	mov	r5, r1
 800359c:	4620      	mov	r0, r4
 800359e:	4629      	mov	r1, r5
 80035a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a4:	0000      	movs	r0, r0
	...

080035a8 <_strtod_l>:
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	b09f      	sub	sp, #124	@ 0x7c
 80035ae:	9217      	str	r2, [sp, #92]	@ 0x5c
 80035b0:	2200      	movs	r2, #0
 80035b2:	460c      	mov	r4, r1
 80035b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80035b6:	f04f 0a00 	mov.w	sl, #0
 80035ba:	f04f 0b00 	mov.w	fp, #0
 80035be:	460a      	mov	r2, r1
 80035c0:	9005      	str	r0, [sp, #20]
 80035c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80035c4:	7811      	ldrb	r1, [r2, #0]
 80035c6:	292b      	cmp	r1, #43	@ 0x2b
 80035c8:	d048      	beq.n	800365c <_strtod_l+0xb4>
 80035ca:	d836      	bhi.n	800363a <_strtod_l+0x92>
 80035cc:	290d      	cmp	r1, #13
 80035ce:	d830      	bhi.n	8003632 <_strtod_l+0x8a>
 80035d0:	2908      	cmp	r1, #8
 80035d2:	d830      	bhi.n	8003636 <_strtod_l+0x8e>
 80035d4:	2900      	cmp	r1, #0
 80035d6:	d039      	beq.n	800364c <_strtod_l+0xa4>
 80035d8:	2200      	movs	r2, #0
 80035da:	920e      	str	r2, [sp, #56]	@ 0x38
 80035dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80035de:	782a      	ldrb	r2, [r5, #0]
 80035e0:	2a30      	cmp	r2, #48	@ 0x30
 80035e2:	f040 80b0 	bne.w	8003746 <_strtod_l+0x19e>
 80035e6:	786a      	ldrb	r2, [r5, #1]
 80035e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80035ec:	2a58      	cmp	r2, #88	@ 0x58
 80035ee:	d16c      	bne.n	80036ca <_strtod_l+0x122>
 80035f0:	9302      	str	r3, [sp, #8]
 80035f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80035f4:	4a8f      	ldr	r2, [pc, #572]	@ (8003834 <_strtod_l+0x28c>)
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	ab1a      	add	r3, sp, #104	@ 0x68
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	9805      	ldr	r0, [sp, #20]
 80035fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003600:	a919      	add	r1, sp, #100	@ 0x64
 8003602:	f002 fb8d 	bl	8005d20 <__gethex>
 8003606:	f010 060f 	ands.w	r6, r0, #15
 800360a:	4604      	mov	r4, r0
 800360c:	d005      	beq.n	800361a <_strtod_l+0x72>
 800360e:	2e06      	cmp	r6, #6
 8003610:	d126      	bne.n	8003660 <_strtod_l+0xb8>
 8003612:	2300      	movs	r3, #0
 8003614:	3501      	adds	r5, #1
 8003616:	9519      	str	r5, [sp, #100]	@ 0x64
 8003618:	930e      	str	r3, [sp, #56]	@ 0x38
 800361a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 8582 	bne.w	8004126 <_strtod_l+0xb7e>
 8003622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003624:	b1bb      	cbz	r3, 8003656 <_strtod_l+0xae>
 8003626:	4650      	mov	r0, sl
 8003628:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800362c:	b01f      	add	sp, #124	@ 0x7c
 800362e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003632:	2920      	cmp	r1, #32
 8003634:	d1d0      	bne.n	80035d8 <_strtod_l+0x30>
 8003636:	3201      	adds	r2, #1
 8003638:	e7c3      	b.n	80035c2 <_strtod_l+0x1a>
 800363a:	292d      	cmp	r1, #45	@ 0x2d
 800363c:	d1cc      	bne.n	80035d8 <_strtod_l+0x30>
 800363e:	2101      	movs	r1, #1
 8003640:	910e      	str	r1, [sp, #56]	@ 0x38
 8003642:	1c51      	adds	r1, r2, #1
 8003644:	9119      	str	r1, [sp, #100]	@ 0x64
 8003646:	7852      	ldrb	r2, [r2, #1]
 8003648:	2a00      	cmp	r2, #0
 800364a:	d1c7      	bne.n	80035dc <_strtod_l+0x34>
 800364c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800364e:	9419      	str	r4, [sp, #100]	@ 0x64
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 8566 	bne.w	8004122 <_strtod_l+0xb7a>
 8003656:	4650      	mov	r0, sl
 8003658:	4659      	mov	r1, fp
 800365a:	e7e7      	b.n	800362c <_strtod_l+0x84>
 800365c:	2100      	movs	r1, #0
 800365e:	e7ef      	b.n	8003640 <_strtod_l+0x98>
 8003660:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003662:	b13a      	cbz	r2, 8003674 <_strtod_l+0xcc>
 8003664:	2135      	movs	r1, #53	@ 0x35
 8003666:	a81c      	add	r0, sp, #112	@ 0x70
 8003668:	f003 fb50 	bl	8006d0c <__copybits>
 800366c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800366e:	9805      	ldr	r0, [sp, #20]
 8003670:	f002 ff30 	bl	80064d4 <_Bfree>
 8003674:	3e01      	subs	r6, #1
 8003676:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003678:	2e04      	cmp	r6, #4
 800367a:	d806      	bhi.n	800368a <_strtod_l+0xe2>
 800367c:	e8df f006 	tbb	[pc, r6]
 8003680:	201d0314 	.word	0x201d0314
 8003684:	14          	.byte	0x14
 8003685:	00          	.byte	0x00
 8003686:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800368a:	05e1      	lsls	r1, r4, #23
 800368c:	bf48      	it	mi
 800368e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8003692:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003696:	0d1b      	lsrs	r3, r3, #20
 8003698:	051b      	lsls	r3, r3, #20
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1bd      	bne.n	800361a <_strtod_l+0x72>
 800369e:	f001 fbbd 	bl	8004e1c <__errno>
 80036a2:	2322      	movs	r3, #34	@ 0x22
 80036a4:	6003      	str	r3, [r0, #0]
 80036a6:	e7b8      	b.n	800361a <_strtod_l+0x72>
 80036a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80036ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80036b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80036b4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80036b8:	e7e7      	b.n	800368a <_strtod_l+0xe2>
 80036ba:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8003838 <_strtod_l+0x290>
 80036be:	e7e4      	b.n	800368a <_strtod_l+0xe2>
 80036c0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80036c4:	f04f 3aff 	mov.w	sl, #4294967295
 80036c8:	e7df      	b.n	800368a <_strtod_l+0xe2>
 80036ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	2b30      	cmp	r3, #48	@ 0x30
 80036d4:	d0f9      	beq.n	80036ca <_strtod_l+0x122>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d09f      	beq.n	800361a <_strtod_l+0x72>
 80036da:	2301      	movs	r3, #1
 80036dc:	2700      	movs	r7, #0
 80036de:	220a      	movs	r2, #10
 80036e0:	46b9      	mov	r9, r7
 80036e2:	9308      	str	r3, [sp, #32]
 80036e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80036e6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80036e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80036ea:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80036ec:	7805      	ldrb	r5, [r0, #0]
 80036ee:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80036f2:	b2d9      	uxtb	r1, r3
 80036f4:	2909      	cmp	r1, #9
 80036f6:	d928      	bls.n	800374a <_strtod_l+0x1a2>
 80036f8:	2201      	movs	r2, #1
 80036fa:	4950      	ldr	r1, [pc, #320]	@ (800383c <_strtod_l+0x294>)
 80036fc:	f001 fad5 	bl	8004caa <strncmp>
 8003700:	2800      	cmp	r0, #0
 8003702:	d032      	beq.n	800376a <_strtod_l+0x1c2>
 8003704:	2000      	movs	r0, #0
 8003706:	462a      	mov	r2, r5
 8003708:	4603      	mov	r3, r0
 800370a:	464d      	mov	r5, r9
 800370c:	900a      	str	r0, [sp, #40]	@ 0x28
 800370e:	2a65      	cmp	r2, #101	@ 0x65
 8003710:	d001      	beq.n	8003716 <_strtod_l+0x16e>
 8003712:	2a45      	cmp	r2, #69	@ 0x45
 8003714:	d114      	bne.n	8003740 <_strtod_l+0x198>
 8003716:	b91d      	cbnz	r5, 8003720 <_strtod_l+0x178>
 8003718:	9a08      	ldr	r2, [sp, #32]
 800371a:	4302      	orrs	r2, r0
 800371c:	d096      	beq.n	800364c <_strtod_l+0xa4>
 800371e:	2500      	movs	r5, #0
 8003720:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8003722:	1c62      	adds	r2, r4, #1
 8003724:	9219      	str	r2, [sp, #100]	@ 0x64
 8003726:	7862      	ldrb	r2, [r4, #1]
 8003728:	2a2b      	cmp	r2, #43	@ 0x2b
 800372a:	d07a      	beq.n	8003822 <_strtod_l+0x27a>
 800372c:	2a2d      	cmp	r2, #45	@ 0x2d
 800372e:	d07e      	beq.n	800382e <_strtod_l+0x286>
 8003730:	f04f 0c00 	mov.w	ip, #0
 8003734:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8003738:	2909      	cmp	r1, #9
 800373a:	f240 8085 	bls.w	8003848 <_strtod_l+0x2a0>
 800373e:	9419      	str	r4, [sp, #100]	@ 0x64
 8003740:	f04f 0800 	mov.w	r8, #0
 8003744:	e0a5      	b.n	8003892 <_strtod_l+0x2ea>
 8003746:	2300      	movs	r3, #0
 8003748:	e7c8      	b.n	80036dc <_strtod_l+0x134>
 800374a:	f1b9 0f08 	cmp.w	r9, #8
 800374e:	bfd8      	it	le
 8003750:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8003752:	f100 0001 	add.w	r0, r0, #1
 8003756:	bfd6      	itet	le
 8003758:	fb02 3301 	mlale	r3, r2, r1, r3
 800375c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8003760:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8003762:	f109 0901 	add.w	r9, r9, #1
 8003766:	9019      	str	r0, [sp, #100]	@ 0x64
 8003768:	e7bf      	b.n	80036ea <_strtod_l+0x142>
 800376a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	9219      	str	r2, [sp, #100]	@ 0x64
 8003770:	785a      	ldrb	r2, [r3, #1]
 8003772:	f1b9 0f00 	cmp.w	r9, #0
 8003776:	d03b      	beq.n	80037f0 <_strtod_l+0x248>
 8003778:	464d      	mov	r5, r9
 800377a:	900a      	str	r0, [sp, #40]	@ 0x28
 800377c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8003780:	2b09      	cmp	r3, #9
 8003782:	d912      	bls.n	80037aa <_strtod_l+0x202>
 8003784:	2301      	movs	r3, #1
 8003786:	e7c2      	b.n	800370e <_strtod_l+0x166>
 8003788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800378a:	3001      	adds	r0, #1
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	9219      	str	r2, [sp, #100]	@ 0x64
 8003790:	785a      	ldrb	r2, [r3, #1]
 8003792:	2a30      	cmp	r2, #48	@ 0x30
 8003794:	d0f8      	beq.n	8003788 <_strtod_l+0x1e0>
 8003796:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800379a:	2b08      	cmp	r3, #8
 800379c:	f200 84c8 	bhi.w	8004130 <_strtod_l+0xb88>
 80037a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80037a2:	2000      	movs	r0, #0
 80037a4:	4605      	mov	r5, r0
 80037a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80037a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80037aa:	3a30      	subs	r2, #48	@ 0x30
 80037ac:	f100 0301 	add.w	r3, r0, #1
 80037b0:	d018      	beq.n	80037e4 <_strtod_l+0x23c>
 80037b2:	462e      	mov	r6, r5
 80037b4:	f04f 0e0a 	mov.w	lr, #10
 80037b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80037ba:	4419      	add	r1, r3
 80037bc:	910a      	str	r1, [sp, #40]	@ 0x28
 80037be:	1c71      	adds	r1, r6, #1
 80037c0:	eba1 0c05 	sub.w	ip, r1, r5
 80037c4:	4563      	cmp	r3, ip
 80037c6:	dc15      	bgt.n	80037f4 <_strtod_l+0x24c>
 80037c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80037cc:	182b      	adds	r3, r5, r0
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	f105 0501 	add.w	r5, r5, #1
 80037d4:	4405      	add	r5, r0
 80037d6:	dc1a      	bgt.n	800380e <_strtod_l+0x266>
 80037d8:	230a      	movs	r3, #10
 80037da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80037dc:	fb03 2301 	mla	r3, r3, r1, r2
 80037e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037e2:	2300      	movs	r3, #0
 80037e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80037e6:	4618      	mov	r0, r3
 80037e8:	1c51      	adds	r1, r2, #1
 80037ea:	9119      	str	r1, [sp, #100]	@ 0x64
 80037ec:	7852      	ldrb	r2, [r2, #1]
 80037ee:	e7c5      	b.n	800377c <_strtod_l+0x1d4>
 80037f0:	4648      	mov	r0, r9
 80037f2:	e7ce      	b.n	8003792 <_strtod_l+0x1ea>
 80037f4:	2e08      	cmp	r6, #8
 80037f6:	dc05      	bgt.n	8003804 <_strtod_l+0x25c>
 80037f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80037fa:	fb0e f606 	mul.w	r6, lr, r6
 80037fe:	960b      	str	r6, [sp, #44]	@ 0x2c
 8003800:	460e      	mov	r6, r1
 8003802:	e7dc      	b.n	80037be <_strtod_l+0x216>
 8003804:	2910      	cmp	r1, #16
 8003806:	bfd8      	it	le
 8003808:	fb0e f707 	mulle.w	r7, lr, r7
 800380c:	e7f8      	b.n	8003800 <_strtod_l+0x258>
 800380e:	2b0f      	cmp	r3, #15
 8003810:	bfdc      	itt	le
 8003812:	230a      	movle	r3, #10
 8003814:	fb03 2707 	mlale	r7, r3, r7, r2
 8003818:	e7e3      	b.n	80037e2 <_strtod_l+0x23a>
 800381a:	2300      	movs	r3, #0
 800381c:	930a      	str	r3, [sp, #40]	@ 0x28
 800381e:	2301      	movs	r3, #1
 8003820:	e77a      	b.n	8003718 <_strtod_l+0x170>
 8003822:	f04f 0c00 	mov.w	ip, #0
 8003826:	1ca2      	adds	r2, r4, #2
 8003828:	9219      	str	r2, [sp, #100]	@ 0x64
 800382a:	78a2      	ldrb	r2, [r4, #2]
 800382c:	e782      	b.n	8003734 <_strtod_l+0x18c>
 800382e:	f04f 0c01 	mov.w	ip, #1
 8003832:	e7f8      	b.n	8003826 <_strtod_l+0x27e>
 8003834:	08007ad8 	.word	0x08007ad8
 8003838:	7ff00000 	.word	0x7ff00000
 800383c:	08007896 	.word	0x08007896
 8003840:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003842:	1c51      	adds	r1, r2, #1
 8003844:	9119      	str	r1, [sp, #100]	@ 0x64
 8003846:	7852      	ldrb	r2, [r2, #1]
 8003848:	2a30      	cmp	r2, #48	@ 0x30
 800384a:	d0f9      	beq.n	8003840 <_strtod_l+0x298>
 800384c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8003850:	2908      	cmp	r1, #8
 8003852:	f63f af75 	bhi.w	8003740 <_strtod_l+0x198>
 8003856:	f04f 080a 	mov.w	r8, #10
 800385a:	3a30      	subs	r2, #48	@ 0x30
 800385c:	9209      	str	r2, [sp, #36]	@ 0x24
 800385e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003860:	920f      	str	r2, [sp, #60]	@ 0x3c
 8003862:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003864:	1c56      	adds	r6, r2, #1
 8003866:	9619      	str	r6, [sp, #100]	@ 0x64
 8003868:	7852      	ldrb	r2, [r2, #1]
 800386a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800386e:	f1be 0f09 	cmp.w	lr, #9
 8003872:	d939      	bls.n	80038e8 <_strtod_l+0x340>
 8003874:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003876:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800387a:	1a76      	subs	r6, r6, r1
 800387c:	2e08      	cmp	r6, #8
 800387e:	dc03      	bgt.n	8003888 <_strtod_l+0x2e0>
 8003880:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003882:	4588      	cmp	r8, r1
 8003884:	bfa8      	it	ge
 8003886:	4688      	movge	r8, r1
 8003888:	f1bc 0f00 	cmp.w	ip, #0
 800388c:	d001      	beq.n	8003892 <_strtod_l+0x2ea>
 800388e:	f1c8 0800 	rsb	r8, r8, #0
 8003892:	2d00      	cmp	r5, #0
 8003894:	d14e      	bne.n	8003934 <_strtod_l+0x38c>
 8003896:	9908      	ldr	r1, [sp, #32]
 8003898:	4308      	orrs	r0, r1
 800389a:	f47f aebe 	bne.w	800361a <_strtod_l+0x72>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f47f aed4 	bne.w	800364c <_strtod_l+0xa4>
 80038a4:	2a69      	cmp	r2, #105	@ 0x69
 80038a6:	d028      	beq.n	80038fa <_strtod_l+0x352>
 80038a8:	dc25      	bgt.n	80038f6 <_strtod_l+0x34e>
 80038aa:	2a49      	cmp	r2, #73	@ 0x49
 80038ac:	d025      	beq.n	80038fa <_strtod_l+0x352>
 80038ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80038b0:	f47f aecc 	bne.w	800364c <_strtod_l+0xa4>
 80038b4:	4999      	ldr	r1, [pc, #612]	@ (8003b1c <_strtod_l+0x574>)
 80038b6:	a819      	add	r0, sp, #100	@ 0x64
 80038b8:	f002 fc54 	bl	8006164 <__match>
 80038bc:	2800      	cmp	r0, #0
 80038be:	f43f aec5 	beq.w	800364c <_strtod_l+0xa4>
 80038c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b28      	cmp	r3, #40	@ 0x28
 80038c8:	d12e      	bne.n	8003928 <_strtod_l+0x380>
 80038ca:	4995      	ldr	r1, [pc, #596]	@ (8003b20 <_strtod_l+0x578>)
 80038cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80038ce:	a819      	add	r0, sp, #100	@ 0x64
 80038d0:	f002 fc5c 	bl	800618c <__hexnan>
 80038d4:	2805      	cmp	r0, #5
 80038d6:	d127      	bne.n	8003928 <_strtod_l+0x380>
 80038d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80038da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80038de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80038e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80038e6:	e698      	b.n	800361a <_strtod_l+0x72>
 80038e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80038ea:	fb08 2101 	mla	r1, r8, r1, r2
 80038ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80038f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80038f4:	e7b5      	b.n	8003862 <_strtod_l+0x2ba>
 80038f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80038f8:	e7da      	b.n	80038b0 <_strtod_l+0x308>
 80038fa:	498a      	ldr	r1, [pc, #552]	@ (8003b24 <_strtod_l+0x57c>)
 80038fc:	a819      	add	r0, sp, #100	@ 0x64
 80038fe:	f002 fc31 	bl	8006164 <__match>
 8003902:	2800      	cmp	r0, #0
 8003904:	f43f aea2 	beq.w	800364c <_strtod_l+0xa4>
 8003908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800390a:	4987      	ldr	r1, [pc, #540]	@ (8003b28 <_strtod_l+0x580>)
 800390c:	3b01      	subs	r3, #1
 800390e:	a819      	add	r0, sp, #100	@ 0x64
 8003910:	9319      	str	r3, [sp, #100]	@ 0x64
 8003912:	f002 fc27 	bl	8006164 <__match>
 8003916:	b910      	cbnz	r0, 800391e <_strtod_l+0x376>
 8003918:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800391a:	3301      	adds	r3, #1
 800391c:	9319      	str	r3, [sp, #100]	@ 0x64
 800391e:	f04f 0a00 	mov.w	sl, #0
 8003922:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8003b2c <_strtod_l+0x584>
 8003926:	e678      	b.n	800361a <_strtod_l+0x72>
 8003928:	4881      	ldr	r0, [pc, #516]	@ (8003b30 <_strtod_l+0x588>)
 800392a:	f001 fac9 	bl	8004ec0 <nan>
 800392e:	4682      	mov	sl, r0
 8003930:	468b      	mov	fp, r1
 8003932:	e672      	b.n	800361a <_strtod_l+0x72>
 8003934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003936:	f1b9 0f00 	cmp.w	r9, #0
 800393a:	bf08      	it	eq
 800393c:	46a9      	moveq	r9, r5
 800393e:	eba8 0303 	sub.w	r3, r8, r3
 8003942:	2d10      	cmp	r5, #16
 8003944:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003946:	462c      	mov	r4, r5
 8003948:	9309      	str	r3, [sp, #36]	@ 0x24
 800394a:	bfa8      	it	ge
 800394c:	2410      	movge	r4, #16
 800394e:	f7fc fd49 	bl	80003e4 <__aeabi_ui2d>
 8003952:	2d09      	cmp	r5, #9
 8003954:	4682      	mov	sl, r0
 8003956:	468b      	mov	fp, r1
 8003958:	dc11      	bgt.n	800397e <_strtod_l+0x3d6>
 800395a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	f43f ae5c 	beq.w	800361a <_strtod_l+0x72>
 8003962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003964:	dd76      	ble.n	8003a54 <_strtod_l+0x4ac>
 8003966:	2b16      	cmp	r3, #22
 8003968:	dc5d      	bgt.n	8003a26 <_strtod_l+0x47e>
 800396a:	4972      	ldr	r1, [pc, #456]	@ (8003b34 <_strtod_l+0x58c>)
 800396c:	4652      	mov	r2, sl
 800396e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003972:	465b      	mov	r3, fp
 8003974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003978:	f7fc fdae 	bl	80004d8 <__aeabi_dmul>
 800397c:	e7d7      	b.n	800392e <_strtod_l+0x386>
 800397e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b34 <_strtod_l+0x58c>)
 8003980:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003984:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8003988:	f7fc fda6 	bl	80004d8 <__aeabi_dmul>
 800398c:	4682      	mov	sl, r0
 800398e:	4638      	mov	r0, r7
 8003990:	468b      	mov	fp, r1
 8003992:	f7fc fd27 	bl	80003e4 <__aeabi_ui2d>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4650      	mov	r0, sl
 800399c:	4659      	mov	r1, fp
 800399e:	f7fc fbe5 	bl	800016c <__adddf3>
 80039a2:	2d0f      	cmp	r5, #15
 80039a4:	4682      	mov	sl, r0
 80039a6:	468b      	mov	fp, r1
 80039a8:	ddd7      	ble.n	800395a <_strtod_l+0x3b2>
 80039aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039ac:	1b2c      	subs	r4, r5, r4
 80039ae:	441c      	add	r4, r3
 80039b0:	2c00      	cmp	r4, #0
 80039b2:	f340 8093 	ble.w	8003adc <_strtod_l+0x534>
 80039b6:	f014 030f 	ands.w	r3, r4, #15
 80039ba:	d00a      	beq.n	80039d2 <_strtod_l+0x42a>
 80039bc:	495d      	ldr	r1, [pc, #372]	@ (8003b34 <_strtod_l+0x58c>)
 80039be:	4652      	mov	r2, sl
 80039c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80039c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039c8:	465b      	mov	r3, fp
 80039ca:	f7fc fd85 	bl	80004d8 <__aeabi_dmul>
 80039ce:	4682      	mov	sl, r0
 80039d0:	468b      	mov	fp, r1
 80039d2:	f034 040f 	bics.w	r4, r4, #15
 80039d6:	d073      	beq.n	8003ac0 <_strtod_l+0x518>
 80039d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80039dc:	dd49      	ble.n	8003a72 <_strtod_l+0x4ca>
 80039de:	2400      	movs	r4, #0
 80039e0:	46a0      	mov	r8, r4
 80039e2:	46a1      	mov	r9, r4
 80039e4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80039e6:	2322      	movs	r3, #34	@ 0x22
 80039e8:	f04f 0a00 	mov.w	sl, #0
 80039ec:	9a05      	ldr	r2, [sp, #20]
 80039ee:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8003b2c <_strtod_l+0x584>
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f43f ae0f 	beq.w	800361a <_strtod_l+0x72>
 80039fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80039fe:	9805      	ldr	r0, [sp, #20]
 8003a00:	f002 fd68 	bl	80064d4 <_Bfree>
 8003a04:	4649      	mov	r1, r9
 8003a06:	9805      	ldr	r0, [sp, #20]
 8003a08:	f002 fd64 	bl	80064d4 <_Bfree>
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	9805      	ldr	r0, [sp, #20]
 8003a10:	f002 fd60 	bl	80064d4 <_Bfree>
 8003a14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003a16:	9805      	ldr	r0, [sp, #20]
 8003a18:	f002 fd5c 	bl	80064d4 <_Bfree>
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	9805      	ldr	r0, [sp, #20]
 8003a20:	f002 fd58 	bl	80064d4 <_Bfree>
 8003a24:	e5f9      	b.n	800361a <_strtod_l+0x72>
 8003a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	dbbc      	blt.n	80039aa <_strtod_l+0x402>
 8003a30:	4c40      	ldr	r4, [pc, #256]	@ (8003b34 <_strtod_l+0x58c>)
 8003a32:	f1c5 050f 	rsb	r5, r5, #15
 8003a36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003a3a:	4652      	mov	r2, sl
 8003a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a40:	465b      	mov	r3, fp
 8003a42:	f7fc fd49 	bl	80004d8 <__aeabi_dmul>
 8003a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a48:	1b5d      	subs	r5, r3, r5
 8003a4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003a4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003a52:	e791      	b.n	8003978 <_strtod_l+0x3d0>
 8003a54:	3316      	adds	r3, #22
 8003a56:	dba8      	blt.n	80039aa <_strtod_l+0x402>
 8003a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a5a:	4650      	mov	r0, sl
 8003a5c:	eba3 0808 	sub.w	r8, r3, r8
 8003a60:	4b34      	ldr	r3, [pc, #208]	@ (8003b34 <_strtod_l+0x58c>)
 8003a62:	4659      	mov	r1, fp
 8003a64:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8003a68:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003a6c:	f7fc fe5e 	bl	800072c <__aeabi_ddiv>
 8003a70:	e75d      	b.n	800392e <_strtod_l+0x386>
 8003a72:	2300      	movs	r3, #0
 8003a74:	4650      	mov	r0, sl
 8003a76:	4659      	mov	r1, fp
 8003a78:	461e      	mov	r6, r3
 8003a7a:	4f2f      	ldr	r7, [pc, #188]	@ (8003b38 <_strtod_l+0x590>)
 8003a7c:	1124      	asrs	r4, r4, #4
 8003a7e:	2c01      	cmp	r4, #1
 8003a80:	dc21      	bgt.n	8003ac6 <_strtod_l+0x51e>
 8003a82:	b10b      	cbz	r3, 8003a88 <_strtod_l+0x4e0>
 8003a84:	4682      	mov	sl, r0
 8003a86:	468b      	mov	fp, r1
 8003a88:	492b      	ldr	r1, [pc, #172]	@ (8003b38 <_strtod_l+0x590>)
 8003a8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8003a8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003a92:	4652      	mov	r2, sl
 8003a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a98:	465b      	mov	r3, fp
 8003a9a:	f7fc fd1d 	bl	80004d8 <__aeabi_dmul>
 8003a9e:	4b23      	ldr	r3, [pc, #140]	@ (8003b2c <_strtod_l+0x584>)
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	4925      	ldr	r1, [pc, #148]	@ (8003b3c <_strtod_l+0x594>)
 8003aa6:	4682      	mov	sl, r0
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d898      	bhi.n	80039de <_strtod_l+0x436>
 8003aac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8003ab0:	428b      	cmp	r3, r1
 8003ab2:	bf86      	itte	hi
 8003ab4:	f04f 3aff 	movhi.w	sl, #4294967295
 8003ab8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8003b40 <_strtod_l+0x598>
 8003abc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	9308      	str	r3, [sp, #32]
 8003ac4:	e076      	b.n	8003bb4 <_strtod_l+0x60c>
 8003ac6:	07e2      	lsls	r2, r4, #31
 8003ac8:	d504      	bpl.n	8003ad4 <_strtod_l+0x52c>
 8003aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ace:	f7fc fd03 	bl	80004d8 <__aeabi_dmul>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	3601      	adds	r6, #1
 8003ad6:	1064      	asrs	r4, r4, #1
 8003ad8:	3708      	adds	r7, #8
 8003ada:	e7d0      	b.n	8003a7e <_strtod_l+0x4d6>
 8003adc:	d0f0      	beq.n	8003ac0 <_strtod_l+0x518>
 8003ade:	4264      	negs	r4, r4
 8003ae0:	f014 020f 	ands.w	r2, r4, #15
 8003ae4:	d00a      	beq.n	8003afc <_strtod_l+0x554>
 8003ae6:	4b13      	ldr	r3, [pc, #76]	@ (8003b34 <_strtod_l+0x58c>)
 8003ae8:	4650      	mov	r0, sl
 8003aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003aee:	4659      	mov	r1, fp
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f7fc fe1a 	bl	800072c <__aeabi_ddiv>
 8003af8:	4682      	mov	sl, r0
 8003afa:	468b      	mov	fp, r1
 8003afc:	1124      	asrs	r4, r4, #4
 8003afe:	d0df      	beq.n	8003ac0 <_strtod_l+0x518>
 8003b00:	2c1f      	cmp	r4, #31
 8003b02:	dd1f      	ble.n	8003b44 <_strtod_l+0x59c>
 8003b04:	2400      	movs	r4, #0
 8003b06:	46a0      	mov	r8, r4
 8003b08:	46a1      	mov	r9, r4
 8003b0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003b0c:	2322      	movs	r3, #34	@ 0x22
 8003b0e:	9a05      	ldr	r2, [sp, #20]
 8003b10:	f04f 0a00 	mov.w	sl, #0
 8003b14:	f04f 0b00 	mov.w	fp, #0
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e76b      	b.n	80039f4 <_strtod_l+0x44c>
 8003b1c:	080078a5 	.word	0x080078a5
 8003b20:	08007ac4 	.word	0x08007ac4
 8003b24:	0800789d 	.word	0x0800789d
 8003b28:	08007984 	.word	0x08007984
 8003b2c:	7ff00000 	.word	0x7ff00000
 8003b30:	08007980 	.word	0x08007980
 8003b34:	08007b50 	.word	0x08007b50
 8003b38:	08007b28 	.word	0x08007b28
 8003b3c:	7ca00000 	.word	0x7ca00000
 8003b40:	7fefffff 	.word	0x7fefffff
 8003b44:	f014 0310 	ands.w	r3, r4, #16
 8003b48:	bf18      	it	ne
 8003b4a:	236a      	movne	r3, #106	@ 0x6a
 8003b4c:	4650      	mov	r0, sl
 8003b4e:	9308      	str	r3, [sp, #32]
 8003b50:	4659      	mov	r1, fp
 8003b52:	2300      	movs	r3, #0
 8003b54:	4e77      	ldr	r6, [pc, #476]	@ (8003d34 <_strtod_l+0x78c>)
 8003b56:	07e7      	lsls	r7, r4, #31
 8003b58:	d504      	bpl.n	8003b64 <_strtod_l+0x5bc>
 8003b5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003b5e:	f7fc fcbb 	bl	80004d8 <__aeabi_dmul>
 8003b62:	2301      	movs	r3, #1
 8003b64:	1064      	asrs	r4, r4, #1
 8003b66:	f106 0608 	add.w	r6, r6, #8
 8003b6a:	d1f4      	bne.n	8003b56 <_strtod_l+0x5ae>
 8003b6c:	b10b      	cbz	r3, 8003b72 <_strtod_l+0x5ca>
 8003b6e:	4682      	mov	sl, r0
 8003b70:	468b      	mov	fp, r1
 8003b72:	9b08      	ldr	r3, [sp, #32]
 8003b74:	b1b3      	cbz	r3, 8003ba4 <_strtod_l+0x5fc>
 8003b76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003b7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	4659      	mov	r1, fp
 8003b82:	dd0f      	ble.n	8003ba4 <_strtod_l+0x5fc>
 8003b84:	2b1f      	cmp	r3, #31
 8003b86:	dd58      	ble.n	8003c3a <_strtod_l+0x692>
 8003b88:	2b34      	cmp	r3, #52	@ 0x34
 8003b8a:	bfd8      	it	le
 8003b8c:	f04f 33ff 	movle.w	r3, #4294967295
 8003b90:	f04f 0a00 	mov.w	sl, #0
 8003b94:	bfcf      	iteee	gt
 8003b96:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8003b9a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8003b9e:	4093      	lslle	r3, r2
 8003ba0:	ea03 0b01 	andle.w	fp, r3, r1
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	4650      	mov	r0, sl
 8003baa:	4659      	mov	r1, fp
 8003bac:	f7fc fefc 	bl	80009a8 <__aeabi_dcmpeq>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d1a7      	bne.n	8003b04 <_strtod_l+0x55c>
 8003bb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003bb6:	464a      	mov	r2, r9
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003bbc:	462b      	mov	r3, r5
 8003bbe:	9805      	ldr	r0, [sp, #20]
 8003bc0:	f002 fcf0 	bl	80065a4 <__s2b>
 8003bc4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	f43f af09 	beq.w	80039de <_strtod_l+0x436>
 8003bcc:	2400      	movs	r4, #0
 8003bce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003bd2:	2a00      	cmp	r2, #0
 8003bd4:	eba3 0308 	sub.w	r3, r3, r8
 8003bd8:	bfa8      	it	ge
 8003bda:	2300      	movge	r3, #0
 8003bdc:	46a0      	mov	r8, r4
 8003bde:	9312      	str	r3, [sp, #72]	@ 0x48
 8003be0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003be4:	9316      	str	r3, [sp, #88]	@ 0x58
 8003be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003be8:	9805      	ldr	r0, [sp, #20]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	f002 fc32 	bl	8006454 <_Balloc>
 8003bf0:	4681      	mov	r9, r0
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	f43f aef7 	beq.w	80039e6 <_strtod_l+0x43e>
 8003bf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003bfa:	300c      	adds	r0, #12
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	f103 010c 	add.w	r1, r3, #12
 8003c02:	3202      	adds	r2, #2
 8003c04:	0092      	lsls	r2, r2, #2
 8003c06:	f001 f94c 	bl	8004ea2 <memcpy>
 8003c0a:	ab1c      	add	r3, sp, #112	@ 0x70
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	4652      	mov	r2, sl
 8003c14:	465b      	mov	r3, fp
 8003c16:	9805      	ldr	r0, [sp, #20]
 8003c18:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8003c1c:	f002 ffee 	bl	8006bfc <__d2b>
 8003c20:	901a      	str	r0, [sp, #104]	@ 0x68
 8003c22:	2800      	cmp	r0, #0
 8003c24:	f43f aedf 	beq.w	80039e6 <_strtod_l+0x43e>
 8003c28:	2101      	movs	r1, #1
 8003c2a:	9805      	ldr	r0, [sp, #20]
 8003c2c:	f002 fd50 	bl	80066d0 <__i2b>
 8003c30:	4680      	mov	r8, r0
 8003c32:	b948      	cbnz	r0, 8003c48 <_strtod_l+0x6a0>
 8003c34:	f04f 0800 	mov.w	r8, #0
 8003c38:	e6d5      	b.n	80039e6 <_strtod_l+0x43e>
 8003c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	ea03 0a0a 	and.w	sl, r3, sl
 8003c46:	e7ad      	b.n	8003ba4 <_strtod_l+0x5fc>
 8003c48:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8003c4a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	bfab      	itete	ge
 8003c50:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8003c52:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8003c54:	18ef      	addge	r7, r5, r3
 8003c56:	1b5e      	sublt	r6, r3, r5
 8003c58:	9b08      	ldr	r3, [sp, #32]
 8003c5a:	bfa8      	it	ge
 8003c5c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8003c5e:	eba5 0503 	sub.w	r5, r5, r3
 8003c62:	4415      	add	r5, r2
 8003c64:	4b34      	ldr	r3, [pc, #208]	@ (8003d38 <_strtod_l+0x790>)
 8003c66:	f105 35ff 	add.w	r5, r5, #4294967295
 8003c6a:	bfb8      	it	lt
 8003c6c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8003c6e:	429d      	cmp	r5, r3
 8003c70:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8003c74:	da50      	bge.n	8003d18 <_strtod_l+0x770>
 8003c76:	1b5b      	subs	r3, r3, r5
 8003c78:	2b1f      	cmp	r3, #31
 8003c7a:	f04f 0101 	mov.w	r1, #1
 8003c7e:	eba2 0203 	sub.w	r2, r2, r3
 8003c82:	dc3d      	bgt.n	8003d00 <_strtod_l+0x758>
 8003c84:	fa01 f303 	lsl.w	r3, r1, r3
 8003c88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8003c8e:	18bd      	adds	r5, r7, r2
 8003c90:	9b08      	ldr	r3, [sp, #32]
 8003c92:	42af      	cmp	r7, r5
 8003c94:	4416      	add	r6, r2
 8003c96:	441e      	add	r6, r3
 8003c98:	463b      	mov	r3, r7
 8003c9a:	bfa8      	it	ge
 8003c9c:	462b      	movge	r3, r5
 8003c9e:	42b3      	cmp	r3, r6
 8003ca0:	bfa8      	it	ge
 8003ca2:	4633      	movge	r3, r6
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bfc2      	ittt	gt
 8003ca8:	1aed      	subgt	r5, r5, r3
 8003caa:	1af6      	subgt	r6, r6, r3
 8003cac:	1aff      	subgt	r7, r7, r3
 8003cae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	dd16      	ble.n	8003ce2 <_strtod_l+0x73a>
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	9805      	ldr	r0, [sp, #20]
 8003cba:	f002 fdc1 	bl	8006840 <__pow5mult>
 8003cbe:	4680      	mov	r8, r0
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0b7      	beq.n	8003c34 <_strtod_l+0x68c>
 8003cc4:	4601      	mov	r1, r0
 8003cc6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003cc8:	9805      	ldr	r0, [sp, #20]
 8003cca:	f002 fd17 	bl	80066fc <__multiply>
 8003cce:	900a      	str	r0, [sp, #40]	@ 0x28
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	f43f ae88 	beq.w	80039e6 <_strtod_l+0x43e>
 8003cd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003cd8:	9805      	ldr	r0, [sp, #20]
 8003cda:	f002 fbfb 	bl	80064d4 <_Bfree>
 8003cde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ce0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ce2:	2d00      	cmp	r5, #0
 8003ce4:	dc1d      	bgt.n	8003d22 <_strtod_l+0x77a>
 8003ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	dd27      	ble.n	8003d3c <_strtod_l+0x794>
 8003cec:	4649      	mov	r1, r9
 8003cee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003cf0:	9805      	ldr	r0, [sp, #20]
 8003cf2:	f002 fda5 	bl	8006840 <__pow5mult>
 8003cf6:	4681      	mov	r9, r0
 8003cf8:	bb00      	cbnz	r0, 8003d3c <_strtod_l+0x794>
 8003cfa:	f04f 0900 	mov.w	r9, #0
 8003cfe:	e672      	b.n	80039e6 <_strtod_l+0x43e>
 8003d00:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8003d04:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8003d08:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8003d0c:	35e2      	adds	r5, #226	@ 0xe2
 8003d0e:	fa01 f305 	lsl.w	r3, r1, r5
 8003d12:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d14:	9113      	str	r1, [sp, #76]	@ 0x4c
 8003d16:	e7ba      	b.n	8003c8e <_strtod_l+0x6e6>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d20:	e7b5      	b.n	8003c8e <_strtod_l+0x6e6>
 8003d22:	462a      	mov	r2, r5
 8003d24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003d26:	9805      	ldr	r0, [sp, #20]
 8003d28:	f002 fde4 	bl	80068f4 <__lshift>
 8003d2c:	901a      	str	r0, [sp, #104]	@ 0x68
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d1d9      	bne.n	8003ce6 <_strtod_l+0x73e>
 8003d32:	e658      	b.n	80039e6 <_strtod_l+0x43e>
 8003d34:	08007af0 	.word	0x08007af0
 8003d38:	fffffc02 	.word	0xfffffc02
 8003d3c:	2e00      	cmp	r6, #0
 8003d3e:	dd07      	ble.n	8003d50 <_strtod_l+0x7a8>
 8003d40:	4649      	mov	r1, r9
 8003d42:	4632      	mov	r2, r6
 8003d44:	9805      	ldr	r0, [sp, #20]
 8003d46:	f002 fdd5 	bl	80068f4 <__lshift>
 8003d4a:	4681      	mov	r9, r0
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d0d4      	beq.n	8003cfa <_strtod_l+0x752>
 8003d50:	2f00      	cmp	r7, #0
 8003d52:	dd08      	ble.n	8003d66 <_strtod_l+0x7be>
 8003d54:	4641      	mov	r1, r8
 8003d56:	463a      	mov	r2, r7
 8003d58:	9805      	ldr	r0, [sp, #20]
 8003d5a:	f002 fdcb 	bl	80068f4 <__lshift>
 8003d5e:	4680      	mov	r8, r0
 8003d60:	2800      	cmp	r0, #0
 8003d62:	f43f ae40 	beq.w	80039e6 <_strtod_l+0x43e>
 8003d66:	464a      	mov	r2, r9
 8003d68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003d6a:	9805      	ldr	r0, [sp, #20]
 8003d6c:	f002 fe4a 	bl	8006a04 <__mdiff>
 8003d70:	4604      	mov	r4, r0
 8003d72:	2800      	cmp	r0, #0
 8003d74:	f43f ae37 	beq.w	80039e6 <_strtod_l+0x43e>
 8003d78:	68c3      	ldr	r3, [r0, #12]
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60c3      	str	r3, [r0, #12]
 8003d82:	f002 fe23 	bl	80069cc <__mcmp>
 8003d86:	2800      	cmp	r0, #0
 8003d88:	da3d      	bge.n	8003e06 <_strtod_l+0x85e>
 8003d8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003d8c:	ea53 030a 	orrs.w	r3, r3, sl
 8003d90:	d163      	bne.n	8003e5a <_strtod_l+0x8b2>
 8003d92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d15f      	bne.n	8003e5a <_strtod_l+0x8b2>
 8003d9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003d9e:	0d1b      	lsrs	r3, r3, #20
 8003da0:	051b      	lsls	r3, r3, #20
 8003da2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003da6:	d958      	bls.n	8003e5a <_strtod_l+0x8b2>
 8003da8:	6963      	ldr	r3, [r4, #20]
 8003daa:	b913      	cbnz	r3, 8003db2 <_strtod_l+0x80a>
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	dd53      	ble.n	8003e5a <_strtod_l+0x8b2>
 8003db2:	4621      	mov	r1, r4
 8003db4:	2201      	movs	r2, #1
 8003db6:	9805      	ldr	r0, [sp, #20]
 8003db8:	f002 fd9c 	bl	80068f4 <__lshift>
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	f002 fe04 	bl	80069cc <__mcmp>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	dd48      	ble.n	8003e5a <_strtod_l+0x8b2>
 8003dc8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003dcc:	9a08      	ldr	r2, [sp, #32]
 8003dce:	0d1b      	lsrs	r3, r3, #20
 8003dd0:	051b      	lsls	r3, r3, #20
 8003dd2:	2a00      	cmp	r2, #0
 8003dd4:	d062      	beq.n	8003e9c <_strtod_l+0x8f4>
 8003dd6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003dda:	d85f      	bhi.n	8003e9c <_strtod_l+0x8f4>
 8003ddc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8003de0:	f67f ae94 	bls.w	8003b0c <_strtod_l+0x564>
 8003de4:	4650      	mov	r0, sl
 8003de6:	4659      	mov	r1, fp
 8003de8:	4ba3      	ldr	r3, [pc, #652]	@ (8004078 <_strtod_l+0xad0>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	f7fc fb74 	bl	80004d8 <__aeabi_dmul>
 8003df0:	4ba2      	ldr	r3, [pc, #648]	@ (800407c <_strtod_l+0xad4>)
 8003df2:	4682      	mov	sl, r0
 8003df4:	400b      	ands	r3, r1
 8003df6:	468b      	mov	fp, r1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f47f adff 	bne.w	80039fc <_strtod_l+0x454>
 8003dfe:	2322      	movs	r3, #34	@ 0x22
 8003e00:	9a05      	ldr	r2, [sp, #20]
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e5fa      	b.n	80039fc <_strtod_l+0x454>
 8003e06:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8003e0a:	d165      	bne.n	8003ed8 <_strtod_l+0x930>
 8003e0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003e0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003e12:	b35a      	cbz	r2, 8003e6c <_strtod_l+0x8c4>
 8003e14:	4a9a      	ldr	r2, [pc, #616]	@ (8004080 <_strtod_l+0xad8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d12b      	bne.n	8003e72 <_strtod_l+0x8ca>
 8003e1a:	9b08      	ldr	r3, [sp, #32]
 8003e1c:	4651      	mov	r1, sl
 8003e1e:	b303      	cbz	r3, 8003e62 <_strtod_l+0x8ba>
 8003e20:	465a      	mov	r2, fp
 8003e22:	4b96      	ldr	r3, [pc, #600]	@ (800407c <_strtod_l+0xad4>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8003e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2e:	d81b      	bhi.n	8003e68 <_strtod_l+0x8c0>
 8003e30:	0d1b      	lsrs	r3, r3, #20
 8003e32:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	4299      	cmp	r1, r3
 8003e3c:	d119      	bne.n	8003e72 <_strtod_l+0x8ca>
 8003e3e:	4b91      	ldr	r3, [pc, #580]	@ (8004084 <_strtod_l+0xadc>)
 8003e40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d102      	bne.n	8003e4c <_strtod_l+0x8a4>
 8003e46:	3101      	adds	r1, #1
 8003e48:	f43f adcd 	beq.w	80039e6 <_strtod_l+0x43e>
 8003e4c:	f04f 0a00 	mov.w	sl, #0
 8003e50:	4b8a      	ldr	r3, [pc, #552]	@ (800407c <_strtod_l+0xad4>)
 8003e52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e54:	401a      	ands	r2, r3
 8003e56:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8003e5a:	9b08      	ldr	r3, [sp, #32]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1c1      	bne.n	8003de4 <_strtod_l+0x83c>
 8003e60:	e5cc      	b.n	80039fc <_strtod_l+0x454>
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	e7e8      	b.n	8003e3a <_strtod_l+0x892>
 8003e68:	4613      	mov	r3, r2
 8003e6a:	e7e6      	b.n	8003e3a <_strtod_l+0x892>
 8003e6c:	ea53 030a 	orrs.w	r3, r3, sl
 8003e70:	d0aa      	beq.n	8003dc8 <_strtod_l+0x820>
 8003e72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003e74:	b1db      	cbz	r3, 8003eae <_strtod_l+0x906>
 8003e76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e78:	4213      	tst	r3, r2
 8003e7a:	d0ee      	beq.n	8003e5a <_strtod_l+0x8b2>
 8003e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e7e:	4650      	mov	r0, sl
 8003e80:	4659      	mov	r1, fp
 8003e82:	9a08      	ldr	r2, [sp, #32]
 8003e84:	b1bb      	cbz	r3, 8003eb6 <_strtod_l+0x90e>
 8003e86:	f7ff fb6c 	bl	8003562 <sulp>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e92:	f7fc f96b 	bl	800016c <__adddf3>
 8003e96:	4682      	mov	sl, r0
 8003e98:	468b      	mov	fp, r1
 8003e9a:	e7de      	b.n	8003e5a <_strtod_l+0x8b2>
 8003e9c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8003ea0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003ea4:	f04f 3aff 	mov.w	sl, #4294967295
 8003ea8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003eac:	e7d5      	b.n	8003e5a <_strtod_l+0x8b2>
 8003eae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003eb0:	ea13 0f0a 	tst.w	r3, sl
 8003eb4:	e7e1      	b.n	8003e7a <_strtod_l+0x8d2>
 8003eb6:	f7ff fb54 	bl	8003562 <sulp>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ec2:	f7fc f951 	bl	8000168 <__aeabi_dsub>
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2300      	movs	r3, #0
 8003eca:	4682      	mov	sl, r0
 8003ecc:	468b      	mov	fp, r1
 8003ece:	f7fc fd6b 	bl	80009a8 <__aeabi_dcmpeq>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d0c1      	beq.n	8003e5a <_strtod_l+0x8b2>
 8003ed6:	e619      	b.n	8003b0c <_strtod_l+0x564>
 8003ed8:	4641      	mov	r1, r8
 8003eda:	4620      	mov	r0, r4
 8003edc:	f002 fee6 	bl	8006cac <__ratio>
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	460f      	mov	r7, r1
 8003eea:	f7fc fd71 	bl	80009d0 <__aeabi_dcmple>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d06d      	beq.n	8003fce <_strtod_l+0xa26>
 8003ef2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d178      	bne.n	8003fea <_strtod_l+0xa42>
 8003ef8:	f1ba 0f00 	cmp.w	sl, #0
 8003efc:	d156      	bne.n	8003fac <_strtod_l+0xa04>
 8003efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d158      	bne.n	8003fba <_strtod_l+0xa12>
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	4b5e      	ldr	r3, [pc, #376]	@ (8004088 <_strtod_l+0xae0>)
 8003f10:	f7fc fd54 	bl	80009bc <__aeabi_dcmplt>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d157      	bne.n	8003fc8 <_strtod_l+0xa20>
 8003f18:	4630      	mov	r0, r6
 8003f1a:	4639      	mov	r1, r7
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800408c <_strtod_l+0xae4>)
 8003f20:	f7fc fada 	bl	80004d8 <__aeabi_dmul>
 8003f24:	4606      	mov	r6, r0
 8003f26:	460f      	mov	r7, r1
 8003f28:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8003f2c:	9606      	str	r6, [sp, #24]
 8003f2e:	9307      	str	r3, [sp, #28]
 8003f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f34:	4d51      	ldr	r5, [pc, #324]	@ (800407c <_strtod_l+0xad4>)
 8003f36:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f3c:	401d      	ands	r5, r3
 8003f3e:	4b54      	ldr	r3, [pc, #336]	@ (8004090 <_strtod_l+0xae8>)
 8003f40:	429d      	cmp	r5, r3
 8003f42:	f040 80ab 	bne.w	800409c <_strtod_l+0xaf4>
 8003f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f48:	4650      	mov	r0, sl
 8003f4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8003f4e:	4659      	mov	r1, fp
 8003f50:	f002 fdec 	bl	8006b2c <__ulp>
 8003f54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f58:	f7fc fabe 	bl	80004d8 <__aeabi_dmul>
 8003f5c:	4652      	mov	r2, sl
 8003f5e:	465b      	mov	r3, fp
 8003f60:	f7fc f904 	bl	800016c <__adddf3>
 8003f64:	460b      	mov	r3, r1
 8003f66:	4945      	ldr	r1, [pc, #276]	@ (800407c <_strtod_l+0xad4>)
 8003f68:	4a4a      	ldr	r2, [pc, #296]	@ (8004094 <_strtod_l+0xaec>)
 8003f6a:	4019      	ands	r1, r3
 8003f6c:	4291      	cmp	r1, r2
 8003f6e:	4682      	mov	sl, r0
 8003f70:	d942      	bls.n	8003ff8 <_strtod_l+0xa50>
 8003f72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003f74:	4b43      	ldr	r3, [pc, #268]	@ (8004084 <_strtod_l+0xadc>)
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d103      	bne.n	8003f82 <_strtod_l+0x9da>
 8003f7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f43f ad32 	beq.w	80039e6 <_strtod_l+0x43e>
 8003f82:	f04f 3aff 	mov.w	sl, #4294967295
 8003f86:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8004084 <_strtod_l+0xadc>
 8003f8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003f8c:	9805      	ldr	r0, [sp, #20]
 8003f8e:	f002 faa1 	bl	80064d4 <_Bfree>
 8003f92:	4649      	mov	r1, r9
 8003f94:	9805      	ldr	r0, [sp, #20]
 8003f96:	f002 fa9d 	bl	80064d4 <_Bfree>
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	9805      	ldr	r0, [sp, #20]
 8003f9e:	f002 fa99 	bl	80064d4 <_Bfree>
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	9805      	ldr	r0, [sp, #20]
 8003fa6:	f002 fa95 	bl	80064d4 <_Bfree>
 8003faa:	e61c      	b.n	8003be6 <_strtod_l+0x63e>
 8003fac:	f1ba 0f01 	cmp.w	sl, #1
 8003fb0:	d103      	bne.n	8003fba <_strtod_l+0xa12>
 8003fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f43f ada9 	beq.w	8003b0c <_strtod_l+0x564>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4b36      	ldr	r3, [pc, #216]	@ (8004098 <_strtod_l+0xaf0>)
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003fc4:	4f30      	ldr	r7, [pc, #192]	@ (8004088 <_strtod_l+0xae0>)
 8003fc6:	e7b3      	b.n	8003f30 <_strtod_l+0x988>
 8003fc8:	2600      	movs	r6, #0
 8003fca:	4f30      	ldr	r7, [pc, #192]	@ (800408c <_strtod_l+0xae4>)
 8003fcc:	e7ac      	b.n	8003f28 <_strtod_l+0x980>
 8003fce:	4630      	mov	r0, r6
 8003fd0:	4639      	mov	r1, r7
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800408c <_strtod_l+0xae4>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f7fc fa7f 	bl	80004d8 <__aeabi_dmul>
 8003fda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003fdc:	4606      	mov	r6, r0
 8003fde:	460f      	mov	r7, r1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0a1      	beq.n	8003f28 <_strtod_l+0x980>
 8003fe4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003fe8:	e7a2      	b.n	8003f30 <_strtod_l+0x988>
 8003fea:	2200      	movs	r2, #0
 8003fec:	4b26      	ldr	r3, [pc, #152]	@ (8004088 <_strtod_l+0xae0>)
 8003fee:	4616      	mov	r6, r2
 8003ff0:	461f      	mov	r7, r3
 8003ff2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003ff6:	e79b      	b.n	8003f30 <_strtod_l+0x988>
 8003ff8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8003ffc:	9b08      	ldr	r3, [sp, #32]
 8003ffe:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1c1      	bne.n	8003f8a <_strtod_l+0x9e2>
 8004006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800400a:	0d1b      	lsrs	r3, r3, #20
 800400c:	051b      	lsls	r3, r3, #20
 800400e:	429d      	cmp	r5, r3
 8004010:	d1bb      	bne.n	8003f8a <_strtod_l+0x9e2>
 8004012:	4630      	mov	r0, r6
 8004014:	4639      	mov	r1, r7
 8004016:	f7fd f82b 	bl	8001070 <__aeabi_d2lz>
 800401a:	f7fc fa2f 	bl	800047c <__aeabi_l2d>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4630      	mov	r0, r6
 8004024:	4639      	mov	r1, r7
 8004026:	f7fc f89f 	bl	8000168 <__aeabi_dsub>
 800402a:	460b      	mov	r3, r1
 800402c:	4602      	mov	r2, r0
 800402e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8004032:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004036:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004038:	ea46 060a 	orr.w	r6, r6, sl
 800403c:	431e      	orrs	r6, r3
 800403e:	d06a      	beq.n	8004116 <_strtod_l+0xb6e>
 8004040:	a309      	add	r3, pc, #36	@ (adr r3, 8004068 <_strtod_l+0xac0>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc fcb9 	bl	80009bc <__aeabi_dcmplt>
 800404a:	2800      	cmp	r0, #0
 800404c:	f47f acd6 	bne.w	80039fc <_strtod_l+0x454>
 8004050:	a307      	add	r3, pc, #28	@ (adr r3, 8004070 <_strtod_l+0xac8>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800405a:	f7fc fccd 	bl	80009f8 <__aeabi_dcmpgt>
 800405e:	2800      	cmp	r0, #0
 8004060:	d093      	beq.n	8003f8a <_strtod_l+0x9e2>
 8004062:	e4cb      	b.n	80039fc <_strtod_l+0x454>
 8004064:	f3af 8000 	nop.w
 8004068:	94a03595 	.word	0x94a03595
 800406c:	3fdfffff 	.word	0x3fdfffff
 8004070:	35afe535 	.word	0x35afe535
 8004074:	3fe00000 	.word	0x3fe00000
 8004078:	39500000 	.word	0x39500000
 800407c:	7ff00000 	.word	0x7ff00000
 8004080:	000fffff 	.word	0x000fffff
 8004084:	7fefffff 	.word	0x7fefffff
 8004088:	3ff00000 	.word	0x3ff00000
 800408c:	3fe00000 	.word	0x3fe00000
 8004090:	7fe00000 	.word	0x7fe00000
 8004094:	7c9fffff 	.word	0x7c9fffff
 8004098:	bff00000 	.word	0xbff00000
 800409c:	9b08      	ldr	r3, [sp, #32]
 800409e:	b323      	cbz	r3, 80040ea <_strtod_l+0xb42>
 80040a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80040a4:	d821      	bhi.n	80040ea <_strtod_l+0xb42>
 80040a6:	a328      	add	r3, pc, #160	@ (adr r3, 8004148 <_strtod_l+0xba0>)
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	4630      	mov	r0, r6
 80040ae:	4639      	mov	r1, r7
 80040b0:	f7fc fc8e 	bl	80009d0 <__aeabi_dcmple>
 80040b4:	b1a0      	cbz	r0, 80040e0 <_strtod_l+0xb38>
 80040b6:	4639      	mov	r1, r7
 80040b8:	4630      	mov	r0, r6
 80040ba:	f7fc fce5 	bl	8000a88 <__aeabi_d2uiz>
 80040be:	2801      	cmp	r0, #1
 80040c0:	bf38      	it	cc
 80040c2:	2001      	movcc	r0, #1
 80040c4:	f7fc f98e 	bl	80003e4 <__aeabi_ui2d>
 80040c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040ca:	4606      	mov	r6, r0
 80040cc:	460f      	mov	r7, r1
 80040ce:	b9fb      	cbnz	r3, 8004110 <_strtod_l+0xb68>
 80040d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040d4:	9014      	str	r0, [sp, #80]	@ 0x50
 80040d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80040d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80040dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80040e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80040e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80040e6:	1b5b      	subs	r3, r3, r5
 80040e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80040ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80040f2:	f002 fd1b 	bl	8006b2c <__ulp>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4650      	mov	r0, sl
 80040fc:	4659      	mov	r1, fp
 80040fe:	f7fc f9eb 	bl	80004d8 <__aeabi_dmul>
 8004102:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004106:	f7fc f831 	bl	800016c <__adddf3>
 800410a:	4682      	mov	sl, r0
 800410c:	468b      	mov	fp, r1
 800410e:	e775      	b.n	8003ffc <_strtod_l+0xa54>
 8004110:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8004114:	e7e0      	b.n	80040d8 <_strtod_l+0xb30>
 8004116:	a30e      	add	r3, pc, #56	@ (adr r3, 8004150 <_strtod_l+0xba8>)
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f7fc fc4e 	bl	80009bc <__aeabi_dcmplt>
 8004120:	e79d      	b.n	800405e <_strtod_l+0xab6>
 8004122:	2300      	movs	r3, #0
 8004124:	930e      	str	r3, [sp, #56]	@ 0x38
 8004126:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004128:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	f7ff ba79 	b.w	8003622 <_strtod_l+0x7a>
 8004130:	2a65      	cmp	r2, #101	@ 0x65
 8004132:	f43f ab72 	beq.w	800381a <_strtod_l+0x272>
 8004136:	2a45      	cmp	r2, #69	@ 0x45
 8004138:	f43f ab6f 	beq.w	800381a <_strtod_l+0x272>
 800413c:	2301      	movs	r3, #1
 800413e:	f7ff bbaa 	b.w	8003896 <_strtod_l+0x2ee>
 8004142:	bf00      	nop
 8004144:	f3af 8000 	nop.w
 8004148:	ffc00000 	.word	0xffc00000
 800414c:	41dfffff 	.word	0x41dfffff
 8004150:	94a03595 	.word	0x94a03595
 8004154:	3fcfffff 	.word	0x3fcfffff

08004158 <strtod>:
 8004158:	460a      	mov	r2, r1
 800415a:	4601      	mov	r1, r0
 800415c:	4802      	ldr	r0, [pc, #8]	@ (8004168 <strtod+0x10>)
 800415e:	4b03      	ldr	r3, [pc, #12]	@ (800416c <strtod+0x14>)
 8004160:	6800      	ldr	r0, [r0, #0]
 8004162:	f7ff ba21 	b.w	80035a8 <_strtod_l>
 8004166:	bf00      	nop
 8004168:	20000184 	.word	0x20000184
 800416c:	20000018 	.word	0x20000018

08004170 <__cvt>:
 8004170:	2b00      	cmp	r3, #0
 8004172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004176:	461d      	mov	r5, r3
 8004178:	bfbb      	ittet	lt
 800417a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800417e:	461d      	movlt	r5, r3
 8004180:	2300      	movge	r3, #0
 8004182:	232d      	movlt	r3, #45	@ 0x2d
 8004184:	b088      	sub	sp, #32
 8004186:	4614      	mov	r4, r2
 8004188:	bfb8      	it	lt
 800418a:	4614      	movlt	r4, r2
 800418c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800418e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004190:	7013      	strb	r3, [r2, #0]
 8004192:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004194:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004198:	f023 0820 	bic.w	r8, r3, #32
 800419c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80041a0:	d005      	beq.n	80041ae <__cvt+0x3e>
 80041a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80041a6:	d100      	bne.n	80041aa <__cvt+0x3a>
 80041a8:	3601      	adds	r6, #1
 80041aa:	2302      	movs	r3, #2
 80041ac:	e000      	b.n	80041b0 <__cvt+0x40>
 80041ae:	2303      	movs	r3, #3
 80041b0:	aa07      	add	r2, sp, #28
 80041b2:	9204      	str	r2, [sp, #16]
 80041b4:	aa06      	add	r2, sp, #24
 80041b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80041ba:	e9cd 3600 	strd	r3, r6, [sp]
 80041be:	4622      	mov	r2, r4
 80041c0:	462b      	mov	r3, r5
 80041c2:	f000 ff29 	bl	8005018 <_dtoa_r>
 80041c6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80041ca:	4607      	mov	r7, r0
 80041cc:	d119      	bne.n	8004202 <__cvt+0x92>
 80041ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80041d0:	07db      	lsls	r3, r3, #31
 80041d2:	d50e      	bpl.n	80041f2 <__cvt+0x82>
 80041d4:	eb00 0906 	add.w	r9, r0, r6
 80041d8:	2200      	movs	r2, #0
 80041da:	2300      	movs	r3, #0
 80041dc:	4620      	mov	r0, r4
 80041de:	4629      	mov	r1, r5
 80041e0:	f7fc fbe2 	bl	80009a8 <__aeabi_dcmpeq>
 80041e4:	b108      	cbz	r0, 80041ea <__cvt+0x7a>
 80041e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80041ea:	2230      	movs	r2, #48	@ 0x30
 80041ec:	9b07      	ldr	r3, [sp, #28]
 80041ee:	454b      	cmp	r3, r9
 80041f0:	d31e      	bcc.n	8004230 <__cvt+0xc0>
 80041f2:	4638      	mov	r0, r7
 80041f4:	9b07      	ldr	r3, [sp, #28]
 80041f6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80041f8:	1bdb      	subs	r3, r3, r7
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	b008      	add	sp, #32
 80041fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004202:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004206:	eb00 0906 	add.w	r9, r0, r6
 800420a:	d1e5      	bne.n	80041d8 <__cvt+0x68>
 800420c:	7803      	ldrb	r3, [r0, #0]
 800420e:	2b30      	cmp	r3, #48	@ 0x30
 8004210:	d10a      	bne.n	8004228 <__cvt+0xb8>
 8004212:	2200      	movs	r2, #0
 8004214:	2300      	movs	r3, #0
 8004216:	4620      	mov	r0, r4
 8004218:	4629      	mov	r1, r5
 800421a:	f7fc fbc5 	bl	80009a8 <__aeabi_dcmpeq>
 800421e:	b918      	cbnz	r0, 8004228 <__cvt+0xb8>
 8004220:	f1c6 0601 	rsb	r6, r6, #1
 8004224:	f8ca 6000 	str.w	r6, [sl]
 8004228:	f8da 3000 	ldr.w	r3, [sl]
 800422c:	4499      	add	r9, r3
 800422e:	e7d3      	b.n	80041d8 <__cvt+0x68>
 8004230:	1c59      	adds	r1, r3, #1
 8004232:	9107      	str	r1, [sp, #28]
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e7d9      	b.n	80041ec <__cvt+0x7c>

08004238 <__exponent>:
 8004238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800423a:	2900      	cmp	r1, #0
 800423c:	bfb6      	itet	lt
 800423e:	232d      	movlt	r3, #45	@ 0x2d
 8004240:	232b      	movge	r3, #43	@ 0x2b
 8004242:	4249      	neglt	r1, r1
 8004244:	2909      	cmp	r1, #9
 8004246:	7002      	strb	r2, [r0, #0]
 8004248:	7043      	strb	r3, [r0, #1]
 800424a:	dd29      	ble.n	80042a0 <__exponent+0x68>
 800424c:	f10d 0307 	add.w	r3, sp, #7
 8004250:	461d      	mov	r5, r3
 8004252:	270a      	movs	r7, #10
 8004254:	fbb1 f6f7 	udiv	r6, r1, r7
 8004258:	461a      	mov	r2, r3
 800425a:	fb07 1416 	mls	r4, r7, r6, r1
 800425e:	3430      	adds	r4, #48	@ 0x30
 8004260:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004264:	460c      	mov	r4, r1
 8004266:	2c63      	cmp	r4, #99	@ 0x63
 8004268:	4631      	mov	r1, r6
 800426a:	f103 33ff 	add.w	r3, r3, #4294967295
 800426e:	dcf1      	bgt.n	8004254 <__exponent+0x1c>
 8004270:	3130      	adds	r1, #48	@ 0x30
 8004272:	1e94      	subs	r4, r2, #2
 8004274:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004278:	4623      	mov	r3, r4
 800427a:	1c41      	adds	r1, r0, #1
 800427c:	42ab      	cmp	r3, r5
 800427e:	d30a      	bcc.n	8004296 <__exponent+0x5e>
 8004280:	f10d 0309 	add.w	r3, sp, #9
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	42ac      	cmp	r4, r5
 8004288:	bf88      	it	hi
 800428a:	2300      	movhi	r3, #0
 800428c:	3302      	adds	r3, #2
 800428e:	4403      	add	r3, r0
 8004290:	1a18      	subs	r0, r3, r0
 8004292:	b003      	add	sp, #12
 8004294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004296:	f813 6b01 	ldrb.w	r6, [r3], #1
 800429a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800429e:	e7ed      	b.n	800427c <__exponent+0x44>
 80042a0:	2330      	movs	r3, #48	@ 0x30
 80042a2:	3130      	adds	r1, #48	@ 0x30
 80042a4:	7083      	strb	r3, [r0, #2]
 80042a6:	70c1      	strb	r1, [r0, #3]
 80042a8:	1d03      	adds	r3, r0, #4
 80042aa:	e7f1      	b.n	8004290 <__exponent+0x58>

080042ac <_printf_float>:
 80042ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b0:	b091      	sub	sp, #68	@ 0x44
 80042b2:	460c      	mov	r4, r1
 80042b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80042b8:	4616      	mov	r6, r2
 80042ba:	461f      	mov	r7, r3
 80042bc:	4605      	mov	r5, r0
 80042be:	f000 fd63 	bl	8004d88 <_localeconv_r>
 80042c2:	6803      	ldr	r3, [r0, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	9308      	str	r3, [sp, #32]
 80042c8:	f7fb ff42 	bl	8000150 <strlen>
 80042cc:	2300      	movs	r3, #0
 80042ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80042d0:	f8d8 3000 	ldr.w	r3, [r8]
 80042d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80042d6:	3307      	adds	r3, #7
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	f103 0208 	add.w	r2, r3, #8
 80042e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80042e4:	f8d4 b000 	ldr.w	fp, [r4]
 80042e8:	f8c8 2000 	str.w	r2, [r8]
 80042ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80042f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042f6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80042fa:	f04f 32ff 	mov.w	r2, #4294967295
 80042fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004302:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004306:	4b9c      	ldr	r3, [pc, #624]	@ (8004578 <_printf_float+0x2cc>)
 8004308:	f7fc fb80 	bl	8000a0c <__aeabi_dcmpun>
 800430c:	bb70      	cbnz	r0, 800436c <_printf_float+0xc0>
 800430e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004312:	f04f 32ff 	mov.w	r2, #4294967295
 8004316:	4b98      	ldr	r3, [pc, #608]	@ (8004578 <_printf_float+0x2cc>)
 8004318:	f7fc fb5a 	bl	80009d0 <__aeabi_dcmple>
 800431c:	bb30      	cbnz	r0, 800436c <_printf_float+0xc0>
 800431e:	2200      	movs	r2, #0
 8004320:	2300      	movs	r3, #0
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f7fc fb49 	bl	80009bc <__aeabi_dcmplt>
 800432a:	b110      	cbz	r0, 8004332 <_printf_float+0x86>
 800432c:	232d      	movs	r3, #45	@ 0x2d
 800432e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004332:	4a92      	ldr	r2, [pc, #584]	@ (800457c <_printf_float+0x2d0>)
 8004334:	4b92      	ldr	r3, [pc, #584]	@ (8004580 <_printf_float+0x2d4>)
 8004336:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800433a:	bf8c      	ite	hi
 800433c:	4690      	movhi	r8, r2
 800433e:	4698      	movls	r8, r3
 8004340:	2303      	movs	r3, #3
 8004342:	f04f 0900 	mov.w	r9, #0
 8004346:	6123      	str	r3, [r4, #16]
 8004348:	f02b 0304 	bic.w	r3, fp, #4
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	4633      	mov	r3, r6
 8004350:	4621      	mov	r1, r4
 8004352:	4628      	mov	r0, r5
 8004354:	9700      	str	r7, [sp, #0]
 8004356:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004358:	f000 f9d4 	bl	8004704 <_printf_common>
 800435c:	3001      	adds	r0, #1
 800435e:	f040 8090 	bne.w	8004482 <_printf_float+0x1d6>
 8004362:	f04f 30ff 	mov.w	r0, #4294967295
 8004366:	b011      	add	sp, #68	@ 0x44
 8004368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	4640      	mov	r0, r8
 8004372:	4649      	mov	r1, r9
 8004374:	f7fc fb4a 	bl	8000a0c <__aeabi_dcmpun>
 8004378:	b148      	cbz	r0, 800438e <_printf_float+0xe2>
 800437a:	464b      	mov	r3, r9
 800437c:	2b00      	cmp	r3, #0
 800437e:	bfb8      	it	lt
 8004380:	232d      	movlt	r3, #45	@ 0x2d
 8004382:	4a80      	ldr	r2, [pc, #512]	@ (8004584 <_printf_float+0x2d8>)
 8004384:	bfb8      	it	lt
 8004386:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800438a:	4b7f      	ldr	r3, [pc, #508]	@ (8004588 <_printf_float+0x2dc>)
 800438c:	e7d3      	b.n	8004336 <_printf_float+0x8a>
 800438e:	6863      	ldr	r3, [r4, #4]
 8004390:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	d13f      	bne.n	8004418 <_printf_float+0x16c>
 8004398:	2306      	movs	r3, #6
 800439a:	6063      	str	r3, [r4, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80043a2:	6023      	str	r3, [r4, #0]
 80043a4:	9206      	str	r2, [sp, #24]
 80043a6:	aa0e      	add	r2, sp, #56	@ 0x38
 80043a8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80043ac:	aa0d      	add	r2, sp, #52	@ 0x34
 80043ae:	9203      	str	r2, [sp, #12]
 80043b0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80043b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80043b8:	6863      	ldr	r3, [r4, #4]
 80043ba:	4642      	mov	r2, r8
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4628      	mov	r0, r5
 80043c0:	464b      	mov	r3, r9
 80043c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80043c4:	f7ff fed4 	bl	8004170 <__cvt>
 80043c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80043ca:	4680      	mov	r8, r0
 80043cc:	2947      	cmp	r1, #71	@ 0x47
 80043ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80043d0:	d128      	bne.n	8004424 <_printf_float+0x178>
 80043d2:	1cc8      	adds	r0, r1, #3
 80043d4:	db02      	blt.n	80043dc <_printf_float+0x130>
 80043d6:	6863      	ldr	r3, [r4, #4]
 80043d8:	4299      	cmp	r1, r3
 80043da:	dd40      	ble.n	800445e <_printf_float+0x1b2>
 80043dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80043e0:	fa5f fa8a 	uxtb.w	sl, sl
 80043e4:	4652      	mov	r2, sl
 80043e6:	3901      	subs	r1, #1
 80043e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80043ec:	910d      	str	r1, [sp, #52]	@ 0x34
 80043ee:	f7ff ff23 	bl	8004238 <__exponent>
 80043f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80043f4:	4681      	mov	r9, r0
 80043f6:	1813      	adds	r3, r2, r0
 80043f8:	2a01      	cmp	r2, #1
 80043fa:	6123      	str	r3, [r4, #16]
 80043fc:	dc02      	bgt.n	8004404 <_printf_float+0x158>
 80043fe:	6822      	ldr	r2, [r4, #0]
 8004400:	07d2      	lsls	r2, r2, #31
 8004402:	d501      	bpl.n	8004408 <_printf_float+0x15c>
 8004404:	3301      	adds	r3, #1
 8004406:	6123      	str	r3, [r4, #16]
 8004408:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800440c:	2b00      	cmp	r3, #0
 800440e:	d09e      	beq.n	800434e <_printf_float+0xa2>
 8004410:	232d      	movs	r3, #45	@ 0x2d
 8004412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004416:	e79a      	b.n	800434e <_printf_float+0xa2>
 8004418:	2947      	cmp	r1, #71	@ 0x47
 800441a:	d1bf      	bne.n	800439c <_printf_float+0xf0>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1bd      	bne.n	800439c <_printf_float+0xf0>
 8004420:	2301      	movs	r3, #1
 8004422:	e7ba      	b.n	800439a <_printf_float+0xee>
 8004424:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004428:	d9dc      	bls.n	80043e4 <_printf_float+0x138>
 800442a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800442e:	d118      	bne.n	8004462 <_printf_float+0x1b6>
 8004430:	2900      	cmp	r1, #0
 8004432:	6863      	ldr	r3, [r4, #4]
 8004434:	dd0b      	ble.n	800444e <_printf_float+0x1a2>
 8004436:	6121      	str	r1, [r4, #16]
 8004438:	b913      	cbnz	r3, 8004440 <_printf_float+0x194>
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	07d0      	lsls	r0, r2, #31
 800443e:	d502      	bpl.n	8004446 <_printf_float+0x19a>
 8004440:	3301      	adds	r3, #1
 8004442:	440b      	add	r3, r1
 8004444:	6123      	str	r3, [r4, #16]
 8004446:	f04f 0900 	mov.w	r9, #0
 800444a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800444c:	e7dc      	b.n	8004408 <_printf_float+0x15c>
 800444e:	b913      	cbnz	r3, 8004456 <_printf_float+0x1aa>
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	07d2      	lsls	r2, r2, #31
 8004454:	d501      	bpl.n	800445a <_printf_float+0x1ae>
 8004456:	3302      	adds	r3, #2
 8004458:	e7f4      	b.n	8004444 <_printf_float+0x198>
 800445a:	2301      	movs	r3, #1
 800445c:	e7f2      	b.n	8004444 <_printf_float+0x198>
 800445e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004464:	4299      	cmp	r1, r3
 8004466:	db05      	blt.n	8004474 <_printf_float+0x1c8>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	6121      	str	r1, [r4, #16]
 800446c:	07d8      	lsls	r0, r3, #31
 800446e:	d5ea      	bpl.n	8004446 <_printf_float+0x19a>
 8004470:	1c4b      	adds	r3, r1, #1
 8004472:	e7e7      	b.n	8004444 <_printf_float+0x198>
 8004474:	2900      	cmp	r1, #0
 8004476:	bfcc      	ite	gt
 8004478:	2201      	movgt	r2, #1
 800447a:	f1c1 0202 	rsble	r2, r1, #2
 800447e:	4413      	add	r3, r2
 8004480:	e7e0      	b.n	8004444 <_printf_float+0x198>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	055a      	lsls	r2, r3, #21
 8004486:	d407      	bmi.n	8004498 <_printf_float+0x1ec>
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	4642      	mov	r2, r8
 800448c:	4631      	mov	r1, r6
 800448e:	4628      	mov	r0, r5
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	d12b      	bne.n	80044ee <_printf_float+0x242>
 8004496:	e764      	b.n	8004362 <_printf_float+0xb6>
 8004498:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800449c:	f240 80dc 	bls.w	8004658 <_printf_float+0x3ac>
 80044a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044a4:	2200      	movs	r2, #0
 80044a6:	2300      	movs	r3, #0
 80044a8:	f7fc fa7e 	bl	80009a8 <__aeabi_dcmpeq>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d033      	beq.n	8004518 <_printf_float+0x26c>
 80044b0:	2301      	movs	r3, #1
 80044b2:	4631      	mov	r1, r6
 80044b4:	4628      	mov	r0, r5
 80044b6:	4a35      	ldr	r2, [pc, #212]	@ (800458c <_printf_float+0x2e0>)
 80044b8:	47b8      	blx	r7
 80044ba:	3001      	adds	r0, #1
 80044bc:	f43f af51 	beq.w	8004362 <_printf_float+0xb6>
 80044c0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80044c4:	4543      	cmp	r3, r8
 80044c6:	db02      	blt.n	80044ce <_printf_float+0x222>
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	07d8      	lsls	r0, r3, #31
 80044cc:	d50f      	bpl.n	80044ee <_printf_float+0x242>
 80044ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044d2:	4631      	mov	r1, r6
 80044d4:	4628      	mov	r0, r5
 80044d6:	47b8      	blx	r7
 80044d8:	3001      	adds	r0, #1
 80044da:	f43f af42 	beq.w	8004362 <_printf_float+0xb6>
 80044de:	f04f 0900 	mov.w	r9, #0
 80044e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80044e6:	f104 0a1a 	add.w	sl, r4, #26
 80044ea:	45c8      	cmp	r8, r9
 80044ec:	dc09      	bgt.n	8004502 <_printf_float+0x256>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	079b      	lsls	r3, r3, #30
 80044f2:	f100 8102 	bmi.w	80046fa <_printf_float+0x44e>
 80044f6:	68e0      	ldr	r0, [r4, #12]
 80044f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044fa:	4298      	cmp	r0, r3
 80044fc:	bfb8      	it	lt
 80044fe:	4618      	movlt	r0, r3
 8004500:	e731      	b.n	8004366 <_printf_float+0xba>
 8004502:	2301      	movs	r3, #1
 8004504:	4652      	mov	r2, sl
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	f43f af28 	beq.w	8004362 <_printf_float+0xb6>
 8004512:	f109 0901 	add.w	r9, r9, #1
 8004516:	e7e8      	b.n	80044ea <_printf_float+0x23e>
 8004518:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800451a:	2b00      	cmp	r3, #0
 800451c:	dc38      	bgt.n	8004590 <_printf_float+0x2e4>
 800451e:	2301      	movs	r3, #1
 8004520:	4631      	mov	r1, r6
 8004522:	4628      	mov	r0, r5
 8004524:	4a19      	ldr	r2, [pc, #100]	@ (800458c <_printf_float+0x2e0>)
 8004526:	47b8      	blx	r7
 8004528:	3001      	adds	r0, #1
 800452a:	f43f af1a 	beq.w	8004362 <_printf_float+0xb6>
 800452e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004532:	ea59 0303 	orrs.w	r3, r9, r3
 8004536:	d102      	bne.n	800453e <_printf_float+0x292>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	07d9      	lsls	r1, r3, #31
 800453c:	d5d7      	bpl.n	80044ee <_printf_float+0x242>
 800453e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004542:	4631      	mov	r1, r6
 8004544:	4628      	mov	r0, r5
 8004546:	47b8      	blx	r7
 8004548:	3001      	adds	r0, #1
 800454a:	f43f af0a 	beq.w	8004362 <_printf_float+0xb6>
 800454e:	f04f 0a00 	mov.w	sl, #0
 8004552:	f104 0b1a 	add.w	fp, r4, #26
 8004556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004558:	425b      	negs	r3, r3
 800455a:	4553      	cmp	r3, sl
 800455c:	dc01      	bgt.n	8004562 <_printf_float+0x2b6>
 800455e:	464b      	mov	r3, r9
 8004560:	e793      	b.n	800448a <_printf_float+0x1de>
 8004562:	2301      	movs	r3, #1
 8004564:	465a      	mov	r2, fp
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f aef8 	beq.w	8004362 <_printf_float+0xb6>
 8004572:	f10a 0a01 	add.w	sl, sl, #1
 8004576:	e7ee      	b.n	8004556 <_printf_float+0x2aa>
 8004578:	7fefffff 	.word	0x7fefffff
 800457c:	0800789c 	.word	0x0800789c
 8004580:	08007898 	.word	0x08007898
 8004584:	080078a4 	.word	0x080078a4
 8004588:	080078a0 	.word	0x080078a0
 800458c:	080078a8 	.word	0x080078a8
 8004590:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004592:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004596:	4553      	cmp	r3, sl
 8004598:	bfa8      	it	ge
 800459a:	4653      	movge	r3, sl
 800459c:	2b00      	cmp	r3, #0
 800459e:	4699      	mov	r9, r3
 80045a0:	dc36      	bgt.n	8004610 <_printf_float+0x364>
 80045a2:	f04f 0b00 	mov.w	fp, #0
 80045a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045aa:	f104 021a 	add.w	r2, r4, #26
 80045ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80045b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80045b2:	eba3 0309 	sub.w	r3, r3, r9
 80045b6:	455b      	cmp	r3, fp
 80045b8:	dc31      	bgt.n	800461e <_printf_float+0x372>
 80045ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045bc:	459a      	cmp	sl, r3
 80045be:	dc3a      	bgt.n	8004636 <_printf_float+0x38a>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	07da      	lsls	r2, r3, #31
 80045c4:	d437      	bmi.n	8004636 <_printf_float+0x38a>
 80045c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045c8:	ebaa 0903 	sub.w	r9, sl, r3
 80045cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045ce:	ebaa 0303 	sub.w	r3, sl, r3
 80045d2:	4599      	cmp	r9, r3
 80045d4:	bfa8      	it	ge
 80045d6:	4699      	movge	r9, r3
 80045d8:	f1b9 0f00 	cmp.w	r9, #0
 80045dc:	dc33      	bgt.n	8004646 <_printf_float+0x39a>
 80045de:	f04f 0800 	mov.w	r8, #0
 80045e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045e6:	f104 0b1a 	add.w	fp, r4, #26
 80045ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045ec:	ebaa 0303 	sub.w	r3, sl, r3
 80045f0:	eba3 0309 	sub.w	r3, r3, r9
 80045f4:	4543      	cmp	r3, r8
 80045f6:	f77f af7a 	ble.w	80044ee <_printf_float+0x242>
 80045fa:	2301      	movs	r3, #1
 80045fc:	465a      	mov	r2, fp
 80045fe:	4631      	mov	r1, r6
 8004600:	4628      	mov	r0, r5
 8004602:	47b8      	blx	r7
 8004604:	3001      	adds	r0, #1
 8004606:	f43f aeac 	beq.w	8004362 <_printf_float+0xb6>
 800460a:	f108 0801 	add.w	r8, r8, #1
 800460e:	e7ec      	b.n	80045ea <_printf_float+0x33e>
 8004610:	4642      	mov	r2, r8
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	d1c2      	bne.n	80045a2 <_printf_float+0x2f6>
 800461c:	e6a1      	b.n	8004362 <_printf_float+0xb6>
 800461e:	2301      	movs	r3, #1
 8004620:	4631      	mov	r1, r6
 8004622:	4628      	mov	r0, r5
 8004624:	920a      	str	r2, [sp, #40]	@ 0x28
 8004626:	47b8      	blx	r7
 8004628:	3001      	adds	r0, #1
 800462a:	f43f ae9a 	beq.w	8004362 <_printf_float+0xb6>
 800462e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004630:	f10b 0b01 	add.w	fp, fp, #1
 8004634:	e7bb      	b.n	80045ae <_printf_float+0x302>
 8004636:	4631      	mov	r1, r6
 8004638:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800463c:	4628      	mov	r0, r5
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	d1c0      	bne.n	80045c6 <_printf_float+0x31a>
 8004644:	e68d      	b.n	8004362 <_printf_float+0xb6>
 8004646:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004648:	464b      	mov	r3, r9
 800464a:	4631      	mov	r1, r6
 800464c:	4628      	mov	r0, r5
 800464e:	4442      	add	r2, r8
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	d1c3      	bne.n	80045de <_printf_float+0x332>
 8004656:	e684      	b.n	8004362 <_printf_float+0xb6>
 8004658:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800465c:	f1ba 0f01 	cmp.w	sl, #1
 8004660:	dc01      	bgt.n	8004666 <_printf_float+0x3ba>
 8004662:	07db      	lsls	r3, r3, #31
 8004664:	d536      	bpl.n	80046d4 <_printf_float+0x428>
 8004666:	2301      	movs	r3, #1
 8004668:	4642      	mov	r2, r8
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	f43f ae76 	beq.w	8004362 <_printf_float+0xb6>
 8004676:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800467a:	4631      	mov	r1, r6
 800467c:	4628      	mov	r0, r5
 800467e:	47b8      	blx	r7
 8004680:	3001      	adds	r0, #1
 8004682:	f43f ae6e 	beq.w	8004362 <_printf_float+0xb6>
 8004686:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800468a:	2200      	movs	r2, #0
 800468c:	2300      	movs	r3, #0
 800468e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004692:	f7fc f989 	bl	80009a8 <__aeabi_dcmpeq>
 8004696:	b9c0      	cbnz	r0, 80046ca <_printf_float+0x41e>
 8004698:	4653      	mov	r3, sl
 800469a:	f108 0201 	add.w	r2, r8, #1
 800469e:	4631      	mov	r1, r6
 80046a0:	4628      	mov	r0, r5
 80046a2:	47b8      	blx	r7
 80046a4:	3001      	adds	r0, #1
 80046a6:	d10c      	bne.n	80046c2 <_printf_float+0x416>
 80046a8:	e65b      	b.n	8004362 <_printf_float+0xb6>
 80046aa:	2301      	movs	r3, #1
 80046ac:	465a      	mov	r2, fp
 80046ae:	4631      	mov	r1, r6
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b8      	blx	r7
 80046b4:	3001      	adds	r0, #1
 80046b6:	f43f ae54 	beq.w	8004362 <_printf_float+0xb6>
 80046ba:	f108 0801 	add.w	r8, r8, #1
 80046be:	45d0      	cmp	r8, sl
 80046c0:	dbf3      	blt.n	80046aa <_printf_float+0x3fe>
 80046c2:	464b      	mov	r3, r9
 80046c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80046c8:	e6e0      	b.n	800448c <_printf_float+0x1e0>
 80046ca:	f04f 0800 	mov.w	r8, #0
 80046ce:	f104 0b1a 	add.w	fp, r4, #26
 80046d2:	e7f4      	b.n	80046be <_printf_float+0x412>
 80046d4:	2301      	movs	r3, #1
 80046d6:	4642      	mov	r2, r8
 80046d8:	e7e1      	b.n	800469e <_printf_float+0x3f2>
 80046da:	2301      	movs	r3, #1
 80046dc:	464a      	mov	r2, r9
 80046de:	4631      	mov	r1, r6
 80046e0:	4628      	mov	r0, r5
 80046e2:	47b8      	blx	r7
 80046e4:	3001      	adds	r0, #1
 80046e6:	f43f ae3c 	beq.w	8004362 <_printf_float+0xb6>
 80046ea:	f108 0801 	add.w	r8, r8, #1
 80046ee:	68e3      	ldr	r3, [r4, #12]
 80046f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80046f2:	1a5b      	subs	r3, r3, r1
 80046f4:	4543      	cmp	r3, r8
 80046f6:	dcf0      	bgt.n	80046da <_printf_float+0x42e>
 80046f8:	e6fd      	b.n	80044f6 <_printf_float+0x24a>
 80046fa:	f04f 0800 	mov.w	r8, #0
 80046fe:	f104 0919 	add.w	r9, r4, #25
 8004702:	e7f4      	b.n	80046ee <_printf_float+0x442>

08004704 <_printf_common>:
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	4616      	mov	r6, r2
 800470a:	4698      	mov	r8, r3
 800470c:	688a      	ldr	r2, [r1, #8]
 800470e:	690b      	ldr	r3, [r1, #16]
 8004710:	4607      	mov	r7, r0
 8004712:	4293      	cmp	r3, r2
 8004714:	bfb8      	it	lt
 8004716:	4613      	movlt	r3, r2
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800471e:	460c      	mov	r4, r1
 8004720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004724:	b10a      	cbz	r2, 800472a <_printf_common+0x26>
 8004726:	3301      	adds	r3, #1
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	0699      	lsls	r1, r3, #26
 800472e:	bf42      	ittt	mi
 8004730:	6833      	ldrmi	r3, [r6, #0]
 8004732:	3302      	addmi	r3, #2
 8004734:	6033      	strmi	r3, [r6, #0]
 8004736:	6825      	ldr	r5, [r4, #0]
 8004738:	f015 0506 	ands.w	r5, r5, #6
 800473c:	d106      	bne.n	800474c <_printf_common+0x48>
 800473e:	f104 0a19 	add.w	sl, r4, #25
 8004742:	68e3      	ldr	r3, [r4, #12]
 8004744:	6832      	ldr	r2, [r6, #0]
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	42ab      	cmp	r3, r5
 800474a:	dc2b      	bgt.n	80047a4 <_printf_common+0xa0>
 800474c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	3b00      	subs	r3, #0
 8004754:	bf18      	it	ne
 8004756:	2301      	movne	r3, #1
 8004758:	0692      	lsls	r2, r2, #26
 800475a:	d430      	bmi.n	80047be <_printf_common+0xba>
 800475c:	4641      	mov	r1, r8
 800475e:	4638      	mov	r0, r7
 8004760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004764:	47c8      	blx	r9
 8004766:	3001      	adds	r0, #1
 8004768:	d023      	beq.n	80047b2 <_printf_common+0xae>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	2b04      	cmp	r3, #4
 8004774:	bf14      	ite	ne
 8004776:	2500      	movne	r5, #0
 8004778:	6833      	ldreq	r3, [r6, #0]
 800477a:	f04f 0600 	mov.w	r6, #0
 800477e:	bf08      	it	eq
 8004780:	68e5      	ldreq	r5, [r4, #12]
 8004782:	f104 041a 	add.w	r4, r4, #26
 8004786:	bf08      	it	eq
 8004788:	1aed      	subeq	r5, r5, r3
 800478a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800478e:	bf08      	it	eq
 8004790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004794:	4293      	cmp	r3, r2
 8004796:	bfc4      	itt	gt
 8004798:	1a9b      	subgt	r3, r3, r2
 800479a:	18ed      	addgt	r5, r5, r3
 800479c:	42b5      	cmp	r5, r6
 800479e:	d11a      	bne.n	80047d6 <_printf_common+0xd2>
 80047a0:	2000      	movs	r0, #0
 80047a2:	e008      	b.n	80047b6 <_printf_common+0xb2>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4652      	mov	r2, sl
 80047a8:	4641      	mov	r1, r8
 80047aa:	4638      	mov	r0, r7
 80047ac:	47c8      	blx	r9
 80047ae:	3001      	adds	r0, #1
 80047b0:	d103      	bne.n	80047ba <_printf_common+0xb6>
 80047b2:	f04f 30ff 	mov.w	r0, #4294967295
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	3501      	adds	r5, #1
 80047bc:	e7c1      	b.n	8004742 <_printf_common+0x3e>
 80047be:	2030      	movs	r0, #48	@ 0x30
 80047c0:	18e1      	adds	r1, r4, r3
 80047c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047cc:	4422      	add	r2, r4
 80047ce:	3302      	adds	r3, #2
 80047d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047d4:	e7c2      	b.n	800475c <_printf_common+0x58>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4622      	mov	r2, r4
 80047da:	4641      	mov	r1, r8
 80047dc:	4638      	mov	r0, r7
 80047de:	47c8      	blx	r9
 80047e0:	3001      	adds	r0, #1
 80047e2:	d0e6      	beq.n	80047b2 <_printf_common+0xae>
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7d9      	b.n	800479c <_printf_common+0x98>

080047e8 <_printf_i>:
 80047e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047ec:	7e0f      	ldrb	r7, [r1, #24]
 80047ee:	4691      	mov	r9, r2
 80047f0:	2f78      	cmp	r7, #120	@ 0x78
 80047f2:	4680      	mov	r8, r0
 80047f4:	460c      	mov	r4, r1
 80047f6:	469a      	mov	sl, r3
 80047f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047fe:	d807      	bhi.n	8004810 <_printf_i+0x28>
 8004800:	2f62      	cmp	r7, #98	@ 0x62
 8004802:	d80a      	bhi.n	800481a <_printf_i+0x32>
 8004804:	2f00      	cmp	r7, #0
 8004806:	f000 80d1 	beq.w	80049ac <_printf_i+0x1c4>
 800480a:	2f58      	cmp	r7, #88	@ 0x58
 800480c:	f000 80b8 	beq.w	8004980 <_printf_i+0x198>
 8004810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004818:	e03a      	b.n	8004890 <_printf_i+0xa8>
 800481a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800481e:	2b15      	cmp	r3, #21
 8004820:	d8f6      	bhi.n	8004810 <_printf_i+0x28>
 8004822:	a101      	add	r1, pc, #4	@ (adr r1, 8004828 <_printf_i+0x40>)
 8004824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004828:	08004881 	.word	0x08004881
 800482c:	08004895 	.word	0x08004895
 8004830:	08004811 	.word	0x08004811
 8004834:	08004811 	.word	0x08004811
 8004838:	08004811 	.word	0x08004811
 800483c:	08004811 	.word	0x08004811
 8004840:	08004895 	.word	0x08004895
 8004844:	08004811 	.word	0x08004811
 8004848:	08004811 	.word	0x08004811
 800484c:	08004811 	.word	0x08004811
 8004850:	08004811 	.word	0x08004811
 8004854:	08004993 	.word	0x08004993
 8004858:	080048bf 	.word	0x080048bf
 800485c:	0800494d 	.word	0x0800494d
 8004860:	08004811 	.word	0x08004811
 8004864:	08004811 	.word	0x08004811
 8004868:	080049b5 	.word	0x080049b5
 800486c:	08004811 	.word	0x08004811
 8004870:	080048bf 	.word	0x080048bf
 8004874:	08004811 	.word	0x08004811
 8004878:	08004811 	.word	0x08004811
 800487c:	08004955 	.word	0x08004955
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6032      	str	r2, [r6, #0]
 8004888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800488c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004890:	2301      	movs	r3, #1
 8004892:	e09c      	b.n	80049ce <_printf_i+0x1e6>
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	6820      	ldr	r0, [r4, #0]
 8004898:	1d19      	adds	r1, r3, #4
 800489a:	6031      	str	r1, [r6, #0]
 800489c:	0606      	lsls	r6, r0, #24
 800489e:	d501      	bpl.n	80048a4 <_printf_i+0xbc>
 80048a0:	681d      	ldr	r5, [r3, #0]
 80048a2:	e003      	b.n	80048ac <_printf_i+0xc4>
 80048a4:	0645      	lsls	r5, r0, #25
 80048a6:	d5fb      	bpl.n	80048a0 <_printf_i+0xb8>
 80048a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048ac:	2d00      	cmp	r5, #0
 80048ae:	da03      	bge.n	80048b8 <_printf_i+0xd0>
 80048b0:	232d      	movs	r3, #45	@ 0x2d
 80048b2:	426d      	negs	r5, r5
 80048b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048b8:	230a      	movs	r3, #10
 80048ba:	4858      	ldr	r0, [pc, #352]	@ (8004a1c <_printf_i+0x234>)
 80048bc:	e011      	b.n	80048e2 <_printf_i+0xfa>
 80048be:	6821      	ldr	r1, [r4, #0]
 80048c0:	6833      	ldr	r3, [r6, #0]
 80048c2:	0608      	lsls	r0, r1, #24
 80048c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80048c8:	d402      	bmi.n	80048d0 <_printf_i+0xe8>
 80048ca:	0649      	lsls	r1, r1, #25
 80048cc:	bf48      	it	mi
 80048ce:	b2ad      	uxthmi	r5, r5
 80048d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80048d2:	6033      	str	r3, [r6, #0]
 80048d4:	bf14      	ite	ne
 80048d6:	230a      	movne	r3, #10
 80048d8:	2308      	moveq	r3, #8
 80048da:	4850      	ldr	r0, [pc, #320]	@ (8004a1c <_printf_i+0x234>)
 80048dc:	2100      	movs	r1, #0
 80048de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048e2:	6866      	ldr	r6, [r4, #4]
 80048e4:	2e00      	cmp	r6, #0
 80048e6:	60a6      	str	r6, [r4, #8]
 80048e8:	db05      	blt.n	80048f6 <_printf_i+0x10e>
 80048ea:	6821      	ldr	r1, [r4, #0]
 80048ec:	432e      	orrs	r6, r5
 80048ee:	f021 0104 	bic.w	r1, r1, #4
 80048f2:	6021      	str	r1, [r4, #0]
 80048f4:	d04b      	beq.n	800498e <_printf_i+0x1a6>
 80048f6:	4616      	mov	r6, r2
 80048f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80048fc:	fb03 5711 	mls	r7, r3, r1, r5
 8004900:	5dc7      	ldrb	r7, [r0, r7]
 8004902:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004906:	462f      	mov	r7, r5
 8004908:	42bb      	cmp	r3, r7
 800490a:	460d      	mov	r5, r1
 800490c:	d9f4      	bls.n	80048f8 <_printf_i+0x110>
 800490e:	2b08      	cmp	r3, #8
 8004910:	d10b      	bne.n	800492a <_printf_i+0x142>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	07df      	lsls	r7, r3, #31
 8004916:	d508      	bpl.n	800492a <_printf_i+0x142>
 8004918:	6923      	ldr	r3, [r4, #16]
 800491a:	6861      	ldr	r1, [r4, #4]
 800491c:	4299      	cmp	r1, r3
 800491e:	bfde      	ittt	le
 8004920:	2330      	movle	r3, #48	@ 0x30
 8004922:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004926:	f106 36ff 	addle.w	r6, r6, #4294967295
 800492a:	1b92      	subs	r2, r2, r6
 800492c:	6122      	str	r2, [r4, #16]
 800492e:	464b      	mov	r3, r9
 8004930:	4621      	mov	r1, r4
 8004932:	4640      	mov	r0, r8
 8004934:	f8cd a000 	str.w	sl, [sp]
 8004938:	aa03      	add	r2, sp, #12
 800493a:	f7ff fee3 	bl	8004704 <_printf_common>
 800493e:	3001      	adds	r0, #1
 8004940:	d14a      	bne.n	80049d8 <_printf_i+0x1f0>
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	b004      	add	sp, #16
 8004948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	f043 0320 	orr.w	r3, r3, #32
 8004952:	6023      	str	r3, [r4, #0]
 8004954:	2778      	movs	r7, #120	@ 0x78
 8004956:	4832      	ldr	r0, [pc, #200]	@ (8004a20 <_printf_i+0x238>)
 8004958:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	6831      	ldr	r1, [r6, #0]
 8004960:	061f      	lsls	r7, r3, #24
 8004962:	f851 5b04 	ldr.w	r5, [r1], #4
 8004966:	d402      	bmi.n	800496e <_printf_i+0x186>
 8004968:	065f      	lsls	r7, r3, #25
 800496a:	bf48      	it	mi
 800496c:	b2ad      	uxthmi	r5, r5
 800496e:	6031      	str	r1, [r6, #0]
 8004970:	07d9      	lsls	r1, r3, #31
 8004972:	bf44      	itt	mi
 8004974:	f043 0320 	orrmi.w	r3, r3, #32
 8004978:	6023      	strmi	r3, [r4, #0]
 800497a:	b11d      	cbz	r5, 8004984 <_printf_i+0x19c>
 800497c:	2310      	movs	r3, #16
 800497e:	e7ad      	b.n	80048dc <_printf_i+0xf4>
 8004980:	4826      	ldr	r0, [pc, #152]	@ (8004a1c <_printf_i+0x234>)
 8004982:	e7e9      	b.n	8004958 <_printf_i+0x170>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	f023 0320 	bic.w	r3, r3, #32
 800498a:	6023      	str	r3, [r4, #0]
 800498c:	e7f6      	b.n	800497c <_printf_i+0x194>
 800498e:	4616      	mov	r6, r2
 8004990:	e7bd      	b.n	800490e <_printf_i+0x126>
 8004992:	6833      	ldr	r3, [r6, #0]
 8004994:	6825      	ldr	r5, [r4, #0]
 8004996:	1d18      	adds	r0, r3, #4
 8004998:	6961      	ldr	r1, [r4, #20]
 800499a:	6030      	str	r0, [r6, #0]
 800499c:	062e      	lsls	r6, r5, #24
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	d501      	bpl.n	80049a6 <_printf_i+0x1be>
 80049a2:	6019      	str	r1, [r3, #0]
 80049a4:	e002      	b.n	80049ac <_printf_i+0x1c4>
 80049a6:	0668      	lsls	r0, r5, #25
 80049a8:	d5fb      	bpl.n	80049a2 <_printf_i+0x1ba>
 80049aa:	8019      	strh	r1, [r3, #0]
 80049ac:	2300      	movs	r3, #0
 80049ae:	4616      	mov	r6, r2
 80049b0:	6123      	str	r3, [r4, #16]
 80049b2:	e7bc      	b.n	800492e <_printf_i+0x146>
 80049b4:	6833      	ldr	r3, [r6, #0]
 80049b6:	2100      	movs	r1, #0
 80049b8:	1d1a      	adds	r2, r3, #4
 80049ba:	6032      	str	r2, [r6, #0]
 80049bc:	681e      	ldr	r6, [r3, #0]
 80049be:	6862      	ldr	r2, [r4, #4]
 80049c0:	4630      	mov	r0, r6
 80049c2:	f000 fa60 	bl	8004e86 <memchr>
 80049c6:	b108      	cbz	r0, 80049cc <_printf_i+0x1e4>
 80049c8:	1b80      	subs	r0, r0, r6
 80049ca:	6060      	str	r0, [r4, #4]
 80049cc:	6863      	ldr	r3, [r4, #4]
 80049ce:	6123      	str	r3, [r4, #16]
 80049d0:	2300      	movs	r3, #0
 80049d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049d6:	e7aa      	b.n	800492e <_printf_i+0x146>
 80049d8:	4632      	mov	r2, r6
 80049da:	4649      	mov	r1, r9
 80049dc:	4640      	mov	r0, r8
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	47d0      	blx	sl
 80049e2:	3001      	adds	r0, #1
 80049e4:	d0ad      	beq.n	8004942 <_printf_i+0x15a>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	079b      	lsls	r3, r3, #30
 80049ea:	d413      	bmi.n	8004a14 <_printf_i+0x22c>
 80049ec:	68e0      	ldr	r0, [r4, #12]
 80049ee:	9b03      	ldr	r3, [sp, #12]
 80049f0:	4298      	cmp	r0, r3
 80049f2:	bfb8      	it	lt
 80049f4:	4618      	movlt	r0, r3
 80049f6:	e7a6      	b.n	8004946 <_printf_i+0x15e>
 80049f8:	2301      	movs	r3, #1
 80049fa:	4632      	mov	r2, r6
 80049fc:	4649      	mov	r1, r9
 80049fe:	4640      	mov	r0, r8
 8004a00:	47d0      	blx	sl
 8004a02:	3001      	adds	r0, #1
 8004a04:	d09d      	beq.n	8004942 <_printf_i+0x15a>
 8004a06:	3501      	adds	r5, #1
 8004a08:	68e3      	ldr	r3, [r4, #12]
 8004a0a:	9903      	ldr	r1, [sp, #12]
 8004a0c:	1a5b      	subs	r3, r3, r1
 8004a0e:	42ab      	cmp	r3, r5
 8004a10:	dcf2      	bgt.n	80049f8 <_printf_i+0x210>
 8004a12:	e7eb      	b.n	80049ec <_printf_i+0x204>
 8004a14:	2500      	movs	r5, #0
 8004a16:	f104 0619 	add.w	r6, r4, #25
 8004a1a:	e7f5      	b.n	8004a08 <_printf_i+0x220>
 8004a1c:	080078aa 	.word	0x080078aa
 8004a20:	080078bb 	.word	0x080078bb

08004a24 <std>:
 8004a24:	2300      	movs	r3, #0
 8004a26:	b510      	push	{r4, lr}
 8004a28:	4604      	mov	r4, r0
 8004a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a32:	6083      	str	r3, [r0, #8]
 8004a34:	8181      	strh	r1, [r0, #12]
 8004a36:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a38:	81c2      	strh	r2, [r0, #14]
 8004a3a:	6183      	str	r3, [r0, #24]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	2208      	movs	r2, #8
 8004a40:	305c      	adds	r0, #92	@ 0x5c
 8004a42:	f000 f92a 	bl	8004c9a <memset>
 8004a46:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <std+0x58>)
 8004a48:	6224      	str	r4, [r4, #32]
 8004a4a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a80 <std+0x5c>)
 8004a4e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a50:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <std+0x60>)
 8004a52:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a54:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <std+0x64>)
 8004a56:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <std+0x68>)
 8004a5a:	429c      	cmp	r4, r3
 8004a5c:	d006      	beq.n	8004a6c <std+0x48>
 8004a5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a62:	4294      	cmp	r4, r2
 8004a64:	d002      	beq.n	8004a6c <std+0x48>
 8004a66:	33d0      	adds	r3, #208	@ 0xd0
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	d105      	bne.n	8004a78 <std+0x54>
 8004a6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a74:	f000 b9fc 	b.w	8004e70 <__retarget_lock_init_recursive>
 8004a78:	bd10      	pop	{r4, pc}
 8004a7a:	bf00      	nop
 8004a7c:	08004c15 	.word	0x08004c15
 8004a80:	08004c37 	.word	0x08004c37
 8004a84:	08004c6f 	.word	0x08004c6f
 8004a88:	08004c93 	.word	0x08004c93
 8004a8c:	2000030c 	.word	0x2000030c

08004a90 <stdio_exit_handler>:
 8004a90:	4a02      	ldr	r2, [pc, #8]	@ (8004a9c <stdio_exit_handler+0xc>)
 8004a92:	4903      	ldr	r1, [pc, #12]	@ (8004aa0 <stdio_exit_handler+0x10>)
 8004a94:	4803      	ldr	r0, [pc, #12]	@ (8004aa4 <stdio_exit_handler+0x14>)
 8004a96:	f000 b869 	b.w	8004b6c <_fwalk_sglue>
 8004a9a:	bf00      	nop
 8004a9c:	2000000c 	.word	0x2000000c
 8004aa0:	0800715d 	.word	0x0800715d
 8004aa4:	20000188 	.word	0x20000188

08004aa8 <cleanup_stdio>:
 8004aa8:	6841      	ldr	r1, [r0, #4]
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <cleanup_stdio+0x34>)
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4299      	cmp	r1, r3
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	d001      	beq.n	8004ab8 <cleanup_stdio+0x10>
 8004ab4:	f002 fb52 	bl	800715c <_fflush_r>
 8004ab8:	68a1      	ldr	r1, [r4, #8]
 8004aba:	4b09      	ldr	r3, [pc, #36]	@ (8004ae0 <cleanup_stdio+0x38>)
 8004abc:	4299      	cmp	r1, r3
 8004abe:	d002      	beq.n	8004ac6 <cleanup_stdio+0x1e>
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f002 fb4b 	bl	800715c <_fflush_r>
 8004ac6:	68e1      	ldr	r1, [r4, #12]
 8004ac8:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <cleanup_stdio+0x3c>)
 8004aca:	4299      	cmp	r1, r3
 8004acc:	d004      	beq.n	8004ad8 <cleanup_stdio+0x30>
 8004ace:	4620      	mov	r0, r4
 8004ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad4:	f002 bb42 	b.w	800715c <_fflush_r>
 8004ad8:	bd10      	pop	{r4, pc}
 8004ada:	bf00      	nop
 8004adc:	2000030c 	.word	0x2000030c
 8004ae0:	20000374 	.word	0x20000374
 8004ae4:	200003dc 	.word	0x200003dc

08004ae8 <global_stdio_init.part.0>:
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	4b0b      	ldr	r3, [pc, #44]	@ (8004b18 <global_stdio_init.part.0+0x30>)
 8004aec:	4c0b      	ldr	r4, [pc, #44]	@ (8004b1c <global_stdio_init.part.0+0x34>)
 8004aee:	4a0c      	ldr	r2, [pc, #48]	@ (8004b20 <global_stdio_init.part.0+0x38>)
 8004af0:	4620      	mov	r0, r4
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	2104      	movs	r1, #4
 8004af6:	2200      	movs	r2, #0
 8004af8:	f7ff ff94 	bl	8004a24 <std>
 8004afc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b00:	2201      	movs	r2, #1
 8004b02:	2109      	movs	r1, #9
 8004b04:	f7ff ff8e 	bl	8004a24 <std>
 8004b08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b12:	2112      	movs	r1, #18
 8004b14:	f7ff bf86 	b.w	8004a24 <std>
 8004b18:	20000444 	.word	0x20000444
 8004b1c:	2000030c 	.word	0x2000030c
 8004b20:	08004a91 	.word	0x08004a91

08004b24 <__sfp_lock_acquire>:
 8004b24:	4801      	ldr	r0, [pc, #4]	@ (8004b2c <__sfp_lock_acquire+0x8>)
 8004b26:	f000 b9a4 	b.w	8004e72 <__retarget_lock_acquire_recursive>
 8004b2a:	bf00      	nop
 8004b2c:	2000044d 	.word	0x2000044d

08004b30 <__sfp_lock_release>:
 8004b30:	4801      	ldr	r0, [pc, #4]	@ (8004b38 <__sfp_lock_release+0x8>)
 8004b32:	f000 b99f 	b.w	8004e74 <__retarget_lock_release_recursive>
 8004b36:	bf00      	nop
 8004b38:	2000044d 	.word	0x2000044d

08004b3c <__sinit>:
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	4604      	mov	r4, r0
 8004b40:	f7ff fff0 	bl	8004b24 <__sfp_lock_acquire>
 8004b44:	6a23      	ldr	r3, [r4, #32]
 8004b46:	b11b      	cbz	r3, 8004b50 <__sinit+0x14>
 8004b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b4c:	f7ff bff0 	b.w	8004b30 <__sfp_lock_release>
 8004b50:	4b04      	ldr	r3, [pc, #16]	@ (8004b64 <__sinit+0x28>)
 8004b52:	6223      	str	r3, [r4, #32]
 8004b54:	4b04      	ldr	r3, [pc, #16]	@ (8004b68 <__sinit+0x2c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f5      	bne.n	8004b48 <__sinit+0xc>
 8004b5c:	f7ff ffc4 	bl	8004ae8 <global_stdio_init.part.0>
 8004b60:	e7f2      	b.n	8004b48 <__sinit+0xc>
 8004b62:	bf00      	nop
 8004b64:	08004aa9 	.word	0x08004aa9
 8004b68:	20000444 	.word	0x20000444

08004b6c <_fwalk_sglue>:
 8004b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b70:	4607      	mov	r7, r0
 8004b72:	4688      	mov	r8, r1
 8004b74:	4614      	mov	r4, r2
 8004b76:	2600      	movs	r6, #0
 8004b78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b7c:	f1b9 0901 	subs.w	r9, r9, #1
 8004b80:	d505      	bpl.n	8004b8e <_fwalk_sglue+0x22>
 8004b82:	6824      	ldr	r4, [r4, #0]
 8004b84:	2c00      	cmp	r4, #0
 8004b86:	d1f7      	bne.n	8004b78 <_fwalk_sglue+0xc>
 8004b88:	4630      	mov	r0, r6
 8004b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b8e:	89ab      	ldrh	r3, [r5, #12]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d907      	bls.n	8004ba4 <_fwalk_sglue+0x38>
 8004b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	d003      	beq.n	8004ba4 <_fwalk_sglue+0x38>
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	47c0      	blx	r8
 8004ba2:	4306      	orrs	r6, r0
 8004ba4:	3568      	adds	r5, #104	@ 0x68
 8004ba6:	e7e9      	b.n	8004b7c <_fwalk_sglue+0x10>

08004ba8 <sniprintf>:
 8004ba8:	b40c      	push	{r2, r3}
 8004baa:	b530      	push	{r4, r5, lr}
 8004bac:	4b18      	ldr	r3, [pc, #96]	@ (8004c10 <sniprintf+0x68>)
 8004bae:	1e0c      	subs	r4, r1, #0
 8004bb0:	681d      	ldr	r5, [r3, #0]
 8004bb2:	b09d      	sub	sp, #116	@ 0x74
 8004bb4:	da08      	bge.n	8004bc8 <sniprintf+0x20>
 8004bb6:	238b      	movs	r3, #139	@ 0x8b
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	b01d      	add	sp, #116	@ 0x74
 8004bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bc4:	b002      	add	sp, #8
 8004bc6:	4770      	bx	lr
 8004bc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004bcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004bd6:	bf0c      	ite	eq
 8004bd8:	4623      	moveq	r3, r4
 8004bda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004bde:	9304      	str	r3, [sp, #16]
 8004be0:	9307      	str	r3, [sp, #28]
 8004be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004be6:	9002      	str	r0, [sp, #8]
 8004be8:	9006      	str	r0, [sp, #24]
 8004bea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004bee:	4628      	mov	r0, r5
 8004bf0:	ab21      	add	r3, sp, #132	@ 0x84
 8004bf2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004bf4:	a902      	add	r1, sp, #8
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	f002 f934 	bl	8006e64 <_svfiprintf_r>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	bfbc      	itt	lt
 8004c00:	238b      	movlt	r3, #139	@ 0x8b
 8004c02:	602b      	strlt	r3, [r5, #0]
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d0da      	beq.n	8004bbe <sniprintf+0x16>
 8004c08:	2200      	movs	r2, #0
 8004c0a:	9b02      	ldr	r3, [sp, #8]
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e7d6      	b.n	8004bbe <sniprintf+0x16>
 8004c10:	20000184 	.word	0x20000184

08004c14 <__sread>:
 8004c14:	b510      	push	{r4, lr}
 8004c16:	460c      	mov	r4, r1
 8004c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1c:	f000 f8da 	bl	8004dd4 <_read_r>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	bfab      	itete	ge
 8004c24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c26:	89a3      	ldrhlt	r3, [r4, #12]
 8004c28:	181b      	addge	r3, r3, r0
 8004c2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c2e:	bfac      	ite	ge
 8004c30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c32:	81a3      	strhlt	r3, [r4, #12]
 8004c34:	bd10      	pop	{r4, pc}

08004c36 <__swrite>:
 8004c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3a:	461f      	mov	r7, r3
 8004c3c:	898b      	ldrh	r3, [r1, #12]
 8004c3e:	4605      	mov	r5, r0
 8004c40:	05db      	lsls	r3, r3, #23
 8004c42:	460c      	mov	r4, r1
 8004c44:	4616      	mov	r6, r2
 8004c46:	d505      	bpl.n	8004c54 <__swrite+0x1e>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c50:	f000 f8ae 	bl	8004db0 <_lseek_r>
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	4632      	mov	r2, r6
 8004c58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c5c:	81a3      	strh	r3, [r4, #12]
 8004c5e:	4628      	mov	r0, r5
 8004c60:	463b      	mov	r3, r7
 8004c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6a:	f000 b8c5 	b.w	8004df8 <_write_r>

08004c6e <__sseek>:
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	460c      	mov	r4, r1
 8004c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c76:	f000 f89b 	bl	8004db0 <_lseek_r>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	bf15      	itete	ne
 8004c80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c8a:	81a3      	strheq	r3, [r4, #12]
 8004c8c:	bf18      	it	ne
 8004c8e:	81a3      	strhne	r3, [r4, #12]
 8004c90:	bd10      	pop	{r4, pc}

08004c92 <__sclose>:
 8004c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c96:	f000 b87b 	b.w	8004d90 <_close_r>

08004c9a <memset>:
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d100      	bne.n	8004ca4 <memset+0xa>
 8004ca2:	4770      	bx	lr
 8004ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ca8:	e7f9      	b.n	8004c9e <memset+0x4>

08004caa <strncmp>:
 8004caa:	b510      	push	{r4, lr}
 8004cac:	b16a      	cbz	r2, 8004cca <strncmp+0x20>
 8004cae:	3901      	subs	r1, #1
 8004cb0:	1884      	adds	r4, r0, r2
 8004cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d103      	bne.n	8004cc6 <strncmp+0x1c>
 8004cbe:	42a0      	cmp	r0, r4
 8004cc0:	d001      	beq.n	8004cc6 <strncmp+0x1c>
 8004cc2:	2a00      	cmp	r2, #0
 8004cc4:	d1f5      	bne.n	8004cb2 <strncmp+0x8>
 8004cc6:	1ad0      	subs	r0, r2, r3
 8004cc8:	bd10      	pop	{r4, pc}
 8004cca:	4610      	mov	r0, r2
 8004ccc:	e7fc      	b.n	8004cc8 <strncmp+0x1e>
	...

08004cd0 <strtok>:
 8004cd0:	4b16      	ldr	r3, [pc, #88]	@ (8004d2c <strtok+0x5c>)
 8004cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd6:	681f      	ldr	r7, [r3, #0]
 8004cd8:	4605      	mov	r5, r0
 8004cda:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004cdc:	460e      	mov	r6, r1
 8004cde:	b9ec      	cbnz	r4, 8004d1c <strtok+0x4c>
 8004ce0:	2050      	movs	r0, #80	@ 0x50
 8004ce2:	f001 faef 	bl	80062c4 <malloc>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6478      	str	r0, [r7, #68]	@ 0x44
 8004cea:	b920      	cbnz	r0, 8004cf6 <strtok+0x26>
 8004cec:	215b      	movs	r1, #91	@ 0x5b
 8004cee:	4b10      	ldr	r3, [pc, #64]	@ (8004d30 <strtok+0x60>)
 8004cf0:	4810      	ldr	r0, [pc, #64]	@ (8004d34 <strtok+0x64>)
 8004cf2:	f000 f8eb 	bl	8004ecc <__assert_func>
 8004cf6:	e9c0 4400 	strd	r4, r4, [r0]
 8004cfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004cfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004d02:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004d06:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004d0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004d0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004d12:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004d16:	6184      	str	r4, [r0, #24]
 8004d18:	7704      	strb	r4, [r0, #28]
 8004d1a:	6244      	str	r4, [r0, #36]	@ 0x24
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d22:	2301      	movs	r3, #1
 8004d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d28:	f000 b806 	b.w	8004d38 <__strtok_r>
 8004d2c:	20000184 	.word	0x20000184
 8004d30:	080078cc 	.word	0x080078cc
 8004d34:	080078e3 	.word	0x080078e3

08004d38 <__strtok_r>:
 8004d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	b908      	cbnz	r0, 8004d42 <__strtok_r+0xa>
 8004d3e:	6814      	ldr	r4, [r2, #0]
 8004d40:	b144      	cbz	r4, 8004d54 <__strtok_r+0x1c>
 8004d42:	460f      	mov	r7, r1
 8004d44:	4620      	mov	r0, r4
 8004d46:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004d4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004d4e:	b91e      	cbnz	r6, 8004d58 <__strtok_r+0x20>
 8004d50:	b965      	cbnz	r5, 8004d6c <__strtok_r+0x34>
 8004d52:	6015      	str	r5, [r2, #0]
 8004d54:	2000      	movs	r0, #0
 8004d56:	e005      	b.n	8004d64 <__strtok_r+0x2c>
 8004d58:	42b5      	cmp	r5, r6
 8004d5a:	d1f6      	bne.n	8004d4a <__strtok_r+0x12>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f0      	bne.n	8004d42 <__strtok_r+0xa>
 8004d60:	6014      	str	r4, [r2, #0]
 8004d62:	7003      	strb	r3, [r0, #0]
 8004d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d66:	461c      	mov	r4, r3
 8004d68:	e00c      	b.n	8004d84 <__strtok_r+0x4c>
 8004d6a:	b91d      	cbnz	r5, 8004d74 <__strtok_r+0x3c>
 8004d6c:	460e      	mov	r6, r1
 8004d6e:	4627      	mov	r7, r4
 8004d70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004d74:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	d1f6      	bne.n	8004d6a <__strtok_r+0x32>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f2      	beq.n	8004d66 <__strtok_r+0x2e>
 8004d80:	2300      	movs	r3, #0
 8004d82:	703b      	strb	r3, [r7, #0]
 8004d84:	6014      	str	r4, [r2, #0]
 8004d86:	e7ed      	b.n	8004d64 <__strtok_r+0x2c>

08004d88 <_localeconv_r>:
 8004d88:	4800      	ldr	r0, [pc, #0]	@ (8004d8c <_localeconv_r+0x4>)
 8004d8a:	4770      	bx	lr
 8004d8c:	20000108 	.word	0x20000108

08004d90 <_close_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	2300      	movs	r3, #0
 8004d94:	4d05      	ldr	r5, [pc, #20]	@ (8004dac <_close_r+0x1c>)
 8004d96:	4604      	mov	r4, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	f7fc fd2b 	bl	80017f6 <_close>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d102      	bne.n	8004daa <_close_r+0x1a>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b103      	cbz	r3, 8004daa <_close_r+0x1a>
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	20000448 	.word	0x20000448

08004db0 <_lseek_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	2200      	movs	r2, #0
 8004dba:	4d05      	ldr	r5, [pc, #20]	@ (8004dd0 <_lseek_r+0x20>)
 8004dbc:	602a      	str	r2, [r5, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f7fc fd3d 	bl	800183e <_lseek>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_lseek_r+0x1e>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_lseek_r+0x1e>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	20000448 	.word	0x20000448

08004dd4 <_read_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	2200      	movs	r2, #0
 8004dde:	4d05      	ldr	r5, [pc, #20]	@ (8004df4 <_read_r+0x20>)
 8004de0:	602a      	str	r2, [r5, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f7fc fcce 	bl	8001784 <_read>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_read_r+0x1e>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_read_r+0x1e>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	20000448 	.word	0x20000448

08004df8 <_write_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	2200      	movs	r2, #0
 8004e02:	4d05      	ldr	r5, [pc, #20]	@ (8004e18 <_write_r+0x20>)
 8004e04:	602a      	str	r2, [r5, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f7fc fcd9 	bl	80017be <_write>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d102      	bne.n	8004e16 <_write_r+0x1e>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	b103      	cbz	r3, 8004e16 <_write_r+0x1e>
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	20000448 	.word	0x20000448

08004e1c <__errno>:
 8004e1c:	4b01      	ldr	r3, [pc, #4]	@ (8004e24 <__errno+0x8>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000184 	.word	0x20000184

08004e28 <__libc_init_array>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	4d0c      	ldr	r5, [pc, #48]	@ (8004e60 <__libc_init_array+0x38>)
 8004e2e:	4c0d      	ldr	r4, [pc, #52]	@ (8004e64 <__libc_init_array+0x3c>)
 8004e30:	1b64      	subs	r4, r4, r5
 8004e32:	10a4      	asrs	r4, r4, #2
 8004e34:	42a6      	cmp	r6, r4
 8004e36:	d109      	bne.n	8004e4c <__libc_init_array+0x24>
 8004e38:	f002 fce0 	bl	80077fc <_init>
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	4d0a      	ldr	r5, [pc, #40]	@ (8004e68 <__libc_init_array+0x40>)
 8004e40:	4c0a      	ldr	r4, [pc, #40]	@ (8004e6c <__libc_init_array+0x44>)
 8004e42:	1b64      	subs	r4, r4, r5
 8004e44:	10a4      	asrs	r4, r4, #2
 8004e46:	42a6      	cmp	r6, r4
 8004e48:	d105      	bne.n	8004e56 <__libc_init_array+0x2e>
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e50:	4798      	blx	r3
 8004e52:	3601      	adds	r6, #1
 8004e54:	e7ee      	b.n	8004e34 <__libc_init_array+0xc>
 8004e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5a:	4798      	blx	r3
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	e7f2      	b.n	8004e46 <__libc_init_array+0x1e>
 8004e60:	08007d24 	.word	0x08007d24
 8004e64:	08007d24 	.word	0x08007d24
 8004e68:	08007d24 	.word	0x08007d24
 8004e6c:	08007d28 	.word	0x08007d28

08004e70 <__retarget_lock_init_recursive>:
 8004e70:	4770      	bx	lr

08004e72 <__retarget_lock_acquire_recursive>:
 8004e72:	4770      	bx	lr

08004e74 <__retarget_lock_release_recursive>:
 8004e74:	4770      	bx	lr

08004e76 <strcpy>:
 8004e76:	4603      	mov	r3, r0
 8004e78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e7c:	f803 2b01 	strb.w	r2, [r3], #1
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	d1f9      	bne.n	8004e78 <strcpy+0x2>
 8004e84:	4770      	bx	lr

08004e86 <memchr>:
 8004e86:	4603      	mov	r3, r0
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	b2c9      	uxtb	r1, r1
 8004e8c:	4402      	add	r2, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	d101      	bne.n	8004e98 <memchr+0x12>
 8004e94:	2000      	movs	r0, #0
 8004e96:	e003      	b.n	8004ea0 <memchr+0x1a>
 8004e98:	7804      	ldrb	r4, [r0, #0]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	428c      	cmp	r4, r1
 8004e9e:	d1f6      	bne.n	8004e8e <memchr+0x8>
 8004ea0:	bd10      	pop	{r4, pc}

08004ea2 <memcpy>:
 8004ea2:	440a      	add	r2, r1
 8004ea4:	4291      	cmp	r1, r2
 8004ea6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eaa:	d100      	bne.n	8004eae <memcpy+0xc>
 8004eac:	4770      	bx	lr
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb4:	4291      	cmp	r1, r2
 8004eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eba:	d1f9      	bne.n	8004eb0 <memcpy+0xe>
 8004ebc:	bd10      	pop	{r4, pc}
	...

08004ec0 <nan>:
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	4901      	ldr	r1, [pc, #4]	@ (8004ec8 <nan+0x8>)
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	7ff80000 	.word	0x7ff80000

08004ecc <__assert_func>:
 8004ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ece:	4614      	mov	r4, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <__assert_func+0x2c>)
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68d8      	ldr	r0, [r3, #12]
 8004eda:	b14c      	cbz	r4, 8004ef0 <__assert_func+0x24>
 8004edc:	4b07      	ldr	r3, [pc, #28]	@ (8004efc <__assert_func+0x30>)
 8004ede:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ee2:	9100      	str	r1, [sp, #0]
 8004ee4:	462b      	mov	r3, r5
 8004ee6:	4906      	ldr	r1, [pc, #24]	@ (8004f00 <__assert_func+0x34>)
 8004ee8:	f002 f960 	bl	80071ac <fiprintf>
 8004eec:	f002 f99a 	bl	8007224 <abort>
 8004ef0:	4b04      	ldr	r3, [pc, #16]	@ (8004f04 <__assert_func+0x38>)
 8004ef2:	461c      	mov	r4, r3
 8004ef4:	e7f3      	b.n	8004ede <__assert_func+0x12>
 8004ef6:	bf00      	nop
 8004ef8:	20000184 	.word	0x20000184
 8004efc:	08007945 	.word	0x08007945
 8004f00:	08007952 	.word	0x08007952
 8004f04:	08007980 	.word	0x08007980

08004f08 <quorem>:
 8004f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	6903      	ldr	r3, [r0, #16]
 8004f0e:	690c      	ldr	r4, [r1, #16]
 8004f10:	4607      	mov	r7, r0
 8004f12:	42a3      	cmp	r3, r4
 8004f14:	db7e      	blt.n	8005014 <quorem+0x10c>
 8004f16:	3c01      	subs	r4, #1
 8004f18:	00a3      	lsls	r3, r4, #2
 8004f1a:	f100 0514 	add.w	r5, r0, #20
 8004f1e:	f101 0814 	add.w	r8, r1, #20
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f32:	3301      	adds	r3, #1
 8004f34:	429a      	cmp	r2, r3
 8004f36:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f3e:	d32e      	bcc.n	8004f9e <quorem+0x96>
 8004f40:	f04f 0a00 	mov.w	sl, #0
 8004f44:	46c4      	mov	ip, r8
 8004f46:	46ae      	mov	lr, r5
 8004f48:	46d3      	mov	fp, sl
 8004f4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f4e:	b298      	uxth	r0, r3
 8004f50:	fb06 a000 	mla	r0, r6, r0, sl
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	0c02      	lsrs	r2, r0, #16
 8004f58:	fb06 2303 	mla	r3, r6, r3, r2
 8004f5c:	f8de 2000 	ldr.w	r2, [lr]
 8004f60:	b280      	uxth	r0, r0
 8004f62:	b292      	uxth	r2, r2
 8004f64:	1a12      	subs	r2, r2, r0
 8004f66:	445a      	add	r2, fp
 8004f68:	f8de 0000 	ldr.w	r0, [lr]
 8004f6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f7a:	b292      	uxth	r2, r2
 8004f7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f80:	45e1      	cmp	r9, ip
 8004f82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f86:	f84e 2b04 	str.w	r2, [lr], #4
 8004f8a:	d2de      	bcs.n	8004f4a <quorem+0x42>
 8004f8c:	9b00      	ldr	r3, [sp, #0]
 8004f8e:	58eb      	ldr	r3, [r5, r3]
 8004f90:	b92b      	cbnz	r3, 8004f9e <quorem+0x96>
 8004f92:	9b01      	ldr	r3, [sp, #4]
 8004f94:	3b04      	subs	r3, #4
 8004f96:	429d      	cmp	r5, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	d32f      	bcc.n	8004ffc <quorem+0xf4>
 8004f9c:	613c      	str	r4, [r7, #16]
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f001 fd14 	bl	80069cc <__mcmp>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	db25      	blt.n	8004ff4 <quorem+0xec>
 8004fa8:	4629      	mov	r1, r5
 8004faa:	2000      	movs	r0, #0
 8004fac:	f858 2b04 	ldr.w	r2, [r8], #4
 8004fb0:	f8d1 c000 	ldr.w	ip, [r1]
 8004fb4:	fa1f fe82 	uxth.w	lr, r2
 8004fb8:	fa1f f38c 	uxth.w	r3, ip
 8004fbc:	eba3 030e 	sub.w	r3, r3, lr
 8004fc0:	4403      	add	r3, r0
 8004fc2:	0c12      	lsrs	r2, r2, #16
 8004fc4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004fc8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fd2:	45c1      	cmp	r9, r8
 8004fd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004fd8:	f841 3b04 	str.w	r3, [r1], #4
 8004fdc:	d2e6      	bcs.n	8004fac <quorem+0xa4>
 8004fde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fe6:	b922      	cbnz	r2, 8004ff2 <quorem+0xea>
 8004fe8:	3b04      	subs	r3, #4
 8004fea:	429d      	cmp	r5, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	d30b      	bcc.n	8005008 <quorem+0x100>
 8004ff0:	613c      	str	r4, [r7, #16]
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	b003      	add	sp, #12
 8004ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	3b04      	subs	r3, #4
 8005000:	2a00      	cmp	r2, #0
 8005002:	d1cb      	bne.n	8004f9c <quorem+0x94>
 8005004:	3c01      	subs	r4, #1
 8005006:	e7c6      	b.n	8004f96 <quorem+0x8e>
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	3b04      	subs	r3, #4
 800500c:	2a00      	cmp	r2, #0
 800500e:	d1ef      	bne.n	8004ff0 <quorem+0xe8>
 8005010:	3c01      	subs	r4, #1
 8005012:	e7ea      	b.n	8004fea <quorem+0xe2>
 8005014:	2000      	movs	r0, #0
 8005016:	e7ee      	b.n	8004ff6 <quorem+0xee>

08005018 <_dtoa_r>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	4614      	mov	r4, r2
 800501e:	461d      	mov	r5, r3
 8005020:	69c7      	ldr	r7, [r0, #28]
 8005022:	b097      	sub	sp, #92	@ 0x5c
 8005024:	4681      	mov	r9, r0
 8005026:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800502a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800502c:	b97f      	cbnz	r7, 800504e <_dtoa_r+0x36>
 800502e:	2010      	movs	r0, #16
 8005030:	f001 f948 	bl	80062c4 <malloc>
 8005034:	4602      	mov	r2, r0
 8005036:	f8c9 001c 	str.w	r0, [r9, #28]
 800503a:	b920      	cbnz	r0, 8005046 <_dtoa_r+0x2e>
 800503c:	21ef      	movs	r1, #239	@ 0xef
 800503e:	4bac      	ldr	r3, [pc, #688]	@ (80052f0 <_dtoa_r+0x2d8>)
 8005040:	48ac      	ldr	r0, [pc, #688]	@ (80052f4 <_dtoa_r+0x2dc>)
 8005042:	f7ff ff43 	bl	8004ecc <__assert_func>
 8005046:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800504a:	6007      	str	r7, [r0, #0]
 800504c:	60c7      	str	r7, [r0, #12]
 800504e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	b159      	cbz	r1, 800506e <_dtoa_r+0x56>
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	2301      	movs	r3, #1
 800505a:	4093      	lsls	r3, r2
 800505c:	604a      	str	r2, [r1, #4]
 800505e:	608b      	str	r3, [r1, #8]
 8005060:	4648      	mov	r0, r9
 8005062:	f001 fa37 	bl	80064d4 <_Bfree>
 8005066:	2200      	movs	r2, #0
 8005068:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	1e2b      	subs	r3, r5, #0
 8005070:	bfaf      	iteee	ge
 8005072:	2300      	movge	r3, #0
 8005074:	2201      	movlt	r2, #1
 8005076:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800507a:	9307      	strlt	r3, [sp, #28]
 800507c:	bfa8      	it	ge
 800507e:	6033      	strge	r3, [r6, #0]
 8005080:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005084:	4b9c      	ldr	r3, [pc, #624]	@ (80052f8 <_dtoa_r+0x2e0>)
 8005086:	bfb8      	it	lt
 8005088:	6032      	strlt	r2, [r6, #0]
 800508a:	ea33 0308 	bics.w	r3, r3, r8
 800508e:	d112      	bne.n	80050b6 <_dtoa_r+0x9e>
 8005090:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005094:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800509c:	4323      	orrs	r3, r4
 800509e:	f000 855e 	beq.w	8005b5e <_dtoa_r+0xb46>
 80050a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80052fc <_dtoa_r+0x2e4>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8560 	beq.w	8005b6e <_dtoa_r+0xb56>
 80050ae:	f10a 0303 	add.w	r3, sl, #3
 80050b2:	f000 bd5a 	b.w	8005b6a <_dtoa_r+0xb52>
 80050b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80050be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050c2:	2200      	movs	r2, #0
 80050c4:	2300      	movs	r3, #0
 80050c6:	f7fb fc6f 	bl	80009a8 <__aeabi_dcmpeq>
 80050ca:	4607      	mov	r7, r0
 80050cc:	b158      	cbz	r0, 80050e6 <_dtoa_r+0xce>
 80050ce:	2301      	movs	r3, #1
 80050d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050d6:	b113      	cbz	r3, 80050de <_dtoa_r+0xc6>
 80050d8:	4b89      	ldr	r3, [pc, #548]	@ (8005300 <_dtoa_r+0x2e8>)
 80050da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005304 <_dtoa_r+0x2ec>
 80050e2:	f000 bd44 	b.w	8005b6e <_dtoa_r+0xb56>
 80050e6:	ab14      	add	r3, sp, #80	@ 0x50
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	ab15      	add	r3, sp, #84	@ 0x54
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	4648      	mov	r0, r9
 80050f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80050f4:	f001 fd82 	bl	8006bfc <__d2b>
 80050f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80050fc:	9003      	str	r0, [sp, #12]
 80050fe:	2e00      	cmp	r6, #0
 8005100:	d078      	beq.n	80051f4 <_dtoa_r+0x1dc>
 8005102:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005108:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800510c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005110:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005114:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005118:	9712      	str	r7, [sp, #72]	@ 0x48
 800511a:	4619      	mov	r1, r3
 800511c:	2200      	movs	r2, #0
 800511e:	4b7a      	ldr	r3, [pc, #488]	@ (8005308 <_dtoa_r+0x2f0>)
 8005120:	f7fb f822 	bl	8000168 <__aeabi_dsub>
 8005124:	a36c      	add	r3, pc, #432	@ (adr r3, 80052d8 <_dtoa_r+0x2c0>)
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	f7fb f9d5 	bl	80004d8 <__aeabi_dmul>
 800512e:	a36c      	add	r3, pc, #432	@ (adr r3, 80052e0 <_dtoa_r+0x2c8>)
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f7fb f81a 	bl	800016c <__adddf3>
 8005138:	4604      	mov	r4, r0
 800513a:	4630      	mov	r0, r6
 800513c:	460d      	mov	r5, r1
 800513e:	f7fb f961 	bl	8000404 <__aeabi_i2d>
 8005142:	a369      	add	r3, pc, #420	@ (adr r3, 80052e8 <_dtoa_r+0x2d0>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f9c6 	bl	80004d8 <__aeabi_dmul>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4620      	mov	r0, r4
 8005152:	4629      	mov	r1, r5
 8005154:	f7fb f80a 	bl	800016c <__adddf3>
 8005158:	4604      	mov	r4, r0
 800515a:	460d      	mov	r5, r1
 800515c:	f7fb fc6c 	bl	8000a38 <__aeabi_d2iz>
 8005160:	2200      	movs	r2, #0
 8005162:	4607      	mov	r7, r0
 8005164:	2300      	movs	r3, #0
 8005166:	4620      	mov	r0, r4
 8005168:	4629      	mov	r1, r5
 800516a:	f7fb fc27 	bl	80009bc <__aeabi_dcmplt>
 800516e:	b140      	cbz	r0, 8005182 <_dtoa_r+0x16a>
 8005170:	4638      	mov	r0, r7
 8005172:	f7fb f947 	bl	8000404 <__aeabi_i2d>
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	f7fb fc15 	bl	80009a8 <__aeabi_dcmpeq>
 800517e:	b900      	cbnz	r0, 8005182 <_dtoa_r+0x16a>
 8005180:	3f01      	subs	r7, #1
 8005182:	2f16      	cmp	r7, #22
 8005184:	d854      	bhi.n	8005230 <_dtoa_r+0x218>
 8005186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800518a:	4b60      	ldr	r3, [pc, #384]	@ (800530c <_dtoa_r+0x2f4>)
 800518c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f7fb fc12 	bl	80009bc <__aeabi_dcmplt>
 8005198:	2800      	cmp	r0, #0
 800519a:	d04b      	beq.n	8005234 <_dtoa_r+0x21c>
 800519c:	2300      	movs	r3, #0
 800519e:	3f01      	subs	r7, #1
 80051a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80051a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051a4:	1b9b      	subs	r3, r3, r6
 80051a6:	1e5a      	subs	r2, r3, #1
 80051a8:	bf49      	itett	mi
 80051aa:	f1c3 0301 	rsbmi	r3, r3, #1
 80051ae:	2300      	movpl	r3, #0
 80051b0:	9304      	strmi	r3, [sp, #16]
 80051b2:	2300      	movmi	r3, #0
 80051b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80051b6:	bf54      	ite	pl
 80051b8:	9304      	strpl	r3, [sp, #16]
 80051ba:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80051bc:	2f00      	cmp	r7, #0
 80051be:	db3b      	blt.n	8005238 <_dtoa_r+0x220>
 80051c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051c2:	970e      	str	r7, [sp, #56]	@ 0x38
 80051c4:	443b      	add	r3, r7
 80051c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80051c8:	2300      	movs	r3, #0
 80051ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80051cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	d865      	bhi.n	800529e <_dtoa_r+0x286>
 80051d2:	2b05      	cmp	r3, #5
 80051d4:	bfc4      	itt	gt
 80051d6:	3b04      	subgt	r3, #4
 80051d8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80051da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051dc:	bfc8      	it	gt
 80051de:	2400      	movgt	r4, #0
 80051e0:	f1a3 0302 	sub.w	r3, r3, #2
 80051e4:	bfd8      	it	le
 80051e6:	2401      	movle	r4, #1
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d864      	bhi.n	80052b6 <_dtoa_r+0x29e>
 80051ec:	e8df f003 	tbb	[pc, r3]
 80051f0:	2c385553 	.word	0x2c385553
 80051f4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051f8:	441e      	add	r6, r3
 80051fa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051fe:	2b20      	cmp	r3, #32
 8005200:	bfc1      	itttt	gt
 8005202:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005206:	fa08 f803 	lslgt.w	r8, r8, r3
 800520a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800520e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005212:	bfd6      	itet	le
 8005214:	f1c3 0320 	rsble	r3, r3, #32
 8005218:	ea48 0003 	orrgt.w	r0, r8, r3
 800521c:	fa04 f003 	lslle.w	r0, r4, r3
 8005220:	f7fb f8e0 	bl	80003e4 <__aeabi_ui2d>
 8005224:	2201      	movs	r2, #1
 8005226:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800522a:	3e01      	subs	r6, #1
 800522c:	9212      	str	r2, [sp, #72]	@ 0x48
 800522e:	e774      	b.n	800511a <_dtoa_r+0x102>
 8005230:	2301      	movs	r3, #1
 8005232:	e7b5      	b.n	80051a0 <_dtoa_r+0x188>
 8005234:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005236:	e7b4      	b.n	80051a2 <_dtoa_r+0x18a>
 8005238:	9b04      	ldr	r3, [sp, #16]
 800523a:	1bdb      	subs	r3, r3, r7
 800523c:	9304      	str	r3, [sp, #16]
 800523e:	427b      	negs	r3, r7
 8005240:	930a      	str	r3, [sp, #40]	@ 0x28
 8005242:	2300      	movs	r3, #0
 8005244:	930e      	str	r3, [sp, #56]	@ 0x38
 8005246:	e7c1      	b.n	80051cc <_dtoa_r+0x1b4>
 8005248:	2301      	movs	r3, #1
 800524a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800524c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800524e:	eb07 0b03 	add.w	fp, r7, r3
 8005252:	f10b 0301 	add.w	r3, fp, #1
 8005256:	2b01      	cmp	r3, #1
 8005258:	9308      	str	r3, [sp, #32]
 800525a:	bfb8      	it	lt
 800525c:	2301      	movlt	r3, #1
 800525e:	e006      	b.n	800526e <_dtoa_r+0x256>
 8005260:	2301      	movs	r3, #1
 8005262:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005264:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005266:	2b00      	cmp	r3, #0
 8005268:	dd28      	ble.n	80052bc <_dtoa_r+0x2a4>
 800526a:	469b      	mov	fp, r3
 800526c:	9308      	str	r3, [sp, #32]
 800526e:	2100      	movs	r1, #0
 8005270:	2204      	movs	r2, #4
 8005272:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005276:	f102 0514 	add.w	r5, r2, #20
 800527a:	429d      	cmp	r5, r3
 800527c:	d926      	bls.n	80052cc <_dtoa_r+0x2b4>
 800527e:	6041      	str	r1, [r0, #4]
 8005280:	4648      	mov	r0, r9
 8005282:	f001 f8e7 	bl	8006454 <_Balloc>
 8005286:	4682      	mov	sl, r0
 8005288:	2800      	cmp	r0, #0
 800528a:	d143      	bne.n	8005314 <_dtoa_r+0x2fc>
 800528c:	4602      	mov	r2, r0
 800528e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005292:	4b1f      	ldr	r3, [pc, #124]	@ (8005310 <_dtoa_r+0x2f8>)
 8005294:	e6d4      	b.n	8005040 <_dtoa_r+0x28>
 8005296:	2300      	movs	r3, #0
 8005298:	e7e3      	b.n	8005262 <_dtoa_r+0x24a>
 800529a:	2300      	movs	r3, #0
 800529c:	e7d5      	b.n	800524a <_dtoa_r+0x232>
 800529e:	2401      	movs	r4, #1
 80052a0:	2300      	movs	r3, #0
 80052a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80052a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80052a6:	f04f 3bff 	mov.w	fp, #4294967295
 80052aa:	2200      	movs	r2, #0
 80052ac:	2312      	movs	r3, #18
 80052ae:	f8cd b020 	str.w	fp, [sp, #32]
 80052b2:	9221      	str	r2, [sp, #132]	@ 0x84
 80052b4:	e7db      	b.n	800526e <_dtoa_r+0x256>
 80052b6:	2301      	movs	r3, #1
 80052b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052ba:	e7f4      	b.n	80052a6 <_dtoa_r+0x28e>
 80052bc:	f04f 0b01 	mov.w	fp, #1
 80052c0:	465b      	mov	r3, fp
 80052c2:	f8cd b020 	str.w	fp, [sp, #32]
 80052c6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80052ca:	e7d0      	b.n	800526e <_dtoa_r+0x256>
 80052cc:	3101      	adds	r1, #1
 80052ce:	0052      	lsls	r2, r2, #1
 80052d0:	e7d1      	b.n	8005276 <_dtoa_r+0x25e>
 80052d2:	bf00      	nop
 80052d4:	f3af 8000 	nop.w
 80052d8:	636f4361 	.word	0x636f4361
 80052dc:	3fd287a7 	.word	0x3fd287a7
 80052e0:	8b60c8b3 	.word	0x8b60c8b3
 80052e4:	3fc68a28 	.word	0x3fc68a28
 80052e8:	509f79fb 	.word	0x509f79fb
 80052ec:	3fd34413 	.word	0x3fd34413
 80052f0:	080078cc 	.word	0x080078cc
 80052f4:	0800798e 	.word	0x0800798e
 80052f8:	7ff00000 	.word	0x7ff00000
 80052fc:	0800798a 	.word	0x0800798a
 8005300:	080078a9 	.word	0x080078a9
 8005304:	080078a8 	.word	0x080078a8
 8005308:	3ff80000 	.word	0x3ff80000
 800530c:	08007b50 	.word	0x08007b50
 8005310:	080079e6 	.word	0x080079e6
 8005314:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005318:	6018      	str	r0, [r3, #0]
 800531a:	9b08      	ldr	r3, [sp, #32]
 800531c:	2b0e      	cmp	r3, #14
 800531e:	f200 80a1 	bhi.w	8005464 <_dtoa_r+0x44c>
 8005322:	2c00      	cmp	r4, #0
 8005324:	f000 809e 	beq.w	8005464 <_dtoa_r+0x44c>
 8005328:	2f00      	cmp	r7, #0
 800532a:	dd33      	ble.n	8005394 <_dtoa_r+0x37c>
 800532c:	4b9c      	ldr	r3, [pc, #624]	@ (80055a0 <_dtoa_r+0x588>)
 800532e:	f007 020f 	and.w	r2, r7, #15
 8005332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005336:	05f8      	lsls	r0, r7, #23
 8005338:	e9d3 3400 	ldrd	r3, r4, [r3]
 800533c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005340:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005344:	d516      	bpl.n	8005374 <_dtoa_r+0x35c>
 8005346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800534a:	4b96      	ldr	r3, [pc, #600]	@ (80055a4 <_dtoa_r+0x58c>)
 800534c:	2603      	movs	r6, #3
 800534e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005352:	f7fb f9eb 	bl	800072c <__aeabi_ddiv>
 8005356:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800535a:	f004 040f 	and.w	r4, r4, #15
 800535e:	4d91      	ldr	r5, [pc, #580]	@ (80055a4 <_dtoa_r+0x58c>)
 8005360:	b954      	cbnz	r4, 8005378 <_dtoa_r+0x360>
 8005362:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005366:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800536a:	f7fb f9df 	bl	800072c <__aeabi_ddiv>
 800536e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005372:	e028      	b.n	80053c6 <_dtoa_r+0x3ae>
 8005374:	2602      	movs	r6, #2
 8005376:	e7f2      	b.n	800535e <_dtoa_r+0x346>
 8005378:	07e1      	lsls	r1, r4, #31
 800537a:	d508      	bpl.n	800538e <_dtoa_r+0x376>
 800537c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005380:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005384:	f7fb f8a8 	bl	80004d8 <__aeabi_dmul>
 8005388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800538c:	3601      	adds	r6, #1
 800538e:	1064      	asrs	r4, r4, #1
 8005390:	3508      	adds	r5, #8
 8005392:	e7e5      	b.n	8005360 <_dtoa_r+0x348>
 8005394:	f000 80af 	beq.w	80054f6 <_dtoa_r+0x4de>
 8005398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800539c:	427c      	negs	r4, r7
 800539e:	4b80      	ldr	r3, [pc, #512]	@ (80055a0 <_dtoa_r+0x588>)
 80053a0:	f004 020f 	and.w	r2, r4, #15
 80053a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	f7fb f894 	bl	80004d8 <__aeabi_dmul>
 80053b0:	2602      	movs	r6, #2
 80053b2:	2300      	movs	r3, #0
 80053b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053b8:	4d7a      	ldr	r5, [pc, #488]	@ (80055a4 <_dtoa_r+0x58c>)
 80053ba:	1124      	asrs	r4, r4, #4
 80053bc:	2c00      	cmp	r4, #0
 80053be:	f040 808f 	bne.w	80054e0 <_dtoa_r+0x4c8>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1d3      	bne.n	800536e <_dtoa_r+0x356>
 80053c6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80053ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8094 	beq.w	80054fa <_dtoa_r+0x4e2>
 80053d2:	2200      	movs	r2, #0
 80053d4:	4620      	mov	r0, r4
 80053d6:	4629      	mov	r1, r5
 80053d8:	4b73      	ldr	r3, [pc, #460]	@ (80055a8 <_dtoa_r+0x590>)
 80053da:	f7fb faef 	bl	80009bc <__aeabi_dcmplt>
 80053de:	2800      	cmp	r0, #0
 80053e0:	f000 808b 	beq.w	80054fa <_dtoa_r+0x4e2>
 80053e4:	9b08      	ldr	r3, [sp, #32]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8087 	beq.w	80054fa <_dtoa_r+0x4e2>
 80053ec:	f1bb 0f00 	cmp.w	fp, #0
 80053f0:	dd34      	ble.n	800545c <_dtoa_r+0x444>
 80053f2:	4620      	mov	r0, r4
 80053f4:	2200      	movs	r2, #0
 80053f6:	4629      	mov	r1, r5
 80053f8:	4b6c      	ldr	r3, [pc, #432]	@ (80055ac <_dtoa_r+0x594>)
 80053fa:	f7fb f86d 	bl	80004d8 <__aeabi_dmul>
 80053fe:	465c      	mov	r4, fp
 8005400:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005404:	f107 38ff 	add.w	r8, r7, #4294967295
 8005408:	3601      	adds	r6, #1
 800540a:	4630      	mov	r0, r6
 800540c:	f7fa fffa 	bl	8000404 <__aeabi_i2d>
 8005410:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005414:	f7fb f860 	bl	80004d8 <__aeabi_dmul>
 8005418:	2200      	movs	r2, #0
 800541a:	4b65      	ldr	r3, [pc, #404]	@ (80055b0 <_dtoa_r+0x598>)
 800541c:	f7fa fea6 	bl	800016c <__adddf3>
 8005420:	4605      	mov	r5, r0
 8005422:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005426:	2c00      	cmp	r4, #0
 8005428:	d16a      	bne.n	8005500 <_dtoa_r+0x4e8>
 800542a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800542e:	2200      	movs	r2, #0
 8005430:	4b60      	ldr	r3, [pc, #384]	@ (80055b4 <_dtoa_r+0x59c>)
 8005432:	f7fa fe99 	bl	8000168 <__aeabi_dsub>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800543e:	462a      	mov	r2, r5
 8005440:	4633      	mov	r3, r6
 8005442:	f7fb fad9 	bl	80009f8 <__aeabi_dcmpgt>
 8005446:	2800      	cmp	r0, #0
 8005448:	f040 8298 	bne.w	800597c <_dtoa_r+0x964>
 800544c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005450:	462a      	mov	r2, r5
 8005452:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005456:	f7fb fab1 	bl	80009bc <__aeabi_dcmplt>
 800545a:	bb38      	cbnz	r0, 80054ac <_dtoa_r+0x494>
 800545c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005460:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005464:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005466:	2b00      	cmp	r3, #0
 8005468:	f2c0 8157 	blt.w	800571a <_dtoa_r+0x702>
 800546c:	2f0e      	cmp	r7, #14
 800546e:	f300 8154 	bgt.w	800571a <_dtoa_r+0x702>
 8005472:	4b4b      	ldr	r3, [pc, #300]	@ (80055a0 <_dtoa_r+0x588>)
 8005474:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800547c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005480:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005482:	2b00      	cmp	r3, #0
 8005484:	f280 80e5 	bge.w	8005652 <_dtoa_r+0x63a>
 8005488:	9b08      	ldr	r3, [sp, #32]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f300 80e1 	bgt.w	8005652 <_dtoa_r+0x63a>
 8005490:	d10c      	bne.n	80054ac <_dtoa_r+0x494>
 8005492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005496:	2200      	movs	r2, #0
 8005498:	4b46      	ldr	r3, [pc, #280]	@ (80055b4 <_dtoa_r+0x59c>)
 800549a:	f7fb f81d 	bl	80004d8 <__aeabi_dmul>
 800549e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054a2:	f7fb fa9f 	bl	80009e4 <__aeabi_dcmpge>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f000 8266 	beq.w	8005978 <_dtoa_r+0x960>
 80054ac:	2400      	movs	r4, #0
 80054ae:	4625      	mov	r5, r4
 80054b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054b2:	4656      	mov	r6, sl
 80054b4:	ea6f 0803 	mvn.w	r8, r3
 80054b8:	2700      	movs	r7, #0
 80054ba:	4621      	mov	r1, r4
 80054bc:	4648      	mov	r0, r9
 80054be:	f001 f809 	bl	80064d4 <_Bfree>
 80054c2:	2d00      	cmp	r5, #0
 80054c4:	f000 80bd 	beq.w	8005642 <_dtoa_r+0x62a>
 80054c8:	b12f      	cbz	r7, 80054d6 <_dtoa_r+0x4be>
 80054ca:	42af      	cmp	r7, r5
 80054cc:	d003      	beq.n	80054d6 <_dtoa_r+0x4be>
 80054ce:	4639      	mov	r1, r7
 80054d0:	4648      	mov	r0, r9
 80054d2:	f000 ffff 	bl	80064d4 <_Bfree>
 80054d6:	4629      	mov	r1, r5
 80054d8:	4648      	mov	r0, r9
 80054da:	f000 fffb 	bl	80064d4 <_Bfree>
 80054de:	e0b0      	b.n	8005642 <_dtoa_r+0x62a>
 80054e0:	07e2      	lsls	r2, r4, #31
 80054e2:	d505      	bpl.n	80054f0 <_dtoa_r+0x4d8>
 80054e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054e8:	f7fa fff6 	bl	80004d8 <__aeabi_dmul>
 80054ec:	2301      	movs	r3, #1
 80054ee:	3601      	adds	r6, #1
 80054f0:	1064      	asrs	r4, r4, #1
 80054f2:	3508      	adds	r5, #8
 80054f4:	e762      	b.n	80053bc <_dtoa_r+0x3a4>
 80054f6:	2602      	movs	r6, #2
 80054f8:	e765      	b.n	80053c6 <_dtoa_r+0x3ae>
 80054fa:	46b8      	mov	r8, r7
 80054fc:	9c08      	ldr	r4, [sp, #32]
 80054fe:	e784      	b.n	800540a <_dtoa_r+0x3f2>
 8005500:	4b27      	ldr	r3, [pc, #156]	@ (80055a0 <_dtoa_r+0x588>)
 8005502:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005508:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800550c:	4454      	add	r4, sl
 800550e:	2900      	cmp	r1, #0
 8005510:	d054      	beq.n	80055bc <_dtoa_r+0x5a4>
 8005512:	2000      	movs	r0, #0
 8005514:	4928      	ldr	r1, [pc, #160]	@ (80055b8 <_dtoa_r+0x5a0>)
 8005516:	f7fb f909 	bl	800072c <__aeabi_ddiv>
 800551a:	4633      	mov	r3, r6
 800551c:	462a      	mov	r2, r5
 800551e:	f7fa fe23 	bl	8000168 <__aeabi_dsub>
 8005522:	4656      	mov	r6, sl
 8005524:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005528:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800552c:	f7fb fa84 	bl	8000a38 <__aeabi_d2iz>
 8005530:	4605      	mov	r5, r0
 8005532:	f7fa ff67 	bl	8000404 <__aeabi_i2d>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800553e:	f7fa fe13 	bl	8000168 <__aeabi_dsub>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	3530      	adds	r5, #48	@ 0x30
 8005548:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800554c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005550:	f806 5b01 	strb.w	r5, [r6], #1
 8005554:	f7fb fa32 	bl	80009bc <__aeabi_dcmplt>
 8005558:	2800      	cmp	r0, #0
 800555a:	d172      	bne.n	8005642 <_dtoa_r+0x62a>
 800555c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005560:	2000      	movs	r0, #0
 8005562:	4911      	ldr	r1, [pc, #68]	@ (80055a8 <_dtoa_r+0x590>)
 8005564:	f7fa fe00 	bl	8000168 <__aeabi_dsub>
 8005568:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800556c:	f7fb fa26 	bl	80009bc <__aeabi_dcmplt>
 8005570:	2800      	cmp	r0, #0
 8005572:	f040 80b4 	bne.w	80056de <_dtoa_r+0x6c6>
 8005576:	42a6      	cmp	r6, r4
 8005578:	f43f af70 	beq.w	800545c <_dtoa_r+0x444>
 800557c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005580:	2200      	movs	r2, #0
 8005582:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <_dtoa_r+0x594>)
 8005584:	f7fa ffa8 	bl	80004d8 <__aeabi_dmul>
 8005588:	2200      	movs	r2, #0
 800558a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800558e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005592:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <_dtoa_r+0x594>)
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800559c:	e7c4      	b.n	8005528 <_dtoa_r+0x510>
 800559e:	bf00      	nop
 80055a0:	08007b50 	.word	0x08007b50
 80055a4:	08007b28 	.word	0x08007b28
 80055a8:	3ff00000 	.word	0x3ff00000
 80055ac:	40240000 	.word	0x40240000
 80055b0:	401c0000 	.word	0x401c0000
 80055b4:	40140000 	.word	0x40140000
 80055b8:	3fe00000 	.word	0x3fe00000
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	f7fa ff8a 	bl	80004d8 <__aeabi_dmul>
 80055c4:	4656      	mov	r6, sl
 80055c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055ca:	9413      	str	r4, [sp, #76]	@ 0x4c
 80055cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d0:	f7fb fa32 	bl	8000a38 <__aeabi_d2iz>
 80055d4:	4605      	mov	r5, r0
 80055d6:	f7fa ff15 	bl	8000404 <__aeabi_i2d>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055e2:	f7fa fdc1 	bl	8000168 <__aeabi_dsub>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	3530      	adds	r5, #48	@ 0x30
 80055ec:	f806 5b01 	strb.w	r5, [r6], #1
 80055f0:	42a6      	cmp	r6, r4
 80055f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	d124      	bne.n	8005646 <_dtoa_r+0x62e>
 80055fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005600:	4bae      	ldr	r3, [pc, #696]	@ (80058bc <_dtoa_r+0x8a4>)
 8005602:	f7fa fdb3 	bl	800016c <__adddf3>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800560e:	f7fb f9f3 	bl	80009f8 <__aeabi_dcmpgt>
 8005612:	2800      	cmp	r0, #0
 8005614:	d163      	bne.n	80056de <_dtoa_r+0x6c6>
 8005616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800561a:	2000      	movs	r0, #0
 800561c:	49a7      	ldr	r1, [pc, #668]	@ (80058bc <_dtoa_r+0x8a4>)
 800561e:	f7fa fda3 	bl	8000168 <__aeabi_dsub>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800562a:	f7fb f9c7 	bl	80009bc <__aeabi_dcmplt>
 800562e:	2800      	cmp	r0, #0
 8005630:	f43f af14 	beq.w	800545c <_dtoa_r+0x444>
 8005634:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005636:	1e73      	subs	r3, r6, #1
 8005638:	9313      	str	r3, [sp, #76]	@ 0x4c
 800563a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800563e:	2b30      	cmp	r3, #48	@ 0x30
 8005640:	d0f8      	beq.n	8005634 <_dtoa_r+0x61c>
 8005642:	4647      	mov	r7, r8
 8005644:	e03b      	b.n	80056be <_dtoa_r+0x6a6>
 8005646:	4b9e      	ldr	r3, [pc, #632]	@ (80058c0 <_dtoa_r+0x8a8>)
 8005648:	f7fa ff46 	bl	80004d8 <__aeabi_dmul>
 800564c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005650:	e7bc      	b.n	80055cc <_dtoa_r+0x5b4>
 8005652:	4656      	mov	r6, sl
 8005654:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800565c:	4620      	mov	r0, r4
 800565e:	4629      	mov	r1, r5
 8005660:	f7fb f864 	bl	800072c <__aeabi_ddiv>
 8005664:	f7fb f9e8 	bl	8000a38 <__aeabi_d2iz>
 8005668:	4680      	mov	r8, r0
 800566a:	f7fa fecb 	bl	8000404 <__aeabi_i2d>
 800566e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005672:	f7fa ff31 	bl	80004d8 <__aeabi_dmul>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4620      	mov	r0, r4
 800567c:	4629      	mov	r1, r5
 800567e:	f7fa fd73 	bl	8000168 <__aeabi_dsub>
 8005682:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005686:	9d08      	ldr	r5, [sp, #32]
 8005688:	f806 4b01 	strb.w	r4, [r6], #1
 800568c:	eba6 040a 	sub.w	r4, r6, sl
 8005690:	42a5      	cmp	r5, r4
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	d133      	bne.n	8005700 <_dtoa_r+0x6e8>
 8005698:	f7fa fd68 	bl	800016c <__adddf3>
 800569c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056a0:	4604      	mov	r4, r0
 80056a2:	460d      	mov	r5, r1
 80056a4:	f7fb f9a8 	bl	80009f8 <__aeabi_dcmpgt>
 80056a8:	b9c0      	cbnz	r0, 80056dc <_dtoa_r+0x6c4>
 80056aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ae:	4620      	mov	r0, r4
 80056b0:	4629      	mov	r1, r5
 80056b2:	f7fb f979 	bl	80009a8 <__aeabi_dcmpeq>
 80056b6:	b110      	cbz	r0, 80056be <_dtoa_r+0x6a6>
 80056b8:	f018 0f01 	tst.w	r8, #1
 80056bc:	d10e      	bne.n	80056dc <_dtoa_r+0x6c4>
 80056be:	4648      	mov	r0, r9
 80056c0:	9903      	ldr	r1, [sp, #12]
 80056c2:	f000 ff07 	bl	80064d4 <_Bfree>
 80056c6:	2300      	movs	r3, #0
 80056c8:	7033      	strb	r3, [r6, #0]
 80056ca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80056cc:	3701      	adds	r7, #1
 80056ce:	601f      	str	r7, [r3, #0]
 80056d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 824b 	beq.w	8005b6e <_dtoa_r+0xb56>
 80056d8:	601e      	str	r6, [r3, #0]
 80056da:	e248      	b.n	8005b6e <_dtoa_r+0xb56>
 80056dc:	46b8      	mov	r8, r7
 80056de:	4633      	mov	r3, r6
 80056e0:	461e      	mov	r6, r3
 80056e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056e6:	2a39      	cmp	r2, #57	@ 0x39
 80056e8:	d106      	bne.n	80056f8 <_dtoa_r+0x6e0>
 80056ea:	459a      	cmp	sl, r3
 80056ec:	d1f8      	bne.n	80056e0 <_dtoa_r+0x6c8>
 80056ee:	2230      	movs	r2, #48	@ 0x30
 80056f0:	f108 0801 	add.w	r8, r8, #1
 80056f4:	f88a 2000 	strb.w	r2, [sl]
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	3201      	adds	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e7a0      	b.n	8005642 <_dtoa_r+0x62a>
 8005700:	2200      	movs	r2, #0
 8005702:	4b6f      	ldr	r3, [pc, #444]	@ (80058c0 <_dtoa_r+0x8a8>)
 8005704:	f7fa fee8 	bl	80004d8 <__aeabi_dmul>
 8005708:	2200      	movs	r2, #0
 800570a:	2300      	movs	r3, #0
 800570c:	4604      	mov	r4, r0
 800570e:	460d      	mov	r5, r1
 8005710:	f7fb f94a 	bl	80009a8 <__aeabi_dcmpeq>
 8005714:	2800      	cmp	r0, #0
 8005716:	d09f      	beq.n	8005658 <_dtoa_r+0x640>
 8005718:	e7d1      	b.n	80056be <_dtoa_r+0x6a6>
 800571a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800571c:	2a00      	cmp	r2, #0
 800571e:	f000 80ea 	beq.w	80058f6 <_dtoa_r+0x8de>
 8005722:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005724:	2a01      	cmp	r2, #1
 8005726:	f300 80cd 	bgt.w	80058c4 <_dtoa_r+0x8ac>
 800572a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800572c:	2a00      	cmp	r2, #0
 800572e:	f000 80c1 	beq.w	80058b4 <_dtoa_r+0x89c>
 8005732:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005736:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005738:	9e04      	ldr	r6, [sp, #16]
 800573a:	9a04      	ldr	r2, [sp, #16]
 800573c:	2101      	movs	r1, #1
 800573e:	441a      	add	r2, r3
 8005740:	9204      	str	r2, [sp, #16]
 8005742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005744:	4648      	mov	r0, r9
 8005746:	441a      	add	r2, r3
 8005748:	9209      	str	r2, [sp, #36]	@ 0x24
 800574a:	f000 ffc1 	bl	80066d0 <__i2b>
 800574e:	4605      	mov	r5, r0
 8005750:	b166      	cbz	r6, 800576c <_dtoa_r+0x754>
 8005752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	dd09      	ble.n	800576c <_dtoa_r+0x754>
 8005758:	42b3      	cmp	r3, r6
 800575a:	bfa8      	it	ge
 800575c:	4633      	movge	r3, r6
 800575e:	9a04      	ldr	r2, [sp, #16]
 8005760:	1af6      	subs	r6, r6, r3
 8005762:	1ad2      	subs	r2, r2, r3
 8005764:	9204      	str	r2, [sp, #16]
 8005766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	9309      	str	r3, [sp, #36]	@ 0x24
 800576c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800576e:	b30b      	cbz	r3, 80057b4 <_dtoa_r+0x79c>
 8005770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80c6 	beq.w	8005904 <_dtoa_r+0x8ec>
 8005778:	2c00      	cmp	r4, #0
 800577a:	f000 80c0 	beq.w	80058fe <_dtoa_r+0x8e6>
 800577e:	4629      	mov	r1, r5
 8005780:	4622      	mov	r2, r4
 8005782:	4648      	mov	r0, r9
 8005784:	f001 f85c 	bl	8006840 <__pow5mult>
 8005788:	9a03      	ldr	r2, [sp, #12]
 800578a:	4601      	mov	r1, r0
 800578c:	4605      	mov	r5, r0
 800578e:	4648      	mov	r0, r9
 8005790:	f000 ffb4 	bl	80066fc <__multiply>
 8005794:	9903      	ldr	r1, [sp, #12]
 8005796:	4680      	mov	r8, r0
 8005798:	4648      	mov	r0, r9
 800579a:	f000 fe9b 	bl	80064d4 <_Bfree>
 800579e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057a0:	1b1b      	subs	r3, r3, r4
 80057a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80057a4:	f000 80b1 	beq.w	800590a <_dtoa_r+0x8f2>
 80057a8:	4641      	mov	r1, r8
 80057aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057ac:	4648      	mov	r0, r9
 80057ae:	f001 f847 	bl	8006840 <__pow5mult>
 80057b2:	9003      	str	r0, [sp, #12]
 80057b4:	2101      	movs	r1, #1
 80057b6:	4648      	mov	r0, r9
 80057b8:	f000 ff8a 	bl	80066d0 <__i2b>
 80057bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057be:	4604      	mov	r4, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 81d8 	beq.w	8005b76 <_dtoa_r+0xb5e>
 80057c6:	461a      	mov	r2, r3
 80057c8:	4601      	mov	r1, r0
 80057ca:	4648      	mov	r0, r9
 80057cc:	f001 f838 	bl	8006840 <__pow5mult>
 80057d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057d2:	4604      	mov	r4, r0
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	f300 809f 	bgt.w	8005918 <_dtoa_r+0x900>
 80057da:	9b06      	ldr	r3, [sp, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 8097 	bne.w	8005910 <_dtoa_r+0x8f8>
 80057e2:	9b07      	ldr	r3, [sp, #28]
 80057e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f040 8093 	bne.w	8005914 <_dtoa_r+0x8fc>
 80057ee:	9b07      	ldr	r3, [sp, #28]
 80057f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057f4:	0d1b      	lsrs	r3, r3, #20
 80057f6:	051b      	lsls	r3, r3, #20
 80057f8:	b133      	cbz	r3, 8005808 <_dtoa_r+0x7f0>
 80057fa:	9b04      	ldr	r3, [sp, #16]
 80057fc:	3301      	adds	r3, #1
 80057fe:	9304      	str	r3, [sp, #16]
 8005800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005802:	3301      	adds	r3, #1
 8005804:	9309      	str	r3, [sp, #36]	@ 0x24
 8005806:	2301      	movs	r3, #1
 8005808:	930a      	str	r3, [sp, #40]	@ 0x28
 800580a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 81b8 	beq.w	8005b82 <_dtoa_r+0xb6a>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005818:	6918      	ldr	r0, [r3, #16]
 800581a:	f000 ff0d 	bl	8006638 <__hi0bits>
 800581e:	f1c0 0020 	rsb	r0, r0, #32
 8005822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005824:	4418      	add	r0, r3
 8005826:	f010 001f 	ands.w	r0, r0, #31
 800582a:	f000 8082 	beq.w	8005932 <_dtoa_r+0x91a>
 800582e:	f1c0 0320 	rsb	r3, r0, #32
 8005832:	2b04      	cmp	r3, #4
 8005834:	dd73      	ble.n	800591e <_dtoa_r+0x906>
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	f1c0 001c 	rsb	r0, r0, #28
 800583c:	4403      	add	r3, r0
 800583e:	9304      	str	r3, [sp, #16]
 8005840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005842:	4406      	add	r6, r0
 8005844:	4403      	add	r3, r0
 8005846:	9309      	str	r3, [sp, #36]	@ 0x24
 8005848:	9b04      	ldr	r3, [sp, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	dd05      	ble.n	800585a <_dtoa_r+0x842>
 800584e:	461a      	mov	r2, r3
 8005850:	4648      	mov	r0, r9
 8005852:	9903      	ldr	r1, [sp, #12]
 8005854:	f001 f84e 	bl	80068f4 <__lshift>
 8005858:	9003      	str	r0, [sp, #12]
 800585a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd05      	ble.n	800586c <_dtoa_r+0x854>
 8005860:	4621      	mov	r1, r4
 8005862:	461a      	mov	r2, r3
 8005864:	4648      	mov	r0, r9
 8005866:	f001 f845 	bl	80068f4 <__lshift>
 800586a:	4604      	mov	r4, r0
 800586c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d061      	beq.n	8005936 <_dtoa_r+0x91e>
 8005872:	4621      	mov	r1, r4
 8005874:	9803      	ldr	r0, [sp, #12]
 8005876:	f001 f8a9 	bl	80069cc <__mcmp>
 800587a:	2800      	cmp	r0, #0
 800587c:	da5b      	bge.n	8005936 <_dtoa_r+0x91e>
 800587e:	2300      	movs	r3, #0
 8005880:	220a      	movs	r2, #10
 8005882:	4648      	mov	r0, r9
 8005884:	9903      	ldr	r1, [sp, #12]
 8005886:	f000 fe47 	bl	8006518 <__multadd>
 800588a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800588c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005890:	9003      	str	r0, [sp, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8177 	beq.w	8005b86 <_dtoa_r+0xb6e>
 8005898:	4629      	mov	r1, r5
 800589a:	2300      	movs	r3, #0
 800589c:	220a      	movs	r2, #10
 800589e:	4648      	mov	r0, r9
 80058a0:	f000 fe3a 	bl	8006518 <__multadd>
 80058a4:	f1bb 0f00 	cmp.w	fp, #0
 80058a8:	4605      	mov	r5, r0
 80058aa:	dc6f      	bgt.n	800598c <_dtoa_r+0x974>
 80058ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	dc49      	bgt.n	8005946 <_dtoa_r+0x92e>
 80058b2:	e06b      	b.n	800598c <_dtoa_r+0x974>
 80058b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80058b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80058ba:	e73c      	b.n	8005736 <_dtoa_r+0x71e>
 80058bc:	3fe00000 	.word	0x3fe00000
 80058c0:	40240000 	.word	0x40240000
 80058c4:	9b08      	ldr	r3, [sp, #32]
 80058c6:	1e5c      	subs	r4, r3, #1
 80058c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058ca:	42a3      	cmp	r3, r4
 80058cc:	db09      	blt.n	80058e2 <_dtoa_r+0x8ca>
 80058ce:	1b1c      	subs	r4, r3, r4
 80058d0:	9b08      	ldr	r3, [sp, #32]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f6bf af30 	bge.w	8005738 <_dtoa_r+0x720>
 80058d8:	9b04      	ldr	r3, [sp, #16]
 80058da:	9a08      	ldr	r2, [sp, #32]
 80058dc:	1a9e      	subs	r6, r3, r2
 80058de:	2300      	movs	r3, #0
 80058e0:	e72b      	b.n	800573a <_dtoa_r+0x722>
 80058e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058e6:	1ae3      	subs	r3, r4, r3
 80058e8:	441a      	add	r2, r3
 80058ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80058ec:	9e04      	ldr	r6, [sp, #16]
 80058ee:	2400      	movs	r4, #0
 80058f0:	9b08      	ldr	r3, [sp, #32]
 80058f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80058f4:	e721      	b.n	800573a <_dtoa_r+0x722>
 80058f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058f8:	9e04      	ldr	r6, [sp, #16]
 80058fa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80058fc:	e728      	b.n	8005750 <_dtoa_r+0x738>
 80058fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005902:	e751      	b.n	80057a8 <_dtoa_r+0x790>
 8005904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005906:	9903      	ldr	r1, [sp, #12]
 8005908:	e750      	b.n	80057ac <_dtoa_r+0x794>
 800590a:	f8cd 800c 	str.w	r8, [sp, #12]
 800590e:	e751      	b.n	80057b4 <_dtoa_r+0x79c>
 8005910:	2300      	movs	r3, #0
 8005912:	e779      	b.n	8005808 <_dtoa_r+0x7f0>
 8005914:	9b06      	ldr	r3, [sp, #24]
 8005916:	e777      	b.n	8005808 <_dtoa_r+0x7f0>
 8005918:	2300      	movs	r3, #0
 800591a:	930a      	str	r3, [sp, #40]	@ 0x28
 800591c:	e779      	b.n	8005812 <_dtoa_r+0x7fa>
 800591e:	d093      	beq.n	8005848 <_dtoa_r+0x830>
 8005920:	9a04      	ldr	r2, [sp, #16]
 8005922:	331c      	adds	r3, #28
 8005924:	441a      	add	r2, r3
 8005926:	9204      	str	r2, [sp, #16]
 8005928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800592a:	441e      	add	r6, r3
 800592c:	441a      	add	r2, r3
 800592e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005930:	e78a      	b.n	8005848 <_dtoa_r+0x830>
 8005932:	4603      	mov	r3, r0
 8005934:	e7f4      	b.n	8005920 <_dtoa_r+0x908>
 8005936:	9b08      	ldr	r3, [sp, #32]
 8005938:	46b8      	mov	r8, r7
 800593a:	2b00      	cmp	r3, #0
 800593c:	dc20      	bgt.n	8005980 <_dtoa_r+0x968>
 800593e:	469b      	mov	fp, r3
 8005940:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005942:	2b02      	cmp	r3, #2
 8005944:	dd1e      	ble.n	8005984 <_dtoa_r+0x96c>
 8005946:	f1bb 0f00 	cmp.w	fp, #0
 800594a:	f47f adb1 	bne.w	80054b0 <_dtoa_r+0x498>
 800594e:	4621      	mov	r1, r4
 8005950:	465b      	mov	r3, fp
 8005952:	2205      	movs	r2, #5
 8005954:	4648      	mov	r0, r9
 8005956:	f000 fddf 	bl	8006518 <__multadd>
 800595a:	4601      	mov	r1, r0
 800595c:	4604      	mov	r4, r0
 800595e:	9803      	ldr	r0, [sp, #12]
 8005960:	f001 f834 	bl	80069cc <__mcmp>
 8005964:	2800      	cmp	r0, #0
 8005966:	f77f ada3 	ble.w	80054b0 <_dtoa_r+0x498>
 800596a:	4656      	mov	r6, sl
 800596c:	2331      	movs	r3, #49	@ 0x31
 800596e:	f108 0801 	add.w	r8, r8, #1
 8005972:	f806 3b01 	strb.w	r3, [r6], #1
 8005976:	e59f      	b.n	80054b8 <_dtoa_r+0x4a0>
 8005978:	46b8      	mov	r8, r7
 800597a:	9c08      	ldr	r4, [sp, #32]
 800597c:	4625      	mov	r5, r4
 800597e:	e7f4      	b.n	800596a <_dtoa_r+0x952>
 8005980:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8101 	beq.w	8005b8e <_dtoa_r+0xb76>
 800598c:	2e00      	cmp	r6, #0
 800598e:	dd05      	ble.n	800599c <_dtoa_r+0x984>
 8005990:	4629      	mov	r1, r5
 8005992:	4632      	mov	r2, r6
 8005994:	4648      	mov	r0, r9
 8005996:	f000 ffad 	bl	80068f4 <__lshift>
 800599a:	4605      	mov	r5, r0
 800599c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d05c      	beq.n	8005a5c <_dtoa_r+0xa44>
 80059a2:	4648      	mov	r0, r9
 80059a4:	6869      	ldr	r1, [r5, #4]
 80059a6:	f000 fd55 	bl	8006454 <_Balloc>
 80059aa:	4606      	mov	r6, r0
 80059ac:	b928      	cbnz	r0, 80059ba <_dtoa_r+0x9a2>
 80059ae:	4602      	mov	r2, r0
 80059b0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80059b4:	4b80      	ldr	r3, [pc, #512]	@ (8005bb8 <_dtoa_r+0xba0>)
 80059b6:	f7ff bb43 	b.w	8005040 <_dtoa_r+0x28>
 80059ba:	692a      	ldr	r2, [r5, #16]
 80059bc:	f105 010c 	add.w	r1, r5, #12
 80059c0:	3202      	adds	r2, #2
 80059c2:	0092      	lsls	r2, r2, #2
 80059c4:	300c      	adds	r0, #12
 80059c6:	f7ff fa6c 	bl	8004ea2 <memcpy>
 80059ca:	2201      	movs	r2, #1
 80059cc:	4631      	mov	r1, r6
 80059ce:	4648      	mov	r0, r9
 80059d0:	f000 ff90 	bl	80068f4 <__lshift>
 80059d4:	462f      	mov	r7, r5
 80059d6:	4605      	mov	r5, r0
 80059d8:	f10a 0301 	add.w	r3, sl, #1
 80059dc:	9304      	str	r3, [sp, #16]
 80059de:	eb0a 030b 	add.w	r3, sl, fp
 80059e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80059e4:	9b06      	ldr	r3, [sp, #24]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ec:	9b04      	ldr	r3, [sp, #16]
 80059ee:	4621      	mov	r1, r4
 80059f0:	9803      	ldr	r0, [sp, #12]
 80059f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80059f6:	f7ff fa87 	bl	8004f08 <quorem>
 80059fa:	4603      	mov	r3, r0
 80059fc:	4639      	mov	r1, r7
 80059fe:	3330      	adds	r3, #48	@ 0x30
 8005a00:	9006      	str	r0, [sp, #24]
 8005a02:	9803      	ldr	r0, [sp, #12]
 8005a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a06:	f000 ffe1 	bl	80069cc <__mcmp>
 8005a0a:	462a      	mov	r2, r5
 8005a0c:	9008      	str	r0, [sp, #32]
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4648      	mov	r0, r9
 8005a12:	f000 fff7 	bl	8006a04 <__mdiff>
 8005a16:	68c2      	ldr	r2, [r0, #12]
 8005a18:	4606      	mov	r6, r0
 8005a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a1c:	bb02      	cbnz	r2, 8005a60 <_dtoa_r+0xa48>
 8005a1e:	4601      	mov	r1, r0
 8005a20:	9803      	ldr	r0, [sp, #12]
 8005a22:	f000 ffd3 	bl	80069cc <__mcmp>
 8005a26:	4602      	mov	r2, r0
 8005a28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4648      	mov	r0, r9
 8005a2e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005a32:	f000 fd4f 	bl	80064d4 <_Bfree>
 8005a36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a3a:	9e04      	ldr	r6, [sp, #16]
 8005a3c:	ea42 0103 	orr.w	r1, r2, r3
 8005a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a42:	4319      	orrs	r1, r3
 8005a44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a46:	d10d      	bne.n	8005a64 <_dtoa_r+0xa4c>
 8005a48:	2b39      	cmp	r3, #57	@ 0x39
 8005a4a:	d027      	beq.n	8005a9c <_dtoa_r+0xa84>
 8005a4c:	9a08      	ldr	r2, [sp, #32]
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	dd01      	ble.n	8005a56 <_dtoa_r+0xa3e>
 8005a52:	9b06      	ldr	r3, [sp, #24]
 8005a54:	3331      	adds	r3, #49	@ 0x31
 8005a56:	f88b 3000 	strb.w	r3, [fp]
 8005a5a:	e52e      	b.n	80054ba <_dtoa_r+0x4a2>
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	e7b9      	b.n	80059d4 <_dtoa_r+0x9bc>
 8005a60:	2201      	movs	r2, #1
 8005a62:	e7e2      	b.n	8005a2a <_dtoa_r+0xa12>
 8005a64:	9908      	ldr	r1, [sp, #32]
 8005a66:	2900      	cmp	r1, #0
 8005a68:	db04      	blt.n	8005a74 <_dtoa_r+0xa5c>
 8005a6a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005a6c:	4301      	orrs	r1, r0
 8005a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a70:	4301      	orrs	r1, r0
 8005a72:	d120      	bne.n	8005ab6 <_dtoa_r+0xa9e>
 8005a74:	2a00      	cmp	r2, #0
 8005a76:	ddee      	ble.n	8005a56 <_dtoa_r+0xa3e>
 8005a78:	2201      	movs	r2, #1
 8005a7a:	9903      	ldr	r1, [sp, #12]
 8005a7c:	4648      	mov	r0, r9
 8005a7e:	9304      	str	r3, [sp, #16]
 8005a80:	f000 ff38 	bl	80068f4 <__lshift>
 8005a84:	4621      	mov	r1, r4
 8005a86:	9003      	str	r0, [sp, #12]
 8005a88:	f000 ffa0 	bl	80069cc <__mcmp>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	9b04      	ldr	r3, [sp, #16]
 8005a90:	dc02      	bgt.n	8005a98 <_dtoa_r+0xa80>
 8005a92:	d1e0      	bne.n	8005a56 <_dtoa_r+0xa3e>
 8005a94:	07da      	lsls	r2, r3, #31
 8005a96:	d5de      	bpl.n	8005a56 <_dtoa_r+0xa3e>
 8005a98:	2b39      	cmp	r3, #57	@ 0x39
 8005a9a:	d1da      	bne.n	8005a52 <_dtoa_r+0xa3a>
 8005a9c:	2339      	movs	r3, #57	@ 0x39
 8005a9e:	f88b 3000 	strb.w	r3, [fp]
 8005aa2:	4633      	mov	r3, r6
 8005aa4:	461e      	mov	r6, r3
 8005aa6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	2a39      	cmp	r2, #57	@ 0x39
 8005aae:	d04e      	beq.n	8005b4e <_dtoa_r+0xb36>
 8005ab0:	3201      	adds	r2, #1
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e501      	b.n	80054ba <_dtoa_r+0x4a2>
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	dd03      	ble.n	8005ac2 <_dtoa_r+0xaaa>
 8005aba:	2b39      	cmp	r3, #57	@ 0x39
 8005abc:	d0ee      	beq.n	8005a9c <_dtoa_r+0xa84>
 8005abe:	3301      	adds	r3, #1
 8005ac0:	e7c9      	b.n	8005a56 <_dtoa_r+0xa3e>
 8005ac2:	9a04      	ldr	r2, [sp, #16]
 8005ac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ac6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005aca:	428a      	cmp	r2, r1
 8005acc:	d028      	beq.n	8005b20 <_dtoa_r+0xb08>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	220a      	movs	r2, #10
 8005ad2:	9903      	ldr	r1, [sp, #12]
 8005ad4:	4648      	mov	r0, r9
 8005ad6:	f000 fd1f 	bl	8006518 <__multadd>
 8005ada:	42af      	cmp	r7, r5
 8005adc:	9003      	str	r0, [sp, #12]
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	f04f 020a 	mov.w	r2, #10
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	4648      	mov	r0, r9
 8005aea:	d107      	bne.n	8005afc <_dtoa_r+0xae4>
 8005aec:	f000 fd14 	bl	8006518 <__multadd>
 8005af0:	4607      	mov	r7, r0
 8005af2:	4605      	mov	r5, r0
 8005af4:	9b04      	ldr	r3, [sp, #16]
 8005af6:	3301      	adds	r3, #1
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	e777      	b.n	80059ec <_dtoa_r+0x9d4>
 8005afc:	f000 fd0c 	bl	8006518 <__multadd>
 8005b00:	4629      	mov	r1, r5
 8005b02:	4607      	mov	r7, r0
 8005b04:	2300      	movs	r3, #0
 8005b06:	220a      	movs	r2, #10
 8005b08:	4648      	mov	r0, r9
 8005b0a:	f000 fd05 	bl	8006518 <__multadd>
 8005b0e:	4605      	mov	r5, r0
 8005b10:	e7f0      	b.n	8005af4 <_dtoa_r+0xadc>
 8005b12:	f1bb 0f00 	cmp.w	fp, #0
 8005b16:	bfcc      	ite	gt
 8005b18:	465e      	movgt	r6, fp
 8005b1a:	2601      	movle	r6, #1
 8005b1c:	2700      	movs	r7, #0
 8005b1e:	4456      	add	r6, sl
 8005b20:	2201      	movs	r2, #1
 8005b22:	9903      	ldr	r1, [sp, #12]
 8005b24:	4648      	mov	r0, r9
 8005b26:	9304      	str	r3, [sp, #16]
 8005b28:	f000 fee4 	bl	80068f4 <__lshift>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	9003      	str	r0, [sp, #12]
 8005b30:	f000 ff4c 	bl	80069cc <__mcmp>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	dcb4      	bgt.n	8005aa2 <_dtoa_r+0xa8a>
 8005b38:	d102      	bne.n	8005b40 <_dtoa_r+0xb28>
 8005b3a:	9b04      	ldr	r3, [sp, #16]
 8005b3c:	07db      	lsls	r3, r3, #31
 8005b3e:	d4b0      	bmi.n	8005aa2 <_dtoa_r+0xa8a>
 8005b40:	4633      	mov	r3, r6
 8005b42:	461e      	mov	r6, r3
 8005b44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b48:	2a30      	cmp	r2, #48	@ 0x30
 8005b4a:	d0fa      	beq.n	8005b42 <_dtoa_r+0xb2a>
 8005b4c:	e4b5      	b.n	80054ba <_dtoa_r+0x4a2>
 8005b4e:	459a      	cmp	sl, r3
 8005b50:	d1a8      	bne.n	8005aa4 <_dtoa_r+0xa8c>
 8005b52:	2331      	movs	r3, #49	@ 0x31
 8005b54:	f108 0801 	add.w	r8, r8, #1
 8005b58:	f88a 3000 	strb.w	r3, [sl]
 8005b5c:	e4ad      	b.n	80054ba <_dtoa_r+0x4a2>
 8005b5e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005bbc <_dtoa_r+0xba4>
 8005b64:	b11b      	cbz	r3, 8005b6e <_dtoa_r+0xb56>
 8005b66:	f10a 0308 	add.w	r3, sl, #8
 8005b6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4650      	mov	r0, sl
 8005b70:	b017      	add	sp, #92	@ 0x5c
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	f77f ae2e 	ble.w	80057da <_dtoa_r+0x7c2>
 8005b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b80:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b82:	2001      	movs	r0, #1
 8005b84:	e64d      	b.n	8005822 <_dtoa_r+0x80a>
 8005b86:	f1bb 0f00 	cmp.w	fp, #0
 8005b8a:	f77f aed9 	ble.w	8005940 <_dtoa_r+0x928>
 8005b8e:	4656      	mov	r6, sl
 8005b90:	4621      	mov	r1, r4
 8005b92:	9803      	ldr	r0, [sp, #12]
 8005b94:	f7ff f9b8 	bl	8004f08 <quorem>
 8005b98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005b9c:	f806 3b01 	strb.w	r3, [r6], #1
 8005ba0:	eba6 020a 	sub.w	r2, r6, sl
 8005ba4:	4593      	cmp	fp, r2
 8005ba6:	ddb4      	ble.n	8005b12 <_dtoa_r+0xafa>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	220a      	movs	r2, #10
 8005bac:	4648      	mov	r0, r9
 8005bae:	9903      	ldr	r1, [sp, #12]
 8005bb0:	f000 fcb2 	bl	8006518 <__multadd>
 8005bb4:	9003      	str	r0, [sp, #12]
 8005bb6:	e7eb      	b.n	8005b90 <_dtoa_r+0xb78>
 8005bb8:	080079e6 	.word	0x080079e6
 8005bbc:	08007981 	.word	0x08007981

08005bc0 <_free_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	d040      	beq.n	8005c4a <_free_r+0x8a>
 8005bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bcc:	1f0c      	subs	r4, r1, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfb8      	it	lt
 8005bd2:	18e4      	addlt	r4, r4, r3
 8005bd4:	f000 fc32 	bl	800643c <__malloc_lock>
 8005bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c4c <_free_r+0x8c>)
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	b933      	cbnz	r3, 8005bec <_free_r+0x2c>
 8005bde:	6063      	str	r3, [r4, #4]
 8005be0:	6014      	str	r4, [r2, #0]
 8005be2:	4628      	mov	r0, r5
 8005be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005be8:	f000 bc2e 	b.w	8006448 <__malloc_unlock>
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d908      	bls.n	8005c02 <_free_r+0x42>
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	1821      	adds	r1, r4, r0
 8005bf4:	428b      	cmp	r3, r1
 8005bf6:	bf01      	itttt	eq
 8005bf8:	6819      	ldreq	r1, [r3, #0]
 8005bfa:	685b      	ldreq	r3, [r3, #4]
 8005bfc:	1809      	addeq	r1, r1, r0
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	e7ed      	b.n	8005bde <_free_r+0x1e>
 8005c02:	461a      	mov	r2, r3
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	b10b      	cbz	r3, 8005c0c <_free_r+0x4c>
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d9fa      	bls.n	8005c02 <_free_r+0x42>
 8005c0c:	6811      	ldr	r1, [r2, #0]
 8005c0e:	1850      	adds	r0, r2, r1
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d10b      	bne.n	8005c2c <_free_r+0x6c>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	4401      	add	r1, r0
 8005c18:	1850      	adds	r0, r2, r1
 8005c1a:	4283      	cmp	r3, r0
 8005c1c:	6011      	str	r1, [r2, #0]
 8005c1e:	d1e0      	bne.n	8005be2 <_free_r+0x22>
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4408      	add	r0, r1
 8005c26:	6010      	str	r0, [r2, #0]
 8005c28:	6053      	str	r3, [r2, #4]
 8005c2a:	e7da      	b.n	8005be2 <_free_r+0x22>
 8005c2c:	d902      	bls.n	8005c34 <_free_r+0x74>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	602b      	str	r3, [r5, #0]
 8005c32:	e7d6      	b.n	8005be2 <_free_r+0x22>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	1821      	adds	r1, r4, r0
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	bf01      	itttt	eq
 8005c3c:	6819      	ldreq	r1, [r3, #0]
 8005c3e:	685b      	ldreq	r3, [r3, #4]
 8005c40:	1809      	addeq	r1, r1, r0
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	6063      	str	r3, [r4, #4]
 8005c46:	6054      	str	r4, [r2, #4]
 8005c48:	e7cb      	b.n	8005be2 <_free_r+0x22>
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	20000454 	.word	0x20000454

08005c50 <rshift>:
 8005c50:	6903      	ldr	r3, [r0, #16]
 8005c52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005c5a:	f100 0414 	add.w	r4, r0, #20
 8005c5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005c62:	dd46      	ble.n	8005cf2 <rshift+0xa2>
 8005c64:	f011 011f 	ands.w	r1, r1, #31
 8005c68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005c6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005c70:	d10c      	bne.n	8005c8c <rshift+0x3c>
 8005c72:	4629      	mov	r1, r5
 8005c74:	f100 0710 	add.w	r7, r0, #16
 8005c78:	42b1      	cmp	r1, r6
 8005c7a:	d335      	bcc.n	8005ce8 <rshift+0x98>
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	1eea      	subs	r2, r5, #3
 8005c82:	4296      	cmp	r6, r2
 8005c84:	bf38      	it	cc
 8005c86:	2300      	movcc	r3, #0
 8005c88:	4423      	add	r3, r4
 8005c8a:	e015      	b.n	8005cb8 <rshift+0x68>
 8005c8c:	46a1      	mov	r9, r4
 8005c8e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005c92:	f1c1 0820 	rsb	r8, r1, #32
 8005c96:	40cf      	lsrs	r7, r1
 8005c98:	f105 0e04 	add.w	lr, r5, #4
 8005c9c:	4576      	cmp	r6, lr
 8005c9e:	46f4      	mov	ip, lr
 8005ca0:	d816      	bhi.n	8005cd0 <rshift+0x80>
 8005ca2:	1a9a      	subs	r2, r3, r2
 8005ca4:	0092      	lsls	r2, r2, #2
 8005ca6:	3a04      	subs	r2, #4
 8005ca8:	3501      	adds	r5, #1
 8005caa:	42ae      	cmp	r6, r5
 8005cac:	bf38      	it	cc
 8005cae:	2200      	movcc	r2, #0
 8005cb0:	18a3      	adds	r3, r4, r2
 8005cb2:	50a7      	str	r7, [r4, r2]
 8005cb4:	b107      	cbz	r7, 8005cb8 <rshift+0x68>
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	eba3 0204 	sub.w	r2, r3, r4
 8005cbe:	bf08      	it	eq
 8005cc0:	2300      	moveq	r3, #0
 8005cc2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005cc6:	6102      	str	r2, [r0, #16]
 8005cc8:	bf08      	it	eq
 8005cca:	6143      	streq	r3, [r0, #20]
 8005ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cd0:	f8dc c000 	ldr.w	ip, [ip]
 8005cd4:	fa0c fc08 	lsl.w	ip, ip, r8
 8005cd8:	ea4c 0707 	orr.w	r7, ip, r7
 8005cdc:	f849 7b04 	str.w	r7, [r9], #4
 8005ce0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ce4:	40cf      	lsrs	r7, r1
 8005ce6:	e7d9      	b.n	8005c9c <rshift+0x4c>
 8005ce8:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cec:	f847 cf04 	str.w	ip, [r7, #4]!
 8005cf0:	e7c2      	b.n	8005c78 <rshift+0x28>
 8005cf2:	4623      	mov	r3, r4
 8005cf4:	e7e0      	b.n	8005cb8 <rshift+0x68>

08005cf6 <__hexdig_fun>:
 8005cf6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8005cfa:	2b09      	cmp	r3, #9
 8005cfc:	d802      	bhi.n	8005d04 <__hexdig_fun+0xe>
 8005cfe:	3820      	subs	r0, #32
 8005d00:	b2c0      	uxtb	r0, r0
 8005d02:	4770      	bx	lr
 8005d04:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	d801      	bhi.n	8005d10 <__hexdig_fun+0x1a>
 8005d0c:	3847      	subs	r0, #71	@ 0x47
 8005d0e:	e7f7      	b.n	8005d00 <__hexdig_fun+0xa>
 8005d10:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005d14:	2b05      	cmp	r3, #5
 8005d16:	d801      	bhi.n	8005d1c <__hexdig_fun+0x26>
 8005d18:	3827      	subs	r0, #39	@ 0x27
 8005d1a:	e7f1      	b.n	8005d00 <__hexdig_fun+0xa>
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	4770      	bx	lr

08005d20 <__gethex>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	468a      	mov	sl, r1
 8005d26:	4690      	mov	r8, r2
 8005d28:	b085      	sub	sp, #20
 8005d2a:	9302      	str	r3, [sp, #8]
 8005d2c:	680b      	ldr	r3, [r1, #0]
 8005d2e:	9001      	str	r0, [sp, #4]
 8005d30:	1c9c      	adds	r4, r3, #2
 8005d32:	46a1      	mov	r9, r4
 8005d34:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005d38:	2830      	cmp	r0, #48	@ 0x30
 8005d3a:	d0fa      	beq.n	8005d32 <__gethex+0x12>
 8005d3c:	eba9 0303 	sub.w	r3, r9, r3
 8005d40:	f1a3 0b02 	sub.w	fp, r3, #2
 8005d44:	f7ff ffd7 	bl	8005cf6 <__hexdig_fun>
 8005d48:	4605      	mov	r5, r0
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d168      	bne.n	8005e20 <__gethex+0x100>
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4648      	mov	r0, r9
 8005d52:	499f      	ldr	r1, [pc, #636]	@ (8005fd0 <__gethex+0x2b0>)
 8005d54:	f7fe ffa9 	bl	8004caa <strncmp>
 8005d58:	4607      	mov	r7, r0
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d167      	bne.n	8005e2e <__gethex+0x10e>
 8005d5e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005d62:	4626      	mov	r6, r4
 8005d64:	f7ff ffc7 	bl	8005cf6 <__hexdig_fun>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d062      	beq.n	8005e32 <__gethex+0x112>
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	7818      	ldrb	r0, [r3, #0]
 8005d70:	4699      	mov	r9, r3
 8005d72:	2830      	cmp	r0, #48	@ 0x30
 8005d74:	f103 0301 	add.w	r3, r3, #1
 8005d78:	d0f9      	beq.n	8005d6e <__gethex+0x4e>
 8005d7a:	f7ff ffbc 	bl	8005cf6 <__hexdig_fun>
 8005d7e:	fab0 f580 	clz	r5, r0
 8005d82:	f04f 0b01 	mov.w	fp, #1
 8005d86:	096d      	lsrs	r5, r5, #5
 8005d88:	464a      	mov	r2, r9
 8005d8a:	4616      	mov	r6, r2
 8005d8c:	7830      	ldrb	r0, [r6, #0]
 8005d8e:	3201      	adds	r2, #1
 8005d90:	f7ff ffb1 	bl	8005cf6 <__hexdig_fun>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d1f8      	bne.n	8005d8a <__gethex+0x6a>
 8005d98:	2201      	movs	r2, #1
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	498c      	ldr	r1, [pc, #560]	@ (8005fd0 <__gethex+0x2b0>)
 8005d9e:	f7fe ff84 	bl	8004caa <strncmp>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d13f      	bne.n	8005e26 <__gethex+0x106>
 8005da6:	b944      	cbnz	r4, 8005dba <__gethex+0x9a>
 8005da8:	1c74      	adds	r4, r6, #1
 8005daa:	4622      	mov	r2, r4
 8005dac:	4616      	mov	r6, r2
 8005dae:	7830      	ldrb	r0, [r6, #0]
 8005db0:	3201      	adds	r2, #1
 8005db2:	f7ff ffa0 	bl	8005cf6 <__hexdig_fun>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d1f8      	bne.n	8005dac <__gethex+0x8c>
 8005dba:	1ba4      	subs	r4, r4, r6
 8005dbc:	00a7      	lsls	r7, r4, #2
 8005dbe:	7833      	ldrb	r3, [r6, #0]
 8005dc0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005dc4:	2b50      	cmp	r3, #80	@ 0x50
 8005dc6:	d13e      	bne.n	8005e46 <__gethex+0x126>
 8005dc8:	7873      	ldrb	r3, [r6, #1]
 8005dca:	2b2b      	cmp	r3, #43	@ 0x2b
 8005dcc:	d033      	beq.n	8005e36 <__gethex+0x116>
 8005dce:	2b2d      	cmp	r3, #45	@ 0x2d
 8005dd0:	d034      	beq.n	8005e3c <__gethex+0x11c>
 8005dd2:	2400      	movs	r4, #0
 8005dd4:	1c71      	adds	r1, r6, #1
 8005dd6:	7808      	ldrb	r0, [r1, #0]
 8005dd8:	f7ff ff8d 	bl	8005cf6 <__hexdig_fun>
 8005ddc:	1e43      	subs	r3, r0, #1
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b18      	cmp	r3, #24
 8005de2:	d830      	bhi.n	8005e46 <__gethex+0x126>
 8005de4:	f1a0 0210 	sub.w	r2, r0, #16
 8005de8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005dec:	f7ff ff83 	bl	8005cf6 <__hexdig_fun>
 8005df0:	f100 3cff 	add.w	ip, r0, #4294967295
 8005df4:	fa5f fc8c 	uxtb.w	ip, ip
 8005df8:	f1bc 0f18 	cmp.w	ip, #24
 8005dfc:	f04f 030a 	mov.w	r3, #10
 8005e00:	d91e      	bls.n	8005e40 <__gethex+0x120>
 8005e02:	b104      	cbz	r4, 8005e06 <__gethex+0xe6>
 8005e04:	4252      	negs	r2, r2
 8005e06:	4417      	add	r7, r2
 8005e08:	f8ca 1000 	str.w	r1, [sl]
 8005e0c:	b1ed      	cbz	r5, 8005e4a <__gethex+0x12a>
 8005e0e:	f1bb 0f00 	cmp.w	fp, #0
 8005e12:	bf0c      	ite	eq
 8005e14:	2506      	moveq	r5, #6
 8005e16:	2500      	movne	r5, #0
 8005e18:	4628      	mov	r0, r5
 8005e1a:	b005      	add	sp, #20
 8005e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e20:	2500      	movs	r5, #0
 8005e22:	462c      	mov	r4, r5
 8005e24:	e7b0      	b.n	8005d88 <__gethex+0x68>
 8005e26:	2c00      	cmp	r4, #0
 8005e28:	d1c7      	bne.n	8005dba <__gethex+0x9a>
 8005e2a:	4627      	mov	r7, r4
 8005e2c:	e7c7      	b.n	8005dbe <__gethex+0x9e>
 8005e2e:	464e      	mov	r6, r9
 8005e30:	462f      	mov	r7, r5
 8005e32:	2501      	movs	r5, #1
 8005e34:	e7c3      	b.n	8005dbe <__gethex+0x9e>
 8005e36:	2400      	movs	r4, #0
 8005e38:	1cb1      	adds	r1, r6, #2
 8005e3a:	e7cc      	b.n	8005dd6 <__gethex+0xb6>
 8005e3c:	2401      	movs	r4, #1
 8005e3e:	e7fb      	b.n	8005e38 <__gethex+0x118>
 8005e40:	fb03 0002 	mla	r0, r3, r2, r0
 8005e44:	e7ce      	b.n	8005de4 <__gethex+0xc4>
 8005e46:	4631      	mov	r1, r6
 8005e48:	e7de      	b.n	8005e08 <__gethex+0xe8>
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	eba6 0309 	sub.w	r3, r6, r9
 8005e50:	3b01      	subs	r3, #1
 8005e52:	2b07      	cmp	r3, #7
 8005e54:	dc0a      	bgt.n	8005e6c <__gethex+0x14c>
 8005e56:	9801      	ldr	r0, [sp, #4]
 8005e58:	f000 fafc 	bl	8006454 <_Balloc>
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	b940      	cbnz	r0, 8005e72 <__gethex+0x152>
 8005e60:	4602      	mov	r2, r0
 8005e62:	21e4      	movs	r1, #228	@ 0xe4
 8005e64:	4b5b      	ldr	r3, [pc, #364]	@ (8005fd4 <__gethex+0x2b4>)
 8005e66:	485c      	ldr	r0, [pc, #368]	@ (8005fd8 <__gethex+0x2b8>)
 8005e68:	f7ff f830 	bl	8004ecc <__assert_func>
 8005e6c:	3101      	adds	r1, #1
 8005e6e:	105b      	asrs	r3, r3, #1
 8005e70:	e7ef      	b.n	8005e52 <__gethex+0x132>
 8005e72:	2300      	movs	r3, #0
 8005e74:	f100 0a14 	add.w	sl, r0, #20
 8005e78:	4655      	mov	r5, sl
 8005e7a:	469b      	mov	fp, r3
 8005e7c:	45b1      	cmp	r9, r6
 8005e7e:	d337      	bcc.n	8005ef0 <__gethex+0x1d0>
 8005e80:	f845 bb04 	str.w	fp, [r5], #4
 8005e84:	eba5 050a 	sub.w	r5, r5, sl
 8005e88:	10ad      	asrs	r5, r5, #2
 8005e8a:	6125      	str	r5, [r4, #16]
 8005e8c:	4658      	mov	r0, fp
 8005e8e:	f000 fbd3 	bl	8006638 <__hi0bits>
 8005e92:	016d      	lsls	r5, r5, #5
 8005e94:	f8d8 6000 	ldr.w	r6, [r8]
 8005e98:	1a2d      	subs	r5, r5, r0
 8005e9a:	42b5      	cmp	r5, r6
 8005e9c:	dd54      	ble.n	8005f48 <__gethex+0x228>
 8005e9e:	1bad      	subs	r5, r5, r6
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 ff55 	bl	8006d52 <__any_on>
 8005ea8:	4681      	mov	r9, r0
 8005eaa:	b178      	cbz	r0, 8005ecc <__gethex+0x1ac>
 8005eac:	f04f 0901 	mov.w	r9, #1
 8005eb0:	1e6b      	subs	r3, r5, #1
 8005eb2:	1159      	asrs	r1, r3, #5
 8005eb4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005eb8:	f003 021f 	and.w	r2, r3, #31
 8005ebc:	fa09 f202 	lsl.w	r2, r9, r2
 8005ec0:	420a      	tst	r2, r1
 8005ec2:	d003      	beq.n	8005ecc <__gethex+0x1ac>
 8005ec4:	454b      	cmp	r3, r9
 8005ec6:	dc36      	bgt.n	8005f36 <__gethex+0x216>
 8005ec8:	f04f 0902 	mov.w	r9, #2
 8005ecc:	4629      	mov	r1, r5
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7ff febe 	bl	8005c50 <rshift>
 8005ed4:	442f      	add	r7, r5
 8005ed6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005eda:	42bb      	cmp	r3, r7
 8005edc:	da42      	bge.n	8005f64 <__gethex+0x244>
 8005ede:	4621      	mov	r1, r4
 8005ee0:	9801      	ldr	r0, [sp, #4]
 8005ee2:	f000 faf7 	bl	80064d4 <_Bfree>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005eea:	25a3      	movs	r5, #163	@ 0xa3
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e793      	b.n	8005e18 <__gethex+0xf8>
 8005ef0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005ef4:	2a2e      	cmp	r2, #46	@ 0x2e
 8005ef6:	d012      	beq.n	8005f1e <__gethex+0x1fe>
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d104      	bne.n	8005f06 <__gethex+0x1e6>
 8005efc:	f845 bb04 	str.w	fp, [r5], #4
 8005f00:	f04f 0b00 	mov.w	fp, #0
 8005f04:	465b      	mov	r3, fp
 8005f06:	7830      	ldrb	r0, [r6, #0]
 8005f08:	9303      	str	r3, [sp, #12]
 8005f0a:	f7ff fef4 	bl	8005cf6 <__hexdig_fun>
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	f000 000f 	and.w	r0, r0, #15
 8005f14:	4098      	lsls	r0, r3
 8005f16:	ea4b 0b00 	orr.w	fp, fp, r0
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	e7ae      	b.n	8005e7c <__gethex+0x15c>
 8005f1e:	45b1      	cmp	r9, r6
 8005f20:	d8ea      	bhi.n	8005ef8 <__gethex+0x1d8>
 8005f22:	2201      	movs	r2, #1
 8005f24:	4630      	mov	r0, r6
 8005f26:	492a      	ldr	r1, [pc, #168]	@ (8005fd0 <__gethex+0x2b0>)
 8005f28:	9303      	str	r3, [sp, #12]
 8005f2a:	f7fe febe 	bl	8004caa <strncmp>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d1e1      	bne.n	8005ef8 <__gethex+0x1d8>
 8005f34:	e7a2      	b.n	8005e7c <__gethex+0x15c>
 8005f36:	4620      	mov	r0, r4
 8005f38:	1ea9      	subs	r1, r5, #2
 8005f3a:	f000 ff0a 	bl	8006d52 <__any_on>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d0c2      	beq.n	8005ec8 <__gethex+0x1a8>
 8005f42:	f04f 0903 	mov.w	r9, #3
 8005f46:	e7c1      	b.n	8005ecc <__gethex+0x1ac>
 8005f48:	da09      	bge.n	8005f5e <__gethex+0x23e>
 8005f4a:	1b75      	subs	r5, r6, r5
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	462a      	mov	r2, r5
 8005f50:	9801      	ldr	r0, [sp, #4]
 8005f52:	f000 fccf 	bl	80068f4 <__lshift>
 8005f56:	4604      	mov	r4, r0
 8005f58:	1b7f      	subs	r7, r7, r5
 8005f5a:	f100 0a14 	add.w	sl, r0, #20
 8005f5e:	f04f 0900 	mov.w	r9, #0
 8005f62:	e7b8      	b.n	8005ed6 <__gethex+0x1b6>
 8005f64:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005f68:	42bd      	cmp	r5, r7
 8005f6a:	dd6f      	ble.n	800604c <__gethex+0x32c>
 8005f6c:	1bed      	subs	r5, r5, r7
 8005f6e:	42ae      	cmp	r6, r5
 8005f70:	dc34      	bgt.n	8005fdc <__gethex+0x2bc>
 8005f72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d022      	beq.n	8005fc0 <__gethex+0x2a0>
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d024      	beq.n	8005fc8 <__gethex+0x2a8>
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d115      	bne.n	8005fae <__gethex+0x28e>
 8005f82:	42ae      	cmp	r6, r5
 8005f84:	d113      	bne.n	8005fae <__gethex+0x28e>
 8005f86:	2e01      	cmp	r6, #1
 8005f88:	d10b      	bne.n	8005fa2 <__gethex+0x282>
 8005f8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f8e:	9a02      	ldr	r2, [sp, #8]
 8005f90:	2562      	movs	r5, #98	@ 0x62
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	2301      	movs	r3, #1
 8005f96:	6123      	str	r3, [r4, #16]
 8005f98:	f8ca 3000 	str.w	r3, [sl]
 8005f9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f9e:	601c      	str	r4, [r3, #0]
 8005fa0:	e73a      	b.n	8005e18 <__gethex+0xf8>
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	1e71      	subs	r1, r6, #1
 8005fa6:	f000 fed4 	bl	8006d52 <__any_on>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d1ed      	bne.n	8005f8a <__gethex+0x26a>
 8005fae:	4621      	mov	r1, r4
 8005fb0:	9801      	ldr	r0, [sp, #4]
 8005fb2:	f000 fa8f 	bl	80064d4 <_Bfree>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fba:	2550      	movs	r5, #80	@ 0x50
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	e72b      	b.n	8005e18 <__gethex+0xf8>
 8005fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f3      	bne.n	8005fae <__gethex+0x28e>
 8005fc6:	e7e0      	b.n	8005f8a <__gethex+0x26a>
 8005fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1dd      	bne.n	8005f8a <__gethex+0x26a>
 8005fce:	e7ee      	b.n	8005fae <__gethex+0x28e>
 8005fd0:	08007896 	.word	0x08007896
 8005fd4:	080079e6 	.word	0x080079e6
 8005fd8:	080079f7 	.word	0x080079f7
 8005fdc:	1e6f      	subs	r7, r5, #1
 8005fde:	f1b9 0f00 	cmp.w	r9, #0
 8005fe2:	d130      	bne.n	8006046 <__gethex+0x326>
 8005fe4:	b127      	cbz	r7, 8005ff0 <__gethex+0x2d0>
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 feb2 	bl	8006d52 <__any_on>
 8005fee:	4681      	mov	r9, r0
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	1b76      	subs	r6, r6, r5
 8005ff6:	2502      	movs	r5, #2
 8005ff8:	117a      	asrs	r2, r7, #5
 8005ffa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005ffe:	f007 071f 	and.w	r7, r7, #31
 8006002:	40bb      	lsls	r3, r7
 8006004:	4213      	tst	r3, r2
 8006006:	4620      	mov	r0, r4
 8006008:	bf18      	it	ne
 800600a:	f049 0902 	orrne.w	r9, r9, #2
 800600e:	f7ff fe1f 	bl	8005c50 <rshift>
 8006012:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006016:	f1b9 0f00 	cmp.w	r9, #0
 800601a:	d047      	beq.n	80060ac <__gethex+0x38c>
 800601c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d015      	beq.n	8006050 <__gethex+0x330>
 8006024:	2b03      	cmp	r3, #3
 8006026:	d017      	beq.n	8006058 <__gethex+0x338>
 8006028:	2b01      	cmp	r3, #1
 800602a:	d109      	bne.n	8006040 <__gethex+0x320>
 800602c:	f019 0f02 	tst.w	r9, #2
 8006030:	d006      	beq.n	8006040 <__gethex+0x320>
 8006032:	f8da 3000 	ldr.w	r3, [sl]
 8006036:	ea49 0903 	orr.w	r9, r9, r3
 800603a:	f019 0f01 	tst.w	r9, #1
 800603e:	d10e      	bne.n	800605e <__gethex+0x33e>
 8006040:	f045 0510 	orr.w	r5, r5, #16
 8006044:	e032      	b.n	80060ac <__gethex+0x38c>
 8006046:	f04f 0901 	mov.w	r9, #1
 800604a:	e7d1      	b.n	8005ff0 <__gethex+0x2d0>
 800604c:	2501      	movs	r5, #1
 800604e:	e7e2      	b.n	8006016 <__gethex+0x2f6>
 8006050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006052:	f1c3 0301 	rsb	r3, r3, #1
 8006056:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <__gethex+0x320>
 800605e:	f04f 0c00 	mov.w	ip, #0
 8006062:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006066:	f104 0314 	add.w	r3, r4, #20
 800606a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800606e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006072:	4618      	mov	r0, r3
 8006074:	f853 2b04 	ldr.w	r2, [r3], #4
 8006078:	f1b2 3fff 	cmp.w	r2, #4294967295
 800607c:	d01b      	beq.n	80060b6 <__gethex+0x396>
 800607e:	3201      	adds	r2, #1
 8006080:	6002      	str	r2, [r0, #0]
 8006082:	2d02      	cmp	r5, #2
 8006084:	f104 0314 	add.w	r3, r4, #20
 8006088:	d13c      	bne.n	8006104 <__gethex+0x3e4>
 800608a:	f8d8 2000 	ldr.w	r2, [r8]
 800608e:	3a01      	subs	r2, #1
 8006090:	42b2      	cmp	r2, r6
 8006092:	d109      	bne.n	80060a8 <__gethex+0x388>
 8006094:	2201      	movs	r2, #1
 8006096:	1171      	asrs	r1, r6, #5
 8006098:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800609c:	f006 061f 	and.w	r6, r6, #31
 80060a0:	fa02 f606 	lsl.w	r6, r2, r6
 80060a4:	421e      	tst	r6, r3
 80060a6:	d13a      	bne.n	800611e <__gethex+0x3fe>
 80060a8:	f045 0520 	orr.w	r5, r5, #32
 80060ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060ae:	601c      	str	r4, [r3, #0]
 80060b0:	9b02      	ldr	r3, [sp, #8]
 80060b2:	601f      	str	r7, [r3, #0]
 80060b4:	e6b0      	b.n	8005e18 <__gethex+0xf8>
 80060b6:	4299      	cmp	r1, r3
 80060b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80060bc:	d8d9      	bhi.n	8006072 <__gethex+0x352>
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	459b      	cmp	fp, r3
 80060c2:	db17      	blt.n	80060f4 <__gethex+0x3d4>
 80060c4:	6861      	ldr	r1, [r4, #4]
 80060c6:	9801      	ldr	r0, [sp, #4]
 80060c8:	3101      	adds	r1, #1
 80060ca:	f000 f9c3 	bl	8006454 <_Balloc>
 80060ce:	4681      	mov	r9, r0
 80060d0:	b918      	cbnz	r0, 80060da <__gethex+0x3ba>
 80060d2:	4602      	mov	r2, r0
 80060d4:	2184      	movs	r1, #132	@ 0x84
 80060d6:	4b19      	ldr	r3, [pc, #100]	@ (800613c <__gethex+0x41c>)
 80060d8:	e6c5      	b.n	8005e66 <__gethex+0x146>
 80060da:	6922      	ldr	r2, [r4, #16]
 80060dc:	f104 010c 	add.w	r1, r4, #12
 80060e0:	3202      	adds	r2, #2
 80060e2:	0092      	lsls	r2, r2, #2
 80060e4:	300c      	adds	r0, #12
 80060e6:	f7fe fedc 	bl	8004ea2 <memcpy>
 80060ea:	4621      	mov	r1, r4
 80060ec:	9801      	ldr	r0, [sp, #4]
 80060ee:	f000 f9f1 	bl	80064d4 <_Bfree>
 80060f2:	464c      	mov	r4, r9
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	6122      	str	r2, [r4, #16]
 80060fa:	2201      	movs	r2, #1
 80060fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006100:	615a      	str	r2, [r3, #20]
 8006102:	e7be      	b.n	8006082 <__gethex+0x362>
 8006104:	6922      	ldr	r2, [r4, #16]
 8006106:	455a      	cmp	r2, fp
 8006108:	dd0b      	ble.n	8006122 <__gethex+0x402>
 800610a:	2101      	movs	r1, #1
 800610c:	4620      	mov	r0, r4
 800610e:	f7ff fd9f 	bl	8005c50 <rshift>
 8006112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006116:	3701      	adds	r7, #1
 8006118:	42bb      	cmp	r3, r7
 800611a:	f6ff aee0 	blt.w	8005ede <__gethex+0x1be>
 800611e:	2501      	movs	r5, #1
 8006120:	e7c2      	b.n	80060a8 <__gethex+0x388>
 8006122:	f016 061f 	ands.w	r6, r6, #31
 8006126:	d0fa      	beq.n	800611e <__gethex+0x3fe>
 8006128:	4453      	add	r3, sl
 800612a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800612e:	f000 fa83 	bl	8006638 <__hi0bits>
 8006132:	f1c6 0620 	rsb	r6, r6, #32
 8006136:	42b0      	cmp	r0, r6
 8006138:	dbe7      	blt.n	800610a <__gethex+0x3ea>
 800613a:	e7f0      	b.n	800611e <__gethex+0x3fe>
 800613c:	080079e6 	.word	0x080079e6

08006140 <L_shift>:
 8006140:	f1c2 0208 	rsb	r2, r2, #8
 8006144:	0092      	lsls	r2, r2, #2
 8006146:	b570      	push	{r4, r5, r6, lr}
 8006148:	f1c2 0620 	rsb	r6, r2, #32
 800614c:	6843      	ldr	r3, [r0, #4]
 800614e:	6804      	ldr	r4, [r0, #0]
 8006150:	fa03 f506 	lsl.w	r5, r3, r6
 8006154:	432c      	orrs	r4, r5
 8006156:	40d3      	lsrs	r3, r2
 8006158:	6004      	str	r4, [r0, #0]
 800615a:	f840 3f04 	str.w	r3, [r0, #4]!
 800615e:	4288      	cmp	r0, r1
 8006160:	d3f4      	bcc.n	800614c <L_shift+0xc>
 8006162:	bd70      	pop	{r4, r5, r6, pc}

08006164 <__match>:
 8006164:	b530      	push	{r4, r5, lr}
 8006166:	6803      	ldr	r3, [r0, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616e:	b914      	cbnz	r4, 8006176 <__match+0x12>
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	2001      	movs	r0, #1
 8006174:	bd30      	pop	{r4, r5, pc}
 8006176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800617a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800617e:	2d19      	cmp	r5, #25
 8006180:	bf98      	it	ls
 8006182:	3220      	addls	r2, #32
 8006184:	42a2      	cmp	r2, r4
 8006186:	d0f0      	beq.n	800616a <__match+0x6>
 8006188:	2000      	movs	r0, #0
 800618a:	e7f3      	b.n	8006174 <__match+0x10>

0800618c <__hexnan>:
 800618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006190:	2500      	movs	r5, #0
 8006192:	680b      	ldr	r3, [r1, #0]
 8006194:	4682      	mov	sl, r0
 8006196:	115e      	asrs	r6, r3, #5
 8006198:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800619c:	f013 031f 	ands.w	r3, r3, #31
 80061a0:	bf18      	it	ne
 80061a2:	3604      	addne	r6, #4
 80061a4:	1f37      	subs	r7, r6, #4
 80061a6:	4690      	mov	r8, r2
 80061a8:	46b9      	mov	r9, r7
 80061aa:	463c      	mov	r4, r7
 80061ac:	46ab      	mov	fp, r5
 80061ae:	b087      	sub	sp, #28
 80061b0:	6801      	ldr	r1, [r0, #0]
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	f846 5c04 	str.w	r5, [r6, #-4]
 80061b8:	9502      	str	r5, [sp, #8]
 80061ba:	784a      	ldrb	r2, [r1, #1]
 80061bc:	1c4b      	adds	r3, r1, #1
 80061be:	9303      	str	r3, [sp, #12]
 80061c0:	b342      	cbz	r2, 8006214 <__hexnan+0x88>
 80061c2:	4610      	mov	r0, r2
 80061c4:	9105      	str	r1, [sp, #20]
 80061c6:	9204      	str	r2, [sp, #16]
 80061c8:	f7ff fd95 	bl	8005cf6 <__hexdig_fun>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d151      	bne.n	8006274 <__hexnan+0xe8>
 80061d0:	9a04      	ldr	r2, [sp, #16]
 80061d2:	9905      	ldr	r1, [sp, #20]
 80061d4:	2a20      	cmp	r2, #32
 80061d6:	d818      	bhi.n	800620a <__hexnan+0x7e>
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	459b      	cmp	fp, r3
 80061dc:	dd13      	ble.n	8006206 <__hexnan+0x7a>
 80061de:	454c      	cmp	r4, r9
 80061e0:	d206      	bcs.n	80061f0 <__hexnan+0x64>
 80061e2:	2d07      	cmp	r5, #7
 80061e4:	dc04      	bgt.n	80061f0 <__hexnan+0x64>
 80061e6:	462a      	mov	r2, r5
 80061e8:	4649      	mov	r1, r9
 80061ea:	4620      	mov	r0, r4
 80061ec:	f7ff ffa8 	bl	8006140 <L_shift>
 80061f0:	4544      	cmp	r4, r8
 80061f2:	d952      	bls.n	800629a <__hexnan+0x10e>
 80061f4:	2300      	movs	r3, #0
 80061f6:	f1a4 0904 	sub.w	r9, r4, #4
 80061fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80061fe:	461d      	mov	r5, r3
 8006200:	464c      	mov	r4, r9
 8006202:	f8cd b008 	str.w	fp, [sp, #8]
 8006206:	9903      	ldr	r1, [sp, #12]
 8006208:	e7d7      	b.n	80061ba <__hexnan+0x2e>
 800620a:	2a29      	cmp	r2, #41	@ 0x29
 800620c:	d157      	bne.n	80062be <__hexnan+0x132>
 800620e:	3102      	adds	r1, #2
 8006210:	f8ca 1000 	str.w	r1, [sl]
 8006214:	f1bb 0f00 	cmp.w	fp, #0
 8006218:	d051      	beq.n	80062be <__hexnan+0x132>
 800621a:	454c      	cmp	r4, r9
 800621c:	d206      	bcs.n	800622c <__hexnan+0xa0>
 800621e:	2d07      	cmp	r5, #7
 8006220:	dc04      	bgt.n	800622c <__hexnan+0xa0>
 8006222:	462a      	mov	r2, r5
 8006224:	4649      	mov	r1, r9
 8006226:	4620      	mov	r0, r4
 8006228:	f7ff ff8a 	bl	8006140 <L_shift>
 800622c:	4544      	cmp	r4, r8
 800622e:	d936      	bls.n	800629e <__hexnan+0x112>
 8006230:	4623      	mov	r3, r4
 8006232:	f1a8 0204 	sub.w	r2, r8, #4
 8006236:	f853 1b04 	ldr.w	r1, [r3], #4
 800623a:	429f      	cmp	r7, r3
 800623c:	f842 1f04 	str.w	r1, [r2, #4]!
 8006240:	d2f9      	bcs.n	8006236 <__hexnan+0xaa>
 8006242:	1b3b      	subs	r3, r7, r4
 8006244:	f023 0303 	bic.w	r3, r3, #3
 8006248:	3304      	adds	r3, #4
 800624a:	3401      	adds	r4, #1
 800624c:	3e03      	subs	r6, #3
 800624e:	42b4      	cmp	r4, r6
 8006250:	bf88      	it	hi
 8006252:	2304      	movhi	r3, #4
 8006254:	2200      	movs	r2, #0
 8006256:	4443      	add	r3, r8
 8006258:	f843 2b04 	str.w	r2, [r3], #4
 800625c:	429f      	cmp	r7, r3
 800625e:	d2fb      	bcs.n	8006258 <__hexnan+0xcc>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	b91b      	cbnz	r3, 800626c <__hexnan+0xe0>
 8006264:	4547      	cmp	r7, r8
 8006266:	d128      	bne.n	80062ba <__hexnan+0x12e>
 8006268:	2301      	movs	r3, #1
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	2005      	movs	r0, #5
 800626e:	b007      	add	sp, #28
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	3501      	adds	r5, #1
 8006276:	2d08      	cmp	r5, #8
 8006278:	f10b 0b01 	add.w	fp, fp, #1
 800627c:	dd06      	ble.n	800628c <__hexnan+0x100>
 800627e:	4544      	cmp	r4, r8
 8006280:	d9c1      	bls.n	8006206 <__hexnan+0x7a>
 8006282:	2300      	movs	r3, #0
 8006284:	2501      	movs	r5, #1
 8006286:	f844 3c04 	str.w	r3, [r4, #-4]
 800628a:	3c04      	subs	r4, #4
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	f000 000f 	and.w	r0, r0, #15
 8006292:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006296:	6020      	str	r0, [r4, #0]
 8006298:	e7b5      	b.n	8006206 <__hexnan+0x7a>
 800629a:	2508      	movs	r5, #8
 800629c:	e7b3      	b.n	8006206 <__hexnan+0x7a>
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0dd      	beq.n	8006260 <__hexnan+0xd4>
 80062a4:	f04f 32ff 	mov.w	r2, #4294967295
 80062a8:	f1c3 0320 	rsb	r3, r3, #32
 80062ac:	40da      	lsrs	r2, r3
 80062ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80062b2:	4013      	ands	r3, r2
 80062b4:	f846 3c04 	str.w	r3, [r6, #-4]
 80062b8:	e7d2      	b.n	8006260 <__hexnan+0xd4>
 80062ba:	3f04      	subs	r7, #4
 80062bc:	e7d0      	b.n	8006260 <__hexnan+0xd4>
 80062be:	2004      	movs	r0, #4
 80062c0:	e7d5      	b.n	800626e <__hexnan+0xe2>
	...

080062c4 <malloc>:
 80062c4:	4b02      	ldr	r3, [pc, #8]	@ (80062d0 <malloc+0xc>)
 80062c6:	4601      	mov	r1, r0
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	f000 b825 	b.w	8006318 <_malloc_r>
 80062ce:	bf00      	nop
 80062d0:	20000184 	.word	0x20000184

080062d4 <sbrk_aligned>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	4e0f      	ldr	r6, [pc, #60]	@ (8006314 <sbrk_aligned+0x40>)
 80062d8:	460c      	mov	r4, r1
 80062da:	6831      	ldr	r1, [r6, #0]
 80062dc:	4605      	mov	r5, r0
 80062de:	b911      	cbnz	r1, 80062e6 <sbrk_aligned+0x12>
 80062e0:	f000 ff90 	bl	8007204 <_sbrk_r>
 80062e4:	6030      	str	r0, [r6, #0]
 80062e6:	4621      	mov	r1, r4
 80062e8:	4628      	mov	r0, r5
 80062ea:	f000 ff8b 	bl	8007204 <_sbrk_r>
 80062ee:	1c43      	adds	r3, r0, #1
 80062f0:	d103      	bne.n	80062fa <sbrk_aligned+0x26>
 80062f2:	f04f 34ff 	mov.w	r4, #4294967295
 80062f6:	4620      	mov	r0, r4
 80062f8:	bd70      	pop	{r4, r5, r6, pc}
 80062fa:	1cc4      	adds	r4, r0, #3
 80062fc:	f024 0403 	bic.w	r4, r4, #3
 8006300:	42a0      	cmp	r0, r4
 8006302:	d0f8      	beq.n	80062f6 <sbrk_aligned+0x22>
 8006304:	1a21      	subs	r1, r4, r0
 8006306:	4628      	mov	r0, r5
 8006308:	f000 ff7c 	bl	8007204 <_sbrk_r>
 800630c:	3001      	adds	r0, #1
 800630e:	d1f2      	bne.n	80062f6 <sbrk_aligned+0x22>
 8006310:	e7ef      	b.n	80062f2 <sbrk_aligned+0x1e>
 8006312:	bf00      	nop
 8006314:	20000450 	.word	0x20000450

08006318 <_malloc_r>:
 8006318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800631c:	1ccd      	adds	r5, r1, #3
 800631e:	f025 0503 	bic.w	r5, r5, #3
 8006322:	3508      	adds	r5, #8
 8006324:	2d0c      	cmp	r5, #12
 8006326:	bf38      	it	cc
 8006328:	250c      	movcc	r5, #12
 800632a:	2d00      	cmp	r5, #0
 800632c:	4606      	mov	r6, r0
 800632e:	db01      	blt.n	8006334 <_malloc_r+0x1c>
 8006330:	42a9      	cmp	r1, r5
 8006332:	d904      	bls.n	800633e <_malloc_r+0x26>
 8006334:	230c      	movs	r3, #12
 8006336:	6033      	str	r3, [r6, #0]
 8006338:	2000      	movs	r0, #0
 800633a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006414 <_malloc_r+0xfc>
 8006342:	f000 f87b 	bl	800643c <__malloc_lock>
 8006346:	f8d8 3000 	ldr.w	r3, [r8]
 800634a:	461c      	mov	r4, r3
 800634c:	bb44      	cbnz	r4, 80063a0 <_malloc_r+0x88>
 800634e:	4629      	mov	r1, r5
 8006350:	4630      	mov	r0, r6
 8006352:	f7ff ffbf 	bl	80062d4 <sbrk_aligned>
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	4604      	mov	r4, r0
 800635a:	d158      	bne.n	800640e <_malloc_r+0xf6>
 800635c:	f8d8 4000 	ldr.w	r4, [r8]
 8006360:	4627      	mov	r7, r4
 8006362:	2f00      	cmp	r7, #0
 8006364:	d143      	bne.n	80063ee <_malloc_r+0xd6>
 8006366:	2c00      	cmp	r4, #0
 8006368:	d04b      	beq.n	8006402 <_malloc_r+0xea>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	4639      	mov	r1, r7
 800636e:	4630      	mov	r0, r6
 8006370:	eb04 0903 	add.w	r9, r4, r3
 8006374:	f000 ff46 	bl	8007204 <_sbrk_r>
 8006378:	4581      	cmp	r9, r0
 800637a:	d142      	bne.n	8006402 <_malloc_r+0xea>
 800637c:	6821      	ldr	r1, [r4, #0]
 800637e:	4630      	mov	r0, r6
 8006380:	1a6d      	subs	r5, r5, r1
 8006382:	4629      	mov	r1, r5
 8006384:	f7ff ffa6 	bl	80062d4 <sbrk_aligned>
 8006388:	3001      	adds	r0, #1
 800638a:	d03a      	beq.n	8006402 <_malloc_r+0xea>
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	442b      	add	r3, r5
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	f8d8 3000 	ldr.w	r3, [r8]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	bb62      	cbnz	r2, 80063f4 <_malloc_r+0xdc>
 800639a:	f8c8 7000 	str.w	r7, [r8]
 800639e:	e00f      	b.n	80063c0 <_malloc_r+0xa8>
 80063a0:	6822      	ldr	r2, [r4, #0]
 80063a2:	1b52      	subs	r2, r2, r5
 80063a4:	d420      	bmi.n	80063e8 <_malloc_r+0xd0>
 80063a6:	2a0b      	cmp	r2, #11
 80063a8:	d917      	bls.n	80063da <_malloc_r+0xc2>
 80063aa:	1961      	adds	r1, r4, r5
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	6025      	str	r5, [r4, #0]
 80063b0:	bf18      	it	ne
 80063b2:	6059      	strne	r1, [r3, #4]
 80063b4:	6863      	ldr	r3, [r4, #4]
 80063b6:	bf08      	it	eq
 80063b8:	f8c8 1000 	streq.w	r1, [r8]
 80063bc:	5162      	str	r2, [r4, r5]
 80063be:	604b      	str	r3, [r1, #4]
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 f841 	bl	8006448 <__malloc_unlock>
 80063c6:	f104 000b 	add.w	r0, r4, #11
 80063ca:	1d23      	adds	r3, r4, #4
 80063cc:	f020 0007 	bic.w	r0, r0, #7
 80063d0:	1ac2      	subs	r2, r0, r3
 80063d2:	bf1c      	itt	ne
 80063d4:	1a1b      	subne	r3, r3, r0
 80063d6:	50a3      	strne	r3, [r4, r2]
 80063d8:	e7af      	b.n	800633a <_malloc_r+0x22>
 80063da:	6862      	ldr	r2, [r4, #4]
 80063dc:	42a3      	cmp	r3, r4
 80063de:	bf0c      	ite	eq
 80063e0:	f8c8 2000 	streq.w	r2, [r8]
 80063e4:	605a      	strne	r2, [r3, #4]
 80063e6:	e7eb      	b.n	80063c0 <_malloc_r+0xa8>
 80063e8:	4623      	mov	r3, r4
 80063ea:	6864      	ldr	r4, [r4, #4]
 80063ec:	e7ae      	b.n	800634c <_malloc_r+0x34>
 80063ee:	463c      	mov	r4, r7
 80063f0:	687f      	ldr	r7, [r7, #4]
 80063f2:	e7b6      	b.n	8006362 <_malloc_r+0x4a>
 80063f4:	461a      	mov	r2, r3
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	42a3      	cmp	r3, r4
 80063fa:	d1fb      	bne.n	80063f4 <_malloc_r+0xdc>
 80063fc:	2300      	movs	r3, #0
 80063fe:	6053      	str	r3, [r2, #4]
 8006400:	e7de      	b.n	80063c0 <_malloc_r+0xa8>
 8006402:	230c      	movs	r3, #12
 8006404:	4630      	mov	r0, r6
 8006406:	6033      	str	r3, [r6, #0]
 8006408:	f000 f81e 	bl	8006448 <__malloc_unlock>
 800640c:	e794      	b.n	8006338 <_malloc_r+0x20>
 800640e:	6005      	str	r5, [r0, #0]
 8006410:	e7d6      	b.n	80063c0 <_malloc_r+0xa8>
 8006412:	bf00      	nop
 8006414:	20000454 	.word	0x20000454

08006418 <__ascii_mbtowc>:
 8006418:	b082      	sub	sp, #8
 800641a:	b901      	cbnz	r1, 800641e <__ascii_mbtowc+0x6>
 800641c:	a901      	add	r1, sp, #4
 800641e:	b142      	cbz	r2, 8006432 <__ascii_mbtowc+0x1a>
 8006420:	b14b      	cbz	r3, 8006436 <__ascii_mbtowc+0x1e>
 8006422:	7813      	ldrb	r3, [r2, #0]
 8006424:	600b      	str	r3, [r1, #0]
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	1e10      	subs	r0, r2, #0
 800642a:	bf18      	it	ne
 800642c:	2001      	movne	r0, #1
 800642e:	b002      	add	sp, #8
 8006430:	4770      	bx	lr
 8006432:	4610      	mov	r0, r2
 8006434:	e7fb      	b.n	800642e <__ascii_mbtowc+0x16>
 8006436:	f06f 0001 	mvn.w	r0, #1
 800643a:	e7f8      	b.n	800642e <__ascii_mbtowc+0x16>

0800643c <__malloc_lock>:
 800643c:	4801      	ldr	r0, [pc, #4]	@ (8006444 <__malloc_lock+0x8>)
 800643e:	f7fe bd18 	b.w	8004e72 <__retarget_lock_acquire_recursive>
 8006442:	bf00      	nop
 8006444:	2000044c 	.word	0x2000044c

08006448 <__malloc_unlock>:
 8006448:	4801      	ldr	r0, [pc, #4]	@ (8006450 <__malloc_unlock+0x8>)
 800644a:	f7fe bd13 	b.w	8004e74 <__retarget_lock_release_recursive>
 800644e:	bf00      	nop
 8006450:	2000044c 	.word	0x2000044c

08006454 <_Balloc>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	69c6      	ldr	r6, [r0, #28]
 8006458:	4604      	mov	r4, r0
 800645a:	460d      	mov	r5, r1
 800645c:	b976      	cbnz	r6, 800647c <_Balloc+0x28>
 800645e:	2010      	movs	r0, #16
 8006460:	f7ff ff30 	bl	80062c4 <malloc>
 8006464:	4602      	mov	r2, r0
 8006466:	61e0      	str	r0, [r4, #28]
 8006468:	b920      	cbnz	r0, 8006474 <_Balloc+0x20>
 800646a:	216b      	movs	r1, #107	@ 0x6b
 800646c:	4b17      	ldr	r3, [pc, #92]	@ (80064cc <_Balloc+0x78>)
 800646e:	4818      	ldr	r0, [pc, #96]	@ (80064d0 <_Balloc+0x7c>)
 8006470:	f7fe fd2c 	bl	8004ecc <__assert_func>
 8006474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006478:	6006      	str	r6, [r0, #0]
 800647a:	60c6      	str	r6, [r0, #12]
 800647c:	69e6      	ldr	r6, [r4, #28]
 800647e:	68f3      	ldr	r3, [r6, #12]
 8006480:	b183      	cbz	r3, 80064a4 <_Balloc+0x50>
 8006482:	69e3      	ldr	r3, [r4, #28]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800648a:	b9b8      	cbnz	r0, 80064bc <_Balloc+0x68>
 800648c:	2101      	movs	r1, #1
 800648e:	fa01 f605 	lsl.w	r6, r1, r5
 8006492:	1d72      	adds	r2, r6, #5
 8006494:	4620      	mov	r0, r4
 8006496:	0092      	lsls	r2, r2, #2
 8006498:	f000 fecb 	bl	8007232 <_calloc_r>
 800649c:	b160      	cbz	r0, 80064b8 <_Balloc+0x64>
 800649e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064a2:	e00e      	b.n	80064c2 <_Balloc+0x6e>
 80064a4:	2221      	movs	r2, #33	@ 0x21
 80064a6:	2104      	movs	r1, #4
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fec2 	bl	8007232 <_calloc_r>
 80064ae:	69e3      	ldr	r3, [r4, #28]
 80064b0:	60f0      	str	r0, [r6, #12]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e4      	bne.n	8006482 <_Balloc+0x2e>
 80064b8:	2000      	movs	r0, #0
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	6802      	ldr	r2, [r0, #0]
 80064be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064c2:	2300      	movs	r3, #0
 80064c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064c8:	e7f7      	b.n	80064ba <_Balloc+0x66>
 80064ca:	bf00      	nop
 80064cc:	080078cc 	.word	0x080078cc
 80064d0:	08007a57 	.word	0x08007a57

080064d4 <_Bfree>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	69c6      	ldr	r6, [r0, #28]
 80064d8:	4605      	mov	r5, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	b976      	cbnz	r6, 80064fc <_Bfree+0x28>
 80064de:	2010      	movs	r0, #16
 80064e0:	f7ff fef0 	bl	80062c4 <malloc>
 80064e4:	4602      	mov	r2, r0
 80064e6:	61e8      	str	r0, [r5, #28]
 80064e8:	b920      	cbnz	r0, 80064f4 <_Bfree+0x20>
 80064ea:	218f      	movs	r1, #143	@ 0x8f
 80064ec:	4b08      	ldr	r3, [pc, #32]	@ (8006510 <_Bfree+0x3c>)
 80064ee:	4809      	ldr	r0, [pc, #36]	@ (8006514 <_Bfree+0x40>)
 80064f0:	f7fe fcec 	bl	8004ecc <__assert_func>
 80064f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064f8:	6006      	str	r6, [r0, #0]
 80064fa:	60c6      	str	r6, [r0, #12]
 80064fc:	b13c      	cbz	r4, 800650e <_Bfree+0x3a>
 80064fe:	69eb      	ldr	r3, [r5, #28]
 8006500:	6862      	ldr	r2, [r4, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006508:	6021      	str	r1, [r4, #0]
 800650a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	080078cc 	.word	0x080078cc
 8006514:	08007a57 	.word	0x08007a57

08006518 <__multadd>:
 8006518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651c:	4607      	mov	r7, r0
 800651e:	460c      	mov	r4, r1
 8006520:	461e      	mov	r6, r3
 8006522:	2000      	movs	r0, #0
 8006524:	690d      	ldr	r5, [r1, #16]
 8006526:	f101 0c14 	add.w	ip, r1, #20
 800652a:	f8dc 3000 	ldr.w	r3, [ip]
 800652e:	3001      	adds	r0, #1
 8006530:	b299      	uxth	r1, r3
 8006532:	fb02 6101 	mla	r1, r2, r1, r6
 8006536:	0c1e      	lsrs	r6, r3, #16
 8006538:	0c0b      	lsrs	r3, r1, #16
 800653a:	fb02 3306 	mla	r3, r2, r6, r3
 800653e:	b289      	uxth	r1, r1
 8006540:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006544:	4285      	cmp	r5, r0
 8006546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800654a:	f84c 1b04 	str.w	r1, [ip], #4
 800654e:	dcec      	bgt.n	800652a <__multadd+0x12>
 8006550:	b30e      	cbz	r6, 8006596 <__multadd+0x7e>
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc19      	bgt.n	800658c <__multadd+0x74>
 8006558:	6861      	ldr	r1, [r4, #4]
 800655a:	4638      	mov	r0, r7
 800655c:	3101      	adds	r1, #1
 800655e:	f7ff ff79 	bl	8006454 <_Balloc>
 8006562:	4680      	mov	r8, r0
 8006564:	b928      	cbnz	r0, 8006572 <__multadd+0x5a>
 8006566:	4602      	mov	r2, r0
 8006568:	21ba      	movs	r1, #186	@ 0xba
 800656a:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <__multadd+0x84>)
 800656c:	480c      	ldr	r0, [pc, #48]	@ (80065a0 <__multadd+0x88>)
 800656e:	f7fe fcad 	bl	8004ecc <__assert_func>
 8006572:	6922      	ldr	r2, [r4, #16]
 8006574:	f104 010c 	add.w	r1, r4, #12
 8006578:	3202      	adds	r2, #2
 800657a:	0092      	lsls	r2, r2, #2
 800657c:	300c      	adds	r0, #12
 800657e:	f7fe fc90 	bl	8004ea2 <memcpy>
 8006582:	4621      	mov	r1, r4
 8006584:	4638      	mov	r0, r7
 8006586:	f7ff ffa5 	bl	80064d4 <_Bfree>
 800658a:	4644      	mov	r4, r8
 800658c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006590:	3501      	adds	r5, #1
 8006592:	615e      	str	r6, [r3, #20]
 8006594:	6125      	str	r5, [r4, #16]
 8006596:	4620      	mov	r0, r4
 8006598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800659c:	080079e6 	.word	0x080079e6
 80065a0:	08007a57 	.word	0x08007a57

080065a4 <__s2b>:
 80065a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a8:	4615      	mov	r5, r2
 80065aa:	2209      	movs	r2, #9
 80065ac:	461f      	mov	r7, r3
 80065ae:	3308      	adds	r3, #8
 80065b0:	460c      	mov	r4, r1
 80065b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80065b6:	4606      	mov	r6, r0
 80065b8:	2201      	movs	r2, #1
 80065ba:	2100      	movs	r1, #0
 80065bc:	429a      	cmp	r2, r3
 80065be:	db09      	blt.n	80065d4 <__s2b+0x30>
 80065c0:	4630      	mov	r0, r6
 80065c2:	f7ff ff47 	bl	8006454 <_Balloc>
 80065c6:	b940      	cbnz	r0, 80065da <__s2b+0x36>
 80065c8:	4602      	mov	r2, r0
 80065ca:	21d3      	movs	r1, #211	@ 0xd3
 80065cc:	4b18      	ldr	r3, [pc, #96]	@ (8006630 <__s2b+0x8c>)
 80065ce:	4819      	ldr	r0, [pc, #100]	@ (8006634 <__s2b+0x90>)
 80065d0:	f7fe fc7c 	bl	8004ecc <__assert_func>
 80065d4:	0052      	lsls	r2, r2, #1
 80065d6:	3101      	adds	r1, #1
 80065d8:	e7f0      	b.n	80065bc <__s2b+0x18>
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	2d09      	cmp	r5, #9
 80065de:	6143      	str	r3, [r0, #20]
 80065e0:	f04f 0301 	mov.w	r3, #1
 80065e4:	6103      	str	r3, [r0, #16]
 80065e6:	dd16      	ble.n	8006616 <__s2b+0x72>
 80065e8:	f104 0909 	add.w	r9, r4, #9
 80065ec:	46c8      	mov	r8, r9
 80065ee:	442c      	add	r4, r5
 80065f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80065f4:	4601      	mov	r1, r0
 80065f6:	220a      	movs	r2, #10
 80065f8:	4630      	mov	r0, r6
 80065fa:	3b30      	subs	r3, #48	@ 0x30
 80065fc:	f7ff ff8c 	bl	8006518 <__multadd>
 8006600:	45a0      	cmp	r8, r4
 8006602:	d1f5      	bne.n	80065f0 <__s2b+0x4c>
 8006604:	f1a5 0408 	sub.w	r4, r5, #8
 8006608:	444c      	add	r4, r9
 800660a:	1b2d      	subs	r5, r5, r4
 800660c:	1963      	adds	r3, r4, r5
 800660e:	42bb      	cmp	r3, r7
 8006610:	db04      	blt.n	800661c <__s2b+0x78>
 8006612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006616:	2509      	movs	r5, #9
 8006618:	340a      	adds	r4, #10
 800661a:	e7f6      	b.n	800660a <__s2b+0x66>
 800661c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006620:	4601      	mov	r1, r0
 8006622:	220a      	movs	r2, #10
 8006624:	4630      	mov	r0, r6
 8006626:	3b30      	subs	r3, #48	@ 0x30
 8006628:	f7ff ff76 	bl	8006518 <__multadd>
 800662c:	e7ee      	b.n	800660c <__s2b+0x68>
 800662e:	bf00      	nop
 8006630:	080079e6 	.word	0x080079e6
 8006634:	08007a57 	.word	0x08007a57

08006638 <__hi0bits>:
 8006638:	4603      	mov	r3, r0
 800663a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800663e:	bf3a      	itte	cc
 8006640:	0403      	lslcc	r3, r0, #16
 8006642:	2010      	movcc	r0, #16
 8006644:	2000      	movcs	r0, #0
 8006646:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800664a:	bf3c      	itt	cc
 800664c:	021b      	lslcc	r3, r3, #8
 800664e:	3008      	addcc	r0, #8
 8006650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006654:	bf3c      	itt	cc
 8006656:	011b      	lslcc	r3, r3, #4
 8006658:	3004      	addcc	r0, #4
 800665a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800665e:	bf3c      	itt	cc
 8006660:	009b      	lslcc	r3, r3, #2
 8006662:	3002      	addcc	r0, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	db05      	blt.n	8006674 <__hi0bits+0x3c>
 8006668:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800666c:	f100 0001 	add.w	r0, r0, #1
 8006670:	bf08      	it	eq
 8006672:	2020      	moveq	r0, #32
 8006674:	4770      	bx	lr

08006676 <__lo0bits>:
 8006676:	6803      	ldr	r3, [r0, #0]
 8006678:	4602      	mov	r2, r0
 800667a:	f013 0007 	ands.w	r0, r3, #7
 800667e:	d00b      	beq.n	8006698 <__lo0bits+0x22>
 8006680:	07d9      	lsls	r1, r3, #31
 8006682:	d421      	bmi.n	80066c8 <__lo0bits+0x52>
 8006684:	0798      	lsls	r0, r3, #30
 8006686:	bf49      	itett	mi
 8006688:	085b      	lsrmi	r3, r3, #1
 800668a:	089b      	lsrpl	r3, r3, #2
 800668c:	2001      	movmi	r0, #1
 800668e:	6013      	strmi	r3, [r2, #0]
 8006690:	bf5c      	itt	pl
 8006692:	2002      	movpl	r0, #2
 8006694:	6013      	strpl	r3, [r2, #0]
 8006696:	4770      	bx	lr
 8006698:	b299      	uxth	r1, r3
 800669a:	b909      	cbnz	r1, 80066a0 <__lo0bits+0x2a>
 800669c:	2010      	movs	r0, #16
 800669e:	0c1b      	lsrs	r3, r3, #16
 80066a0:	b2d9      	uxtb	r1, r3
 80066a2:	b909      	cbnz	r1, 80066a8 <__lo0bits+0x32>
 80066a4:	3008      	adds	r0, #8
 80066a6:	0a1b      	lsrs	r3, r3, #8
 80066a8:	0719      	lsls	r1, r3, #28
 80066aa:	bf04      	itt	eq
 80066ac:	091b      	lsreq	r3, r3, #4
 80066ae:	3004      	addeq	r0, #4
 80066b0:	0799      	lsls	r1, r3, #30
 80066b2:	bf04      	itt	eq
 80066b4:	089b      	lsreq	r3, r3, #2
 80066b6:	3002      	addeq	r0, #2
 80066b8:	07d9      	lsls	r1, r3, #31
 80066ba:	d403      	bmi.n	80066c4 <__lo0bits+0x4e>
 80066bc:	085b      	lsrs	r3, r3, #1
 80066be:	f100 0001 	add.w	r0, r0, #1
 80066c2:	d003      	beq.n	80066cc <__lo0bits+0x56>
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	4770      	bx	lr
 80066c8:	2000      	movs	r0, #0
 80066ca:	4770      	bx	lr
 80066cc:	2020      	movs	r0, #32
 80066ce:	4770      	bx	lr

080066d0 <__i2b>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	460c      	mov	r4, r1
 80066d4:	2101      	movs	r1, #1
 80066d6:	f7ff febd 	bl	8006454 <_Balloc>
 80066da:	4602      	mov	r2, r0
 80066dc:	b928      	cbnz	r0, 80066ea <__i2b+0x1a>
 80066de:	f240 1145 	movw	r1, #325	@ 0x145
 80066e2:	4b04      	ldr	r3, [pc, #16]	@ (80066f4 <__i2b+0x24>)
 80066e4:	4804      	ldr	r0, [pc, #16]	@ (80066f8 <__i2b+0x28>)
 80066e6:	f7fe fbf1 	bl	8004ecc <__assert_func>
 80066ea:	2301      	movs	r3, #1
 80066ec:	6144      	str	r4, [r0, #20]
 80066ee:	6103      	str	r3, [r0, #16]
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	bf00      	nop
 80066f4:	080079e6 	.word	0x080079e6
 80066f8:	08007a57 	.word	0x08007a57

080066fc <__multiply>:
 80066fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006700:	4617      	mov	r7, r2
 8006702:	690a      	ldr	r2, [r1, #16]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	4689      	mov	r9, r1
 8006708:	429a      	cmp	r2, r3
 800670a:	bfa2      	ittt	ge
 800670c:	463b      	movge	r3, r7
 800670e:	460f      	movge	r7, r1
 8006710:	4699      	movge	r9, r3
 8006712:	693d      	ldr	r5, [r7, #16]
 8006714:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	eb05 060a 	add.w	r6, r5, sl
 8006720:	42b3      	cmp	r3, r6
 8006722:	b085      	sub	sp, #20
 8006724:	bfb8      	it	lt
 8006726:	3101      	addlt	r1, #1
 8006728:	f7ff fe94 	bl	8006454 <_Balloc>
 800672c:	b930      	cbnz	r0, 800673c <__multiply+0x40>
 800672e:	4602      	mov	r2, r0
 8006730:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006734:	4b40      	ldr	r3, [pc, #256]	@ (8006838 <__multiply+0x13c>)
 8006736:	4841      	ldr	r0, [pc, #260]	@ (800683c <__multiply+0x140>)
 8006738:	f7fe fbc8 	bl	8004ecc <__assert_func>
 800673c:	f100 0414 	add.w	r4, r0, #20
 8006740:	4623      	mov	r3, r4
 8006742:	2200      	movs	r2, #0
 8006744:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006748:	4573      	cmp	r3, lr
 800674a:	d320      	bcc.n	800678e <__multiply+0x92>
 800674c:	f107 0814 	add.w	r8, r7, #20
 8006750:	f109 0114 	add.w	r1, r9, #20
 8006754:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006758:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800675c:	9302      	str	r3, [sp, #8]
 800675e:	1beb      	subs	r3, r5, r7
 8006760:	3b15      	subs	r3, #21
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	3304      	adds	r3, #4
 8006768:	3715      	adds	r7, #21
 800676a:	42bd      	cmp	r5, r7
 800676c:	bf38      	it	cc
 800676e:	2304      	movcc	r3, #4
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	9b02      	ldr	r3, [sp, #8]
 8006774:	9103      	str	r1, [sp, #12]
 8006776:	428b      	cmp	r3, r1
 8006778:	d80c      	bhi.n	8006794 <__multiply+0x98>
 800677a:	2e00      	cmp	r6, #0
 800677c:	dd03      	ble.n	8006786 <__multiply+0x8a>
 800677e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006782:	2b00      	cmp	r3, #0
 8006784:	d055      	beq.n	8006832 <__multiply+0x136>
 8006786:	6106      	str	r6, [r0, #16]
 8006788:	b005      	add	sp, #20
 800678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678e:	f843 2b04 	str.w	r2, [r3], #4
 8006792:	e7d9      	b.n	8006748 <__multiply+0x4c>
 8006794:	f8b1 a000 	ldrh.w	sl, [r1]
 8006798:	f1ba 0f00 	cmp.w	sl, #0
 800679c:	d01f      	beq.n	80067de <__multiply+0xe2>
 800679e:	46c4      	mov	ip, r8
 80067a0:	46a1      	mov	r9, r4
 80067a2:	2700      	movs	r7, #0
 80067a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067a8:	f8d9 3000 	ldr.w	r3, [r9]
 80067ac:	fa1f fb82 	uxth.w	fp, r2
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	fb0a 330b 	mla	r3, sl, fp, r3
 80067b6:	443b      	add	r3, r7
 80067b8:	f8d9 7000 	ldr.w	r7, [r9]
 80067bc:	0c12      	lsrs	r2, r2, #16
 80067be:	0c3f      	lsrs	r7, r7, #16
 80067c0:	fb0a 7202 	mla	r2, sl, r2, r7
 80067c4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067ce:	4565      	cmp	r5, ip
 80067d0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80067d4:	f849 3b04 	str.w	r3, [r9], #4
 80067d8:	d8e4      	bhi.n	80067a4 <__multiply+0xa8>
 80067da:	9b01      	ldr	r3, [sp, #4]
 80067dc:	50e7      	str	r7, [r4, r3]
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	3104      	adds	r1, #4
 80067e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067e6:	f1b9 0f00 	cmp.w	r9, #0
 80067ea:	d020      	beq.n	800682e <__multiply+0x132>
 80067ec:	4647      	mov	r7, r8
 80067ee:	46a4      	mov	ip, r4
 80067f0:	f04f 0a00 	mov.w	sl, #0
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	f8b7 b000 	ldrh.w	fp, [r7]
 80067fa:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	fb09 220b 	mla	r2, r9, fp, r2
 8006804:	4452      	add	r2, sl
 8006806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800680a:	f84c 3b04 	str.w	r3, [ip], #4
 800680e:	f857 3b04 	ldr.w	r3, [r7], #4
 8006812:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006816:	f8bc 3000 	ldrh.w	r3, [ip]
 800681a:	42bd      	cmp	r5, r7
 800681c:	fb09 330a 	mla	r3, r9, sl, r3
 8006820:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006824:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006828:	d8e5      	bhi.n	80067f6 <__multiply+0xfa>
 800682a:	9a01      	ldr	r2, [sp, #4]
 800682c:	50a3      	str	r3, [r4, r2]
 800682e:	3404      	adds	r4, #4
 8006830:	e79f      	b.n	8006772 <__multiply+0x76>
 8006832:	3e01      	subs	r6, #1
 8006834:	e7a1      	b.n	800677a <__multiply+0x7e>
 8006836:	bf00      	nop
 8006838:	080079e6 	.word	0x080079e6
 800683c:	08007a57 	.word	0x08007a57

08006840 <__pow5mult>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4615      	mov	r5, r2
 8006846:	f012 0203 	ands.w	r2, r2, #3
 800684a:	4607      	mov	r7, r0
 800684c:	460e      	mov	r6, r1
 800684e:	d007      	beq.n	8006860 <__pow5mult+0x20>
 8006850:	4c25      	ldr	r4, [pc, #148]	@ (80068e8 <__pow5mult+0xa8>)
 8006852:	3a01      	subs	r2, #1
 8006854:	2300      	movs	r3, #0
 8006856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800685a:	f7ff fe5d 	bl	8006518 <__multadd>
 800685e:	4606      	mov	r6, r0
 8006860:	10ad      	asrs	r5, r5, #2
 8006862:	d03d      	beq.n	80068e0 <__pow5mult+0xa0>
 8006864:	69fc      	ldr	r4, [r7, #28]
 8006866:	b97c      	cbnz	r4, 8006888 <__pow5mult+0x48>
 8006868:	2010      	movs	r0, #16
 800686a:	f7ff fd2b 	bl	80062c4 <malloc>
 800686e:	4602      	mov	r2, r0
 8006870:	61f8      	str	r0, [r7, #28]
 8006872:	b928      	cbnz	r0, 8006880 <__pow5mult+0x40>
 8006874:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006878:	4b1c      	ldr	r3, [pc, #112]	@ (80068ec <__pow5mult+0xac>)
 800687a:	481d      	ldr	r0, [pc, #116]	@ (80068f0 <__pow5mult+0xb0>)
 800687c:	f7fe fb26 	bl	8004ecc <__assert_func>
 8006880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006884:	6004      	str	r4, [r0, #0]
 8006886:	60c4      	str	r4, [r0, #12]
 8006888:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800688c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006890:	b94c      	cbnz	r4, 80068a6 <__pow5mult+0x66>
 8006892:	f240 2171 	movw	r1, #625	@ 0x271
 8006896:	4638      	mov	r0, r7
 8006898:	f7ff ff1a 	bl	80066d0 <__i2b>
 800689c:	2300      	movs	r3, #0
 800689e:	4604      	mov	r4, r0
 80068a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80068a4:	6003      	str	r3, [r0, #0]
 80068a6:	f04f 0900 	mov.w	r9, #0
 80068aa:	07eb      	lsls	r3, r5, #31
 80068ac:	d50a      	bpl.n	80068c4 <__pow5mult+0x84>
 80068ae:	4631      	mov	r1, r6
 80068b0:	4622      	mov	r2, r4
 80068b2:	4638      	mov	r0, r7
 80068b4:	f7ff ff22 	bl	80066fc <__multiply>
 80068b8:	4680      	mov	r8, r0
 80068ba:	4631      	mov	r1, r6
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff fe09 	bl	80064d4 <_Bfree>
 80068c2:	4646      	mov	r6, r8
 80068c4:	106d      	asrs	r5, r5, #1
 80068c6:	d00b      	beq.n	80068e0 <__pow5mult+0xa0>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	b938      	cbnz	r0, 80068dc <__pow5mult+0x9c>
 80068cc:	4622      	mov	r2, r4
 80068ce:	4621      	mov	r1, r4
 80068d0:	4638      	mov	r0, r7
 80068d2:	f7ff ff13 	bl	80066fc <__multiply>
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	f8c0 9000 	str.w	r9, [r0]
 80068dc:	4604      	mov	r4, r0
 80068de:	e7e4      	b.n	80068aa <__pow5mult+0x6a>
 80068e0:	4630      	mov	r0, r6
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	bf00      	nop
 80068e8:	08007b18 	.word	0x08007b18
 80068ec:	080078cc 	.word	0x080078cc
 80068f0:	08007a57 	.word	0x08007a57

080068f4 <__lshift>:
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	460c      	mov	r4, r1
 80068fa:	4607      	mov	r7, r0
 80068fc:	4691      	mov	r9, r2
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	6849      	ldr	r1, [r1, #4]
 8006902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800690c:	f108 0601 	add.w	r6, r8, #1
 8006910:	42b3      	cmp	r3, r6
 8006912:	db0b      	blt.n	800692c <__lshift+0x38>
 8006914:	4638      	mov	r0, r7
 8006916:	f7ff fd9d 	bl	8006454 <_Balloc>
 800691a:	4605      	mov	r5, r0
 800691c:	b948      	cbnz	r0, 8006932 <__lshift+0x3e>
 800691e:	4602      	mov	r2, r0
 8006920:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006924:	4b27      	ldr	r3, [pc, #156]	@ (80069c4 <__lshift+0xd0>)
 8006926:	4828      	ldr	r0, [pc, #160]	@ (80069c8 <__lshift+0xd4>)
 8006928:	f7fe fad0 	bl	8004ecc <__assert_func>
 800692c:	3101      	adds	r1, #1
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	e7ee      	b.n	8006910 <__lshift+0x1c>
 8006932:	2300      	movs	r3, #0
 8006934:	f100 0114 	add.w	r1, r0, #20
 8006938:	f100 0210 	add.w	r2, r0, #16
 800693c:	4618      	mov	r0, r3
 800693e:	4553      	cmp	r3, sl
 8006940:	db33      	blt.n	80069aa <__lshift+0xb6>
 8006942:	6920      	ldr	r0, [r4, #16]
 8006944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006948:	f104 0314 	add.w	r3, r4, #20
 800694c:	f019 091f 	ands.w	r9, r9, #31
 8006950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006954:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006958:	d02b      	beq.n	80069b2 <__lshift+0xbe>
 800695a:	468a      	mov	sl, r1
 800695c:	2200      	movs	r2, #0
 800695e:	f1c9 0e20 	rsb	lr, r9, #32
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	fa00 f009 	lsl.w	r0, r0, r9
 8006968:	4310      	orrs	r0, r2
 800696a:	f84a 0b04 	str.w	r0, [sl], #4
 800696e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006972:	459c      	cmp	ip, r3
 8006974:	fa22 f20e 	lsr.w	r2, r2, lr
 8006978:	d8f3      	bhi.n	8006962 <__lshift+0x6e>
 800697a:	ebac 0304 	sub.w	r3, ip, r4
 800697e:	3b15      	subs	r3, #21
 8006980:	f023 0303 	bic.w	r3, r3, #3
 8006984:	3304      	adds	r3, #4
 8006986:	f104 0015 	add.w	r0, r4, #21
 800698a:	4560      	cmp	r0, ip
 800698c:	bf88      	it	hi
 800698e:	2304      	movhi	r3, #4
 8006990:	50ca      	str	r2, [r1, r3]
 8006992:	b10a      	cbz	r2, 8006998 <__lshift+0xa4>
 8006994:	f108 0602 	add.w	r6, r8, #2
 8006998:	3e01      	subs	r6, #1
 800699a:	4638      	mov	r0, r7
 800699c:	4621      	mov	r1, r4
 800699e:	612e      	str	r6, [r5, #16]
 80069a0:	f7ff fd98 	bl	80064d4 <_Bfree>
 80069a4:	4628      	mov	r0, r5
 80069a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80069ae:	3301      	adds	r3, #1
 80069b0:	e7c5      	b.n	800693e <__lshift+0x4a>
 80069b2:	3904      	subs	r1, #4
 80069b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b8:	459c      	cmp	ip, r3
 80069ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80069be:	d8f9      	bhi.n	80069b4 <__lshift+0xc0>
 80069c0:	e7ea      	b.n	8006998 <__lshift+0xa4>
 80069c2:	bf00      	nop
 80069c4:	080079e6 	.word	0x080079e6
 80069c8:	08007a57 	.word	0x08007a57

080069cc <__mcmp>:
 80069cc:	4603      	mov	r3, r0
 80069ce:	690a      	ldr	r2, [r1, #16]
 80069d0:	6900      	ldr	r0, [r0, #16]
 80069d2:	b530      	push	{r4, r5, lr}
 80069d4:	1a80      	subs	r0, r0, r2
 80069d6:	d10e      	bne.n	80069f6 <__mcmp+0x2a>
 80069d8:	3314      	adds	r3, #20
 80069da:	3114      	adds	r1, #20
 80069dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069ec:	4295      	cmp	r5, r2
 80069ee:	d003      	beq.n	80069f8 <__mcmp+0x2c>
 80069f0:	d205      	bcs.n	80069fe <__mcmp+0x32>
 80069f2:	f04f 30ff 	mov.w	r0, #4294967295
 80069f6:	bd30      	pop	{r4, r5, pc}
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	d3f3      	bcc.n	80069e4 <__mcmp+0x18>
 80069fc:	e7fb      	b.n	80069f6 <__mcmp+0x2a>
 80069fe:	2001      	movs	r0, #1
 8006a00:	e7f9      	b.n	80069f6 <__mcmp+0x2a>
	...

08006a04 <__mdiff>:
 8006a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a08:	4689      	mov	r9, r1
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	4648      	mov	r0, r9
 8006a10:	4614      	mov	r4, r2
 8006a12:	f7ff ffdb 	bl	80069cc <__mcmp>
 8006a16:	1e05      	subs	r5, r0, #0
 8006a18:	d112      	bne.n	8006a40 <__mdiff+0x3c>
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7ff fd19 	bl	8006454 <_Balloc>
 8006a22:	4602      	mov	r2, r0
 8006a24:	b928      	cbnz	r0, 8006a32 <__mdiff+0x2e>
 8006a26:	f240 2137 	movw	r1, #567	@ 0x237
 8006a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b24 <__mdiff+0x120>)
 8006a2c:	483e      	ldr	r0, [pc, #248]	@ (8006b28 <__mdiff+0x124>)
 8006a2e:	f7fe fa4d 	bl	8004ecc <__assert_func>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a38:	4610      	mov	r0, r2
 8006a3a:	b003      	add	sp, #12
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	bfbc      	itt	lt
 8006a42:	464b      	movlt	r3, r9
 8006a44:	46a1      	movlt	r9, r4
 8006a46:	4630      	mov	r0, r6
 8006a48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a4c:	bfba      	itte	lt
 8006a4e:	461c      	movlt	r4, r3
 8006a50:	2501      	movlt	r5, #1
 8006a52:	2500      	movge	r5, #0
 8006a54:	f7ff fcfe 	bl	8006454 <_Balloc>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	b918      	cbnz	r0, 8006a64 <__mdiff+0x60>
 8006a5c:	f240 2145 	movw	r1, #581	@ 0x245
 8006a60:	4b30      	ldr	r3, [pc, #192]	@ (8006b24 <__mdiff+0x120>)
 8006a62:	e7e3      	b.n	8006a2c <__mdiff+0x28>
 8006a64:	f100 0b14 	add.w	fp, r0, #20
 8006a68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a6c:	f109 0310 	add.w	r3, r9, #16
 8006a70:	60c5      	str	r5, [r0, #12]
 8006a72:	f04f 0c00 	mov.w	ip, #0
 8006a76:	f109 0514 	add.w	r5, r9, #20
 8006a7a:	46d9      	mov	r9, fp
 8006a7c:	6926      	ldr	r6, [r4, #16]
 8006a7e:	f104 0e14 	add.w	lr, r4, #20
 8006a82:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a86:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	9b01      	ldr	r3, [sp, #4]
 8006a8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a96:	b281      	uxth	r1, r0
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	fa1f f38a 	uxth.w	r3, sl
 8006a9e:	1a5b      	subs	r3, r3, r1
 8006aa0:	0c00      	lsrs	r0, r0, #16
 8006aa2:	4463      	add	r3, ip
 8006aa4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006aa8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ab2:	4576      	cmp	r6, lr
 8006ab4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ab8:	f849 3b04 	str.w	r3, [r9], #4
 8006abc:	d8e6      	bhi.n	8006a8c <__mdiff+0x88>
 8006abe:	1b33      	subs	r3, r6, r4
 8006ac0:	3b15      	subs	r3, #21
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	3415      	adds	r4, #21
 8006ac8:	3304      	adds	r3, #4
 8006aca:	42a6      	cmp	r6, r4
 8006acc:	bf38      	it	cc
 8006ace:	2304      	movcc	r3, #4
 8006ad0:	441d      	add	r5, r3
 8006ad2:	445b      	add	r3, fp
 8006ad4:	461e      	mov	r6, r3
 8006ad6:	462c      	mov	r4, r5
 8006ad8:	4544      	cmp	r4, r8
 8006ada:	d30e      	bcc.n	8006afa <__mdiff+0xf6>
 8006adc:	f108 0103 	add.w	r1, r8, #3
 8006ae0:	1b49      	subs	r1, r1, r5
 8006ae2:	f021 0103 	bic.w	r1, r1, #3
 8006ae6:	3d03      	subs	r5, #3
 8006ae8:	45a8      	cmp	r8, r5
 8006aea:	bf38      	it	cc
 8006aec:	2100      	movcc	r1, #0
 8006aee:	440b      	add	r3, r1
 8006af0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006af4:	b199      	cbz	r1, 8006b1e <__mdiff+0x11a>
 8006af6:	6117      	str	r7, [r2, #16]
 8006af8:	e79e      	b.n	8006a38 <__mdiff+0x34>
 8006afa:	46e6      	mov	lr, ip
 8006afc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b00:	fa1f fc81 	uxth.w	ip, r1
 8006b04:	44f4      	add	ip, lr
 8006b06:	0c08      	lsrs	r0, r1, #16
 8006b08:	4471      	add	r1, lr
 8006b0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b0e:	b289      	uxth	r1, r1
 8006b10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b18:	f846 1b04 	str.w	r1, [r6], #4
 8006b1c:	e7dc      	b.n	8006ad8 <__mdiff+0xd4>
 8006b1e:	3f01      	subs	r7, #1
 8006b20:	e7e6      	b.n	8006af0 <__mdiff+0xec>
 8006b22:	bf00      	nop
 8006b24:	080079e6 	.word	0x080079e6
 8006b28:	08007a57 	.word	0x08007a57

08006b2c <__ulp>:
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <__ulp+0x3c>)
 8006b2e:	400b      	ands	r3, r1
 8006b30:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	dc08      	bgt.n	8006b4a <__ulp+0x1e>
 8006b38:	425b      	negs	r3, r3
 8006b3a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006b3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b42:	da04      	bge.n	8006b4e <__ulp+0x22>
 8006b44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006b48:	4113      	asrs	r3, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	e008      	b.n	8006b60 <__ulp+0x34>
 8006b4e:	f1a2 0314 	sub.w	r3, r2, #20
 8006b52:	2b1e      	cmp	r3, #30
 8006b54:	bfd6      	itet	le
 8006b56:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006b5a:	2201      	movgt	r2, #1
 8006b5c:	40da      	lsrle	r2, r3
 8006b5e:	2300      	movs	r3, #0
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	7ff00000 	.word	0x7ff00000

08006b6c <__b2d>:
 8006b6c:	6902      	ldr	r2, [r0, #16]
 8006b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b70:	f100 0614 	add.w	r6, r0, #20
 8006b74:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006b78:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006b7c:	4f1e      	ldr	r7, [pc, #120]	@ (8006bf8 <__b2d+0x8c>)
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f7ff fd5a 	bl	8006638 <__hi0bits>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f1c0 0020 	rsb	r0, r0, #32
 8006b8a:	2b0a      	cmp	r3, #10
 8006b8c:	f1a2 0504 	sub.w	r5, r2, #4
 8006b90:	6008      	str	r0, [r1, #0]
 8006b92:	dc12      	bgt.n	8006bba <__b2d+0x4e>
 8006b94:	42ae      	cmp	r6, r5
 8006b96:	bf2c      	ite	cs
 8006b98:	2200      	movcs	r2, #0
 8006b9a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006b9e:	f1c3 0c0b 	rsb	ip, r3, #11
 8006ba2:	3315      	adds	r3, #21
 8006ba4:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006ba8:	fa04 f303 	lsl.w	r3, r4, r3
 8006bac:	fa22 f20c 	lsr.w	r2, r2, ip
 8006bb0:	ea4e 0107 	orr.w	r1, lr, r7
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bba:	42ae      	cmp	r6, r5
 8006bbc:	bf36      	itet	cc
 8006bbe:	f1a2 0508 	subcc.w	r5, r2, #8
 8006bc2:	2200      	movcs	r2, #0
 8006bc4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006bc8:	3b0b      	subs	r3, #11
 8006bca:	d012      	beq.n	8006bf2 <__b2d+0x86>
 8006bcc:	f1c3 0720 	rsb	r7, r3, #32
 8006bd0:	fa22 f107 	lsr.w	r1, r2, r7
 8006bd4:	409c      	lsls	r4, r3
 8006bd6:	430c      	orrs	r4, r1
 8006bd8:	42b5      	cmp	r5, r6
 8006bda:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006bde:	bf94      	ite	ls
 8006be0:	2400      	movls	r4, #0
 8006be2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006be6:	409a      	lsls	r2, r3
 8006be8:	40fc      	lsrs	r4, r7
 8006bea:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006bee:	4322      	orrs	r2, r4
 8006bf0:	e7e1      	b.n	8006bb6 <__b2d+0x4a>
 8006bf2:	ea44 0107 	orr.w	r1, r4, r7
 8006bf6:	e7de      	b.n	8006bb6 <__b2d+0x4a>
 8006bf8:	3ff00000 	.word	0x3ff00000

08006bfc <__d2b>:
 8006bfc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006c00:	2101      	movs	r1, #1
 8006c02:	4690      	mov	r8, r2
 8006c04:	4699      	mov	r9, r3
 8006c06:	9e08      	ldr	r6, [sp, #32]
 8006c08:	f7ff fc24 	bl	8006454 <_Balloc>
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	b930      	cbnz	r0, 8006c1e <__d2b+0x22>
 8006c10:	4602      	mov	r2, r0
 8006c12:	f240 310f 	movw	r1, #783	@ 0x30f
 8006c16:	4b23      	ldr	r3, [pc, #140]	@ (8006ca4 <__d2b+0xa8>)
 8006c18:	4823      	ldr	r0, [pc, #140]	@ (8006ca8 <__d2b+0xac>)
 8006c1a:	f7fe f957 	bl	8004ecc <__assert_func>
 8006c1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c26:	b10d      	cbz	r5, 8006c2c <__d2b+0x30>
 8006c28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	f1b8 0300 	subs.w	r3, r8, #0
 8006c32:	d024      	beq.n	8006c7e <__d2b+0x82>
 8006c34:	4668      	mov	r0, sp
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	f7ff fd1d 	bl	8006676 <__lo0bits>
 8006c3c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c40:	b1d8      	cbz	r0, 8006c7a <__d2b+0x7e>
 8006c42:	f1c0 0320 	rsb	r3, r0, #32
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	40c2      	lsrs	r2, r0
 8006c4e:	6163      	str	r3, [r4, #20]
 8006c50:	9201      	str	r2, [sp, #4]
 8006c52:	9b01      	ldr	r3, [sp, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bf0c      	ite	eq
 8006c58:	2201      	moveq	r2, #1
 8006c5a:	2202      	movne	r2, #2
 8006c5c:	61a3      	str	r3, [r4, #24]
 8006c5e:	6122      	str	r2, [r4, #16]
 8006c60:	b1ad      	cbz	r5, 8006c8e <__d2b+0x92>
 8006c62:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c66:	4405      	add	r5, r0
 8006c68:	6035      	str	r5, [r6, #0]
 8006c6a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c70:	6018      	str	r0, [r3, #0]
 8006c72:	4620      	mov	r0, r4
 8006c74:	b002      	add	sp, #8
 8006c76:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006c7a:	6161      	str	r1, [r4, #20]
 8006c7c:	e7e9      	b.n	8006c52 <__d2b+0x56>
 8006c7e:	a801      	add	r0, sp, #4
 8006c80:	f7ff fcf9 	bl	8006676 <__lo0bits>
 8006c84:	9b01      	ldr	r3, [sp, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	6163      	str	r3, [r4, #20]
 8006c8a:	3020      	adds	r0, #32
 8006c8c:	e7e7      	b.n	8006c5e <__d2b+0x62>
 8006c8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c96:	6030      	str	r0, [r6, #0]
 8006c98:	6918      	ldr	r0, [r3, #16]
 8006c9a:	f7ff fccd 	bl	8006638 <__hi0bits>
 8006c9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ca2:	e7e4      	b.n	8006c6e <__d2b+0x72>
 8006ca4:	080079e6 	.word	0x080079e6
 8006ca8:	08007a57 	.word	0x08007a57

08006cac <__ratio>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	e9cd 1000 	strd	r1, r0, [sp]
 8006cb6:	a902      	add	r1, sp, #8
 8006cb8:	f7ff ff58 	bl	8006b6c <__b2d>
 8006cbc:	468b      	mov	fp, r1
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	460f      	mov	r7, r1
 8006cc2:	9800      	ldr	r0, [sp, #0]
 8006cc4:	a903      	add	r1, sp, #12
 8006cc6:	f7ff ff51 	bl	8006b6c <__b2d>
 8006cca:	460d      	mov	r5, r1
 8006ccc:	9b01      	ldr	r3, [sp, #4]
 8006cce:	4689      	mov	r9, r1
 8006cd0:	6919      	ldr	r1, [r3, #16]
 8006cd2:	9b00      	ldr	r3, [sp, #0]
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	4630      	mov	r0, r6
 8006cda:	1ac9      	subs	r1, r1, r3
 8006cdc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bfcd      	iteet	gt
 8006cea:	463a      	movgt	r2, r7
 8006cec:	462a      	movle	r2, r5
 8006cee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006cf2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006cf6:	bfd8      	it	le
 8006cf8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	4622      	mov	r2, r4
 8006d00:	4659      	mov	r1, fp
 8006d02:	f7f9 fd13 	bl	800072c <__aeabi_ddiv>
 8006d06:	b005      	add	sp, #20
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d0c <__copybits>:
 8006d0c:	3901      	subs	r1, #1
 8006d0e:	b570      	push	{r4, r5, r6, lr}
 8006d10:	1149      	asrs	r1, r1, #5
 8006d12:	6914      	ldr	r4, [r2, #16]
 8006d14:	3101      	adds	r1, #1
 8006d16:	f102 0314 	add.w	r3, r2, #20
 8006d1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d22:	1f05      	subs	r5, r0, #4
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d30c      	bcc.n	8006d42 <__copybits+0x36>
 8006d28:	1aa3      	subs	r3, r4, r2
 8006d2a:	3b11      	subs	r3, #17
 8006d2c:	f023 0303 	bic.w	r3, r3, #3
 8006d30:	3211      	adds	r2, #17
 8006d32:	42a2      	cmp	r2, r4
 8006d34:	bf88      	it	hi
 8006d36:	2300      	movhi	r3, #0
 8006d38:	4418      	add	r0, r3
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	4288      	cmp	r0, r1
 8006d3e:	d305      	bcc.n	8006d4c <__copybits+0x40>
 8006d40:	bd70      	pop	{r4, r5, r6, pc}
 8006d42:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d46:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d4a:	e7eb      	b.n	8006d24 <__copybits+0x18>
 8006d4c:	f840 3b04 	str.w	r3, [r0], #4
 8006d50:	e7f4      	b.n	8006d3c <__copybits+0x30>

08006d52 <__any_on>:
 8006d52:	f100 0214 	add.w	r2, r0, #20
 8006d56:	6900      	ldr	r0, [r0, #16]
 8006d58:	114b      	asrs	r3, r1, #5
 8006d5a:	4298      	cmp	r0, r3
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	db11      	blt.n	8006d84 <__any_on+0x32>
 8006d60:	dd0a      	ble.n	8006d78 <__any_on+0x26>
 8006d62:	f011 011f 	ands.w	r1, r1, #31
 8006d66:	d007      	beq.n	8006d78 <__any_on+0x26>
 8006d68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d6c:	fa24 f001 	lsr.w	r0, r4, r1
 8006d70:	fa00 f101 	lsl.w	r1, r0, r1
 8006d74:	428c      	cmp	r4, r1
 8006d76:	d10b      	bne.n	8006d90 <__any_on+0x3e>
 8006d78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d803      	bhi.n	8006d88 <__any_on+0x36>
 8006d80:	2000      	movs	r0, #0
 8006d82:	bd10      	pop	{r4, pc}
 8006d84:	4603      	mov	r3, r0
 8006d86:	e7f7      	b.n	8006d78 <__any_on+0x26>
 8006d88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d0f5      	beq.n	8006d7c <__any_on+0x2a>
 8006d90:	2001      	movs	r0, #1
 8006d92:	e7f6      	b.n	8006d82 <__any_on+0x30>

08006d94 <__ascii_wctomb>:
 8006d94:	4603      	mov	r3, r0
 8006d96:	4608      	mov	r0, r1
 8006d98:	b141      	cbz	r1, 8006dac <__ascii_wctomb+0x18>
 8006d9a:	2aff      	cmp	r2, #255	@ 0xff
 8006d9c:	d904      	bls.n	8006da8 <__ascii_wctomb+0x14>
 8006d9e:	228a      	movs	r2, #138	@ 0x8a
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	4770      	bx	lr
 8006da8:	2001      	movs	r0, #1
 8006daa:	700a      	strb	r2, [r1, #0]
 8006dac:	4770      	bx	lr

08006dae <__ssputs_r>:
 8006dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db2:	461f      	mov	r7, r3
 8006db4:	688e      	ldr	r6, [r1, #8]
 8006db6:	4682      	mov	sl, r0
 8006db8:	42be      	cmp	r6, r7
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4690      	mov	r8, r2
 8006dbe:	680b      	ldr	r3, [r1, #0]
 8006dc0:	d82d      	bhi.n	8006e1e <__ssputs_r+0x70>
 8006dc2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dc6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006dca:	d026      	beq.n	8006e1a <__ssputs_r+0x6c>
 8006dcc:	6965      	ldr	r5, [r4, #20]
 8006dce:	6909      	ldr	r1, [r1, #16]
 8006dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dd4:	eba3 0901 	sub.w	r9, r3, r1
 8006dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ddc:	1c7b      	adds	r3, r7, #1
 8006dde:	444b      	add	r3, r9
 8006de0:	106d      	asrs	r5, r5, #1
 8006de2:	429d      	cmp	r5, r3
 8006de4:	bf38      	it	cc
 8006de6:	461d      	movcc	r5, r3
 8006de8:	0553      	lsls	r3, r2, #21
 8006dea:	d527      	bpl.n	8006e3c <__ssputs_r+0x8e>
 8006dec:	4629      	mov	r1, r5
 8006dee:	f7ff fa93 	bl	8006318 <_malloc_r>
 8006df2:	4606      	mov	r6, r0
 8006df4:	b360      	cbz	r0, 8006e50 <__ssputs_r+0xa2>
 8006df6:	464a      	mov	r2, r9
 8006df8:	6921      	ldr	r1, [r4, #16]
 8006dfa:	f7fe f852 	bl	8004ea2 <memcpy>
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e08:	81a3      	strh	r3, [r4, #12]
 8006e0a:	6126      	str	r6, [r4, #16]
 8006e0c:	444e      	add	r6, r9
 8006e0e:	6026      	str	r6, [r4, #0]
 8006e10:	463e      	mov	r6, r7
 8006e12:	6165      	str	r5, [r4, #20]
 8006e14:	eba5 0509 	sub.w	r5, r5, r9
 8006e18:	60a5      	str	r5, [r4, #8]
 8006e1a:	42be      	cmp	r6, r7
 8006e1c:	d900      	bls.n	8006e20 <__ssputs_r+0x72>
 8006e1e:	463e      	mov	r6, r7
 8006e20:	4632      	mov	r2, r6
 8006e22:	4641      	mov	r1, r8
 8006e24:	6820      	ldr	r0, [r4, #0]
 8006e26:	f000 f9d3 	bl	80071d0 <memmove>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	68a3      	ldr	r3, [r4, #8]
 8006e2e:	1b9b      	subs	r3, r3, r6
 8006e30:	60a3      	str	r3, [r4, #8]
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	4433      	add	r3, r6
 8006e36:	6023      	str	r3, [r4, #0]
 8006e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	f000 fa0c 	bl	800725a <_realloc_r>
 8006e42:	4606      	mov	r6, r0
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1e0      	bne.n	8006e0a <__ssputs_r+0x5c>
 8006e48:	4650      	mov	r0, sl
 8006e4a:	6921      	ldr	r1, [r4, #16]
 8006e4c:	f7fe feb8 	bl	8005bc0 <_free_r>
 8006e50:	230c      	movs	r3, #12
 8006e52:	f8ca 3000 	str.w	r3, [sl]
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e60:	81a3      	strh	r3, [r4, #12]
 8006e62:	e7e9      	b.n	8006e38 <__ssputs_r+0x8a>

08006e64 <_svfiprintf_r>:
 8006e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	4698      	mov	r8, r3
 8006e6a:	898b      	ldrh	r3, [r1, #12]
 8006e6c:	4607      	mov	r7, r0
 8006e6e:	061b      	lsls	r3, r3, #24
 8006e70:	460d      	mov	r5, r1
 8006e72:	4614      	mov	r4, r2
 8006e74:	b09d      	sub	sp, #116	@ 0x74
 8006e76:	d510      	bpl.n	8006e9a <_svfiprintf_r+0x36>
 8006e78:	690b      	ldr	r3, [r1, #16]
 8006e7a:	b973      	cbnz	r3, 8006e9a <_svfiprintf_r+0x36>
 8006e7c:	2140      	movs	r1, #64	@ 0x40
 8006e7e:	f7ff fa4b 	bl	8006318 <_malloc_r>
 8006e82:	6028      	str	r0, [r5, #0]
 8006e84:	6128      	str	r0, [r5, #16]
 8006e86:	b930      	cbnz	r0, 8006e96 <_svfiprintf_r+0x32>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e90:	b01d      	add	sp, #116	@ 0x74
 8006e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e96:	2340      	movs	r3, #64	@ 0x40
 8006e98:	616b      	str	r3, [r5, #20]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9e:	2320      	movs	r3, #32
 8006ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ea4:	2330      	movs	r3, #48	@ 0x30
 8006ea6:	f04f 0901 	mov.w	r9, #1
 8006eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007048 <_svfiprintf_r+0x1e4>
 8006eb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	469a      	mov	sl, r3
 8006eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ebe:	b10a      	cbz	r2, 8006ec4 <_svfiprintf_r+0x60>
 8006ec0:	2a25      	cmp	r2, #37	@ 0x25
 8006ec2:	d1f9      	bne.n	8006eb8 <_svfiprintf_r+0x54>
 8006ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ec8:	d00b      	beq.n	8006ee2 <_svfiprintf_r+0x7e>
 8006eca:	465b      	mov	r3, fp
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f7ff ff6c 	bl	8006dae <__ssputs_r>
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f000 80a7 	beq.w	800702a <_svfiprintf_r+0x1c6>
 8006edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ede:	445a      	add	r2, fp
 8006ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 809f 	beq.w	800702a <_svfiprintf_r+0x1c6>
 8006eec:	2300      	movs	r3, #0
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ef6:	f10a 0a01 	add.w	sl, sl, #1
 8006efa:	9304      	str	r3, [sp, #16]
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f04:	4654      	mov	r4, sl
 8006f06:	2205      	movs	r2, #5
 8006f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0c:	484e      	ldr	r0, [pc, #312]	@ (8007048 <_svfiprintf_r+0x1e4>)
 8006f0e:	f7fd ffba 	bl	8004e86 <memchr>
 8006f12:	9a04      	ldr	r2, [sp, #16]
 8006f14:	b9d8      	cbnz	r0, 8006f4e <_svfiprintf_r+0xea>
 8006f16:	06d0      	lsls	r0, r2, #27
 8006f18:	bf44      	itt	mi
 8006f1a:	2320      	movmi	r3, #32
 8006f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f20:	0711      	lsls	r1, r2, #28
 8006f22:	bf44      	itt	mi
 8006f24:	232b      	movmi	r3, #43	@ 0x2b
 8006f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f30:	d015      	beq.n	8006f5e <_svfiprintf_r+0xfa>
 8006f32:	4654      	mov	r4, sl
 8006f34:	2000      	movs	r0, #0
 8006f36:	f04f 0c0a 	mov.w	ip, #10
 8006f3a:	9a07      	ldr	r2, [sp, #28]
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f42:	3b30      	subs	r3, #48	@ 0x30
 8006f44:	2b09      	cmp	r3, #9
 8006f46:	d94b      	bls.n	8006fe0 <_svfiprintf_r+0x17c>
 8006f48:	b1b0      	cbz	r0, 8006f78 <_svfiprintf_r+0x114>
 8006f4a:	9207      	str	r2, [sp, #28]
 8006f4c:	e014      	b.n	8006f78 <_svfiprintf_r+0x114>
 8006f4e:	eba0 0308 	sub.w	r3, r0, r8
 8006f52:	fa09 f303 	lsl.w	r3, r9, r3
 8006f56:	4313      	orrs	r3, r2
 8006f58:	46a2      	mov	sl, r4
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	e7d2      	b.n	8006f04 <_svfiprintf_r+0xa0>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	1d19      	adds	r1, r3, #4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	9103      	str	r1, [sp, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	bfbb      	ittet	lt
 8006f6a:	425b      	neglt	r3, r3
 8006f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f70:	9307      	strge	r3, [sp, #28]
 8006f72:	9307      	strlt	r3, [sp, #28]
 8006f74:	bfb8      	it	lt
 8006f76:	9204      	strlt	r2, [sp, #16]
 8006f78:	7823      	ldrb	r3, [r4, #0]
 8006f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f7c:	d10a      	bne.n	8006f94 <_svfiprintf_r+0x130>
 8006f7e:	7863      	ldrb	r3, [r4, #1]
 8006f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f82:	d132      	bne.n	8006fea <_svfiprintf_r+0x186>
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	3402      	adds	r4, #2
 8006f88:	1d1a      	adds	r2, r3, #4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	9203      	str	r2, [sp, #12]
 8006f8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f92:	9305      	str	r3, [sp, #20]
 8006f94:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800704c <_svfiprintf_r+0x1e8>
 8006f98:	2203      	movs	r2, #3
 8006f9a:	4650      	mov	r0, sl
 8006f9c:	7821      	ldrb	r1, [r4, #0]
 8006f9e:	f7fd ff72 	bl	8004e86 <memchr>
 8006fa2:	b138      	cbz	r0, 8006fb4 <_svfiprintf_r+0x150>
 8006fa4:	2240      	movs	r2, #64	@ 0x40
 8006fa6:	9b04      	ldr	r3, [sp, #16]
 8006fa8:	eba0 000a 	sub.w	r0, r0, sl
 8006fac:	4082      	lsls	r2, r0
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	3401      	adds	r4, #1
 8006fb2:	9304      	str	r3, [sp, #16]
 8006fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb8:	2206      	movs	r2, #6
 8006fba:	4825      	ldr	r0, [pc, #148]	@ (8007050 <_svfiprintf_r+0x1ec>)
 8006fbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fc0:	f7fd ff61 	bl	8004e86 <memchr>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d036      	beq.n	8007036 <_svfiprintf_r+0x1d2>
 8006fc8:	4b22      	ldr	r3, [pc, #136]	@ (8007054 <_svfiprintf_r+0x1f0>)
 8006fca:	bb1b      	cbnz	r3, 8007014 <_svfiprintf_r+0x1b0>
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	3307      	adds	r3, #7
 8006fd0:	f023 0307 	bic.w	r3, r3, #7
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fda:	4433      	add	r3, r6
 8006fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fde:	e76a      	b.n	8006eb6 <_svfiprintf_r+0x52>
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fe8:	e7a8      	b.n	8006f3c <_svfiprintf_r+0xd8>
 8006fea:	2300      	movs	r3, #0
 8006fec:	f04f 0c0a 	mov.w	ip, #10
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	3401      	adds	r4, #1
 8006ff4:	9305      	str	r3, [sp, #20]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ffc:	3a30      	subs	r2, #48	@ 0x30
 8006ffe:	2a09      	cmp	r2, #9
 8007000:	d903      	bls.n	800700a <_svfiprintf_r+0x1a6>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0c6      	beq.n	8006f94 <_svfiprintf_r+0x130>
 8007006:	9105      	str	r1, [sp, #20]
 8007008:	e7c4      	b.n	8006f94 <_svfiprintf_r+0x130>
 800700a:	4604      	mov	r4, r0
 800700c:	2301      	movs	r3, #1
 800700e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007012:	e7f0      	b.n	8006ff6 <_svfiprintf_r+0x192>
 8007014:	ab03      	add	r3, sp, #12
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	462a      	mov	r2, r5
 800701a:	4638      	mov	r0, r7
 800701c:	4b0e      	ldr	r3, [pc, #56]	@ (8007058 <_svfiprintf_r+0x1f4>)
 800701e:	a904      	add	r1, sp, #16
 8007020:	f7fd f944 	bl	80042ac <_printf_float>
 8007024:	1c42      	adds	r2, r0, #1
 8007026:	4606      	mov	r6, r0
 8007028:	d1d6      	bne.n	8006fd8 <_svfiprintf_r+0x174>
 800702a:	89ab      	ldrh	r3, [r5, #12]
 800702c:	065b      	lsls	r3, r3, #25
 800702e:	f53f af2d 	bmi.w	8006e8c <_svfiprintf_r+0x28>
 8007032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007034:	e72c      	b.n	8006e90 <_svfiprintf_r+0x2c>
 8007036:	ab03      	add	r3, sp, #12
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	462a      	mov	r2, r5
 800703c:	4638      	mov	r0, r7
 800703e:	4b06      	ldr	r3, [pc, #24]	@ (8007058 <_svfiprintf_r+0x1f4>)
 8007040:	a904      	add	r1, sp, #16
 8007042:	f7fd fbd1 	bl	80047e8 <_printf_i>
 8007046:	e7ed      	b.n	8007024 <_svfiprintf_r+0x1c0>
 8007048:	08007ab0 	.word	0x08007ab0
 800704c:	08007ab6 	.word	0x08007ab6
 8007050:	08007aba 	.word	0x08007aba
 8007054:	080042ad 	.word	0x080042ad
 8007058:	08006daf 	.word	0x08006daf

0800705c <__sflush_r>:
 800705c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	0716      	lsls	r6, r2, #28
 8007064:	4605      	mov	r5, r0
 8007066:	460c      	mov	r4, r1
 8007068:	d454      	bmi.n	8007114 <__sflush_r+0xb8>
 800706a:	684b      	ldr	r3, [r1, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dc02      	bgt.n	8007076 <__sflush_r+0x1a>
 8007070:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	dd48      	ble.n	8007108 <__sflush_r+0xac>
 8007076:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007078:	2e00      	cmp	r6, #0
 800707a:	d045      	beq.n	8007108 <__sflush_r+0xac>
 800707c:	2300      	movs	r3, #0
 800707e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007082:	682f      	ldr	r7, [r5, #0]
 8007084:	6a21      	ldr	r1, [r4, #32]
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	d030      	beq.n	80070ec <__sflush_r+0x90>
 800708a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	0759      	lsls	r1, r3, #29
 8007090:	d505      	bpl.n	800709e <__sflush_r+0x42>
 8007092:	6863      	ldr	r3, [r4, #4]
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007098:	b10b      	cbz	r3, 800709e <__sflush_r+0x42>
 800709a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800709c:	1ad2      	subs	r2, r2, r3
 800709e:	2300      	movs	r3, #0
 80070a0:	4628      	mov	r0, r5
 80070a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070a4:	6a21      	ldr	r1, [r4, #32]
 80070a6:	47b0      	blx	r6
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	d106      	bne.n	80070bc <__sflush_r+0x60>
 80070ae:	6829      	ldr	r1, [r5, #0]
 80070b0:	291d      	cmp	r1, #29
 80070b2:	d82b      	bhi.n	800710c <__sflush_r+0xb0>
 80070b4:	4a28      	ldr	r2, [pc, #160]	@ (8007158 <__sflush_r+0xfc>)
 80070b6:	40ca      	lsrs	r2, r1
 80070b8:	07d6      	lsls	r6, r2, #31
 80070ba:	d527      	bpl.n	800710c <__sflush_r+0xb0>
 80070bc:	2200      	movs	r2, #0
 80070be:	6062      	str	r2, [r4, #4]
 80070c0:	6922      	ldr	r2, [r4, #16]
 80070c2:	04d9      	lsls	r1, r3, #19
 80070c4:	6022      	str	r2, [r4, #0]
 80070c6:	d504      	bpl.n	80070d2 <__sflush_r+0x76>
 80070c8:	1c42      	adds	r2, r0, #1
 80070ca:	d101      	bne.n	80070d0 <__sflush_r+0x74>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b903      	cbnz	r3, 80070d2 <__sflush_r+0x76>
 80070d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80070d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070d4:	602f      	str	r7, [r5, #0]
 80070d6:	b1b9      	cbz	r1, 8007108 <__sflush_r+0xac>
 80070d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070dc:	4299      	cmp	r1, r3
 80070de:	d002      	beq.n	80070e6 <__sflush_r+0x8a>
 80070e0:	4628      	mov	r0, r5
 80070e2:	f7fe fd6d 	bl	8005bc0 <_free_r>
 80070e6:	2300      	movs	r3, #0
 80070e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80070ea:	e00d      	b.n	8007108 <__sflush_r+0xac>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b0      	blx	r6
 80070f2:	4602      	mov	r2, r0
 80070f4:	1c50      	adds	r0, r2, #1
 80070f6:	d1c9      	bne.n	800708c <__sflush_r+0x30>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0c6      	beq.n	800708c <__sflush_r+0x30>
 80070fe:	2b1d      	cmp	r3, #29
 8007100:	d001      	beq.n	8007106 <__sflush_r+0xaa>
 8007102:	2b16      	cmp	r3, #22
 8007104:	d11d      	bne.n	8007142 <__sflush_r+0xe6>
 8007106:	602f      	str	r7, [r5, #0]
 8007108:	2000      	movs	r0, #0
 800710a:	e021      	b.n	8007150 <__sflush_r+0xf4>
 800710c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007110:	b21b      	sxth	r3, r3
 8007112:	e01a      	b.n	800714a <__sflush_r+0xee>
 8007114:	690f      	ldr	r7, [r1, #16]
 8007116:	2f00      	cmp	r7, #0
 8007118:	d0f6      	beq.n	8007108 <__sflush_r+0xac>
 800711a:	0793      	lsls	r3, r2, #30
 800711c:	bf18      	it	ne
 800711e:	2300      	movne	r3, #0
 8007120:	680e      	ldr	r6, [r1, #0]
 8007122:	bf08      	it	eq
 8007124:	694b      	ldreq	r3, [r1, #20]
 8007126:	1bf6      	subs	r6, r6, r7
 8007128:	600f      	str	r7, [r1, #0]
 800712a:	608b      	str	r3, [r1, #8]
 800712c:	2e00      	cmp	r6, #0
 800712e:	ddeb      	ble.n	8007108 <__sflush_r+0xac>
 8007130:	4633      	mov	r3, r6
 8007132:	463a      	mov	r2, r7
 8007134:	4628      	mov	r0, r5
 8007136:	6a21      	ldr	r1, [r4, #32]
 8007138:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800713c:	47e0      	blx	ip
 800713e:	2800      	cmp	r0, #0
 8007140:	dc07      	bgt.n	8007152 <__sflush_r+0xf6>
 8007142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007152:	4407      	add	r7, r0
 8007154:	1a36      	subs	r6, r6, r0
 8007156:	e7e9      	b.n	800712c <__sflush_r+0xd0>
 8007158:	20400001 	.word	0x20400001

0800715c <_fflush_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	690b      	ldr	r3, [r1, #16]
 8007160:	4605      	mov	r5, r0
 8007162:	460c      	mov	r4, r1
 8007164:	b913      	cbnz	r3, 800716c <_fflush_r+0x10>
 8007166:	2500      	movs	r5, #0
 8007168:	4628      	mov	r0, r5
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	b118      	cbz	r0, 8007176 <_fflush_r+0x1a>
 800716e:	6a03      	ldr	r3, [r0, #32]
 8007170:	b90b      	cbnz	r3, 8007176 <_fflush_r+0x1a>
 8007172:	f7fd fce3 	bl	8004b3c <__sinit>
 8007176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0f3      	beq.n	8007166 <_fflush_r+0xa>
 800717e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007180:	07d0      	lsls	r0, r2, #31
 8007182:	d404      	bmi.n	800718e <_fflush_r+0x32>
 8007184:	0599      	lsls	r1, r3, #22
 8007186:	d402      	bmi.n	800718e <_fflush_r+0x32>
 8007188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800718a:	f7fd fe72 	bl	8004e72 <__retarget_lock_acquire_recursive>
 800718e:	4628      	mov	r0, r5
 8007190:	4621      	mov	r1, r4
 8007192:	f7ff ff63 	bl	800705c <__sflush_r>
 8007196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007198:	4605      	mov	r5, r0
 800719a:	07da      	lsls	r2, r3, #31
 800719c:	d4e4      	bmi.n	8007168 <_fflush_r+0xc>
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	059b      	lsls	r3, r3, #22
 80071a2:	d4e1      	bmi.n	8007168 <_fflush_r+0xc>
 80071a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071a6:	f7fd fe65 	bl	8004e74 <__retarget_lock_release_recursive>
 80071aa:	e7dd      	b.n	8007168 <_fflush_r+0xc>

080071ac <fiprintf>:
 80071ac:	b40e      	push	{r1, r2, r3}
 80071ae:	b503      	push	{r0, r1, lr}
 80071b0:	4601      	mov	r1, r0
 80071b2:	ab03      	add	r3, sp, #12
 80071b4:	4805      	ldr	r0, [pc, #20]	@ (80071cc <fiprintf+0x20>)
 80071b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ba:	6800      	ldr	r0, [r0, #0]
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	f000 f8a1 	bl	8007304 <_vfiprintf_r>
 80071c2:	b002      	add	sp, #8
 80071c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c8:	b003      	add	sp, #12
 80071ca:	4770      	bx	lr
 80071cc:	20000184 	.word	0x20000184

080071d0 <memmove>:
 80071d0:	4288      	cmp	r0, r1
 80071d2:	b510      	push	{r4, lr}
 80071d4:	eb01 0402 	add.w	r4, r1, r2
 80071d8:	d902      	bls.n	80071e0 <memmove+0x10>
 80071da:	4284      	cmp	r4, r0
 80071dc:	4623      	mov	r3, r4
 80071de:	d807      	bhi.n	80071f0 <memmove+0x20>
 80071e0:	1e43      	subs	r3, r0, #1
 80071e2:	42a1      	cmp	r1, r4
 80071e4:	d008      	beq.n	80071f8 <memmove+0x28>
 80071e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071ee:	e7f8      	b.n	80071e2 <memmove+0x12>
 80071f0:	4601      	mov	r1, r0
 80071f2:	4402      	add	r2, r0
 80071f4:	428a      	cmp	r2, r1
 80071f6:	d100      	bne.n	80071fa <memmove+0x2a>
 80071f8:	bd10      	pop	{r4, pc}
 80071fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007202:	e7f7      	b.n	80071f4 <memmove+0x24>

08007204 <_sbrk_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	2300      	movs	r3, #0
 8007208:	4d05      	ldr	r5, [pc, #20]	@ (8007220 <_sbrk_r+0x1c>)
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	602b      	str	r3, [r5, #0]
 8007210:	f7fa fb22 	bl	8001858 <_sbrk>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d102      	bne.n	800721e <_sbrk_r+0x1a>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	b103      	cbz	r3, 800721e <_sbrk_r+0x1a>
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	20000448 	.word	0x20000448

08007224 <abort>:
 8007224:	2006      	movs	r0, #6
 8007226:	b508      	push	{r3, lr}
 8007228:	f000 fa40 	bl	80076ac <raise>
 800722c:	2001      	movs	r0, #1
 800722e:	f7fa fa9e 	bl	800176e <_exit>

08007232 <_calloc_r>:
 8007232:	b570      	push	{r4, r5, r6, lr}
 8007234:	fba1 5402 	umull	r5, r4, r1, r2
 8007238:	b934      	cbnz	r4, 8007248 <_calloc_r+0x16>
 800723a:	4629      	mov	r1, r5
 800723c:	f7ff f86c 	bl	8006318 <_malloc_r>
 8007240:	4606      	mov	r6, r0
 8007242:	b928      	cbnz	r0, 8007250 <_calloc_r+0x1e>
 8007244:	4630      	mov	r0, r6
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	220c      	movs	r2, #12
 800724a:	2600      	movs	r6, #0
 800724c:	6002      	str	r2, [r0, #0]
 800724e:	e7f9      	b.n	8007244 <_calloc_r+0x12>
 8007250:	462a      	mov	r2, r5
 8007252:	4621      	mov	r1, r4
 8007254:	f7fd fd21 	bl	8004c9a <memset>
 8007258:	e7f4      	b.n	8007244 <_calloc_r+0x12>

0800725a <_realloc_r>:
 800725a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725e:	4607      	mov	r7, r0
 8007260:	4614      	mov	r4, r2
 8007262:	460d      	mov	r5, r1
 8007264:	b921      	cbnz	r1, 8007270 <_realloc_r+0x16>
 8007266:	4611      	mov	r1, r2
 8007268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800726c:	f7ff b854 	b.w	8006318 <_malloc_r>
 8007270:	b92a      	cbnz	r2, 800727e <_realloc_r+0x24>
 8007272:	f7fe fca5 	bl	8005bc0 <_free_r>
 8007276:	4625      	mov	r5, r4
 8007278:	4628      	mov	r0, r5
 800727a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800727e:	f000 fa31 	bl	80076e4 <_malloc_usable_size_r>
 8007282:	4284      	cmp	r4, r0
 8007284:	4606      	mov	r6, r0
 8007286:	d802      	bhi.n	800728e <_realloc_r+0x34>
 8007288:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800728c:	d8f4      	bhi.n	8007278 <_realloc_r+0x1e>
 800728e:	4621      	mov	r1, r4
 8007290:	4638      	mov	r0, r7
 8007292:	f7ff f841 	bl	8006318 <_malloc_r>
 8007296:	4680      	mov	r8, r0
 8007298:	b908      	cbnz	r0, 800729e <_realloc_r+0x44>
 800729a:	4645      	mov	r5, r8
 800729c:	e7ec      	b.n	8007278 <_realloc_r+0x1e>
 800729e:	42b4      	cmp	r4, r6
 80072a0:	4622      	mov	r2, r4
 80072a2:	4629      	mov	r1, r5
 80072a4:	bf28      	it	cs
 80072a6:	4632      	movcs	r2, r6
 80072a8:	f7fd fdfb 	bl	8004ea2 <memcpy>
 80072ac:	4629      	mov	r1, r5
 80072ae:	4638      	mov	r0, r7
 80072b0:	f7fe fc86 	bl	8005bc0 <_free_r>
 80072b4:	e7f1      	b.n	800729a <_realloc_r+0x40>

080072b6 <__sfputc_r>:
 80072b6:	6893      	ldr	r3, [r2, #8]
 80072b8:	b410      	push	{r4}
 80072ba:	3b01      	subs	r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	6093      	str	r3, [r2, #8]
 80072c0:	da07      	bge.n	80072d2 <__sfputc_r+0x1c>
 80072c2:	6994      	ldr	r4, [r2, #24]
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	db01      	blt.n	80072cc <__sfputc_r+0x16>
 80072c8:	290a      	cmp	r1, #10
 80072ca:	d102      	bne.n	80072d2 <__sfputc_r+0x1c>
 80072cc:	bc10      	pop	{r4}
 80072ce:	f000 b931 	b.w	8007534 <__swbuf_r>
 80072d2:	6813      	ldr	r3, [r2, #0]
 80072d4:	1c58      	adds	r0, r3, #1
 80072d6:	6010      	str	r0, [r2, #0]
 80072d8:	7019      	strb	r1, [r3, #0]
 80072da:	4608      	mov	r0, r1
 80072dc:	bc10      	pop	{r4}
 80072de:	4770      	bx	lr

080072e0 <__sfputs_r>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	4614      	mov	r4, r2
 80072e8:	18d5      	adds	r5, r2, r3
 80072ea:	42ac      	cmp	r4, r5
 80072ec:	d101      	bne.n	80072f2 <__sfputs_r+0x12>
 80072ee:	2000      	movs	r0, #0
 80072f0:	e007      	b.n	8007302 <__sfputs_r+0x22>
 80072f2:	463a      	mov	r2, r7
 80072f4:	4630      	mov	r0, r6
 80072f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fa:	f7ff ffdc 	bl	80072b6 <__sfputc_r>
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	d1f3      	bne.n	80072ea <__sfputs_r+0xa>
 8007302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007304 <_vfiprintf_r>:
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	460d      	mov	r5, r1
 800730a:	4614      	mov	r4, r2
 800730c:	4698      	mov	r8, r3
 800730e:	4606      	mov	r6, r0
 8007310:	b09d      	sub	sp, #116	@ 0x74
 8007312:	b118      	cbz	r0, 800731c <_vfiprintf_r+0x18>
 8007314:	6a03      	ldr	r3, [r0, #32]
 8007316:	b90b      	cbnz	r3, 800731c <_vfiprintf_r+0x18>
 8007318:	f7fd fc10 	bl	8004b3c <__sinit>
 800731c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800731e:	07d9      	lsls	r1, r3, #31
 8007320:	d405      	bmi.n	800732e <_vfiprintf_r+0x2a>
 8007322:	89ab      	ldrh	r3, [r5, #12]
 8007324:	059a      	lsls	r2, r3, #22
 8007326:	d402      	bmi.n	800732e <_vfiprintf_r+0x2a>
 8007328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800732a:	f7fd fda2 	bl	8004e72 <__retarget_lock_acquire_recursive>
 800732e:	89ab      	ldrh	r3, [r5, #12]
 8007330:	071b      	lsls	r3, r3, #28
 8007332:	d501      	bpl.n	8007338 <_vfiprintf_r+0x34>
 8007334:	692b      	ldr	r3, [r5, #16]
 8007336:	b99b      	cbnz	r3, 8007360 <_vfiprintf_r+0x5c>
 8007338:	4629      	mov	r1, r5
 800733a:	4630      	mov	r0, r6
 800733c:	f000 f938 	bl	80075b0 <__swsetup_r>
 8007340:	b170      	cbz	r0, 8007360 <_vfiprintf_r+0x5c>
 8007342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007344:	07dc      	lsls	r4, r3, #31
 8007346:	d504      	bpl.n	8007352 <_vfiprintf_r+0x4e>
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	b01d      	add	sp, #116	@ 0x74
 800734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	89ab      	ldrh	r3, [r5, #12]
 8007354:	0598      	lsls	r0, r3, #22
 8007356:	d4f7      	bmi.n	8007348 <_vfiprintf_r+0x44>
 8007358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800735a:	f7fd fd8b 	bl	8004e74 <__retarget_lock_release_recursive>
 800735e:	e7f3      	b.n	8007348 <_vfiprintf_r+0x44>
 8007360:	2300      	movs	r3, #0
 8007362:	9309      	str	r3, [sp, #36]	@ 0x24
 8007364:	2320      	movs	r3, #32
 8007366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800736a:	2330      	movs	r3, #48	@ 0x30
 800736c:	f04f 0901 	mov.w	r9, #1
 8007370:	f8cd 800c 	str.w	r8, [sp, #12]
 8007374:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007520 <_vfiprintf_r+0x21c>
 8007378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800737c:	4623      	mov	r3, r4
 800737e:	469a      	mov	sl, r3
 8007380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007384:	b10a      	cbz	r2, 800738a <_vfiprintf_r+0x86>
 8007386:	2a25      	cmp	r2, #37	@ 0x25
 8007388:	d1f9      	bne.n	800737e <_vfiprintf_r+0x7a>
 800738a:	ebba 0b04 	subs.w	fp, sl, r4
 800738e:	d00b      	beq.n	80073a8 <_vfiprintf_r+0xa4>
 8007390:	465b      	mov	r3, fp
 8007392:	4622      	mov	r2, r4
 8007394:	4629      	mov	r1, r5
 8007396:	4630      	mov	r0, r6
 8007398:	f7ff ffa2 	bl	80072e0 <__sfputs_r>
 800739c:	3001      	adds	r0, #1
 800739e:	f000 80a7 	beq.w	80074f0 <_vfiprintf_r+0x1ec>
 80073a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073a4:	445a      	add	r2, fp
 80073a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80073a8:	f89a 3000 	ldrb.w	r3, [sl]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 809f 	beq.w	80074f0 <_vfiprintf_r+0x1ec>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f04f 32ff 	mov.w	r2, #4294967295
 80073b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073bc:	f10a 0a01 	add.w	sl, sl, #1
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80073ca:	4654      	mov	r4, sl
 80073cc:	2205      	movs	r2, #5
 80073ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d2:	4853      	ldr	r0, [pc, #332]	@ (8007520 <_vfiprintf_r+0x21c>)
 80073d4:	f7fd fd57 	bl	8004e86 <memchr>
 80073d8:	9a04      	ldr	r2, [sp, #16]
 80073da:	b9d8      	cbnz	r0, 8007414 <_vfiprintf_r+0x110>
 80073dc:	06d1      	lsls	r1, r2, #27
 80073de:	bf44      	itt	mi
 80073e0:	2320      	movmi	r3, #32
 80073e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e6:	0713      	lsls	r3, r2, #28
 80073e8:	bf44      	itt	mi
 80073ea:	232b      	movmi	r3, #43	@ 0x2b
 80073ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073f0:	f89a 3000 	ldrb.w	r3, [sl]
 80073f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f6:	d015      	beq.n	8007424 <_vfiprintf_r+0x120>
 80073f8:	4654      	mov	r4, sl
 80073fa:	2000      	movs	r0, #0
 80073fc:	f04f 0c0a 	mov.w	ip, #10
 8007400:	9a07      	ldr	r2, [sp, #28]
 8007402:	4621      	mov	r1, r4
 8007404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007408:	3b30      	subs	r3, #48	@ 0x30
 800740a:	2b09      	cmp	r3, #9
 800740c:	d94b      	bls.n	80074a6 <_vfiprintf_r+0x1a2>
 800740e:	b1b0      	cbz	r0, 800743e <_vfiprintf_r+0x13a>
 8007410:	9207      	str	r2, [sp, #28]
 8007412:	e014      	b.n	800743e <_vfiprintf_r+0x13a>
 8007414:	eba0 0308 	sub.w	r3, r0, r8
 8007418:	fa09 f303 	lsl.w	r3, r9, r3
 800741c:	4313      	orrs	r3, r2
 800741e:	46a2      	mov	sl, r4
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	e7d2      	b.n	80073ca <_vfiprintf_r+0xc6>
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	1d19      	adds	r1, r3, #4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	9103      	str	r1, [sp, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	bfbb      	ittet	lt
 8007430:	425b      	neglt	r3, r3
 8007432:	f042 0202 	orrlt.w	r2, r2, #2
 8007436:	9307      	strge	r3, [sp, #28]
 8007438:	9307      	strlt	r3, [sp, #28]
 800743a:	bfb8      	it	lt
 800743c:	9204      	strlt	r2, [sp, #16]
 800743e:	7823      	ldrb	r3, [r4, #0]
 8007440:	2b2e      	cmp	r3, #46	@ 0x2e
 8007442:	d10a      	bne.n	800745a <_vfiprintf_r+0x156>
 8007444:	7863      	ldrb	r3, [r4, #1]
 8007446:	2b2a      	cmp	r3, #42	@ 0x2a
 8007448:	d132      	bne.n	80074b0 <_vfiprintf_r+0x1ac>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	3402      	adds	r4, #2
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	9203      	str	r2, [sp, #12]
 8007454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007524 <_vfiprintf_r+0x220>
 800745e:	2203      	movs	r2, #3
 8007460:	4650      	mov	r0, sl
 8007462:	7821      	ldrb	r1, [r4, #0]
 8007464:	f7fd fd0f 	bl	8004e86 <memchr>
 8007468:	b138      	cbz	r0, 800747a <_vfiprintf_r+0x176>
 800746a:	2240      	movs	r2, #64	@ 0x40
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	eba0 000a 	sub.w	r0, r0, sl
 8007472:	4082      	lsls	r2, r0
 8007474:	4313      	orrs	r3, r2
 8007476:	3401      	adds	r4, #1
 8007478:	9304      	str	r3, [sp, #16]
 800747a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747e:	2206      	movs	r2, #6
 8007480:	4829      	ldr	r0, [pc, #164]	@ (8007528 <_vfiprintf_r+0x224>)
 8007482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007486:	f7fd fcfe 	bl	8004e86 <memchr>
 800748a:	2800      	cmp	r0, #0
 800748c:	d03f      	beq.n	800750e <_vfiprintf_r+0x20a>
 800748e:	4b27      	ldr	r3, [pc, #156]	@ (800752c <_vfiprintf_r+0x228>)
 8007490:	bb1b      	cbnz	r3, 80074da <_vfiprintf_r+0x1d6>
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	3307      	adds	r3, #7
 8007496:	f023 0307 	bic.w	r3, r3, #7
 800749a:	3308      	adds	r3, #8
 800749c:	9303      	str	r3, [sp, #12]
 800749e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a0:	443b      	add	r3, r7
 80074a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a4:	e76a      	b.n	800737c <_vfiprintf_r+0x78>
 80074a6:	460c      	mov	r4, r1
 80074a8:	2001      	movs	r0, #1
 80074aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ae:	e7a8      	b.n	8007402 <_vfiprintf_r+0xfe>
 80074b0:	2300      	movs	r3, #0
 80074b2:	f04f 0c0a 	mov.w	ip, #10
 80074b6:	4619      	mov	r1, r3
 80074b8:	3401      	adds	r4, #1
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	4620      	mov	r0, r4
 80074be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c2:	3a30      	subs	r2, #48	@ 0x30
 80074c4:	2a09      	cmp	r2, #9
 80074c6:	d903      	bls.n	80074d0 <_vfiprintf_r+0x1cc>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0c6      	beq.n	800745a <_vfiprintf_r+0x156>
 80074cc:	9105      	str	r1, [sp, #20]
 80074ce:	e7c4      	b.n	800745a <_vfiprintf_r+0x156>
 80074d0:	4604      	mov	r4, r0
 80074d2:	2301      	movs	r3, #1
 80074d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d8:	e7f0      	b.n	80074bc <_vfiprintf_r+0x1b8>
 80074da:	ab03      	add	r3, sp, #12
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	462a      	mov	r2, r5
 80074e0:	4630      	mov	r0, r6
 80074e2:	4b13      	ldr	r3, [pc, #76]	@ (8007530 <_vfiprintf_r+0x22c>)
 80074e4:	a904      	add	r1, sp, #16
 80074e6:	f7fc fee1 	bl	80042ac <_printf_float>
 80074ea:	4607      	mov	r7, r0
 80074ec:	1c78      	adds	r0, r7, #1
 80074ee:	d1d6      	bne.n	800749e <_vfiprintf_r+0x19a>
 80074f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074f2:	07d9      	lsls	r1, r3, #31
 80074f4:	d405      	bmi.n	8007502 <_vfiprintf_r+0x1fe>
 80074f6:	89ab      	ldrh	r3, [r5, #12]
 80074f8:	059a      	lsls	r2, r3, #22
 80074fa:	d402      	bmi.n	8007502 <_vfiprintf_r+0x1fe>
 80074fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074fe:	f7fd fcb9 	bl	8004e74 <__retarget_lock_release_recursive>
 8007502:	89ab      	ldrh	r3, [r5, #12]
 8007504:	065b      	lsls	r3, r3, #25
 8007506:	f53f af1f 	bmi.w	8007348 <_vfiprintf_r+0x44>
 800750a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800750c:	e71e      	b.n	800734c <_vfiprintf_r+0x48>
 800750e:	ab03      	add	r3, sp, #12
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	462a      	mov	r2, r5
 8007514:	4630      	mov	r0, r6
 8007516:	4b06      	ldr	r3, [pc, #24]	@ (8007530 <_vfiprintf_r+0x22c>)
 8007518:	a904      	add	r1, sp, #16
 800751a:	f7fd f965 	bl	80047e8 <_printf_i>
 800751e:	e7e4      	b.n	80074ea <_vfiprintf_r+0x1e6>
 8007520:	08007ab0 	.word	0x08007ab0
 8007524:	08007ab6 	.word	0x08007ab6
 8007528:	08007aba 	.word	0x08007aba
 800752c:	080042ad 	.word	0x080042ad
 8007530:	080072e1 	.word	0x080072e1

08007534 <__swbuf_r>:
 8007534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007536:	460e      	mov	r6, r1
 8007538:	4614      	mov	r4, r2
 800753a:	4605      	mov	r5, r0
 800753c:	b118      	cbz	r0, 8007546 <__swbuf_r+0x12>
 800753e:	6a03      	ldr	r3, [r0, #32]
 8007540:	b90b      	cbnz	r3, 8007546 <__swbuf_r+0x12>
 8007542:	f7fd fafb 	bl	8004b3c <__sinit>
 8007546:	69a3      	ldr	r3, [r4, #24]
 8007548:	60a3      	str	r3, [r4, #8]
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	071a      	lsls	r2, r3, #28
 800754e:	d501      	bpl.n	8007554 <__swbuf_r+0x20>
 8007550:	6923      	ldr	r3, [r4, #16]
 8007552:	b943      	cbnz	r3, 8007566 <__swbuf_r+0x32>
 8007554:	4621      	mov	r1, r4
 8007556:	4628      	mov	r0, r5
 8007558:	f000 f82a 	bl	80075b0 <__swsetup_r>
 800755c:	b118      	cbz	r0, 8007566 <__swbuf_r+0x32>
 800755e:	f04f 37ff 	mov.w	r7, #4294967295
 8007562:	4638      	mov	r0, r7
 8007564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	6922      	ldr	r2, [r4, #16]
 800756a:	b2f6      	uxtb	r6, r6
 800756c:	1a98      	subs	r0, r3, r2
 800756e:	6963      	ldr	r3, [r4, #20]
 8007570:	4637      	mov	r7, r6
 8007572:	4283      	cmp	r3, r0
 8007574:	dc05      	bgt.n	8007582 <__swbuf_r+0x4e>
 8007576:	4621      	mov	r1, r4
 8007578:	4628      	mov	r0, r5
 800757a:	f7ff fdef 	bl	800715c <_fflush_r>
 800757e:	2800      	cmp	r0, #0
 8007580:	d1ed      	bne.n	800755e <__swbuf_r+0x2a>
 8007582:	68a3      	ldr	r3, [r4, #8]
 8007584:	3b01      	subs	r3, #1
 8007586:	60a3      	str	r3, [r4, #8]
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	6022      	str	r2, [r4, #0]
 800758e:	701e      	strb	r6, [r3, #0]
 8007590:	6962      	ldr	r2, [r4, #20]
 8007592:	1c43      	adds	r3, r0, #1
 8007594:	429a      	cmp	r2, r3
 8007596:	d004      	beq.n	80075a2 <__swbuf_r+0x6e>
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	07db      	lsls	r3, r3, #31
 800759c:	d5e1      	bpl.n	8007562 <__swbuf_r+0x2e>
 800759e:	2e0a      	cmp	r6, #10
 80075a0:	d1df      	bne.n	8007562 <__swbuf_r+0x2e>
 80075a2:	4621      	mov	r1, r4
 80075a4:	4628      	mov	r0, r5
 80075a6:	f7ff fdd9 	bl	800715c <_fflush_r>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d0d9      	beq.n	8007562 <__swbuf_r+0x2e>
 80075ae:	e7d6      	b.n	800755e <__swbuf_r+0x2a>

080075b0 <__swsetup_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4b29      	ldr	r3, [pc, #164]	@ (8007658 <__swsetup_r+0xa8>)
 80075b4:	4605      	mov	r5, r0
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	460c      	mov	r4, r1
 80075ba:	b118      	cbz	r0, 80075c4 <__swsetup_r+0x14>
 80075bc:	6a03      	ldr	r3, [r0, #32]
 80075be:	b90b      	cbnz	r3, 80075c4 <__swsetup_r+0x14>
 80075c0:	f7fd fabc 	bl	8004b3c <__sinit>
 80075c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c8:	0719      	lsls	r1, r3, #28
 80075ca:	d422      	bmi.n	8007612 <__swsetup_r+0x62>
 80075cc:	06da      	lsls	r2, r3, #27
 80075ce:	d407      	bmi.n	80075e0 <__swsetup_r+0x30>
 80075d0:	2209      	movs	r2, #9
 80075d2:	602a      	str	r2, [r5, #0]
 80075d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	81a3      	strh	r3, [r4, #12]
 80075de:	e033      	b.n	8007648 <__swsetup_r+0x98>
 80075e0:	0758      	lsls	r0, r3, #29
 80075e2:	d512      	bpl.n	800760a <__swsetup_r+0x5a>
 80075e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075e6:	b141      	cbz	r1, 80075fa <__swsetup_r+0x4a>
 80075e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075ec:	4299      	cmp	r1, r3
 80075ee:	d002      	beq.n	80075f6 <__swsetup_r+0x46>
 80075f0:	4628      	mov	r0, r5
 80075f2:	f7fe fae5 	bl	8005bc0 <_free_r>
 80075f6:	2300      	movs	r3, #0
 80075f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	2300      	movs	r3, #0
 8007604:	6063      	str	r3, [r4, #4]
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	f043 0308 	orr.w	r3, r3, #8
 8007610:	81a3      	strh	r3, [r4, #12]
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	b94b      	cbnz	r3, 800762a <__swsetup_r+0x7a>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800761c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007620:	d003      	beq.n	800762a <__swsetup_r+0x7a>
 8007622:	4621      	mov	r1, r4
 8007624:	4628      	mov	r0, r5
 8007626:	f000 f88a 	bl	800773e <__smakebuf_r>
 800762a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800762e:	f013 0201 	ands.w	r2, r3, #1
 8007632:	d00a      	beq.n	800764a <__swsetup_r+0x9a>
 8007634:	2200      	movs	r2, #0
 8007636:	60a2      	str	r2, [r4, #8]
 8007638:	6962      	ldr	r2, [r4, #20]
 800763a:	4252      	negs	r2, r2
 800763c:	61a2      	str	r2, [r4, #24]
 800763e:	6922      	ldr	r2, [r4, #16]
 8007640:	b942      	cbnz	r2, 8007654 <__swsetup_r+0xa4>
 8007642:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007646:	d1c5      	bne.n	80075d4 <__swsetup_r+0x24>
 8007648:	bd38      	pop	{r3, r4, r5, pc}
 800764a:	0799      	lsls	r1, r3, #30
 800764c:	bf58      	it	pl
 800764e:	6962      	ldrpl	r2, [r4, #20]
 8007650:	60a2      	str	r2, [r4, #8]
 8007652:	e7f4      	b.n	800763e <__swsetup_r+0x8e>
 8007654:	2000      	movs	r0, #0
 8007656:	e7f7      	b.n	8007648 <__swsetup_r+0x98>
 8007658:	20000184 	.word	0x20000184

0800765c <_raise_r>:
 800765c:	291f      	cmp	r1, #31
 800765e:	b538      	push	{r3, r4, r5, lr}
 8007660:	4605      	mov	r5, r0
 8007662:	460c      	mov	r4, r1
 8007664:	d904      	bls.n	8007670 <_raise_r+0x14>
 8007666:	2316      	movs	r3, #22
 8007668:	6003      	str	r3, [r0, #0]
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007672:	b112      	cbz	r2, 800767a <_raise_r+0x1e>
 8007674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007678:	b94b      	cbnz	r3, 800768e <_raise_r+0x32>
 800767a:	4628      	mov	r0, r5
 800767c:	f000 f830 	bl	80076e0 <_getpid_r>
 8007680:	4622      	mov	r2, r4
 8007682:	4601      	mov	r1, r0
 8007684:	4628      	mov	r0, r5
 8007686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800768a:	f000 b817 	b.w	80076bc <_kill_r>
 800768e:	2b01      	cmp	r3, #1
 8007690:	d00a      	beq.n	80076a8 <_raise_r+0x4c>
 8007692:	1c59      	adds	r1, r3, #1
 8007694:	d103      	bne.n	800769e <_raise_r+0x42>
 8007696:	2316      	movs	r3, #22
 8007698:	6003      	str	r3, [r0, #0]
 800769a:	2001      	movs	r0, #1
 800769c:	e7e7      	b.n	800766e <_raise_r+0x12>
 800769e:	2100      	movs	r1, #0
 80076a0:	4620      	mov	r0, r4
 80076a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076a6:	4798      	blx	r3
 80076a8:	2000      	movs	r0, #0
 80076aa:	e7e0      	b.n	800766e <_raise_r+0x12>

080076ac <raise>:
 80076ac:	4b02      	ldr	r3, [pc, #8]	@ (80076b8 <raise+0xc>)
 80076ae:	4601      	mov	r1, r0
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	f7ff bfd3 	b.w	800765c <_raise_r>
 80076b6:	bf00      	nop
 80076b8:	20000184 	.word	0x20000184

080076bc <_kill_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	2300      	movs	r3, #0
 80076c0:	4d06      	ldr	r5, [pc, #24]	@ (80076dc <_kill_r+0x20>)
 80076c2:	4604      	mov	r4, r0
 80076c4:	4608      	mov	r0, r1
 80076c6:	4611      	mov	r1, r2
 80076c8:	602b      	str	r3, [r5, #0]
 80076ca:	f7fa f840 	bl	800174e <_kill>
 80076ce:	1c43      	adds	r3, r0, #1
 80076d0:	d102      	bne.n	80076d8 <_kill_r+0x1c>
 80076d2:	682b      	ldr	r3, [r5, #0]
 80076d4:	b103      	cbz	r3, 80076d8 <_kill_r+0x1c>
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	bd38      	pop	{r3, r4, r5, pc}
 80076da:	bf00      	nop
 80076dc:	20000448 	.word	0x20000448

080076e0 <_getpid_r>:
 80076e0:	f7fa b82e 	b.w	8001740 <_getpid>

080076e4 <_malloc_usable_size_r>:
 80076e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e8:	1f18      	subs	r0, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfbc      	itt	lt
 80076ee:	580b      	ldrlt	r3, [r1, r0]
 80076f0:	18c0      	addlt	r0, r0, r3
 80076f2:	4770      	bx	lr

080076f4 <__swhatbuf_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	4615      	mov	r5, r2
 80076fe:	2900      	cmp	r1, #0
 8007700:	461e      	mov	r6, r3
 8007702:	b096      	sub	sp, #88	@ 0x58
 8007704:	da0c      	bge.n	8007720 <__swhatbuf_r+0x2c>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	2100      	movs	r1, #0
 800770a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800770e:	bf14      	ite	ne
 8007710:	2340      	movne	r3, #64	@ 0x40
 8007712:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007716:	2000      	movs	r0, #0
 8007718:	6031      	str	r1, [r6, #0]
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	b016      	add	sp, #88	@ 0x58
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	466a      	mov	r2, sp
 8007722:	f000 f849 	bl	80077b8 <_fstat_r>
 8007726:	2800      	cmp	r0, #0
 8007728:	dbed      	blt.n	8007706 <__swhatbuf_r+0x12>
 800772a:	9901      	ldr	r1, [sp, #4]
 800772c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007730:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007734:	4259      	negs	r1, r3
 8007736:	4159      	adcs	r1, r3
 8007738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800773c:	e7eb      	b.n	8007716 <__swhatbuf_r+0x22>

0800773e <__smakebuf_r>:
 800773e:	898b      	ldrh	r3, [r1, #12]
 8007740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007742:	079d      	lsls	r5, r3, #30
 8007744:	4606      	mov	r6, r0
 8007746:	460c      	mov	r4, r1
 8007748:	d507      	bpl.n	800775a <__smakebuf_r+0x1c>
 800774a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	6123      	str	r3, [r4, #16]
 8007752:	2301      	movs	r3, #1
 8007754:	6163      	str	r3, [r4, #20]
 8007756:	b003      	add	sp, #12
 8007758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800775a:	466a      	mov	r2, sp
 800775c:	ab01      	add	r3, sp, #4
 800775e:	f7ff ffc9 	bl	80076f4 <__swhatbuf_r>
 8007762:	9f00      	ldr	r7, [sp, #0]
 8007764:	4605      	mov	r5, r0
 8007766:	4639      	mov	r1, r7
 8007768:	4630      	mov	r0, r6
 800776a:	f7fe fdd5 	bl	8006318 <_malloc_r>
 800776e:	b948      	cbnz	r0, 8007784 <__smakebuf_r+0x46>
 8007770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007774:	059a      	lsls	r2, r3, #22
 8007776:	d4ee      	bmi.n	8007756 <__smakebuf_r+0x18>
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	e7e2      	b.n	800774a <__smakebuf_r+0xc>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800778a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	9b01      	ldr	r3, [sp, #4]
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	b15b      	cbz	r3, 80077ae <__smakebuf_r+0x70>
 8007796:	4630      	mov	r0, r6
 8007798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779c:	f000 f81e 	bl	80077dc <_isatty_r>
 80077a0:	b128      	cbz	r0, 80077ae <__smakebuf_r+0x70>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f023 0303 	bic.w	r3, r3, #3
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	431d      	orrs	r5, r3
 80077b2:	81a5      	strh	r5, [r4, #12]
 80077b4:	e7cf      	b.n	8007756 <__smakebuf_r+0x18>
	...

080077b8 <_fstat_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	2300      	movs	r3, #0
 80077bc:	4d06      	ldr	r5, [pc, #24]	@ (80077d8 <_fstat_r+0x20>)
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	4611      	mov	r1, r2
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	f7fa f821 	bl	800180c <_fstat>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d102      	bne.n	80077d4 <_fstat_r+0x1c>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	b103      	cbz	r3, 80077d4 <_fstat_r+0x1c>
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	bd38      	pop	{r3, r4, r5, pc}
 80077d6:	bf00      	nop
 80077d8:	20000448 	.word	0x20000448

080077dc <_isatty_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	2300      	movs	r3, #0
 80077e0:	4d05      	ldr	r5, [pc, #20]	@ (80077f8 <_isatty_r+0x1c>)
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	f7fa f81f 	bl	800182a <_isatty>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_isatty_r+0x1a>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_isatty_r+0x1a>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20000448 	.word	0x20000448

080077fc <_init>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr

08007808 <_fini>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr
