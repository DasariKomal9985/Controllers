
Rover_Ver_blue_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000330c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080034ac  080034ac  000044ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003504  08003504  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003504  08003504  00004504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800350c  0800350c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800350c  0800350c  0000450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003510  08003510  00004510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003514  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000005c  08003570  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08003570  00005228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008116  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d4  00000000  00000000  0000d1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000e878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053b  00000000  00000000  0000ef58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156ab  00000000  00000000  0000f493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b25  00000000  00000000  00024b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008517b  00000000  00000000  0002d663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b27de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002024  00000000  00000000  000b2824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b4848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003494 	.word	0x08003494

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003494 	.word	0x08003494

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fa28 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f830 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8c4 	bl	8000754 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f898 	bl	8000700 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_UART_Receive(&huart1, &rx, 1, HAL_MAX_DELAY) == HAL_OK)
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2201      	movs	r2, #1
 80005d6:	4910      	ldr	r1, [pc, #64]	@ (8000618 <main+0x5c>)
 80005d8:	4810      	ldr	r0, [pc, #64]	@ (800061c <main+0x60>)
 80005da:	f001 fae8 	bl	8001bae <HAL_UART_Receive>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1f5      	bne.n	80005d0 <main+0x14>
	      {
	          // Echo the character (optional)
	          HAL_UART_Transmit(&huart1, &rx, 1, HAL_MAX_DELAY);
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	2201      	movs	r2, #1
 80005ea:	490b      	ldr	r1, [pc, #44]	@ (8000618 <main+0x5c>)
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <main+0x60>)
 80005ee:	f001 fa53 	bl	8001a98 <HAL_UART_Transmit>

	          // Print the decimal value of the received byte

	          sprintf(msg, "Val: %d\r\n", rx);
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <main+0x5c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4909      	ldr	r1, [pc, #36]	@ (8000620 <main+0x64>)
 80005fa:	480a      	ldr	r0, [pc, #40]	@ (8000624 <main+0x68>)
 80005fc:	f002 faaa 	bl	8002b54 <siprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000600:	4808      	ldr	r0, [pc, #32]	@ (8000624 <main+0x68>)
 8000602:	f7ff fded 	bl	80001e0 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	4905      	ldr	r1, [pc, #20]	@ (8000624 <main+0x68>)
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <main+0x60>)
 8000612:	f001 fa41 	bl	8001a98 <HAL_UART_Transmit>
	  if (HAL_UART_Receive(&huart1, &rx, 1, HAL_MAX_DELAY) == HAL_OK)
 8000616:	e7db      	b.n	80005d0 <main+0x14>
 8000618:	20000078 	.word	0x20000078
 800061c:	20000090 	.word	0x20000090
 8000620:	080034ac 	.word	0x080034ac
 8000624:	2000007c 	.word	0x2000007c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	@ 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 faae 	bl	8002b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a28      	ldr	r2, [pc, #160]	@ (80006f8 <SystemClock_Config+0xd0>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <SystemClock_Config+0xd4>)
 8000676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fd48 	bl	8001148 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006be:	f000 f87f 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ffaa 	bl	8001638 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ea:	f000 f869 	bl	80007c0 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	@ 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_USART1_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 800070c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000738:	f001 f95e 	bl	80019f8 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f83d 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000090 	.word	0x20000090
 8000750:	40011000 	.word	0x40011000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_GPIO_Init+0x68>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a16      	ldr	r2, [pc, #88]	@ (80007bc <MX_GPIO_Init+0x68>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_GPIO_Init+0x68>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_GPIO_Init+0x68>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <MX_GPIO_Init+0x68>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <MX_GPIO_Init+0x68>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_GPIO_Init+0x68>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <MX_GPIO_Init+0x68>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_GPIO_Init+0x68>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <Error_Handler+0x8>

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	4a0f      	ldr	r2, [pc, #60]	@ (8000818 <HAL_MspInit+0x4c>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <HAL_MspInit+0x4c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a1d      	ldr	r2, [pc, #116]	@ (80008b0 <HAL_UART_MspInit+0x94>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d134      	bne.n	80008a8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <HAL_UART_MspInit+0x98>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <HAL_UART_MspInit+0x98>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6453      	str	r3, [r2, #68]	@ 0x44
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <HAL_UART_MspInit+0x98>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_UART_MspInit+0x98>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a14      	ldr	r2, [pc, #80]	@ (80008b4 <HAL_UART_MspInit+0x98>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_UART_MspInit+0x98>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000876:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000888:	2307      	movs	r3, #7
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4809      	ldr	r0, [pc, #36]	@ (80008b8 <HAL_UART_MspInit+0x9c>)
 8000894:	f000 fad4 	bl	8000e40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2025      	movs	r0, #37	@ 0x25
 800089e:	f000 fa06 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008a2:	2025      	movs	r0, #37	@ 0x25
 80008a4:	f000 fa1f 	bl	8000ce6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	@ 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40011000 	.word	0x40011000
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 f8d1 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <USART1_IRQHandler+0x10>)
 8000922:	f001 f9db 	bl	8001cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000090 	.word	0x20000090

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	@ (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f002 f922 	bl	8002ba8 <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20010000 	.word	0x20010000
 8000990:	00000400 	.word	0x00000400
 8000994:	200000d8 	.word	0x200000d8
 8000998:	20000228 	.word	0x20000228

0800099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009c4:	f7ff ffea 	bl	800099c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	@ (80009fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	@ (8000a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	@ (8000a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ee:	f002 f8e1 	bl	8002bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff fde3 	bl	80005bc <main>
  bx  lr    
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a04:	08003514 	.word	0x08003514
  ldr r2, =_sbss
 8000a08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a0c:	20000228 	.word	0x20000228

08000a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <HAL_Init+0x40>)
 8000a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <HAL_Init+0x40>)
 8000a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_Init+0x40>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f92b 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	200f      	movs	r0, #15
 8000a44:	f000 f808 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fec0 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023c00 	.word	0x40023c00

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x54>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_InitTick+0x58>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f943 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f90b 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	@ (8000ab4 <HAL_InitTick+0x5c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	200000dc 	.word	0x200000dc

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	200000dc 	.word	0x200000dc

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff29 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff3e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff31 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa2 	bl	8000c54 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff feda 	bl	8000ae0 <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d008      	beq.n	8000d4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e052      	b.n	8000df2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0216 	bic.w	r2, r2, #22
 8000d5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d103      	bne.n	8000d7c <HAL_DMA_Abort+0x62>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d007      	beq.n	8000d8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0208 	bic.w	r2, r2, #8
 8000d8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d9c:	e013      	b.n	8000dc6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d9e:	f7ff fe9f 	bl	8000ae0 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d90c      	bls.n	8000dc6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2220      	movs	r2, #32
 8000db0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2203      	movs	r2, #3
 8000db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e015      	b.n	8000df2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1e4      	bne.n	8000d9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dd8:	223f      	movs	r2, #63	@ 0x3f
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d004      	beq.n	8000e18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2280      	movs	r2, #128	@ 0x80
 8000e12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e00c      	b.n	8000e32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	e159      	b.n	8001110 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f040 8148 	bne.w	800110a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d005      	beq.n	8000e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d130      	bne.n	8000ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f003 0201 	and.w	r2, r3, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d017      	beq.n	8000f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d123      	bne.n	8000f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	69b9      	ldr	r1, [r7, #24]
 8000f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0203 	and.w	r2, r3, #3
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a2 	beq.w	800110a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b57      	ldr	r3, [pc, #348]	@ (8001128 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	4a56      	ldr	r2, [pc, #344]	@ (8001128 <HAL_GPIO_Init+0x2e8>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd6:	4b54      	ldr	r3, [pc, #336]	@ (8001128 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe2:	4a52      	ldr	r2, [pc, #328]	@ (800112c <HAL_GPIO_Init+0x2ec>)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a49      	ldr	r2, [pc, #292]	@ (8001130 <HAL_GPIO_Init+0x2f0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x202>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a48      	ldr	r2, [pc, #288]	@ (8001134 <HAL_GPIO_Init+0x2f4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x1fe>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a47      	ldr	r2, [pc, #284]	@ (8001138 <HAL_GPIO_Init+0x2f8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x1fa>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a46      	ldr	r2, [pc, #280]	@ (800113c <HAL_GPIO_Init+0x2fc>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x1f6>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a45      	ldr	r2, [pc, #276]	@ (8001140 <HAL_GPIO_Init+0x300>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x1f2>
 800102e:	2304      	movs	r3, #4
 8001030:	e008      	b.n	8001044 <HAL_GPIO_Init+0x204>
 8001032:	2307      	movs	r3, #7
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x204>
 8001036:	2303      	movs	r3, #3
 8001038:	e004      	b.n	8001044 <HAL_GPIO_Init+0x204>
 800103a:	2302      	movs	r3, #2
 800103c:	e002      	b.n	8001044 <HAL_GPIO_Init+0x204>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_GPIO_Init+0x204>
 8001042:	2300      	movs	r3, #0
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	f002 0203 	and.w	r2, r2, #3
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	4093      	lsls	r3, r2
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001054:	4935      	ldr	r1, [pc, #212]	@ (800112c <HAL_GPIO_Init+0x2ec>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b38      	ldr	r3, [pc, #224]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a2f      	ldr	r2, [pc, #188]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <HAL_GPIO_Init+0x304>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b6:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010da:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001104:	4a0f      	ldr	r2, [pc, #60]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3301      	adds	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	f67f aea2 	bls.w	8000e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40013800 	.word	0x40013800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021000 	.word	0x40021000
 8001144:	40013c00 	.word	0x40013c00

08001148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e267      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d075      	beq.n	8001252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001166:	4b88      	ldr	r3, [pc, #544]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b04      	cmp	r3, #4
 8001170:	d00c      	beq.n	800118c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001172:	4b85      	ldr	r3, [pc, #532]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800117a:	2b08      	cmp	r3, #8
 800117c:	d112      	bne.n	80011a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117e:	4b82      	ldr	r3, [pc, #520]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800118a:	d10b      	bne.n	80011a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	4b7e      	ldr	r3, [pc, #504]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d05b      	beq.n	8001250 <HAL_RCC_OscConfig+0x108>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d157      	bne.n	8001250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e242      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ac:	d106      	bne.n	80011bc <HAL_RCC_OscConfig+0x74>
 80011ae:	4b76      	ldr	r3, [pc, #472]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a75      	ldr	r2, [pc, #468]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e01d      	b.n	80011f8 <HAL_RCC_OscConfig+0xb0>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x98>
 80011c6:	4b70      	ldr	r3, [pc, #448]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a6c      	ldr	r2, [pc, #432]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0xb0>
 80011e0:	4b69      	ldr	r3, [pc, #420]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a68      	ldr	r2, [pc, #416]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a65      	ldr	r2, [pc, #404]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fc6e 	bl	8000ae0 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fc6a 	bl	8000ae0 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	@ 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e207      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	4b5b      	ldr	r3, [pc, #364]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0xc0>
 8001226:	e014      	b.n	8001252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fc5a 	bl	8000ae0 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fc56 	bl	8000ae0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	@ 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1f3      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	4b51      	ldr	r3, [pc, #324]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0xe8>
 800124e:	e000      	b.n	8001252 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d063      	beq.n	8001326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800125e:	4b4a      	ldr	r3, [pc, #296]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126a:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001272:	2b08      	cmp	r3, #8
 8001274:	d11c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001276:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x152>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d001      	beq.n	800129a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e1c7      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4937      	ldr	r1, [pc, #220]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	e03a      	b.n	8001326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b8:	4b34      	ldr	r3, [pc, #208]	@ (800138c <HAL_RCC_OscConfig+0x244>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012be:	f7ff fc0f 	bl	8000ae0 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc0b 	bl	8000ae0 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1a8      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4925      	ldr	r1, [pc, #148]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e015      	b.n	8001326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_RCC_OscConfig+0x244>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fbee 	bl	8000ae0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fbea 	bl	8000ae0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e187      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d036      	beq.n	80013a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d016      	beq.n	8001368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_RCC_OscConfig+0x248>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001340:	f7ff fbce 	bl	8000ae0 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff fbca 	bl	8000ae0 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e167      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <HAL_RCC_OscConfig+0x240>)
 800135c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x200>
 8001366:	e01b      	b.n	80013a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_RCC_OscConfig+0x248>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fbb7 	bl	8000ae0 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	e00e      	b.n	8001394 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff fbb3 	bl	8000ae0 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d907      	bls.n	8001394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e150      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
 8001388:	40023800 	.word	0x40023800
 800138c:	42470000 	.word	0x42470000
 8001390:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	4b88      	ldr	r3, [pc, #544]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 8001396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ea      	bne.n	8001376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 8097 	beq.w	80014dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b2:	4b81      	ldr	r3, [pc, #516]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b7d      	ldr	r3, [pc, #500]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	4a7c      	ldr	r2, [pc, #496]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ce:	4b7a      	ldr	r3, [pc, #488]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013da:	2301      	movs	r3, #1
 80013dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013de:	4b77      	ldr	r3, [pc, #476]	@ (80015bc <HAL_RCC_OscConfig+0x474>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d118      	bne.n	800141c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ea:	4b74      	ldr	r3, [pc, #464]	@ (80015bc <HAL_RCC_OscConfig+0x474>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a73      	ldr	r2, [pc, #460]	@ (80015bc <HAL_RCC_OscConfig+0x474>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fb73 	bl	8000ae0 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fe:	f7ff fb6f 	bl	8000ae0 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e10c      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	4b6a      	ldr	r3, [pc, #424]	@ (80015bc <HAL_RCC_OscConfig+0x474>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d106      	bne.n	8001432 <HAL_RCC_OscConfig+0x2ea>
 8001424:	4b64      	ldr	r3, [pc, #400]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001428:	4a63      	ldr	r2, [pc, #396]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001430:	e01c      	b.n	800146c <HAL_RCC_OscConfig+0x324>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x30c>
 800143a:	4b5f      	ldr	r3, [pc, #380]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143e:	4a5e      	ldr	r2, [pc, #376]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6713      	str	r3, [r2, #112]	@ 0x70
 8001446:	4b5c      	ldr	r3, [pc, #368]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144a:	4a5b      	ldr	r2, [pc, #364]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6713      	str	r3, [r2, #112]	@ 0x70
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0x324>
 8001454:	4b58      	ldr	r3, [pc, #352]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 8001456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001458:	4a57      	ldr	r2, [pc, #348]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 800145a:	f023 0301 	bic.w	r3, r3, #1
 800145e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001460:	4b55      	ldr	r3, [pc, #340]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001464:	4a54      	ldr	r2, [pc, #336]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 8001466:	f023 0304 	bic.w	r3, r3, #4
 800146a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d015      	beq.n	80014a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff fb34 	bl	8000ae0 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147a:	e00a      	b.n	8001492 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f7ff fb30 	bl	8000ae0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e0cb      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001492:	4b49      	ldr	r3, [pc, #292]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0ee      	beq.n	800147c <HAL_RCC_OscConfig+0x334>
 800149e:	e014      	b.n	80014ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fb1e 	bl	8000ae0 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff fb1a 	bl	8000ae0 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0b5      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014be:	4b3e      	ldr	r3, [pc, #248]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ee      	bne.n	80014a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d0:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	4a38      	ldr	r2, [pc, #224]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 80014d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a1 	beq.w	8001628 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e6:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d05c      	beq.n	80015ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d141      	bne.n	800157e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4b31      	ldr	r3, [pc, #196]	@ (80015c0 <HAL_RCC_OscConfig+0x478>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff faee 	bl	8000ae0 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff faea 	bl	8000ae0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e087      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69da      	ldr	r2, [r3, #28]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001534:	019b      	lsls	r3, r3, #6
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	085b      	lsrs	r3, r3, #1
 800153e:	3b01      	subs	r3, #1
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001548:	061b      	lsls	r3, r3, #24
 800154a:	491b      	ldr	r1, [pc, #108]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <HAL_RCC_OscConfig+0x478>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7ff fac3 	bl	8000ae0 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155e:	f7ff fabf 	bl	8000ae0 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e05c      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x416>
 800157c:	e054      	b.n	8001628 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <HAL_RCC_OscConfig+0x478>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff faac 	bl	8000ae0 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff faa8 	bl	8000ae0 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e045      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_RCC_OscConfig+0x470>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x444>
 80015aa:	e03d      	b.n	8001628 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e038      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40007000 	.word	0x40007000
 80015c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_RCC_OscConfig+0x4ec>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d028      	beq.n	8001624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d121      	bne.n	8001624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d11a      	bne.n	8001624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015f4:	4013      	ands	r3, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d111      	bne.n	8001624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	3b01      	subs	r3, #1
 800160e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0cc      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d90c      	bls.n	8001674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b63      	ldr	r3, [pc, #396]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800168c:	4b59      	ldr	r3, [pc, #356]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a58      	ldr	r2, [pc, #352]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001696:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b50      	ldr	r3, [pc, #320]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	494d      	ldr	r1, [pc, #308]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d044      	beq.n	8001758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d119      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d003      	beq.n	80016f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b3f      	ldr	r3, [pc, #252]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3b      	ldr	r3, [pc, #236]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e067      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4934      	ldr	r1, [pc, #208]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff f9da 	bl	8000ae0 <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff f9d6 	bl	8000ae0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e04f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d20c      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e032      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4916      	ldr	r1, [pc, #88]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017aa:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	490e      	ldr	r1, [pc, #56]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017be:	f000 f821 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	490a      	ldr	r1, [pc, #40]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f93a 	bl	8000a58 <HAL_InitTick>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023c00 	.word	0x40023c00
 80017f4:	40023800 	.word	0x40023800
 80017f8:	080034b8 	.word	0x080034b8
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b090      	sub	sp, #64	@ 0x40
 800180a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800181c:	4b59      	ldr	r3, [pc, #356]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x180>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d00d      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x40>
 8001828:	2b08      	cmp	r3, #8
 800182a:	f200 80a1 	bhi.w	8001970 <HAL_RCC_GetSysClockFreq+0x16c>
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x34>
 8001832:	2b04      	cmp	r3, #4
 8001834:	d003      	beq.n	800183e <HAL_RCC_GetSysClockFreq+0x3a>
 8001836:	e09b      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x184>)
 800183a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800183c:	e09b      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183e:	4b53      	ldr	r3, [pc, #332]	@ (800198c <HAL_RCC_GetSysClockFreq+0x188>)
 8001840:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001842:	e098      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	4b4f      	ldr	r3, [pc, #316]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x180>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800184c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184e:	4b4d      	ldr	r3, [pc, #308]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x180>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d028      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185a:	4b4a      	ldr	r3, [pc, #296]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x180>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	2200      	movs	r2, #0
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	627a      	str	r2, [r7, #36]	@ 0x24
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800186c:	2100      	movs	r1, #0
 800186e:	4b47      	ldr	r3, [pc, #284]	@ (800198c <HAL_RCC_GetSysClockFreq+0x188>)
 8001870:	fb03 f201 	mul.w	r2, r3, r1
 8001874:	2300      	movs	r3, #0
 8001876:	fb00 f303 	mul.w	r3, r0, r3
 800187a:	4413      	add	r3, r2
 800187c:	4a43      	ldr	r2, [pc, #268]	@ (800198c <HAL_RCC_GetSysClockFreq+0x188>)
 800187e:	fba0 1202 	umull	r1, r2, r0, r2
 8001882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001884:	460a      	mov	r2, r1
 8001886:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800188a:	4413      	add	r3, r2
 800188c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800188e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001890:	2200      	movs	r2, #0
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	61fa      	str	r2, [r7, #28]
 8001896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800189a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800189e:	f7fe fcf7 	bl	8000290 <__aeabi_uldivmod>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4613      	mov	r3, r2
 80018a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018aa:	e053      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ac:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	099b      	lsrs	r3, r3, #6
 80018b2:	2200      	movs	r2, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	617a      	str	r2, [r7, #20]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018be:	f04f 0b00 	mov.w	fp, #0
 80018c2:	4652      	mov	r2, sl
 80018c4:	465b      	mov	r3, fp
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0159      	lsls	r1, r3, #5
 80018d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d4:	0150      	lsls	r0, r2, #5
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	ebb2 080a 	subs.w	r8, r2, sl
 80018de:	eb63 090b 	sbc.w	r9, r3, fp
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018f6:	ebb2 0408 	subs.w	r4, r2, r8
 80018fa:	eb63 0509 	sbc.w	r5, r3, r9
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	00eb      	lsls	r3, r5, #3
 8001908:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800190c:	00e2      	lsls	r2, r4, #3
 800190e:	4614      	mov	r4, r2
 8001910:	461d      	mov	r5, r3
 8001912:	eb14 030a 	adds.w	r3, r4, sl
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	eb45 030b 	adc.w	r3, r5, fp
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800192a:	4629      	mov	r1, r5
 800192c:	028b      	lsls	r3, r1, #10
 800192e:	4621      	mov	r1, r4
 8001930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001934:	4621      	mov	r1, r4
 8001936:	028a      	lsls	r2, r1, #10
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193e:	2200      	movs	r2, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	60fa      	str	r2, [r7, #12]
 8001944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001948:	f7fe fca2 	bl	8000290 <__aeabi_uldivmod>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4613      	mov	r3, r2
 8001952:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x180>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	0c1b      	lsrs	r3, r3, #16
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	3301      	adds	r3, #1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001964:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001968:	fbb2 f3f3 	udiv	r3, r2, r3
 800196c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x184>)
 8001972:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001978:	4618      	mov	r0, r3
 800197a:	3740      	adds	r7, #64	@ 0x40
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	00f42400 	.word	0x00f42400
 800198c:	017d7840 	.word	0x017d7840

08001990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019ac:	f7ff fff0 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0a9b      	lsrs	r3, r3, #10
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	@ (80019cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	080034c8 	.word	0x080034c8

080019d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d4:	f7ff ffdc 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	0b5b      	lsrs	r3, r3, #13
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	@ (80019f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	080034c8 	.word	0x080034c8

080019f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e042      	b.n	8001a90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe fefc 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	@ 0x24
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 fe15 	bl	800266c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d175      	bne.n	8001ba4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <HAL_UART_Transmit+0x2c>
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e06e      	b.n	8001ba6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2221      	movs	r2, #33	@ 0x21
 8001ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ad6:	f7ff f803 	bl	8000ae0 <HAL_GetTick>
 8001ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af0:	d108      	bne.n	8001b04 <HAL_UART_Transmit+0x6c>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d104      	bne.n	8001b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	e003      	b.n	8001b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b0c:	e02e      	b.n	8001b6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2200      	movs	r2, #0
 8001b16:	2180      	movs	r1, #128	@ 0x80
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fbb3 	bl	8002284 <UART_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e03a      	b.n	8001ba6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10b      	bne.n	8001b4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	e007      	b.n	8001b5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1cb      	bne.n	8001b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2140      	movs	r1, #64	@ 0x40
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 fb7f 	bl	8002284 <UART_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e006      	b.n	8001ba6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ba4:	2302      	movs	r3, #2
  }
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b08a      	sub	sp, #40	@ 0x28
 8001bb2:	af02      	add	r7, sp, #8
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	f040 8081 	bne.w	8001cd2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_UART_Receive+0x2e>
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e079      	b.n	8001cd4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2222      	movs	r2, #34	@ 0x22
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bf4:	f7fe ff74 	bl	8000ae0 <HAL_GetTick>
 8001bf8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	88fa      	ldrh	r2, [r7, #6]
 8001bfe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	88fa      	ldrh	r2, [r7, #6]
 8001c04:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c0e:	d108      	bne.n	8001c22 <HAL_UART_Receive+0x74>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d104      	bne.n	8001c22 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	e003      	b.n	8001c2a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c2a:	e047      	b.n	8001cbc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2200      	movs	r2, #0
 8001c34:	2120      	movs	r1, #32
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fb24 	bl	8002284 <UART_WaitOnFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e042      	b.n	8001cd4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	3302      	adds	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	e01f      	b.n	8001cae <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c76:	d007      	beq.n	8001c88 <HAL_UART_Receive+0xda>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10a      	bne.n	8001c96 <HAL_UART_Receive+0xe8>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	e008      	b.n	8001ca8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	3301      	adds	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1b2      	bne.n	8001c2c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0ba      	sub	sp, #232	@ 0xe8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10f      	bne.n	8001d42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_UART_IRQHandler+0x66>
 8001d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fbd7 	bl	80024ee <UART_Receive_IT>
      return;
 8001d40:	e273      	b.n	800222a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80de 	beq.w	8001f08 <HAL_UART_IRQHandler+0x22c>
 8001d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d106      	bne.n	8001d66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80d1 	beq.w	8001f08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_UART_IRQHandler+0xae>
 8001d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_UART_IRQHandler+0xd2>
 8001d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f043 0202 	orr.w	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xf6>
 8001dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	f043 0204 	orr.w	r2, r3, #4
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d011      	beq.n	8001e02 <HAL_UART_IRQHandler+0x126>
 8001dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	f043 0208 	orr.w	r2, r3, #8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 820a 	beq.w	8002220 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_UART_IRQHandler+0x14e>
 8001e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fb62 	bl	80024ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e34:	2b40      	cmp	r3, #64	@ 0x40
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <HAL_UART_IRQHandler+0x17a>
 8001e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d04f      	beq.n	8001ef6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fa6d 	bl	8002336 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e66:	2b40      	cmp	r3, #64	@ 0x40
 8001e68:	d141      	bne.n	8001eee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3314      	adds	r3, #20
 8001e70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e78:	e853 3f00 	ldrex	r3, [r3]
 8001e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3314      	adds	r3, #20
 8001e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001e96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001ea6:	e841 2300 	strex	r3, r2, [r1]
 8001eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1d9      	bne.n	8001e6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d013      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec2:	4a8a      	ldr	r2, [pc, #552]	@ (80020ec <HAL_UART_IRQHandler+0x410>)
 8001ec4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe ff95 	bl	8000dfa <HAL_DMA_Abort_IT>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d016      	beq.n	8001f04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ee4:	e00e      	b.n	8001f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f9b6 	bl	8002258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eec:	e00a      	b.n	8001f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f9b2 	bl	8002258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef4:	e006      	b.n	8001f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f9ae 	bl	8002258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001f02:	e18d      	b.n	8002220 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f04:	bf00      	nop
    return;
 8001f06:	e18b      	b.n	8002220 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	f040 8167 	bne.w	80021e0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8160 	beq.w	80021e0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8001f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8159 	beq.w	80021e0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4e:	2b40      	cmp	r3, #64	@ 0x40
 8001f50:	f040 80ce 	bne.w	80020f0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a9 	beq.w	80020bc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f72:	429a      	cmp	r2, r3
 8001f74:	f080 80a2 	bcs.w	80020bc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f8a:	f000 8088 	beq.w	800209e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	330c      	adds	r3, #12
 8001f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f9c:	e853 3f00 	ldrex	r3, [r3]
 8001fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001fba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001fca:	e841 2300 	strex	r3, r2, [r1]
 8001fce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1d9      	bne.n	8001f8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3314      	adds	r3, #20
 8001fe0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fe4:	e853 3f00 	ldrex	r3, [r3]
 8001fe8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3314      	adds	r3, #20
 8001ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ffe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002002:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002004:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002006:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800200a:	e841 2300 	strex	r3, r2, [r1]
 800200e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e1      	bne.n	8001fda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3314      	adds	r3, #20
 800201c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002020:	e853 3f00 	ldrex	r3, [r3]
 8002024:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800202c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3314      	adds	r3, #20
 8002036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800203a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800203c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002040:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002042:	e841 2300 	strex	r3, r2, [r1]
 8002046:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1e3      	bne.n	8002016 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	330c      	adds	r3, #12
 8002062:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002066:	e853 3f00 	ldrex	r3, [r3]
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800206c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800206e:	f023 0310 	bic.w	r3, r3, #16
 8002072:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	330c      	adds	r3, #12
 800207c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002080:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002082:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002084:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002086:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002088:	e841 2300 	strex	r3, r2, [r1]
 800208c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800208e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1e3      	bne.n	800205c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fe3e 	bl	8000d1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2202      	movs	r2, #2
 80020a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f8d9 	bl	800226c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80020ba:	e0b3      	b.n	8002224 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80020c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 80ad 	bne.w	8002224 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020d4:	f040 80a6 	bne.w	8002224 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8c1 	bl	800226c <HAL_UARTEx_RxEventCallback>
      return;
 80020ea:	e09b      	b.n	8002224 <HAL_UART_IRQHandler+0x548>
 80020ec:	080023fd 	.word	0x080023fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 808e 	beq.w	8002228 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800210c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8089 	beq.w	8002228 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	330c      	adds	r3, #12
 800211c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002120:	e853 3f00 	ldrex	r3, [r3]
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002128:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800212c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800213a:	647a      	str	r2, [r7, #68]	@ 0x44
 800213c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002140:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e3      	bne.n	8002116 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	e853 3f00 	ldrex	r3, [r3]
 800215c:	623b      	str	r3, [r7, #32]
   return(result);
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3314      	adds	r3, #20
 800216e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002172:	633a      	str	r2, [r7, #48]	@ 0x30
 8002174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800217a:	e841 2300 	strex	r3, r2, [r1]
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e3      	bne.n	800214e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	e853 3f00 	ldrex	r3, [r3]
 80021a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0310 	bic.w	r3, r3, #16
 80021aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	330c      	adds	r3, #12
 80021b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80021b8:	61fa      	str	r2, [r7, #28]
 80021ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	69b9      	ldr	r1, [r7, #24]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	617b      	str	r3, [r7, #20]
   return(result);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e3      	bne.n	8002194 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f847 	bl	800226c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021de:	e023      	b.n	8002228 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_UART_IRQHandler+0x524>
 80021ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f910 	bl	800241e <UART_Transmit_IT>
    return;
 80021fe:	e014      	b.n	800222a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00e      	beq.n	800222a <HAL_UART_IRQHandler+0x54e>
 800220c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f950 	bl	80024be <UART_EndTransmit_IT>
    return;
 800221e:	e004      	b.n	800222a <HAL_UART_IRQHandler+0x54e>
    return;
 8002220:	bf00      	nop
 8002222:	e002      	b.n	800222a <HAL_UART_IRQHandler+0x54e>
      return;
 8002224:	bf00      	nop
 8002226:	e000      	b.n	800222a <HAL_UART_IRQHandler+0x54e>
      return;
 8002228:	bf00      	nop
  }
}
 800222a:	37e8      	adds	r7, #232	@ 0xe8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002294:	e03b      	b.n	800230e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d037      	beq.n	800230e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7fe fc1f 	bl	8000ae0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e03a      	b.n	800232e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d023      	beq.n	800230e <UART_WaitOnFlagUntilTimeout+0x8a>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b80      	cmp	r3, #128	@ 0x80
 80022ca:	d020      	beq.n	800230e <UART_WaitOnFlagUntilTimeout+0x8a>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b40      	cmp	r3, #64	@ 0x40
 80022d0:	d01d      	beq.n	800230e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d116      	bne.n	800230e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f81d 	bl	8002336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2208      	movs	r2, #8
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4013      	ands	r3, r2
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	429a      	cmp	r2, r3
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	429a      	cmp	r2, r3
 800232a:	d0b4      	beq.n	8002296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002336:	b480      	push	{r7}
 8002338:	b095      	sub	sp, #84	@ 0x54
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	330c      	adds	r3, #12
 8002344:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002348:	e853 3f00 	ldrex	r3, [r3]
 800234c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800234e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800235e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002362:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002366:	e841 2300 	strex	r3, r2, [r1]
 800236a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800236c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1e5      	bne.n	800233e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3314      	adds	r3, #20
 8002378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	e853 3f00 	ldrex	r3, [r3]
 8002380:	61fb      	str	r3, [r7, #28]
   return(result);
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800239a:	e841 2300 	strex	r3, r2, [r1]
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1e5      	bne.n	8002372 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d119      	bne.n	80023e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	330c      	adds	r3, #12
 80023b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	e853 3f00 	ldrex	r3, [r3]
 80023bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f023 0310 	bic.w	r3, r3, #16
 80023c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	330c      	adds	r3, #12
 80023cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023ce:	61ba      	str	r2, [r7, #24]
 80023d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d2:	6979      	ldr	r1, [r7, #20]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	e841 2300 	strex	r3, r2, [r1]
 80023da:	613b      	str	r3, [r7, #16]
   return(result);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e5      	bne.n	80023ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023f0:	bf00      	nop
 80023f2:	3754      	adds	r7, #84	@ 0x54
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff ff21 	bl	8002258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b21      	cmp	r3, #33	@ 0x21
 8002430:	d13e      	bne.n	80024b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800243a:	d114      	bne.n	8002466 <UART_Transmit_IT+0x48>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d110      	bne.n	8002466 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	1c9a      	adds	r2, r3, #2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	621a      	str	r2, [r3, #32]
 8002464:	e008      	b.n	8002478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	1c59      	adds	r1, r3, #1
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6211      	str	r1, [r2, #32]
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29b      	uxth	r3, r3
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4619      	mov	r1, r3
 8002486:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10f      	bne.n	80024ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800249a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fea6 	bl	8002230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b08c      	sub	sp, #48	@ 0x30
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b22      	cmp	r3, #34	@ 0x22
 8002508:	f040 80aa 	bne.w	8002660 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002514:	d115      	bne.n	8002542 <UART_Receive_IT+0x54>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d111      	bne.n	8002542 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	b29b      	uxth	r3, r3
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	b29a      	uxth	r2, r3
 8002532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	1c9a      	adds	r2, r3, #2
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002540:	e024      	b.n	800258c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002550:	d007      	beq.n	8002562 <UART_Receive_IT+0x74>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <UART_Receive_IT+0x82>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e008      	b.n	8002582 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800257c:	b2da      	uxtb	r2, r3
 800257e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002580:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29b      	uxth	r3, r3
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4619      	mov	r1, r3
 800259a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800259c:	2b00      	cmp	r3, #0
 800259e:	d15d      	bne.n	800265c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0220 	bic.w	r2, r2, #32
 80025ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d135      	bne.n	8002652 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	e853 3f00 	ldrex	r3, [r3]
 80025fa:	613b      	str	r3, [r7, #16]
   return(result);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f023 0310 	bic.w	r3, r3, #16
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260c:	623a      	str	r2, [r7, #32]
 800260e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002610:	69f9      	ldr	r1, [r7, #28]
 8002612:	6a3a      	ldr	r2, [r7, #32]
 8002614:	e841 2300 	strex	r3, r2, [r1]
 8002618:	61bb      	str	r3, [r7, #24]
   return(result);
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e5      	bne.n	80025ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b10      	cmp	r3, #16
 800262c:	d10a      	bne.n	8002644 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fe0e 	bl	800226c <HAL_UARTEx_RxEventCallback>
 8002650:	e002      	b.n	8002658 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fdf6 	bl	8002244 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	e002      	b.n	8002662 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3730      	adds	r7, #48	@ 0x30
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800266c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002670:	b0c0      	sub	sp, #256	@ 0x100
 8002672:	af00      	add	r7, sp, #0
 8002674:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002688:	68d9      	ldr	r1, [r3, #12]
 800268a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	ea40 0301 	orr.w	r3, r0, r1
 8002694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026c4:	f021 010c 	bic.w	r1, r1, #12
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026d2:	430b      	orrs	r3, r1
 80026d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e6:	6999      	ldr	r1, [r3, #24]
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	ea40 0301 	orr.w	r3, r0, r1
 80026f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4b8f      	ldr	r3, [pc, #572]	@ (8002938 <UART_SetConfig+0x2cc>)
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d005      	beq.n	800270c <UART_SetConfig+0xa0>
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b8d      	ldr	r3, [pc, #564]	@ (800293c <UART_SetConfig+0x2d0>)
 8002708:	429a      	cmp	r2, r3
 800270a:	d104      	bne.n	8002716 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800270c:	f7ff f960 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8002710:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002714:	e003      	b.n	800271e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002716:	f7ff f947 	bl	80019a8 <HAL_RCC_GetPCLK1Freq>
 800271a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002728:	f040 810c 	bne.w	8002944 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800272c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002730:	2200      	movs	r2, #0
 8002732:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002736:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800273a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800273e:	4622      	mov	r2, r4
 8002740:	462b      	mov	r3, r5
 8002742:	1891      	adds	r1, r2, r2
 8002744:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002746:	415b      	adcs	r3, r3
 8002748:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800274a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800274e:	4621      	mov	r1, r4
 8002750:	eb12 0801 	adds.w	r8, r2, r1
 8002754:	4629      	mov	r1, r5
 8002756:	eb43 0901 	adc.w	r9, r3, r1
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800276a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800276e:	4690      	mov	r8, r2
 8002770:	4699      	mov	r9, r3
 8002772:	4623      	mov	r3, r4
 8002774:	eb18 0303 	adds.w	r3, r8, r3
 8002778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800277c:	462b      	mov	r3, r5
 800277e:	eb49 0303 	adc.w	r3, r9, r3
 8002782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002792:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800279a:	460b      	mov	r3, r1
 800279c:	18db      	adds	r3, r3, r3
 800279e:	653b      	str	r3, [r7, #80]	@ 0x50
 80027a0:	4613      	mov	r3, r2
 80027a2:	eb42 0303 	adc.w	r3, r2, r3
 80027a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80027a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027b0:	f7fd fd6e 	bl	8000290 <__aeabi_uldivmod>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4b61      	ldr	r3, [pc, #388]	@ (8002940 <UART_SetConfig+0x2d4>)
 80027ba:	fba3 2302 	umull	r2, r3, r3, r2
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	011c      	lsls	r4, r3, #4
 80027c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80027d4:	4642      	mov	r2, r8
 80027d6:	464b      	mov	r3, r9
 80027d8:	1891      	adds	r1, r2, r2
 80027da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80027dc:	415b      	adcs	r3, r3
 80027de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027e4:	4641      	mov	r1, r8
 80027e6:	eb12 0a01 	adds.w	sl, r2, r1
 80027ea:	4649      	mov	r1, r9
 80027ec:	eb43 0b01 	adc.w	fp, r3, r1
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002804:	4692      	mov	sl, r2
 8002806:	469b      	mov	fp, r3
 8002808:	4643      	mov	r3, r8
 800280a:	eb1a 0303 	adds.w	r3, sl, r3
 800280e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002812:	464b      	mov	r3, r9
 8002814:	eb4b 0303 	adc.w	r3, fp, r3
 8002818:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002828:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800282c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002830:	460b      	mov	r3, r1
 8002832:	18db      	adds	r3, r3, r3
 8002834:	643b      	str	r3, [r7, #64]	@ 0x40
 8002836:	4613      	mov	r3, r2
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	647b      	str	r3, [r7, #68]	@ 0x44
 800283e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002842:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002846:	f7fd fd23 	bl	8000290 <__aeabi_uldivmod>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4611      	mov	r1, r2
 8002850:	4b3b      	ldr	r3, [pc, #236]	@ (8002940 <UART_SetConfig+0x2d4>)
 8002852:	fba3 2301 	umull	r2, r3, r3, r1
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2264      	movs	r2, #100	@ 0x64
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	1acb      	subs	r3, r1, r3
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002866:	4b36      	ldr	r3, [pc, #216]	@ (8002940 <UART_SetConfig+0x2d4>)
 8002868:	fba3 2302 	umull	r2, r3, r3, r2
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002874:	441c      	add	r4, r3
 8002876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002880:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002884:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002888:	4642      	mov	r2, r8
 800288a:	464b      	mov	r3, r9
 800288c:	1891      	adds	r1, r2, r2
 800288e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002890:	415b      	adcs	r3, r3
 8002892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002898:	4641      	mov	r1, r8
 800289a:	1851      	adds	r1, r2, r1
 800289c:	6339      	str	r1, [r7, #48]	@ 0x30
 800289e:	4649      	mov	r1, r9
 80028a0:	414b      	adcs	r3, r1
 80028a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028b0:	4659      	mov	r1, fp
 80028b2:	00cb      	lsls	r3, r1, #3
 80028b4:	4651      	mov	r1, sl
 80028b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ba:	4651      	mov	r1, sl
 80028bc:	00ca      	lsls	r2, r1, #3
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	4642      	mov	r2, r8
 80028c6:	189b      	adds	r3, r3, r2
 80028c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028cc:	464b      	mov	r3, r9
 80028ce:	460a      	mov	r2, r1
 80028d0:	eb42 0303 	adc.w	r3, r2, r3
 80028d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80028e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80028e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80028ec:	460b      	mov	r3, r1
 80028ee:	18db      	adds	r3, r3, r3
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028f2:	4613      	mov	r3, r2
 80028f4:	eb42 0303 	adc.w	r3, r2, r3
 80028f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002902:	f7fd fcc5 	bl	8000290 <__aeabi_uldivmod>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <UART_SetConfig+0x2d4>)
 800290c:	fba3 1302 	umull	r1, r3, r3, r2
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	2164      	movs	r1, #100	@ 0x64
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	3332      	adds	r3, #50	@ 0x32
 800291e:	4a08      	ldr	r2, [pc, #32]	@ (8002940 <UART_SetConfig+0x2d4>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	f003 0207 	and.w	r2, r3, #7
 800292a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4422      	add	r2, r4
 8002932:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002934:	e106      	b.n	8002b44 <UART_SetConfig+0x4d8>
 8002936:	bf00      	nop
 8002938:	40011000 	.word	0x40011000
 800293c:	40011400 	.word	0x40011400
 8002940:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002948:	2200      	movs	r2, #0
 800294a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800294e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002952:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002956:	4642      	mov	r2, r8
 8002958:	464b      	mov	r3, r9
 800295a:	1891      	adds	r1, r2, r2
 800295c:	6239      	str	r1, [r7, #32]
 800295e:	415b      	adcs	r3, r3
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
 8002962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002966:	4641      	mov	r1, r8
 8002968:	1854      	adds	r4, r2, r1
 800296a:	4649      	mov	r1, r9
 800296c:	eb43 0501 	adc.w	r5, r3, r1
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	00eb      	lsls	r3, r5, #3
 800297a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800297e:	00e2      	lsls	r2, r4, #3
 8002980:	4614      	mov	r4, r2
 8002982:	461d      	mov	r5, r3
 8002984:	4643      	mov	r3, r8
 8002986:	18e3      	adds	r3, r4, r3
 8002988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800298c:	464b      	mov	r3, r9
 800298e:	eb45 0303 	adc.w	r3, r5, r3
 8002992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029b2:	4629      	mov	r1, r5
 80029b4:	008b      	lsls	r3, r1, #2
 80029b6:	4621      	mov	r1, r4
 80029b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029bc:	4621      	mov	r1, r4
 80029be:	008a      	lsls	r2, r1, #2
 80029c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029c4:	f7fd fc64 	bl	8000290 <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4b60      	ldr	r3, [pc, #384]	@ (8002b50 <UART_SetConfig+0x4e4>)
 80029ce:	fba3 2302 	umull	r2, r3, r3, r2
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	011c      	lsls	r4, r3, #4
 80029d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029da:	2200      	movs	r2, #0
 80029dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80029e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80029e8:	4642      	mov	r2, r8
 80029ea:	464b      	mov	r3, r9
 80029ec:	1891      	adds	r1, r2, r2
 80029ee:	61b9      	str	r1, [r7, #24]
 80029f0:	415b      	adcs	r3, r3
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f8:	4641      	mov	r1, r8
 80029fa:	1851      	adds	r1, r2, r1
 80029fc:	6139      	str	r1, [r7, #16]
 80029fe:	4649      	mov	r1, r9
 8002a00:	414b      	adcs	r3, r1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a10:	4659      	mov	r1, fp
 8002a12:	00cb      	lsls	r3, r1, #3
 8002a14:	4651      	mov	r1, sl
 8002a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a1a:	4651      	mov	r1, sl
 8002a1c:	00ca      	lsls	r2, r1, #3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	4642      	mov	r2, r8
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	460a      	mov	r2, r1
 8002a30:	eb42 0303 	adc.w	r3, r2, r3
 8002a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a50:	4649      	mov	r1, r9
 8002a52:	008b      	lsls	r3, r1, #2
 8002a54:	4641      	mov	r1, r8
 8002a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a5a:	4641      	mov	r1, r8
 8002a5c:	008a      	lsls	r2, r1, #2
 8002a5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a62:	f7fd fc15 	bl	8000290 <__aeabi_uldivmod>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4b38      	ldr	r3, [pc, #224]	@ (8002b50 <UART_SetConfig+0x4e4>)
 8002a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2264      	movs	r2, #100	@ 0x64
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	1acb      	subs	r3, r1, r3
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	3332      	adds	r3, #50	@ 0x32
 8002a80:	4a33      	ldr	r2, [pc, #204]	@ (8002b50 <UART_SetConfig+0x4e4>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a8c:	441c      	add	r4, r3
 8002a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a92:	2200      	movs	r2, #0
 8002a94:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a96:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a9c:	4642      	mov	r2, r8
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	1891      	adds	r1, r2, r2
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	415b      	adcs	r3, r3
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aac:	4641      	mov	r1, r8
 8002aae:	1851      	adds	r1, r2, r1
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	414b      	adcs	r3, r1
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ac4:	4659      	mov	r1, fp
 8002ac6:	00cb      	lsls	r3, r1, #3
 8002ac8:	4651      	mov	r1, sl
 8002aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ace:	4651      	mov	r1, sl
 8002ad0:	00ca      	lsls	r2, r1, #3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4642      	mov	r2, r8
 8002ada:	189b      	adds	r3, r3, r2
 8002adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ade:	464b      	mov	r3, r9
 8002ae0:	460a      	mov	r2, r1
 8002ae2:	eb42 0303 	adc.w	r3, r2, r3
 8002ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002af2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b00:	4649      	mov	r1, r9
 8002b02:	008b      	lsls	r3, r1, #2
 8002b04:	4641      	mov	r1, r8
 8002b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b0a:	4641      	mov	r1, r8
 8002b0c:	008a      	lsls	r2, r1, #2
 8002b0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b12:	f7fd fbbd 	bl	8000290 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <UART_SetConfig+0x4e4>)
 8002b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	2164      	movs	r1, #100	@ 0x64
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	3332      	adds	r3, #50	@ 0x32
 8002b2e:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <UART_SetConfig+0x4e4>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	f003 020f 	and.w	r2, r3, #15
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4422      	add	r2, r4
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b50:	51eb851f 	.word	0x51eb851f

08002b54 <siprintf>:
 8002b54:	b40e      	push	{r1, r2, r3}
 8002b56:	b510      	push	{r4, lr}
 8002b58:	b09d      	sub	sp, #116	@ 0x74
 8002b5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002b5c:	9002      	str	r0, [sp, #8]
 8002b5e:	9006      	str	r0, [sp, #24]
 8002b60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b64:	480a      	ldr	r0, [pc, #40]	@ (8002b90 <siprintf+0x3c>)
 8002b66:	9107      	str	r1, [sp, #28]
 8002b68:	9104      	str	r1, [sp, #16]
 8002b6a:	490a      	ldr	r1, [pc, #40]	@ (8002b94 <siprintf+0x40>)
 8002b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b70:	9105      	str	r1, [sp, #20]
 8002b72:	2400      	movs	r4, #0
 8002b74:	a902      	add	r1, sp, #8
 8002b76:	6800      	ldr	r0, [r0, #0]
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002b7c:	f000 f994 	bl	8002ea8 <_svfiprintf_r>
 8002b80:	9b02      	ldr	r3, [sp, #8]
 8002b82:	701c      	strb	r4, [r3, #0]
 8002b84:	b01d      	add	sp, #116	@ 0x74
 8002b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b8a:	b003      	add	sp, #12
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000000c 	.word	0x2000000c
 8002b94:	ffff0208 	.word	0xffff0208

08002b98 <memset>:
 8002b98:	4402      	add	r2, r0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d100      	bne.n	8002ba2 <memset+0xa>
 8002ba0:	4770      	bx	lr
 8002ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba6:	e7f9      	b.n	8002b9c <memset+0x4>

08002ba8 <__errno>:
 8002ba8:	4b01      	ldr	r3, [pc, #4]	@ (8002bb0 <__errno+0x8>)
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	2000000c 	.word	0x2000000c

08002bb4 <__libc_init_array>:
 8002bb4:	b570      	push	{r4, r5, r6, lr}
 8002bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8002bec <__libc_init_array+0x38>)
 8002bb8:	4c0d      	ldr	r4, [pc, #52]	@ (8002bf0 <__libc_init_array+0x3c>)
 8002bba:	1b64      	subs	r4, r4, r5
 8002bbc:	10a4      	asrs	r4, r4, #2
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	42a6      	cmp	r6, r4
 8002bc2:	d109      	bne.n	8002bd8 <__libc_init_array+0x24>
 8002bc4:	4d0b      	ldr	r5, [pc, #44]	@ (8002bf4 <__libc_init_array+0x40>)
 8002bc6:	4c0c      	ldr	r4, [pc, #48]	@ (8002bf8 <__libc_init_array+0x44>)
 8002bc8:	f000 fc64 	bl	8003494 <_init>
 8002bcc:	1b64      	subs	r4, r4, r5
 8002bce:	10a4      	asrs	r4, r4, #2
 8002bd0:	2600      	movs	r6, #0
 8002bd2:	42a6      	cmp	r6, r4
 8002bd4:	d105      	bne.n	8002be2 <__libc_init_array+0x2e>
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
 8002bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bdc:	4798      	blx	r3
 8002bde:	3601      	adds	r6, #1
 8002be0:	e7ee      	b.n	8002bc0 <__libc_init_array+0xc>
 8002be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be6:	4798      	blx	r3
 8002be8:	3601      	adds	r6, #1
 8002bea:	e7f2      	b.n	8002bd2 <__libc_init_array+0x1e>
 8002bec:	0800350c 	.word	0x0800350c
 8002bf0:	0800350c 	.word	0x0800350c
 8002bf4:	0800350c 	.word	0x0800350c
 8002bf8:	08003510 	.word	0x08003510

08002bfc <__retarget_lock_acquire_recursive>:
 8002bfc:	4770      	bx	lr

08002bfe <__retarget_lock_release_recursive>:
 8002bfe:	4770      	bx	lr

08002c00 <_free_r>:
 8002c00:	b538      	push	{r3, r4, r5, lr}
 8002c02:	4605      	mov	r5, r0
 8002c04:	2900      	cmp	r1, #0
 8002c06:	d041      	beq.n	8002c8c <_free_r+0x8c>
 8002c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c0c:	1f0c      	subs	r4, r1, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bfb8      	it	lt
 8002c12:	18e4      	addlt	r4, r4, r3
 8002c14:	f000 f8e0 	bl	8002dd8 <__malloc_lock>
 8002c18:	4a1d      	ldr	r2, [pc, #116]	@ (8002c90 <_free_r+0x90>)
 8002c1a:	6813      	ldr	r3, [r2, #0]
 8002c1c:	b933      	cbnz	r3, 8002c2c <_free_r+0x2c>
 8002c1e:	6063      	str	r3, [r4, #4]
 8002c20:	6014      	str	r4, [r2, #0]
 8002c22:	4628      	mov	r0, r5
 8002c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c28:	f000 b8dc 	b.w	8002de4 <__malloc_unlock>
 8002c2c:	42a3      	cmp	r3, r4
 8002c2e:	d908      	bls.n	8002c42 <_free_r+0x42>
 8002c30:	6820      	ldr	r0, [r4, #0]
 8002c32:	1821      	adds	r1, r4, r0
 8002c34:	428b      	cmp	r3, r1
 8002c36:	bf01      	itttt	eq
 8002c38:	6819      	ldreq	r1, [r3, #0]
 8002c3a:	685b      	ldreq	r3, [r3, #4]
 8002c3c:	1809      	addeq	r1, r1, r0
 8002c3e:	6021      	streq	r1, [r4, #0]
 8002c40:	e7ed      	b.n	8002c1e <_free_r+0x1e>
 8002c42:	461a      	mov	r2, r3
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	b10b      	cbz	r3, 8002c4c <_free_r+0x4c>
 8002c48:	42a3      	cmp	r3, r4
 8002c4a:	d9fa      	bls.n	8002c42 <_free_r+0x42>
 8002c4c:	6811      	ldr	r1, [r2, #0]
 8002c4e:	1850      	adds	r0, r2, r1
 8002c50:	42a0      	cmp	r0, r4
 8002c52:	d10b      	bne.n	8002c6c <_free_r+0x6c>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	4401      	add	r1, r0
 8002c58:	1850      	adds	r0, r2, r1
 8002c5a:	4283      	cmp	r3, r0
 8002c5c:	6011      	str	r1, [r2, #0]
 8002c5e:	d1e0      	bne.n	8002c22 <_free_r+0x22>
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	6053      	str	r3, [r2, #4]
 8002c66:	4408      	add	r0, r1
 8002c68:	6010      	str	r0, [r2, #0]
 8002c6a:	e7da      	b.n	8002c22 <_free_r+0x22>
 8002c6c:	d902      	bls.n	8002c74 <_free_r+0x74>
 8002c6e:	230c      	movs	r3, #12
 8002c70:	602b      	str	r3, [r5, #0]
 8002c72:	e7d6      	b.n	8002c22 <_free_r+0x22>
 8002c74:	6820      	ldr	r0, [r4, #0]
 8002c76:	1821      	adds	r1, r4, r0
 8002c78:	428b      	cmp	r3, r1
 8002c7a:	bf04      	itt	eq
 8002c7c:	6819      	ldreq	r1, [r3, #0]
 8002c7e:	685b      	ldreq	r3, [r3, #4]
 8002c80:	6063      	str	r3, [r4, #4]
 8002c82:	bf04      	itt	eq
 8002c84:	1809      	addeq	r1, r1, r0
 8002c86:	6021      	streq	r1, [r4, #0]
 8002c88:	6054      	str	r4, [r2, #4]
 8002c8a:	e7ca      	b.n	8002c22 <_free_r+0x22>
 8002c8c:	bd38      	pop	{r3, r4, r5, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000224 	.word	0x20000224

08002c94 <sbrk_aligned>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	4e0f      	ldr	r6, [pc, #60]	@ (8002cd4 <sbrk_aligned+0x40>)
 8002c98:	460c      	mov	r4, r1
 8002c9a:	6831      	ldr	r1, [r6, #0]
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	b911      	cbnz	r1, 8002ca6 <sbrk_aligned+0x12>
 8002ca0:	f000 fba4 	bl	80033ec <_sbrk_r>
 8002ca4:	6030      	str	r0, [r6, #0]
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f000 fb9f 	bl	80033ec <_sbrk_r>
 8002cae:	1c43      	adds	r3, r0, #1
 8002cb0:	d103      	bne.n	8002cba <sbrk_aligned+0x26>
 8002cb2:	f04f 34ff 	mov.w	r4, #4294967295
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	bd70      	pop	{r4, r5, r6, pc}
 8002cba:	1cc4      	adds	r4, r0, #3
 8002cbc:	f024 0403 	bic.w	r4, r4, #3
 8002cc0:	42a0      	cmp	r0, r4
 8002cc2:	d0f8      	beq.n	8002cb6 <sbrk_aligned+0x22>
 8002cc4:	1a21      	subs	r1, r4, r0
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	f000 fb90 	bl	80033ec <_sbrk_r>
 8002ccc:	3001      	adds	r0, #1
 8002cce:	d1f2      	bne.n	8002cb6 <sbrk_aligned+0x22>
 8002cd0:	e7ef      	b.n	8002cb2 <sbrk_aligned+0x1e>
 8002cd2:	bf00      	nop
 8002cd4:	20000220 	.word	0x20000220

08002cd8 <_malloc_r>:
 8002cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cdc:	1ccd      	adds	r5, r1, #3
 8002cde:	f025 0503 	bic.w	r5, r5, #3
 8002ce2:	3508      	adds	r5, #8
 8002ce4:	2d0c      	cmp	r5, #12
 8002ce6:	bf38      	it	cc
 8002ce8:	250c      	movcc	r5, #12
 8002cea:	2d00      	cmp	r5, #0
 8002cec:	4606      	mov	r6, r0
 8002cee:	db01      	blt.n	8002cf4 <_malloc_r+0x1c>
 8002cf0:	42a9      	cmp	r1, r5
 8002cf2:	d904      	bls.n	8002cfe <_malloc_r+0x26>
 8002cf4:	230c      	movs	r3, #12
 8002cf6:	6033      	str	r3, [r6, #0]
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002dd4 <_malloc_r+0xfc>
 8002d02:	f000 f869 	bl	8002dd8 <__malloc_lock>
 8002d06:	f8d8 3000 	ldr.w	r3, [r8]
 8002d0a:	461c      	mov	r4, r3
 8002d0c:	bb44      	cbnz	r4, 8002d60 <_malloc_r+0x88>
 8002d0e:	4629      	mov	r1, r5
 8002d10:	4630      	mov	r0, r6
 8002d12:	f7ff ffbf 	bl	8002c94 <sbrk_aligned>
 8002d16:	1c43      	adds	r3, r0, #1
 8002d18:	4604      	mov	r4, r0
 8002d1a:	d158      	bne.n	8002dce <_malloc_r+0xf6>
 8002d1c:	f8d8 4000 	ldr.w	r4, [r8]
 8002d20:	4627      	mov	r7, r4
 8002d22:	2f00      	cmp	r7, #0
 8002d24:	d143      	bne.n	8002dae <_malloc_r+0xd6>
 8002d26:	2c00      	cmp	r4, #0
 8002d28:	d04b      	beq.n	8002dc2 <_malloc_r+0xea>
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	4639      	mov	r1, r7
 8002d2e:	4630      	mov	r0, r6
 8002d30:	eb04 0903 	add.w	r9, r4, r3
 8002d34:	f000 fb5a 	bl	80033ec <_sbrk_r>
 8002d38:	4581      	cmp	r9, r0
 8002d3a:	d142      	bne.n	8002dc2 <_malloc_r+0xea>
 8002d3c:	6821      	ldr	r1, [r4, #0]
 8002d3e:	1a6d      	subs	r5, r5, r1
 8002d40:	4629      	mov	r1, r5
 8002d42:	4630      	mov	r0, r6
 8002d44:	f7ff ffa6 	bl	8002c94 <sbrk_aligned>
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d03a      	beq.n	8002dc2 <_malloc_r+0xea>
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	442b      	add	r3, r5
 8002d50:	6023      	str	r3, [r4, #0]
 8002d52:	f8d8 3000 	ldr.w	r3, [r8]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	bb62      	cbnz	r2, 8002db4 <_malloc_r+0xdc>
 8002d5a:	f8c8 7000 	str.w	r7, [r8]
 8002d5e:	e00f      	b.n	8002d80 <_malloc_r+0xa8>
 8002d60:	6822      	ldr	r2, [r4, #0]
 8002d62:	1b52      	subs	r2, r2, r5
 8002d64:	d420      	bmi.n	8002da8 <_malloc_r+0xd0>
 8002d66:	2a0b      	cmp	r2, #11
 8002d68:	d917      	bls.n	8002d9a <_malloc_r+0xc2>
 8002d6a:	1961      	adds	r1, r4, r5
 8002d6c:	42a3      	cmp	r3, r4
 8002d6e:	6025      	str	r5, [r4, #0]
 8002d70:	bf18      	it	ne
 8002d72:	6059      	strne	r1, [r3, #4]
 8002d74:	6863      	ldr	r3, [r4, #4]
 8002d76:	bf08      	it	eq
 8002d78:	f8c8 1000 	streq.w	r1, [r8]
 8002d7c:	5162      	str	r2, [r4, r5]
 8002d7e:	604b      	str	r3, [r1, #4]
 8002d80:	4630      	mov	r0, r6
 8002d82:	f000 f82f 	bl	8002de4 <__malloc_unlock>
 8002d86:	f104 000b 	add.w	r0, r4, #11
 8002d8a:	1d23      	adds	r3, r4, #4
 8002d8c:	f020 0007 	bic.w	r0, r0, #7
 8002d90:	1ac2      	subs	r2, r0, r3
 8002d92:	bf1c      	itt	ne
 8002d94:	1a1b      	subne	r3, r3, r0
 8002d96:	50a3      	strne	r3, [r4, r2]
 8002d98:	e7af      	b.n	8002cfa <_malloc_r+0x22>
 8002d9a:	6862      	ldr	r2, [r4, #4]
 8002d9c:	42a3      	cmp	r3, r4
 8002d9e:	bf0c      	ite	eq
 8002da0:	f8c8 2000 	streq.w	r2, [r8]
 8002da4:	605a      	strne	r2, [r3, #4]
 8002da6:	e7eb      	b.n	8002d80 <_malloc_r+0xa8>
 8002da8:	4623      	mov	r3, r4
 8002daa:	6864      	ldr	r4, [r4, #4]
 8002dac:	e7ae      	b.n	8002d0c <_malloc_r+0x34>
 8002dae:	463c      	mov	r4, r7
 8002db0:	687f      	ldr	r7, [r7, #4]
 8002db2:	e7b6      	b.n	8002d22 <_malloc_r+0x4a>
 8002db4:	461a      	mov	r2, r3
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	42a3      	cmp	r3, r4
 8002dba:	d1fb      	bne.n	8002db4 <_malloc_r+0xdc>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	6053      	str	r3, [r2, #4]
 8002dc0:	e7de      	b.n	8002d80 <_malloc_r+0xa8>
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	6033      	str	r3, [r6, #0]
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	f000 f80c 	bl	8002de4 <__malloc_unlock>
 8002dcc:	e794      	b.n	8002cf8 <_malloc_r+0x20>
 8002dce:	6005      	str	r5, [r0, #0]
 8002dd0:	e7d6      	b.n	8002d80 <_malloc_r+0xa8>
 8002dd2:	bf00      	nop
 8002dd4:	20000224 	.word	0x20000224

08002dd8 <__malloc_lock>:
 8002dd8:	4801      	ldr	r0, [pc, #4]	@ (8002de0 <__malloc_lock+0x8>)
 8002dda:	f7ff bf0f 	b.w	8002bfc <__retarget_lock_acquire_recursive>
 8002dde:	bf00      	nop
 8002de0:	2000021c 	.word	0x2000021c

08002de4 <__malloc_unlock>:
 8002de4:	4801      	ldr	r0, [pc, #4]	@ (8002dec <__malloc_unlock+0x8>)
 8002de6:	f7ff bf0a 	b.w	8002bfe <__retarget_lock_release_recursive>
 8002dea:	bf00      	nop
 8002dec:	2000021c 	.word	0x2000021c

08002df0 <__ssputs_r>:
 8002df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df4:	688e      	ldr	r6, [r1, #8]
 8002df6:	461f      	mov	r7, r3
 8002df8:	42be      	cmp	r6, r7
 8002dfa:	680b      	ldr	r3, [r1, #0]
 8002dfc:	4682      	mov	sl, r0
 8002dfe:	460c      	mov	r4, r1
 8002e00:	4690      	mov	r8, r2
 8002e02:	d82d      	bhi.n	8002e60 <__ssputs_r+0x70>
 8002e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e0c:	d026      	beq.n	8002e5c <__ssputs_r+0x6c>
 8002e0e:	6965      	ldr	r5, [r4, #20]
 8002e10:	6909      	ldr	r1, [r1, #16]
 8002e12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e16:	eba3 0901 	sub.w	r9, r3, r1
 8002e1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e1e:	1c7b      	adds	r3, r7, #1
 8002e20:	444b      	add	r3, r9
 8002e22:	106d      	asrs	r5, r5, #1
 8002e24:	429d      	cmp	r5, r3
 8002e26:	bf38      	it	cc
 8002e28:	461d      	movcc	r5, r3
 8002e2a:	0553      	lsls	r3, r2, #21
 8002e2c:	d527      	bpl.n	8002e7e <__ssputs_r+0x8e>
 8002e2e:	4629      	mov	r1, r5
 8002e30:	f7ff ff52 	bl	8002cd8 <_malloc_r>
 8002e34:	4606      	mov	r6, r0
 8002e36:	b360      	cbz	r0, 8002e92 <__ssputs_r+0xa2>
 8002e38:	6921      	ldr	r1, [r4, #16]
 8002e3a:	464a      	mov	r2, r9
 8002e3c:	f000 fae6 	bl	800340c <memcpy>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	6126      	str	r6, [r4, #16]
 8002e4e:	6165      	str	r5, [r4, #20]
 8002e50:	444e      	add	r6, r9
 8002e52:	eba5 0509 	sub.w	r5, r5, r9
 8002e56:	6026      	str	r6, [r4, #0]
 8002e58:	60a5      	str	r5, [r4, #8]
 8002e5a:	463e      	mov	r6, r7
 8002e5c:	42be      	cmp	r6, r7
 8002e5e:	d900      	bls.n	8002e62 <__ssputs_r+0x72>
 8002e60:	463e      	mov	r6, r7
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	4632      	mov	r2, r6
 8002e66:	4641      	mov	r1, r8
 8002e68:	f000 faa6 	bl	80033b8 <memmove>
 8002e6c:	68a3      	ldr	r3, [r4, #8]
 8002e6e:	1b9b      	subs	r3, r3, r6
 8002e70:	60a3      	str	r3, [r4, #8]
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	4433      	add	r3, r6
 8002e76:	6023      	str	r3, [r4, #0]
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e7e:	462a      	mov	r2, r5
 8002e80:	f000 fad2 	bl	8003428 <_realloc_r>
 8002e84:	4606      	mov	r6, r0
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d1e0      	bne.n	8002e4c <__ssputs_r+0x5c>
 8002e8a:	6921      	ldr	r1, [r4, #16]
 8002e8c:	4650      	mov	r0, sl
 8002e8e:	f7ff feb7 	bl	8002c00 <_free_r>
 8002e92:	230c      	movs	r3, #12
 8002e94:	f8ca 3000 	str.w	r3, [sl]
 8002e98:	89a3      	ldrh	r3, [r4, #12]
 8002e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	e7e9      	b.n	8002e7a <__ssputs_r+0x8a>
	...

08002ea8 <_svfiprintf_r>:
 8002ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eac:	4698      	mov	r8, r3
 8002eae:	898b      	ldrh	r3, [r1, #12]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	b09d      	sub	sp, #116	@ 0x74
 8002eb4:	4607      	mov	r7, r0
 8002eb6:	460d      	mov	r5, r1
 8002eb8:	4614      	mov	r4, r2
 8002eba:	d510      	bpl.n	8002ede <_svfiprintf_r+0x36>
 8002ebc:	690b      	ldr	r3, [r1, #16]
 8002ebe:	b973      	cbnz	r3, 8002ede <_svfiprintf_r+0x36>
 8002ec0:	2140      	movs	r1, #64	@ 0x40
 8002ec2:	f7ff ff09 	bl	8002cd8 <_malloc_r>
 8002ec6:	6028      	str	r0, [r5, #0]
 8002ec8:	6128      	str	r0, [r5, #16]
 8002eca:	b930      	cbnz	r0, 8002eda <_svfiprintf_r+0x32>
 8002ecc:	230c      	movs	r3, #12
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	b01d      	add	sp, #116	@ 0x74
 8002ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eda:	2340      	movs	r3, #64	@ 0x40
 8002edc:	616b      	str	r3, [r5, #20]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002eec:	2330      	movs	r3, #48	@ 0x30
 8002eee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800308c <_svfiprintf_r+0x1e4>
 8002ef2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ef6:	f04f 0901 	mov.w	r9, #1
 8002efa:	4623      	mov	r3, r4
 8002efc:	469a      	mov	sl, r3
 8002efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f02:	b10a      	cbz	r2, 8002f08 <_svfiprintf_r+0x60>
 8002f04:	2a25      	cmp	r2, #37	@ 0x25
 8002f06:	d1f9      	bne.n	8002efc <_svfiprintf_r+0x54>
 8002f08:	ebba 0b04 	subs.w	fp, sl, r4
 8002f0c:	d00b      	beq.n	8002f26 <_svfiprintf_r+0x7e>
 8002f0e:	465b      	mov	r3, fp
 8002f10:	4622      	mov	r2, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	4638      	mov	r0, r7
 8002f16:	f7ff ff6b 	bl	8002df0 <__ssputs_r>
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	f000 80a7 	beq.w	800306e <_svfiprintf_r+0x1c6>
 8002f20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f22:	445a      	add	r2, fp
 8002f24:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f26:	f89a 3000 	ldrb.w	r3, [sl]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 809f 	beq.w	800306e <_svfiprintf_r+0x1c6>
 8002f30:	2300      	movs	r3, #0
 8002f32:	f04f 32ff 	mov.w	r2, #4294967295
 8002f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f3a:	f10a 0a01 	add.w	sl, sl, #1
 8002f3e:	9304      	str	r3, [sp, #16]
 8002f40:	9307      	str	r3, [sp, #28]
 8002f42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f46:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f48:	4654      	mov	r4, sl
 8002f4a:	2205      	movs	r2, #5
 8002f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f50:	484e      	ldr	r0, [pc, #312]	@ (800308c <_svfiprintf_r+0x1e4>)
 8002f52:	f7fd f94d 	bl	80001f0 <memchr>
 8002f56:	9a04      	ldr	r2, [sp, #16]
 8002f58:	b9d8      	cbnz	r0, 8002f92 <_svfiprintf_r+0xea>
 8002f5a:	06d0      	lsls	r0, r2, #27
 8002f5c:	bf44      	itt	mi
 8002f5e:	2320      	movmi	r3, #32
 8002f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f64:	0711      	lsls	r1, r2, #28
 8002f66:	bf44      	itt	mi
 8002f68:	232b      	movmi	r3, #43	@ 0x2b
 8002f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f74:	d015      	beq.n	8002fa2 <_svfiprintf_r+0xfa>
 8002f76:	9a07      	ldr	r2, [sp, #28]
 8002f78:	4654      	mov	r4, sl
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f04f 0c0a 	mov.w	ip, #10
 8002f80:	4621      	mov	r1, r4
 8002f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f86:	3b30      	subs	r3, #48	@ 0x30
 8002f88:	2b09      	cmp	r3, #9
 8002f8a:	d94b      	bls.n	8003024 <_svfiprintf_r+0x17c>
 8002f8c:	b1b0      	cbz	r0, 8002fbc <_svfiprintf_r+0x114>
 8002f8e:	9207      	str	r2, [sp, #28]
 8002f90:	e014      	b.n	8002fbc <_svfiprintf_r+0x114>
 8002f92:	eba0 0308 	sub.w	r3, r0, r8
 8002f96:	fa09 f303 	lsl.w	r3, r9, r3
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	9304      	str	r3, [sp, #16]
 8002f9e:	46a2      	mov	sl, r4
 8002fa0:	e7d2      	b.n	8002f48 <_svfiprintf_r+0xa0>
 8002fa2:	9b03      	ldr	r3, [sp, #12]
 8002fa4:	1d19      	adds	r1, r3, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	9103      	str	r1, [sp, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bfbb      	ittet	lt
 8002fae:	425b      	neglt	r3, r3
 8002fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8002fb4:	9307      	strge	r3, [sp, #28]
 8002fb6:	9307      	strlt	r3, [sp, #28]
 8002fb8:	bfb8      	it	lt
 8002fba:	9204      	strlt	r2, [sp, #16]
 8002fbc:	7823      	ldrb	r3, [r4, #0]
 8002fbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fc0:	d10a      	bne.n	8002fd8 <_svfiprintf_r+0x130>
 8002fc2:	7863      	ldrb	r3, [r4, #1]
 8002fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fc6:	d132      	bne.n	800302e <_svfiprintf_r+0x186>
 8002fc8:	9b03      	ldr	r3, [sp, #12]
 8002fca:	1d1a      	adds	r2, r3, #4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	9203      	str	r2, [sp, #12]
 8002fd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fd4:	3402      	adds	r4, #2
 8002fd6:	9305      	str	r3, [sp, #20]
 8002fd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800309c <_svfiprintf_r+0x1f4>
 8002fdc:	7821      	ldrb	r1, [r4, #0]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	4650      	mov	r0, sl
 8002fe2:	f7fd f905 	bl	80001f0 <memchr>
 8002fe6:	b138      	cbz	r0, 8002ff8 <_svfiprintf_r+0x150>
 8002fe8:	9b04      	ldr	r3, [sp, #16]
 8002fea:	eba0 000a 	sub.w	r0, r0, sl
 8002fee:	2240      	movs	r2, #64	@ 0x40
 8002ff0:	4082      	lsls	r2, r0
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	3401      	adds	r4, #1
 8002ff6:	9304      	str	r3, [sp, #16]
 8002ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ffc:	4824      	ldr	r0, [pc, #144]	@ (8003090 <_svfiprintf_r+0x1e8>)
 8002ffe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003002:	2206      	movs	r2, #6
 8003004:	f7fd f8f4 	bl	80001f0 <memchr>
 8003008:	2800      	cmp	r0, #0
 800300a:	d036      	beq.n	800307a <_svfiprintf_r+0x1d2>
 800300c:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <_svfiprintf_r+0x1ec>)
 800300e:	bb1b      	cbnz	r3, 8003058 <_svfiprintf_r+0x1b0>
 8003010:	9b03      	ldr	r3, [sp, #12]
 8003012:	3307      	adds	r3, #7
 8003014:	f023 0307 	bic.w	r3, r3, #7
 8003018:	3308      	adds	r3, #8
 800301a:	9303      	str	r3, [sp, #12]
 800301c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800301e:	4433      	add	r3, r6
 8003020:	9309      	str	r3, [sp, #36]	@ 0x24
 8003022:	e76a      	b.n	8002efa <_svfiprintf_r+0x52>
 8003024:	fb0c 3202 	mla	r2, ip, r2, r3
 8003028:	460c      	mov	r4, r1
 800302a:	2001      	movs	r0, #1
 800302c:	e7a8      	b.n	8002f80 <_svfiprintf_r+0xd8>
 800302e:	2300      	movs	r3, #0
 8003030:	3401      	adds	r4, #1
 8003032:	9305      	str	r3, [sp, #20]
 8003034:	4619      	mov	r1, r3
 8003036:	f04f 0c0a 	mov.w	ip, #10
 800303a:	4620      	mov	r0, r4
 800303c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003040:	3a30      	subs	r2, #48	@ 0x30
 8003042:	2a09      	cmp	r2, #9
 8003044:	d903      	bls.n	800304e <_svfiprintf_r+0x1a6>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0c6      	beq.n	8002fd8 <_svfiprintf_r+0x130>
 800304a:	9105      	str	r1, [sp, #20]
 800304c:	e7c4      	b.n	8002fd8 <_svfiprintf_r+0x130>
 800304e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003052:	4604      	mov	r4, r0
 8003054:	2301      	movs	r3, #1
 8003056:	e7f0      	b.n	800303a <_svfiprintf_r+0x192>
 8003058:	ab03      	add	r3, sp, #12
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	462a      	mov	r2, r5
 800305e:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <_svfiprintf_r+0x1f0>)
 8003060:	a904      	add	r1, sp, #16
 8003062:	4638      	mov	r0, r7
 8003064:	f3af 8000 	nop.w
 8003068:	1c42      	adds	r2, r0, #1
 800306a:	4606      	mov	r6, r0
 800306c:	d1d6      	bne.n	800301c <_svfiprintf_r+0x174>
 800306e:	89ab      	ldrh	r3, [r5, #12]
 8003070:	065b      	lsls	r3, r3, #25
 8003072:	f53f af2d 	bmi.w	8002ed0 <_svfiprintf_r+0x28>
 8003076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003078:	e72c      	b.n	8002ed4 <_svfiprintf_r+0x2c>
 800307a:	ab03      	add	r3, sp, #12
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	462a      	mov	r2, r5
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <_svfiprintf_r+0x1f0>)
 8003082:	a904      	add	r1, sp, #16
 8003084:	4638      	mov	r0, r7
 8003086:	f000 f879 	bl	800317c <_printf_i>
 800308a:	e7ed      	b.n	8003068 <_svfiprintf_r+0x1c0>
 800308c:	080034d0 	.word	0x080034d0
 8003090:	080034da 	.word	0x080034da
 8003094:	00000000 	.word	0x00000000
 8003098:	08002df1 	.word	0x08002df1
 800309c:	080034d6 	.word	0x080034d6

080030a0 <_printf_common>:
 80030a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a4:	4616      	mov	r6, r2
 80030a6:	4698      	mov	r8, r3
 80030a8:	688a      	ldr	r2, [r1, #8]
 80030aa:	690b      	ldr	r3, [r1, #16]
 80030ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030b0:	4293      	cmp	r3, r2
 80030b2:	bfb8      	it	lt
 80030b4:	4613      	movlt	r3, r2
 80030b6:	6033      	str	r3, [r6, #0]
 80030b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030bc:	4607      	mov	r7, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	b10a      	cbz	r2, 80030c6 <_printf_common+0x26>
 80030c2:	3301      	adds	r3, #1
 80030c4:	6033      	str	r3, [r6, #0]
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	0699      	lsls	r1, r3, #26
 80030ca:	bf42      	ittt	mi
 80030cc:	6833      	ldrmi	r3, [r6, #0]
 80030ce:	3302      	addmi	r3, #2
 80030d0:	6033      	strmi	r3, [r6, #0]
 80030d2:	6825      	ldr	r5, [r4, #0]
 80030d4:	f015 0506 	ands.w	r5, r5, #6
 80030d8:	d106      	bne.n	80030e8 <_printf_common+0x48>
 80030da:	f104 0a19 	add.w	sl, r4, #25
 80030de:	68e3      	ldr	r3, [r4, #12]
 80030e0:	6832      	ldr	r2, [r6, #0]
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	42ab      	cmp	r3, r5
 80030e6:	dc26      	bgt.n	8003136 <_printf_common+0x96>
 80030e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	3b00      	subs	r3, #0
 80030f0:	bf18      	it	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	0692      	lsls	r2, r2, #26
 80030f6:	d42b      	bmi.n	8003150 <_printf_common+0xb0>
 80030f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030fc:	4641      	mov	r1, r8
 80030fe:	4638      	mov	r0, r7
 8003100:	47c8      	blx	r9
 8003102:	3001      	adds	r0, #1
 8003104:	d01e      	beq.n	8003144 <_printf_common+0xa4>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	6922      	ldr	r2, [r4, #16]
 800310a:	f003 0306 	and.w	r3, r3, #6
 800310e:	2b04      	cmp	r3, #4
 8003110:	bf02      	ittt	eq
 8003112:	68e5      	ldreq	r5, [r4, #12]
 8003114:	6833      	ldreq	r3, [r6, #0]
 8003116:	1aed      	subeq	r5, r5, r3
 8003118:	68a3      	ldr	r3, [r4, #8]
 800311a:	bf0c      	ite	eq
 800311c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003120:	2500      	movne	r5, #0
 8003122:	4293      	cmp	r3, r2
 8003124:	bfc4      	itt	gt
 8003126:	1a9b      	subgt	r3, r3, r2
 8003128:	18ed      	addgt	r5, r5, r3
 800312a:	2600      	movs	r6, #0
 800312c:	341a      	adds	r4, #26
 800312e:	42b5      	cmp	r5, r6
 8003130:	d11a      	bne.n	8003168 <_printf_common+0xc8>
 8003132:	2000      	movs	r0, #0
 8003134:	e008      	b.n	8003148 <_printf_common+0xa8>
 8003136:	2301      	movs	r3, #1
 8003138:	4652      	mov	r2, sl
 800313a:	4641      	mov	r1, r8
 800313c:	4638      	mov	r0, r7
 800313e:	47c8      	blx	r9
 8003140:	3001      	adds	r0, #1
 8003142:	d103      	bne.n	800314c <_printf_common+0xac>
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800314c:	3501      	adds	r5, #1
 800314e:	e7c6      	b.n	80030de <_printf_common+0x3e>
 8003150:	18e1      	adds	r1, r4, r3
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	2030      	movs	r0, #48	@ 0x30
 8003156:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800315a:	4422      	add	r2, r4
 800315c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003160:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003164:	3302      	adds	r3, #2
 8003166:	e7c7      	b.n	80030f8 <_printf_common+0x58>
 8003168:	2301      	movs	r3, #1
 800316a:	4622      	mov	r2, r4
 800316c:	4641      	mov	r1, r8
 800316e:	4638      	mov	r0, r7
 8003170:	47c8      	blx	r9
 8003172:	3001      	adds	r0, #1
 8003174:	d0e6      	beq.n	8003144 <_printf_common+0xa4>
 8003176:	3601      	adds	r6, #1
 8003178:	e7d9      	b.n	800312e <_printf_common+0x8e>
	...

0800317c <_printf_i>:
 800317c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003180:	7e0f      	ldrb	r7, [r1, #24]
 8003182:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003184:	2f78      	cmp	r7, #120	@ 0x78
 8003186:	4691      	mov	r9, r2
 8003188:	4680      	mov	r8, r0
 800318a:	460c      	mov	r4, r1
 800318c:	469a      	mov	sl, r3
 800318e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003192:	d807      	bhi.n	80031a4 <_printf_i+0x28>
 8003194:	2f62      	cmp	r7, #98	@ 0x62
 8003196:	d80a      	bhi.n	80031ae <_printf_i+0x32>
 8003198:	2f00      	cmp	r7, #0
 800319a:	f000 80d1 	beq.w	8003340 <_printf_i+0x1c4>
 800319e:	2f58      	cmp	r7, #88	@ 0x58
 80031a0:	f000 80b8 	beq.w	8003314 <_printf_i+0x198>
 80031a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031ac:	e03a      	b.n	8003224 <_printf_i+0xa8>
 80031ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031b2:	2b15      	cmp	r3, #21
 80031b4:	d8f6      	bhi.n	80031a4 <_printf_i+0x28>
 80031b6:	a101      	add	r1, pc, #4	@ (adr r1, 80031bc <_printf_i+0x40>)
 80031b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031bc:	08003215 	.word	0x08003215
 80031c0:	08003229 	.word	0x08003229
 80031c4:	080031a5 	.word	0x080031a5
 80031c8:	080031a5 	.word	0x080031a5
 80031cc:	080031a5 	.word	0x080031a5
 80031d0:	080031a5 	.word	0x080031a5
 80031d4:	08003229 	.word	0x08003229
 80031d8:	080031a5 	.word	0x080031a5
 80031dc:	080031a5 	.word	0x080031a5
 80031e0:	080031a5 	.word	0x080031a5
 80031e4:	080031a5 	.word	0x080031a5
 80031e8:	08003327 	.word	0x08003327
 80031ec:	08003253 	.word	0x08003253
 80031f0:	080032e1 	.word	0x080032e1
 80031f4:	080031a5 	.word	0x080031a5
 80031f8:	080031a5 	.word	0x080031a5
 80031fc:	08003349 	.word	0x08003349
 8003200:	080031a5 	.word	0x080031a5
 8003204:	08003253 	.word	0x08003253
 8003208:	080031a5 	.word	0x080031a5
 800320c:	080031a5 	.word	0x080031a5
 8003210:	080032e9 	.word	0x080032e9
 8003214:	6833      	ldr	r3, [r6, #0]
 8003216:	1d1a      	adds	r2, r3, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6032      	str	r2, [r6, #0]
 800321c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003220:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003224:	2301      	movs	r3, #1
 8003226:	e09c      	b.n	8003362 <_printf_i+0x1e6>
 8003228:	6833      	ldr	r3, [r6, #0]
 800322a:	6820      	ldr	r0, [r4, #0]
 800322c:	1d19      	adds	r1, r3, #4
 800322e:	6031      	str	r1, [r6, #0]
 8003230:	0606      	lsls	r6, r0, #24
 8003232:	d501      	bpl.n	8003238 <_printf_i+0xbc>
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	e003      	b.n	8003240 <_printf_i+0xc4>
 8003238:	0645      	lsls	r5, r0, #25
 800323a:	d5fb      	bpl.n	8003234 <_printf_i+0xb8>
 800323c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003240:	2d00      	cmp	r5, #0
 8003242:	da03      	bge.n	800324c <_printf_i+0xd0>
 8003244:	232d      	movs	r3, #45	@ 0x2d
 8003246:	426d      	negs	r5, r5
 8003248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800324c:	4858      	ldr	r0, [pc, #352]	@ (80033b0 <_printf_i+0x234>)
 800324e:	230a      	movs	r3, #10
 8003250:	e011      	b.n	8003276 <_printf_i+0xfa>
 8003252:	6821      	ldr	r1, [r4, #0]
 8003254:	6833      	ldr	r3, [r6, #0]
 8003256:	0608      	lsls	r0, r1, #24
 8003258:	f853 5b04 	ldr.w	r5, [r3], #4
 800325c:	d402      	bmi.n	8003264 <_printf_i+0xe8>
 800325e:	0649      	lsls	r1, r1, #25
 8003260:	bf48      	it	mi
 8003262:	b2ad      	uxthmi	r5, r5
 8003264:	2f6f      	cmp	r7, #111	@ 0x6f
 8003266:	4852      	ldr	r0, [pc, #328]	@ (80033b0 <_printf_i+0x234>)
 8003268:	6033      	str	r3, [r6, #0]
 800326a:	bf14      	ite	ne
 800326c:	230a      	movne	r3, #10
 800326e:	2308      	moveq	r3, #8
 8003270:	2100      	movs	r1, #0
 8003272:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003276:	6866      	ldr	r6, [r4, #4]
 8003278:	60a6      	str	r6, [r4, #8]
 800327a:	2e00      	cmp	r6, #0
 800327c:	db05      	blt.n	800328a <_printf_i+0x10e>
 800327e:	6821      	ldr	r1, [r4, #0]
 8003280:	432e      	orrs	r6, r5
 8003282:	f021 0104 	bic.w	r1, r1, #4
 8003286:	6021      	str	r1, [r4, #0]
 8003288:	d04b      	beq.n	8003322 <_printf_i+0x1a6>
 800328a:	4616      	mov	r6, r2
 800328c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003290:	fb03 5711 	mls	r7, r3, r1, r5
 8003294:	5dc7      	ldrb	r7, [r0, r7]
 8003296:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800329a:	462f      	mov	r7, r5
 800329c:	42bb      	cmp	r3, r7
 800329e:	460d      	mov	r5, r1
 80032a0:	d9f4      	bls.n	800328c <_printf_i+0x110>
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d10b      	bne.n	80032be <_printf_i+0x142>
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	07df      	lsls	r7, r3, #31
 80032aa:	d508      	bpl.n	80032be <_printf_i+0x142>
 80032ac:	6923      	ldr	r3, [r4, #16]
 80032ae:	6861      	ldr	r1, [r4, #4]
 80032b0:	4299      	cmp	r1, r3
 80032b2:	bfde      	ittt	le
 80032b4:	2330      	movle	r3, #48	@ 0x30
 80032b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032be:	1b92      	subs	r2, r2, r6
 80032c0:	6122      	str	r2, [r4, #16]
 80032c2:	f8cd a000 	str.w	sl, [sp]
 80032c6:	464b      	mov	r3, r9
 80032c8:	aa03      	add	r2, sp, #12
 80032ca:	4621      	mov	r1, r4
 80032cc:	4640      	mov	r0, r8
 80032ce:	f7ff fee7 	bl	80030a0 <_printf_common>
 80032d2:	3001      	adds	r0, #1
 80032d4:	d14a      	bne.n	800336c <_printf_i+0x1f0>
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	b004      	add	sp, #16
 80032dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	f043 0320 	orr.w	r3, r3, #32
 80032e6:	6023      	str	r3, [r4, #0]
 80032e8:	4832      	ldr	r0, [pc, #200]	@ (80033b4 <_printf_i+0x238>)
 80032ea:	2778      	movs	r7, #120	@ 0x78
 80032ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	6831      	ldr	r1, [r6, #0]
 80032f4:	061f      	lsls	r7, r3, #24
 80032f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80032fa:	d402      	bmi.n	8003302 <_printf_i+0x186>
 80032fc:	065f      	lsls	r7, r3, #25
 80032fe:	bf48      	it	mi
 8003300:	b2ad      	uxthmi	r5, r5
 8003302:	6031      	str	r1, [r6, #0]
 8003304:	07d9      	lsls	r1, r3, #31
 8003306:	bf44      	itt	mi
 8003308:	f043 0320 	orrmi.w	r3, r3, #32
 800330c:	6023      	strmi	r3, [r4, #0]
 800330e:	b11d      	cbz	r5, 8003318 <_printf_i+0x19c>
 8003310:	2310      	movs	r3, #16
 8003312:	e7ad      	b.n	8003270 <_printf_i+0xf4>
 8003314:	4826      	ldr	r0, [pc, #152]	@ (80033b0 <_printf_i+0x234>)
 8003316:	e7e9      	b.n	80032ec <_printf_i+0x170>
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	f023 0320 	bic.w	r3, r3, #32
 800331e:	6023      	str	r3, [r4, #0]
 8003320:	e7f6      	b.n	8003310 <_printf_i+0x194>
 8003322:	4616      	mov	r6, r2
 8003324:	e7bd      	b.n	80032a2 <_printf_i+0x126>
 8003326:	6833      	ldr	r3, [r6, #0]
 8003328:	6825      	ldr	r5, [r4, #0]
 800332a:	6961      	ldr	r1, [r4, #20]
 800332c:	1d18      	adds	r0, r3, #4
 800332e:	6030      	str	r0, [r6, #0]
 8003330:	062e      	lsls	r6, r5, #24
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	d501      	bpl.n	800333a <_printf_i+0x1be>
 8003336:	6019      	str	r1, [r3, #0]
 8003338:	e002      	b.n	8003340 <_printf_i+0x1c4>
 800333a:	0668      	lsls	r0, r5, #25
 800333c:	d5fb      	bpl.n	8003336 <_printf_i+0x1ba>
 800333e:	8019      	strh	r1, [r3, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	6123      	str	r3, [r4, #16]
 8003344:	4616      	mov	r6, r2
 8003346:	e7bc      	b.n	80032c2 <_printf_i+0x146>
 8003348:	6833      	ldr	r3, [r6, #0]
 800334a:	1d1a      	adds	r2, r3, #4
 800334c:	6032      	str	r2, [r6, #0]
 800334e:	681e      	ldr	r6, [r3, #0]
 8003350:	6862      	ldr	r2, [r4, #4]
 8003352:	2100      	movs	r1, #0
 8003354:	4630      	mov	r0, r6
 8003356:	f7fc ff4b 	bl	80001f0 <memchr>
 800335a:	b108      	cbz	r0, 8003360 <_printf_i+0x1e4>
 800335c:	1b80      	subs	r0, r0, r6
 800335e:	6060      	str	r0, [r4, #4]
 8003360:	6863      	ldr	r3, [r4, #4]
 8003362:	6123      	str	r3, [r4, #16]
 8003364:	2300      	movs	r3, #0
 8003366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800336a:	e7aa      	b.n	80032c2 <_printf_i+0x146>
 800336c:	6923      	ldr	r3, [r4, #16]
 800336e:	4632      	mov	r2, r6
 8003370:	4649      	mov	r1, r9
 8003372:	4640      	mov	r0, r8
 8003374:	47d0      	blx	sl
 8003376:	3001      	adds	r0, #1
 8003378:	d0ad      	beq.n	80032d6 <_printf_i+0x15a>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	079b      	lsls	r3, r3, #30
 800337e:	d413      	bmi.n	80033a8 <_printf_i+0x22c>
 8003380:	68e0      	ldr	r0, [r4, #12]
 8003382:	9b03      	ldr	r3, [sp, #12]
 8003384:	4298      	cmp	r0, r3
 8003386:	bfb8      	it	lt
 8003388:	4618      	movlt	r0, r3
 800338a:	e7a6      	b.n	80032da <_printf_i+0x15e>
 800338c:	2301      	movs	r3, #1
 800338e:	4632      	mov	r2, r6
 8003390:	4649      	mov	r1, r9
 8003392:	4640      	mov	r0, r8
 8003394:	47d0      	blx	sl
 8003396:	3001      	adds	r0, #1
 8003398:	d09d      	beq.n	80032d6 <_printf_i+0x15a>
 800339a:	3501      	adds	r5, #1
 800339c:	68e3      	ldr	r3, [r4, #12]
 800339e:	9903      	ldr	r1, [sp, #12]
 80033a0:	1a5b      	subs	r3, r3, r1
 80033a2:	42ab      	cmp	r3, r5
 80033a4:	dcf2      	bgt.n	800338c <_printf_i+0x210>
 80033a6:	e7eb      	b.n	8003380 <_printf_i+0x204>
 80033a8:	2500      	movs	r5, #0
 80033aa:	f104 0619 	add.w	r6, r4, #25
 80033ae:	e7f5      	b.n	800339c <_printf_i+0x220>
 80033b0:	080034e1 	.word	0x080034e1
 80033b4:	080034f2 	.word	0x080034f2

080033b8 <memmove>:
 80033b8:	4288      	cmp	r0, r1
 80033ba:	b510      	push	{r4, lr}
 80033bc:	eb01 0402 	add.w	r4, r1, r2
 80033c0:	d902      	bls.n	80033c8 <memmove+0x10>
 80033c2:	4284      	cmp	r4, r0
 80033c4:	4623      	mov	r3, r4
 80033c6:	d807      	bhi.n	80033d8 <memmove+0x20>
 80033c8:	1e43      	subs	r3, r0, #1
 80033ca:	42a1      	cmp	r1, r4
 80033cc:	d008      	beq.n	80033e0 <memmove+0x28>
 80033ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033d6:	e7f8      	b.n	80033ca <memmove+0x12>
 80033d8:	4402      	add	r2, r0
 80033da:	4601      	mov	r1, r0
 80033dc:	428a      	cmp	r2, r1
 80033de:	d100      	bne.n	80033e2 <memmove+0x2a>
 80033e0:	bd10      	pop	{r4, pc}
 80033e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033ea:	e7f7      	b.n	80033dc <memmove+0x24>

080033ec <_sbrk_r>:
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	4d06      	ldr	r5, [pc, #24]	@ (8003408 <_sbrk_r+0x1c>)
 80033f0:	2300      	movs	r3, #0
 80033f2:	4604      	mov	r4, r0
 80033f4:	4608      	mov	r0, r1
 80033f6:	602b      	str	r3, [r5, #0]
 80033f8:	f7fd fa9a 	bl	8000930 <_sbrk>
 80033fc:	1c43      	adds	r3, r0, #1
 80033fe:	d102      	bne.n	8003406 <_sbrk_r+0x1a>
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	b103      	cbz	r3, 8003406 <_sbrk_r+0x1a>
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	bd38      	pop	{r3, r4, r5, pc}
 8003408:	20000218 	.word	0x20000218

0800340c <memcpy>:
 800340c:	440a      	add	r2, r1
 800340e:	4291      	cmp	r1, r2
 8003410:	f100 33ff 	add.w	r3, r0, #4294967295
 8003414:	d100      	bne.n	8003418 <memcpy+0xc>
 8003416:	4770      	bx	lr
 8003418:	b510      	push	{r4, lr}
 800341a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800341e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003422:	4291      	cmp	r1, r2
 8003424:	d1f9      	bne.n	800341a <memcpy+0xe>
 8003426:	bd10      	pop	{r4, pc}

08003428 <_realloc_r>:
 8003428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800342c:	4607      	mov	r7, r0
 800342e:	4614      	mov	r4, r2
 8003430:	460d      	mov	r5, r1
 8003432:	b921      	cbnz	r1, 800343e <_realloc_r+0x16>
 8003434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003438:	4611      	mov	r1, r2
 800343a:	f7ff bc4d 	b.w	8002cd8 <_malloc_r>
 800343e:	b92a      	cbnz	r2, 800344c <_realloc_r+0x24>
 8003440:	f7ff fbde 	bl	8002c00 <_free_r>
 8003444:	4625      	mov	r5, r4
 8003446:	4628      	mov	r0, r5
 8003448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800344c:	f000 f81a 	bl	8003484 <_malloc_usable_size_r>
 8003450:	4284      	cmp	r4, r0
 8003452:	4606      	mov	r6, r0
 8003454:	d802      	bhi.n	800345c <_realloc_r+0x34>
 8003456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800345a:	d8f4      	bhi.n	8003446 <_realloc_r+0x1e>
 800345c:	4621      	mov	r1, r4
 800345e:	4638      	mov	r0, r7
 8003460:	f7ff fc3a 	bl	8002cd8 <_malloc_r>
 8003464:	4680      	mov	r8, r0
 8003466:	b908      	cbnz	r0, 800346c <_realloc_r+0x44>
 8003468:	4645      	mov	r5, r8
 800346a:	e7ec      	b.n	8003446 <_realloc_r+0x1e>
 800346c:	42b4      	cmp	r4, r6
 800346e:	4622      	mov	r2, r4
 8003470:	4629      	mov	r1, r5
 8003472:	bf28      	it	cs
 8003474:	4632      	movcs	r2, r6
 8003476:	f7ff ffc9 	bl	800340c <memcpy>
 800347a:	4629      	mov	r1, r5
 800347c:	4638      	mov	r0, r7
 800347e:	f7ff fbbf 	bl	8002c00 <_free_r>
 8003482:	e7f1      	b.n	8003468 <_realloc_r+0x40>

08003484 <_malloc_usable_size_r>:
 8003484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003488:	1f18      	subs	r0, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	bfbc      	itt	lt
 800348e:	580b      	ldrlt	r3, [r1, r0]
 8003490:	18c0      	addlt	r0, r0, r3
 8003492:	4770      	bx	lr

08003494 <_init>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr

080034a0 <_fini>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr
