
G474RE_Transmit_DAC_Ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005ea8  08005ea8  00006ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006090  08006090  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006090  08006090  00007090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006098  08006098  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006098  08006098  00007098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800609c  0800609c  0000709c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080060a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000018  080060b4  00008018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080060b4  0000836c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012893  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002895  00000000  00000000  0001a8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0001d170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea7  00000000  00000000  0001e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280d6  00000000  00000000  0001f31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014444  00000000  00000000  000473f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f1a8  00000000  00000000  0005b839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a9e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005590  00000000  00000000  0016aa24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0016ffb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e90 	.word	0x08005e90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08005e90 	.word	0x08005e90

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__gedf2>:
 80007f4:	f04f 3cff 	mov.w	ip, #4294967295
 80007f8:	e006      	b.n	8000808 <__cmpdf2+0x4>
 80007fa:	bf00      	nop

080007fc <__ledf2>:
 80007fc:	f04f 0c01 	mov.w	ip, #1
 8000800:	e002      	b.n	8000808 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__cmpdf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	f84d cd04 	str.w	ip, [sp, #-4]!
 800080c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000810:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800081e:	d01b      	beq.n	8000858 <__cmpdf2+0x54>
 8000820:	b001      	add	sp, #4
 8000822:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000826:	bf0c      	ite	eq
 8000828:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800082c:	ea91 0f03 	teqne	r1, r3
 8000830:	bf02      	ittt	eq
 8000832:	ea90 0f02 	teqeq	r0, r2
 8000836:	2000      	moveq	r0, #0
 8000838:	4770      	bxeq	lr
 800083a:	f110 0f00 	cmn.w	r0, #0
 800083e:	ea91 0f03 	teq	r1, r3
 8000842:	bf58      	it	pl
 8000844:	4299      	cmppl	r1, r3
 8000846:	bf08      	it	eq
 8000848:	4290      	cmpeq	r0, r2
 800084a:	bf2c      	ite	cs
 800084c:	17d8      	asrcs	r0, r3, #31
 800084e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000852:	f040 0001 	orr.w	r0, r0, #1
 8000856:	4770      	bx	lr
 8000858:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d102      	bne.n	8000868 <__cmpdf2+0x64>
 8000862:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000866:	d107      	bne.n	8000878 <__cmpdf2+0x74>
 8000868:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800086c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000870:	d1d6      	bne.n	8000820 <__cmpdf2+0x1c>
 8000872:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000876:	d0d3      	beq.n	8000820 <__cmpdf2+0x1c>
 8000878:	f85d 0b04 	ldr.w	r0, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <__aeabi_cdrcmple>:
 8000880:	4684      	mov	ip, r0
 8000882:	4610      	mov	r0, r2
 8000884:	4662      	mov	r2, ip
 8000886:	468c      	mov	ip, r1
 8000888:	4619      	mov	r1, r3
 800088a:	4663      	mov	r3, ip
 800088c:	e000      	b.n	8000890 <__aeabi_cdcmpeq>
 800088e:	bf00      	nop

08000890 <__aeabi_cdcmpeq>:
 8000890:	b501      	push	{r0, lr}
 8000892:	f7ff ffb7 	bl	8000804 <__cmpdf2>
 8000896:	2800      	cmp	r0, #0
 8000898:	bf48      	it	mi
 800089a:	f110 0f00 	cmnmi.w	r0, #0
 800089e:	bd01      	pop	{r0, pc}

080008a0 <__aeabi_dcmpeq>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff fff4 	bl	8000890 <__aeabi_cdcmpeq>
 80008a8:	bf0c      	ite	eq
 80008aa:	2001      	moveq	r0, #1
 80008ac:	2000      	movne	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmplt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffea 	bl	8000890 <__aeabi_cdcmpeq>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_dcmple>:
 80008c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008cc:	f7ff ffe0 	bl	8000890 <__aeabi_cdcmpeq>
 80008d0:	bf94      	ite	ls
 80008d2:	2001      	movls	r0, #1
 80008d4:	2000      	movhi	r0, #0
 80008d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008da:	bf00      	nop

080008dc <__aeabi_dcmpge>:
 80008dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e0:	f7ff ffce 	bl	8000880 <__aeabi_cdrcmple>
 80008e4:	bf94      	ite	ls
 80008e6:	2001      	movls	r0, #1
 80008e8:	2000      	movhi	r0, #0
 80008ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ee:	bf00      	nop

080008f0 <__aeabi_dcmpgt>:
 80008f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008f4:	f7ff ffc4 	bl	8000880 <__aeabi_cdrcmple>
 80008f8:	bf34      	ite	cc
 80008fa:	2001      	movcc	r0, #1
 80008fc:	2000      	movcs	r0, #0
 80008fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000902:	bf00      	nop

08000904 <__aeabi_d2iz>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800090c:	d215      	bcs.n	800093a <__aeabi_d2iz+0x36>
 800090e:	d511      	bpl.n	8000934 <__aeabi_d2iz+0x30>
 8000910:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000914:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000918:	d912      	bls.n	8000940 <__aeabi_d2iz+0x3c>
 800091a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000922:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000926:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800092a:	fa23 f002 	lsr.w	r0, r3, r2
 800092e:	bf18      	it	ne
 8000930:	4240      	negne	r0, r0
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d105      	bne.n	800094c <__aeabi_d2iz+0x48>
 8000940:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000944:	bf08      	it	eq
 8000946:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <__aeabi_d2uiz>:
 8000954:	004a      	lsls	r2, r1, #1
 8000956:	d211      	bcs.n	800097c <__aeabi_d2uiz+0x28>
 8000958:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800095c:	d211      	bcs.n	8000982 <__aeabi_d2uiz+0x2e>
 800095e:	d50d      	bpl.n	800097c <__aeabi_d2uiz+0x28>
 8000960:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000964:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000968:	d40e      	bmi.n	8000988 <__aeabi_d2uiz+0x34>
 800096a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800096e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000972:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000976:	fa23 f002 	lsr.w	r0, r3, r2
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000986:	d102      	bne.n	800098e <__aeabi_d2uiz+0x3a>
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	4770      	bx	lr
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	4770      	bx	lr
 8000994:	0000      	movs	r0, r0
	...

08000998 <FillBuffer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void FillBuffer(int offset, int length) {
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; i++) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e09a      	b.n	8000ade <FillBuffer+0x146>
		dac_buffer[offset + i] =
				(uint16_t) ((sin(phase) + 1.0) * (DAC_MAX / 2));
 80009a8:	4b5b      	ldr	r3, [pc, #364]	@ (8000b18 <FillBuffer+0x180>)
 80009aa:	ed93 7b00 	vldr	d7, [r3]
 80009ae:	eeb0 0a47 	vmov.f32	s0, s14
 80009b2:	eef0 0a67 	vmov.f32	s1, s15
 80009b6:	f004 fa47 	bl	8004e48 <sin>
 80009ba:	ec51 0b10 	vmov	r0, r1, d0
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	4b56      	ldr	r3, [pc, #344]	@ (8000b1c <FillBuffer+0x184>)
 80009c4:	f7ff fd60 	bl	8000488 <__adddf3>
 80009c8:	4602      	mov	r2, r0
 80009ca:	460b      	mov	r3, r1
 80009cc:	4610      	mov	r0, r2
 80009ce:	4619      	mov	r1, r3
 80009d0:	a349      	add	r3, pc, #292	@ (adr r3, 8000af8 <FillBuffer+0x160>)
 80009d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d6:	f7ff fc27 	bl	8000228 <__aeabi_dmul>
 80009da:	4602      	mov	r2, r0
 80009dc:	460b      	mov	r3, r1
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
		dac_buffer[offset + i] =
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	18d4      	adds	r4, r2, r3
				(uint16_t) ((sin(phase) + 1.0) * (DAC_MAX / 2));
 80009e8:	f7ff ffb4 	bl	8000954 <__aeabi_d2uiz>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
		dac_buffer[offset + i] =
 80009f0:	4b4b      	ldr	r3, [pc, #300]	@ (8000b20 <FillBuffer+0x188>)
 80009f2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

		phase += phase_inc;
 80009f6:	4b48      	ldr	r3, [pc, #288]	@ (8000b18 <FillBuffer+0x180>)
 80009f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009fc:	4b49      	ldr	r3, [pc, #292]	@ (8000b24 <FillBuffer+0x18c>)
 80009fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a02:	f7ff fd41 	bl	8000488 <__adddf3>
 8000a06:	4602      	mov	r2, r0
 8000a08:	460b      	mov	r3, r1
 8000a0a:	4943      	ldr	r1, [pc, #268]	@ (8000b18 <FillBuffer+0x180>)
 8000a0c:	e9c1 2300 	strd	r2, r3, [r1]
		if (phase >= 2.0 * M_PI)
 8000a10:	4b41      	ldr	r3, [pc, #260]	@ (8000b18 <FillBuffer+0x180>)
 8000a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a16:	a33a      	add	r3, pc, #232	@ (adr r3, 8000b00 <FillBuffer+0x168>)
 8000a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a1c:	f7ff ff5e 	bl	80008dc <__aeabi_dcmpge>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d00c      	beq.n	8000a40 <FillBuffer+0xa8>
			phase -= 2.0 * M_PI;
 8000a26:	4b3c      	ldr	r3, [pc, #240]	@ (8000b18 <FillBuffer+0x180>)
 8000a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a2c:	a334      	add	r3, pc, #208	@ (adr r3, 8000b00 <FillBuffer+0x168>)
 8000a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a32:	f7ff fd27 	bl	8000484 <__aeabi_dsub>
 8000a36:	4602      	mov	r2, r0
 8000a38:	460b      	mov	r3, r1
 8000a3a:	4937      	ldr	r1, [pc, #220]	@ (8000b18 <FillBuffer+0x180>)
 8000a3c:	e9c1 2300 	strd	r2, r3, [r1]

		sample_count++;
 8000a40:	4b39      	ldr	r3, [pc, #228]	@ (8000b28 <FillBuffer+0x190>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a38      	ldr	r2, [pc, #224]	@ (8000b28 <FillBuffer+0x190>)
 8000a48:	6013      	str	r3, [r2, #0]
		if (sample_count >= SAMPLES_PER_BIT) {
 8000a4a:	4b37      	ldr	r3, [pc, #220]	@ (8000b28 <FillBuffer+0x190>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b31      	cmp	r3, #49	@ 0x31
 8000a50:	d942      	bls.n	8000ad8 <FillBuffer+0x140>
			sample_count = 0;
 8000a52:	4b35      	ldr	r3, [pc, #212]	@ (8000b28 <FillBuffer+0x190>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]

			// Get next bit
			current_bit = (message[msg_index] >> bit_index) & 1;
 8000a58:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <FillBuffer+0x194>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b34      	ldr	r3, [pc, #208]	@ (8000b30 <FillBuffer+0x198>)
 8000a60:	5c9b      	ldrb	r3, [r3, r2]
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b33      	ldr	r3, [pc, #204]	@ (8000b34 <FillBuffer+0x19c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	fa42 f303 	asr.w	r3, r2, r3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b30      	ldr	r3, [pc, #192]	@ (8000b38 <FillBuffer+0x1a0>)
 8000a76:	701a      	strb	r2, [r3, #0]
			bit_index++;
 8000a78:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <FillBuffer+0x19c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b2c      	ldr	r3, [pc, #176]	@ (8000b34 <FillBuffer+0x19c>)
 8000a82:	701a      	strb	r2, [r3, #0]
			if (bit_index >= 8) {
 8000a84:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <FillBuffer+0x19c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	d914      	bls.n	8000ab6 <FillBuffer+0x11e>
				bit_index = 0;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	@ (8000b34 <FillBuffer+0x19c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
				msg_index++;
 8000a92:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <FillBuffer+0x194>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <FillBuffer+0x194>)
 8000a9c:	701a      	strb	r2, [r3, #0]
				if (msg_index >= strlen(message))
 8000a9e:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <FillBuffer+0x194>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	461c      	mov	r4, r3
 8000aa4:	4822      	ldr	r0, [pc, #136]	@ (8000b30 <FillBuffer+0x198>)
 8000aa6:	f7ff fbb7 	bl	8000218 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	429c      	cmp	r4, r3
 8000aae:	d302      	bcc.n	8000ab6 <FillBuffer+0x11e>
					msg_index = 0;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <FillBuffer+0x194>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
			}

			// Set tone frequency
			if (current_bit)
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <FillBuffer+0x1a0>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <FillBuffer+0x134>
				phase_inc = 2.0 * M_PI * TONE_MARK / SAMPLE_RATE;
 8000abe:	4919      	ldr	r1, [pc, #100]	@ (8000b24 <FillBuffer+0x18c>)
 8000ac0:	a311      	add	r3, pc, #68	@ (adr r3, 8000b08 <FillBuffer+0x170>)
 8000ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac6:	e9c1 2300 	strd	r2, r3, [r1]
 8000aca:	e005      	b.n	8000ad8 <FillBuffer+0x140>
			else
				phase_inc = 2.0 * M_PI * TONE_SPACE / SAMPLE_RATE;
 8000acc:	4915      	ldr	r1, [pc, #84]	@ (8000b24 <FillBuffer+0x18c>)
 8000ace:	a310      	add	r3, pc, #64	@ (adr r3, 8000b10 <FillBuffer+0x178>)
 8000ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad4:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < length; i++) {
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3301      	adds	r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	f6ff af60 	blt.w	80009a8 <FillBuffer+0x10>
		}
	}
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	f3af 8000 	nop.w
 8000af8:	00000000 	.word	0x00000000
 8000afc:	409ffc00 	.word	0x409ffc00
 8000b00:	54442d18 	.word	0x54442d18
 8000b04:	401921fb 	.word	0x401921fb
 8000b08:	31eb6950 	.word	0x31eb6950
 8000b0c:	3fce28c7 	.word	0x3fce28c7
 8000b10:	54442d18 	.word	0x54442d18
 8000b14:	3fd921fb 	.word	0x3fd921fb
 8000b18:	200001c8 	.word	0x200001c8
 8000b1c:	3ff00000 	.word	0x3ff00000
 8000b20:	20000038 	.word	0x20000038
 8000b24:	200001d0 	.word	0x200001d0
 8000b28:	200001d8 	.word	0x200001d8
 8000b2c:	20000034 	.word	0x20000034
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000035 	.word	0x20000035
 8000b38:	20000036 	.word	0x20000036

08000b3c <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	FillBuffer(0, BUFFER_LEN / 2);
 8000b44:	2164      	movs	r1, #100	@ 0x64
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff ff26 	bl	8000998 <FillBuffer>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	FillBuffer(BUFFER_LEN / 2, BUFFER_LEN / 2);
 8000b5c:	2164      	movs	r1, #100	@ 0x64
 8000b5e:	2064      	movs	r0, #100	@ 0x64
 8000b60:	f7ff ff1a 	bl	8000998 <FillBuffer>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	0000      	movs	r0, r0
	...

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fbb8 	bl	80012ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f851 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 f9cb 	bl	8000f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b82:	f000 f997 	bl	8000eb4 <MX_DMA_Init>
  MX_DAC2_Init();
 8000b86:	f000 f90f 	bl	8000da8 <MX_DAC2_Init>
  MX_TIM2_Init();
 8000b8a:	f000 f947 	bl	8000e1c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b8e:	f000 f893 	bl	8000cb8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	current_bit = (message[msg_index] >> bit_index) & 1;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <main+0x90>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <main+0x94>)
 8000b9a:	5c9b      	ldrb	r3, [r3, r2]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <main+0x98>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	fa42 f303 	asr.w	r3, r2, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <main+0x9c>)
 8000bb0:	701a      	strb	r2, [r3, #0]
	if (current_bit)
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <main+0x9c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <main+0x58>
		phase_inc = 2.0 * M_PI * TONE_MARK / SAMPLE_RATE;
 8000bba:	4915      	ldr	r1, [pc, #84]	@ (8000c10 <main+0xa0>)
 8000bbc:	a30c      	add	r3, pc, #48	@ (adr r3, 8000bf0 <main+0x80>)
 8000bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc2:	e9c1 2300 	strd	r2, r3, [r1]
 8000bc6:	e005      	b.n	8000bd4 <main+0x64>
	else
		phase_inc = 2.0 * M_PI * TONE_SPACE / SAMPLE_RATE;
 8000bc8:	4911      	ldr	r1, [pc, #68]	@ (8000c10 <main+0xa0>)
 8000bca:	a30b      	add	r3, pc, #44	@ (adr r3, 8000bf8 <main+0x88>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_TIM_Base_Start(&htim2);
 8000bd4:	480f      	ldr	r0, [pc, #60]	@ (8000c14 <main+0xa4>)
 8000bd6:	f003 fd9d 	bl	8004714 <HAL_TIM_Base_Start>
	HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, (uint32_t*) dac_buffer, BUFFER_LEN,
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	23c8      	movs	r3, #200	@ 0xc8
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <main+0xa8>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <main+0xac>)
 8000be6:	f001 fe23 	bl	8002830 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000bea:	bf00      	nop
 8000bec:	e7fd      	b.n	8000bea <main+0x7a>
 8000bee:	bf00      	nop
 8000bf0:	31eb6950 	.word	0x31eb6950
 8000bf4:	3fce28c7 	.word	0x3fce28c7
 8000bf8:	54442d18 	.word	0x54442d18
 8000bfc:	3fd921fb 	.word	0x3fd921fb
 8000c00:	20000034 	.word	0x20000034
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000035 	.word	0x20000035
 8000c0c:	20000036 	.word	0x20000036
 8000c10:	200001d0 	.word	0x200001d0
 8000c14:	2000031c 	.word	0x2000031c
 8000c18:	20000038 	.word	0x20000038
 8000c1c:	200002a8 	.word	0x200002a8

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	@ 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0318 	add.w	r3, r7, #24
 8000c2a:	2238      	movs	r2, #56	@ 0x38
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 f8dc 	bl	8004dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f002 fd0a 	bl	800365c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c52:	2340      	movs	r3, #64	@ 0x40
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
 8000c58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c62:	2355      	movs	r3, #85	@ 0x55
 8000c64:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fda4 	bl	80037c4 <HAL_RCC_OscConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c82:	f000 f979 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	230f      	movs	r3, #15
 8000c88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 f8a2 	bl	8003de8 <HAL_RCC_ClockConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000caa:	f000 f965 	bl	8000f78 <Error_Handler>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3750      	adds	r7, #80	@ 0x50
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	@ 0x30
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2220      	movs	r2, #32
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 f88b 	bl	8004dec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cd6:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000cd8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000cdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cde:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000ce0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ce4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cec:	4b2c      	ldr	r3, [pc, #176]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf8:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfe:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d00:	2204      	movs	r2, #4
 8000d02:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d04:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d10:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d16:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d40:	4817      	ldr	r0, [pc, #92]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d42:	f000 fd19 	bl	8001778 <HAL_ADC_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d4c:	f000 f914 	bl	8000f78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4811      	ldr	r0, [pc, #68]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d5c:	f001 fb2e 	bl	80023bc <HAL_ADCEx_MultiModeConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d66:	f000 f907 	bl	8000f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_ADC1_Init+0xec>)
 8000d6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000d72:	2304      	movs	r3, #4
 8000d74:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d76:	237f      	movs	r3, #127	@ 0x7f
 8000d78:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <MX_ADC1_Init+0xe8>)
 8000d88:	f000 feb2 	bl	8001af0 <HAL_ADC_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d92:	f000 f8f1 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3730      	adds	r7, #48	@ 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200001dc 	.word	0x200001dc
 8000da4:	04300002 	.word	0x04300002

08000da8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2230      	movs	r2, #48	@ 0x30
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 f819 	bl	8004dec <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <MX_DAC2_Init+0x6c>)
 8000dbc:	4a16      	ldr	r2, [pc, #88]	@ (8000e18 <MX_DAC2_Init+0x70>)
 8000dbe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000dc0:	4814      	ldr	r0, [pc, #80]	@ (8000e14 <MX_DAC2_Init+0x6c>)
 8000dc2:	f001 fd12 	bl	80027ea <HAL_DAC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000dcc:	f000 f8d4 	bl	8000f78 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000de0:	2312      	movs	r3, #18
 8000de2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <MX_DAC2_Init+0x6c>)
 8000dfc:	f001 fdf6 	bl	80029ec <HAL_DAC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000e06:	f000 f8b7 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	@ 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200002a8 	.word	0x200002a8
 8000e18:	50000c00 	.word	0x50000c00

08000e1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e44:	22a9      	movs	r2, #169	@ 0xa9
 8000e46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e50:	2218      	movs	r2, #24
 8000e52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e60:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e62:	f003 fbff 	bl	8004664 <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e6c:	f000 f884 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e7e:	f003 fcb9 	bl	80047f4 <HAL_TIM_ConfigClockSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e88:	f000 f876 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e9a:	f003 ff11 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f000 f868 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000031c 	.word	0x2000031c

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_DMA_Init+0x60>)
 8000ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ebe:	4a15      	ldr	r2, [pc, #84]	@ (8000f14 <MX_DMA_Init+0x60>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_DMA_Init+0x60>)
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_DMA_Init+0x60>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f14 <MX_DMA_Init+0x60>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_DMA_Init+0x60>)
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	200b      	movs	r0, #11
 8000ef0:	f001 fc47 	bl	8002782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ef4:	200b      	movs	r0, #11
 8000ef6:	f001 fc5e 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	200c      	movs	r0, #12
 8000f00:	f001 fc3f 	bl	8002782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f04:	200c      	movs	r0, #12
 8000f06:	f001 fc56 	bl	80027b6 <HAL_NVIC_EnableIRQ>

}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_GPIO_Init+0x5c>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <MX_GPIO_Init+0x5c>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_GPIO_Init+0x5c>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_GPIO_Init+0x5c>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f74 <MX_GPIO_Init+0x5c>)
 8000f3c:	f043 0320 	orr.w	r3, r3, #32
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_GPIO_Init+0x5c>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0320 	and.w	r3, r3, #32
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_GPIO_Init+0x5c>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <MX_GPIO_Init+0x5c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_GPIO_Init+0x5c>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fba:	f002 fbf3 	bl	80037a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09e      	sub	sp, #120	@ 0x78
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2254      	movs	r2, #84	@ 0x54
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 fefd 	bl	8004dec <memset>
  if(hadc->Instance==ADC1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ffa:	d160      	bne.n	80010be <HAL_ADC_MspInit+0xf2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ffc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001000:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001002:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001006:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4618      	mov	r0, r3
 800100e:	f003 f8db 	bl	80041c8 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001018:	f7ff ffae 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800101c:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <HAL_ADC_MspInit+0xfc>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a29      	ldr	r2, [pc, #164]	@ (80010c8 <HAL_ADC_MspInit+0xfc>)
 8001022:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <HAL_ADC_MspInit+0xfc>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <HAL_ADC_MspInit+0xfc>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001038:	4a23      	ldr	r2, [pc, #140]	@ (80010c8 <HAL_ADC_MspInit+0xfc>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001040:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <HAL_ADC_MspInit+0xfc>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104c:	2301      	movs	r3, #1
 800104e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001050:	2303      	movs	r3, #3
 8001052:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001062:	f002 f979 	bl	8003358 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 8001068:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <HAL_ADC_MspInit+0x104>)
 800106a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 800106e:	2205      	movs	r2, #5
 8001070:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 8001086:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800108a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 800108e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001092:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 8001096:	2220      	movs	r2, #32
 8001098:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 800109c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010a2:	480a      	ldr	r0, [pc, #40]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 80010a4:	f001 fee6 	bl	8002e74 <HAL_DMA_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 80010ae:	f7ff ff63 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 80010b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <HAL_ADC_MspInit+0x100>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010be:	bf00      	nop
 80010c0:	3778      	adds	r7, #120	@ 0x78
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	20000248 	.word	0x20000248
 80010d0:	4002001c 	.word	0x4002001c

080010d4 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a2b      	ldr	r2, [pc, #172]	@ (80011a0 <HAL_DAC_MspInit+0xcc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d150      	bne.n	8001198 <HAL_DAC_MspInit+0xc4>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 80010f6:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <HAL_DAC_MspInit+0xd0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	4a2a      	ldr	r2, [pc, #168]	@ (80011a4 <HAL_DAC_MspInit+0xd0>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001102:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <HAL_DAC_MspInit+0xd0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <HAL_DAC_MspInit+0xd0>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	4a24      	ldr	r2, [pc, #144]	@ (80011a4 <HAL_DAC_MspInit+0xd0>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111a:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <HAL_DAC_MspInit+0xd0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001126:	2340      	movs	r3, #64	@ 0x40
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112a:	2303      	movs	r3, #3
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113c:	f002 f90c 	bl	8003358 <HAL_GPIO_Init>

    /* DAC2 DMA Init */
    /* DAC2_CH1 Init */
    hdma_dac2_ch1.Instance = DMA1_Channel1;
 8001140:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 8001142:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <HAL_DAC_MspInit+0xd8>)
 8001144:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 8001148:	2229      	movs	r2, #41	@ 0x29
 800114a:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800114c:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 800114e:	2210      	movs	r2, #16
 8001150:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 8001160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001164:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 8001168:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800116c:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 8001170:	2220      	movs	r2, #32
 8001172:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 8001176:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800117a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800117c:	480a      	ldr	r0, [pc, #40]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 800117e:	f001 fe79 	bl	8002e74 <HAL_DMA_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001188:	f7ff fef6 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <HAL_DAC_MspInit+0xd4>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	50000c00 	.word	0x50000c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	200002bc 	.word	0x200002bc
 80011ac:	40020008 	.word	0x40020008

080011b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c0:	d10b      	bne.n	80011da <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_TIM_Base_MspInit+0x38>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <HAL_TIM_Base_MspInit+0x38>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_TIM_Base_MspInit+0x38>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 f8a5 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <DMA1_Channel1_IRQHandler+0x10>)
 8001252:	f001 ff32 	bl	80030ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200002bc 	.word	0x200002bc

08001260 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <DMA1_Channel2_IRQHandler+0x10>)
 8001266:	f001 ff28 	bl	80030ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000248 	.word	0x20000248

08001274 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001298:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800129a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800129c:	f7ff ffea 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	@ (80012d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <LoopForever+0xe>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	@ (80012e4 <LoopForever+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f003 fd99 	bl	8004dfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ca:	f7ff fc51 	bl	8000b70 <main>

080012ce <LoopForever>:

LoopForever:
    b LoopForever
 80012ce:	e7fe      	b.n	80012ce <LoopForever>
  ldr   r0, =_estack
 80012d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80012dc:	080060a0 	.word	0x080060a0
  ldr r2, =_sbss
 80012e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80012e4:	2000036c 	.word	0x2000036c

080012e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC1_2_IRQHandler>

080012ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f001 fa39 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 f80e 	bl	800131c <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	e001      	b.n	8001310 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800130c:	f7ff fe3a 	bl	8000f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001310:	79fb      	ldrb	r3, [r7, #7]

}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <HAL_InitTick+0x68>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d022      	beq.n	8001376 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_InitTick+0x6c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <HAL_InitTick+0x68>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800133c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001340:	fbb2 f3f3 	udiv	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fa44 	bl	80027d2 <HAL_SYSTICK_Config>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10f      	bne.n	8001370 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	d809      	bhi.n	800136a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001356:	2200      	movs	r2, #0
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	f04f 30ff 	mov.w	r0, #4294967295
 800135e:	f001 fa10 	bl	8002782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_InitTick+0x70>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e007      	b.n	800137a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e004      	b.n	800137a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e001      	b.n	800137a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000010 	.word	0x20000010
 8001388:	20000008 	.word	0x20000008
 800138c:	2000000c 	.word	0x2000000c

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <HAL_IncTick+0x1c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <HAL_IncTick+0x20>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4413      	add	r3, r2
 800139e:	4a03      	ldr	r2, [pc, #12]	@ (80013ac <HAL_IncTick+0x1c>)
 80013a0:	6013      	str	r3, [r2, #0]
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	20000368 	.word	0x20000368
 80013b0:	20000010 	.word	0x20000010

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000368 	.word	0x20000368

080013cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	609a      	str	r2, [r3, #8]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	609a      	str	r2, [r3, #8]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3360      	adds	r3, #96	@ 0x60
 8001446:	461a      	mov	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <LL_ADC_SetOffset+0x44>)
 8001456:	4013      	ands	r3, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	4313      	orrs	r3, r2
 8001464:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800146c:	bf00      	nop
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	03fff000 	.word	0x03fff000

0800147c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3360      	adds	r3, #96	@ 0x60
 800148a:	461a      	mov	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3360      	adds	r3, #96	@ 0x60
 80014b8:	461a      	mov	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014de:	b480      	push	{r7}
 80014e0:	b087      	sub	sp, #28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3360      	adds	r3, #96	@ 0x60
 80014ee:	461a      	mov	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	431a      	orrs	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3360      	adds	r3, #96	@ 0x60
 8001524:	461a      	mov	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	431a      	orrs	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	615a      	str	r2, [r3, #20]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3330      	adds	r3, #48	@ 0x30
 8001580:	461a      	mov	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	4413      	add	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	211f      	movs	r1, #31
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0e9b      	lsrs	r3, r3, #26
 80015a8:	f003 011f 	and.w	r1, r3, #31
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	431a      	orrs	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015bc:	bf00      	nop
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3314      	adds	r3, #20
 80015d8:	461a      	mov	r2, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	0e5b      	lsrs	r3, r3, #25
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	4413      	add	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	0d1b      	lsrs	r3, r3, #20
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	2107      	movs	r1, #7
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	401a      	ands	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	0d1b      	lsrs	r3, r3, #20
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	431a      	orrs	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0318 	and.w	r3, r3, #24
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001644:	40d9      	lsrs	r1, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	400b      	ands	r3, r1
 800164a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800164e:	431a      	orrs	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	0007ffff 	.word	0x0007ffff

08001668 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001678:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6093      	str	r3, [r2, #8]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800169c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016a0:	d101      	bne.n	80016a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016f0:	d101      	bne.n	80016f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <LL_ADC_IsEnabled+0x18>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <LL_ADC_IsEnabled+0x1a>
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b04      	cmp	r3, #4
 800173c:	d101      	bne.n	8001742 <LL_ADC_REG_IsConversionOngoing+0x18>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b08      	cmp	r3, #8
 8001762:	d101      	bne.n	8001768 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e1a9      	b.n	8001ae6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fc13 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff67 	bl	800168c <LL_ADC_IsDeepPowerDownEnabled>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff4d 	bl	8001668 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff82 	bl	80016dc <LL_ADC_IsInternalRegulatorEnabled>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d115      	bne.n	800180a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff66 	bl	80016b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017e8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a5c <HAL_ADC_Init+0x2e4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	4a9c      	ldr	r2, [pc, #624]	@ (8001a60 <HAL_ADC_Init+0x2e8>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	099b      	lsrs	r3, r3, #6
 80017f6:	3301      	adds	r3, #1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017fc:	e002      	b.n	8001804 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3b01      	subs	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f9      	bne.n	80017fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff64 	bl	80016dc <LL_ADC_IsInternalRegulatorEnabled>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10d      	bne.n	8001836 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181e:	f043 0210 	orr.w	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182a:	f043 0201 	orr.w	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff75 	bl	800172a <LL_ADC_REG_IsConversionOngoing>
 8001840:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 8142 	bne.w	8001ad4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 813e 	bne.w	8001ad4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001860:	f043 0202 	orr.w	r2, r3, #2
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff49 	bl	8001704 <LL_ADC_IsEnabled>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d141      	bne.n	80018fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001880:	d004      	beq.n	800188c <HAL_ADC_Init+0x114>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a77      	ldr	r2, [pc, #476]	@ (8001a64 <HAL_ADC_Init+0x2ec>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d10f      	bne.n	80018ac <HAL_ADC_Init+0x134>
 800188c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001890:	f7ff ff38 	bl	8001704 <LL_ADC_IsEnabled>
 8001894:	4604      	mov	r4, r0
 8001896:	4873      	ldr	r0, [pc, #460]	@ (8001a64 <HAL_ADC_Init+0x2ec>)
 8001898:	f7ff ff34 	bl	8001704 <LL_ADC_IsEnabled>
 800189c:	4603      	mov	r3, r0
 800189e:	4323      	orrs	r3, r4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf0c      	ite	eq
 80018a4:	2301      	moveq	r3, #1
 80018a6:	2300      	movne	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	e012      	b.n	80018d2 <HAL_ADC_Init+0x15a>
 80018ac:	486e      	ldr	r0, [pc, #440]	@ (8001a68 <HAL_ADC_Init+0x2f0>)
 80018ae:	f7ff ff29 	bl	8001704 <LL_ADC_IsEnabled>
 80018b2:	4604      	mov	r4, r0
 80018b4:	486d      	ldr	r0, [pc, #436]	@ (8001a6c <HAL_ADC_Init+0x2f4>)
 80018b6:	f7ff ff25 	bl	8001704 <LL_ADC_IsEnabled>
 80018ba:	4603      	mov	r3, r0
 80018bc:	431c      	orrs	r4, r3
 80018be:	486c      	ldr	r0, [pc, #432]	@ (8001a70 <HAL_ADC_Init+0x2f8>)
 80018c0:	f7ff ff20 	bl	8001704 <LL_ADC_IsEnabled>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4323      	orrs	r3, r4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d012      	beq.n	80018fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018de:	d004      	beq.n	80018ea <HAL_ADC_Init+0x172>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001a64 <HAL_ADC_Init+0x2ec>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_Init+0x176>
 80018ea:	4a62      	ldr	r2, [pc, #392]	@ (8001a74 <HAL_ADC_Init+0x2fc>)
 80018ec:	e000      	b.n	80018f0 <HAL_ADC_Init+0x178>
 80018ee:	4a62      	ldr	r2, [pc, #392]	@ (8001a78 <HAL_ADC_Init+0x300>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f7ff fd68 	bl	80013cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7f5b      	ldrb	r3, [r3, #29]
 8001900:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001906:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800190c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001912:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800191a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001926:	2b01      	cmp	r3, #1
 8001928:	d106      	bne.n	8001938 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192e:	3b01      	subs	r3, #1
 8001930:	045b      	lsls	r3, r3, #17
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193c:	2b00      	cmp	r3, #0
 800193e:	d009      	beq.n	8001954 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001944:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <HAL_ADC_Init+0x304>)
 800195c:	4013      	ands	r3, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	430b      	orrs	r3, r1
 8001966:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fee4 	bl	8001750 <LL_ADC_INJ_IsConversionOngoing>
 8001988:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d17f      	bne.n	8001a90 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d17c      	bne.n	8001a90 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800199a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019b2:	f023 0302 	bic.w	r3, r3, #2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	430b      	orrs	r3, r1
 80019be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d017      	beq.n	80019f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80019d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80019e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6911      	ldr	r1, [r2, #16]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80019f6:	e013      	b.n	8001a20 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a1c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d12a      	bne.n	8001a80 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a40:	4311      	orrs	r1, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	e019      	b.n	8001a90 <HAL_ADC_Init+0x318>
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	053e2d63 	.word	0x053e2d63
 8001a64:	50000100 	.word	0x50000100
 8001a68:	50000400 	.word	0x50000400
 8001a6c:	50000500 	.word	0x50000500
 8001a70:	50000600 	.word	0x50000600
 8001a74:	50000300 	.word	0x50000300
 8001a78:	50000700 	.word	0x50000700
 8001a7c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10c      	bne.n	8001ab2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f023 010f 	bic.w	r1, r3, #15
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ab0:	e007      	b.n	8001ac2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 020f 	bic.w	r2, r2, #15
 8001ac0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ad2:	e007      	b.n	8001ae4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad8:	f043 0210 	orr.w	r2, r3, #16
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd90      	pop	{r4, r7, pc}
 8001aee:	bf00      	nop

08001af0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b0b6      	sub	sp, #216	@ 0xd8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d102      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x24>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f000 bc13 	b.w	800233a <HAL_ADC_ConfigChannel+0x84a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fe02 	bl	800172a <LL_ADC_REG_IsConversionOngoing>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f040 83f3 	bne.w	8002314 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f7ff fd18 	bl	8001570 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fdf0 	bl	800172a <LL_ADC_REG_IsConversionOngoing>
 8001b4a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fdfc 	bl	8001750 <LL_ADC_INJ_IsConversionOngoing>
 8001b58:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f040 81d9 	bne.w	8001f18 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 81d4 	bne.w	8001f18 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b78:	d10f      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff fd1f 	bl	80015c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fcd9 	bl	800154a <LL_ADC_SetSamplingTimeCommonConfig>
 8001b98:	e00e      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6819      	ldr	r1, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f7ff fd0e 	bl	80015c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fcc9 	bl	800154a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	08db      	lsrs	r3, r3, #3
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d022      	beq.n	8001c20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001bea:	f7ff fc23 	bl	8001434 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6919      	ldr	r1, [r3, #16]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f7ff fc6f 	bl	80014de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d102      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x126>
 8001c10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c14:	e000      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x128>
 8001c16:	2300      	movs	r3, #0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f7ff fc7b 	bl	8001514 <LL_ADC_SetOffsetSaturation>
 8001c1e:	e17b      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fc28 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10a      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x15c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fc1d 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	0e9b      	lsrs	r3, r3, #26
 8001c46:	f003 021f 	and.w	r2, r3, #31
 8001c4a:	e01e      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x19a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fc12 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	e004      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x1b2>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	0e9b      	lsrs	r3, r3, #26
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	e018      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x1e4>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	e004      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d106      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fbe1 	bl	80014a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2101      	movs	r1, #1
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fbc5 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10a      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x222>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fbba 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	0e9b      	lsrs	r3, r3, #26
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	e01e      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x260>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2101      	movs	r1, #1
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fbaf 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001d40:	2320      	movs	r3, #32
 8001d42:	e004      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x278>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	e018      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x2aa>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	e004      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d106      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	2101      	movs	r1, #1
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fb7e 	bl	80014a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2102      	movs	r1, #2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fb62 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10a      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x2e8>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fb57 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	f003 021f 	and.w	r2, r3, #31
 8001dd6:	e01e      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x326>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2102      	movs	r1, #2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fb4c 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001e06:	2320      	movs	r3, #32
 8001e08:	e004      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x33e>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0e9b      	lsrs	r3, r3, #26
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	e016      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x36c>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e004      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	2102      	movs	r1, #2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fb1d 	bl	80014a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2103      	movs	r1, #3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fb01 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x3aa>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2103      	movs	r1, #3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff faf6 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	e017      	b.n	8001eca <HAL_ADC_ConfigChannel+0x3da>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff faeb 	bl	800147c <LL_ADC_GetOffsetChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	e003      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x3f2>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0e9b      	lsrs	r3, r3, #26
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	e011      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x416>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ef2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001efa:	2320      	movs	r3, #32
 8001efc:	e003      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d106      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2103      	movs	r1, #3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fac8 	bl	80014a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fbf1 	bl	8001704 <LL_ADC_IsEnabled>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 813d 	bne.w	80021a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f7ff fb72 	bl	8001620 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4aa2      	ldr	r2, [pc, #648]	@ (80021cc <HAL_ADC_ConfigChannel+0x6dc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	f040 812e 	bne.w	80021a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10b      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x480>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	bf94      	ite	ls
 8001f68:	2301      	movls	r3, #1
 8001f6a:	2300      	movhi	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	e019      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x4b4>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f80:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001f88:	2320      	movs	r3, #32
 8001f8a:	e003      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001f8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2b09      	cmp	r3, #9
 8001f9c:	bf94      	ite	ls
 8001f9e:	2301      	movls	r3, #1
 8001fa0:	2300      	movhi	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d079      	beq.n	800209c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x4d4>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	3301      	adds	r3, #1
 8001fbc:	069b      	lsls	r3, r3, #26
 8001fbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fc2:	e015      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x500>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fd4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e003      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	069b      	lsls	r3, r3, #26
 8001fec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x520>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	3301      	adds	r3, #1
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	e017      	b.n	8002040 <HAL_ADC_ConfigChannel+0x550>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800201e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002020:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002028:	2320      	movs	r3, #32
 800202a:	e003      	b.n	8002034 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800202c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	ea42 0103 	orr.w	r1, r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x576>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	3301      	adds	r3, #1
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	051b      	lsls	r3, r3, #20
 8002064:	e018      	b.n	8002098 <HAL_ADC_ConfigChannel+0x5a8>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800207e:	2320      	movs	r3, #32
 8002080:	e003      	b.n	800208a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002098:	430b      	orrs	r3, r1
 800209a:	e07e      	b.n	800219a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x5c8>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	3301      	adds	r3, #1
 80020b0:	069b      	lsls	r3, r3, #26
 80020b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020b6:	e015      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x5f4>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80020c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80020ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e003      	b.n	80020dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80020d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	069b      	lsls	r3, r3, #26
 80020e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d109      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x614>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e9b      	lsrs	r3, r3, #26
 80020f6:	3301      	adds	r3, #1
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	2101      	movs	r1, #1
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	e017      	b.n	8002134 <HAL_ADC_ConfigChannel+0x644>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	61fb      	str	r3, [r7, #28]
  return result;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800211c:	2320      	movs	r3, #32
 800211e:	e003      	b.n	8002128 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	ea42 0103 	orr.w	r1, r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10d      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x670>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	3301      	adds	r3, #1
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	3b1e      	subs	r3, #30
 8002158:	051b      	lsls	r3, r3, #20
 800215a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800215e:	e01b      	b.n	8002198 <HAL_ADC_ConfigChannel+0x6a8>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	613b      	str	r3, [r7, #16]
  return result;
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e003      	b.n	8002184 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	f003 021f 	and.w	r2, r3, #31
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	3b1e      	subs	r3, #30
 8002192:	051b      	lsls	r3, r3, #20
 8002194:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002198:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800219e:	4619      	mov	r1, r3
 80021a0:	f7ff fa12 	bl	80015c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80be 	beq.w	800232e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021ba:	d004      	beq.n	80021c6 <HAL_ADC_ConfigChannel+0x6d6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10a      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x6ec>
 80021c6:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80021c8:	e009      	b.n	80021de <HAL_ADC_ConfigChannel+0x6ee>
 80021ca:	bf00      	nop
 80021cc:	407f0000 	.word	0x407f0000
 80021d0:	80080000 	.word	0x80080000
 80021d4:	50000100 	.word	0x50000100
 80021d8:	50000300 	.word	0x50000300
 80021dc:	4b59      	ldr	r3, [pc, #356]	@ (8002344 <HAL_ADC_ConfigChannel+0x854>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f91a 	bl	8001418 <LL_ADC_GetCommonPathInternalCh>
 80021e4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a56      	ldr	r2, [pc, #344]	@ (8002348 <HAL_ADC_ConfigChannel+0x858>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_ADC_ConfigChannel+0x70c>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a55      	ldr	r2, [pc, #340]	@ (800234c <HAL_ADC_ConfigChannel+0x85c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d13a      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d134      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002210:	d005      	beq.n	800221e <HAL_ADC_ConfigChannel+0x72e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a4e      	ldr	r2, [pc, #312]	@ (8002350 <HAL_ADC_ConfigChannel+0x860>)
 8002218:	4293      	cmp	r3, r2
 800221a:	f040 8085 	bne.w	8002328 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002226:	d004      	beq.n	8002232 <HAL_ADC_ConfigChannel+0x742>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a49      	ldr	r2, [pc, #292]	@ (8002354 <HAL_ADC_ConfigChannel+0x864>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x746>
 8002232:	4a49      	ldr	r2, [pc, #292]	@ (8002358 <HAL_ADC_ConfigChannel+0x868>)
 8002234:	e000      	b.n	8002238 <HAL_ADC_ConfigChannel+0x748>
 8002236:	4a43      	ldr	r2, [pc, #268]	@ (8002344 <HAL_ADC_ConfigChannel+0x854>)
 8002238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800223c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f7ff f8d5 	bl	80013f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002248:	4b44      	ldr	r3, [pc, #272]	@ (800235c <HAL_ADC_ConfigChannel+0x86c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	4a44      	ldr	r2, [pc, #272]	@ (8002360 <HAL_ADC_ConfigChannel+0x870>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002262:	e002      	b.n	800226a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3b01      	subs	r3, #1
 8002268:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f9      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002270:	e05a      	b.n	8002328 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a3b      	ldr	r2, [pc, #236]	@ (8002364 <HAL_ADC_ConfigChannel+0x874>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d125      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800227c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11f      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a31      	ldr	r2, [pc, #196]	@ (8002354 <HAL_ADC_ConfigChannel+0x864>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d104      	bne.n	800229c <HAL_ADC_ConfigChannel+0x7ac>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a34      	ldr	r2, [pc, #208]	@ (8002368 <HAL_ADC_ConfigChannel+0x878>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d047      	beq.n	800232c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a4:	d004      	beq.n	80022b0 <HAL_ADC_ConfigChannel+0x7c0>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002354 <HAL_ADC_ConfigChannel+0x864>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x7c4>
 80022b0:	4a29      	ldr	r2, [pc, #164]	@ (8002358 <HAL_ADC_ConfigChannel+0x868>)
 80022b2:	e000      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x7c6>
 80022b4:	4a23      	ldr	r2, [pc, #140]	@ (8002344 <HAL_ADC_ConfigChannel+0x854>)
 80022b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f7ff f896 	bl	80013f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c6:	e031      	b.n	800232c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a27      	ldr	r2, [pc, #156]	@ (800236c <HAL_ADC_ConfigChannel+0x87c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12d      	bne.n	800232e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d127      	bne.n	800232e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_ADC_ConfigChannel+0x864>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d022      	beq.n	800232e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f0:	d004      	beq.n	80022fc <HAL_ADC_ConfigChannel+0x80c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <HAL_ADC_ConfigChannel+0x864>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x810>
 80022fc:	4a16      	ldr	r2, [pc, #88]	@ (8002358 <HAL_ADC_ConfigChannel+0x868>)
 80022fe:	e000      	b.n	8002302 <HAL_ADC_ConfigChannel+0x812>
 8002300:	4a10      	ldr	r2, [pc, #64]	@ (8002344 <HAL_ADC_ConfigChannel+0x854>)
 8002302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002306:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7ff f870 	bl	80013f2 <LL_ADC_SetCommonPathInternalCh>
 8002312:	e00c      	b.n	800232e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002326:	e002      	b.n	800232e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002328:	bf00      	nop
 800232a:	e000      	b.n	800232e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800232c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002336:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800233a:	4618      	mov	r0, r3
 800233c:	37d8      	adds	r7, #216	@ 0xd8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	50000700 	.word	0x50000700
 8002348:	c3210000 	.word	0xc3210000
 800234c:	90c00010 	.word	0x90c00010
 8002350:	50000600 	.word	0x50000600
 8002354:	50000100 	.word	0x50000100
 8002358:	50000300 	.word	0x50000300
 800235c:	20000008 	.word	0x20000008
 8002360:	053e2d63 	.word	0x053e2d63
 8002364:	c7520000 	.word	0xc7520000
 8002368:	50000500 	.word	0x50000500
 800236c:	cb840000 	.word	0xcb840000

08002370 <LL_ADC_IsEnabled>:
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <LL_ADC_IsEnabled+0x18>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <LL_ADC_IsEnabled+0x1a>
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_ADC_REG_IsConversionOngoing>:
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d101      	bne.n	80023ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b0a1      	sub	sp, #132	@ 0x84
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e0e7      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80023e2:	2300      	movs	r3, #0
 80023e4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80023e6:	2300      	movs	r3, #0
 80023e8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f2:	d102      	bne.n	80023fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023f4:	4b6f      	ldr	r3, [pc, #444]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	e009      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6e      	ldr	r2, [pc, #440]	@ (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d102      	bne.n	800240a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002404:	4b6d      	ldr	r3, [pc, #436]	@ (80025bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	e001      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0be      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ffb1 	bl	8002396 <LL_ADC_REG_IsConversionOngoing>
 8002434:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ffab 	bl	8002396 <LL_ADC_REG_IsConversionOngoing>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 80a0 	bne.w	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002448:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 809c 	bne.w	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002458:	d004      	beq.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a55      	ldr	r2, [pc, #340]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002464:	4b56      	ldr	r3, [pc, #344]	@ (80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002466:	e000      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002468:	4b56      	ldr	r3, [pc, #344]	@ (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800246a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d04b      	beq.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002486:	035b      	lsls	r3, r3, #13
 8002488:	430b      	orrs	r3, r1
 800248a:	431a      	orrs	r2, r3
 800248c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800248e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002498:	d004      	beq.n	80024a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a45      	ldr	r2, [pc, #276]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10f      	bne.n	80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80024a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80024a8:	f7ff ff62 	bl	8002370 <LL_ADC_IsEnabled>
 80024ac:	4604      	mov	r4, r0
 80024ae:	4841      	ldr	r0, [pc, #260]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024b0:	f7ff ff5e 	bl	8002370 <LL_ADC_IsEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4323      	orrs	r3, r4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e012      	b.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80024c4:	483c      	ldr	r0, [pc, #240]	@ (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024c6:	f7ff ff53 	bl	8002370 <LL_ADC_IsEnabled>
 80024ca:	4604      	mov	r4, r0
 80024cc:	483b      	ldr	r0, [pc, #236]	@ (80025bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024ce:	f7ff ff4f 	bl	8002370 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	431c      	orrs	r4, r3
 80024d6:	483c      	ldr	r0, [pc, #240]	@ (80025c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80024d8:	f7ff ff4a 	bl	8002370 <LL_ADC_IsEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	4323      	orrs	r3, r4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d056      	beq.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024f6:	f023 030f 	bic.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	6811      	ldr	r1, [r2, #0]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	6892      	ldr	r2, [r2, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	431a      	orrs	r2, r3
 8002506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002508:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800250a:	e047      	b.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800250c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002514:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002516:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002520:	d004      	beq.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a23      	ldr	r2, [pc, #140]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d10f      	bne.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800252c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002530:	f7ff ff1e 	bl	8002370 <LL_ADC_IsEnabled>
 8002534:	4604      	mov	r4, r0
 8002536:	481f      	ldr	r0, [pc, #124]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002538:	f7ff ff1a 	bl	8002370 <LL_ADC_IsEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	4323      	orrs	r3, r4
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e012      	b.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800254c:	481a      	ldr	r0, [pc, #104]	@ (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800254e:	f7ff ff0f 	bl	8002370 <LL_ADC_IsEnabled>
 8002552:	4604      	mov	r4, r0
 8002554:	4819      	ldr	r0, [pc, #100]	@ (80025bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002556:	f7ff ff0b 	bl	8002370 <LL_ADC_IsEnabled>
 800255a:	4603      	mov	r3, r0
 800255c:	431c      	orrs	r4, r3
 800255e:	481a      	ldr	r0, [pc, #104]	@ (80025c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002560:	f7ff ff06 	bl	8002370 <LL_ADC_IsEnabled>
 8002564:	4603      	mov	r3, r0
 8002566:	4323      	orrs	r3, r4
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d012      	beq.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800257e:	f023 030f 	bic.w	r3, r3, #15
 8002582:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002584:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002586:	e009      	b.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800259a:	e000      	b.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800259c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80025a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3784      	adds	r7, #132	@ 0x84
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	bf00      	nop
 80025b4:	50000100 	.word	0x50000100
 80025b8:	50000400 	.word	0x50000400
 80025bc:	50000500 	.word	0x50000500
 80025c0:	50000300 	.word	0x50000300
 80025c4:	50000700 	.word	0x50000700
 80025c8:	50000600 	.word	0x50000600

080025cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	@ (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	@ (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	@ (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	@ (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	@ 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	@ 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff8e 	bl	800266c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff29 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002790:	f7ff ff40 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002794:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7ff ff90 	bl	80026c0 <NVIC_EncodePriority>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff5f 	bl	800266c <__NVIC_SetPriority>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff33 	bl	8002630 <__NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffa4 	bl	8002728 <SysTick_Config>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e014      	b.n	8002826 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	791b      	ldrb	r3, [r3, #4]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d105      	bne.n	8002812 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7fe fc61 	bl	80010d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2202      	movs	r2, #2
 8002816:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0b2      	b.n	80029ae <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	795b      	ldrb	r3, [r3, #5]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_DAC_Start_DMA+0x24>
 8002850:	2302      	movs	r3, #2
 8002852:	e0ac      	b.n	80029ae <HAL_DAC_Start_DMA+0x17e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2202      	movs	r2, #2
 800285e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d129      	bne.n	80028ba <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	4a53      	ldr	r2, [pc, #332]	@ (80029b8 <HAL_DAC_Start_DMA+0x188>)
 800286c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4a52      	ldr	r2, [pc, #328]	@ (80029bc <HAL_DAC_Start_DMA+0x18c>)
 8002874:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4a51      	ldr	r2, [pc, #324]	@ (80029c0 <HAL_DAC_Start_DMA+0x190>)
 800287c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800288c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DAC_Start_DMA+0x6c>
 8002894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002896:	2b04      	cmp	r3, #4
 8002898:	d005      	beq.n	80028a6 <HAL_DAC_Start_DMA+0x76>
 800289a:	e009      	b.n	80028b0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3308      	adds	r3, #8
 80028a2:	61bb      	str	r3, [r7, #24]
        break;
 80028a4:	e033      	b.n	800290e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	330c      	adds	r3, #12
 80028ac:	61bb      	str	r3, [r7, #24]
        break;
 80028ae:	e02e      	b.n	800290e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3310      	adds	r3, #16
 80028b6:	61bb      	str	r3, [r7, #24]
        break;
 80028b8:	e029      	b.n	800290e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	4a41      	ldr	r2, [pc, #260]	@ (80029c4 <HAL_DAC_Start_DMA+0x194>)
 80028c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4a40      	ldr	r2, [pc, #256]	@ (80029c8 <HAL_DAC_Start_DMA+0x198>)
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	4a3f      	ldr	r2, [pc, #252]	@ (80029cc <HAL_DAC_Start_DMA+0x19c>)
 80028d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80028e0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80028e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_DAC_Start_DMA+0xc0>
 80028e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d005      	beq.n	80028fa <HAL_DAC_Start_DMA+0xca>
 80028ee:	e009      	b.n	8002904 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3314      	adds	r3, #20
 80028f6:	61bb      	str	r3, [r7, #24]
        break;
 80028f8:	e009      	b.n	800290e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3318      	adds	r3, #24
 8002900:	61bb      	str	r3, [r7, #24]
        break;
 8002902:	e004      	b.n	800290e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	331c      	adds	r3, #28
 800290a:	61bb      	str	r3, [r7, #24]
        break;
 800290c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d111      	bne.n	8002938 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002922:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6898      	ldr	r0, [r3, #8]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	f000 fb49 	bl	8002fc4 <HAL_DMA_Start_IT>
 8002932:	4603      	mov	r3, r0
 8002934:	77fb      	strb	r3, [r7, #31]
 8002936:	e010      	b.n	800295a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002946:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68d8      	ldr	r0, [r3, #12]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	f000 fb37 	bl	8002fc4 <HAL_DMA_Start_IT>
 8002956:	4603      	mov	r3, r0
 8002958:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002960:	7ffb      	ldrb	r3, [r7, #31]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d11c      	bne.n	80029a0 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6819      	ldr	r1, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2201      	movs	r2, #1
 8002974:	409a      	lsls	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800297e:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <HAL_DAC_Start_DMA+0x1a0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	4a13      	ldr	r2, [pc, #76]	@ (80029d4 <HAL_DAC_Start_DMA+0x1a4>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002990:	e002      	b.n	8002998 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3b01      	subs	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f9      	bne.n	8002992 <HAL_DAC_Start_DMA+0x162>
 800299e:	e005      	b.n	80029ac <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f043 0204 	orr.w	r2, r3, #4
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80029ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	08002d61 	.word	0x08002d61
 80029bc:	08002d83 	.word	0x08002d83
 80029c0:	08002d9f 	.word	0x08002d9f
 80029c4:	08002e09 	.word	0x08002e09
 80029c8:	08002e2b 	.word	0x08002e2b
 80029cc:	08002e47 	.word	0x08002e47
 80029d0:	20000008 	.word	0x20000008
 80029d4:	053e2d63 	.word	0x053e2d63

080029d8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	@ 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_DAC_ConfigChannel+0x1c>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e1a1      	b.n	8002d50 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	795b      	ldrb	r3, [r3, #5]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_DAC_ConfigChannel+0x32>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e198      	b.n	8002d50 <HAL_DAC_ConfigChannel+0x364>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2202      	movs	r2, #2
 8002a28:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d17a      	bne.n	8002b28 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002a32:	f7fe fcbf 	bl	80013b4 <HAL_GetTick>
 8002a36:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d13d      	bne.n	8002aba <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a3e:	e018      	b.n	8002a72 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a40:	f7fe fcb8 	bl	80013b4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d911      	bls.n	8002a72 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f043 0208 	orr.w	r2, r3, #8
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e16e      	b.n	8002d50 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1df      	bne.n	8002a40 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a8a:	e020      	b.n	8002ace <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a8c:	f7fe fc92 	bl	80013b4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d90f      	bls.n	8002aba <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	da0a      	bge.n	8002aba <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f043 0208 	orr.w	r2, r3, #8
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e14a      	b.n	8002d50 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	dbe3      	blt.n	8002a8c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002acc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	ea02 0103 	and.w	r1, r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	21ff      	movs	r1, #255	@ 0xff
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	ea02 0103 	and.w	r1, r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d11d      	bne.n	8002b6c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	221f      	movs	r2, #31
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b48:	4013      	ands	r3, r2
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b60:	4313      	orrs	r3, r2
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b84:	4013      	ands	r3, r2
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d102      	bne.n	8002b96 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	623b      	str	r3, [r7, #32]
 8002b94:	e00f      	b.n	8002bb6 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d102      	bne.n	8002ba4 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	e008      	b.n	8002bb6 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002bac:	2301      	movs	r3, #1
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	e001      	b.n	8002bb6 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd8:	4013      	ands	r3, r2
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	791b      	ldrb	r3, [r3, #4]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d102      	bne.n	8002bea <HAL_DAC_ConfigChannel+0x1fe>
 8002be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002be8:	e000      	b.n	8002bec <HAL_DAC_ConfigChannel+0x200>
 8002bea:	2300      	movs	r3, #0
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c04:	4013      	ands	r3, r2
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	795b      	ldrb	r3, [r3, #5]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d102      	bne.n	8002c16 <HAL_DAC_ConfigChannel+0x22a>
 8002c10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c14:	e000      	b.n	8002c18 <HAL_DAC_ConfigChannel+0x22c>
 8002c16:	2300      	movs	r3, #0
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d114      	bne.n	8002c58 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002c2e:	f001 fa79 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8002c32:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4a48      	ldr	r2, [pc, #288]	@ (8002d58 <HAL_DAC_ConfigChannel+0x36c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d904      	bls.n	8002c46 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c44:	e00f      	b.n	8002c66 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4a44      	ldr	r2, [pc, #272]	@ (8002d5c <HAL_DAC_ConfigChannel+0x370>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d90a      	bls.n	8002c64 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c56:	e006      	b.n	8002c66 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c62:	e000      	b.n	8002c66 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002c64:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c74:	4313      	orrs	r3, r2
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43da      	mvns	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb8:	4013      	ands	r3, r2
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cda:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6819      	ldr	r1, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	22c0      	movs	r2, #192	@ 0xc0
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	ea02 0103 	and.w	r1, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3728      	adds	r7, #40	@ 0x28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	09896800 	.word	0x09896800
 8002d5c:	04c4b400 	.word	0x04c4b400

08002d60 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f7fd fef0 	bl	8000b54 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	711a      	strb	r2, [r3, #4]
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7fd fed3 	bl	8000b3c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff fe0d 	bl	80029d8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	711a      	strb	r2, [r3, #4]
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff ffd8 	bl	8002dcc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	711a      	strb	r2, [r3, #4]
}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff ffd1 	bl	8002de0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f043 0204 	orr.w	r2, r3, #4
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff ffc7 	bl	8002df4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	711a      	strb	r2, [r3, #4]
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e08d      	b.n	8002fa2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4b47      	ldr	r3, [pc, #284]	@ (8002fac <HAL_DMA_Init+0x138>)
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d80f      	bhi.n	8002eb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b45      	ldr	r3, [pc, #276]	@ (8002fb0 <HAL_DMA_Init+0x13c>)
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a45      	ldr	r2, [pc, #276]	@ (8002fb4 <HAL_DMA_Init+0x140>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	009a      	lsls	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a42      	ldr	r2, [pc, #264]	@ (8002fb8 <HAL_DMA_Init+0x144>)
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eb0:	e00e      	b.n	8002ed0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4b40      	ldr	r3, [pc, #256]	@ (8002fbc <HAL_DMA_Init+0x148>)
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb4 <HAL_DMA_Init+0x140>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc0 <HAL_DMA_Init+0x14c>)
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f9b6 	bl	8003294 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f30:	d102      	bne.n	8002f38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d010      	beq.n	8002f78 <HAL_DMA_Init+0x104>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d80c      	bhi.n	8002f78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f9d6 	bl	8003310 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	e008      	b.n	8002f8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40020407 	.word	0x40020407
 8002fb0:	bffdfff8 	.word	0xbffdfff8
 8002fb4:	cccccccd 	.word	0xcccccccd
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	bffdfbf8 	.word	0xbffdfbf8
 8002fc0:	40020400 	.word	0x40020400

08002fc4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_DMA_Start_IT+0x20>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e066      	b.n	80030b2 <HAL_DMA_Start_IT+0xee>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d155      	bne.n	80030a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f8fb 	bl	8003218 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 020e 	orr.w	r2, r2, #14
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e00f      	b.n	800305c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 020a 	orr.w	r2, r2, #10
 800305a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003074:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003078:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003090:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e005      	b.n	80030b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2204      	movs	r2, #4
 80030dc:	409a      	lsls	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d026      	beq.n	8003134 <HAL_DMA_IRQHandler+0x7a>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d021      	beq.n	8003134 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0204 	bic.w	r2, r2, #4
 800310c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f003 021f 	and.w	r2, r3, #31
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	2104      	movs	r1, #4
 800311c:	fa01 f202 	lsl.w	r2, r1, r2
 8003120:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	2b00      	cmp	r3, #0
 8003128:	d071      	beq.n	800320e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003132:	e06c      	b.n	800320e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2202      	movs	r2, #2
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d02e      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d029      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020a 	bic.w	r2, r2, #10
 800316e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	2102      	movs	r1, #2
 8003186:	fa01 f202 	lsl.w	r2, r1, r2
 800318a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d038      	beq.n	800320e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031a4:	e033      	b.n	800320e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2208      	movs	r2, #8
 80031b0:	409a      	lsls	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02a      	beq.n	8003210 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d025      	beq.n	8003210 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 020e 	bic.w	r2, r2, #14
 80031d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f202 	lsl.w	r2, r1, r2
 80031e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800320e:	bf00      	nop
 8003210:	bf00      	nop
}
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800322e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f003 021f 	and.w	r2, r3, #31
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f202 	lsl.w	r2, r1, r2
 8003254:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b10      	cmp	r3, #16
 8003264:	d108      	bne.n	8003278 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003276:	e007      	b.n	8003288 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	60da      	str	r2, [r3, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b16      	ldr	r3, [pc, #88]	@ (80032fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d802      	bhi.n	80032ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80032a8:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	e001      	b.n	80032b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80032ae:	4b15      	ldr	r3, [pc, #84]	@ (8003304 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3b08      	subs	r3, #8
 80032be:	4a12      	ldr	r2, [pc, #72]	@ (8003308 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	009a      	lsls	r2, r3, #2
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a0b      	ldr	r2, [pc, #44]	@ (800330c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	2201      	movs	r2, #1
 80032e8:	409a      	lsls	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40020407 	.word	0x40020407
 8003300:	40020800 	.word	0x40020800
 8003304:	40020820 	.word	0x40020820
 8003308:	cccccccd 	.word	0xcccccccd
 800330c:	40020880 	.word	0x40020880

08003310 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a08      	ldr	r2, [pc, #32]	@ (8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003332:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3b01      	subs	r3, #1
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	1000823f 	.word	0x1000823f
 8003354:	40020940 	.word	0x40020940

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003366:	e15a      	b.n	800361e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2101      	movs	r1, #1
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 814c 	beq.w	8003618 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d005      	beq.n	8003398 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003394:	2b02      	cmp	r3, #2
 8003396:	d130      	bne.n	80033fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ce:	2201      	movs	r2, #1
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0201 	and.w	r2, r3, #1
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b03      	cmp	r3, #3
 8003404:	d017      	beq.n	8003436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d123      	bne.n	800348a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	08da      	lsrs	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3208      	adds	r2, #8
 800344a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	6939      	ldr	r1, [r7, #16]
 8003486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	2203      	movs	r2, #3
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0203 	and.w	r2, r3, #3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80a6 	beq.w	8003618 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034cc:	4b5b      	ldr	r3, [pc, #364]	@ (800363c <HAL_GPIO_Init+0x2e4>)
 80034ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d0:	4a5a      	ldr	r2, [pc, #360]	@ (800363c <HAL_GPIO_Init+0x2e4>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80034d8:	4b58      	ldr	r3, [pc, #352]	@ (800363c <HAL_GPIO_Init+0x2e4>)
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034e4:	4a56      	ldr	r2, [pc, #344]	@ (8003640 <HAL_GPIO_Init+0x2e8>)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	3302      	adds	r3, #2
 80034ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	220f      	movs	r2, #15
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800350e:	d01f      	beq.n	8003550 <HAL_GPIO_Init+0x1f8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a4c      	ldr	r2, [pc, #304]	@ (8003644 <HAL_GPIO_Init+0x2ec>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d019      	beq.n	800354c <HAL_GPIO_Init+0x1f4>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a4b      	ldr	r2, [pc, #300]	@ (8003648 <HAL_GPIO_Init+0x2f0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d013      	beq.n	8003548 <HAL_GPIO_Init+0x1f0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a4a      	ldr	r2, [pc, #296]	@ (800364c <HAL_GPIO_Init+0x2f4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00d      	beq.n	8003544 <HAL_GPIO_Init+0x1ec>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a49      	ldr	r2, [pc, #292]	@ (8003650 <HAL_GPIO_Init+0x2f8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d007      	beq.n	8003540 <HAL_GPIO_Init+0x1e8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a48      	ldr	r2, [pc, #288]	@ (8003654 <HAL_GPIO_Init+0x2fc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_GPIO_Init+0x1e4>
 8003538:	2305      	movs	r3, #5
 800353a:	e00a      	b.n	8003552 <HAL_GPIO_Init+0x1fa>
 800353c:	2306      	movs	r3, #6
 800353e:	e008      	b.n	8003552 <HAL_GPIO_Init+0x1fa>
 8003540:	2304      	movs	r3, #4
 8003542:	e006      	b.n	8003552 <HAL_GPIO_Init+0x1fa>
 8003544:	2303      	movs	r3, #3
 8003546:	e004      	b.n	8003552 <HAL_GPIO_Init+0x1fa>
 8003548:	2302      	movs	r3, #2
 800354a:	e002      	b.n	8003552 <HAL_GPIO_Init+0x1fa>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_GPIO_Init+0x1fa>
 8003550:	2300      	movs	r3, #0
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	f002 0203 	and.w	r2, r2, #3
 8003558:	0092      	lsls	r2, r2, #2
 800355a:	4093      	lsls	r3, r2
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003562:	4937      	ldr	r1, [pc, #220]	@ (8003640 <HAL_GPIO_Init+0x2e8>)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003570:	4b39      	ldr	r3, [pc, #228]	@ (8003658 <HAL_GPIO_Init+0x300>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003594:	4a30      	ldr	r2, [pc, #192]	@ (8003658 <HAL_GPIO_Init+0x300>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800359a:	4b2f      	ldr	r3, [pc, #188]	@ (8003658 <HAL_GPIO_Init+0x300>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035be:	4a26      	ldr	r2, [pc, #152]	@ (8003658 <HAL_GPIO_Init+0x300>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035c4:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <HAL_GPIO_Init+0x300>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003658 <HAL_GPIO_Init+0x300>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003658 <HAL_GPIO_Init+0x300>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003612:	4a11      	ldr	r2, [pc, #68]	@ (8003658 <HAL_GPIO_Init+0x300>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3301      	adds	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f47f ae9d 	bne.w	8003368 <HAL_GPIO_Init+0x10>
  }
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40021000 	.word	0x40021000
 8003640:	40010000 	.word	0x40010000
 8003644:	48000400 	.word	0x48000400
 8003648:	48000800 	.word	0x48000800
 800364c:	48000c00 	.word	0x48000c00
 8003650:	48001000 	.word	0x48001000
 8003654:	48001400 	.word	0x48001400
 8003658:	40010400 	.word	0x40010400

0800365c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d141      	bne.n	80036ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800366a:	4b4b      	ldr	r3, [pc, #300]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003676:	d131      	bne.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003678:	4b47      	ldr	r3, [pc, #284]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800367e:	4a46      	ldr	r2, [pc, #280]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003684:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003688:	4b43      	ldr	r3, [pc, #268]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003690:	4a41      	ldr	r2, [pc, #260]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003696:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003698:	4b40      	ldr	r3, [pc, #256]	@ (800379c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2232      	movs	r2, #50	@ 0x32
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	4a3f      	ldr	r2, [pc, #252]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	0c9b      	lsrs	r3, r3, #18
 80036aa:	3301      	adds	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ae:	e002      	b.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b6:	4b38      	ldr	r3, [pc, #224]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c2:	d102      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f2      	bne.n	80036b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ca:	4b33      	ldr	r3, [pc, #204]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d6:	d158      	bne.n	800378a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e057      	b.n	800378c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036ec:	e04d      	b.n	800378a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f4:	d141      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036f6:	4b28      	ldr	r3, [pc, #160]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003702:	d131      	bne.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003704:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800370a:	4a23      	ldr	r2, [pc, #140]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003714:	4b20      	ldr	r3, [pc, #128]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800371c:	4a1e      	ldr	r2, [pc, #120]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003722:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003724:	4b1d      	ldr	r3, [pc, #116]	@ (800379c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2232      	movs	r2, #50	@ 0x32
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	4a1c      	ldr	r2, [pc, #112]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	0c9b      	lsrs	r3, r3, #18
 8003736:	3301      	adds	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800373a:	e002      	b.n	8003742 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3b01      	subs	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374e:	d102      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f2      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003756:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003762:	d112      	bne.n	800378a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e011      	b.n	800378c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003768:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800376e:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003774:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003778:	e007      	b.n	800378a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800377a:	4b07      	ldr	r3, [pc, #28]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003782:	4a05      	ldr	r2, [pc, #20]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003784:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003788:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40007000 	.word	0x40007000
 800379c:	20000008 	.word	0x20000008
 80037a0:	431bde83 	.word	0x431bde83

080037a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a04      	ldr	r2, [pc, #16]	@ (80037c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037b2:	6093      	str	r3, [r2, #8]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e2fe      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d075      	beq.n	80038ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4b97      	ldr	r3, [pc, #604]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ec:	4b94      	ldr	r3, [pc, #592]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_OscConfig+0x3e>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d002      	beq.n	8003808 <HAL_RCC_OscConfig+0x44>
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d10b      	bne.n	8003820 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	4b8d      	ldr	r3, [pc, #564]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05b      	beq.n	80038cc <HAL_RCC_OscConfig+0x108>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d157      	bne.n	80038cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e2d9      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003828:	d106      	bne.n	8003838 <HAL_RCC_OscConfig+0x74>
 800382a:	4b85      	ldr	r3, [pc, #532]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a84      	ldr	r2, [pc, #528]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xb0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x98>
 8003842:	4b7f      	ldr	r3, [pc, #508]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7e      	ldr	r2, [pc, #504]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7b      	ldr	r2, [pc, #492]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xb0>
 800385c:	4b78      	ldr	r3, [pc, #480]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a77      	ldr	r2, [pc, #476]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b75      	ldr	r3, [pc, #468]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a74      	ldr	r2, [pc, #464]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fd9a 	bl	80013b4 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fd fd96 	bl	80013b4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	@ 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e29e      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003896:	4b6a      	ldr	r3, [pc, #424]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xc0>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fd86 	bl	80013b4 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fd fd82 	bl	80013b4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	@ 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e28a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038be:	4b60      	ldr	r3, [pc, #384]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0xe8>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d075      	beq.n	80039c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038da:	4b59      	ldr	r3, [pc, #356]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e4:	4b56      	ldr	r3, [pc, #344]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	d102      	bne.n	80038fa <HAL_RCC_OscConfig+0x136>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_OscConfig+0x13c>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d11f      	bne.n	8003940 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003900:	4b4f      	ldr	r3, [pc, #316]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_OscConfig+0x154>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e25d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003918:	4b49      	ldr	r3, [pc, #292]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	4946      	ldr	r1, [pc, #280]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800392c:	4b45      	ldr	r3, [pc, #276]	@ (8003a44 <HAL_RCC_OscConfig+0x280>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd fcf3 	bl	800131c <HAL_InitTick>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d043      	beq.n	80039c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e249      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d023      	beq.n	8003990 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003948:	4b3d      	ldr	r3, [pc, #244]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800394e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fd fd2e 	bl	80013b4 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395c:	f7fd fd2a 	bl	80013b4 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e232      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396e:	4b34      	ldr	r3, [pc, #208]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	492d      	ldr	r1, [pc, #180]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
 800398e:	e01a      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003990:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2a      	ldr	r2, [pc, #168]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003996:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd fd0a 	bl	80013b4 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fd fd06 	bl	80013b4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e20e      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039b6:	4b22      	ldr	r3, [pc, #136]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x1e0>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d041      	beq.n	8003a56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01c      	beq.n	8003a14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039da:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e0:	4a17      	ldr	r2, [pc, #92]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fd fce3 	bl	80013b4 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f2:	f7fd fcdf 	bl	80013b4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e1e7      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a04:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0ef      	beq.n	80039f2 <HAL_RCC_OscConfig+0x22e>
 8003a12:	e020      	b.n	8003a56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a14:	4b0a      	ldr	r3, [pc, #40]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a1a:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a24:	f7fd fcc6 	bl	80013b4 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a2a:	e00d      	b.n	8003a48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2c:	f7fd fcc2 	bl	80013b4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d906      	bls.n	8003a48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1ca      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a48:	4b8c      	ldr	r3, [pc, #560]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1ea      	bne.n	8003a2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80a6 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a64:	2300      	movs	r3, #0
 8003a66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a68:	4b84      	ldr	r3, [pc, #528]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_OscConfig+0x2b4>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x2b6>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	4a7e      	ldr	r2, [pc, #504]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9a:	4b79      	ldr	r3, [pc, #484]	@ (8003c80 <HAL_RCC_OscConfig+0x4bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d118      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa6:	4b76      	ldr	r3, [pc, #472]	@ (8003c80 <HAL_RCC_OscConfig+0x4bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a75      	ldr	r2, [pc, #468]	@ (8003c80 <HAL_RCC_OscConfig+0x4bc>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fd fc7f 	bl	80013b4 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aba:	f7fd fc7b 	bl	80013b4 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e183      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003acc:	4b6c      	ldr	r3, [pc, #432]	@ (8003c80 <HAL_RCC_OscConfig+0x4bc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d108      	bne.n	8003af2 <HAL_RCC_OscConfig+0x32e>
 8003ae0:	4b66      	ldr	r3, [pc, #408]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	4a65      	ldr	r2, [pc, #404]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003af0:	e024      	b.n	8003b3c <HAL_RCC_OscConfig+0x378>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d110      	bne.n	8003b1c <HAL_RCC_OscConfig+0x358>
 8003afa:	4b60      	ldr	r3, [pc, #384]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	4a5e      	ldr	r2, [pc, #376]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003b02:	f043 0304 	orr.w	r3, r3, #4
 8003b06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b10:	4a5a      	ldr	r2, [pc, #360]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b1a:	e00f      	b.n	8003b3c <HAL_RCC_OscConfig+0x378>
 8003b1c:	4b57      	ldr	r3, [pc, #348]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b22:	4a56      	ldr	r2, [pc, #344]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b2c:	4b53      	ldr	r3, [pc, #332]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b32:	4a52      	ldr	r2, [pc, #328]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d016      	beq.n	8003b72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7fd fc36 	bl	80013b4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4c:	f7fd fc32 	bl	80013b4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e138      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b62:	4b46      	ldr	r3, [pc, #280]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ed      	beq.n	8003b4c <HAL_RCC_OscConfig+0x388>
 8003b70:	e015      	b.n	8003b9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fd fc1f 	bl	80013b4 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd fc1b 	bl	80013b4 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e121      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b90:	4b3a      	ldr	r3, [pc, #232]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ed      	bne.n	8003b7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba4:	4b35      	ldr	r3, [pc, #212]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba8:	4a34      	ldr	r2, [pc, #208]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003baa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d03c      	beq.n	8003c36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01c      	beq.n	8003bfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bca:	4a2c      	ldr	r2, [pc, #176]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd fbee 	bl	80013b4 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bdc:	f7fd fbea 	bl	80013b4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0f2      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bee:	4b23      	ldr	r3, [pc, #140]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ef      	beq.n	8003bdc <HAL_RCC_OscConfig+0x418>
 8003bfc:	e01b      	b.n	8003c36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c04:	4a1d      	ldr	r2, [pc, #116]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fd fbd1 	bl	80013b4 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c16:	f7fd fbcd 	bl	80013b4 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e0d5      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c28:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ef      	bne.n	8003c16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80c9 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c40:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	f000 8083 	beq.w	8003d54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d15e      	bne.n	8003d14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <HAL_RCC_OscConfig+0x4b8>)
 8003c5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fd fba7 	bl	80013b4 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c68:	e00c      	b.n	8003c84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6a:	f7fd fba3 	bl	80013b4 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d905      	bls.n	8003c84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0ab      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c84:	4b55      	ldr	r3, [pc, #340]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ec      	bne.n	8003c6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c90:	4b52      	ldr	r3, [pc, #328]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	4b52      	ldr	r3, [pc, #328]	@ (8003de0 <HAL_RCC_OscConfig+0x61c>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6a11      	ldr	r1, [r2, #32]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ca0:	3a01      	subs	r2, #1
 8003ca2:	0112      	lsls	r2, r2, #4
 8003ca4:	4311      	orrs	r1, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003caa:	0212      	lsls	r2, r2, #8
 8003cac:	4311      	orrs	r1, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cb2:	0852      	lsrs	r2, r2, #1
 8003cb4:	3a01      	subs	r2, #1
 8003cb6:	0552      	lsls	r2, r2, #21
 8003cb8:	4311      	orrs	r1, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cbe:	0852      	lsrs	r2, r2, #1
 8003cc0:	3a01      	subs	r2, #1
 8003cc2:	0652      	lsls	r2, r2, #25
 8003cc4:	4311      	orrs	r1, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cca:	06d2      	lsls	r2, r2, #27
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	4943      	ldr	r1, [pc, #268]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd4:	4b41      	ldr	r3, [pc, #260]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a40      	ldr	r2, [pc, #256]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cde:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a3d      	ldr	r2, [pc, #244]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fd fb62 	bl	80013b4 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7fd fb5e 	bl	80013b4 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e066      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d06:	4b35      	ldr	r3, [pc, #212]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x530>
 8003d12:	e05e      	b.n	8003dd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d14:	4b31      	ldr	r3, [pc, #196]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a30      	ldr	r2, [pc, #192]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fd fb48 	bl	80013b4 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fd fb44 	bl	80013b4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e04c      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3a:	4b28      	ldr	r3, [pc, #160]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d46:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	4924      	ldr	r1, [pc, #144]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d4c:	4b25      	ldr	r3, [pc, #148]	@ (8003de4 <HAL_RCC_OscConfig+0x620>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60cb      	str	r3, [r1, #12]
 8003d52:	e03e      	b.n	8003dd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e039      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d60:	4b1e      	ldr	r3, [pc, #120]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0203 	and.w	r2, r3, #3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d12c      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d123      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d11b      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d113      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	3b01      	subs	r3, #1
 8003db4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d109      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	019f800c 	.word	0x019f800c
 8003de4:	feeefffc 	.word	0xfeeefffc

08003de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e11e      	b.n	800403e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e00:	4b91      	ldr	r3, [pc, #580]	@ (8004048 <HAL_RCC_ClockConfig+0x260>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d910      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b8e      	ldr	r3, [pc, #568]	@ (8004048 <HAL_RCC_ClockConfig+0x260>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 020f 	bic.w	r2, r3, #15
 8003e16:	498c      	ldr	r1, [pc, #560]	@ (8004048 <HAL_RCC_ClockConfig+0x260>)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b8a      	ldr	r3, [pc, #552]	@ (8004048 <HAL_RCC_ClockConfig+0x260>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e106      	b.n	800403e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d073      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d129      	bne.n	8003e98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e44:	4b81      	ldr	r3, [pc, #516]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0f4      	b.n	800403e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e54:	f000 f972 	bl	800413c <RCC_GetSysClockFreqFromPLLSource>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4a7c      	ldr	r2, [pc, #496]	@ (8004050 <HAL_RCC_ClockConfig+0x268>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d93f      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e62:	4b7a      	ldr	r3, [pc, #488]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d033      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d12f      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e82:	4b72      	ldr	r3, [pc, #456]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e8a:	4a70      	ldr	r2, [pc, #448]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e92:	2380      	movs	r3, #128	@ 0x80
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e024      	b.n	8003ee2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0c6      	b.n	800403e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb0:	4b66      	ldr	r3, [pc, #408]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0be      	b.n	800403e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ec0:	f000 f8ce 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4a61      	ldr	r2, [pc, #388]	@ (8004050 <HAL_RCC_ClockConfig+0x268>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d909      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ece:	4b5f      	ldr	r3, [pc, #380]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ed6:	4a5d      	ldr	r2, [pc, #372]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003edc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ede:	2380      	movs	r3, #128	@ 0x80
 8003ee0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4957      	ldr	r1, [pc, #348]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef4:	f7fd fa5e 	bl	80013b4 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fd fa5a 	bl	80013b4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e095      	b.n	800403e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	4b4e      	ldr	r3, [pc, #312]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 020c 	and.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1eb      	bne.n	8003efc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d023      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f3c:	4b43      	ldr	r3, [pc, #268]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a42      	ldr	r2, [pc, #264]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003f42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f54:	4b3d      	ldr	r3, [pc, #244]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f5c:	4a3b      	ldr	r2, [pc, #236]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003f5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b39      	ldr	r3, [pc, #228]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4936      	ldr	r1, [pc, #216]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b80      	cmp	r3, #128	@ 0x80
 8003f7c:	d105      	bne.n	8003f8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f7e:	4b33      	ldr	r3, [pc, #204]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	4a32      	ldr	r2, [pc, #200]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003f84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004048 <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d21d      	bcs.n	8003fd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f98:	4b2b      	ldr	r3, [pc, #172]	@ (8004048 <HAL_RCC_ClockConfig+0x260>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 020f 	bic.w	r2, r3, #15
 8003fa0:	4929      	ldr	r1, [pc, #164]	@ (8004048 <HAL_RCC_ClockConfig+0x260>)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fa8:	f7fd fa04 	bl	80013b4 <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb0:	f7fd fa00 	bl	80013b4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e03b      	b.n	800403e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_RCC_ClockConfig+0x260>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1ed      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4917      	ldr	r1, [pc, #92]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ffe:	4b13      	ldr	r3, [pc, #76]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	490f      	ldr	r1, [pc, #60]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004012:	f000 f825 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 8004016:	4602      	mov	r2, r0
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <HAL_RCC_ClockConfig+0x264>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	490c      	ldr	r1, [pc, #48]	@ (8004054 <HAL_RCC_ClockConfig+0x26c>)
 8004024:	5ccb      	ldrb	r3, [r1, r3]
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a0a      	ldr	r2, [pc, #40]	@ (8004058 <HAL_RCC_ClockConfig+0x270>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004032:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <HAL_RCC_ClockConfig+0x274>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd f970 	bl	800131c <HAL_InitTick>
 800403c:	4603      	mov	r3, r0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40022000 	.word	0x40022000
 800404c:	40021000 	.word	0x40021000
 8004050:	04c4b400 	.word	0x04c4b400
 8004054:	08005ea8 	.word	0x08005ea8
 8004058:	20000008 	.word	0x20000008
 800405c:	2000000c 	.word	0x2000000c

08004060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004066:	4b2c      	ldr	r3, [pc, #176]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b04      	cmp	r3, #4
 8004070:	d102      	bne.n	8004078 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004072:	4b2a      	ldr	r3, [pc, #168]	@ (800411c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	e047      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004078:	4b27      	ldr	r3, [pc, #156]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b08      	cmp	r3, #8
 8004082:	d102      	bne.n	800408a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004084:	4b26      	ldr	r3, [pc, #152]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	e03e      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800408a:	4b23      	ldr	r3, [pc, #140]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d136      	bne.n	8004104 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004096:	4b20      	ldr	r3, [pc, #128]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3301      	adds	r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d10c      	bne.n	80040ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040be:	68d2      	ldr	r2, [r2, #12]
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	617b      	str	r3, [r7, #20]
      break;
 80040cc:	e00c      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ce:	4a13      	ldr	r2, [pc, #76]	@ (800411c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	4a10      	ldr	r2, [pc, #64]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d8:	68d2      	ldr	r2, [r2, #12]
 80040da:	0a12      	lsrs	r2, r2, #8
 80040dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040e0:	fb02 f303 	mul.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
      break;
 80040e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	0e5b      	lsrs	r3, r3, #25
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e001      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004108:	693b      	ldr	r3, [r7, #16]
}
 800410a:	4618      	mov	r0, r3
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	00f42400 	.word	0x00f42400
 8004120:	007a1200 	.word	0x007a1200

08004124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004128:	4b03      	ldr	r3, [pc, #12]	@ (8004138 <HAL_RCC_GetHCLKFreq+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000008 	.word	0x20000008

0800413c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004142:	4b1e      	ldr	r3, [pc, #120]	@ (80041bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	3301      	adds	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d10c      	bne.n	800417a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004160:	4a17      	ldr	r2, [pc, #92]	@ (80041c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	fbb2 f3f3 	udiv	r3, r2, r3
 8004168:	4a14      	ldr	r2, [pc, #80]	@ (80041bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800416a:	68d2      	ldr	r2, [r2, #12]
 800416c:	0a12      	lsrs	r2, r2, #8
 800416e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	617b      	str	r3, [r7, #20]
    break;
 8004178:	e00c      	b.n	8004194 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800417a:	4a12      	ldr	r2, [pc, #72]	@ (80041c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	4a0e      	ldr	r2, [pc, #56]	@ (80041bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004184:	68d2      	ldr	r2, [r2, #12]
 8004186:	0a12      	lsrs	r2, r2, #8
 8004188:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800418c:	fb02 f303 	mul.w	r3, r2, r3
 8004190:	617b      	str	r3, [r7, #20]
    break;
 8004192:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004194:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	0e5b      	lsrs	r3, r3, #25
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	3301      	adds	r3, #1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041ae:	687b      	ldr	r3, [r7, #4]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40021000 	.word	0x40021000
 80041c0:	007a1200 	.word	0x007a1200
 80041c4:	00f42400 	.word	0x00f42400

080041c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041d0:	2300      	movs	r3, #0
 80041d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041d4:	2300      	movs	r3, #0
 80041d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8098 	beq.w	8004316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b43      	ldr	r3, [pc, #268]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	4b40      	ldr	r3, [pc, #256]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fa:	4a3f      	ldr	r2, [pc, #252]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004200:	6593      	str	r3, [r2, #88]	@ 0x58
 8004202:	4b3d      	ldr	r3, [pc, #244]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420e:	2301      	movs	r3, #1
 8004210:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004212:	4b3a      	ldr	r3, [pc, #232]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a39      	ldr	r2, [pc, #228]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800421e:	f7fd f8c9 	bl	80013b4 <HAL_GetTick>
 8004222:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004224:	e009      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004226:	f7fd f8c5 	bl	80013b4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d902      	bls.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	74fb      	strb	r3, [r7, #19]
        break;
 8004238:	e005      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800423a:	4b30      	ldr	r3, [pc, #192]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0ef      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d159      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800424c:	4b2a      	ldr	r3, [pc, #168]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004256:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01e      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	429a      	cmp	r2, r3
 8004266:	d019      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004268:	4b23      	ldr	r3, [pc, #140]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004274:	4b20      	ldr	r3, [pc, #128]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	4a1f      	ldr	r2, [pc, #124]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004284:	4b1c      	ldr	r3, [pc, #112]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	4a1b      	ldr	r2, [pc, #108]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004294:	4a18      	ldr	r2, [pc, #96]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d016      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a6:	f7fd f885 	bl	80013b4 <HAL_GetTick>
 80042aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ac:	e00b      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fd f881 	bl	80013b4 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d902      	bls.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	74fb      	strb	r3, [r7, #19]
            break;
 80042c4:	e006      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c6:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ec      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042da:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e8:	4903      	ldr	r1, [pc, #12]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042f0:	e008      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	74bb      	strb	r3, [r7, #18]
 80042f6:	e005      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004304:	7c7b      	ldrb	r3, [r7, #17]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d105      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430a:	4ba7      	ldr	r3, [pc, #668]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430e:	4aa6      	ldr	r2, [pc, #664]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004314:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004322:	4ba1      	ldr	r3, [pc, #644]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f023 0203 	bic.w	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	499d      	ldr	r1, [pc, #628]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004344:	4b98      	ldr	r3, [pc, #608]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434a:	f023 020c 	bic.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4995      	ldr	r1, [pc, #596]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004366:	4b90      	ldr	r3, [pc, #576]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	498c      	ldr	r1, [pc, #560]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004388:	4b87      	ldr	r3, [pc, #540]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	4984      	ldr	r1, [pc, #528]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043aa:	4b7f      	ldr	r3, [pc, #508]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	497b      	ldr	r1, [pc, #492]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043cc:	4b76      	ldr	r3, [pc, #472]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	4973      	ldr	r1, [pc, #460]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ee:	4b6e      	ldr	r3, [pc, #440]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	496a      	ldr	r1, [pc, #424]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004410:	4b65      	ldr	r3, [pc, #404]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	4962      	ldr	r1, [pc, #392]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004432:	4b5d      	ldr	r3, [pc, #372]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004438:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	4959      	ldr	r1, [pc, #356]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004454:	4b54      	ldr	r3, [pc, #336]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800445a:	f023 0203 	bic.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004462:	4951      	ldr	r1, [pc, #324]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004476:	4b4c      	ldr	r3, [pc, #304]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	4948      	ldr	r1, [pc, #288]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d015      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004498:	4b43      	ldr	r3, [pc, #268]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	4940      	ldr	r1, [pc, #256]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044b6:	d105      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b8:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4a3a      	ldr	r2, [pc, #232]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044c2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d015      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044d0:	4b35      	ldr	r3, [pc, #212]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044de:	4932      	ldr	r1, [pc, #200]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ee:	d105      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f0:	4b2d      	ldr	r3, [pc, #180]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a2c      	ldr	r2, [pc, #176]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044fa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d015      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004508:	4b27      	ldr	r3, [pc, #156]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004516:	4924      	ldr	r1, [pc, #144]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004526:	d105      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004528:	4b1f      	ldr	r3, [pc, #124]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a1e      	ldr	r2, [pc, #120]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004532:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d015      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	4916      	ldr	r1, [pc, #88]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800455e:	d105      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004560:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4a10      	ldr	r2, [pc, #64]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800456a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d019      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	4908      	ldr	r1, [pc, #32]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004596:	d109      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004598:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a02      	ldr	r2, [pc, #8]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045a2:	60d3      	str	r3, [r2, #12]
 80045a4:	e002      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045b8:	4b29      	ldr	r3, [pc, #164]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	4926      	ldr	r1, [pc, #152]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d6:	d105      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045d8:	4b21      	ldr	r3, [pc, #132]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a20      	ldr	r2, [pc, #128]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d015      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fe:	4918      	ldr	r1, [pc, #96]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800460a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800460e:	d105      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a12      	ldr	r2, [pc, #72]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004628:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800462a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800462e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004636:	490a      	ldr	r1, [pc, #40]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004642:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004646:	d105      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a04      	ldr	r2, [pc, #16]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800464e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004652:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004654:	7cbb      	ldrb	r3, [r7, #18]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000

08004664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e049      	b.n	800470a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fc fd90 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f000 f9bc 	bl	8004a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d001      	beq.n	800472c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e04c      	b.n	80047c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a26      	ldr	r2, [pc, #152]	@ (80047d4 <HAL_TIM_Base_Start+0xc0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d022      	beq.n	8004784 <HAL_TIM_Base_Start+0x70>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004746:	d01d      	beq.n	8004784 <HAL_TIM_Base_Start+0x70>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a22      	ldr	r2, [pc, #136]	@ (80047d8 <HAL_TIM_Base_Start+0xc4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d018      	beq.n	8004784 <HAL_TIM_Base_Start+0x70>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a21      	ldr	r2, [pc, #132]	@ (80047dc <HAL_TIM_Base_Start+0xc8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <HAL_TIM_Base_Start+0x70>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1f      	ldr	r2, [pc, #124]	@ (80047e0 <HAL_TIM_Base_Start+0xcc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00e      	beq.n	8004784 <HAL_TIM_Base_Start+0x70>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1e      	ldr	r2, [pc, #120]	@ (80047e4 <HAL_TIM_Base_Start+0xd0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_TIM_Base_Start+0x70>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <HAL_TIM_Base_Start+0xd4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_TIM_Base_Start+0x70>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ec <HAL_TIM_Base_Start+0xd8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d115      	bne.n	80047b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <HAL_TIM_Base_Start+0xdc>)
 800478c:	4013      	ands	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b06      	cmp	r3, #6
 8004794:	d015      	beq.n	80047c2 <HAL_TIM_Base_Start+0xae>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479c:	d011      	beq.n	80047c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	e008      	b.n	80047c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e000      	b.n	80047c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40013400 	.word	0x40013400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40015000 	.word	0x40015000
 80047f0:	00010007 	.word	0x00010007

080047f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_TIM_ConfigClockSource+0x1c>
 800480c:	2302      	movs	r3, #2
 800480e:	e0f6      	b.n	80049fe <HAL_TIM_ConfigClockSource+0x20a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800482e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800483a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6f      	ldr	r2, [pc, #444]	@ (8004a08 <HAL_TIM_ConfigClockSource+0x214>)
 800484a:	4293      	cmp	r3, r2
 800484c:	f000 80c1 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 8004850:	4a6d      	ldr	r2, [pc, #436]	@ (8004a08 <HAL_TIM_ConfigClockSource+0x214>)
 8004852:	4293      	cmp	r3, r2
 8004854:	f200 80c6 	bhi.w	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004858:	4a6c      	ldr	r2, [pc, #432]	@ (8004a0c <HAL_TIM_ConfigClockSource+0x218>)
 800485a:	4293      	cmp	r3, r2
 800485c:	f000 80b9 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 8004860:	4a6a      	ldr	r2, [pc, #424]	@ (8004a0c <HAL_TIM_ConfigClockSource+0x218>)
 8004862:	4293      	cmp	r3, r2
 8004864:	f200 80be 	bhi.w	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004868:	4a69      	ldr	r2, [pc, #420]	@ (8004a10 <HAL_TIM_ConfigClockSource+0x21c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	f000 80b1 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 8004870:	4a67      	ldr	r2, [pc, #412]	@ (8004a10 <HAL_TIM_ConfigClockSource+0x21c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	f200 80b6 	bhi.w	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004878:	4a66      	ldr	r2, [pc, #408]	@ (8004a14 <HAL_TIM_ConfigClockSource+0x220>)
 800487a:	4293      	cmp	r3, r2
 800487c:	f000 80a9 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 8004880:	4a64      	ldr	r2, [pc, #400]	@ (8004a14 <HAL_TIM_ConfigClockSource+0x220>)
 8004882:	4293      	cmp	r3, r2
 8004884:	f200 80ae 	bhi.w	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004888:	4a63      	ldr	r2, [pc, #396]	@ (8004a18 <HAL_TIM_ConfigClockSource+0x224>)
 800488a:	4293      	cmp	r3, r2
 800488c:	f000 80a1 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 8004890:	4a61      	ldr	r2, [pc, #388]	@ (8004a18 <HAL_TIM_ConfigClockSource+0x224>)
 8004892:	4293      	cmp	r3, r2
 8004894:	f200 80a6 	bhi.w	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004898:	4a60      	ldr	r2, [pc, #384]	@ (8004a1c <HAL_TIM_ConfigClockSource+0x228>)
 800489a:	4293      	cmp	r3, r2
 800489c:	f000 8099 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 80048a0:	4a5e      	ldr	r2, [pc, #376]	@ (8004a1c <HAL_TIM_ConfigClockSource+0x228>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	f200 809e 	bhi.w	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048ac:	f000 8091 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 80048b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048b4:	f200 8096 	bhi.w	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048bc:	f000 8089 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 80048c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048c4:	f200 808e 	bhi.w	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048cc:	d03e      	beq.n	800494c <HAL_TIM_ConfigClockSource+0x158>
 80048ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048d2:	f200 8087 	bhi.w	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048da:	f000 8086 	beq.w	80049ea <HAL_TIM_ConfigClockSource+0x1f6>
 80048de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e2:	d87f      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048e4:	2b70      	cmp	r3, #112	@ 0x70
 80048e6:	d01a      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x12a>
 80048e8:	2b70      	cmp	r3, #112	@ 0x70
 80048ea:	d87b      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048ec:	2b60      	cmp	r3, #96	@ 0x60
 80048ee:	d050      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x19e>
 80048f0:	2b60      	cmp	r3, #96	@ 0x60
 80048f2:	d877      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048f4:	2b50      	cmp	r3, #80	@ 0x50
 80048f6:	d03c      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x17e>
 80048f8:	2b50      	cmp	r3, #80	@ 0x50
 80048fa:	d873      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048fc:	2b40      	cmp	r3, #64	@ 0x40
 80048fe:	d058      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x1be>
 8004900:	2b40      	cmp	r3, #64	@ 0x40
 8004902:	d86f      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004904:	2b30      	cmp	r3, #48	@ 0x30
 8004906:	d064      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 8004908:	2b30      	cmp	r3, #48	@ 0x30
 800490a:	d86b      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800490c:	2b20      	cmp	r3, #32
 800490e:	d060      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 8004910:	2b20      	cmp	r3, #32
 8004912:	d867      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004914:	2b00      	cmp	r3, #0
 8004916:	d05c      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 8004918:	2b10      	cmp	r3, #16
 800491a:	d05a      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x1de>
 800491c:	e062      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800492e:	f000 f9a7 	bl	8004c80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004940:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	609a      	str	r2, [r3, #8]
      break;
 800494a:	e04f      	b.n	80049ec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800495c:	f000 f990 	bl	8004c80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800496e:	609a      	str	r2, [r3, #8]
      break;
 8004970:	e03c      	b.n	80049ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800497e:	461a      	mov	r2, r3
 8004980:	f000 f902 	bl	8004b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2150      	movs	r1, #80	@ 0x50
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f95b 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 8004990:	e02c      	b.n	80049ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800499e:	461a      	mov	r2, r3
 80049a0:	f000 f921 	bl	8004be6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2160      	movs	r1, #96	@ 0x60
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f94b 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 80049b0:	e01c      	b.n	80049ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049be:	461a      	mov	r2, r3
 80049c0:	f000 f8e2 	bl	8004b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2140      	movs	r1, #64	@ 0x40
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f93b 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 80049d0:	e00c      	b.n	80049ec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f000 f932 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 80049e2:	e003      	b.n	80049ec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
      break;
 80049e8:	e000      	b.n	80049ec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80049ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	00100070 	.word	0x00100070
 8004a0c:	00100060 	.word	0x00100060
 8004a10:	00100050 	.word	0x00100050
 8004a14:	00100040 	.word	0x00100040
 8004a18:	00100030 	.word	0x00100030
 8004a1c:	00100020 	.word	0x00100020

08004a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a4c      	ldr	r2, [pc, #304]	@ (8004b64 <TIM_Base_SetConfig+0x144>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d017      	beq.n	8004a68 <TIM_Base_SetConfig+0x48>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3e:	d013      	beq.n	8004a68 <TIM_Base_SetConfig+0x48>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a49      	ldr	r2, [pc, #292]	@ (8004b68 <TIM_Base_SetConfig+0x148>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00f      	beq.n	8004a68 <TIM_Base_SetConfig+0x48>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a48      	ldr	r2, [pc, #288]	@ (8004b6c <TIM_Base_SetConfig+0x14c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_Base_SetConfig+0x48>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a47      	ldr	r2, [pc, #284]	@ (8004b70 <TIM_Base_SetConfig+0x150>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_Base_SetConfig+0x48>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a46      	ldr	r2, [pc, #280]	@ (8004b74 <TIM_Base_SetConfig+0x154>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0x48>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a45      	ldr	r2, [pc, #276]	@ (8004b78 <TIM_Base_SetConfig+0x158>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a39      	ldr	r2, [pc, #228]	@ (8004b64 <TIM_Base_SetConfig+0x144>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d023      	beq.n	8004aca <TIM_Base_SetConfig+0xaa>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a88:	d01f      	beq.n	8004aca <TIM_Base_SetConfig+0xaa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a36      	ldr	r2, [pc, #216]	@ (8004b68 <TIM_Base_SetConfig+0x148>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01b      	beq.n	8004aca <TIM_Base_SetConfig+0xaa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a35      	ldr	r2, [pc, #212]	@ (8004b6c <TIM_Base_SetConfig+0x14c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d017      	beq.n	8004aca <TIM_Base_SetConfig+0xaa>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a34      	ldr	r2, [pc, #208]	@ (8004b70 <TIM_Base_SetConfig+0x150>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <TIM_Base_SetConfig+0xaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a33      	ldr	r2, [pc, #204]	@ (8004b74 <TIM_Base_SetConfig+0x154>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00f      	beq.n	8004aca <TIM_Base_SetConfig+0xaa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a33      	ldr	r2, [pc, #204]	@ (8004b7c <TIM_Base_SetConfig+0x15c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <TIM_Base_SetConfig+0xaa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a32      	ldr	r2, [pc, #200]	@ (8004b80 <TIM_Base_SetConfig+0x160>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <TIM_Base_SetConfig+0xaa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a31      	ldr	r2, [pc, #196]	@ (8004b84 <TIM_Base_SetConfig+0x164>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_Base_SetConfig+0xaa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8004b78 <TIM_Base_SetConfig+0x158>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d108      	bne.n	8004adc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a18      	ldr	r2, [pc, #96]	@ (8004b64 <TIM_Base_SetConfig+0x144>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <TIM_Base_SetConfig+0x110>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b74 <TIM_Base_SetConfig+0x154>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00f      	beq.n	8004b30 <TIM_Base_SetConfig+0x110>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1a      	ldr	r2, [pc, #104]	@ (8004b7c <TIM_Base_SetConfig+0x15c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <TIM_Base_SetConfig+0x110>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a19      	ldr	r2, [pc, #100]	@ (8004b80 <TIM_Base_SetConfig+0x160>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <TIM_Base_SetConfig+0x110>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a18      	ldr	r2, [pc, #96]	@ (8004b84 <TIM_Base_SetConfig+0x164>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_Base_SetConfig+0x110>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a13      	ldr	r2, [pc, #76]	@ (8004b78 <TIM_Base_SetConfig+0x158>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d103      	bne.n	8004b38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d105      	bne.n	8004b56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f023 0201 	bic.w	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	611a      	str	r2, [r3, #16]
  }
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40000c00 	.word	0x40000c00
 8004b74:	40013400 	.word	0x40013400
 8004b78:	40015000 	.word	0x40015000
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400
 8004b84:	40014800 	.word	0x40014800

08004b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f023 0201 	bic.w	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f023 030a 	bic.w	r3, r3, #10
 8004bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b087      	sub	sp, #28
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f023 0210 	bic.w	r2, r3, #16
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	031b      	lsls	r3, r3, #12
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f043 0307 	orr.w	r3, r3, #7
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	021a      	lsls	r2, r3, #8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e074      	b.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a34      	ldr	r2, [pc, #208]	@ (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a33      	ldr	r2, [pc, #204]	@ (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a31      	ldr	r2, [pc, #196]	@ (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d108      	bne.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a21      	ldr	r2, [pc, #132]	@ (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d58:	d01d      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1d      	ldr	r2, [pc, #116]	@ (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1c      	ldr	r2, [pc, #112]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a15      	ldr	r2, [pc, #84]	@ (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a11      	ldr	r2, [pc, #68]	@ (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10c      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40013400 	.word	0x40013400
 8004dd8:	40015000 	.word	0x40015000
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40014000 	.word	0x40014000

08004dec <memset>:
 8004dec:	4402      	add	r2, r0
 8004dee:	4603      	mov	r3, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	@ (8004e34 <__libc_init_array+0x38>)
 8004e00:	4c0d      	ldr	r4, [pc, #52]	@ (8004e38 <__libc_init_array+0x3c>)
 8004e02:	1b64      	subs	r4, r4, r5
 8004e04:	10a4      	asrs	r4, r4, #2
 8004e06:	2600      	movs	r6, #0
 8004e08:	42a6      	cmp	r6, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e3c <__libc_init_array+0x40>)
 8004e0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e40 <__libc_init_array+0x44>)
 8004e10:	f001 f83e 	bl	8005e90 <_init>
 8004e14:	1b64      	subs	r4, r4, r5
 8004e16:	10a4      	asrs	r4, r4, #2
 8004e18:	2600      	movs	r6, #0
 8004e1a:	42a6      	cmp	r6, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e24:	4798      	blx	r3
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2e:	4798      	blx	r3
 8004e30:	3601      	adds	r6, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	08006098 	.word	0x08006098
 8004e38:	08006098 	.word	0x08006098
 8004e3c:	08006098 	.word	0x08006098
 8004e40:	0800609c 	.word	0x0800609c
 8004e44:	00000000 	.word	0x00000000

08004e48 <sin>:
 8004e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e4a:	ec53 2b10 	vmov	r2, r3, d0
 8004e4e:	4826      	ldr	r0, [pc, #152]	@ (8004ee8 <sin+0xa0>)
 8004e50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e54:	4281      	cmp	r1, r0
 8004e56:	d807      	bhi.n	8004e68 <sin+0x20>
 8004e58:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004ee0 <sin+0x98>
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	b005      	add	sp, #20
 8004e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e64:	f000 b90c 	b.w	8005080 <__kernel_sin>
 8004e68:	4820      	ldr	r0, [pc, #128]	@ (8004eec <sin+0xa4>)
 8004e6a:	4281      	cmp	r1, r0
 8004e6c:	d908      	bls.n	8004e80 <sin+0x38>
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	f7fb fb07 	bl	8000484 <__aeabi_dsub>
 8004e76:	ec41 0b10 	vmov	d0, r0, r1
 8004e7a:	b005      	add	sp, #20
 8004e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e80:	4668      	mov	r0, sp
 8004e82:	f000 f9b9 	bl	80051f8 <__ieee754_rem_pio2>
 8004e86:	f000 0003 	and.w	r0, r0, #3
 8004e8a:	2801      	cmp	r0, #1
 8004e8c:	d00c      	beq.n	8004ea8 <sin+0x60>
 8004e8e:	2802      	cmp	r0, #2
 8004e90:	d011      	beq.n	8004eb6 <sin+0x6e>
 8004e92:	b9e8      	cbnz	r0, 8004ed0 <sin+0x88>
 8004e94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e98:	ed9d 0b00 	vldr	d0, [sp]
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	f000 f8ef 	bl	8005080 <__kernel_sin>
 8004ea2:	ec51 0b10 	vmov	r0, r1, d0
 8004ea6:	e7e6      	b.n	8004e76 <sin+0x2e>
 8004ea8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004eac:	ed9d 0b00 	vldr	d0, [sp]
 8004eb0:	f000 f81e 	bl	8004ef0 <__kernel_cos>
 8004eb4:	e7f5      	b.n	8004ea2 <sin+0x5a>
 8004eb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004eba:	ed9d 0b00 	vldr	d0, [sp]
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f000 f8de 	bl	8005080 <__kernel_sin>
 8004ec4:	ec53 2b10 	vmov	r2, r3, d0
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004ece:	e7d2      	b.n	8004e76 <sin+0x2e>
 8004ed0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ed4:	ed9d 0b00 	vldr	d0, [sp]
 8004ed8:	f000 f80a 	bl	8004ef0 <__kernel_cos>
 8004edc:	e7f2      	b.n	8004ec4 <sin+0x7c>
 8004ede:	bf00      	nop
	...
 8004ee8:	3fe921fb 	.word	0x3fe921fb
 8004eec:	7fefffff 	.word	0x7fefffff

08004ef0 <__kernel_cos>:
 8004ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	ec57 6b10 	vmov	r6, r7, d0
 8004ef8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004efc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004f00:	ed8d 1b00 	vstr	d1, [sp]
 8004f04:	d206      	bcs.n	8004f14 <__kernel_cos+0x24>
 8004f06:	4630      	mov	r0, r6
 8004f08:	4639      	mov	r1, r7
 8004f0a:	f7fb fcfb 	bl	8000904 <__aeabi_d2iz>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	f000 8088 	beq.w	8005024 <__kernel_cos+0x134>
 8004f14:	4632      	mov	r2, r6
 8004f16:	463b      	mov	r3, r7
 8004f18:	4630      	mov	r0, r6
 8004f1a:	4639      	mov	r1, r7
 8004f1c:	f7fb f984 	bl	8000228 <__aeabi_dmul>
 8004f20:	4b51      	ldr	r3, [pc, #324]	@ (8005068 <__kernel_cos+0x178>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	4604      	mov	r4, r0
 8004f26:	460d      	mov	r5, r1
 8004f28:	f7fb f97e 	bl	8000228 <__aeabi_dmul>
 8004f2c:	a340      	add	r3, pc, #256	@ (adr r3, 8005030 <__kernel_cos+0x140>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	4682      	mov	sl, r0
 8004f34:	468b      	mov	fp, r1
 8004f36:	4620      	mov	r0, r4
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f7fb f975 	bl	8000228 <__aeabi_dmul>
 8004f3e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005038 <__kernel_cos+0x148>)
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f7fb faa0 	bl	8000488 <__adddf3>
 8004f48:	4622      	mov	r2, r4
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	f7fb f96c 	bl	8000228 <__aeabi_dmul>
 8004f50:	a33b      	add	r3, pc, #236	@ (adr r3, 8005040 <__kernel_cos+0x150>)
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f7fb fa95 	bl	8000484 <__aeabi_dsub>
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	f7fb f963 	bl	8000228 <__aeabi_dmul>
 8004f62:	a339      	add	r3, pc, #228	@ (adr r3, 8005048 <__kernel_cos+0x158>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f7fb fa8e 	bl	8000488 <__adddf3>
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	462b      	mov	r3, r5
 8004f70:	f7fb f95a 	bl	8000228 <__aeabi_dmul>
 8004f74:	a336      	add	r3, pc, #216	@ (adr r3, 8005050 <__kernel_cos+0x160>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	f7fb fa83 	bl	8000484 <__aeabi_dsub>
 8004f7e:	4622      	mov	r2, r4
 8004f80:	462b      	mov	r3, r5
 8004f82:	f7fb f951 	bl	8000228 <__aeabi_dmul>
 8004f86:	a334      	add	r3, pc, #208	@ (adr r3, 8005058 <__kernel_cos+0x168>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f7fb fa7c 	bl	8000488 <__adddf3>
 8004f90:	4622      	mov	r2, r4
 8004f92:	462b      	mov	r3, r5
 8004f94:	f7fb f948 	bl	8000228 <__aeabi_dmul>
 8004f98:	4622      	mov	r2, r4
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	f7fb f944 	bl	8000228 <__aeabi_dmul>
 8004fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	460d      	mov	r5, r1
 8004fa8:	4630      	mov	r0, r6
 8004faa:	4639      	mov	r1, r7
 8004fac:	f7fb f93c 	bl	8000228 <__aeabi_dmul>
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f7fb fa64 	bl	8000484 <__aeabi_dsub>
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800506c <__kernel_cos+0x17c>)
 8004fbe:	4598      	cmp	r8, r3
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	d810      	bhi.n	8004fe8 <__kernel_cos+0xf8>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4650      	mov	r0, sl
 8004fcc:	4659      	mov	r1, fp
 8004fce:	f7fb fa59 	bl	8000484 <__aeabi_dsub>
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4926      	ldr	r1, [pc, #152]	@ (8005070 <__kernel_cos+0x180>)
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f7fb fa53 	bl	8000484 <__aeabi_dsub>
 8004fde:	ec41 0b10 	vmov	d0, r0, r1
 8004fe2:	b003      	add	sp, #12
 8004fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe8:	4b22      	ldr	r3, [pc, #136]	@ (8005074 <__kernel_cos+0x184>)
 8004fea:	4921      	ldr	r1, [pc, #132]	@ (8005070 <__kernel_cos+0x180>)
 8004fec:	4598      	cmp	r8, r3
 8004fee:	bf8c      	ite	hi
 8004ff0:	4d21      	ldrhi	r5, [pc, #132]	@ (8005078 <__kernel_cos+0x188>)
 8004ff2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004ff6:	2400      	movs	r4, #0
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	462b      	mov	r3, r5
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7fb fa41 	bl	8000484 <__aeabi_dsub>
 8005002:	4622      	mov	r2, r4
 8005004:	4680      	mov	r8, r0
 8005006:	4689      	mov	r9, r1
 8005008:	462b      	mov	r3, r5
 800500a:	4650      	mov	r0, sl
 800500c:	4659      	mov	r1, fp
 800500e:	f7fb fa39 	bl	8000484 <__aeabi_dsub>
 8005012:	4632      	mov	r2, r6
 8005014:	463b      	mov	r3, r7
 8005016:	f7fb fa35 	bl	8000484 <__aeabi_dsub>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	e7da      	b.n	8004fda <__kernel_cos+0xea>
 8005024:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005060 <__kernel_cos+0x170>
 8005028:	e7db      	b.n	8004fe2 <__kernel_cos+0xf2>
 800502a:	bf00      	nop
 800502c:	f3af 8000 	nop.w
 8005030:	be8838d4 	.word	0xbe8838d4
 8005034:	bda8fae9 	.word	0xbda8fae9
 8005038:	bdb4b1c4 	.word	0xbdb4b1c4
 800503c:	3e21ee9e 	.word	0x3e21ee9e
 8005040:	809c52ad 	.word	0x809c52ad
 8005044:	3e927e4f 	.word	0x3e927e4f
 8005048:	19cb1590 	.word	0x19cb1590
 800504c:	3efa01a0 	.word	0x3efa01a0
 8005050:	16c15177 	.word	0x16c15177
 8005054:	3f56c16c 	.word	0x3f56c16c
 8005058:	5555554c 	.word	0x5555554c
 800505c:	3fa55555 	.word	0x3fa55555
 8005060:	00000000 	.word	0x00000000
 8005064:	3ff00000 	.word	0x3ff00000
 8005068:	3fe00000 	.word	0x3fe00000
 800506c:	3fd33332 	.word	0x3fd33332
 8005070:	3ff00000 	.word	0x3ff00000
 8005074:	3fe90000 	.word	0x3fe90000
 8005078:	3fd20000 	.word	0x3fd20000
 800507c:	00000000 	.word	0x00000000

08005080 <__kernel_sin>:
 8005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	ec55 4b10 	vmov	r4, r5, d0
 8005088:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800508c:	b085      	sub	sp, #20
 800508e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005092:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005096:	4680      	mov	r8, r0
 8005098:	d205      	bcs.n	80050a6 <__kernel_sin+0x26>
 800509a:	4620      	mov	r0, r4
 800509c:	4629      	mov	r1, r5
 800509e:	f7fb fc31 	bl	8000904 <__aeabi_d2iz>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d052      	beq.n	800514c <__kernel_sin+0xcc>
 80050a6:	4622      	mov	r2, r4
 80050a8:	462b      	mov	r3, r5
 80050aa:	4620      	mov	r0, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	f7fb f8bb 	bl	8000228 <__aeabi_dmul>
 80050b2:	4682      	mov	sl, r0
 80050b4:	468b      	mov	fp, r1
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4620      	mov	r0, r4
 80050bc:	4629      	mov	r1, r5
 80050be:	f7fb f8b3 	bl	8000228 <__aeabi_dmul>
 80050c2:	a342      	add	r3, pc, #264	@ (adr r3, 80051cc <__kernel_sin+0x14c>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	e9cd 0100 	strd	r0, r1, [sp]
 80050cc:	4650      	mov	r0, sl
 80050ce:	4659      	mov	r1, fp
 80050d0:	f7fb f8aa 	bl	8000228 <__aeabi_dmul>
 80050d4:	a33f      	add	r3, pc, #252	@ (adr r3, 80051d4 <__kernel_sin+0x154>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb f9d3 	bl	8000484 <__aeabi_dsub>
 80050de:	4652      	mov	r2, sl
 80050e0:	465b      	mov	r3, fp
 80050e2:	f7fb f8a1 	bl	8000228 <__aeabi_dmul>
 80050e6:	a33d      	add	r3, pc, #244	@ (adr r3, 80051dc <__kernel_sin+0x15c>)
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f7fb f9cc 	bl	8000488 <__adddf3>
 80050f0:	4652      	mov	r2, sl
 80050f2:	465b      	mov	r3, fp
 80050f4:	f7fb f898 	bl	8000228 <__aeabi_dmul>
 80050f8:	a33a      	add	r3, pc, #232	@ (adr r3, 80051e4 <__kernel_sin+0x164>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f7fb f9c1 	bl	8000484 <__aeabi_dsub>
 8005102:	4652      	mov	r2, sl
 8005104:	465b      	mov	r3, fp
 8005106:	f7fb f88f 	bl	8000228 <__aeabi_dmul>
 800510a:	a338      	add	r3, pc, #224	@ (adr r3, 80051ec <__kernel_sin+0x16c>)
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f7fb f9ba 	bl	8000488 <__adddf3>
 8005114:	4606      	mov	r6, r0
 8005116:	460f      	mov	r7, r1
 8005118:	f1b8 0f00 	cmp.w	r8, #0
 800511c:	d11b      	bne.n	8005156 <__kernel_sin+0xd6>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4650      	mov	r0, sl
 8005124:	4659      	mov	r1, fp
 8005126:	f7fb f87f 	bl	8000228 <__aeabi_dmul>
 800512a:	a325      	add	r3, pc, #148	@ (adr r3, 80051c0 <__kernel_sin+0x140>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb f9a8 	bl	8000484 <__aeabi_dsub>
 8005134:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005138:	f7fb f876 	bl	8000228 <__aeabi_dmul>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4620      	mov	r0, r4
 8005142:	4629      	mov	r1, r5
 8005144:	f7fb f9a0 	bl	8000488 <__adddf3>
 8005148:	4604      	mov	r4, r0
 800514a:	460d      	mov	r5, r1
 800514c:	ec45 4b10 	vmov	d0, r4, r5
 8005150:	b005      	add	sp, #20
 8005152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800515a:	4b1b      	ldr	r3, [pc, #108]	@ (80051c8 <__kernel_sin+0x148>)
 800515c:	2200      	movs	r2, #0
 800515e:	f7fb f863 	bl	8000228 <__aeabi_dmul>
 8005162:	4632      	mov	r2, r6
 8005164:	4680      	mov	r8, r0
 8005166:	4689      	mov	r9, r1
 8005168:	463b      	mov	r3, r7
 800516a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800516e:	f7fb f85b 	bl	8000228 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4640      	mov	r0, r8
 8005178:	4649      	mov	r1, r9
 800517a:	f7fb f983 	bl	8000484 <__aeabi_dsub>
 800517e:	4652      	mov	r2, sl
 8005180:	465b      	mov	r3, fp
 8005182:	f7fb f851 	bl	8000228 <__aeabi_dmul>
 8005186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800518a:	f7fb f97b 	bl	8000484 <__aeabi_dsub>
 800518e:	a30c      	add	r3, pc, #48	@ (adr r3, 80051c0 <__kernel_sin+0x140>)
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	4606      	mov	r6, r0
 8005196:	460f      	mov	r7, r1
 8005198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800519c:	f7fb f844 	bl	8000228 <__aeabi_dmul>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4630      	mov	r0, r6
 80051a6:	4639      	mov	r1, r7
 80051a8:	f7fb f96e 	bl	8000488 <__adddf3>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4620      	mov	r0, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	f7fb f966 	bl	8000484 <__aeabi_dsub>
 80051b8:	e7c6      	b.n	8005148 <__kernel_sin+0xc8>
 80051ba:	bf00      	nop
 80051bc:	f3af 8000 	nop.w
 80051c0:	55555549 	.word	0x55555549
 80051c4:	3fc55555 	.word	0x3fc55555
 80051c8:	3fe00000 	.word	0x3fe00000
 80051cc:	5acfd57c 	.word	0x5acfd57c
 80051d0:	3de5d93a 	.word	0x3de5d93a
 80051d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80051d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80051dc:	57b1fe7d 	.word	0x57b1fe7d
 80051e0:	3ec71de3 	.word	0x3ec71de3
 80051e4:	19c161d5 	.word	0x19c161d5
 80051e8:	3f2a01a0 	.word	0x3f2a01a0
 80051ec:	1110f8a6 	.word	0x1110f8a6
 80051f0:	3f811111 	.word	0x3f811111
 80051f4:	00000000 	.word	0x00000000

080051f8 <__ieee754_rem_pio2>:
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	ec57 6b10 	vmov	r6, r7, d0
 8005200:	4bc5      	ldr	r3, [pc, #788]	@ (8005518 <__ieee754_rem_pio2+0x320>)
 8005202:	b08d      	sub	sp, #52	@ 0x34
 8005204:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005208:	4598      	cmp	r8, r3
 800520a:	4604      	mov	r4, r0
 800520c:	9704      	str	r7, [sp, #16]
 800520e:	d807      	bhi.n	8005220 <__ieee754_rem_pio2+0x28>
 8005210:	2200      	movs	r2, #0
 8005212:	2300      	movs	r3, #0
 8005214:	ed80 0b00 	vstr	d0, [r0]
 8005218:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800521c:	2500      	movs	r5, #0
 800521e:	e028      	b.n	8005272 <__ieee754_rem_pio2+0x7a>
 8005220:	4bbe      	ldr	r3, [pc, #760]	@ (800551c <__ieee754_rem_pio2+0x324>)
 8005222:	4598      	cmp	r8, r3
 8005224:	d878      	bhi.n	8005318 <__ieee754_rem_pio2+0x120>
 8005226:	9b04      	ldr	r3, [sp, #16]
 8005228:	4dbd      	ldr	r5, [pc, #756]	@ (8005520 <__ieee754_rem_pio2+0x328>)
 800522a:	2b00      	cmp	r3, #0
 800522c:	4630      	mov	r0, r6
 800522e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80054e0 <__ieee754_rem_pio2+0x2e8>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	4639      	mov	r1, r7
 8005236:	dd38      	ble.n	80052aa <__ieee754_rem_pio2+0xb2>
 8005238:	f7fb f924 	bl	8000484 <__aeabi_dsub>
 800523c:	45a8      	cmp	r8, r5
 800523e:	4606      	mov	r6, r0
 8005240:	460f      	mov	r7, r1
 8005242:	d01a      	beq.n	800527a <__ieee754_rem_pio2+0x82>
 8005244:	a3a8      	add	r3, pc, #672	@ (adr r3, 80054e8 <__ieee754_rem_pio2+0x2f0>)
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f7fb f91b 	bl	8000484 <__aeabi_dsub>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4680      	mov	r8, r0
 8005254:	4689      	mov	r9, r1
 8005256:	4630      	mov	r0, r6
 8005258:	4639      	mov	r1, r7
 800525a:	f7fb f913 	bl	8000484 <__aeabi_dsub>
 800525e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80054e8 <__ieee754_rem_pio2+0x2f0>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7fb f90e 	bl	8000484 <__aeabi_dsub>
 8005268:	e9c4 8900 	strd	r8, r9, [r4]
 800526c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005270:	2501      	movs	r5, #1
 8005272:	4628      	mov	r0, r5
 8005274:	b00d      	add	sp, #52	@ 0x34
 8005276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527a:	a39d      	add	r3, pc, #628	@ (adr r3, 80054f0 <__ieee754_rem_pio2+0x2f8>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fb f900 	bl	8000484 <__aeabi_dsub>
 8005284:	a39c      	add	r3, pc, #624	@ (adr r3, 80054f8 <__ieee754_rem_pio2+0x300>)
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	4606      	mov	r6, r0
 800528c:	460f      	mov	r7, r1
 800528e:	f7fb f8f9 	bl	8000484 <__aeabi_dsub>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4680      	mov	r8, r0
 8005298:	4689      	mov	r9, r1
 800529a:	4630      	mov	r0, r6
 800529c:	4639      	mov	r1, r7
 800529e:	f7fb f8f1 	bl	8000484 <__aeabi_dsub>
 80052a2:	a395      	add	r3, pc, #596	@ (adr r3, 80054f8 <__ieee754_rem_pio2+0x300>)
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	e7dc      	b.n	8005264 <__ieee754_rem_pio2+0x6c>
 80052aa:	f7fb f8ed 	bl	8000488 <__adddf3>
 80052ae:	45a8      	cmp	r8, r5
 80052b0:	4606      	mov	r6, r0
 80052b2:	460f      	mov	r7, r1
 80052b4:	d018      	beq.n	80052e8 <__ieee754_rem_pio2+0xf0>
 80052b6:	a38c      	add	r3, pc, #560	@ (adr r3, 80054e8 <__ieee754_rem_pio2+0x2f0>)
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f7fb f8e4 	bl	8000488 <__adddf3>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4680      	mov	r8, r0
 80052c6:	4689      	mov	r9, r1
 80052c8:	4630      	mov	r0, r6
 80052ca:	4639      	mov	r1, r7
 80052cc:	f7fb f8da 	bl	8000484 <__aeabi_dsub>
 80052d0:	a385      	add	r3, pc, #532	@ (adr r3, 80054e8 <__ieee754_rem_pio2+0x2f0>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f7fb f8d7 	bl	8000488 <__adddf3>
 80052da:	f04f 35ff 	mov.w	r5, #4294967295
 80052de:	e9c4 8900 	strd	r8, r9, [r4]
 80052e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80052e6:	e7c4      	b.n	8005272 <__ieee754_rem_pio2+0x7a>
 80052e8:	a381      	add	r3, pc, #516	@ (adr r3, 80054f0 <__ieee754_rem_pio2+0x2f8>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fb f8cb 	bl	8000488 <__adddf3>
 80052f2:	a381      	add	r3, pc, #516	@ (adr r3, 80054f8 <__ieee754_rem_pio2+0x300>)
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	4606      	mov	r6, r0
 80052fa:	460f      	mov	r7, r1
 80052fc:	f7fb f8c4 	bl	8000488 <__adddf3>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4680      	mov	r8, r0
 8005306:	4689      	mov	r9, r1
 8005308:	4630      	mov	r0, r6
 800530a:	4639      	mov	r1, r7
 800530c:	f7fb f8ba 	bl	8000484 <__aeabi_dsub>
 8005310:	a379      	add	r3, pc, #484	@ (adr r3, 80054f8 <__ieee754_rem_pio2+0x300>)
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	e7de      	b.n	80052d6 <__ieee754_rem_pio2+0xde>
 8005318:	4b82      	ldr	r3, [pc, #520]	@ (8005524 <__ieee754_rem_pio2+0x32c>)
 800531a:	4598      	cmp	r8, r3
 800531c:	f200 80d1 	bhi.w	80054c2 <__ieee754_rem_pio2+0x2ca>
 8005320:	f000 f966 	bl	80055f0 <fabs>
 8005324:	ec57 6b10 	vmov	r6, r7, d0
 8005328:	a375      	add	r3, pc, #468	@ (adr r3, 8005500 <__ieee754_rem_pio2+0x308>)
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	4630      	mov	r0, r6
 8005330:	4639      	mov	r1, r7
 8005332:	f7fa ff79 	bl	8000228 <__aeabi_dmul>
 8005336:	4b7c      	ldr	r3, [pc, #496]	@ (8005528 <__ieee754_rem_pio2+0x330>)
 8005338:	2200      	movs	r2, #0
 800533a:	f7fb f8a5 	bl	8000488 <__adddf3>
 800533e:	f7fb fae1 	bl	8000904 <__aeabi_d2iz>
 8005342:	4605      	mov	r5, r0
 8005344:	f7fb f9ec 	bl	8000720 <__aeabi_i2d>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005350:	a363      	add	r3, pc, #396	@ (adr r3, 80054e0 <__ieee754_rem_pio2+0x2e8>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fa ff67 	bl	8000228 <__aeabi_dmul>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4630      	mov	r0, r6
 8005360:	4639      	mov	r1, r7
 8005362:	f7fb f88f 	bl	8000484 <__aeabi_dsub>
 8005366:	a360      	add	r3, pc, #384	@ (adr r3, 80054e8 <__ieee754_rem_pio2+0x2f0>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	4682      	mov	sl, r0
 800536e:	468b      	mov	fp, r1
 8005370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005374:	f7fa ff58 	bl	8000228 <__aeabi_dmul>
 8005378:	2d1f      	cmp	r5, #31
 800537a:	4606      	mov	r6, r0
 800537c:	460f      	mov	r7, r1
 800537e:	dc0c      	bgt.n	800539a <__ieee754_rem_pio2+0x1a2>
 8005380:	4b6a      	ldr	r3, [pc, #424]	@ (800552c <__ieee754_rem_pio2+0x334>)
 8005382:	1e6a      	subs	r2, r5, #1
 8005384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005388:	4543      	cmp	r3, r8
 800538a:	d006      	beq.n	800539a <__ieee754_rem_pio2+0x1a2>
 800538c:	4632      	mov	r2, r6
 800538e:	463b      	mov	r3, r7
 8005390:	4650      	mov	r0, sl
 8005392:	4659      	mov	r1, fp
 8005394:	f7fb f876 	bl	8000484 <__aeabi_dsub>
 8005398:	e00e      	b.n	80053b8 <__ieee754_rem_pio2+0x1c0>
 800539a:	463b      	mov	r3, r7
 800539c:	4632      	mov	r2, r6
 800539e:	4650      	mov	r0, sl
 80053a0:	4659      	mov	r1, fp
 80053a2:	f7fb f86f 	bl	8000484 <__aeabi_dsub>
 80053a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80053aa:	9305      	str	r3, [sp, #20]
 80053ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	dc02      	bgt.n	80053be <__ieee754_rem_pio2+0x1c6>
 80053b8:	e9c4 0100 	strd	r0, r1, [r4]
 80053bc:	e039      	b.n	8005432 <__ieee754_rem_pio2+0x23a>
 80053be:	a34c      	add	r3, pc, #304	@ (adr r3, 80054f0 <__ieee754_rem_pio2+0x2f8>)
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c8:	f7fa ff2e 	bl	8000228 <__aeabi_dmul>
 80053cc:	4606      	mov	r6, r0
 80053ce:	460f      	mov	r7, r1
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4650      	mov	r0, sl
 80053d6:	4659      	mov	r1, fp
 80053d8:	f7fb f854 	bl	8000484 <__aeabi_dsub>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4680      	mov	r8, r0
 80053e2:	4689      	mov	r9, r1
 80053e4:	4650      	mov	r0, sl
 80053e6:	4659      	mov	r1, fp
 80053e8:	f7fb f84c 	bl	8000484 <__aeabi_dsub>
 80053ec:	4632      	mov	r2, r6
 80053ee:	463b      	mov	r3, r7
 80053f0:	f7fb f848 	bl	8000484 <__aeabi_dsub>
 80053f4:	a340      	add	r3, pc, #256	@ (adr r3, 80054f8 <__ieee754_rem_pio2+0x300>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	4606      	mov	r6, r0
 80053fc:	460f      	mov	r7, r1
 80053fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005402:	f7fa ff11 	bl	8000228 <__aeabi_dmul>
 8005406:	4632      	mov	r2, r6
 8005408:	463b      	mov	r3, r7
 800540a:	f7fb f83b 	bl	8000484 <__aeabi_dsub>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4606      	mov	r6, r0
 8005414:	460f      	mov	r7, r1
 8005416:	4640      	mov	r0, r8
 8005418:	4649      	mov	r1, r9
 800541a:	f7fb f833 	bl	8000484 <__aeabi_dsub>
 800541e:	9a05      	ldr	r2, [sp, #20]
 8005420:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b31      	cmp	r3, #49	@ 0x31
 8005428:	dc20      	bgt.n	800546c <__ieee754_rem_pio2+0x274>
 800542a:	e9c4 0100 	strd	r0, r1, [r4]
 800542e:	46c2      	mov	sl, r8
 8005430:	46cb      	mov	fp, r9
 8005432:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005436:	4650      	mov	r0, sl
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	4659      	mov	r1, fp
 800543e:	f7fb f821 	bl	8000484 <__aeabi_dsub>
 8005442:	463b      	mov	r3, r7
 8005444:	4632      	mov	r2, r6
 8005446:	f7fb f81d 	bl	8000484 <__aeabi_dsub>
 800544a:	9b04      	ldr	r3, [sp, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005452:	f6bf af0e 	bge.w	8005272 <__ieee754_rem_pio2+0x7a>
 8005456:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800545a:	6063      	str	r3, [r4, #4]
 800545c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005460:	f8c4 8000 	str.w	r8, [r4]
 8005464:	60a0      	str	r0, [r4, #8]
 8005466:	60e3      	str	r3, [r4, #12]
 8005468:	426d      	negs	r5, r5
 800546a:	e702      	b.n	8005272 <__ieee754_rem_pio2+0x7a>
 800546c:	a326      	add	r3, pc, #152	@ (adr r3, 8005508 <__ieee754_rem_pio2+0x310>)
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005476:	f7fa fed7 	bl	8000228 <__aeabi_dmul>
 800547a:	4606      	mov	r6, r0
 800547c:	460f      	mov	r7, r1
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4640      	mov	r0, r8
 8005484:	4649      	mov	r1, r9
 8005486:	f7fa fffd 	bl	8000484 <__aeabi_dsub>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4682      	mov	sl, r0
 8005490:	468b      	mov	fp, r1
 8005492:	4640      	mov	r0, r8
 8005494:	4649      	mov	r1, r9
 8005496:	f7fa fff5 	bl	8000484 <__aeabi_dsub>
 800549a:	4632      	mov	r2, r6
 800549c:	463b      	mov	r3, r7
 800549e:	f7fa fff1 	bl	8000484 <__aeabi_dsub>
 80054a2:	a31b      	add	r3, pc, #108	@ (adr r3, 8005510 <__ieee754_rem_pio2+0x318>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054b0:	f7fa feba 	bl	8000228 <__aeabi_dmul>
 80054b4:	4632      	mov	r2, r6
 80054b6:	463b      	mov	r3, r7
 80054b8:	f7fa ffe4 	bl	8000484 <__aeabi_dsub>
 80054bc:	4606      	mov	r6, r0
 80054be:	460f      	mov	r7, r1
 80054c0:	e764      	b.n	800538c <__ieee754_rem_pio2+0x194>
 80054c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005530 <__ieee754_rem_pio2+0x338>)
 80054c4:	4598      	cmp	r8, r3
 80054c6:	d935      	bls.n	8005534 <__ieee754_rem_pio2+0x33c>
 80054c8:	4632      	mov	r2, r6
 80054ca:	463b      	mov	r3, r7
 80054cc:	4630      	mov	r0, r6
 80054ce:	4639      	mov	r1, r7
 80054d0:	f7fa ffd8 	bl	8000484 <__aeabi_dsub>
 80054d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80054d8:	e9c4 0100 	strd	r0, r1, [r4]
 80054dc:	e69e      	b.n	800521c <__ieee754_rem_pio2+0x24>
 80054de:	bf00      	nop
 80054e0:	54400000 	.word	0x54400000
 80054e4:	3ff921fb 	.word	0x3ff921fb
 80054e8:	1a626331 	.word	0x1a626331
 80054ec:	3dd0b461 	.word	0x3dd0b461
 80054f0:	1a600000 	.word	0x1a600000
 80054f4:	3dd0b461 	.word	0x3dd0b461
 80054f8:	2e037073 	.word	0x2e037073
 80054fc:	3ba3198a 	.word	0x3ba3198a
 8005500:	6dc9c883 	.word	0x6dc9c883
 8005504:	3fe45f30 	.word	0x3fe45f30
 8005508:	2e000000 	.word	0x2e000000
 800550c:	3ba3198a 	.word	0x3ba3198a
 8005510:	252049c1 	.word	0x252049c1
 8005514:	397b839a 	.word	0x397b839a
 8005518:	3fe921fb 	.word	0x3fe921fb
 800551c:	4002d97b 	.word	0x4002d97b
 8005520:	3ff921fb 	.word	0x3ff921fb
 8005524:	413921fb 	.word	0x413921fb
 8005528:	3fe00000 	.word	0x3fe00000
 800552c:	08005eb8 	.word	0x08005eb8
 8005530:	7fefffff 	.word	0x7fefffff
 8005534:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005538:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800553c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005540:	4630      	mov	r0, r6
 8005542:	460f      	mov	r7, r1
 8005544:	f7fb f9de 	bl	8000904 <__aeabi_d2iz>
 8005548:	f7fb f8ea 	bl	8000720 <__aeabi_i2d>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4630      	mov	r0, r6
 8005552:	4639      	mov	r1, r7
 8005554:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005558:	f7fa ff94 	bl	8000484 <__aeabi_dsub>
 800555c:	4b22      	ldr	r3, [pc, #136]	@ (80055e8 <__ieee754_rem_pio2+0x3f0>)
 800555e:	2200      	movs	r2, #0
 8005560:	f7fa fe62 	bl	8000228 <__aeabi_dmul>
 8005564:	460f      	mov	r7, r1
 8005566:	4606      	mov	r6, r0
 8005568:	f7fb f9cc 	bl	8000904 <__aeabi_d2iz>
 800556c:	f7fb f8d8 	bl	8000720 <__aeabi_i2d>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4630      	mov	r0, r6
 8005576:	4639      	mov	r1, r7
 8005578:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800557c:	f7fa ff82 	bl	8000484 <__aeabi_dsub>
 8005580:	4b19      	ldr	r3, [pc, #100]	@ (80055e8 <__ieee754_rem_pio2+0x3f0>)
 8005582:	2200      	movs	r2, #0
 8005584:	f7fa fe50 	bl	8000228 <__aeabi_dmul>
 8005588:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800558c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005590:	f04f 0803 	mov.w	r8, #3
 8005594:	2600      	movs	r6, #0
 8005596:	2700      	movs	r7, #0
 8005598:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800559c:	4632      	mov	r2, r6
 800559e:	463b      	mov	r3, r7
 80055a0:	46c2      	mov	sl, r8
 80055a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80055a6:	f7fb f97b 	bl	80008a0 <__aeabi_dcmpeq>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d1f4      	bne.n	8005598 <__ieee754_rem_pio2+0x3a0>
 80055ae:	4b0f      	ldr	r3, [pc, #60]	@ (80055ec <__ieee754_rem_pio2+0x3f4>)
 80055b0:	9301      	str	r3, [sp, #4]
 80055b2:	2302      	movs	r3, #2
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	462a      	mov	r2, r5
 80055b8:	4653      	mov	r3, sl
 80055ba:	4621      	mov	r1, r4
 80055bc:	a806      	add	r0, sp, #24
 80055be:	f000 f81f 	bl	8005600 <__kernel_rem_pio2>
 80055c2:	9b04      	ldr	r3, [sp, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	4605      	mov	r5, r0
 80055c8:	f6bf ae53 	bge.w	8005272 <__ieee754_rem_pio2+0x7a>
 80055cc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80055d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055d4:	e9c4 2300 	strd	r2, r3, [r4]
 80055d8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80055dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80055e4:	e740      	b.n	8005468 <__ieee754_rem_pio2+0x270>
 80055e6:	bf00      	nop
 80055e8:	41700000 	.word	0x41700000
 80055ec:	08005f38 	.word	0x08005f38

080055f0 <fabs>:
 80055f0:	ec51 0b10 	vmov	r0, r1, d0
 80055f4:	4602      	mov	r2, r0
 80055f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80055fa:	ec43 2b10 	vmov	d0, r2, r3
 80055fe:	4770      	bx	lr

08005600 <__kernel_rem_pio2>:
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	ed2d 8b02 	vpush	{d8}
 8005608:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800560c:	f112 0f14 	cmn.w	r2, #20
 8005610:	9306      	str	r3, [sp, #24]
 8005612:	9104      	str	r1, [sp, #16]
 8005614:	4bc2      	ldr	r3, [pc, #776]	@ (8005920 <__kernel_rem_pio2+0x320>)
 8005616:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005618:	9008      	str	r0, [sp, #32]
 800561a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	9b06      	ldr	r3, [sp, #24]
 8005622:	f103 33ff 	add.w	r3, r3, #4294967295
 8005626:	bfa8      	it	ge
 8005628:	1ed4      	subge	r4, r2, #3
 800562a:	9305      	str	r3, [sp, #20]
 800562c:	bfb2      	itee	lt
 800562e:	2400      	movlt	r4, #0
 8005630:	2318      	movge	r3, #24
 8005632:	fb94 f4f3 	sdivge	r4, r4, r3
 8005636:	f06f 0317 	mvn.w	r3, #23
 800563a:	fb04 3303 	mla	r3, r4, r3, r3
 800563e:	eb03 0b02 	add.w	fp, r3, r2
 8005642:	9b00      	ldr	r3, [sp, #0]
 8005644:	9a05      	ldr	r2, [sp, #20]
 8005646:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8005910 <__kernel_rem_pio2+0x310>
 800564a:	eb03 0802 	add.w	r8, r3, r2
 800564e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005650:	1aa7      	subs	r7, r4, r2
 8005652:	ae20      	add	r6, sp, #128	@ 0x80
 8005654:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005658:	2500      	movs	r5, #0
 800565a:	4545      	cmp	r5, r8
 800565c:	dd12      	ble.n	8005684 <__kernel_rem_pio2+0x84>
 800565e:	9b06      	ldr	r3, [sp, #24]
 8005660:	aa20      	add	r2, sp, #128	@ 0x80
 8005662:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005666:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800566a:	2700      	movs	r7, #0
 800566c:	9b00      	ldr	r3, [sp, #0]
 800566e:	429f      	cmp	r7, r3
 8005670:	dc2e      	bgt.n	80056d0 <__kernel_rem_pio2+0xd0>
 8005672:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8005910 <__kernel_rem_pio2+0x310>
 8005676:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800567a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800567e:	46a8      	mov	r8, r5
 8005680:	2600      	movs	r6, #0
 8005682:	e01b      	b.n	80056bc <__kernel_rem_pio2+0xbc>
 8005684:	42ef      	cmn	r7, r5
 8005686:	d407      	bmi.n	8005698 <__kernel_rem_pio2+0x98>
 8005688:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800568c:	f7fb f848 	bl	8000720 <__aeabi_i2d>
 8005690:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005694:	3501      	adds	r5, #1
 8005696:	e7e0      	b.n	800565a <__kernel_rem_pio2+0x5a>
 8005698:	ec51 0b18 	vmov	r0, r1, d8
 800569c:	e7f8      	b.n	8005690 <__kernel_rem_pio2+0x90>
 800569e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80056a2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80056a6:	f7fa fdbf 	bl	8000228 <__aeabi_dmul>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056b2:	f7fa fee9 	bl	8000488 <__adddf3>
 80056b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ba:	3601      	adds	r6, #1
 80056bc:	9b05      	ldr	r3, [sp, #20]
 80056be:	429e      	cmp	r6, r3
 80056c0:	dded      	ble.n	800569e <__kernel_rem_pio2+0x9e>
 80056c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056c6:	3701      	adds	r7, #1
 80056c8:	ecaa 7b02 	vstmia	sl!, {d7}
 80056cc:	3508      	adds	r5, #8
 80056ce:	e7cd      	b.n	800566c <__kernel_rem_pio2+0x6c>
 80056d0:	9b00      	ldr	r3, [sp, #0]
 80056d2:	f8dd 8000 	ldr.w	r8, [sp]
 80056d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80056d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80056de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80056e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80056e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80056ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056ec:	ab98      	add	r3, sp, #608	@ 0x260
 80056ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80056f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80056f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056fa:	ac0c      	add	r4, sp, #48	@ 0x30
 80056fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80056fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005702:	46a1      	mov	r9, r4
 8005704:	46c2      	mov	sl, r8
 8005706:	f1ba 0f00 	cmp.w	sl, #0
 800570a:	dc77      	bgt.n	80057fc <__kernel_rem_pio2+0x1fc>
 800570c:	4658      	mov	r0, fp
 800570e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005712:	f000 fac5 	bl	8005ca0 <scalbn>
 8005716:	ec57 6b10 	vmov	r6, r7, d0
 800571a:	2200      	movs	r2, #0
 800571c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005720:	4630      	mov	r0, r6
 8005722:	4639      	mov	r1, r7
 8005724:	f7fa fd80 	bl	8000228 <__aeabi_dmul>
 8005728:	ec41 0b10 	vmov	d0, r0, r1
 800572c:	f000 fb34 	bl	8005d98 <floor>
 8005730:	4b7c      	ldr	r3, [pc, #496]	@ (8005924 <__kernel_rem_pio2+0x324>)
 8005732:	ec51 0b10 	vmov	r0, r1, d0
 8005736:	2200      	movs	r2, #0
 8005738:	f7fa fd76 	bl	8000228 <__aeabi_dmul>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	f7fa fe9e 	bl	8000484 <__aeabi_dsub>
 8005748:	460f      	mov	r7, r1
 800574a:	4606      	mov	r6, r0
 800574c:	f7fb f8da 	bl	8000904 <__aeabi_d2iz>
 8005750:	9002      	str	r0, [sp, #8]
 8005752:	f7fa ffe5 	bl	8000720 <__aeabi_i2d>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4630      	mov	r0, r6
 800575c:	4639      	mov	r1, r7
 800575e:	f7fa fe91 	bl	8000484 <__aeabi_dsub>
 8005762:	f1bb 0f00 	cmp.w	fp, #0
 8005766:	4606      	mov	r6, r0
 8005768:	460f      	mov	r7, r1
 800576a:	dd6c      	ble.n	8005846 <__kernel_rem_pio2+0x246>
 800576c:	f108 31ff 	add.w	r1, r8, #4294967295
 8005770:	ab0c      	add	r3, sp, #48	@ 0x30
 8005772:	9d02      	ldr	r5, [sp, #8]
 8005774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005778:	f1cb 0018 	rsb	r0, fp, #24
 800577c:	fa43 f200 	asr.w	r2, r3, r0
 8005780:	4415      	add	r5, r2
 8005782:	4082      	lsls	r2, r0
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	aa0c      	add	r2, sp, #48	@ 0x30
 8005788:	9502      	str	r5, [sp, #8]
 800578a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800578e:	f1cb 0217 	rsb	r2, fp, #23
 8005792:	fa43 f902 	asr.w	r9, r3, r2
 8005796:	f1b9 0f00 	cmp.w	r9, #0
 800579a:	dd64      	ble.n	8005866 <__kernel_rem_pio2+0x266>
 800579c:	9b02      	ldr	r3, [sp, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	3301      	adds	r3, #1
 80057a2:	9302      	str	r3, [sp, #8]
 80057a4:	4615      	mov	r5, r2
 80057a6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80057aa:	4590      	cmp	r8, r2
 80057ac:	f300 80a1 	bgt.w	80058f2 <__kernel_rem_pio2+0x2f2>
 80057b0:	f1bb 0f00 	cmp.w	fp, #0
 80057b4:	dd07      	ble.n	80057c6 <__kernel_rem_pio2+0x1c6>
 80057b6:	f1bb 0f01 	cmp.w	fp, #1
 80057ba:	f000 80c1 	beq.w	8005940 <__kernel_rem_pio2+0x340>
 80057be:	f1bb 0f02 	cmp.w	fp, #2
 80057c2:	f000 80c8 	beq.w	8005956 <__kernel_rem_pio2+0x356>
 80057c6:	f1b9 0f02 	cmp.w	r9, #2
 80057ca:	d14c      	bne.n	8005866 <__kernel_rem_pio2+0x266>
 80057cc:	4632      	mov	r2, r6
 80057ce:	463b      	mov	r3, r7
 80057d0:	4955      	ldr	r1, [pc, #340]	@ (8005928 <__kernel_rem_pio2+0x328>)
 80057d2:	2000      	movs	r0, #0
 80057d4:	f7fa fe56 	bl	8000484 <__aeabi_dsub>
 80057d8:	4606      	mov	r6, r0
 80057da:	460f      	mov	r7, r1
 80057dc:	2d00      	cmp	r5, #0
 80057de:	d042      	beq.n	8005866 <__kernel_rem_pio2+0x266>
 80057e0:	4658      	mov	r0, fp
 80057e2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8005918 <__kernel_rem_pio2+0x318>
 80057e6:	f000 fa5b 	bl	8005ca0 <scalbn>
 80057ea:	4630      	mov	r0, r6
 80057ec:	4639      	mov	r1, r7
 80057ee:	ec53 2b10 	vmov	r2, r3, d0
 80057f2:	f7fa fe47 	bl	8000484 <__aeabi_dsub>
 80057f6:	4606      	mov	r6, r0
 80057f8:	460f      	mov	r7, r1
 80057fa:	e034      	b.n	8005866 <__kernel_rem_pio2+0x266>
 80057fc:	4b4b      	ldr	r3, [pc, #300]	@ (800592c <__kernel_rem_pio2+0x32c>)
 80057fe:	2200      	movs	r2, #0
 8005800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005804:	f7fa fd10 	bl	8000228 <__aeabi_dmul>
 8005808:	f7fb f87c 	bl	8000904 <__aeabi_d2iz>
 800580c:	f7fa ff88 	bl	8000720 <__aeabi_i2d>
 8005810:	4b47      	ldr	r3, [pc, #284]	@ (8005930 <__kernel_rem_pio2+0x330>)
 8005812:	2200      	movs	r2, #0
 8005814:	4606      	mov	r6, r0
 8005816:	460f      	mov	r7, r1
 8005818:	f7fa fd06 	bl	8000228 <__aeabi_dmul>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005824:	f7fa fe2e 	bl	8000484 <__aeabi_dsub>
 8005828:	f7fb f86c 	bl	8000904 <__aeabi_d2iz>
 800582c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005830:	f849 0b04 	str.w	r0, [r9], #4
 8005834:	4639      	mov	r1, r7
 8005836:	4630      	mov	r0, r6
 8005838:	f7fa fe26 	bl	8000488 <__adddf3>
 800583c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005844:	e75f      	b.n	8005706 <__kernel_rem_pio2+0x106>
 8005846:	d107      	bne.n	8005858 <__kernel_rem_pio2+0x258>
 8005848:	f108 33ff 	add.w	r3, r8, #4294967295
 800584c:	aa0c      	add	r2, sp, #48	@ 0x30
 800584e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005852:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005856:	e79e      	b.n	8005796 <__kernel_rem_pio2+0x196>
 8005858:	4b36      	ldr	r3, [pc, #216]	@ (8005934 <__kernel_rem_pio2+0x334>)
 800585a:	2200      	movs	r2, #0
 800585c:	f7fb f83e 	bl	80008dc <__aeabi_dcmpge>
 8005860:	2800      	cmp	r0, #0
 8005862:	d143      	bne.n	80058ec <__kernel_rem_pio2+0x2ec>
 8005864:	4681      	mov	r9, r0
 8005866:	2200      	movs	r2, #0
 8005868:	2300      	movs	r3, #0
 800586a:	4630      	mov	r0, r6
 800586c:	4639      	mov	r1, r7
 800586e:	f7fb f817 	bl	80008a0 <__aeabi_dcmpeq>
 8005872:	2800      	cmp	r0, #0
 8005874:	f000 80c1 	beq.w	80059fa <__kernel_rem_pio2+0x3fa>
 8005878:	f108 33ff 	add.w	r3, r8, #4294967295
 800587c:	2200      	movs	r2, #0
 800587e:	9900      	ldr	r1, [sp, #0]
 8005880:	428b      	cmp	r3, r1
 8005882:	da70      	bge.n	8005966 <__kernel_rem_pio2+0x366>
 8005884:	2a00      	cmp	r2, #0
 8005886:	f000 808b 	beq.w	80059a0 <__kernel_rem_pio2+0x3a0>
 800588a:	f108 38ff 	add.w	r8, r8, #4294967295
 800588e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005890:	f1ab 0b18 	sub.w	fp, fp, #24
 8005894:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f6      	beq.n	800588a <__kernel_rem_pio2+0x28a>
 800589c:	4658      	mov	r0, fp
 800589e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8005918 <__kernel_rem_pio2+0x318>
 80058a2:	f000 f9fd 	bl	8005ca0 <scalbn>
 80058a6:	f108 0301 	add.w	r3, r8, #1
 80058aa:	00da      	lsls	r2, r3, #3
 80058ac:	9205      	str	r2, [sp, #20]
 80058ae:	ec55 4b10 	vmov	r4, r5, d0
 80058b2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80058b4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800592c <__kernel_rem_pio2+0x32c>
 80058b8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80058bc:	4646      	mov	r6, r8
 80058be:	f04f 0a00 	mov.w	sl, #0
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	f280 80d1 	bge.w	8005a6a <__kernel_rem_pio2+0x46a>
 80058c8:	4644      	mov	r4, r8
 80058ca:	2c00      	cmp	r4, #0
 80058cc:	f2c0 80ff 	blt.w	8005ace <__kernel_rem_pio2+0x4ce>
 80058d0:	4b19      	ldr	r3, [pc, #100]	@ (8005938 <__kernel_rem_pio2+0x338>)
 80058d2:	461f      	mov	r7, r3
 80058d4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80058d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058da:	9306      	str	r3, [sp, #24]
 80058dc:	f04f 0a00 	mov.w	sl, #0
 80058e0:	f04f 0b00 	mov.w	fp, #0
 80058e4:	2600      	movs	r6, #0
 80058e6:	eba8 0504 	sub.w	r5, r8, r4
 80058ea:	e0e4      	b.n	8005ab6 <__kernel_rem_pio2+0x4b6>
 80058ec:	f04f 0902 	mov.w	r9, #2
 80058f0:	e754      	b.n	800579c <__kernel_rem_pio2+0x19c>
 80058f2:	f854 3b04 	ldr.w	r3, [r4], #4
 80058f6:	bb0d      	cbnz	r5, 800593c <__kernel_rem_pio2+0x33c>
 80058f8:	b123      	cbz	r3, 8005904 <__kernel_rem_pio2+0x304>
 80058fa:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80058fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8005902:	2301      	movs	r3, #1
 8005904:	3201      	adds	r2, #1
 8005906:	461d      	mov	r5, r3
 8005908:	e74f      	b.n	80057aa <__kernel_rem_pio2+0x1aa>
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w
	...
 800591c:	3ff00000 	.word	0x3ff00000
 8005920:	08006080 	.word	0x08006080
 8005924:	40200000 	.word	0x40200000
 8005928:	3ff00000 	.word	0x3ff00000
 800592c:	3e700000 	.word	0x3e700000
 8005930:	41700000 	.word	0x41700000
 8005934:	3fe00000 	.word	0x3fe00000
 8005938:	08006040 	.word	0x08006040
 800593c:	1acb      	subs	r3, r1, r3
 800593e:	e7de      	b.n	80058fe <__kernel_rem_pio2+0x2fe>
 8005940:	f108 32ff 	add.w	r2, r8, #4294967295
 8005944:	ab0c      	add	r3, sp, #48	@ 0x30
 8005946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800594e:	a90c      	add	r1, sp, #48	@ 0x30
 8005950:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005954:	e737      	b.n	80057c6 <__kernel_rem_pio2+0x1c6>
 8005956:	f108 32ff 	add.w	r2, r8, #4294967295
 800595a:	ab0c      	add	r3, sp, #48	@ 0x30
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005964:	e7f3      	b.n	800594e <__kernel_rem_pio2+0x34e>
 8005966:	a90c      	add	r1, sp, #48	@ 0x30
 8005968:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800596c:	3b01      	subs	r3, #1
 800596e:	430a      	orrs	r2, r1
 8005970:	e785      	b.n	800587e <__kernel_rem_pio2+0x27e>
 8005972:	3401      	adds	r4, #1
 8005974:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005978:	2a00      	cmp	r2, #0
 800597a:	d0fa      	beq.n	8005972 <__kernel_rem_pio2+0x372>
 800597c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800597e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005982:	eb0d 0503 	add.w	r5, sp, r3
 8005986:	9b06      	ldr	r3, [sp, #24]
 8005988:	aa20      	add	r2, sp, #128	@ 0x80
 800598a:	4443      	add	r3, r8
 800598c:	f108 0701 	add.w	r7, r8, #1
 8005990:	3d98      	subs	r5, #152	@ 0x98
 8005992:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005996:	4444      	add	r4, r8
 8005998:	42bc      	cmp	r4, r7
 800599a:	da04      	bge.n	80059a6 <__kernel_rem_pio2+0x3a6>
 800599c:	46a0      	mov	r8, r4
 800599e:	e6a2      	b.n	80056e6 <__kernel_rem_pio2+0xe6>
 80059a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059a2:	2401      	movs	r4, #1
 80059a4:	e7e6      	b.n	8005974 <__kernel_rem_pio2+0x374>
 80059a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059a8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80059ac:	f7fa feb8 	bl	8000720 <__aeabi_i2d>
 80059b0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8005c70 <__kernel_rem_pio2+0x670>
 80059b4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80059b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059c0:	46b2      	mov	sl, r6
 80059c2:	f04f 0800 	mov.w	r8, #0
 80059c6:	9b05      	ldr	r3, [sp, #20]
 80059c8:	4598      	cmp	r8, r3
 80059ca:	dd05      	ble.n	80059d8 <__kernel_rem_pio2+0x3d8>
 80059cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059d0:	3701      	adds	r7, #1
 80059d2:	eca5 7b02 	vstmia	r5!, {d7}
 80059d6:	e7df      	b.n	8005998 <__kernel_rem_pio2+0x398>
 80059d8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80059dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80059e0:	f7fa fc22 	bl	8000228 <__aeabi_dmul>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ec:	f7fa fd4c 	bl	8000488 <__adddf3>
 80059f0:	f108 0801 	add.w	r8, r8, #1
 80059f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059f8:	e7e5      	b.n	80059c6 <__kernel_rem_pio2+0x3c6>
 80059fa:	f1cb 0000 	rsb	r0, fp, #0
 80059fe:	ec47 6b10 	vmov	d0, r6, r7
 8005a02:	f000 f94d 	bl	8005ca0 <scalbn>
 8005a06:	ec55 4b10 	vmov	r4, r5, d0
 8005a0a:	4b9b      	ldr	r3, [pc, #620]	@ (8005c78 <__kernel_rem_pio2+0x678>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4629      	mov	r1, r5
 8005a12:	f7fa ff63 	bl	80008dc <__aeabi_dcmpge>
 8005a16:	b300      	cbz	r0, 8005a5a <__kernel_rem_pio2+0x45a>
 8005a18:	4b98      	ldr	r3, [pc, #608]	@ (8005c7c <__kernel_rem_pio2+0x67c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	4629      	mov	r1, r5
 8005a20:	f7fa fc02 	bl	8000228 <__aeabi_dmul>
 8005a24:	f7fa ff6e 	bl	8000904 <__aeabi_d2iz>
 8005a28:	4606      	mov	r6, r0
 8005a2a:	f7fa fe79 	bl	8000720 <__aeabi_i2d>
 8005a2e:	4b92      	ldr	r3, [pc, #584]	@ (8005c78 <__kernel_rem_pio2+0x678>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	f7fa fbf9 	bl	8000228 <__aeabi_dmul>
 8005a36:	460b      	mov	r3, r1
 8005a38:	4602      	mov	r2, r0
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7fa fd21 	bl	8000484 <__aeabi_dsub>
 8005a42:	f7fa ff5f 	bl	8000904 <__aeabi_d2iz>
 8005a46:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a48:	f10b 0b18 	add.w	fp, fp, #24
 8005a4c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005a50:	f108 0801 	add.w	r8, r8, #1
 8005a54:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005a58:	e720      	b.n	800589c <__kernel_rem_pio2+0x29c>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	f7fa ff51 	bl	8000904 <__aeabi_d2iz>
 8005a62:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005a68:	e718      	b.n	800589c <__kernel_rem_pio2+0x29c>
 8005a6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a70:	f7fa fe56 	bl	8000720 <__aeabi_i2d>
 8005a74:	4622      	mov	r2, r4
 8005a76:	462b      	mov	r3, r5
 8005a78:	f7fa fbd6 	bl	8000228 <__aeabi_dmul>
 8005a7c:	4652      	mov	r2, sl
 8005a7e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005a82:	465b      	mov	r3, fp
 8005a84:	4620      	mov	r0, r4
 8005a86:	4629      	mov	r1, r5
 8005a88:	f7fa fbce 	bl	8000228 <__aeabi_dmul>
 8005a8c:	3e01      	subs	r6, #1
 8005a8e:	4604      	mov	r4, r0
 8005a90:	460d      	mov	r5, r1
 8005a92:	e716      	b.n	80058c2 <__kernel_rem_pio2+0x2c2>
 8005a94:	9906      	ldr	r1, [sp, #24]
 8005a96:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005a9a:	9106      	str	r1, [sp, #24]
 8005a9c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005aa0:	f7fa fbc2 	bl	8000228 <__aeabi_dmul>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4650      	mov	r0, sl
 8005aaa:	4659      	mov	r1, fp
 8005aac:	f7fa fcec 	bl	8000488 <__adddf3>
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	4682      	mov	sl, r0
 8005ab4:	468b      	mov	fp, r1
 8005ab6:	9b00      	ldr	r3, [sp, #0]
 8005ab8:	429e      	cmp	r6, r3
 8005aba:	dc01      	bgt.n	8005ac0 <__kernel_rem_pio2+0x4c0>
 8005abc:	42ae      	cmp	r6, r5
 8005abe:	dde9      	ble.n	8005a94 <__kernel_rem_pio2+0x494>
 8005ac0:	ab48      	add	r3, sp, #288	@ 0x120
 8005ac2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005ac6:	e9c5 ab00 	strd	sl, fp, [r5]
 8005aca:	3c01      	subs	r4, #1
 8005acc:	e6fd      	b.n	80058ca <__kernel_rem_pio2+0x2ca>
 8005ace:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	dc0b      	bgt.n	8005aec <__kernel_rem_pio2+0x4ec>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dc35      	bgt.n	8005b44 <__kernel_rem_pio2+0x544>
 8005ad8:	d059      	beq.n	8005b8e <__kernel_rem_pio2+0x58e>
 8005ada:	9b02      	ldr	r3, [sp, #8]
 8005adc:	f003 0007 	and.w	r0, r3, #7
 8005ae0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005ae4:	ecbd 8b02 	vpop	{d8}
 8005ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d1f3      	bne.n	8005ada <__kernel_rem_pio2+0x4da>
 8005af2:	9b05      	ldr	r3, [sp, #20]
 8005af4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005af8:	eb0d 0403 	add.w	r4, sp, r3
 8005afc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005b00:	4625      	mov	r5, r4
 8005b02:	46c2      	mov	sl, r8
 8005b04:	f1ba 0f00 	cmp.w	sl, #0
 8005b08:	dc69      	bgt.n	8005bde <__kernel_rem_pio2+0x5de>
 8005b0a:	4645      	mov	r5, r8
 8005b0c:	2d01      	cmp	r5, #1
 8005b0e:	f300 8087 	bgt.w	8005c20 <__kernel_rem_pio2+0x620>
 8005b12:	9c05      	ldr	r4, [sp, #20]
 8005b14:	ab48      	add	r3, sp, #288	@ 0x120
 8005b16:	441c      	add	r4, r3
 8005b18:	2000      	movs	r0, #0
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	f1b8 0f01 	cmp.w	r8, #1
 8005b20:	f300 809c 	bgt.w	8005c5c <__kernel_rem_pio2+0x65c>
 8005b24:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8005b28:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8005b2c:	f1b9 0f00 	cmp.w	r9, #0
 8005b30:	f040 80a6 	bne.w	8005c80 <__kernel_rem_pio2+0x680>
 8005b34:	9b04      	ldr	r3, [sp, #16]
 8005b36:	e9c3 5600 	strd	r5, r6, [r3]
 8005b3a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005b3e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005b42:	e7ca      	b.n	8005ada <__kernel_rem_pio2+0x4da>
 8005b44:	9d05      	ldr	r5, [sp, #20]
 8005b46:	ab48      	add	r3, sp, #288	@ 0x120
 8005b48:	441d      	add	r5, r3
 8005b4a:	4644      	mov	r4, r8
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	2100      	movs	r1, #0
 8005b50:	2c00      	cmp	r4, #0
 8005b52:	da35      	bge.n	8005bc0 <__kernel_rem_pio2+0x5c0>
 8005b54:	f1b9 0f00 	cmp.w	r9, #0
 8005b58:	d038      	beq.n	8005bcc <__kernel_rem_pio2+0x5cc>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b60:	9c04      	ldr	r4, [sp, #16]
 8005b62:	e9c4 2300 	strd	r2, r3, [r4]
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005b6e:	f7fa fc89 	bl	8000484 <__aeabi_dsub>
 8005b72:	ad4a      	add	r5, sp, #296	@ 0x128
 8005b74:	2401      	movs	r4, #1
 8005b76:	45a0      	cmp	r8, r4
 8005b78:	da2b      	bge.n	8005bd2 <__kernel_rem_pio2+0x5d2>
 8005b7a:	f1b9 0f00 	cmp.w	r9, #0
 8005b7e:	d002      	beq.n	8005b86 <__kernel_rem_pio2+0x586>
 8005b80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b84:	4619      	mov	r1, r3
 8005b86:	9b04      	ldr	r3, [sp, #16]
 8005b88:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005b8c:	e7a5      	b.n	8005ada <__kernel_rem_pio2+0x4da>
 8005b8e:	9c05      	ldr	r4, [sp, #20]
 8005b90:	ab48      	add	r3, sp, #288	@ 0x120
 8005b92:	441c      	add	r4, r3
 8005b94:	2000      	movs	r0, #0
 8005b96:	2100      	movs	r1, #0
 8005b98:	f1b8 0f00 	cmp.w	r8, #0
 8005b9c:	da09      	bge.n	8005bb2 <__kernel_rem_pio2+0x5b2>
 8005b9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ba2:	d002      	beq.n	8005baa <__kernel_rem_pio2+0x5aa>
 8005ba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ba8:	4619      	mov	r1, r3
 8005baa:	9b04      	ldr	r3, [sp, #16]
 8005bac:	e9c3 0100 	strd	r0, r1, [r3]
 8005bb0:	e793      	b.n	8005ada <__kernel_rem_pio2+0x4da>
 8005bb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005bb6:	f7fa fc67 	bl	8000488 <__adddf3>
 8005bba:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bbe:	e7eb      	b.n	8005b98 <__kernel_rem_pio2+0x598>
 8005bc0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005bc4:	f7fa fc60 	bl	8000488 <__adddf3>
 8005bc8:	3c01      	subs	r4, #1
 8005bca:	e7c1      	b.n	8005b50 <__kernel_rem_pio2+0x550>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	e7c6      	b.n	8005b60 <__kernel_rem_pio2+0x560>
 8005bd2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005bd6:	f7fa fc57 	bl	8000488 <__adddf3>
 8005bda:	3401      	adds	r4, #1
 8005bdc:	e7cb      	b.n	8005b76 <__kernel_rem_pio2+0x576>
 8005bde:	ed35 7b02 	vldmdb	r5!, {d7}
 8005be2:	ed8d 7b00 	vstr	d7, [sp]
 8005be6:	ed95 7b02 	vldr	d7, [r5, #8]
 8005bea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bee:	ec53 2b17 	vmov	r2, r3, d7
 8005bf2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005bf6:	f7fa fc47 	bl	8000488 <__adddf3>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c06:	f7fa fc3d 	bl	8000484 <__aeabi_dsub>
 8005c0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c0e:	f7fa fc3b 	bl	8000488 <__adddf3>
 8005c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c16:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005c1a:	e9c5 6700 	strd	r6, r7, [r5]
 8005c1e:	e771      	b.n	8005b04 <__kernel_rem_pio2+0x504>
 8005c20:	ed34 7b02 	vldmdb	r4!, {d7}
 8005c24:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005c28:	ec51 0b17 	vmov	r0, r1, d7
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	465b      	mov	r3, fp
 8005c30:	ed8d 7b00 	vstr	d7, [sp]
 8005c34:	f7fa fc28 	bl	8000488 <__adddf3>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4606      	mov	r6, r0
 8005c3e:	460f      	mov	r7, r1
 8005c40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c44:	f7fa fc1e 	bl	8000484 <__aeabi_dsub>
 8005c48:	4652      	mov	r2, sl
 8005c4a:	465b      	mov	r3, fp
 8005c4c:	f7fa fc1c 	bl	8000488 <__adddf3>
 8005c50:	3d01      	subs	r5, #1
 8005c52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c56:	e9c4 6700 	strd	r6, r7, [r4]
 8005c5a:	e757      	b.n	8005b0c <__kernel_rem_pio2+0x50c>
 8005c5c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c60:	f7fa fc12 	bl	8000488 <__adddf3>
 8005c64:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c68:	e758      	b.n	8005b1c <__kernel_rem_pio2+0x51c>
 8005c6a:	bf00      	nop
 8005c6c:	f3af 8000 	nop.w
	...
 8005c78:	41700000 	.word	0x41700000
 8005c7c:	3e700000 	.word	0x3e700000
 8005c80:	9b04      	ldr	r3, [sp, #16]
 8005c82:	9a04      	ldr	r2, [sp, #16]
 8005c84:	601d      	str	r5, [r3, #0]
 8005c86:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8005c8a:	605c      	str	r4, [r3, #4]
 8005c8c:	609f      	str	r7, [r3, #8]
 8005c8e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8005c92:	60d3      	str	r3, [r2, #12]
 8005c94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c98:	6110      	str	r0, [r2, #16]
 8005c9a:	6153      	str	r3, [r2, #20]
 8005c9c:	e71d      	b.n	8005ada <__kernel_rem_pio2+0x4da>
 8005c9e:	bf00      	nop

08005ca0 <scalbn>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	ec55 4b10 	vmov	r4, r5, d0
 8005ca6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005caa:	4606      	mov	r6, r0
 8005cac:	462b      	mov	r3, r5
 8005cae:	b991      	cbnz	r1, 8005cd6 <scalbn+0x36>
 8005cb0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005cb4:	4323      	orrs	r3, r4
 8005cb6:	d03b      	beq.n	8005d30 <scalbn+0x90>
 8005cb8:	4b33      	ldr	r3, [pc, #204]	@ (8005d88 <scalbn+0xe8>)
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f7fa fab2 	bl	8000228 <__aeabi_dmul>
 8005cc4:	4b31      	ldr	r3, [pc, #196]	@ (8005d8c <scalbn+0xec>)
 8005cc6:	429e      	cmp	r6, r3
 8005cc8:	4604      	mov	r4, r0
 8005cca:	460d      	mov	r5, r1
 8005ccc:	da0f      	bge.n	8005cee <scalbn+0x4e>
 8005cce:	a326      	add	r3, pc, #152	@ (adr r3, 8005d68 <scalbn+0xc8>)
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	e01e      	b.n	8005d14 <scalbn+0x74>
 8005cd6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005cda:	4291      	cmp	r1, r2
 8005cdc:	d10b      	bne.n	8005cf6 <scalbn+0x56>
 8005cde:	4622      	mov	r2, r4
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	f7fa fbd0 	bl	8000488 <__adddf3>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	460d      	mov	r5, r1
 8005cec:	e020      	b.n	8005d30 <scalbn+0x90>
 8005cee:	460b      	mov	r3, r1
 8005cf0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005cf4:	3936      	subs	r1, #54	@ 0x36
 8005cf6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005cfa:	4296      	cmp	r6, r2
 8005cfc:	dd0d      	ble.n	8005d1a <scalbn+0x7a>
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	a11b      	add	r1, pc, #108	@ (adr r1, 8005d70 <scalbn+0xd0>)
 8005d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d06:	da02      	bge.n	8005d0e <scalbn+0x6e>
 8005d08:	a11b      	add	r1, pc, #108	@ (adr r1, 8005d78 <scalbn+0xd8>)
 8005d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d0e:	a318      	add	r3, pc, #96	@ (adr r3, 8005d70 <scalbn+0xd0>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fa88 	bl	8000228 <__aeabi_dmul>
 8005d18:	e7e6      	b.n	8005ce8 <scalbn+0x48>
 8005d1a:	1872      	adds	r2, r6, r1
 8005d1c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005d20:	428a      	cmp	r2, r1
 8005d22:	dcec      	bgt.n	8005cfe <scalbn+0x5e>
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	dd06      	ble.n	8005d36 <scalbn+0x96>
 8005d28:	f36f 531e 	bfc	r3, #20, #11
 8005d2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d30:	ec45 4b10 	vmov	d0, r4, r5
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005d3a:	da08      	bge.n	8005d4e <scalbn+0xae>
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	a10a      	add	r1, pc, #40	@ (adr r1, 8005d68 <scalbn+0xc8>)
 8005d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d44:	dac3      	bge.n	8005cce <scalbn+0x2e>
 8005d46:	a10e      	add	r1, pc, #56	@ (adr r1, 8005d80 <scalbn+0xe0>)
 8005d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d4c:	e7bf      	b.n	8005cce <scalbn+0x2e>
 8005d4e:	3236      	adds	r2, #54	@ 0x36
 8005d50:	f36f 531e 	bfc	r3, #20, #11
 8005d54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d58:	4620      	mov	r0, r4
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <scalbn+0xf0>)
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	2200      	movs	r2, #0
 8005d60:	e7d8      	b.n	8005d14 <scalbn+0x74>
 8005d62:	bf00      	nop
 8005d64:	f3af 8000 	nop.w
 8005d68:	c2f8f359 	.word	0xc2f8f359
 8005d6c:	01a56e1f 	.word	0x01a56e1f
 8005d70:	8800759c 	.word	0x8800759c
 8005d74:	7e37e43c 	.word	0x7e37e43c
 8005d78:	8800759c 	.word	0x8800759c
 8005d7c:	fe37e43c 	.word	0xfe37e43c
 8005d80:	c2f8f359 	.word	0xc2f8f359
 8005d84:	81a56e1f 	.word	0x81a56e1f
 8005d88:	43500000 	.word	0x43500000
 8005d8c:	ffff3cb0 	.word	0xffff3cb0
 8005d90:	3c900000 	.word	0x3c900000
 8005d94:	00000000 	.word	0x00000000

08005d98 <floor>:
 8005d98:	ec51 0b10 	vmov	r0, r1, d0
 8005d9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005da8:	2e13      	cmp	r6, #19
 8005daa:	460c      	mov	r4, r1
 8005dac:	4605      	mov	r5, r0
 8005dae:	4680      	mov	r8, r0
 8005db0:	dc34      	bgt.n	8005e1c <floor+0x84>
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	da17      	bge.n	8005de6 <floor+0x4e>
 8005db6:	a332      	add	r3, pc, #200	@ (adr r3, 8005e80 <floor+0xe8>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fb64 	bl	8000488 <__adddf3>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f7fa fd94 	bl	80008f0 <__aeabi_dcmpgt>
 8005dc8:	b150      	cbz	r0, 8005de0 <floor+0x48>
 8005dca:	2c00      	cmp	r4, #0
 8005dcc:	da55      	bge.n	8005e7a <floor+0xe2>
 8005dce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005dd2:	432c      	orrs	r4, r5
 8005dd4:	2500      	movs	r5, #0
 8005dd6:	42ac      	cmp	r4, r5
 8005dd8:	4c2b      	ldr	r4, [pc, #172]	@ (8005e88 <floor+0xf0>)
 8005dda:	bf08      	it	eq
 8005ddc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005de0:	4621      	mov	r1, r4
 8005de2:	4628      	mov	r0, r5
 8005de4:	e023      	b.n	8005e2e <floor+0x96>
 8005de6:	4f29      	ldr	r7, [pc, #164]	@ (8005e8c <floor+0xf4>)
 8005de8:	4137      	asrs	r7, r6
 8005dea:	ea01 0307 	and.w	r3, r1, r7
 8005dee:	4303      	orrs	r3, r0
 8005df0:	d01d      	beq.n	8005e2e <floor+0x96>
 8005df2:	a323      	add	r3, pc, #140	@ (adr r3, 8005e80 <floor+0xe8>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa fb46 	bl	8000488 <__adddf3>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f7fa fd76 	bl	80008f0 <__aeabi_dcmpgt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d0eb      	beq.n	8005de0 <floor+0x48>
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	bfbe      	ittt	lt
 8005e0c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005e10:	4133      	asrlt	r3, r6
 8005e12:	18e4      	addlt	r4, r4, r3
 8005e14:	ea24 0407 	bic.w	r4, r4, r7
 8005e18:	2500      	movs	r5, #0
 8005e1a:	e7e1      	b.n	8005de0 <floor+0x48>
 8005e1c:	2e33      	cmp	r6, #51	@ 0x33
 8005e1e:	dd0a      	ble.n	8005e36 <floor+0x9e>
 8005e20:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005e24:	d103      	bne.n	8005e2e <floor+0x96>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	f7fa fb2d 	bl	8000488 <__adddf3>
 8005e2e:	ec41 0b10 	vmov	d0, r0, r1
 8005e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e36:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005e3a:	f04f 37ff 	mov.w	r7, #4294967295
 8005e3e:	40df      	lsrs	r7, r3
 8005e40:	4207      	tst	r7, r0
 8005e42:	d0f4      	beq.n	8005e2e <floor+0x96>
 8005e44:	a30e      	add	r3, pc, #56	@ (adr r3, 8005e80 <floor+0xe8>)
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f7fa fb1d 	bl	8000488 <__adddf3>
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2300      	movs	r3, #0
 8005e52:	f7fa fd4d 	bl	80008f0 <__aeabi_dcmpgt>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d0c2      	beq.n	8005de0 <floor+0x48>
 8005e5a:	2c00      	cmp	r4, #0
 8005e5c:	da0a      	bge.n	8005e74 <floor+0xdc>
 8005e5e:	2e14      	cmp	r6, #20
 8005e60:	d101      	bne.n	8005e66 <floor+0xce>
 8005e62:	3401      	adds	r4, #1
 8005e64:	e006      	b.n	8005e74 <floor+0xdc>
 8005e66:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	40b3      	lsls	r3, r6
 8005e6e:	441d      	add	r5, r3
 8005e70:	4545      	cmp	r5, r8
 8005e72:	d3f6      	bcc.n	8005e62 <floor+0xca>
 8005e74:	ea25 0507 	bic.w	r5, r5, r7
 8005e78:	e7b2      	b.n	8005de0 <floor+0x48>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	462c      	mov	r4, r5
 8005e7e:	e7af      	b.n	8005de0 <floor+0x48>
 8005e80:	8800759c 	.word	0x8800759c
 8005e84:	7e37e43c 	.word	0x7e37e43c
 8005e88:	bff00000 	.word	0xbff00000
 8005e8c:	000fffff 	.word	0x000fffff

08005e90 <_init>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr

08005e9c <_fini>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr
