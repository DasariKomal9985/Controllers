
G474RE_Sine_Ver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004348  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004520  08004520  00005520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004708  08004708  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004708  08004708  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004708  08004708  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004708  08004708  00005708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800470c  0800470c  0000570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004710  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  0800471c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  0800471c  00006194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cad9  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d93  00000000  00000000  00012b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000148a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3e  00000000  00000000  00015600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d44  00000000  00000000  0001603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df62  00000000  00000000  0003bd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f90d4  00000000  00000000  00049ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142db8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bcc  00000000  00000000  00142dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001469c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004508 	.word	0x08004508

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004508 	.word	0x08004508

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr
 8000b54:	0000      	movs	r0, r0
	...

08000b58 <SineTable_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SineTable_Init(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	e037      	b.n	8000bd4 <SineTable_Init+0x7c>
		double theta = (2 * M_PI * i) / SAMPLES;
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f7ff fca9 	bl	80004bc <__aeabi_i2d>
 8000b6a:	a324      	add	r3, pc, #144	@ (adr r3, 8000bfc <SineTable_Init+0xa4>)
 8000b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b70:	f7ff fd0e 	bl	8000590 <__aeabi_dmul>
 8000b74:	4602      	mov	r2, r0
 8000b76:	460b      	mov	r3, r1
 8000b78:	4610      	mov	r0, r2
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 0200 	mov.w	r2, #0
 8000b80:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <SineTable_Init+0x98>)
 8000b82:	f7ff fe2f 	bl	80007e4 <__aeabi_ddiv>
 8000b86:	4602      	mov	r2, r0
 8000b88:	460b      	mov	r3, r1
 8000b8a:	e9c7 2300 	strd	r2, r3, [r7]
		sine_table[i] = (uint16_t) ((sin(theta) + 1.0) * (DAC_MAX / 2));
 8000b8e:	ed97 0b00 	vldr	d0, [r7]
 8000b92:	f002 fc95 	bl	80034c0 <sin>
 8000b96:	ec51 0b10 	vmov	r0, r1, d0
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <SineTable_Init+0x9c>)
 8000ba0:	f7ff fb40 	bl	8000224 <__adddf3>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4610      	mov	r0, r2
 8000baa:	4619      	mov	r1, r3
 8000bac:	a30e      	add	r3, pc, #56	@ (adr r3, 8000be8 <SineTable_Init+0x90>)
 8000bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb2:	f7ff fced 	bl	8000590 <__aeabi_dmul>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f7ff ffa9 	bl	8000b14 <__aeabi_d2uiz>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b299      	uxth	r1, r3
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf8 <SineTable_Init+0xa0>)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SAMPLES; i++) {
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b63      	cmp	r3, #99	@ 0x63
 8000bd8:	ddc4      	ble.n	8000b64 <SineTable_Init+0xc>
	}
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	f3af 8000 	nop.w
 8000be8:	00000000 	.word	0x00000000
 8000bec:	409ffc00 	.word	0x409ffc00
 8000bf0:	40590000 	.word	0x40590000
 8000bf4:	3ff00000 	.word	0x3ff00000
 8000bf8:	20000028 	.word	0x20000028
 8000bfc:	54442d18 	.word	0x54442d18
 8000c00:	401921fb 	.word	0x401921fb

08000c04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c14:	d11a      	bne.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x48>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
				sine_table[idx]);
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c2a:	f000 fca1 	bl	8001570 <HAL_DAC_SetValue>
		idx++;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3301      	adds	r3, #1
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c3a:	801a      	strh	r2, [r3, #0]
		if (idx >= SAMPLES)
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	2b63      	cmp	r3, #99	@ 0x63
 8000c44:	d902      	bls.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x48>
			idx = 0;
 8000c46:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200000f0 	.word	0x200000f0
 8000c58:	20000028 	.word	0x20000028
 8000c5c:	200000f4 	.word	0x200000f4

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c64:	f000 fa75 	bl	8001152 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c68:	f000 f818 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6c:	f000 f90e 	bl	8000e8c <MX_GPIO_Init>
  MX_DAC2_Init();
 8000c70:	f000 f860 	bl	8000d34 <MX_DAC2_Init>
  MX_TIM2_Init();
 8000c74:	f000 f8be 	bl	8000df4 <MX_TIM2_Init>
  MX_OPAMP1_Init();
 8000c78:	f000 f896 	bl	8000da8 <MX_OPAMP1_Init>
  /* USER CODE BEGIN 2 */
	SineTable_Init();
 8000c7c:	f7ff ff6c 	bl	8000b58 <SineTable_Init>

	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000c80:	2100      	movs	r1, #0
 8000c82:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <main+0x34>)
 8000c84:	f000 fc08 	bl	8001498 <HAL_DAC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c88:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <main+0x38>)
 8000c8a:	f001 feb9 	bl	8002a00 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c8e:	bf00      	nop
 8000c90:	e7fd      	b.n	8000c8e <main+0x2e>
 8000c92:	bf00      	nop
 8000c94:	200000f4 	.word	0x200000f4
 8000c98:	20000144 	.word	0x20000144

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	@ 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2238      	movs	r2, #56	@ 0x38
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fbda 	bl	8003464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f890 	bl	8001de4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cce:	2340      	movs	r3, #64	@ 0x40
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cde:	2355      	movs	r3, #85	@ 0x55
 8000ce0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f92a 	bl	8001f4c <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cfe:	f000 f8f5 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2303      	movs	r3, #3
 8000d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fc28 	bl	8002570 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d26:	f000 f8e1 	bl	8000eec <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	@ 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	@ 0x30
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2230      	movs	r2, #48	@ 0x30
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 fb8f 	bl	8003464 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000d46:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <MX_DAC2_Init+0x6c>)
 8000d48:	4a16      	ldr	r2, [pc, #88]	@ (8000da4 <MX_DAC2_Init+0x70>)
 8000d4a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000d4c:	4814      	ldr	r0, [pc, #80]	@ (8000da0 <MX_DAC2_Init+0x6c>)
 8000d4e:	f000 fb80 	bl	8001452 <HAL_DAC_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000d58:	f000 f8c8 	bl	8000eec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <MX_DAC2_Init+0x6c>)
 8000d88:	f000 fc20 	bl	80015cc <HAL_DAC_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000d92:	f000 f8ab 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3730      	adds	r7, #48	@ 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000f4 	.word	0x200000f4
 8000da4:	50000c00 	.word	0x50000c00

08000da8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <MX_OPAMP1_Init+0x44>)
 8000dae:	4a10      	ldr	r2, [pc, #64]	@ (8000df0 <MX_OPAMP1_Init+0x48>)
 8000db0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MX_OPAMP1_Init+0x44>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <MX_OPAMP1_Init+0x44>)
 8000dba:	2260      	movs	r2, #96	@ 0x60
 8000dbc:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <MX_OPAMP1_Init+0x44>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <MX_OPAMP1_Init+0x44>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <MX_OPAMP1_Init+0x44>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <MX_OPAMP1_Init+0x44>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_OPAMP1_Init+0x44>)
 8000dd8:	f000 ff34 	bl	8001c44 <HAL_OPAMP_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000de2:	f000 f883 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000108 	.word	0x20000108
 8000df0:	40010300 	.word	0x40010300

08000df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_TIM2_Init+0x94>)
 8000e14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <MX_TIM2_Init+0x94>)
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_TIM2_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 105;
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <MX_TIM2_Init+0x94>)
 8000e28:	2269      	movs	r2, #105	@ 0x69
 8000e2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <MX_TIM2_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_TIM2_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e38:	4813      	ldr	r0, [pc, #76]	@ (8000e88 <MX_TIM2_Init+0x94>)
 8000e3a:	f001 fd89 	bl	8002950 <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e44:	f000 f852 	bl	8000eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	480c      	ldr	r0, [pc, #48]	@ (8000e88 <MX_TIM2_Init+0x94>)
 8000e56:	f001 ff9b 	bl	8002d90 <HAL_TIM_ConfigClockSource>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e60:	f000 f844 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e64:	2320      	movs	r3, #32
 8000e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_TIM2_Init+0x94>)
 8000e72:	f002 fa1b 	bl	80032ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e7c:	f000 f836 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000144 	.word	0x20000144

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <MX_GPIO_Init+0x5c>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a14      	ldr	r2, [pc, #80]	@ (8000ee8 <MX_GPIO_Init+0x5c>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <MX_GPIO_Init+0x5c>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_GPIO_Init+0x5c>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <MX_GPIO_Init+0x5c>)
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_GPIO_Init+0x5c>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_GPIO_Init+0x5c>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <MX_GPIO_Init+0x5c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_GPIO_Init+0x5c>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <Error_Handler+0x8>

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f2e:	f000 fffd 	bl	8001f2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <HAL_DAC_MspInit+0x74>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d124      	bne.n	8000fac <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_DAC_MspInit+0x78>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <HAL_DAC_MspInit+0x78>)
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_DAC_MspInit+0x78>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_DAC_MspInit+0x78>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_DAC_MspInit+0x78>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <HAL_DAC_MspInit+0x78>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f92:	2340      	movs	r3, #64	@ 0x40
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f96:	2303      	movs	r3, #3
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa8:	f000 fcca 	bl	8001940 <HAL_GPIO_Init>

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	@ 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50000c00 	.word	0x50000c00
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001018 <HAL_OPAMP_MspInit+0x5c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d118      	bne.n	8001010 <HAL_OPAMP_MspInit+0x54>
  {
    /* USER CODE BEGIN OPAMP1_MspInit 0 */

    /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_OPAMP_MspInit+0x60>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_OPAMP_MspInit+0x60>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_OPAMP_MspInit+0x60>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f000 fc98 	bl	8001940 <HAL_GPIO_Init>

    /* USER CODE END OPAMP1_MspInit 1 */

  }

}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40010300 	.word	0x40010300
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001030:	d113      	bne.n	800105a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_TIM_Base_MspInit+0x44>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001036:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <HAL_TIM_Base_MspInit+0x44>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6593      	str	r3, [r2, #88]	@ 0x58
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_TIM_Base_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	201c      	movs	r0, #28
 8001050:	f000 f9cb 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001054:	201c      	movs	r0, #28
 8001056:	f000 f9e2 	bl	800141e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <NMI_Handler+0x4>

08001070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <MemManage_Handler+0x4>

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <UsageFault_Handler+0x4>

08001090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f89b 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <TIM2_IRQHandler+0x10>)
 80010ce:	f001 fd0f 	bl	8002af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000144 	.word	0x20000144

080010dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001100:	480d      	ldr	r0, [pc, #52]	@ (8001138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001102:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff ffea 	bl	80010dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	@ (800113c <LoopForever+0x6>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	@ (8001140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <LoopForever+0xe>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	@ (800114c <LoopForever+0x16>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f002 f9a1 	bl	8003474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001132:	f7ff fd95 	bl	8000c60 <main>

08001136 <LoopForever>:

LoopForever:
    b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
  ldr   r0, =_estack
 8001138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001144:	08004710 	.word	0x08004710
  ldr r2, =_sbss
 8001148:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800114c:	20000194 	.word	0x20000194

08001150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>

08001152 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f939 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001162:	200f      	movs	r0, #15
 8001164:	f000 f80e 	bl	8001184 <HAL_InitTick>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	e001      	b.n	8001178 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001174:	f7ff fec0 	bl	8000ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001178:	79fb      	ldrb	r3, [r7, #7]

}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_InitTick+0x68>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d022      	beq.n	80011de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_InitTick+0x6c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <HAL_InitTick+0x68>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f944 	bl	800143a <HAL_SYSTICK_Config>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10f      	bne.n	80011d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d809      	bhi.n	80011d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011be:	2200      	movs	r2, #0
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	f04f 30ff 	mov.w	r0, #4294967295
 80011c6:	f000 f910 	bl	80013ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <HAL_InitTick+0x70>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e007      	b.n	80011e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	e004      	b.n	80011e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e001      	b.n	80011e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_IncTick+0x1c>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_IncTick+0x20>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4413      	add	r3, r2
 8001206:	4a03      	ldr	r2, [pc, #12]	@ (8001214 <HAL_IncTick+0x1c>)
 8001208:	6013      	str	r3, [r2, #0]
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	20000190 	.word	0x20000190
 8001218:	20000008 	.word	0x20000008

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000190 	.word	0x20000190

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	@ (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	@ (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	@ 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff29 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff40 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff90 	bl	8001328 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5f 	bl	80012d4 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff33 	bl	8001298 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa4 	bl	8001390 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e014      	b.n	800148e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	791b      	ldrb	r3, [r3, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d105      	bne.n	800147a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fd63 	bl	8000f40 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2202      	movs	r2, #2
 800147e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e056      	b.n	800155a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	795b      	ldrb	r3, [r3, #5]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_DAC_Start+0x20>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e050      	b.n	800155a <HAL_DAC_Start+0xc2>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2202      	movs	r2, #2
 80014c2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6819      	ldr	r1, [r3, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2201      	movs	r2, #1
 80014d2:	409a      	lsls	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_DAC_Start+0xd0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	4a22      	ldr	r2, [pc, #136]	@ (800156c <HAL_DAC_Start+0xd4>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	3301      	adds	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80014ee:	e002      	b.n	80014f6 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f9      	bne.n	80014f0 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800150c:	2b02      	cmp	r3, #2
 800150e:	d11d      	bne.n	800154c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	e014      	b.n	800154c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2102      	movs	r1, #2
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	429a      	cmp	r2, r3
 800153a:	d107      	bne.n	800154c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0202 	orr.w	r2, r2, #2
 800154a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000
 800156c:	053e2d63 	.word	0x053e2d63

08001570 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e018      	b.n	80015be <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d105      	bne.n	80015aa <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	3308      	adds	r3, #8
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e004      	b.n	80015b4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	3314      	adds	r3, #20
 80015b2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	461a      	mov	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <HAL_DAC_ConfigChannel+0x1c>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e1a1      	b.n	8001930 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	795b      	ldrb	r3, [r3, #5]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_DAC_ConfigChannel+0x32>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e198      	b.n	8001930 <HAL_DAC_ConfigChannel+0x364>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2202      	movs	r2, #2
 8001608:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b04      	cmp	r3, #4
 8001610:	d17a      	bne.n	8001708 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001612:	f7ff fe03 	bl	800121c <HAL_GetTick>
 8001616:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d13d      	bne.n	800169a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800161e:	e018      	b.n	8001652 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001620:	f7ff fdfc 	bl	800121c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d911      	bls.n	8001652 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00a      	beq.n	8001652 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	f043 0208 	orr.w	r2, r3, #8
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2203      	movs	r2, #3
 800164c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e16e      	b.n	8001930 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1df      	bne.n	8001620 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001668:	641a      	str	r2, [r3, #64]	@ 0x40
 800166a:	e020      	b.n	80016ae <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800166c:	f7ff fdd6 	bl	800121c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d90f      	bls.n	800169a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001680:	2b00      	cmp	r3, #0
 8001682:	da0a      	bge.n	800169a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f043 0208 	orr.w	r2, r3, #8
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2203      	movs	r2, #3
 8001694:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e14a      	b.n	8001930 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	dbe3      	blt.n	800166c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	ea02 0103 	and.w	r1, r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	409a      	lsls	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	21ff      	movs	r1, #255	@ 0xff
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	ea02 0103 	and.w	r1, r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	409a      	lsls	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d11d      	bne.n	800174c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	221f      	movs	r2, #31
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001728:	4013      	ands	r3, r2
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001740:	4313      	orrs	r3, r2
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2207      	movs	r2, #7
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001764:	4013      	ands	r3, r2
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d102      	bne.n	8001776 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	e00f      	b.n	8001796 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d102      	bne.n	8001784 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800177e:	2301      	movs	r3, #1
 8001780:	623b      	str	r3, [r7, #32]
 8001782:	e008      	b.n	8001796 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800178c:	2301      	movs	r3, #1
 800178e:	623b      	str	r3, [r7, #32]
 8001790:	e001      	b.n	8001796 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4313      	orrs	r3, r2
 80017a0:	6a3a      	ldr	r2, [r7, #32]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b8:	4013      	ands	r3, r2
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d102      	bne.n	80017ca <HAL_DAC_ConfigChannel+0x1fe>
 80017c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c8:	e000      	b.n	80017cc <HAL_DAC_ConfigChannel+0x200>
 80017ca:	2300      	movs	r3, #0
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e4:	4013      	ands	r3, r2
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	795b      	ldrb	r3, [r3, #5]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d102      	bne.n	80017f6 <HAL_DAC_ConfigChannel+0x22a>
 80017f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f4:	e000      	b.n	80017f8 <HAL_DAC_ConfigChannel+0x22c>
 80017f6:	2300      	movs	r3, #0
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d114      	bne.n	8001838 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800180e:	f001 f84d 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8001812:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4a48      	ldr	r2, [pc, #288]	@ (8001938 <HAL_DAC_ConfigChannel+0x36c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d904      	bls.n	8001826 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
 8001824:	e00f      	b.n	8001846 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4a44      	ldr	r2, [pc, #272]	@ (800193c <HAL_DAC_ConfigChannel+0x370>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d90a      	bls.n	8001844 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
 8001836:	e006      	b.n	8001846 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183e:	4313      	orrs	r3, r2
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24
 8001842:	e000      	b.n	8001846 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001844:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001854:	4313      	orrs	r3, r2
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800185e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43da      	mvns	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001898:	4013      	ands	r3, r2
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018b0:	4313      	orrs	r3, r2
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6819      	ldr	r1, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	22c0      	movs	r2, #192	@ 0xc0
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	ea02 0103 	and.w	r1, r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	409a      	lsls	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800192e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3728      	adds	r7, #40	@ 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	09896800 	.word	0x09896800
 800193c:	04c4b400 	.word	0x04c4b400

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800194e:	e15a      	b.n	8001c06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 814c 	beq.w	8001c00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d005      	beq.n	8001980 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800197c:	2b02      	cmp	r3, #2
 800197e:	d130      	bne.n	80019e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 0201 	and.w	r2, r3, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d017      	beq.n	8001a1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d123      	bne.n	8001a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	6939      	ldr	r1, [r7, #16]
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0203 	and.w	r2, r3, #3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a6 	beq.w	8001c00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c24 <HAL_GPIO_Init+0x2e4>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c24 <HAL_GPIO_Init+0x2e4>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ac0:	4b58      	ldr	r3, [pc, #352]	@ (8001c24 <HAL_GPIO_Init+0x2e4>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001acc:	4a56      	ldr	r2, [pc, #344]	@ (8001c28 <HAL_GPIO_Init+0x2e8>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001af6:	d01f      	beq.n	8001b38 <HAL_GPIO_Init+0x1f8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4c      	ldr	r2, [pc, #304]	@ (8001c2c <HAL_GPIO_Init+0x2ec>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d019      	beq.n	8001b34 <HAL_GPIO_Init+0x1f4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4b      	ldr	r2, [pc, #300]	@ (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_GPIO_Init+0x1f0>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1ec>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a49      	ldr	r2, [pc, #292]	@ (8001c38 <HAL_GPIO_Init+0x2f8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1e8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a48      	ldr	r2, [pc, #288]	@ (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1e4>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e00a      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b24:	2306      	movs	r3, #6
 8001b26:	e008      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b28:	2304      	movs	r3, #4
 8001b2a:	e006      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e004      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e002      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	f002 0203 	and.w	r2, r2, #3
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	4093      	lsls	r3, r2
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b4a:	4937      	ldr	r1, [pc, #220]	@ (8001c28 <HAL_GPIO_Init+0x2e8>)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b7c:	4a30      	ldr	r2, [pc, #192]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b82:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ba6:	4a26      	ldr	r2, [pc, #152]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bac:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bfa:	4a11      	ldr	r2, [pc, #68]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f47f ae9d 	bne.w	8001950 <HAL_GPIO_Init+0x10>
  }
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	48000400 	.word	0x48000400
 8001c30:	48000800 	.word	0x48000800
 8001c34:	48000c00 	.word	0x48000c00
 8001c38:	48001000 	.word	0x48001000
 8001c3c:	48001400 	.word	0x48001400
 8001c40:	40010400 	.word	0x40010400

08001c44 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0bb      	b.n	8001dd2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d101      	bne.n	8001c6a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0b3      	b.n	8001dd2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d101      	bne.n	8001c7a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0ab      	b.n	8001dd2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	4b58      	ldr	r3, [pc, #352]	@ (8001ddc <HAL_OPAMP_Init+0x198>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	4a57      	ldr	r2, [pc, #348]	@ (8001ddc <HAL_OPAMP_Init+0x198>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c86:	4b55      	ldr	r3, [pc, #340]	@ (8001ddc <HAL_OPAMP_Init+0x198>)
 8001c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d103      	bne.n	8001ca6 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff f988 	bl	8000fbc <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b40      	cmp	r3, #64	@ 0x40
 8001cb2:	d003      	beq.n	8001cbc <HAL_OPAMP_Init+0x78>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b60      	cmp	r3, #96	@ 0x60
 8001cba:	d133      	bne.n	8001d24 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 0110 	bic.w	r1, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <HAL_OPAMP_Init+0x19c>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6851      	ldr	r1, [r2, #4]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6892      	ldr	r2, [r2, #8]
 8001ce4:	4311      	orrs	r1, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6912      	ldr	r2, [r2, #16]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	7d09      	ldrb	r1, [r1, #20]
 8001cf0:	2901      	cmp	r1, #1
 8001cf2:	d102      	bne.n	8001cfa <HAL_OPAMP_Init+0xb6>
 8001cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf8:	e000      	b.n	8001cfc <HAL_OPAMP_Init+0xb8>
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4311      	orrs	r1, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d02:	4311      	orrs	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d08:	4311      	orrs	r1, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d0e:	04d2      	lsls	r2, r2, #19
 8001d10:	4311      	orrs	r1, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d16:	0612      	lsls	r2, r2, #24
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e035      	b.n	8001d90 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0110 	bic.w	r1, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b27      	ldr	r3, [pc, #156]	@ (8001de0 <HAL_OPAMP_Init+0x19c>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6851      	ldr	r1, [r2, #4]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6892      	ldr	r2, [r2, #8]
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68d2      	ldr	r2, [r2, #12]
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6912      	ldr	r2, [r2, #16]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	7d09      	ldrb	r1, [r1, #20]
 8001d5e:	2901      	cmp	r1, #1
 8001d60:	d102      	bne.n	8001d68 <HAL_OPAMP_Init+0x124>
 8001d62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d66:	e000      	b.n	8001d6a <HAL_OPAMP_Init+0x126>
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d70:	4311      	orrs	r1, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d7c:	04d2      	lsls	r2, r2, #19
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d84:	0612      	lsls	r2, r2, #24
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db10      	blt.n	8001dbc <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	e0003e11 	.word	0xe0003e11

08001de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d141      	bne.n	8001e76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001df2:	4b4b      	ldr	r3, [pc, #300]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dfe:	d131      	bne.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e00:	4b47      	ldr	r3, [pc, #284]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e06:	4a46      	ldr	r2, [pc, #280]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e10:	4b43      	ldr	r3, [pc, #268]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e18:	4a41      	ldr	r2, [pc, #260]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e20:	4b40      	ldr	r3, [pc, #256]	@ (8001f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2232      	movs	r2, #50	@ 0x32
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	3301      	adds	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e36:	e002      	b.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e4a:	d102      	bne.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f2      	bne.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e52:	4b33      	ldr	r3, [pc, #204]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5e:	d158      	bne.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e057      	b.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e64:	4b2e      	ldr	r3, [pc, #184]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e74:	e04d      	b.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e7c:	d141      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e7e:	4b28      	ldr	r3, [pc, #160]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e8a:	d131      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e8c:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e92:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e9c:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2232      	movs	r2, #50	@ 0x32
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	0c9b      	lsrs	r3, r3, #18
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec2:	e002      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed6:	d102      	bne.n	8001ede <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f2      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eea:	d112      	bne.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e011      	b.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f00:	e007      	b.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f0a:	4a05      	ldr	r2, [pc, #20]	@ (8001f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40007000 	.word	0x40007000
 8001f24:	20000000 	.word	0x20000000
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f3a:	6093      	str	r3, [r2, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40007000 	.word	0x40007000

08001f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e2fe      	b.n	800255c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d075      	beq.n	8002056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f6a:	4b97      	ldr	r3, [pc, #604]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f74:	4b94      	ldr	r3, [pc, #592]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3e>
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_OscConfig+0x44>
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	4b8d      	ldr	r3, [pc, #564]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05b      	beq.n	8002054 <HAL_RCC_OscConfig+0x108>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d157      	bne.n	8002054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e2d9      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x74>
 8001fb2:	4b85      	ldr	r3, [pc, #532]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a84      	ldr	r2, [pc, #528]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x98>
 8001fca:	4b7f      	ldr	r3, [pc, #508]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a7e      	ldr	r2, [pc, #504]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7b      	ldr	r2, [pc, #492]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fe4:	4b78      	ldr	r3, [pc, #480]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a77      	ldr	r2, [pc, #476]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b75      	ldr	r3, [pc, #468]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a74      	ldr	r2, [pc, #464]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff f90a 	bl	800121c <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff f906 	bl	800121c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	@ 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e29e      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800201e:	4b6a      	ldr	r3, [pc, #424]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xc0>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f8f6 	bl	800121c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff f8f2 	bl	800121c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e28a      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002046:	4b60      	ldr	r3, [pc, #384]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0xe8>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d075      	beq.n	800214e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002062:	4b59      	ldr	r3, [pc, #356]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800206c:	4b56      	ldr	r3, [pc, #344]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b0c      	cmp	r3, #12
 800207a:	d102      	bne.n	8002082 <HAL_RCC_OscConfig+0x136>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d002      	beq.n	8002088 <HAL_RCC_OscConfig+0x13c>
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d11f      	bne.n	80020c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002088:	4b4f      	ldr	r3, [pc, #316]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_OscConfig+0x154>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e25d      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a0:	4b49      	ldr	r3, [pc, #292]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	4946      	ldr	r1, [pc, #280]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020b4:	4b45      	ldr	r3, [pc, #276]	@ (80021cc <HAL_RCC_OscConfig+0x280>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f863 	bl	8001184 <HAL_InitTick>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d043      	beq.n	800214c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e249      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d023      	beq.n	8002118 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b3d      	ldr	r3, [pc, #244]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a3c      	ldr	r2, [pc, #240]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff f89e 	bl	800121c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff f89a 	bl	800121c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e232      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f6:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b31      	ldr	r3, [pc, #196]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	492d      	ldr	r1, [pc, #180]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
 8002116:	e01a      	b.n	800214e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002118:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a2a      	ldr	r2, [pc, #168]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800211e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f87a 	bl	800121c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff f876 	bl	800121c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e20e      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213e:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1e0>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800214c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d041      	beq.n	80021de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01c      	beq.n	800219c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 8002164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002168:	4a17      	ldr	r2, [pc, #92]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7ff f853 	bl	800121c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217a:	f7ff f84f 	bl	800121c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1e7      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0ef      	beq.n	800217a <HAL_RCC_OscConfig+0x22e>
 800219a:	e020      	b.n	80021de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219c:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a2:	4a09      	ldr	r2, [pc, #36]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff f836 	bl	800121c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b2:	e00d      	b.n	80021d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7ff f832 	bl	800121c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d906      	bls.n	80021d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1ca      	b.n	800255c <HAL_RCC_OscConfig+0x610>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80021d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ea      	bne.n	80021b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80a6 	beq.w	8002338 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021f0:	4b84      	ldr	r3, [pc, #528]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x2b4>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x2b6>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b7f      	ldr	r3, [pc, #508]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	4a7e      	ldr	r2, [pc, #504]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	@ 0x58
 8002212:	4b7c      	ldr	r3, [pc, #496]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002222:	4b79      	ldr	r3, [pc, #484]	@ (8002408 <HAL_RCC_OscConfig+0x4bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800222e:	4b76      	ldr	r3, [pc, #472]	@ (8002408 <HAL_RCC_OscConfig+0x4bc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a75      	ldr	r2, [pc, #468]	@ (8002408 <HAL_RCC_OscConfig+0x4bc>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7fe ffef 	bl	800121c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe ffeb 	bl	800121c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e183      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002254:	4b6c      	ldr	r3, [pc, #432]	@ (8002408 <HAL_RCC_OscConfig+0x4bc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d108      	bne.n	800227a <HAL_RCC_OscConfig+0x32e>
 8002268:	4b66      	ldr	r3, [pc, #408]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	4a65      	ldr	r2, [pc, #404]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002278:	e024      	b.n	80022c4 <HAL_RCC_OscConfig+0x378>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d110      	bne.n	80022a4 <HAL_RCC_OscConfig+0x358>
 8002282:	4b60      	ldr	r3, [pc, #384]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002288:	4a5e      	ldr	r2, [pc, #376]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002292:	4b5c      	ldr	r3, [pc, #368]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002298:	4a5a      	ldr	r2, [pc, #360]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022a2:	e00f      	b.n	80022c4 <HAL_RCC_OscConfig+0x378>
 80022a4:	4b57      	ldr	r3, [pc, #348]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022aa:	4a56      	ldr	r2, [pc, #344]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022b4:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	4a52      	ldr	r2, [pc, #328]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d016      	beq.n	80022fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022cc:	f7fe ffa6 	bl	800121c <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe ffa2 	bl	800121c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e138      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	4b46      	ldr	r3, [pc, #280]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ed      	beq.n	80022d4 <HAL_RCC_OscConfig+0x388>
 80022f8:	e015      	b.n	8002326 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7fe ff8f 	bl	800121c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7fe ff8b 	bl	800121c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e121      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002318:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ed      	bne.n	8002302 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002326:	7ffb      	ldrb	r3, [r7, #31]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b35      	ldr	r3, [pc, #212]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002330:	4a34      	ldr	r2, [pc, #208]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002336:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d03c      	beq.n	80023be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01c      	beq.n	8002386 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800234c:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800234e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002352:	4a2c      	ldr	r2, [pc, #176]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe ff5e 	bl	800121c <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002364:	f7fe ff5a 	bl	800121c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0f2      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002376:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ef      	beq.n	8002364 <HAL_RCC_OscConfig+0x418>
 8002384:	e01b      	b.n	80023be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002386:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 8002388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800238c:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7fe ff41 	bl	800121c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800239e:	f7fe ff3d 	bl	800121c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0d5      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80023b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ef      	bne.n	800239e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80c9 	beq.w	800255a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	f000 8083 	beq.w	80024dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d15e      	bne.n	800249c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a08      	ldr	r2, [pc, #32]	@ (8002404 <HAL_RCC_OscConfig+0x4b8>)
 80023e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe ff17 	bl	800121c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	e00c      	b.n	800240c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe ff13 	bl	800121c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d905      	bls.n	800240c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0ab      	b.n	800255c <HAL_RCC_OscConfig+0x610>
 8002404:	40021000 	.word	0x40021000
 8002408:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240c:	4b55      	ldr	r3, [pc, #340]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ec      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002418:	4b52      	ldr	r3, [pc, #328]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4b52      	ldr	r3, [pc, #328]	@ (8002568 <HAL_RCC_OscConfig+0x61c>)
 800241e:	4013      	ands	r3, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6a11      	ldr	r1, [r2, #32]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002428:	3a01      	subs	r2, #1
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002432:	0212      	lsls	r2, r2, #8
 8002434:	4311      	orrs	r1, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800243a:	0852      	lsrs	r2, r2, #1
 800243c:	3a01      	subs	r2, #1
 800243e:	0552      	lsls	r2, r2, #21
 8002440:	4311      	orrs	r1, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002446:	0852      	lsrs	r2, r2, #1
 8002448:	3a01      	subs	r2, #1
 800244a:	0652      	lsls	r2, r2, #25
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002452:	06d2      	lsls	r2, r2, #27
 8002454:	430a      	orrs	r2, r1
 8002456:	4943      	ldr	r1, [pc, #268]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 8002458:	4313      	orrs	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a40      	ldr	r2, [pc, #256]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002468:	4b3e      	ldr	r3, [pc, #248]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a3d      	ldr	r2, [pc, #244]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002472:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fed2 	bl	800121c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fece 	bl	800121c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e066      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x530>
 800249a:	e05e      	b.n	800255a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a30      	ldr	r2, [pc, #192]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe feb8 	bl	800121c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe feb4 	bl	800121c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04c      	b.n	800255c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c2:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024ce:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4924      	ldr	r1, [pc, #144]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024d4:	4b25      	ldr	r3, [pc, #148]	@ (800256c <HAL_RCC_OscConfig+0x620>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	60cb      	str	r3, [r1, #12]
 80024da:	e03e      	b.n	800255a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e039      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_RCC_OscConfig+0x618>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d12c      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	3b01      	subs	r3, #1
 8002508:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d123      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d11b      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d113      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d109      	bne.n	8002556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	3b01      	subs	r3, #1
 8002550:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	019f800c 	.word	0x019f800c
 800256c:	feeefffc 	.word	0xfeeefffc

08002570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e11e      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b91      	ldr	r3, [pc, #580]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d910      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b8e      	ldr	r3, [pc, #568]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 020f 	bic.w	r2, r3, #15
 800259e:	498c      	ldr	r1, [pc, #560]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b8a      	ldr	r3, [pc, #552]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e106      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d073      	beq.n	80026ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d129      	bne.n	8002620 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025cc:	4b81      	ldr	r3, [pc, #516]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0f4      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025dc:	f000 f972 	bl	80028c4 <RCC_GetSysClockFreqFromPLLSource>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4a7c      	ldr	r2, [pc, #496]	@ (80027d8 <HAL_RCC_ClockConfig+0x268>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d93f      	bls.n	800266a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025ea:	4b7a      	ldr	r3, [pc, #488]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d033      	beq.n	800266a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d12f      	bne.n	800266a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800260a:	4b72      	ldr	r3, [pc, #456]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002612:	4a70      	ldr	r2, [pc, #448]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002618:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800261a:	2380      	movs	r3, #128	@ 0x80
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e024      	b.n	800266a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d107      	bne.n	8002638 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002628:	4b6a      	ldr	r3, [pc, #424]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0c6      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0be      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002648:	f000 f8ce 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 800264c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4a61      	ldr	r2, [pc, #388]	@ (80027d8 <HAL_RCC_ClockConfig+0x268>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d909      	bls.n	800266a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002656:	4b5f      	ldr	r3, [pc, #380]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800265e:	4a5d      	ldr	r2, [pc, #372]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002664:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b5a      	ldr	r3, [pc, #360]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4957      	ldr	r1, [pc, #348]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267c:	f7fe fdce 	bl	800121c <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fdca 	bl	800121c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e095      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b4e      	ldr	r3, [pc, #312]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d023      	beq.n	8002700 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b43      	ldr	r3, [pc, #268]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a42      	ldr	r2, [pc, #264]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026dc:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026e4:	4a3b      	ldr	r2, [pc, #236]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b39      	ldr	r3, [pc, #228]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4936      	ldr	r1, [pc, #216]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
 80026fe:	e008      	b.n	8002712 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b80      	cmp	r3, #128	@ 0x80
 8002704:	d105      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002706:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	4a32      	ldr	r2, [pc, #200]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800270c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002710:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002712:	4b2f      	ldr	r3, [pc, #188]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d21d      	bcs.n	800275c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002720:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 020f 	bic.w	r2, r3, #15
 8002728:	4929      	ldr	r1, [pc, #164]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002730:	f7fe fd74 	bl	800121c <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe fd70 	bl	800121c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e03b      	b.n	80027c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d1ed      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4917      	ldr	r1, [pc, #92]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002786:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490f      	ldr	r1, [pc, #60]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800279a:	f000 f825 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <HAL_RCC_ClockConfig+0x264>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490c      	ldr	r1, [pc, #48]	@ (80027dc <HAL_RCC_ClockConfig+0x26c>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <HAL_RCC_ClockConfig+0x270>)
 80027b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_RCC_ClockConfig+0x274>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fce0 	bl	8001184 <HAL_InitTick>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40022000 	.word	0x40022000
 80027d4:	40021000 	.word	0x40021000
 80027d8:	04c4b400 	.word	0x04c4b400
 80027dc:	08004520 	.word	0x08004520
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027ee:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027fa:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e047      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002800:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d102      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800280c:	4b26      	ldr	r3, [pc, #152]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e03e      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002812:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d136      	bne.n	800288c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3301      	adds	r3, #1
 8002834:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d10c      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800283c:	4a1a      	ldr	r2, [pc, #104]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	4a16      	ldr	r2, [pc, #88]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002846:	68d2      	ldr	r2, [r2, #12]
 8002848:	0a12      	lsrs	r2, r2, #8
 800284a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	617b      	str	r3, [r7, #20]
      break;
 8002854:	e00c      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002856:	4a13      	ldr	r2, [pc, #76]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4a10      	ldr	r2, [pc, #64]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	0a12      	lsrs	r2, r2, #8
 8002864:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
      break;
 800286e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0e5b      	lsrs	r3, r3, #25
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	3301      	adds	r3, #1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	e001      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002890:	693b      	ldr	r3, [r7, #16]
}
 8002892:	4618      	mov	r0, r3
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	007a1200 	.word	0x007a1200

080028ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000

080028c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3301      	adds	r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d10c      	bne.n	8002902 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e8:	4a17      	ldr	r2, [pc, #92]	@ (8002948 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	4a14      	ldr	r2, [pc, #80]	@ (8002944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028f2:	68d2      	ldr	r2, [r2, #12]
 80028f4:	0a12      	lsrs	r2, r2, #8
 80028f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
    break;
 8002900:	e00c      	b.n	800291c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002902:	4a12      	ldr	r2, [pc, #72]	@ (800294c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	4a0e      	ldr	r2, [pc, #56]	@ (8002944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	0a12      	lsrs	r2, r2, #8
 8002910:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
    break;
 800291a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800291c:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0e5b      	lsrs	r3, r3, #25
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	3301      	adds	r3, #1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002936:	687b      	ldr	r3, [r7, #4]
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	00f42400 	.word	0x00f42400

08002950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e049      	b.n	80029f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fb52 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 fb3c 	bl	800300c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d001      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e054      	b.n	8002ac2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a26      	ldr	r2, [pc, #152]	@ (8002ad0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d022      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a42:	d01d      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a22      	ldr	r2, [pc, #136]	@ (8002ad4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d018      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a21      	ldr	r2, [pc, #132]	@ (8002ad8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002adc <HAL_TIM_Base_Start_IT+0xdc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00e      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d009      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae8 <HAL_TIM_Base_Start_IT+0xe8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d115      	bne.n	8002aac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <HAL_TIM_Base_Start_IT+0xec>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d015      	beq.n	8002abe <HAL_TIM_Base_Start_IT+0xbe>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a98:	d011      	beq.n	8002abe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	e008      	b.n	8002abe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e000      	b.n	8002ac0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40000800 	.word	0x40000800
 8002adc:	40000c00 	.word	0x40000c00
 8002ae0:	40013400 	.word	0x40013400
 8002ae4:	40014000 	.word	0x40014000
 8002ae8:	40015000 	.word	0x40015000
 8002aec:	00010007 	.word	0x00010007

08002af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d020      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01b      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0202 	mvn.w	r2, #2
 8002b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa48 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa3a 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fa4b 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d020      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01b      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0204 	mvn.w	r2, #4
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa22 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa14 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fa25 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d020      	beq.n	8002bec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01b      	beq.n	8002bec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0208 	mvn.w	r2, #8
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9fc 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9ee 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f9ff 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d020      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01b      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0210 	mvn.w	r2, #16
 8002c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f9d6 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f9c8 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f9d9 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00c      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0201 	mvn.w	r2, #1
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd ffd4 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fbb1 	bl	80033ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fba9 	bl	8003400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00c      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f993 	bl	8002ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00c      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f06f 0220 	mvn.w	r2, #32
 8002cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fb71 	bl	80033d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00c      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fb7d 	bl	8003414 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fb75 	bl	8003428 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fb6d 	bl	800343c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00c      	beq.n	8002d86 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fb65 	bl	8003450 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_ConfigClockSource+0x1c>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0f6      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x20a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002dca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a6f      	ldr	r2, [pc, #444]	@ (8002fa4 <HAL_TIM_ConfigClockSource+0x214>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	f000 80c1 	beq.w	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002dec:	4a6d      	ldr	r2, [pc, #436]	@ (8002fa4 <HAL_TIM_ConfigClockSource+0x214>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	f200 80c6 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002df4:	4a6c      	ldr	r2, [pc, #432]	@ (8002fa8 <HAL_TIM_ConfigClockSource+0x218>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	f000 80b9 	beq.w	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8002fa8 <HAL_TIM_ConfigClockSource+0x218>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	f200 80be 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e04:	4a69      	ldr	r2, [pc, #420]	@ (8002fac <HAL_TIM_ConfigClockSource+0x21c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	f000 80b1 	beq.w	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002e0c:	4a67      	ldr	r2, [pc, #412]	@ (8002fac <HAL_TIM_ConfigClockSource+0x21c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	f200 80b6 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e14:	4a66      	ldr	r2, [pc, #408]	@ (8002fb0 <HAL_TIM_ConfigClockSource+0x220>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	f000 80a9 	beq.w	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002e1c:	4a64      	ldr	r2, [pc, #400]	@ (8002fb0 <HAL_TIM_ConfigClockSource+0x220>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	f200 80ae 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e24:	4a63      	ldr	r2, [pc, #396]	@ (8002fb4 <HAL_TIM_ConfigClockSource+0x224>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	f000 80a1 	beq.w	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002e2c:	4a61      	ldr	r2, [pc, #388]	@ (8002fb4 <HAL_TIM_ConfigClockSource+0x224>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f200 80a6 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e34:	4a60      	ldr	r2, [pc, #384]	@ (8002fb8 <HAL_TIM_ConfigClockSource+0x228>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	f000 8099 	beq.w	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002e3c:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb8 <HAL_TIM_ConfigClockSource+0x228>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	f200 809e 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002e48:	f000 8091 	beq.w	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002e4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002e50:	f200 8096 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e58:	f000 8089 	beq.w	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002e5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e60:	f200 808e 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e68:	d03e      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0x158>
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e6e:	f200 8087 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e76:	f000 8086 	beq.w	8002f86 <HAL_TIM_ConfigClockSource+0x1f6>
 8002e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7e:	d87f      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e80:	2b70      	cmp	r3, #112	@ 0x70
 8002e82:	d01a      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x12a>
 8002e84:	2b70      	cmp	r3, #112	@ 0x70
 8002e86:	d87b      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e88:	2b60      	cmp	r3, #96	@ 0x60
 8002e8a:	d050      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x19e>
 8002e8c:	2b60      	cmp	r3, #96	@ 0x60
 8002e8e:	d877      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e90:	2b50      	cmp	r3, #80	@ 0x50
 8002e92:	d03c      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x17e>
 8002e94:	2b50      	cmp	r3, #80	@ 0x50
 8002e96:	d873      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e98:	2b40      	cmp	r3, #64	@ 0x40
 8002e9a:	d058      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x1be>
 8002e9c:	2b40      	cmp	r3, #64	@ 0x40
 8002e9e:	d86f      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002ea0:	2b30      	cmp	r3, #48	@ 0x30
 8002ea2:	d064      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002ea4:	2b30      	cmp	r3, #48	@ 0x30
 8002ea6:	d86b      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d060      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d867      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d05c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d05a      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x1de>
 8002eb8:	e062      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eca:	f000 f9cf 	bl	800326c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	609a      	str	r2, [r3, #8]
      break;
 8002ee6:	e04f      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ef8:	f000 f9b8 	bl	800326c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f0a:	609a      	str	r2, [r3, #8]
      break;
 8002f0c:	e03c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f000 f92a 	bl	8003174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2150      	movs	r1, #80	@ 0x50
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f983 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e02c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f000 f949 	bl	80031d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2160      	movs	r1, #96	@ 0x60
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f973 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e01c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f000 f90a 	bl	8003174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2140      	movs	r1, #64	@ 0x40
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f963 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8002f6c:	e00c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f000 f95a 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8002f7e:	e003      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      break;
 8002f84:	e000      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	00100070 	.word	0x00100070
 8002fa8:	00100060 	.word	0x00100060
 8002fac:	00100050 	.word	0x00100050
 8002fb0:	00100040 	.word	0x00100040
 8002fb4:	00100030 	.word	0x00100030
 8002fb8:	00100020 	.word	0x00100020

08002fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4c      	ldr	r2, [pc, #304]	@ (8003150 <TIM_Base_SetConfig+0x144>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d017      	beq.n	8003054 <TIM_Base_SetConfig+0x48>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800302a:	d013      	beq.n	8003054 <TIM_Base_SetConfig+0x48>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a49      	ldr	r2, [pc, #292]	@ (8003154 <TIM_Base_SetConfig+0x148>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00f      	beq.n	8003054 <TIM_Base_SetConfig+0x48>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a48      	ldr	r2, [pc, #288]	@ (8003158 <TIM_Base_SetConfig+0x14c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00b      	beq.n	8003054 <TIM_Base_SetConfig+0x48>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a47      	ldr	r2, [pc, #284]	@ (800315c <TIM_Base_SetConfig+0x150>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d007      	beq.n	8003054 <TIM_Base_SetConfig+0x48>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a46      	ldr	r2, [pc, #280]	@ (8003160 <TIM_Base_SetConfig+0x154>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_Base_SetConfig+0x48>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a45      	ldr	r2, [pc, #276]	@ (8003164 <TIM_Base_SetConfig+0x158>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d108      	bne.n	8003066 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800305a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a39      	ldr	r2, [pc, #228]	@ (8003150 <TIM_Base_SetConfig+0x144>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d023      	beq.n	80030b6 <TIM_Base_SetConfig+0xaa>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003074:	d01f      	beq.n	80030b6 <TIM_Base_SetConfig+0xaa>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a36      	ldr	r2, [pc, #216]	@ (8003154 <TIM_Base_SetConfig+0x148>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01b      	beq.n	80030b6 <TIM_Base_SetConfig+0xaa>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a35      	ldr	r2, [pc, #212]	@ (8003158 <TIM_Base_SetConfig+0x14c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d017      	beq.n	80030b6 <TIM_Base_SetConfig+0xaa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a34      	ldr	r2, [pc, #208]	@ (800315c <TIM_Base_SetConfig+0x150>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d013      	beq.n	80030b6 <TIM_Base_SetConfig+0xaa>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a33      	ldr	r2, [pc, #204]	@ (8003160 <TIM_Base_SetConfig+0x154>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00f      	beq.n	80030b6 <TIM_Base_SetConfig+0xaa>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a33      	ldr	r2, [pc, #204]	@ (8003168 <TIM_Base_SetConfig+0x15c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00b      	beq.n	80030b6 <TIM_Base_SetConfig+0xaa>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a32      	ldr	r2, [pc, #200]	@ (800316c <TIM_Base_SetConfig+0x160>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <TIM_Base_SetConfig+0xaa>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a31      	ldr	r2, [pc, #196]	@ (8003170 <TIM_Base_SetConfig+0x164>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d003      	beq.n	80030b6 <TIM_Base_SetConfig+0xaa>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003164 <TIM_Base_SetConfig+0x158>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d108      	bne.n	80030c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a18      	ldr	r2, [pc, #96]	@ (8003150 <TIM_Base_SetConfig+0x144>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <TIM_Base_SetConfig+0x110>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003160 <TIM_Base_SetConfig+0x154>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00f      	beq.n	800311c <TIM_Base_SetConfig+0x110>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003168 <TIM_Base_SetConfig+0x15c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00b      	beq.n	800311c <TIM_Base_SetConfig+0x110>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a19      	ldr	r2, [pc, #100]	@ (800316c <TIM_Base_SetConfig+0x160>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <TIM_Base_SetConfig+0x110>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <TIM_Base_SetConfig+0x164>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_Base_SetConfig+0x110>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a13      	ldr	r2, [pc, #76]	@ (8003164 <TIM_Base_SetConfig+0x158>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	611a      	str	r2, [r3, #16]
  }
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40013400 	.word	0x40013400
 8003164:	40015000 	.word	0x40015000
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800

08003174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 0201 	bic.w	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800319e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f023 030a 	bic.w	r3, r3, #10
 80031b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	621a      	str	r2, [r3, #32]
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b087      	sub	sp, #28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f023 0210 	bic.w	r2, r3, #16
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	031b      	lsls	r3, r3, #12
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800320e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	f043 0307 	orr.w	r3, r3, #7
 8003258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	609a      	str	r2, [r3, #8]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	021a      	lsls	r2, r3, #8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	431a      	orrs	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4313      	orrs	r3, r2
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e074      	b.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a34      	ldr	r2, [pc, #208]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a33      	ldr	r2, [pc, #204]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a31      	ldr	r2, [pc, #196]	@ (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003308:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800331a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a21      	ldr	r2, [pc, #132]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d022      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003344:	d01d      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1f      	ldr	r2, [pc, #124]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1c      	ldr	r2, [pc, #112]	@ (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a15      	ldr	r2, [pc, #84]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a18      	ldr	r2, [pc, #96]	@ (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a11      	ldr	r2, [pc, #68]	@ (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10c      	bne.n	800339c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4313      	orrs	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40013400 	.word	0x40013400
 80033c4:	40015000 	.word	0x40015000
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800
 80033d0:	40000c00 	.word	0x40000c00
 80033d4:	40014000 	.word	0x40014000

080033d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <memset>:
 8003464:	4402      	add	r2, r0
 8003466:	4603      	mov	r3, r0
 8003468:	4293      	cmp	r3, r2
 800346a:	d100      	bne.n	800346e <memset+0xa>
 800346c:	4770      	bx	lr
 800346e:	f803 1b01 	strb.w	r1, [r3], #1
 8003472:	e7f9      	b.n	8003468 <memset+0x4>

08003474 <__libc_init_array>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	4d0d      	ldr	r5, [pc, #52]	@ (80034ac <__libc_init_array+0x38>)
 8003478:	4c0d      	ldr	r4, [pc, #52]	@ (80034b0 <__libc_init_array+0x3c>)
 800347a:	1b64      	subs	r4, r4, r5
 800347c:	10a4      	asrs	r4, r4, #2
 800347e:	2600      	movs	r6, #0
 8003480:	42a6      	cmp	r6, r4
 8003482:	d109      	bne.n	8003498 <__libc_init_array+0x24>
 8003484:	4d0b      	ldr	r5, [pc, #44]	@ (80034b4 <__libc_init_array+0x40>)
 8003486:	4c0c      	ldr	r4, [pc, #48]	@ (80034b8 <__libc_init_array+0x44>)
 8003488:	f001 f83e 	bl	8004508 <_init>
 800348c:	1b64      	subs	r4, r4, r5
 800348e:	10a4      	asrs	r4, r4, #2
 8003490:	2600      	movs	r6, #0
 8003492:	42a6      	cmp	r6, r4
 8003494:	d105      	bne.n	80034a2 <__libc_init_array+0x2e>
 8003496:	bd70      	pop	{r4, r5, r6, pc}
 8003498:	f855 3b04 	ldr.w	r3, [r5], #4
 800349c:	4798      	blx	r3
 800349e:	3601      	adds	r6, #1
 80034a0:	e7ee      	b.n	8003480 <__libc_init_array+0xc>
 80034a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a6:	4798      	blx	r3
 80034a8:	3601      	adds	r6, #1
 80034aa:	e7f2      	b.n	8003492 <__libc_init_array+0x1e>
 80034ac:	08004708 	.word	0x08004708
 80034b0:	08004708 	.word	0x08004708
 80034b4:	08004708 	.word	0x08004708
 80034b8:	0800470c 	.word	0x0800470c
 80034bc:	00000000 	.word	0x00000000

080034c0 <sin>:
 80034c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034c2:	ec53 2b10 	vmov	r2, r3, d0
 80034c6:	4826      	ldr	r0, [pc, #152]	@ (8003560 <sin+0xa0>)
 80034c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80034cc:	4281      	cmp	r1, r0
 80034ce:	d807      	bhi.n	80034e0 <sin+0x20>
 80034d0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003558 <sin+0x98>
 80034d4:	2000      	movs	r0, #0
 80034d6:	b005      	add	sp, #20
 80034d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80034dc:	f000 b90c 	b.w	80036f8 <__kernel_sin>
 80034e0:	4820      	ldr	r0, [pc, #128]	@ (8003564 <sin+0xa4>)
 80034e2:	4281      	cmp	r1, r0
 80034e4:	d908      	bls.n	80034f8 <sin+0x38>
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	f7fc fe99 	bl	8000220 <__aeabi_dsub>
 80034ee:	ec41 0b10 	vmov	d0, r0, r1
 80034f2:	b005      	add	sp, #20
 80034f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80034f8:	4668      	mov	r0, sp
 80034fa:	f000 f9b9 	bl	8003870 <__ieee754_rem_pio2>
 80034fe:	f000 0003 	and.w	r0, r0, #3
 8003502:	2801      	cmp	r0, #1
 8003504:	d00c      	beq.n	8003520 <sin+0x60>
 8003506:	2802      	cmp	r0, #2
 8003508:	d011      	beq.n	800352e <sin+0x6e>
 800350a:	b9e8      	cbnz	r0, 8003548 <sin+0x88>
 800350c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003510:	ed9d 0b00 	vldr	d0, [sp]
 8003514:	2001      	movs	r0, #1
 8003516:	f000 f8ef 	bl	80036f8 <__kernel_sin>
 800351a:	ec51 0b10 	vmov	r0, r1, d0
 800351e:	e7e6      	b.n	80034ee <sin+0x2e>
 8003520:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003524:	ed9d 0b00 	vldr	d0, [sp]
 8003528:	f000 f81e 	bl	8003568 <__kernel_cos>
 800352c:	e7f5      	b.n	800351a <sin+0x5a>
 800352e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003532:	ed9d 0b00 	vldr	d0, [sp]
 8003536:	2001      	movs	r0, #1
 8003538:	f000 f8de 	bl	80036f8 <__kernel_sin>
 800353c:	ec53 2b10 	vmov	r2, r3, d0
 8003540:	4610      	mov	r0, r2
 8003542:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003546:	e7d2      	b.n	80034ee <sin+0x2e>
 8003548:	ed9d 1b02 	vldr	d1, [sp, #8]
 800354c:	ed9d 0b00 	vldr	d0, [sp]
 8003550:	f000 f80a 	bl	8003568 <__kernel_cos>
 8003554:	e7f2      	b.n	800353c <sin+0x7c>
 8003556:	bf00      	nop
	...
 8003560:	3fe921fb 	.word	0x3fe921fb
 8003564:	7fefffff 	.word	0x7fefffff

08003568 <__kernel_cos>:
 8003568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800356c:	ec57 6b10 	vmov	r6, r7, d0
 8003570:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003574:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003578:	ed8d 1b00 	vstr	d1, [sp]
 800357c:	d206      	bcs.n	800358c <__kernel_cos+0x24>
 800357e:	4630      	mov	r0, r6
 8003580:	4639      	mov	r1, r7
 8003582:	f7fd fa9f 	bl	8000ac4 <__aeabi_d2iz>
 8003586:	2800      	cmp	r0, #0
 8003588:	f000 8088 	beq.w	800369c <__kernel_cos+0x134>
 800358c:	4632      	mov	r2, r6
 800358e:	463b      	mov	r3, r7
 8003590:	4630      	mov	r0, r6
 8003592:	4639      	mov	r1, r7
 8003594:	f7fc fffc 	bl	8000590 <__aeabi_dmul>
 8003598:	4b51      	ldr	r3, [pc, #324]	@ (80036e0 <__kernel_cos+0x178>)
 800359a:	2200      	movs	r2, #0
 800359c:	4604      	mov	r4, r0
 800359e:	460d      	mov	r5, r1
 80035a0:	f7fc fff6 	bl	8000590 <__aeabi_dmul>
 80035a4:	a340      	add	r3, pc, #256	@ (adr r3, 80036a8 <__kernel_cos+0x140>)
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	4682      	mov	sl, r0
 80035ac:	468b      	mov	fp, r1
 80035ae:	4620      	mov	r0, r4
 80035b0:	4629      	mov	r1, r5
 80035b2:	f7fc ffed 	bl	8000590 <__aeabi_dmul>
 80035b6:	a33e      	add	r3, pc, #248	@ (adr r3, 80036b0 <__kernel_cos+0x148>)
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f7fc fe32 	bl	8000224 <__adddf3>
 80035c0:	4622      	mov	r2, r4
 80035c2:	462b      	mov	r3, r5
 80035c4:	f7fc ffe4 	bl	8000590 <__aeabi_dmul>
 80035c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80036b8 <__kernel_cos+0x150>)
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	f7fc fe27 	bl	8000220 <__aeabi_dsub>
 80035d2:	4622      	mov	r2, r4
 80035d4:	462b      	mov	r3, r5
 80035d6:	f7fc ffdb 	bl	8000590 <__aeabi_dmul>
 80035da:	a339      	add	r3, pc, #228	@ (adr r3, 80036c0 <__kernel_cos+0x158>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fc fe20 	bl	8000224 <__adddf3>
 80035e4:	4622      	mov	r2, r4
 80035e6:	462b      	mov	r3, r5
 80035e8:	f7fc ffd2 	bl	8000590 <__aeabi_dmul>
 80035ec:	a336      	add	r3, pc, #216	@ (adr r3, 80036c8 <__kernel_cos+0x160>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f7fc fe15 	bl	8000220 <__aeabi_dsub>
 80035f6:	4622      	mov	r2, r4
 80035f8:	462b      	mov	r3, r5
 80035fa:	f7fc ffc9 	bl	8000590 <__aeabi_dmul>
 80035fe:	a334      	add	r3, pc, #208	@ (adr r3, 80036d0 <__kernel_cos+0x168>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f7fc fe0e 	bl	8000224 <__adddf3>
 8003608:	4622      	mov	r2, r4
 800360a:	462b      	mov	r3, r5
 800360c:	f7fc ffc0 	bl	8000590 <__aeabi_dmul>
 8003610:	4622      	mov	r2, r4
 8003612:	462b      	mov	r3, r5
 8003614:	f7fc ffbc 	bl	8000590 <__aeabi_dmul>
 8003618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800361c:	4604      	mov	r4, r0
 800361e:	460d      	mov	r5, r1
 8003620:	4630      	mov	r0, r6
 8003622:	4639      	mov	r1, r7
 8003624:	f7fc ffb4 	bl	8000590 <__aeabi_dmul>
 8003628:	460b      	mov	r3, r1
 800362a:	4602      	mov	r2, r0
 800362c:	4629      	mov	r1, r5
 800362e:	4620      	mov	r0, r4
 8003630:	f7fc fdf6 	bl	8000220 <__aeabi_dsub>
 8003634:	4b2b      	ldr	r3, [pc, #172]	@ (80036e4 <__kernel_cos+0x17c>)
 8003636:	4598      	cmp	r8, r3
 8003638:	4606      	mov	r6, r0
 800363a:	460f      	mov	r7, r1
 800363c:	d810      	bhi.n	8003660 <__kernel_cos+0xf8>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4650      	mov	r0, sl
 8003644:	4659      	mov	r1, fp
 8003646:	f7fc fdeb 	bl	8000220 <__aeabi_dsub>
 800364a:	460b      	mov	r3, r1
 800364c:	4926      	ldr	r1, [pc, #152]	@ (80036e8 <__kernel_cos+0x180>)
 800364e:	4602      	mov	r2, r0
 8003650:	2000      	movs	r0, #0
 8003652:	f7fc fde5 	bl	8000220 <__aeabi_dsub>
 8003656:	ec41 0b10 	vmov	d0, r0, r1
 800365a:	b003      	add	sp, #12
 800365c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003660:	4b22      	ldr	r3, [pc, #136]	@ (80036ec <__kernel_cos+0x184>)
 8003662:	4921      	ldr	r1, [pc, #132]	@ (80036e8 <__kernel_cos+0x180>)
 8003664:	4598      	cmp	r8, r3
 8003666:	bf8c      	ite	hi
 8003668:	4d21      	ldrhi	r5, [pc, #132]	@ (80036f0 <__kernel_cos+0x188>)
 800366a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800366e:	2400      	movs	r4, #0
 8003670:	4622      	mov	r2, r4
 8003672:	462b      	mov	r3, r5
 8003674:	2000      	movs	r0, #0
 8003676:	f7fc fdd3 	bl	8000220 <__aeabi_dsub>
 800367a:	4622      	mov	r2, r4
 800367c:	4680      	mov	r8, r0
 800367e:	4689      	mov	r9, r1
 8003680:	462b      	mov	r3, r5
 8003682:	4650      	mov	r0, sl
 8003684:	4659      	mov	r1, fp
 8003686:	f7fc fdcb 	bl	8000220 <__aeabi_dsub>
 800368a:	4632      	mov	r2, r6
 800368c:	463b      	mov	r3, r7
 800368e:	f7fc fdc7 	bl	8000220 <__aeabi_dsub>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4640      	mov	r0, r8
 8003698:	4649      	mov	r1, r9
 800369a:	e7da      	b.n	8003652 <__kernel_cos+0xea>
 800369c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80036d8 <__kernel_cos+0x170>
 80036a0:	e7db      	b.n	800365a <__kernel_cos+0xf2>
 80036a2:	bf00      	nop
 80036a4:	f3af 8000 	nop.w
 80036a8:	be8838d4 	.word	0xbe8838d4
 80036ac:	bda8fae9 	.word	0xbda8fae9
 80036b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80036b4:	3e21ee9e 	.word	0x3e21ee9e
 80036b8:	809c52ad 	.word	0x809c52ad
 80036bc:	3e927e4f 	.word	0x3e927e4f
 80036c0:	19cb1590 	.word	0x19cb1590
 80036c4:	3efa01a0 	.word	0x3efa01a0
 80036c8:	16c15177 	.word	0x16c15177
 80036cc:	3f56c16c 	.word	0x3f56c16c
 80036d0:	5555554c 	.word	0x5555554c
 80036d4:	3fa55555 	.word	0x3fa55555
 80036d8:	00000000 	.word	0x00000000
 80036dc:	3ff00000 	.word	0x3ff00000
 80036e0:	3fe00000 	.word	0x3fe00000
 80036e4:	3fd33332 	.word	0x3fd33332
 80036e8:	3ff00000 	.word	0x3ff00000
 80036ec:	3fe90000 	.word	0x3fe90000
 80036f0:	3fd20000 	.word	0x3fd20000
 80036f4:	00000000 	.word	0x00000000

080036f8 <__kernel_sin>:
 80036f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fc:	ec55 4b10 	vmov	r4, r5, d0
 8003700:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003704:	b085      	sub	sp, #20
 8003706:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800370a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800370e:	4680      	mov	r8, r0
 8003710:	d205      	bcs.n	800371e <__kernel_sin+0x26>
 8003712:	4620      	mov	r0, r4
 8003714:	4629      	mov	r1, r5
 8003716:	f7fd f9d5 	bl	8000ac4 <__aeabi_d2iz>
 800371a:	2800      	cmp	r0, #0
 800371c:	d052      	beq.n	80037c4 <__kernel_sin+0xcc>
 800371e:	4622      	mov	r2, r4
 8003720:	462b      	mov	r3, r5
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	f7fc ff33 	bl	8000590 <__aeabi_dmul>
 800372a:	4682      	mov	sl, r0
 800372c:	468b      	mov	fp, r1
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4620      	mov	r0, r4
 8003734:	4629      	mov	r1, r5
 8003736:	f7fc ff2b 	bl	8000590 <__aeabi_dmul>
 800373a:	a342      	add	r3, pc, #264	@ (adr r3, 8003844 <__kernel_sin+0x14c>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	e9cd 0100 	strd	r0, r1, [sp]
 8003744:	4650      	mov	r0, sl
 8003746:	4659      	mov	r1, fp
 8003748:	f7fc ff22 	bl	8000590 <__aeabi_dmul>
 800374c:	a33f      	add	r3, pc, #252	@ (adr r3, 800384c <__kernel_sin+0x154>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f7fc fd65 	bl	8000220 <__aeabi_dsub>
 8003756:	4652      	mov	r2, sl
 8003758:	465b      	mov	r3, fp
 800375a:	f7fc ff19 	bl	8000590 <__aeabi_dmul>
 800375e:	a33d      	add	r3, pc, #244	@ (adr r3, 8003854 <__kernel_sin+0x15c>)
 8003760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003764:	f7fc fd5e 	bl	8000224 <__adddf3>
 8003768:	4652      	mov	r2, sl
 800376a:	465b      	mov	r3, fp
 800376c:	f7fc ff10 	bl	8000590 <__aeabi_dmul>
 8003770:	a33a      	add	r3, pc, #232	@ (adr r3, 800385c <__kernel_sin+0x164>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc fd53 	bl	8000220 <__aeabi_dsub>
 800377a:	4652      	mov	r2, sl
 800377c:	465b      	mov	r3, fp
 800377e:	f7fc ff07 	bl	8000590 <__aeabi_dmul>
 8003782:	a338      	add	r3, pc, #224	@ (adr r3, 8003864 <__kernel_sin+0x16c>)
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f7fc fd4c 	bl	8000224 <__adddf3>
 800378c:	4606      	mov	r6, r0
 800378e:	460f      	mov	r7, r1
 8003790:	f1b8 0f00 	cmp.w	r8, #0
 8003794:	d11b      	bne.n	80037ce <__kernel_sin+0xd6>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4650      	mov	r0, sl
 800379c:	4659      	mov	r1, fp
 800379e:	f7fc fef7 	bl	8000590 <__aeabi_dmul>
 80037a2:	a325      	add	r3, pc, #148	@ (adr r3, 8003838 <__kernel_sin+0x140>)
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f7fc fd3a 	bl	8000220 <__aeabi_dsub>
 80037ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037b0:	f7fc feee 	bl	8000590 <__aeabi_dmul>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4620      	mov	r0, r4
 80037ba:	4629      	mov	r1, r5
 80037bc:	f7fc fd32 	bl	8000224 <__adddf3>
 80037c0:	4604      	mov	r4, r0
 80037c2:	460d      	mov	r5, r1
 80037c4:	ec45 4b10 	vmov	d0, r4, r5
 80037c8:	b005      	add	sp, #20
 80037ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <__kernel_sin+0x148>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	f7fc fedb 	bl	8000590 <__aeabi_dmul>
 80037da:	4632      	mov	r2, r6
 80037dc:	4680      	mov	r8, r0
 80037de:	4689      	mov	r9, r1
 80037e0:	463b      	mov	r3, r7
 80037e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037e6:	f7fc fed3 	bl	8000590 <__aeabi_dmul>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4640      	mov	r0, r8
 80037f0:	4649      	mov	r1, r9
 80037f2:	f7fc fd15 	bl	8000220 <__aeabi_dsub>
 80037f6:	4652      	mov	r2, sl
 80037f8:	465b      	mov	r3, fp
 80037fa:	f7fc fec9 	bl	8000590 <__aeabi_dmul>
 80037fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003802:	f7fc fd0d 	bl	8000220 <__aeabi_dsub>
 8003806:	a30c      	add	r3, pc, #48	@ (adr r3, 8003838 <__kernel_sin+0x140>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	4606      	mov	r6, r0
 800380e:	460f      	mov	r7, r1
 8003810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003814:	f7fc febc 	bl	8000590 <__aeabi_dmul>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4630      	mov	r0, r6
 800381e:	4639      	mov	r1, r7
 8003820:	f7fc fd00 	bl	8000224 <__adddf3>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4620      	mov	r0, r4
 800382a:	4629      	mov	r1, r5
 800382c:	f7fc fcf8 	bl	8000220 <__aeabi_dsub>
 8003830:	e7c6      	b.n	80037c0 <__kernel_sin+0xc8>
 8003832:	bf00      	nop
 8003834:	f3af 8000 	nop.w
 8003838:	55555549 	.word	0x55555549
 800383c:	3fc55555 	.word	0x3fc55555
 8003840:	3fe00000 	.word	0x3fe00000
 8003844:	5acfd57c 	.word	0x5acfd57c
 8003848:	3de5d93a 	.word	0x3de5d93a
 800384c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003850:	3e5ae5e6 	.word	0x3e5ae5e6
 8003854:	57b1fe7d 	.word	0x57b1fe7d
 8003858:	3ec71de3 	.word	0x3ec71de3
 800385c:	19c161d5 	.word	0x19c161d5
 8003860:	3f2a01a0 	.word	0x3f2a01a0
 8003864:	1110f8a6 	.word	0x1110f8a6
 8003868:	3f811111 	.word	0x3f811111
 800386c:	00000000 	.word	0x00000000

08003870 <__ieee754_rem_pio2>:
 8003870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003874:	ec57 6b10 	vmov	r6, r7, d0
 8003878:	4bc5      	ldr	r3, [pc, #788]	@ (8003b90 <__ieee754_rem_pio2+0x320>)
 800387a:	b08d      	sub	sp, #52	@ 0x34
 800387c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003880:	4598      	cmp	r8, r3
 8003882:	4604      	mov	r4, r0
 8003884:	9704      	str	r7, [sp, #16]
 8003886:	d807      	bhi.n	8003898 <__ieee754_rem_pio2+0x28>
 8003888:	2200      	movs	r2, #0
 800388a:	2300      	movs	r3, #0
 800388c:	ed80 0b00 	vstr	d0, [r0]
 8003890:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003894:	2500      	movs	r5, #0
 8003896:	e028      	b.n	80038ea <__ieee754_rem_pio2+0x7a>
 8003898:	4bbe      	ldr	r3, [pc, #760]	@ (8003b94 <__ieee754_rem_pio2+0x324>)
 800389a:	4598      	cmp	r8, r3
 800389c:	d878      	bhi.n	8003990 <__ieee754_rem_pio2+0x120>
 800389e:	9b04      	ldr	r3, [sp, #16]
 80038a0:	4dbd      	ldr	r5, [pc, #756]	@ (8003b98 <__ieee754_rem_pio2+0x328>)
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	4630      	mov	r0, r6
 80038a6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003b58 <__ieee754_rem_pio2+0x2e8>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	4639      	mov	r1, r7
 80038ae:	dd38      	ble.n	8003922 <__ieee754_rem_pio2+0xb2>
 80038b0:	f7fc fcb6 	bl	8000220 <__aeabi_dsub>
 80038b4:	45a8      	cmp	r8, r5
 80038b6:	4606      	mov	r6, r0
 80038b8:	460f      	mov	r7, r1
 80038ba:	d01a      	beq.n	80038f2 <__ieee754_rem_pio2+0x82>
 80038bc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003b60 <__ieee754_rem_pio2+0x2f0>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc fcad 	bl	8000220 <__aeabi_dsub>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4680      	mov	r8, r0
 80038cc:	4689      	mov	r9, r1
 80038ce:	4630      	mov	r0, r6
 80038d0:	4639      	mov	r1, r7
 80038d2:	f7fc fca5 	bl	8000220 <__aeabi_dsub>
 80038d6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003b60 <__ieee754_rem_pio2+0x2f0>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f7fc fca0 	bl	8000220 <__aeabi_dsub>
 80038e0:	e9c4 8900 	strd	r8, r9, [r4]
 80038e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80038e8:	2501      	movs	r5, #1
 80038ea:	4628      	mov	r0, r5
 80038ec:	b00d      	add	sp, #52	@ 0x34
 80038ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f2:	a39d      	add	r3, pc, #628	@ (adr r3, 8003b68 <__ieee754_rem_pio2+0x2f8>)
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f7fc fc92 	bl	8000220 <__aeabi_dsub>
 80038fc:	a39c      	add	r3, pc, #624	@ (adr r3, 8003b70 <__ieee754_rem_pio2+0x300>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	4606      	mov	r6, r0
 8003904:	460f      	mov	r7, r1
 8003906:	f7fc fc8b 	bl	8000220 <__aeabi_dsub>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4680      	mov	r8, r0
 8003910:	4689      	mov	r9, r1
 8003912:	4630      	mov	r0, r6
 8003914:	4639      	mov	r1, r7
 8003916:	f7fc fc83 	bl	8000220 <__aeabi_dsub>
 800391a:	a395      	add	r3, pc, #596	@ (adr r3, 8003b70 <__ieee754_rem_pio2+0x300>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	e7dc      	b.n	80038dc <__ieee754_rem_pio2+0x6c>
 8003922:	f7fc fc7f 	bl	8000224 <__adddf3>
 8003926:	45a8      	cmp	r8, r5
 8003928:	4606      	mov	r6, r0
 800392a:	460f      	mov	r7, r1
 800392c:	d018      	beq.n	8003960 <__ieee754_rem_pio2+0xf0>
 800392e:	a38c      	add	r3, pc, #560	@ (adr r3, 8003b60 <__ieee754_rem_pio2+0x2f0>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f7fc fc76 	bl	8000224 <__adddf3>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4680      	mov	r8, r0
 800393e:	4689      	mov	r9, r1
 8003940:	4630      	mov	r0, r6
 8003942:	4639      	mov	r1, r7
 8003944:	f7fc fc6c 	bl	8000220 <__aeabi_dsub>
 8003948:	a385      	add	r3, pc, #532	@ (adr r3, 8003b60 <__ieee754_rem_pio2+0x2f0>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f7fc fc69 	bl	8000224 <__adddf3>
 8003952:	f04f 35ff 	mov.w	r5, #4294967295
 8003956:	e9c4 8900 	strd	r8, r9, [r4]
 800395a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800395e:	e7c4      	b.n	80038ea <__ieee754_rem_pio2+0x7a>
 8003960:	a381      	add	r3, pc, #516	@ (adr r3, 8003b68 <__ieee754_rem_pio2+0x2f8>)
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f7fc fc5d 	bl	8000224 <__adddf3>
 800396a:	a381      	add	r3, pc, #516	@ (adr r3, 8003b70 <__ieee754_rem_pio2+0x300>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	4606      	mov	r6, r0
 8003972:	460f      	mov	r7, r1
 8003974:	f7fc fc56 	bl	8000224 <__adddf3>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4680      	mov	r8, r0
 800397e:	4689      	mov	r9, r1
 8003980:	4630      	mov	r0, r6
 8003982:	4639      	mov	r1, r7
 8003984:	f7fc fc4c 	bl	8000220 <__aeabi_dsub>
 8003988:	a379      	add	r3, pc, #484	@ (adr r3, 8003b70 <__ieee754_rem_pio2+0x300>)
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	e7de      	b.n	800394e <__ieee754_rem_pio2+0xde>
 8003990:	4b82      	ldr	r3, [pc, #520]	@ (8003b9c <__ieee754_rem_pio2+0x32c>)
 8003992:	4598      	cmp	r8, r3
 8003994:	f200 80d1 	bhi.w	8003b3a <__ieee754_rem_pio2+0x2ca>
 8003998:	f000 f966 	bl	8003c68 <fabs>
 800399c:	ec57 6b10 	vmov	r6, r7, d0
 80039a0:	a375      	add	r3, pc, #468	@ (adr r3, 8003b78 <__ieee754_rem_pio2+0x308>)
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	4630      	mov	r0, r6
 80039a8:	4639      	mov	r1, r7
 80039aa:	f7fc fdf1 	bl	8000590 <__aeabi_dmul>
 80039ae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba0 <__ieee754_rem_pio2+0x330>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	f7fc fc37 	bl	8000224 <__adddf3>
 80039b6:	f7fd f885 	bl	8000ac4 <__aeabi_d2iz>
 80039ba:	4605      	mov	r5, r0
 80039bc:	f7fc fd7e 	bl	80004bc <__aeabi_i2d>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039c8:	a363      	add	r3, pc, #396	@ (adr r3, 8003b58 <__ieee754_rem_pio2+0x2e8>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f7fc fddf 	bl	8000590 <__aeabi_dmul>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4630      	mov	r0, r6
 80039d8:	4639      	mov	r1, r7
 80039da:	f7fc fc21 	bl	8000220 <__aeabi_dsub>
 80039de:	a360      	add	r3, pc, #384	@ (adr r3, 8003b60 <__ieee754_rem_pio2+0x2f0>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	4682      	mov	sl, r0
 80039e6:	468b      	mov	fp, r1
 80039e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039ec:	f7fc fdd0 	bl	8000590 <__aeabi_dmul>
 80039f0:	2d1f      	cmp	r5, #31
 80039f2:	4606      	mov	r6, r0
 80039f4:	460f      	mov	r7, r1
 80039f6:	dc0c      	bgt.n	8003a12 <__ieee754_rem_pio2+0x1a2>
 80039f8:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba4 <__ieee754_rem_pio2+0x334>)
 80039fa:	1e6a      	subs	r2, r5, #1
 80039fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a00:	4543      	cmp	r3, r8
 8003a02:	d006      	beq.n	8003a12 <__ieee754_rem_pio2+0x1a2>
 8003a04:	4632      	mov	r2, r6
 8003a06:	463b      	mov	r3, r7
 8003a08:	4650      	mov	r0, sl
 8003a0a:	4659      	mov	r1, fp
 8003a0c:	f7fc fc08 	bl	8000220 <__aeabi_dsub>
 8003a10:	e00e      	b.n	8003a30 <__ieee754_rem_pio2+0x1c0>
 8003a12:	463b      	mov	r3, r7
 8003a14:	4632      	mov	r2, r6
 8003a16:	4650      	mov	r0, sl
 8003a18:	4659      	mov	r1, fp
 8003a1a:	f7fc fc01 	bl	8000220 <__aeabi_dsub>
 8003a1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003a22:	9305      	str	r3, [sp, #20]
 8003a24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003a28:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	dc02      	bgt.n	8003a36 <__ieee754_rem_pio2+0x1c6>
 8003a30:	e9c4 0100 	strd	r0, r1, [r4]
 8003a34:	e039      	b.n	8003aaa <__ieee754_rem_pio2+0x23a>
 8003a36:	a34c      	add	r3, pc, #304	@ (adr r3, 8003b68 <__ieee754_rem_pio2+0x2f8>)
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a40:	f7fc fda6 	bl	8000590 <__aeabi_dmul>
 8003a44:	4606      	mov	r6, r0
 8003a46:	460f      	mov	r7, r1
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4650      	mov	r0, sl
 8003a4e:	4659      	mov	r1, fp
 8003a50:	f7fc fbe6 	bl	8000220 <__aeabi_dsub>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4680      	mov	r8, r0
 8003a5a:	4689      	mov	r9, r1
 8003a5c:	4650      	mov	r0, sl
 8003a5e:	4659      	mov	r1, fp
 8003a60:	f7fc fbde 	bl	8000220 <__aeabi_dsub>
 8003a64:	4632      	mov	r2, r6
 8003a66:	463b      	mov	r3, r7
 8003a68:	f7fc fbda 	bl	8000220 <__aeabi_dsub>
 8003a6c:	a340      	add	r3, pc, #256	@ (adr r3, 8003b70 <__ieee754_rem_pio2+0x300>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	4606      	mov	r6, r0
 8003a74:	460f      	mov	r7, r1
 8003a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a7a:	f7fc fd89 	bl	8000590 <__aeabi_dmul>
 8003a7e:	4632      	mov	r2, r6
 8003a80:	463b      	mov	r3, r7
 8003a82:	f7fc fbcd 	bl	8000220 <__aeabi_dsub>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	460f      	mov	r7, r1
 8003a8e:	4640      	mov	r0, r8
 8003a90:	4649      	mov	r1, r9
 8003a92:	f7fc fbc5 	bl	8000220 <__aeabi_dsub>
 8003a96:	9a05      	ldr	r2, [sp, #20]
 8003a98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b31      	cmp	r3, #49	@ 0x31
 8003aa0:	dc20      	bgt.n	8003ae4 <__ieee754_rem_pio2+0x274>
 8003aa2:	e9c4 0100 	strd	r0, r1, [r4]
 8003aa6:	46c2      	mov	sl, r8
 8003aa8:	46cb      	mov	fp, r9
 8003aaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003aae:	4650      	mov	r0, sl
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	4659      	mov	r1, fp
 8003ab6:	f7fc fbb3 	bl	8000220 <__aeabi_dsub>
 8003aba:	463b      	mov	r3, r7
 8003abc:	4632      	mov	r2, r6
 8003abe:	f7fc fbaf 	bl	8000220 <__aeabi_dsub>
 8003ac2:	9b04      	ldr	r3, [sp, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003aca:	f6bf af0e 	bge.w	80038ea <__ieee754_rem_pio2+0x7a>
 8003ace:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003ad2:	6063      	str	r3, [r4, #4]
 8003ad4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003ad8:	f8c4 8000 	str.w	r8, [r4]
 8003adc:	60a0      	str	r0, [r4, #8]
 8003ade:	60e3      	str	r3, [r4, #12]
 8003ae0:	426d      	negs	r5, r5
 8003ae2:	e702      	b.n	80038ea <__ieee754_rem_pio2+0x7a>
 8003ae4:	a326      	add	r3, pc, #152	@ (adr r3, 8003b80 <__ieee754_rem_pio2+0x310>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aee:	f7fc fd4f 	bl	8000590 <__aeabi_dmul>
 8003af2:	4606      	mov	r6, r0
 8003af4:	460f      	mov	r7, r1
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4640      	mov	r0, r8
 8003afc:	4649      	mov	r1, r9
 8003afe:	f7fc fb8f 	bl	8000220 <__aeabi_dsub>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4682      	mov	sl, r0
 8003b08:	468b      	mov	fp, r1
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	f7fc fb87 	bl	8000220 <__aeabi_dsub>
 8003b12:	4632      	mov	r2, r6
 8003b14:	463b      	mov	r3, r7
 8003b16:	f7fc fb83 	bl	8000220 <__aeabi_dsub>
 8003b1a:	a31b      	add	r3, pc, #108	@ (adr r3, 8003b88 <__ieee754_rem_pio2+0x318>)
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	4606      	mov	r6, r0
 8003b22:	460f      	mov	r7, r1
 8003b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b28:	f7fc fd32 	bl	8000590 <__aeabi_dmul>
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	463b      	mov	r3, r7
 8003b30:	f7fc fb76 	bl	8000220 <__aeabi_dsub>
 8003b34:	4606      	mov	r6, r0
 8003b36:	460f      	mov	r7, r1
 8003b38:	e764      	b.n	8003a04 <__ieee754_rem_pio2+0x194>
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba8 <__ieee754_rem_pio2+0x338>)
 8003b3c:	4598      	cmp	r8, r3
 8003b3e:	d935      	bls.n	8003bac <__ieee754_rem_pio2+0x33c>
 8003b40:	4632      	mov	r2, r6
 8003b42:	463b      	mov	r3, r7
 8003b44:	4630      	mov	r0, r6
 8003b46:	4639      	mov	r1, r7
 8003b48:	f7fc fb6a 	bl	8000220 <__aeabi_dsub>
 8003b4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003b50:	e9c4 0100 	strd	r0, r1, [r4]
 8003b54:	e69e      	b.n	8003894 <__ieee754_rem_pio2+0x24>
 8003b56:	bf00      	nop
 8003b58:	54400000 	.word	0x54400000
 8003b5c:	3ff921fb 	.word	0x3ff921fb
 8003b60:	1a626331 	.word	0x1a626331
 8003b64:	3dd0b461 	.word	0x3dd0b461
 8003b68:	1a600000 	.word	0x1a600000
 8003b6c:	3dd0b461 	.word	0x3dd0b461
 8003b70:	2e037073 	.word	0x2e037073
 8003b74:	3ba3198a 	.word	0x3ba3198a
 8003b78:	6dc9c883 	.word	0x6dc9c883
 8003b7c:	3fe45f30 	.word	0x3fe45f30
 8003b80:	2e000000 	.word	0x2e000000
 8003b84:	3ba3198a 	.word	0x3ba3198a
 8003b88:	252049c1 	.word	0x252049c1
 8003b8c:	397b839a 	.word	0x397b839a
 8003b90:	3fe921fb 	.word	0x3fe921fb
 8003b94:	4002d97b 	.word	0x4002d97b
 8003b98:	3ff921fb 	.word	0x3ff921fb
 8003b9c:	413921fb 	.word	0x413921fb
 8003ba0:	3fe00000 	.word	0x3fe00000
 8003ba4:	08004530 	.word	0x08004530
 8003ba8:	7fefffff 	.word	0x7fefffff
 8003bac:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003bb0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003bb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003bb8:	4630      	mov	r0, r6
 8003bba:	460f      	mov	r7, r1
 8003bbc:	f7fc ff82 	bl	8000ac4 <__aeabi_d2iz>
 8003bc0:	f7fc fc7c 	bl	80004bc <__aeabi_i2d>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4630      	mov	r0, r6
 8003bca:	4639      	mov	r1, r7
 8003bcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003bd0:	f7fc fb26 	bl	8000220 <__aeabi_dsub>
 8003bd4:	4b22      	ldr	r3, [pc, #136]	@ (8003c60 <__ieee754_rem_pio2+0x3f0>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f7fc fcda 	bl	8000590 <__aeabi_dmul>
 8003bdc:	460f      	mov	r7, r1
 8003bde:	4606      	mov	r6, r0
 8003be0:	f7fc ff70 	bl	8000ac4 <__aeabi_d2iz>
 8003be4:	f7fc fc6a 	bl	80004bc <__aeabi_i2d>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4630      	mov	r0, r6
 8003bee:	4639      	mov	r1, r7
 8003bf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003bf4:	f7fc fb14 	bl	8000220 <__aeabi_dsub>
 8003bf8:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <__ieee754_rem_pio2+0x3f0>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f7fc fcc8 	bl	8000590 <__aeabi_dmul>
 8003c00:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003c04:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003c08:	f04f 0803 	mov.w	r8, #3
 8003c0c:	2600      	movs	r6, #0
 8003c0e:	2700      	movs	r7, #0
 8003c10:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003c14:	4632      	mov	r2, r6
 8003c16:	463b      	mov	r3, r7
 8003c18:	46c2      	mov	sl, r8
 8003c1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003c1e:	f7fc ff1f 	bl	8000a60 <__aeabi_dcmpeq>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d1f4      	bne.n	8003c10 <__ieee754_rem_pio2+0x3a0>
 8003c26:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <__ieee754_rem_pio2+0x3f4>)
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	462a      	mov	r2, r5
 8003c30:	4653      	mov	r3, sl
 8003c32:	4621      	mov	r1, r4
 8003c34:	a806      	add	r0, sp, #24
 8003c36:	f000 f81f 	bl	8003c78 <__kernel_rem_pio2>
 8003c3a:	9b04      	ldr	r3, [sp, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	4605      	mov	r5, r0
 8003c40:	f6bf ae53 	bge.w	80038ea <__ieee754_rem_pio2+0x7a>
 8003c44:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003c48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003c4c:	e9c4 2300 	strd	r2, r3, [r4]
 8003c50:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003c54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003c58:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003c5c:	e740      	b.n	8003ae0 <__ieee754_rem_pio2+0x270>
 8003c5e:	bf00      	nop
 8003c60:	41700000 	.word	0x41700000
 8003c64:	080045b0 	.word	0x080045b0

08003c68 <fabs>:
 8003c68:	ec51 0b10 	vmov	r0, r1, d0
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003c72:	ec43 2b10 	vmov	d0, r2, r3
 8003c76:	4770      	bx	lr

08003c78 <__kernel_rem_pio2>:
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	ed2d 8b02 	vpush	{d8}
 8003c80:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003c84:	f112 0f14 	cmn.w	r2, #20
 8003c88:	9306      	str	r3, [sp, #24]
 8003c8a:	9104      	str	r1, [sp, #16]
 8003c8c:	4bc2      	ldr	r3, [pc, #776]	@ (8003f98 <__kernel_rem_pio2+0x320>)
 8003c8e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003c90:	9008      	str	r0, [sp, #32]
 8003c92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	9b06      	ldr	r3, [sp, #24]
 8003c9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c9e:	bfa8      	it	ge
 8003ca0:	1ed4      	subge	r4, r2, #3
 8003ca2:	9305      	str	r3, [sp, #20]
 8003ca4:	bfb2      	itee	lt
 8003ca6:	2400      	movlt	r4, #0
 8003ca8:	2318      	movge	r3, #24
 8003caa:	fb94 f4f3 	sdivge	r4, r4, r3
 8003cae:	f06f 0317 	mvn.w	r3, #23
 8003cb2:	fb04 3303 	mla	r3, r4, r3, r3
 8003cb6:	eb03 0b02 	add.w	fp, r3, r2
 8003cba:	9b00      	ldr	r3, [sp, #0]
 8003cbc:	9a05      	ldr	r2, [sp, #20]
 8003cbe:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8003f88 <__kernel_rem_pio2+0x310>
 8003cc2:	eb03 0802 	add.w	r8, r3, r2
 8003cc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003cc8:	1aa7      	subs	r7, r4, r2
 8003cca:	ae20      	add	r6, sp, #128	@ 0x80
 8003ccc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	4545      	cmp	r5, r8
 8003cd4:	dd12      	ble.n	8003cfc <__kernel_rem_pio2+0x84>
 8003cd6:	9b06      	ldr	r3, [sp, #24]
 8003cd8:	aa20      	add	r2, sp, #128	@ 0x80
 8003cda:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003cde:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003ce2:	2700      	movs	r7, #0
 8003ce4:	9b00      	ldr	r3, [sp, #0]
 8003ce6:	429f      	cmp	r7, r3
 8003ce8:	dc2e      	bgt.n	8003d48 <__kernel_rem_pio2+0xd0>
 8003cea:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8003f88 <__kernel_rem_pio2+0x310>
 8003cee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cf2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003cf6:	46a8      	mov	r8, r5
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	e01b      	b.n	8003d34 <__kernel_rem_pio2+0xbc>
 8003cfc:	42ef      	cmn	r7, r5
 8003cfe:	d407      	bmi.n	8003d10 <__kernel_rem_pio2+0x98>
 8003d00:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003d04:	f7fc fbda 	bl	80004bc <__aeabi_i2d>
 8003d08:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003d0c:	3501      	adds	r5, #1
 8003d0e:	e7e0      	b.n	8003cd2 <__kernel_rem_pio2+0x5a>
 8003d10:	ec51 0b18 	vmov	r0, r1, d8
 8003d14:	e7f8      	b.n	8003d08 <__kernel_rem_pio2+0x90>
 8003d16:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8003d1a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003d1e:	f7fc fc37 	bl	8000590 <__aeabi_dmul>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d2a:	f7fc fa7b 	bl	8000224 <__adddf3>
 8003d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d32:	3601      	adds	r6, #1
 8003d34:	9b05      	ldr	r3, [sp, #20]
 8003d36:	429e      	cmp	r6, r3
 8003d38:	dded      	ble.n	8003d16 <__kernel_rem_pio2+0x9e>
 8003d3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d3e:	3701      	adds	r7, #1
 8003d40:	ecaa 7b02 	vstmia	sl!, {d7}
 8003d44:	3508      	adds	r5, #8
 8003d46:	e7cd      	b.n	8003ce4 <__kernel_rem_pio2+0x6c>
 8003d48:	9b00      	ldr	r3, [sp, #0]
 8003d4a:	f8dd 8000 	ldr.w	r8, [sp]
 8003d4e:	aa0c      	add	r2, sp, #48	@ 0x30
 8003d50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003d54:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003d58:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003d62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d64:	ab98      	add	r3, sp, #608	@ 0x260
 8003d66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003d6a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8003d6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003d72:	ac0c      	add	r4, sp, #48	@ 0x30
 8003d74:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003d76:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8003d7a:	46a1      	mov	r9, r4
 8003d7c:	46c2      	mov	sl, r8
 8003d7e:	f1ba 0f00 	cmp.w	sl, #0
 8003d82:	dc77      	bgt.n	8003e74 <__kernel_rem_pio2+0x1fc>
 8003d84:	4658      	mov	r0, fp
 8003d86:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003d8a:	f000 fac5 	bl	8004318 <scalbn>
 8003d8e:	ec57 6b10 	vmov	r6, r7, d0
 8003d92:	2200      	movs	r2, #0
 8003d94:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003d98:	4630      	mov	r0, r6
 8003d9a:	4639      	mov	r1, r7
 8003d9c:	f7fc fbf8 	bl	8000590 <__aeabi_dmul>
 8003da0:	ec41 0b10 	vmov	d0, r0, r1
 8003da4:	f000 fb34 	bl	8004410 <floor>
 8003da8:	4b7c      	ldr	r3, [pc, #496]	@ (8003f9c <__kernel_rem_pio2+0x324>)
 8003daa:	ec51 0b10 	vmov	r0, r1, d0
 8003dae:	2200      	movs	r2, #0
 8003db0:	f7fc fbee 	bl	8000590 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4630      	mov	r0, r6
 8003dba:	4639      	mov	r1, r7
 8003dbc:	f7fc fa30 	bl	8000220 <__aeabi_dsub>
 8003dc0:	460f      	mov	r7, r1
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	f7fc fe7e 	bl	8000ac4 <__aeabi_d2iz>
 8003dc8:	9002      	str	r0, [sp, #8]
 8003dca:	f7fc fb77 	bl	80004bc <__aeabi_i2d>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	4639      	mov	r1, r7
 8003dd6:	f7fc fa23 	bl	8000220 <__aeabi_dsub>
 8003dda:	f1bb 0f00 	cmp.w	fp, #0
 8003dde:	4606      	mov	r6, r0
 8003de0:	460f      	mov	r7, r1
 8003de2:	dd6c      	ble.n	8003ebe <__kernel_rem_pio2+0x246>
 8003de4:	f108 31ff 	add.w	r1, r8, #4294967295
 8003de8:	ab0c      	add	r3, sp, #48	@ 0x30
 8003dea:	9d02      	ldr	r5, [sp, #8]
 8003dec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003df0:	f1cb 0018 	rsb	r0, fp, #24
 8003df4:	fa43 f200 	asr.w	r2, r3, r0
 8003df8:	4415      	add	r5, r2
 8003dfa:	4082      	lsls	r2, r0
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	aa0c      	add	r2, sp, #48	@ 0x30
 8003e00:	9502      	str	r5, [sp, #8]
 8003e02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003e06:	f1cb 0217 	rsb	r2, fp, #23
 8003e0a:	fa43 f902 	asr.w	r9, r3, r2
 8003e0e:	f1b9 0f00 	cmp.w	r9, #0
 8003e12:	dd64      	ble.n	8003ede <__kernel_rem_pio2+0x266>
 8003e14:	9b02      	ldr	r3, [sp, #8]
 8003e16:	2200      	movs	r2, #0
 8003e18:	3301      	adds	r3, #1
 8003e1a:	9302      	str	r3, [sp, #8]
 8003e1c:	4615      	mov	r5, r2
 8003e1e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003e22:	4590      	cmp	r8, r2
 8003e24:	f300 80a1 	bgt.w	8003f6a <__kernel_rem_pio2+0x2f2>
 8003e28:	f1bb 0f00 	cmp.w	fp, #0
 8003e2c:	dd07      	ble.n	8003e3e <__kernel_rem_pio2+0x1c6>
 8003e2e:	f1bb 0f01 	cmp.w	fp, #1
 8003e32:	f000 80c1 	beq.w	8003fb8 <__kernel_rem_pio2+0x340>
 8003e36:	f1bb 0f02 	cmp.w	fp, #2
 8003e3a:	f000 80c8 	beq.w	8003fce <__kernel_rem_pio2+0x356>
 8003e3e:	f1b9 0f02 	cmp.w	r9, #2
 8003e42:	d14c      	bne.n	8003ede <__kernel_rem_pio2+0x266>
 8003e44:	4632      	mov	r2, r6
 8003e46:	463b      	mov	r3, r7
 8003e48:	4955      	ldr	r1, [pc, #340]	@ (8003fa0 <__kernel_rem_pio2+0x328>)
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	f7fc f9e8 	bl	8000220 <__aeabi_dsub>
 8003e50:	4606      	mov	r6, r0
 8003e52:	460f      	mov	r7, r1
 8003e54:	2d00      	cmp	r5, #0
 8003e56:	d042      	beq.n	8003ede <__kernel_rem_pio2+0x266>
 8003e58:	4658      	mov	r0, fp
 8003e5a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8003f90 <__kernel_rem_pio2+0x318>
 8003e5e:	f000 fa5b 	bl	8004318 <scalbn>
 8003e62:	4630      	mov	r0, r6
 8003e64:	4639      	mov	r1, r7
 8003e66:	ec53 2b10 	vmov	r2, r3, d0
 8003e6a:	f7fc f9d9 	bl	8000220 <__aeabi_dsub>
 8003e6e:	4606      	mov	r6, r0
 8003e70:	460f      	mov	r7, r1
 8003e72:	e034      	b.n	8003ede <__kernel_rem_pio2+0x266>
 8003e74:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa4 <__kernel_rem_pio2+0x32c>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e7c:	f7fc fb88 	bl	8000590 <__aeabi_dmul>
 8003e80:	f7fc fe20 	bl	8000ac4 <__aeabi_d2iz>
 8003e84:	f7fc fb1a 	bl	80004bc <__aeabi_i2d>
 8003e88:	4b47      	ldr	r3, [pc, #284]	@ (8003fa8 <__kernel_rem_pio2+0x330>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	460f      	mov	r7, r1
 8003e90:	f7fc fb7e 	bl	8000590 <__aeabi_dmul>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e9c:	f7fc f9c0 	bl	8000220 <__aeabi_dsub>
 8003ea0:	f7fc fe10 	bl	8000ac4 <__aeabi_d2iz>
 8003ea4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003ea8:	f849 0b04 	str.w	r0, [r9], #4
 8003eac:	4639      	mov	r1, r7
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7fc f9b8 	bl	8000224 <__adddf3>
 8003eb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ebc:	e75f      	b.n	8003d7e <__kernel_rem_pio2+0x106>
 8003ebe:	d107      	bne.n	8003ed0 <__kernel_rem_pio2+0x258>
 8003ec0:	f108 33ff 	add.w	r3, r8, #4294967295
 8003ec4:	aa0c      	add	r2, sp, #48	@ 0x30
 8003ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eca:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003ece:	e79e      	b.n	8003e0e <__kernel_rem_pio2+0x196>
 8003ed0:	4b36      	ldr	r3, [pc, #216]	@ (8003fac <__kernel_rem_pio2+0x334>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f7fc fde2 	bl	8000a9c <__aeabi_dcmpge>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d143      	bne.n	8003f64 <__kernel_rem_pio2+0x2ec>
 8003edc:	4681      	mov	r9, r0
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	4639      	mov	r1, r7
 8003ee6:	f7fc fdbb 	bl	8000a60 <__aeabi_dcmpeq>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	f000 80c1 	beq.w	8004072 <__kernel_rem_pio2+0x3fa>
 8003ef0:	f108 33ff 	add.w	r3, r8, #4294967295
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	9900      	ldr	r1, [sp, #0]
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	da70      	bge.n	8003fde <__kernel_rem_pio2+0x366>
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	f000 808b 	beq.w	8004018 <__kernel_rem_pio2+0x3a0>
 8003f02:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f06:	ab0c      	add	r3, sp, #48	@ 0x30
 8003f08:	f1ab 0b18 	sub.w	fp, fp, #24
 8003f0c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f6      	beq.n	8003f02 <__kernel_rem_pio2+0x28a>
 8003f14:	4658      	mov	r0, fp
 8003f16:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8003f90 <__kernel_rem_pio2+0x318>
 8003f1a:	f000 f9fd 	bl	8004318 <scalbn>
 8003f1e:	f108 0301 	add.w	r3, r8, #1
 8003f22:	00da      	lsls	r2, r3, #3
 8003f24:	9205      	str	r2, [sp, #20]
 8003f26:	ec55 4b10 	vmov	r4, r5, d0
 8003f2a:	aa70      	add	r2, sp, #448	@ 0x1c0
 8003f2c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8003fa4 <__kernel_rem_pio2+0x32c>
 8003f30:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8003f34:	4646      	mov	r6, r8
 8003f36:	f04f 0a00 	mov.w	sl, #0
 8003f3a:	2e00      	cmp	r6, #0
 8003f3c:	f280 80d1 	bge.w	80040e2 <__kernel_rem_pio2+0x46a>
 8003f40:	4644      	mov	r4, r8
 8003f42:	2c00      	cmp	r4, #0
 8003f44:	f2c0 80ff 	blt.w	8004146 <__kernel_rem_pio2+0x4ce>
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <__kernel_rem_pio2+0x338>)
 8003f4a:	461f      	mov	r7, r3
 8003f4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003f4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003f52:	9306      	str	r3, [sp, #24]
 8003f54:	f04f 0a00 	mov.w	sl, #0
 8003f58:	f04f 0b00 	mov.w	fp, #0
 8003f5c:	2600      	movs	r6, #0
 8003f5e:	eba8 0504 	sub.w	r5, r8, r4
 8003f62:	e0e4      	b.n	800412e <__kernel_rem_pio2+0x4b6>
 8003f64:	f04f 0902 	mov.w	r9, #2
 8003f68:	e754      	b.n	8003e14 <__kernel_rem_pio2+0x19c>
 8003f6a:	f854 3b04 	ldr.w	r3, [r4], #4
 8003f6e:	bb0d      	cbnz	r5, 8003fb4 <__kernel_rem_pio2+0x33c>
 8003f70:	b123      	cbz	r3, 8003f7c <__kernel_rem_pio2+0x304>
 8003f72:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003f76:	f844 3c04 	str.w	r3, [r4, #-4]
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	3201      	adds	r2, #1
 8003f7e:	461d      	mov	r5, r3
 8003f80:	e74f      	b.n	8003e22 <__kernel_rem_pio2+0x1aa>
 8003f82:	bf00      	nop
 8003f84:	f3af 8000 	nop.w
	...
 8003f94:	3ff00000 	.word	0x3ff00000
 8003f98:	080046f8 	.word	0x080046f8
 8003f9c:	40200000 	.word	0x40200000
 8003fa0:	3ff00000 	.word	0x3ff00000
 8003fa4:	3e700000 	.word	0x3e700000
 8003fa8:	41700000 	.word	0x41700000
 8003fac:	3fe00000 	.word	0x3fe00000
 8003fb0:	080046b8 	.word	0x080046b8
 8003fb4:	1acb      	subs	r3, r1, r3
 8003fb6:	e7de      	b.n	8003f76 <__kernel_rem_pio2+0x2fe>
 8003fb8:	f108 32ff 	add.w	r2, r8, #4294967295
 8003fbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8003fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003fc6:	a90c      	add	r1, sp, #48	@ 0x30
 8003fc8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003fcc:	e737      	b.n	8003e3e <__kernel_rem_pio2+0x1c6>
 8003fce:	f108 32ff 	add.w	r2, r8, #4294967295
 8003fd2:	ab0c      	add	r3, sp, #48	@ 0x30
 8003fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003fdc:	e7f3      	b.n	8003fc6 <__kernel_rem_pio2+0x34e>
 8003fde:	a90c      	add	r1, sp, #48	@ 0x30
 8003fe0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	e785      	b.n	8003ef6 <__kernel_rem_pio2+0x27e>
 8003fea:	3401      	adds	r4, #1
 8003fec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	d0fa      	beq.n	8003fea <__kernel_rem_pio2+0x372>
 8003ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ff6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003ffa:	eb0d 0503 	add.w	r5, sp, r3
 8003ffe:	9b06      	ldr	r3, [sp, #24]
 8004000:	aa20      	add	r2, sp, #128	@ 0x80
 8004002:	4443      	add	r3, r8
 8004004:	f108 0701 	add.w	r7, r8, #1
 8004008:	3d98      	subs	r5, #152	@ 0x98
 800400a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800400e:	4444      	add	r4, r8
 8004010:	42bc      	cmp	r4, r7
 8004012:	da04      	bge.n	800401e <__kernel_rem_pio2+0x3a6>
 8004014:	46a0      	mov	r8, r4
 8004016:	e6a2      	b.n	8003d5e <__kernel_rem_pio2+0xe6>
 8004018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800401a:	2401      	movs	r4, #1
 800401c:	e7e6      	b.n	8003fec <__kernel_rem_pio2+0x374>
 800401e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004020:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004024:	f7fc fa4a 	bl	80004bc <__aeabi_i2d>
 8004028:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80042e8 <__kernel_rem_pio2+0x670>
 800402c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004030:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004038:	46b2      	mov	sl, r6
 800403a:	f04f 0800 	mov.w	r8, #0
 800403e:	9b05      	ldr	r3, [sp, #20]
 8004040:	4598      	cmp	r8, r3
 8004042:	dd05      	ble.n	8004050 <__kernel_rem_pio2+0x3d8>
 8004044:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004048:	3701      	adds	r7, #1
 800404a:	eca5 7b02 	vstmia	r5!, {d7}
 800404e:	e7df      	b.n	8004010 <__kernel_rem_pio2+0x398>
 8004050:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004054:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004058:	f7fc fa9a 	bl	8000590 <__aeabi_dmul>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004064:	f7fc f8de 	bl	8000224 <__adddf3>
 8004068:	f108 0801 	add.w	r8, r8, #1
 800406c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004070:	e7e5      	b.n	800403e <__kernel_rem_pio2+0x3c6>
 8004072:	f1cb 0000 	rsb	r0, fp, #0
 8004076:	ec47 6b10 	vmov	d0, r6, r7
 800407a:	f000 f94d 	bl	8004318 <scalbn>
 800407e:	ec55 4b10 	vmov	r4, r5, d0
 8004082:	4b9b      	ldr	r3, [pc, #620]	@ (80042f0 <__kernel_rem_pio2+0x678>)
 8004084:	2200      	movs	r2, #0
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	f7fc fd07 	bl	8000a9c <__aeabi_dcmpge>
 800408e:	b300      	cbz	r0, 80040d2 <__kernel_rem_pio2+0x45a>
 8004090:	4b98      	ldr	r3, [pc, #608]	@ (80042f4 <__kernel_rem_pio2+0x67c>)
 8004092:	2200      	movs	r2, #0
 8004094:	4620      	mov	r0, r4
 8004096:	4629      	mov	r1, r5
 8004098:	f7fc fa7a 	bl	8000590 <__aeabi_dmul>
 800409c:	f7fc fd12 	bl	8000ac4 <__aeabi_d2iz>
 80040a0:	4606      	mov	r6, r0
 80040a2:	f7fc fa0b 	bl	80004bc <__aeabi_i2d>
 80040a6:	4b92      	ldr	r3, [pc, #584]	@ (80042f0 <__kernel_rem_pio2+0x678>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	f7fc fa71 	bl	8000590 <__aeabi_dmul>
 80040ae:	460b      	mov	r3, r1
 80040b0:	4602      	mov	r2, r0
 80040b2:	4629      	mov	r1, r5
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7fc f8b3 	bl	8000220 <__aeabi_dsub>
 80040ba:	f7fc fd03 	bl	8000ac4 <__aeabi_d2iz>
 80040be:	ab0c      	add	r3, sp, #48	@ 0x30
 80040c0:	f10b 0b18 	add.w	fp, fp, #24
 80040c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80040c8:	f108 0801 	add.w	r8, r8, #1
 80040cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80040d0:	e720      	b.n	8003f14 <__kernel_rem_pio2+0x29c>
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f7fc fcf5 	bl	8000ac4 <__aeabi_d2iz>
 80040da:	ab0c      	add	r3, sp, #48	@ 0x30
 80040dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80040e0:	e718      	b.n	8003f14 <__kernel_rem_pio2+0x29c>
 80040e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80040e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80040e8:	f7fc f9e8 	bl	80004bc <__aeabi_i2d>
 80040ec:	4622      	mov	r2, r4
 80040ee:	462b      	mov	r3, r5
 80040f0:	f7fc fa4e 	bl	8000590 <__aeabi_dmul>
 80040f4:	4652      	mov	r2, sl
 80040f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80040fa:	465b      	mov	r3, fp
 80040fc:	4620      	mov	r0, r4
 80040fe:	4629      	mov	r1, r5
 8004100:	f7fc fa46 	bl	8000590 <__aeabi_dmul>
 8004104:	3e01      	subs	r6, #1
 8004106:	4604      	mov	r4, r0
 8004108:	460d      	mov	r5, r1
 800410a:	e716      	b.n	8003f3a <__kernel_rem_pio2+0x2c2>
 800410c:	9906      	ldr	r1, [sp, #24]
 800410e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004112:	9106      	str	r1, [sp, #24]
 8004114:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004118:	f7fc fa3a 	bl	8000590 <__aeabi_dmul>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4650      	mov	r0, sl
 8004122:	4659      	mov	r1, fp
 8004124:	f7fc f87e 	bl	8000224 <__adddf3>
 8004128:	3601      	adds	r6, #1
 800412a:	4682      	mov	sl, r0
 800412c:	468b      	mov	fp, r1
 800412e:	9b00      	ldr	r3, [sp, #0]
 8004130:	429e      	cmp	r6, r3
 8004132:	dc01      	bgt.n	8004138 <__kernel_rem_pio2+0x4c0>
 8004134:	42ae      	cmp	r6, r5
 8004136:	dde9      	ble.n	800410c <__kernel_rem_pio2+0x494>
 8004138:	ab48      	add	r3, sp, #288	@ 0x120
 800413a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800413e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004142:	3c01      	subs	r4, #1
 8004144:	e6fd      	b.n	8003f42 <__kernel_rem_pio2+0x2ca>
 8004146:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004148:	2b02      	cmp	r3, #2
 800414a:	dc0b      	bgt.n	8004164 <__kernel_rem_pio2+0x4ec>
 800414c:	2b00      	cmp	r3, #0
 800414e:	dc35      	bgt.n	80041bc <__kernel_rem_pio2+0x544>
 8004150:	d059      	beq.n	8004206 <__kernel_rem_pio2+0x58e>
 8004152:	9b02      	ldr	r3, [sp, #8]
 8004154:	f003 0007 	and.w	r0, r3, #7
 8004158:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800415c:	ecbd 8b02 	vpop	{d8}
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004164:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004166:	2b03      	cmp	r3, #3
 8004168:	d1f3      	bne.n	8004152 <__kernel_rem_pio2+0x4da>
 800416a:	9b05      	ldr	r3, [sp, #20]
 800416c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004170:	eb0d 0403 	add.w	r4, sp, r3
 8004174:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004178:	4625      	mov	r5, r4
 800417a:	46c2      	mov	sl, r8
 800417c:	f1ba 0f00 	cmp.w	sl, #0
 8004180:	dc69      	bgt.n	8004256 <__kernel_rem_pio2+0x5de>
 8004182:	4645      	mov	r5, r8
 8004184:	2d01      	cmp	r5, #1
 8004186:	f300 8087 	bgt.w	8004298 <__kernel_rem_pio2+0x620>
 800418a:	9c05      	ldr	r4, [sp, #20]
 800418c:	ab48      	add	r3, sp, #288	@ 0x120
 800418e:	441c      	add	r4, r3
 8004190:	2000      	movs	r0, #0
 8004192:	2100      	movs	r1, #0
 8004194:	f1b8 0f01 	cmp.w	r8, #1
 8004198:	f300 809c 	bgt.w	80042d4 <__kernel_rem_pio2+0x65c>
 800419c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80041a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80041a4:	f1b9 0f00 	cmp.w	r9, #0
 80041a8:	f040 80a6 	bne.w	80042f8 <__kernel_rem_pio2+0x680>
 80041ac:	9b04      	ldr	r3, [sp, #16]
 80041ae:	e9c3 5600 	strd	r5, r6, [r3]
 80041b2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80041b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80041ba:	e7ca      	b.n	8004152 <__kernel_rem_pio2+0x4da>
 80041bc:	9d05      	ldr	r5, [sp, #20]
 80041be:	ab48      	add	r3, sp, #288	@ 0x120
 80041c0:	441d      	add	r5, r3
 80041c2:	4644      	mov	r4, r8
 80041c4:	2000      	movs	r0, #0
 80041c6:	2100      	movs	r1, #0
 80041c8:	2c00      	cmp	r4, #0
 80041ca:	da35      	bge.n	8004238 <__kernel_rem_pio2+0x5c0>
 80041cc:	f1b9 0f00 	cmp.w	r9, #0
 80041d0:	d038      	beq.n	8004244 <__kernel_rem_pio2+0x5cc>
 80041d2:	4602      	mov	r2, r0
 80041d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80041d8:	9c04      	ldr	r4, [sp, #16]
 80041da:	e9c4 2300 	strd	r2, r3, [r4]
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80041e6:	f7fc f81b 	bl	8000220 <__aeabi_dsub>
 80041ea:	ad4a      	add	r5, sp, #296	@ 0x128
 80041ec:	2401      	movs	r4, #1
 80041ee:	45a0      	cmp	r8, r4
 80041f0:	da2b      	bge.n	800424a <__kernel_rem_pio2+0x5d2>
 80041f2:	f1b9 0f00 	cmp.w	r9, #0
 80041f6:	d002      	beq.n	80041fe <__kernel_rem_pio2+0x586>
 80041f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80041fc:	4619      	mov	r1, r3
 80041fe:	9b04      	ldr	r3, [sp, #16]
 8004200:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004204:	e7a5      	b.n	8004152 <__kernel_rem_pio2+0x4da>
 8004206:	9c05      	ldr	r4, [sp, #20]
 8004208:	ab48      	add	r3, sp, #288	@ 0x120
 800420a:	441c      	add	r4, r3
 800420c:	2000      	movs	r0, #0
 800420e:	2100      	movs	r1, #0
 8004210:	f1b8 0f00 	cmp.w	r8, #0
 8004214:	da09      	bge.n	800422a <__kernel_rem_pio2+0x5b2>
 8004216:	f1b9 0f00 	cmp.w	r9, #0
 800421a:	d002      	beq.n	8004222 <__kernel_rem_pio2+0x5aa>
 800421c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004220:	4619      	mov	r1, r3
 8004222:	9b04      	ldr	r3, [sp, #16]
 8004224:	e9c3 0100 	strd	r0, r1, [r3]
 8004228:	e793      	b.n	8004152 <__kernel_rem_pio2+0x4da>
 800422a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800422e:	f7fb fff9 	bl	8000224 <__adddf3>
 8004232:	f108 38ff 	add.w	r8, r8, #4294967295
 8004236:	e7eb      	b.n	8004210 <__kernel_rem_pio2+0x598>
 8004238:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800423c:	f7fb fff2 	bl	8000224 <__adddf3>
 8004240:	3c01      	subs	r4, #1
 8004242:	e7c1      	b.n	80041c8 <__kernel_rem_pio2+0x550>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	e7c6      	b.n	80041d8 <__kernel_rem_pio2+0x560>
 800424a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800424e:	f7fb ffe9 	bl	8000224 <__adddf3>
 8004252:	3401      	adds	r4, #1
 8004254:	e7cb      	b.n	80041ee <__kernel_rem_pio2+0x576>
 8004256:	ed35 7b02 	vldmdb	r5!, {d7}
 800425a:	ed8d 7b00 	vstr	d7, [sp]
 800425e:	ed95 7b02 	vldr	d7, [r5, #8]
 8004262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004266:	ec53 2b17 	vmov	r2, r3, d7
 800426a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800426e:	f7fb ffd9 	bl	8000224 <__adddf3>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4606      	mov	r6, r0
 8004278:	460f      	mov	r7, r1
 800427a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800427e:	f7fb ffcf 	bl	8000220 <__aeabi_dsub>
 8004282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004286:	f7fb ffcd 	bl	8000224 <__adddf3>
 800428a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800428e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004292:	e9c5 6700 	strd	r6, r7, [r5]
 8004296:	e771      	b.n	800417c <__kernel_rem_pio2+0x504>
 8004298:	ed34 7b02 	vldmdb	r4!, {d7}
 800429c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80042a0:	ec51 0b17 	vmov	r0, r1, d7
 80042a4:	4652      	mov	r2, sl
 80042a6:	465b      	mov	r3, fp
 80042a8:	ed8d 7b00 	vstr	d7, [sp]
 80042ac:	f7fb ffba 	bl	8000224 <__adddf3>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4606      	mov	r6, r0
 80042b6:	460f      	mov	r7, r1
 80042b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042bc:	f7fb ffb0 	bl	8000220 <__aeabi_dsub>
 80042c0:	4652      	mov	r2, sl
 80042c2:	465b      	mov	r3, fp
 80042c4:	f7fb ffae 	bl	8000224 <__adddf3>
 80042c8:	3d01      	subs	r5, #1
 80042ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80042ce:	e9c4 6700 	strd	r6, r7, [r4]
 80042d2:	e757      	b.n	8004184 <__kernel_rem_pio2+0x50c>
 80042d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80042d8:	f7fb ffa4 	bl	8000224 <__adddf3>
 80042dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80042e0:	e758      	b.n	8004194 <__kernel_rem_pio2+0x51c>
 80042e2:	bf00      	nop
 80042e4:	f3af 8000 	nop.w
	...
 80042f0:	41700000 	.word	0x41700000
 80042f4:	3e700000 	.word	0x3e700000
 80042f8:	9b04      	ldr	r3, [sp, #16]
 80042fa:	9a04      	ldr	r2, [sp, #16]
 80042fc:	601d      	str	r5, [r3, #0]
 80042fe:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8004302:	605c      	str	r4, [r3, #4]
 8004304:	609f      	str	r7, [r3, #8]
 8004306:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800430a:	60d3      	str	r3, [r2, #12]
 800430c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004310:	6110      	str	r0, [r2, #16]
 8004312:	6153      	str	r3, [r2, #20]
 8004314:	e71d      	b.n	8004152 <__kernel_rem_pio2+0x4da>
 8004316:	bf00      	nop

08004318 <scalbn>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	ec55 4b10 	vmov	r4, r5, d0
 800431e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004322:	4606      	mov	r6, r0
 8004324:	462b      	mov	r3, r5
 8004326:	b991      	cbnz	r1, 800434e <scalbn+0x36>
 8004328:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800432c:	4323      	orrs	r3, r4
 800432e:	d03b      	beq.n	80043a8 <scalbn+0x90>
 8004330:	4b33      	ldr	r3, [pc, #204]	@ (8004400 <scalbn+0xe8>)
 8004332:	4620      	mov	r0, r4
 8004334:	4629      	mov	r1, r5
 8004336:	2200      	movs	r2, #0
 8004338:	f7fc f92a 	bl	8000590 <__aeabi_dmul>
 800433c:	4b31      	ldr	r3, [pc, #196]	@ (8004404 <scalbn+0xec>)
 800433e:	429e      	cmp	r6, r3
 8004340:	4604      	mov	r4, r0
 8004342:	460d      	mov	r5, r1
 8004344:	da0f      	bge.n	8004366 <scalbn+0x4e>
 8004346:	a326      	add	r3, pc, #152	@ (adr r3, 80043e0 <scalbn+0xc8>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	e01e      	b.n	800438c <scalbn+0x74>
 800434e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004352:	4291      	cmp	r1, r2
 8004354:	d10b      	bne.n	800436e <scalbn+0x56>
 8004356:	4622      	mov	r2, r4
 8004358:	4620      	mov	r0, r4
 800435a:	4629      	mov	r1, r5
 800435c:	f7fb ff62 	bl	8000224 <__adddf3>
 8004360:	4604      	mov	r4, r0
 8004362:	460d      	mov	r5, r1
 8004364:	e020      	b.n	80043a8 <scalbn+0x90>
 8004366:	460b      	mov	r3, r1
 8004368:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800436c:	3936      	subs	r1, #54	@ 0x36
 800436e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004372:	4296      	cmp	r6, r2
 8004374:	dd0d      	ble.n	8004392 <scalbn+0x7a>
 8004376:	2d00      	cmp	r5, #0
 8004378:	a11b      	add	r1, pc, #108	@ (adr r1, 80043e8 <scalbn+0xd0>)
 800437a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800437e:	da02      	bge.n	8004386 <scalbn+0x6e>
 8004380:	a11b      	add	r1, pc, #108	@ (adr r1, 80043f0 <scalbn+0xd8>)
 8004382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004386:	a318      	add	r3, pc, #96	@ (adr r3, 80043e8 <scalbn+0xd0>)
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f7fc f900 	bl	8000590 <__aeabi_dmul>
 8004390:	e7e6      	b.n	8004360 <scalbn+0x48>
 8004392:	1872      	adds	r2, r6, r1
 8004394:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004398:	428a      	cmp	r2, r1
 800439a:	dcec      	bgt.n	8004376 <scalbn+0x5e>
 800439c:	2a00      	cmp	r2, #0
 800439e:	dd06      	ble.n	80043ae <scalbn+0x96>
 80043a0:	f36f 531e 	bfc	r3, #20, #11
 80043a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80043a8:	ec45 4b10 	vmov	d0, r4, r5
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
 80043ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80043b2:	da08      	bge.n	80043c6 <scalbn+0xae>
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	a10a      	add	r1, pc, #40	@ (adr r1, 80043e0 <scalbn+0xc8>)
 80043b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043bc:	dac3      	bge.n	8004346 <scalbn+0x2e>
 80043be:	a10e      	add	r1, pc, #56	@ (adr r1, 80043f8 <scalbn+0xe0>)
 80043c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043c4:	e7bf      	b.n	8004346 <scalbn+0x2e>
 80043c6:	3236      	adds	r2, #54	@ 0x36
 80043c8:	f36f 531e 	bfc	r3, #20, #11
 80043cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80043d0:	4620      	mov	r0, r4
 80043d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <scalbn+0xf0>)
 80043d4:	4629      	mov	r1, r5
 80043d6:	2200      	movs	r2, #0
 80043d8:	e7d8      	b.n	800438c <scalbn+0x74>
 80043da:	bf00      	nop
 80043dc:	f3af 8000 	nop.w
 80043e0:	c2f8f359 	.word	0xc2f8f359
 80043e4:	01a56e1f 	.word	0x01a56e1f
 80043e8:	8800759c 	.word	0x8800759c
 80043ec:	7e37e43c 	.word	0x7e37e43c
 80043f0:	8800759c 	.word	0x8800759c
 80043f4:	fe37e43c 	.word	0xfe37e43c
 80043f8:	c2f8f359 	.word	0xc2f8f359
 80043fc:	81a56e1f 	.word	0x81a56e1f
 8004400:	43500000 	.word	0x43500000
 8004404:	ffff3cb0 	.word	0xffff3cb0
 8004408:	3c900000 	.word	0x3c900000
 800440c:	00000000 	.word	0x00000000

08004410 <floor>:
 8004410:	ec51 0b10 	vmov	r0, r1, d0
 8004414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800441c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004420:	2e13      	cmp	r6, #19
 8004422:	460c      	mov	r4, r1
 8004424:	4605      	mov	r5, r0
 8004426:	4680      	mov	r8, r0
 8004428:	dc34      	bgt.n	8004494 <floor+0x84>
 800442a:	2e00      	cmp	r6, #0
 800442c:	da17      	bge.n	800445e <floor+0x4e>
 800442e:	a332      	add	r3, pc, #200	@ (adr r3, 80044f8 <floor+0xe8>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f7fb fef6 	bl	8000224 <__adddf3>
 8004438:	2200      	movs	r2, #0
 800443a:	2300      	movs	r3, #0
 800443c:	f7fc fb38 	bl	8000ab0 <__aeabi_dcmpgt>
 8004440:	b150      	cbz	r0, 8004458 <floor+0x48>
 8004442:	2c00      	cmp	r4, #0
 8004444:	da55      	bge.n	80044f2 <floor+0xe2>
 8004446:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800444a:	432c      	orrs	r4, r5
 800444c:	2500      	movs	r5, #0
 800444e:	42ac      	cmp	r4, r5
 8004450:	4c2b      	ldr	r4, [pc, #172]	@ (8004500 <floor+0xf0>)
 8004452:	bf08      	it	eq
 8004454:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004458:	4621      	mov	r1, r4
 800445a:	4628      	mov	r0, r5
 800445c:	e023      	b.n	80044a6 <floor+0x96>
 800445e:	4f29      	ldr	r7, [pc, #164]	@ (8004504 <floor+0xf4>)
 8004460:	4137      	asrs	r7, r6
 8004462:	ea01 0307 	and.w	r3, r1, r7
 8004466:	4303      	orrs	r3, r0
 8004468:	d01d      	beq.n	80044a6 <floor+0x96>
 800446a:	a323      	add	r3, pc, #140	@ (adr r3, 80044f8 <floor+0xe8>)
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fb fed8 	bl	8000224 <__adddf3>
 8004474:	2200      	movs	r2, #0
 8004476:	2300      	movs	r3, #0
 8004478:	f7fc fb1a 	bl	8000ab0 <__aeabi_dcmpgt>
 800447c:	2800      	cmp	r0, #0
 800447e:	d0eb      	beq.n	8004458 <floor+0x48>
 8004480:	2c00      	cmp	r4, #0
 8004482:	bfbe      	ittt	lt
 8004484:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004488:	4133      	asrlt	r3, r6
 800448a:	18e4      	addlt	r4, r4, r3
 800448c:	ea24 0407 	bic.w	r4, r4, r7
 8004490:	2500      	movs	r5, #0
 8004492:	e7e1      	b.n	8004458 <floor+0x48>
 8004494:	2e33      	cmp	r6, #51	@ 0x33
 8004496:	dd0a      	ble.n	80044ae <floor+0x9e>
 8004498:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800449c:	d103      	bne.n	80044a6 <floor+0x96>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	f7fb febf 	bl	8000224 <__adddf3>
 80044a6:	ec41 0b10 	vmov	d0, r0, r1
 80044aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80044b2:	f04f 37ff 	mov.w	r7, #4294967295
 80044b6:	40df      	lsrs	r7, r3
 80044b8:	4207      	tst	r7, r0
 80044ba:	d0f4      	beq.n	80044a6 <floor+0x96>
 80044bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80044f8 <floor+0xe8>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fb feaf 	bl	8000224 <__adddf3>
 80044c6:	2200      	movs	r2, #0
 80044c8:	2300      	movs	r3, #0
 80044ca:	f7fc faf1 	bl	8000ab0 <__aeabi_dcmpgt>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d0c2      	beq.n	8004458 <floor+0x48>
 80044d2:	2c00      	cmp	r4, #0
 80044d4:	da0a      	bge.n	80044ec <floor+0xdc>
 80044d6:	2e14      	cmp	r6, #20
 80044d8:	d101      	bne.n	80044de <floor+0xce>
 80044da:	3401      	adds	r4, #1
 80044dc:	e006      	b.n	80044ec <floor+0xdc>
 80044de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80044e2:	2301      	movs	r3, #1
 80044e4:	40b3      	lsls	r3, r6
 80044e6:	441d      	add	r5, r3
 80044e8:	4545      	cmp	r5, r8
 80044ea:	d3f6      	bcc.n	80044da <floor+0xca>
 80044ec:	ea25 0507 	bic.w	r5, r5, r7
 80044f0:	e7b2      	b.n	8004458 <floor+0x48>
 80044f2:	2500      	movs	r5, #0
 80044f4:	462c      	mov	r4, r5
 80044f6:	e7af      	b.n	8004458 <floor+0x48>
 80044f8:	8800759c 	.word	0x8800759c
 80044fc:	7e37e43c 	.word	0x7e37e43c
 8004500:	bff00000 	.word	0xbff00000
 8004504:	000fffff 	.word	0x000fffff

08004508 <_init>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	bf00      	nop
 800450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450e:	bc08      	pop	{r3}
 8004510:	469e      	mov	lr, r3
 8004512:	4770      	bx	lr

08004514 <_fini>:
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	bf00      	nop
 8004518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451a:	bc08      	pop	{r3}
 800451c:	469e      	mov	lr, r3
 800451e:	4770      	bx	lr
