
G474RE_Test_AFSK_Data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004518  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  080046f0  080046f0  000056f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004adc  08004adc  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004adc  08004adc  00005adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ae4  08004ae4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae4  08004ae4  00005ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ae8  08004ae8  00005ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004aec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000010  08004afc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08004afc  00006384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daa9  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cc  00000000  00000000  00013ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00015bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aff  00000000  00000000  00016a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ed3  00000000  00000000  000174ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eedf  00000000  00000000  0003d3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f867a  00000000  00000000  0004c2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014492b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f74  00000000  00000000  00144970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001488e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080046d8 	.word	0x080046d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080046d8 	.word	0x080046d8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <crc8>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static uint8_t crc8(uint8_t crc, uint8_t data) {
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
	crc ^= data;
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	4053      	eors	r3, r2
 8000b8a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e013      	b.n	8000bba <crc8+0x46>
		crc = (crc & 0x80) ? ((crc << 1) ^ 0x07) : (crc << 1);
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da08      	bge.n	8000bac <crc8+0x38>
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	f083 0307 	eor.w	r3, r3, #7
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	e002      	b.n	8000bb2 <crc8+0x3e>
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2b07      	cmp	r3, #7
 8000bbe:	d9e8      	bls.n	8000b92 <crc8+0x1e>
	return crc;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <build_frame>:

void build_frame(const uint8_t *data, uint8_t len) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	uint8_t idx = 0, crc = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
 8000be0:	2300      	movs	r3, #0
 8000be2:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < PREAMBLE_COUNT; i++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	e010      	b.n	8000c0c <build_frame+0x3c>
		tx_frame[idx++] = PREAMBLE_BYTE;
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	75fa      	strb	r2, [r7, #23]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <build_frame+0xe4>)
 8000bf4:	2155      	movs	r1, #85	@ 0x55
 8000bf6:	5499      	strb	r1, [r3, r2]
		crc = crc8(crc, PREAMBLE_BYTE);
 8000bf8:	7dbb      	ldrb	r3, [r7, #22]
 8000bfa:	2155      	movs	r1, #85	@ 0x55
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffb9 	bl	8000b74 <crc8>
 8000c02:	4603      	mov	r3, r0
 8000c04:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < PREAMBLE_COUNT; i++) {
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	ddeb      	ble.n	8000bea <build_frame+0x1a>
	}
	tx_frame[idx++] = SYNC_BYTE;
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	75fa      	strb	r2, [r7, #23]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <build_frame+0xe4>)
 8000c1c:	21d5      	movs	r1, #213	@ 0xd5
 8000c1e:	5499      	strb	r1, [r3, r2]
	crc = crc8(crc, SYNC_BYTE);
 8000c20:	7dbb      	ldrb	r3, [r7, #22]
 8000c22:	21d5      	movs	r1, #213	@ 0xd5
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ffa5 	bl	8000b74 <crc8>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	75bb      	strb	r3, [r7, #22]
	tx_frame[idx++] = len;
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	75fa      	strb	r2, [r7, #23]
 8000c34:	4619      	mov	r1, r3
 8000c36:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb4 <build_frame+0xe4>)
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	5453      	strb	r3, [r2, r1]
	crc = crc8(crc, len);
 8000c3c:	78fa      	ldrb	r2, [r7, #3]
 8000c3e:	7dbb      	ldrb	r3, [r7, #22]
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff96 	bl	8000b74 <crc8>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < len; i++) {
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e017      	b.n	8000c82 <build_frame+0xb2>
		tx_frame[idx++] = data[i];
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	441a      	add	r2, r3
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	1c59      	adds	r1, r3, #1
 8000c5c:	75f9      	strb	r1, [r7, #23]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <build_frame+0xe4>)
 8000c64:	545a      	strb	r2, [r3, r1]
		crc = crc8(crc, data[i]);
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	7dbb      	ldrb	r3, [r7, #22]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff7e 	bl	8000b74 <crc8>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < len; i++) {
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3e3      	bcc.n	8000c52 <build_frame+0x82>
	}
	tx_frame[idx++] = crc;
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	75fa      	strb	r2, [r7, #23]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <build_frame+0xe4>)
 8000c94:	7dbb      	ldrb	r3, [r7, #22]
 8000c96:	5453      	strb	r3, [r2, r1]
	tx_len = idx;
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <build_frame+0xe8>)
 8000c9a:	7dfb      	ldrb	r3, [r7, #23]
 8000c9c:	7013      	strb	r3, [r2, #0]
	tx_bit_idx = 0;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <build_frame+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
	tx_running = 1;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <build_frame+0xf0>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200002f4 	.word	0x200002f4
 8000cb8:	20000374 	.word	0x20000374
 8000cbc:	20000378 	.word	0x20000378
 8000cc0:	2000037c 	.word	0x2000037c

08000cc4 <get_next_bit>:

uint8_t get_next_bit() {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
	if (!tx_running)
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <get_next_bit+0xa4>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <get_next_bit+0x14>
		return 1; // idle MARK
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e041      	b.n	8000d5c <get_next_bit+0x98>
	uint32_t byte_idx = tx_bit_idx / 10;
 8000cd8:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <get_next_bit+0xa8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a24      	ldr	r2, [pc, #144]	@ (8000d70 <get_next_bit+0xac>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	08db      	lsrs	r3, r3, #3
 8000ce4:	60bb      	str	r3, [r7, #8]
	uint32_t bit_idx = tx_bit_idx % 10;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <get_next_bit+0xa8>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <get_next_bit+0xac>)
 8000cec:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf0:	08d9      	lsrs	r1, r3, #3
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	607b      	str	r3, [r7, #4]
	uint8_t b = tx_frame[byte_idx], bit;
 8000cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8000d74 <get_next_bit+0xb0>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4413      	add	r3, r2
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	70fb      	strb	r3, [r7, #3]
	if (bit_idx == 0)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <get_next_bit+0x50>
		bit = 0; // start
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e00e      	b.n	8000d32 <get_next_bit+0x6e>
	else if (bit_idx < 9)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d809      	bhi.n	8000d2e <get_next_bit+0x6a>
		bit = (b >> (bit_idx - 1)) & 1;
 8000d1a:	78fa      	ldrb	r2, [r7, #3]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	fa42 f303 	asr.w	r3, r2, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e001      	b.n	8000d32 <get_next_bit+0x6e>
	else
		bit = 1; // stop
 8000d2e:	2301      	movs	r3, #1
 8000d30:	73fb      	strb	r3, [r7, #15]
	tx_bit_idx++;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <get_next_bit+0xa8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a0c      	ldr	r2, [pc, #48]	@ (8000d6c <get_next_bit+0xa8>)
 8000d3a:	6013      	str	r3, [r2, #0]
	if (tx_bit_idx >= tx_len * 10)
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <get_next_bit+0xb4>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <get_next_bit+0xa8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d802      	bhi.n	8000d5a <get_next_bit+0x96>
		tx_running = 0;
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <get_next_bit+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
	return bit;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	2000037c 	.word	0x2000037c
 8000d6c:	20000378 	.word	0x20000378
 8000d70:	cccccccd 	.word	0xcccccccd
 8000d74:	200002f4 	.word	0x200002f4
 8000d78:	20000374 	.word	0x20000374
 8000d7c:	00000000 	.word	0x00000000

08000d80 <fill_dac_buffer>:

void fill_dac_buffer(float freq) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	ed87 0a01 	vstr	s0, [r7, #4]
	phase_inc = 2 * M_PI * freq / SAMPLE_RATE;
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fbb0 	bl	80004f0 <__aeabi_f2d>
 8000d90:	a337      	add	r3, pc, #220	@ (adr r3, 8000e70 <fill_dac_buffer+0xf0>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	f7ff fc03 	bl	80005a0 <__aeabi_dmul>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4619      	mov	r1, r3
 8000da2:	a339      	add	r3, pc, #228	@ (adr r3, 8000e88 <fill_dac_buffer+0x108>)
 8000da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da8:	f7ff fd24 	bl	80007f4 <__aeabi_ddiv>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f7ff fe8e 	bl	8000ad4 <__aeabi_d2f>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4a2f      	ldr	r2, [pc, #188]	@ (8000e78 <fill_dac_buffer+0xf8>)
 8000dbc:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < 256; i++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	81fb      	strh	r3, [r7, #14]
 8000dc2:	e04b      	b.n	8000e5c <fill_dac_buffer+0xdc>
		dac_buffer[i] = (uint16_t) ((sinf(phase) * 0.5f + 0.5f) * DAC_MAX);
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e7c <fill_dac_buffer+0xfc>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	eeb0 0a67 	vmov.f32	s0, s15
 8000dce:	f002 ff53 	bl	8003c78 <sinf>
 8000dd2:	eef0 7a40 	vmov.f32	s15, s0
 8000dd6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000de6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000e80 <fill_dac_buffer+0x100>
 8000dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df4:	ee17 2a90 	vmov	r2, s15
 8000df8:	b291      	uxth	r1, r2
 8000dfa:	4a22      	ldr	r2, [pc, #136]	@ (8000e84 <fill_dac_buffer+0x104>)
 8000dfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		phase += phase_inc;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <fill_dac_buffer+0xf8>)
 8000e02:	ed93 7a00 	vldr	s14, [r3]
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <fill_dac_buffer+0xfc>)
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <fill_dac_buffer+0xfc>)
 8000e12:	edc3 7a00 	vstr	s15, [r3]
		if (phase > 2 * M_PI)
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <fill_dac_buffer+0xfc>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb68 	bl	80004f0 <__aeabi_f2d>
 8000e20:	a313      	add	r3, pc, #76	@ (adr r3, 8000e70 <fill_dac_buffer+0xf0>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff fe4b 	bl	8000ac0 <__aeabi_dcmpgt>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d012      	beq.n	8000e56 <fill_dac_buffer+0xd6>
			phase -= 2 * M_PI;
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <fill_dac_buffer+0xfc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb5b 	bl	80004f0 <__aeabi_f2d>
 8000e3a:	a30d      	add	r3, pc, #52	@ (adr r3, 8000e70 <fill_dac_buffer+0xf0>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f7ff f9f6 	bl	8000230 <__aeabi_dsub>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f7ff fe42 	bl	8000ad4 <__aeabi_d2f>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <fill_dac_buffer+0xfc>)
 8000e54:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < 256; i++) {
 8000e56:	89fb      	ldrh	r3, [r7, #14]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	81fb      	strh	r3, [r7, #14]
 8000e5c:	89fb      	ldrh	r3, [r7, #14]
 8000e5e:	2bff      	cmp	r3, #255	@ 0xff
 8000e60:	d9b0      	bls.n	8000dc4 <fill_dac_buffer+0x44>
	}
}
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	f3af 8000 	nop.w
 8000e70:	54442d18 	.word	0x54442d18
 8000e74:	401921fb 	.word	0x401921fb
 8000e78:	200002f0 	.word	0x200002f0
 8000e7c:	200002ec 	.word	0x200002ec
 8000e80:	457ff000 	.word	0x457ff000
 8000e84:	200000ec 	.word	0x200000ec
 8000e88:	00000000 	.word	0x00000000
 8000e8c:	40e38800 	.word	0x40e38800

08000e90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ea0:	d118      	bne.n	8000ed4 <HAL_TIM_PeriodElapsedCallback+0x44>
		uint8_t bit = get_next_bit();
 8000ea2:	f7ff ff0f 	bl	8000cc4 <get_next_bit>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73fb      	strb	r3, [r7, #15]
		fill_dac_buffer(bit ? FREQ_MARK : FREQ_SPACE);
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x26>
 8000eb0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8000edc <HAL_TIM_PeriodElapsedCallback+0x4c>
 8000eb4:	e001      	b.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x2a>
 8000eb6:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8000ee0 <HAL_TIM_PeriodElapsedCallback+0x50>
 8000eba:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebe:	f7ff ff5f 	bl	8000d80 <fill_dac_buffer>
		HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, (uint32_t*) dac_buffer, 256,
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eca:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ed0:	f000 fc3c 	bl	800174c <HAL_DAC_Start_DMA>
		DAC_ALIGN_12B_R);
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	451c4000 	.word	0x451c4000
 8000ee0:	44bb8000 	.word	0x44bb8000
 8000ee4:	200000ec 	.word	0x200000ec
 8000ee8:	2000002c 	.word	0x2000002c

08000eec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eec:	b598      	push	{r3, r4, r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef0:	f000 fa89 	bl	8001406 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef4:	f000 f81e 	bl	8000f34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ef8:	f000 f91a 	bl	8001130 <MX_GPIO_Init>
	MX_DMA_Init();
 8000efc:	f000 f8ee 	bl	80010dc <MX_DMA_Init>
	MX_DAC2_Init();
 8000f00:	f000 f864 	bl	8000fcc <MX_DAC2_Init>
	MX_TIM2_Init();
 8000f04:	f000 f89c 	bl	8001040 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	build_frame((uint8_t*) payload, strlen(payload));
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <main+0x40>)
 8000f0a:	681c      	ldr	r4, [r3, #0]
 8000f0c:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <main+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f981 	bl	8000218 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff fe57 	bl	8000bd0 <build_frame>
	HAL_TIM_Base_Start_IT(&htim2);
 8000f22:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <main+0x44>)
 8000f24:	f002 f94a 	bl	80031bc <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <main+0x3c>
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	200000a0 	.word	0x200000a0

08000f34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	@ 0x50
 8000f38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f3a:	f107 0318 	add.w	r3, r7, #24
 8000f3e:	2238      	movs	r2, #56	@ 0x38
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fe6c 	bl	8003c20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f001 fb22 	bl	80025a0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f66:	2340      	movs	r3, #64	@ 0x40
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f72:	2304      	movs	r3, #4
 8000f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000f76:	2355      	movs	r3, #85	@ 0x55
 8000f78:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fbbc 	bl	8002708 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x66>
		Error_Handler();
 8000f96:	f000 f8fb 	bl	8001190 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 feba 	bl	8002d2c <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x8e>
		Error_Handler();
 8000fbe:	f000 f8e7 	bl	8001190 <Error_Handler>
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	@ 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_DAC2_Init>:
/**
 * @brief DAC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC2_Init(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	@ 0x30
 8000fd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC2_Init 0 */

	/* USER CODE END DAC2_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2230      	movs	r2, #48	@ 0x30
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fe21 	bl	8003c20 <memset>

	/* USER CODE END DAC2_Init 1 */

	/** DAC Initialization
	 */
	hdac2.Instance = DAC2;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_DAC2_Init+0x6c>)
 8000fe0:	4a16      	ldr	r2, [pc, #88]	@ (800103c <MX_DAC2_Init+0x70>)
 8000fe2:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac2) != HAL_OK) {
 8000fe4:	4814      	ldr	r0, [pc, #80]	@ (8001038 <MX_DAC2_Init+0x6c>)
 8000fe6:	f000 fb8e 	bl	8001706 <HAL_DAC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_DAC2_Init+0x28>
		Error_Handler();
 8000ff0:	f000 f8ce 	bl	8001190 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001004:	2312      	movs	r3, #18
 8001006:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001010:	2304      	movs	r3, #4
 8001012:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <MX_DAC2_Init+0x6c>)
 8001020:	f000 fc86 	bl	8001930 <HAL_DAC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_DAC2_Init+0x62>
		Error_Handler();
 800102a:	f000 f8b1 	bl	8001190 <Error_Handler>
	}
	/* USER CODE BEGIN DAC2_Init 2 */

	/* USER CODE END DAC2_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	3730      	adds	r7, #48	@ 0x30
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000002c 	.word	0x2000002c
 800103c:	50000c00 	.word	0x50000c00

08001040 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_TIM2_Init+0x98>)
 8001060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001064:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_TIM2_Init+0x98>)
 8001068:	220f      	movs	r2, #15
 800106a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_TIM2_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 265;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_TIM2_Init+0x98>)
 8001074:	f240 1209 	movw	r2, #265	@ 0x109
 8001078:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_TIM2_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_TIM2_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001086:	4814      	ldr	r0, [pc, #80]	@ (80010d8 <MX_TIM2_Init+0x98>)
 8001088:	f002 f840 	bl	800310c <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x56>
		Error_Handler();
 8001092:	f000 f87d 	bl	8001190 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4619      	mov	r1, r3
 80010a2:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <MX_TIM2_Init+0x98>)
 80010a4:	f002 fa52 	bl	800354c <HAL_TIM_ConfigClockSource>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0x72>
		Error_Handler();
 80010ae:	f000 f86f 	bl	8001190 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010b2:	2320      	movs	r3, #32
 80010b4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	@ (80010d8 <MX_TIM2_Init+0x98>)
 80010c0:	f002 fcd2 	bl	8003a68 <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80010ca:	f000 f861 	bl	8001190 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200000a0 	.word	0x200000a0

080010dc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_DMA_Init+0x50>)
 80010e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010e6:	4a11      	ldr	r2, [pc, #68]	@ (800112c <MX_DMA_Init+0x50>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_DMA_Init+0x50>)
 80010f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_DMA_Init+0x50>)
 80010fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fe:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <MX_DMA_Init+0x50>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6493      	str	r3, [r2, #72]	@ 0x48
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_DMA_Init+0x50>)
 8001108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	200b      	movs	r0, #11
 8001118:	f000 fac1 	bl	800169e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800111c:	200b      	movs	r0, #11
 800111e:	f000 fad8 	bl	80016d2 <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_GPIO_Init+0x5c>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <MX_GPIO_Init+0x5c>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_GPIO_Init+0x5c>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_GPIO_Init+0x5c>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <MX_GPIO_Init+0x5c>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <MX_GPIO_Init+0x5c>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_GPIO_Init+0x5c>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a08      	ldr	r2, [pc, #32]	@ (800118c <MX_GPIO_Init+0x5c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_GPIO_Init+0x5c>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <Error_Handler+0x8>

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_MspInit+0x44>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a6:	4a0e      	ldr	r2, [pc, #56]	@ (80011e0 <HAL_MspInit+0x44>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_MspInit+0x44>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_MspInit+0x44>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	4a08      	ldr	r2, [pc, #32]	@ (80011e0 <HAL_MspInit+0x44>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_MspInit+0x44>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011d2:	f001 fa89 	bl	80026e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a2b      	ldr	r2, [pc, #172]	@ (80012b0 <HAL_DAC_MspInit+0xcc>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d150      	bne.n	80012a8 <HAL_DAC_MspInit+0xc4>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001206:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <HAL_DAC_MspInit+0xd0>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a2a      	ldr	r2, [pc, #168]	@ (80012b4 <HAL_DAC_MspInit+0xd0>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <HAL_DAC_MspInit+0xd0>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <HAL_DAC_MspInit+0xd0>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a24      	ldr	r2, [pc, #144]	@ (80012b4 <HAL_DAC_MspInit+0xd0>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <HAL_DAC_MspInit+0xd0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001236:	2340      	movs	r3, #64	@ 0x40
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f001 f826 	bl	800229c <HAL_GPIO_Init>

    /* DAC2 DMA Init */
    /* DAC2_CH1 Init */
    hdma_dac2_ch1.Instance = DMA1_Channel1;
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001252:	4a1a      	ldr	r2, [pc, #104]	@ (80012bc <HAL_DAC_MspInit+0xd8>)
 8001254:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001258:	2229      	movs	r2, #41	@ 0x29
 800125a:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 800125e:	2210      	movs	r2, #16
 8001260:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001274:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001278:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800127c:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001280:	2220      	movs	r2, #32
 8001282:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001286:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800128a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800128c:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 800128e:	f000 fd93 	bl	8001db8 <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001298:	f7ff ff7a 	bl	8001190 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <HAL_DAC_MspInit+0xd4>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	50000c00 	.word	0x50000c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	20000040 	.word	0x20000040
 80012bc:	40020008 	.word	0x40020008

080012c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d0:	d113      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	201c      	movs	r0, #28
 80012f0:	f000 f9d5 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f4:	201c      	movs	r0, #28
 80012f6:	f000 f9ec 	bl	80016d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <NMI_Handler+0x4>

08001310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <MemManage_Handler+0x4>

08001320 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <UsageFault_Handler+0x4>

08001330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135e:	f000 f8a5 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <DMA1_Channel1_IRQHandler+0x10>)
 800136e:	f000 fe46 	bl	8001ffe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000040 	.word	0x20000040

0800137c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <TIM2_IRQHandler+0x10>)
 8001382:	f001 ff93 	bl	80032ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200000a0 	.word	0x200000a0

08001390 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b4:	480d      	ldr	r0, [pc, #52]	@ (80013ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b8:	f7ff ffea 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	@ (80013f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <LoopForever+0xe>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001400 <LoopForever+0x16>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e2:	f002 fc25 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e6:	f7ff fd81 	bl	8000eec <main>

080013ea <LoopForever>:

LoopForever:
    b LoopForever
 80013ea:	e7fe      	b.n	80013ea <LoopForever>
  ldr   r0, =_estack
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013f8:	08004aec 	.word	0x08004aec
  ldr r2, =_sbss
 80013fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001400:	20000384 	.word	0x20000384

08001404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_2_IRQHandler>

08001406 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f939 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001416:	200f      	movs	r0, #15
 8001418:	f000 f80e 	bl	8001438 <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	e001      	b.n	800142c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001428:	f7ff feb8 	bl	800119c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800142c:	79fb      	ldrb	r3, [r7, #7]

}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_InitTick+0x68>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d022      	beq.n	8001492 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_InitTick+0x6c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <HAL_InitTick+0x68>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001458:	fbb1 f3f3 	udiv	r3, r1, r3
 800145c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f944 	bl	80016ee <HAL_SYSTICK_Config>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10f      	bne.n	800148c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b0f      	cmp	r3, #15
 8001470:	d809      	bhi.n	8001486 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001472:	2200      	movs	r2, #0
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	f04f 30ff 	mov.w	r0, #4294967295
 800147a:	f000 f910 	bl	800169e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_InitTick+0x70>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e007      	b.n	8001496 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e004      	b.n	8001496 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e001      	b.n	8001496 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000000c 	.word	0x2000000c
 80014a4:	20000004 	.word	0x20000004
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_IncTick+0x20>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a03      	ldr	r2, [pc, #12]	@ (80014c8 <HAL_IncTick+0x1c>)
 80014bc:	6013      	str	r3, [r2, #0]
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20000380 	.word	0x20000380
 80014cc:	2000000c 	.word	0x2000000c

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000380 	.word	0x20000380

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	@ (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff40 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff90 	bl	80015dc <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5f 	bl	8001588 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff33 	bl	800154c <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa4 	bl	8001644 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e014      	b.n	8001742 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	791b      	ldrb	r3, [r3, #4]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fd5b 	bl	80011e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2202      	movs	r2, #2
 8001732:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b2      	b.n	80018ca <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	795b      	ldrb	r3, [r3, #5]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_DAC_Start_DMA+0x24>
 800176c:	2302      	movs	r3, #2
 800176e:	e0ac      	b.n	80018ca <HAL_DAC_Start_DMA+0x17e>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2202      	movs	r2, #2
 800177a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d129      	bne.n	80017d6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4a53      	ldr	r2, [pc, #332]	@ (80018d4 <HAL_DAC_Start_DMA+0x188>)
 8001788:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	4a52      	ldr	r2, [pc, #328]	@ (80018d8 <HAL_DAC_Start_DMA+0x18c>)
 8001790:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	4a51      	ldr	r2, [pc, #324]	@ (80018dc <HAL_DAC_Start_DMA+0x190>)
 8001798:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80017aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_DAC_Start_DMA+0x6c>
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d005      	beq.n	80017c2 <HAL_DAC_Start_DMA+0x76>
 80017b6:	e009      	b.n	80017cc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3308      	adds	r3, #8
 80017be:	61bb      	str	r3, [r7, #24]
        break;
 80017c0:	e033      	b.n	800182a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	330c      	adds	r3, #12
 80017c8:	61bb      	str	r3, [r7, #24]
        break;
 80017ca:	e02e      	b.n	800182a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3310      	adds	r3, #16
 80017d2:	61bb      	str	r3, [r7, #24]
        break;
 80017d4:	e029      	b.n	800182a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	4a41      	ldr	r2, [pc, #260]	@ (80018e0 <HAL_DAC_Start_DMA+0x194>)
 80017dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4a40      	ldr	r2, [pc, #256]	@ (80018e4 <HAL_DAC_Start_DMA+0x198>)
 80017e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	4a3f      	ldr	r2, [pc, #252]	@ (80018e8 <HAL_DAC_Start_DMA+0x19c>)
 80017ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017fc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80017fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_DAC_Start_DMA+0xc0>
 8001804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001806:	2b04      	cmp	r3, #4
 8001808:	d005      	beq.n	8001816 <HAL_DAC_Start_DMA+0xca>
 800180a:	e009      	b.n	8001820 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3314      	adds	r3, #20
 8001812:	61bb      	str	r3, [r7, #24]
        break;
 8001814:	e009      	b.n	800182a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3318      	adds	r3, #24
 800181c:	61bb      	str	r3, [r7, #24]
        break;
 800181e:	e004      	b.n	800182a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	331c      	adds	r3, #28
 8001826:	61bb      	str	r3, [r7, #24]
        break;
 8001828:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d111      	bne.n	8001854 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800183e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6898      	ldr	r0, [r3, #8]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	f000 fb5d 	bl	8001f08 <HAL_DMA_Start_IT>
 800184e:	4603      	mov	r3, r0
 8001850:	77fb      	strb	r3, [r7, #31]
 8001852:	e010      	b.n	8001876 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001862:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	68d8      	ldr	r0, [r3, #12]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	f000 fb4b 	bl	8001f08 <HAL_DMA_Start_IT>
 8001872:	4603      	mov	r3, r0
 8001874:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800187c:	7ffb      	ldrb	r3, [r7, #31]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11c      	bne.n	80018bc <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2201      	movs	r2, #1
 8001890:	409a      	lsls	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <HAL_DAC_Start_DMA+0x1a0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <HAL_DAC_Start_DMA+0x1a4>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80018ac:	e002      	b.n	80018b4 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f9      	bne.n	80018ae <HAL_DAC_Start_DMA+0x162>
 80018ba:	e005      	b.n	80018c8 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f043 0204 	orr.w	r2, r3, #4
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08001ca5 	.word	0x08001ca5
 80018d8:	08001cc7 	.word	0x08001cc7
 80018dc:	08001ce3 	.word	0x08001ce3
 80018e0:	08001d4d 	.word	0x08001d4d
 80018e4:	08001d6f 	.word	0x08001d6f
 80018e8:	08001d8b 	.word	0x08001d8b
 80018ec:	20000004 	.word	0x20000004
 80018f0:	053e2d63 	.word	0x053e2d63

080018f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	@ 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_DAC_ConfigChannel+0x1c>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e1a1      	b.n	8001c94 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	795b      	ldrb	r3, [r3, #5]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_DAC_ConfigChannel+0x32>
 800195e:	2302      	movs	r3, #2
 8001960:	e198      	b.n	8001c94 <HAL_DAC_ConfigChannel+0x364>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2201      	movs	r2, #1
 8001966:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2202      	movs	r2, #2
 800196c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b04      	cmp	r3, #4
 8001974:	d17a      	bne.n	8001a6c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001976:	f7ff fdab 	bl	80014d0 <HAL_GetTick>
 800197a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d13d      	bne.n	80019fe <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001982:	e018      	b.n	80019b6 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001984:	f7ff fda4 	bl	80014d0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d911      	bls.n	80019b6 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00a      	beq.n	80019b6 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	f043 0208 	orr.w	r2, r3, #8
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2203      	movs	r2, #3
 80019b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e16e      	b.n	8001c94 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1df      	bne.n	8001984 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80019ce:	e020      	b.n	8001a12 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019d0:	f7ff fd7e 	bl	80014d0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d90f      	bls.n	80019fe <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da0a      	bge.n	80019fe <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f043 0208 	orr.w	r2, r3, #8
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2203      	movs	r2, #3
 80019f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e14a      	b.n	8001c94 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	dbe3      	blt.n	80019d0 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	ea02 0103 	and.w	r1, r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	409a      	lsls	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	21ff      	movs	r1, #255	@ 0xff
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	ea02 0103 	and.w	r1, r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d11d      	bne.n	8001ab0 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	221f      	movs	r2, #31
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2207      	movs	r2, #7
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac8:	4013      	ands	r3, r2
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d102      	bne.n	8001ada <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
 8001ad8:	e00f      	b.n	8001afa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d102      	bne.n	8001ae8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	e008      	b.n	8001afa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001af0:	2301      	movs	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
 8001af4:	e001      	b.n	8001afa <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_DAC_ConfigChannel+0x1fe>
 8001b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b2c:	e000      	b.n	8001b30 <HAL_DAC_ConfigChannel+0x200>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b48:	4013      	ands	r3, r2
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	795b      	ldrb	r3, [r3, #5]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <HAL_DAC_ConfigChannel+0x22a>
 8001b54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b58:	e000      	b.n	8001b5c <HAL_DAC_ConfigChannel+0x22c>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d114      	bne.n	8001b9c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001b72:	f001 fa79 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8001b76:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4a48      	ldr	r2, [pc, #288]	@ (8001c9c <HAL_DAC_ConfigChannel+0x36c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d904      	bls.n	8001b8a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b88:	e00f      	b.n	8001baa <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4a44      	ldr	r2, [pc, #272]	@ (8001ca0 <HAL_DAC_ConfigChannel+0x370>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d90a      	bls.n	8001ba8 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9a:	e006      	b.n	8001baa <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba6:	e000      	b.n	8001baa <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001ba8:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	400a      	ands	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c14:	4313      	orrs	r3, r2
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	22c0      	movs	r2, #192	@ 0xc0
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	400a      	ands	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	ea02 0103 	and.w	r1, r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3728      	adds	r7, #40	@ 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	09896800 	.word	0x09896800
 8001ca0:	04c4b400 	.word	0x04c4b400

08001ca4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff fe1e 	bl	80018f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	711a      	strb	r2, [r3, #4]
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff fe17 	bl	8001908 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f043 0204 	orr.w	r2, r3, #4
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7ff fe0d 	bl	800191c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	711a      	strb	r2, [r3, #4]
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff ffd8 	bl	8001d10 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	711a      	strb	r2, [r3, #4]
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff ffd1 	bl	8001d24 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff ffc7 	bl	8001d38 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	711a      	strb	r2, [r3, #4]
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e08d      	b.n	8001ee6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b47      	ldr	r3, [pc, #284]	@ (8001ef0 <HAL_DMA_Init+0x138>)
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d80f      	bhi.n	8001df6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b45      	ldr	r3, [pc, #276]	@ (8001ef4 <HAL_DMA_Init+0x13c>)
 8001dde:	4413      	add	r3, r2
 8001de0:	4a45      	ldr	r2, [pc, #276]	@ (8001ef8 <HAL_DMA_Init+0x140>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	009a      	lsls	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a42      	ldr	r2, [pc, #264]	@ (8001efc <HAL_DMA_Init+0x144>)
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001df4:	e00e      	b.n	8001e14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b40      	ldr	r3, [pc, #256]	@ (8001f00 <HAL_DMA_Init+0x148>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a3d      	ldr	r2, [pc, #244]	@ (8001ef8 <HAL_DMA_Init+0x140>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a3c      	ldr	r2, [pc, #240]	@ (8001f04 <HAL_DMA_Init+0x14c>)
 8001e12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f9b6 	bl	80021d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e74:	d102      	bne.n	8001e7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d010      	beq.n	8001ebc <HAL_DMA_Init+0x104>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d80c      	bhi.n	8001ebc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f9d6 	bl	8002254 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	e008      	b.n	8001ece <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40020407 	.word	0x40020407
 8001ef4:	bffdfff8 	.word	0xbffdfff8
 8001ef8:	cccccccd 	.word	0xcccccccd
 8001efc:	40020000 	.word	0x40020000
 8001f00:	bffdfbf8 	.word	0xbffdfbf8
 8001f04:	40020400 	.word	0x40020400

08001f08 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_DMA_Start_IT+0x20>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e066      	b.n	8001ff6 <HAL_DMA_Start_IT+0xee>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d155      	bne.n	8001fe8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 f8fb 	bl	800215c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 020e 	orr.w	r2, r2, #14
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e00f      	b.n	8001fa0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 020a 	orr.w	r2, r2, #10
 8001f9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e005      	b.n	8001ff4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2204      	movs	r2, #4
 8002020:	409a      	lsls	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d026      	beq.n	8002078 <HAL_DMA_IRQHandler+0x7a>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d021      	beq.n	8002078 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0204 	bic.w	r2, r2, #4
 8002050:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f003 021f 	and.w	r2, r3, #31
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2104      	movs	r1, #4
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	2b00      	cmp	r3, #0
 800206c:	d071      	beq.n	8002152 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002076:	e06c      	b.n	8002152 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	2202      	movs	r2, #2
 8002082:	409a      	lsls	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d02e      	beq.n	80020ea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d029      	beq.n	80020ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 020a 	bic.w	r2, r2, #10
 80020b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	2102      	movs	r1, #2
 80020ca:	fa01 f202 	lsl.w	r2, r1, r2
 80020ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d038      	beq.n	8002152 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020e8:	e033      	b.n	8002152 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2208      	movs	r2, #8
 80020f4:	409a      	lsls	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02a      	beq.n	8002154 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d025      	beq.n	8002154 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 020e 	bic.w	r2, r2, #14
 8002116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002152:	bf00      	nop
 8002154:	bf00      	nop
}
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002172:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002184:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	f003 021f 	and.w	r2, r3, #31
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f202 	lsl.w	r2, r1, r2
 8002198:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d108      	bne.n	80021bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021ba:	e007      	b.n	80021cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	60da      	str	r2, [r3, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d802      	bhi.n	80021f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80021ec:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e001      	b.n	80021f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80021f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	3b08      	subs	r3, #8
 8002202:	4a12      	ldr	r2, [pc, #72]	@ (800224c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	009a      	lsls	r2, r3, #2
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a0b      	ldr	r2, [pc, #44]	@ (8002250 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002222:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2201      	movs	r2, #1
 800222c:	409a      	lsls	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40020407 	.word	0x40020407
 8002244:	40020800 	.word	0x40020800
 8002248:	40020820 	.word	0x40020820
 800224c:	cccccccd 	.word	0xcccccccd
 8002250:	40020880 	.word	0x40020880

08002254 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002276:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3b01      	subs	r3, #1
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	2201      	movs	r2, #1
 8002282:	409a      	lsls	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	1000823f 	.word	0x1000823f
 8002298:	40020940 	.word	0x40020940

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022aa:	e15a      	b.n	8002562 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 814c 	beq.w	800255c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d005      	beq.n	80022dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d130      	bne.n	800233e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002312:	2201      	movs	r2, #1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f003 0201 	and.w	r2, r3, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b03      	cmp	r3, #3
 8002348:	d017      	beq.n	800237a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d123      	bne.n	80023ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0203 	and.w	r2, r3, #3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80a6 	beq.w	800255c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002410:	4b5b      	ldr	r3, [pc, #364]	@ (8002580 <HAL_GPIO_Init+0x2e4>)
 8002412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002414:	4a5a      	ldr	r2, [pc, #360]	@ (8002580 <HAL_GPIO_Init+0x2e4>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6613      	str	r3, [r2, #96]	@ 0x60
 800241c:	4b58      	ldr	r3, [pc, #352]	@ (8002580 <HAL_GPIO_Init+0x2e4>)
 800241e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002428:	4a56      	ldr	r2, [pc, #344]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002452:	d01f      	beq.n	8002494 <HAL_GPIO_Init+0x1f8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a4c      	ldr	r2, [pc, #304]	@ (8002588 <HAL_GPIO_Init+0x2ec>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d019      	beq.n	8002490 <HAL_GPIO_Init+0x1f4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a4b      	ldr	r2, [pc, #300]	@ (800258c <HAL_GPIO_Init+0x2f0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <HAL_GPIO_Init+0x1f0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a4a      	ldr	r2, [pc, #296]	@ (8002590 <HAL_GPIO_Init+0x2f4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00d      	beq.n	8002488 <HAL_GPIO_Init+0x1ec>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a49      	ldr	r2, [pc, #292]	@ (8002594 <HAL_GPIO_Init+0x2f8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <HAL_GPIO_Init+0x1e8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a48      	ldr	r2, [pc, #288]	@ (8002598 <HAL_GPIO_Init+0x2fc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d101      	bne.n	8002480 <HAL_GPIO_Init+0x1e4>
 800247c:	2305      	movs	r3, #5
 800247e:	e00a      	b.n	8002496 <HAL_GPIO_Init+0x1fa>
 8002480:	2306      	movs	r3, #6
 8002482:	e008      	b.n	8002496 <HAL_GPIO_Init+0x1fa>
 8002484:	2304      	movs	r3, #4
 8002486:	e006      	b.n	8002496 <HAL_GPIO_Init+0x1fa>
 8002488:	2303      	movs	r3, #3
 800248a:	e004      	b.n	8002496 <HAL_GPIO_Init+0x1fa>
 800248c:	2302      	movs	r3, #2
 800248e:	e002      	b.n	8002496 <HAL_GPIO_Init+0x1fa>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <HAL_GPIO_Init+0x1fa>
 8002494:	2300      	movs	r3, #0
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	f002 0203 	and.w	r2, r2, #3
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	4093      	lsls	r3, r2
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a6:	4937      	ldr	r1, [pc, #220]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b4:	4b39      	ldr	r3, [pc, #228]	@ (800259c <HAL_GPIO_Init+0x300>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024d8:	4a30      	ldr	r2, [pc, #192]	@ (800259c <HAL_GPIO_Init+0x300>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024de:	4b2f      	ldr	r3, [pc, #188]	@ (800259c <HAL_GPIO_Init+0x300>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002502:	4a26      	ldr	r2, [pc, #152]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002508:	4b24      	ldr	r3, [pc, #144]	@ (800259c <HAL_GPIO_Init+0x300>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800252c:	4a1b      	ldr	r2, [pc, #108]	@ (800259c <HAL_GPIO_Init+0x300>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002532:	4b1a      	ldr	r3, [pc, #104]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002556:	4a11      	ldr	r2, [pc, #68]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	f47f ae9d 	bne.w	80022ac <HAL_GPIO_Init+0x10>
  }
}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40021000 	.word	0x40021000
 8002584:	40010000 	.word	0x40010000
 8002588:	48000400 	.word	0x48000400
 800258c:	48000800 	.word	0x48000800
 8002590:	48000c00 	.word	0x48000c00
 8002594:	48001000 	.word	0x48001000
 8002598:	48001400 	.word	0x48001400
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d141      	bne.n	8002632 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ae:	4b4b      	ldr	r3, [pc, #300]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ba:	d131      	bne.n	8002620 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025bc:	4b47      	ldr	r3, [pc, #284]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025c2:	4a46      	ldr	r2, [pc, #280]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025cc:	4b43      	ldr	r3, [pc, #268]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025d4:	4a41      	ldr	r2, [pc, #260]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025dc:	4b40      	ldr	r3, [pc, #256]	@ (80026e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2232      	movs	r2, #50	@ 0x32
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	4a3f      	ldr	r2, [pc, #252]	@ (80026e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	0c9b      	lsrs	r3, r3, #18
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025f2:	e002      	b.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025fa:	4b38      	ldr	r3, [pc, #224]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002606:	d102      	bne.n	800260e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f2      	bne.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800260e:	4b33      	ldr	r3, [pc, #204]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261a:	d158      	bne.n	80026ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e057      	b.n	80026d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002620:	4b2e      	ldr	r3, [pc, #184]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002626:	4a2d      	ldr	r2, [pc, #180]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800262c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002630:	e04d      	b.n	80026ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002638:	d141      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800263a:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002646:	d131      	bne.n	80026ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002648:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800264e:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002658:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002660:	4a1e      	ldr	r2, [pc, #120]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002666:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002668:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2232      	movs	r2, #50	@ 0x32
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	4a1c      	ldr	r2, [pc, #112]	@ (80026e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	3301      	adds	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267e:	e002      	b.n	8002686 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b01      	subs	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002692:	d102      	bne.n	800269a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f2      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a6:	d112      	bne.n	80026ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e011      	b.n	80026d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026b2:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026bc:	e007      	b.n	80026ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026be:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026c6:	4a05      	ldr	r2, [pc, #20]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40007000 	.word	0x40007000
 80026e0:	20000004 	.word	0x20000004
 80026e4:	431bde83 	.word	0x431bde83

080026e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f6:	6093      	str	r3, [r2, #8]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40007000 	.word	0x40007000

08002708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e2fe      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d075      	beq.n	8002812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002726:	4b97      	ldr	r3, [pc, #604]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002730:	4b94      	ldr	r3, [pc, #592]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d102      	bne.n	8002746 <HAL_RCC_OscConfig+0x3e>
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d002      	beq.n	800274c <HAL_RCC_OscConfig+0x44>
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d10b      	bne.n	8002764 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	4b8d      	ldr	r3, [pc, #564]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d05b      	beq.n	8002810 <HAL_RCC_OscConfig+0x108>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d157      	bne.n	8002810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e2d9      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276c:	d106      	bne.n	800277c <HAL_RCC_OscConfig+0x74>
 800276e:	4b85      	ldr	r3, [pc, #532]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a84      	ldr	r2, [pc, #528]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0xb0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x98>
 8002786:	4b7f      	ldr	r3, [pc, #508]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7e      	ldr	r2, [pc, #504]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b7c      	ldr	r3, [pc, #496]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7b      	ldr	r2, [pc, #492]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0xb0>
 80027a0:	4b78      	ldr	r3, [pc, #480]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a77      	ldr	r2, [pc, #476]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b75      	ldr	r3, [pc, #468]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a74      	ldr	r2, [pc, #464]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fe86 	bl	80014d0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fe fe82 	bl	80014d0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e29e      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027da:	4b6a      	ldr	r3, [pc, #424]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xc0>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fe72 	bl	80014d0 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7fe fe6e 	bl	80014d0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e28a      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002802:	4b60      	ldr	r3, [pc, #384]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0xe8>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d075      	beq.n	800290a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281e:	4b59      	ldr	r3, [pc, #356]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002828:	4b56      	ldr	r3, [pc, #344]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b0c      	cmp	r3, #12
 8002836:	d102      	bne.n	800283e <HAL_RCC_OscConfig+0x136>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d002      	beq.n	8002844 <HAL_RCC_OscConfig+0x13c>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d11f      	bne.n	8002884 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002844:	4b4f      	ldr	r3, [pc, #316]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_OscConfig+0x154>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e25d      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b49      	ldr	r3, [pc, #292]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	4946      	ldr	r1, [pc, #280]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002870:	4b45      	ldr	r3, [pc, #276]	@ (8002988 <HAL_RCC_OscConfig+0x280>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fddf 	bl	8001438 <HAL_InitTick>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d043      	beq.n	8002908 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e249      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d023      	beq.n	80028d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	4b3d      	ldr	r3, [pc, #244]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a3c      	ldr	r2, [pc, #240]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fe1a 	bl	80014d0 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a0:	f7fe fe16 	bl	80014d0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e232      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b2:	4b34      	ldr	r3, [pc, #208]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	061b      	lsls	r3, r3, #24
 80028cc:	492d      	ldr	r1, [pc, #180]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
 80028d2:	e01a      	b.n	800290a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80028da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fdf6 	bl	80014d0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e8:	f7fe fdf2 	bl	80014d0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e20e      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028fa:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1e0>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d041      	beq.n	800299a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01c      	beq.n	8002958 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002924:	4a17      	ldr	r2, [pc, #92]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fdcf 	bl	80014d0 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002936:	f7fe fdcb 	bl	80014d0 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1e7      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002948:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ef      	beq.n	8002936 <HAL_RCC_OscConfig+0x22e>
 8002956:	e020      	b.n	800299a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002958:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295e:	4a09      	ldr	r2, [pc, #36]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe fdb2 	bl	80014d0 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800296e:	e00d      	b.n	800298c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe fdae 	bl	80014d0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d906      	bls.n	800298c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e1ca      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800298c:	4b8c      	ldr	r3, [pc, #560]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 800298e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ea      	bne.n	8002970 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80a6 	beq.w	8002af4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a8:	2300      	movs	r3, #0
 80029aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ac:	4b84      	ldr	r3, [pc, #528]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_OscConfig+0x2b4>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x2b6>
 80029bc:	2300      	movs	r3, #0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029da:	2301      	movs	r3, #1
 80029dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029de:	4b79      	ldr	r3, [pc, #484]	@ (8002bc4 <HAL_RCC_OscConfig+0x4bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d118      	bne.n	8002a1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ea:	4b76      	ldr	r3, [pc, #472]	@ (8002bc4 <HAL_RCC_OscConfig+0x4bc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a75      	ldr	r2, [pc, #468]	@ (8002bc4 <HAL_RCC_OscConfig+0x4bc>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fd6b 	bl	80014d0 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fe:	f7fe fd67 	bl	80014d0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e183      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a10:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc4 <HAL_RCC_OscConfig+0x4bc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d108      	bne.n	8002a36 <HAL_RCC_OscConfig+0x32e>
 8002a24:	4b66      	ldr	r3, [pc, #408]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2a:	4a65      	ldr	r2, [pc, #404]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a34:	e024      	b.n	8002a80 <HAL_RCC_OscConfig+0x378>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d110      	bne.n	8002a60 <HAL_RCC_OscConfig+0x358>
 8002a3e:	4b60      	ldr	r3, [pc, #384]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a44:	4a5e      	ldr	r2, [pc, #376]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a54:	4a5a      	ldr	r2, [pc, #360]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a5e:	e00f      	b.n	8002a80 <HAL_RCC_OscConfig+0x378>
 8002a60:	4b57      	ldr	r3, [pc, #348]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a66:	4a56      	ldr	r2, [pc, #344]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a70:	4b53      	ldr	r3, [pc, #332]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a76:	4a52      	ldr	r2, [pc, #328]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d016      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fd22 	bl	80014d0 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fd1e 	bl	80014d0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e138      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa6:	4b46      	ldr	r3, [pc, #280]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ed      	beq.n	8002a90 <HAL_RCC_OscConfig+0x388>
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fd0b 	bl	80014d0 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe fd07 	bl	80014d0 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e121      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ed      	bne.n	8002abe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ae2:	7ffb      	ldrb	r3, [r7, #31]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b35      	ldr	r3, [pc, #212]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	4a34      	ldr	r2, [pc, #208]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d03c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b08:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe fcda 	bl	80014d0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b20:	f7fe fcd6 	bl	80014d0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0f2      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b32:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ef      	beq.n	8002b20 <HAL_RCC_OscConfig+0x418>
 8002b40:	e01b      	b.n	8002b7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b42:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b48:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe fcbd 	bl	80014d0 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b5a:	f7fe fcb9 	bl	80014d0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0d5      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b6c:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ef      	bne.n	8002b5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80c9 	beq.w	8002d16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b84:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	f000 8083 	beq.w	8002c98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d15e      	bne.n	8002c58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a08      	ldr	r2, [pc, #32]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b8>)
 8002ba0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fc93 	bl	80014d0 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bac:	e00c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe fc8f 	bl	80014d0 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d905      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0ab      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc8:	4b55      	ldr	r3, [pc, #340]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ec      	bne.n	8002bae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd4:	4b52      	ldr	r3, [pc, #328]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4b52      	ldr	r3, [pc, #328]	@ (8002d24 <HAL_RCC_OscConfig+0x61c>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6a11      	ldr	r1, [r2, #32]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002be4:	3a01      	subs	r2, #1
 8002be6:	0112      	lsls	r2, r2, #4
 8002be8:	4311      	orrs	r1, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002bee:	0212      	lsls	r2, r2, #8
 8002bf0:	4311      	orrs	r1, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002bf6:	0852      	lsrs	r2, r2, #1
 8002bf8:	3a01      	subs	r2, #1
 8002bfa:	0552      	lsls	r2, r2, #21
 8002bfc:	4311      	orrs	r1, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c02:	0852      	lsrs	r2, r2, #1
 8002c04:	3a01      	subs	r2, #1
 8002c06:	0652      	lsls	r2, r2, #25
 8002c08:	4311      	orrs	r1, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c0e:	06d2      	lsls	r2, r2, #27
 8002c10:	430a      	orrs	r2, r1
 8002c12:	4943      	ldr	r1, [pc, #268]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c18:	4b41      	ldr	r3, [pc, #260]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a40      	ldr	r2, [pc, #256]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c24:	4b3e      	ldr	r3, [pc, #248]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a3d      	ldr	r2, [pc, #244]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fc4e 	bl	80014d0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fc4a 	bl	80014d0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e066      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4a:	4b35      	ldr	r3, [pc, #212]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x530>
 8002c56:	e05e      	b.n	8002d16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c58:	4b31      	ldr	r3, [pc, #196]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a30      	ldr	r2, [pc, #192]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fc34 	bl	80014d0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fc30 	bl	80014d0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e04c      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7e:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c8a:	4b25      	ldr	r3, [pc, #148]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	4924      	ldr	r1, [pc, #144]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c90:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <HAL_RCC_OscConfig+0x620>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	60cb      	str	r3, [r1, #12]
 8002c96:	e03e      	b.n	8002d16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e039      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0203 	and.w	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d12c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d123      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d11b      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d113      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	019f800c 	.word	0x019f800c
 8002d28:	feeefffc 	.word	0xfeeefffc

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e11e      	b.n	8002f82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b91      	ldr	r3, [pc, #580]	@ (8002f8c <HAL_RCC_ClockConfig+0x260>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d910      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b8e      	ldr	r3, [pc, #568]	@ (8002f8c <HAL_RCC_ClockConfig+0x260>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 020f 	bic.w	r2, r3, #15
 8002d5a:	498c      	ldr	r1, [pc, #560]	@ (8002f8c <HAL_RCC_ClockConfig+0x260>)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b8a      	ldr	r3, [pc, #552]	@ (8002f8c <HAL_RCC_ClockConfig+0x260>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e106      	b.n	8002f82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d073      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d129      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d88:	4b81      	ldr	r3, [pc, #516]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0f4      	b.n	8002f82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d98:	f000 f972 	bl	8003080 <RCC_GetSysClockFreqFromPLLSource>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4a7c      	ldr	r2, [pc, #496]	@ (8002f94 <HAL_RCC_ClockConfig+0x268>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d93f      	bls.n	8002e26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002da6:	4b7a      	ldr	r3, [pc, #488]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d033      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d12f      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dc6:	4b72      	ldr	r3, [pc, #456]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dce:	4a70      	ldr	r2, [pc, #448]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	e024      	b.n	8002e26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0c6      	b.n	8002f82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df4:	4b66      	ldr	r3, [pc, #408]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0be      	b.n	8002f82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e04:	f000 f8ce 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4a61      	ldr	r2, [pc, #388]	@ (8002f94 <HAL_RCC_ClockConfig+0x268>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d909      	bls.n	8002e26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e12:	4b5f      	ldr	r3, [pc, #380]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e1a:	4a5d      	ldr	r2, [pc, #372]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e22:	2380      	movs	r3, #128	@ 0x80
 8002e24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e26:	4b5a      	ldr	r3, [pc, #360]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f023 0203 	bic.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4957      	ldr	r1, [pc, #348]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e38:	f7fe fb4a 	bl	80014d0 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7fe fb46 	bl	80014d0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e095      	b.n	8002f82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	4b4e      	ldr	r3, [pc, #312]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 020c 	and.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1eb      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d023      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e80:	4b43      	ldr	r3, [pc, #268]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a42      	ldr	r2, [pc, #264]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002e86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e98:	4b3d      	ldr	r3, [pc, #244]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002ea2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b39      	ldr	r3, [pc, #228]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4936      	ldr	r1, [pc, #216]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
 8002eba:	e008      	b.n	8002ece <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b80      	cmp	r3, #128	@ 0x80
 8002ec0:	d105      	bne.n	8002ece <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ec2:	4b33      	ldr	r3, [pc, #204]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4a32      	ldr	r2, [pc, #200]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ecc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ece:	4b2f      	ldr	r3, [pc, #188]	@ (8002f8c <HAL_RCC_ClockConfig+0x260>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d21d      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002edc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f8c <HAL_RCC_ClockConfig+0x260>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 020f 	bic.w	r2, r3, #15
 8002ee4:	4929      	ldr	r1, [pc, #164]	@ (8002f8c <HAL_RCC_ClockConfig+0x260>)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eec:	f7fe faf0 	bl	80014d0 <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7fe faec 	bl	80014d0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e03b      	b.n	8002f82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b20      	ldr	r3, [pc, #128]	@ (8002f8c <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1ed      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4917      	ldr	r1, [pc, #92]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f42:	4b13      	ldr	r3, [pc, #76]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490f      	ldr	r1, [pc, #60]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f56:	f000 f825 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <HAL_RCC_ClockConfig+0x264>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490c      	ldr	r1, [pc, #48]	@ (8002f98 <HAL_RCC_ClockConfig+0x26c>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <HAL_RCC_ClockConfig+0x270>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f76:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fa5c 	bl	8001438 <HAL_InitTick>
 8002f80:	4603      	mov	r3, r0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40022000 	.word	0x40022000
 8002f90:	40021000 	.word	0x40021000
 8002f94:	04c4b400 	.word	0x04c4b400
 8002f98:	080046fc 	.word	0x080046fc
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	20000008 	.word	0x20000008

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002faa:	4b2c      	ldr	r3, [pc, #176]	@ (800305c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	e047      	b.n	800304c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fbc:	4b27      	ldr	r3, [pc, #156]	@ (800305c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d102      	bne.n	8002fce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fc8:	4b26      	ldr	r3, [pc, #152]	@ (8003064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	e03e      	b.n	800304c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002fce:	4b23      	ldr	r3, [pc, #140]	@ (800305c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d136      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fda:	4b20      	ldr	r3, [pc, #128]	@ (800305c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3301      	adds	r3, #1
 8002ff0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8003064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	4a16      	ldr	r2, [pc, #88]	@ (800305c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003002:	68d2      	ldr	r2, [r2, #12]
 8003004:	0a12      	lsrs	r2, r2, #8
 8003006:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	617b      	str	r3, [r7, #20]
      break;
 8003010:	e00c      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003012:	4a13      	ldr	r2, [pc, #76]	@ (8003060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	4a10      	ldr	r2, [pc, #64]	@ (800305c <HAL_RCC_GetSysClockFreq+0xb8>)
 800301c:	68d2      	ldr	r2, [r2, #12]
 800301e:	0a12      	lsrs	r2, r2, #8
 8003020:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
      break;
 800302a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_RCC_GetSysClockFreq+0xb8>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0e5b      	lsrs	r3, r3, #25
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	3301      	adds	r3, #1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	e001      	b.n	800304c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800304c:	693b      	ldr	r3, [r7, #16]
}
 800304e:	4618      	mov	r0, r3
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	00f42400 	.word	0x00f42400
 8003064:	007a1200 	.word	0x007a1200

08003068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800306c:	4b03      	ldr	r3, [pc, #12]	@ (800307c <HAL_RCC_GetHCLKFreq+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000004 	.word	0x20000004

08003080 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003086:	4b1e      	ldr	r3, [pc, #120]	@ (8003100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003090:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	3301      	adds	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d10c      	bne.n	80030be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030a4:	4a17      	ldr	r2, [pc, #92]	@ (8003104 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	4a14      	ldr	r2, [pc, #80]	@ (8003100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ae:	68d2      	ldr	r2, [r2, #12]
 80030b0:	0a12      	lsrs	r2, r2, #8
 80030b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	617b      	str	r3, [r7, #20]
    break;
 80030bc:	e00c      	b.n	80030d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030be:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	0a12      	lsrs	r2, r2, #8
 80030cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030d0:	fb02 f303 	mul.w	r3, r2, r3
 80030d4:	617b      	str	r3, [r7, #20]
    break;
 80030d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0e5b      	lsrs	r3, r3, #25
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	3301      	adds	r3, #1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030f2:	687b      	ldr	r3, [r7, #4]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40021000 	.word	0x40021000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	00f42400 	.word	0x00f42400

0800310c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e049      	b.n	80031b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe f8c4 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f000 fb3c 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d001      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e054      	b.n	800327e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a26      	ldr	r2, [pc, #152]	@ (800328c <HAL_TIM_Base_Start_IT+0xd0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d022      	beq.n	800323c <HAL_TIM_Base_Start_IT+0x80>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fe:	d01d      	beq.n	800323c <HAL_TIM_Base_Start_IT+0x80>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a22      	ldr	r2, [pc, #136]	@ (8003290 <HAL_TIM_Base_Start_IT+0xd4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d018      	beq.n	800323c <HAL_TIM_Base_Start_IT+0x80>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a21      	ldr	r2, [pc, #132]	@ (8003294 <HAL_TIM_Base_Start_IT+0xd8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_TIM_Base_Start_IT+0x80>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1f      	ldr	r2, [pc, #124]	@ (8003298 <HAL_TIM_Base_Start_IT+0xdc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00e      	beq.n	800323c <HAL_TIM_Base_Start_IT+0x80>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1e      	ldr	r2, [pc, #120]	@ (800329c <HAL_TIM_Base_Start_IT+0xe0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_TIM_Base_Start_IT+0x80>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_TIM_Base_Start_IT+0x80>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1b      	ldr	r2, [pc, #108]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d115      	bne.n	8003268 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xec>)
 8003244:	4013      	ands	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b06      	cmp	r3, #6
 800324c:	d015      	beq.n	800327a <HAL_TIM_Base_Start_IT+0xbe>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003254:	d011      	beq.n	800327a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003266:	e008      	b.n	800327a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e000      	b.n	800327c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800
 8003298:	40000c00 	.word	0x40000c00
 800329c:	40013400 	.word	0x40013400
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40015000 	.word	0x40015000
 80032a8:	00010007 	.word	0x00010007

080032ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d020      	beq.n	8003310 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0202 	mvn.w	r2, #2
 80032e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa48 	bl	800378c <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa3a 	bl	8003778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fa4b 	bl	80037a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d020      	beq.n	800335c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01b      	beq.n	800335c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0204 	mvn.w	r2, #4
 800332c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fa22 	bl	800378c <HAL_TIM_IC_CaptureCallback>
 8003348:	e005      	b.n	8003356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa14 	bl	8003778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fa25 	bl	80037a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d020      	beq.n	80033a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01b      	beq.n	80033a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0208 	mvn.w	r2, #8
 8003378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2204      	movs	r2, #4
 800337e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f9fc 	bl	800378c <HAL_TIM_IC_CaptureCallback>
 8003394:	e005      	b.n	80033a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9ee 	bl	8003778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f9ff 	bl	80037a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d020      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01b      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0210 	mvn.w	r2, #16
 80033c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2208      	movs	r2, #8
 80033ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f9d6 	bl	800378c <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f9c8 	bl	8003778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f9d9 	bl	80037a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00c      	beq.n	8003418 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0201 	mvn.w	r2, #1
 8003410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd fd3c 	bl	8000e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00c      	beq.n	8003446 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800343e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fbb1 	bl	8003ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fba9 	bl	8003bbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00c      	beq.n	800348e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f993 	bl	80037b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00c      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f06f 0220 	mvn.w	r2, #32
 80034aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fb71 	bl	8003b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80034ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fb7d 	bl	8003bd0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00c      	beq.n	80034fa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80034f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fb75 	bl	8003be4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00c      	beq.n	800351e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fb6d 	bl	8003bf8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00c      	beq.n	8003542 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800353a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb65 	bl	8003c0c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_TIM_ConfigClockSource+0x1c>
 8003564:	2302      	movs	r3, #2
 8003566:	e0f6      	b.n	8003756 <HAL_TIM_ConfigClockSource+0x20a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003586:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800358a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6f      	ldr	r2, [pc, #444]	@ (8003760 <HAL_TIM_ConfigClockSource+0x214>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f000 80c1 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x1de>
 80035a8:	4a6d      	ldr	r2, [pc, #436]	@ (8003760 <HAL_TIM_ConfigClockSource+0x214>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	f200 80c6 	bhi.w	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 80035b0:	4a6c      	ldr	r2, [pc, #432]	@ (8003764 <HAL_TIM_ConfigClockSource+0x218>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	f000 80b9 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x1de>
 80035b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003764 <HAL_TIM_ConfigClockSource+0x218>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	f200 80be 	bhi.w	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 80035c0:	4a69      	ldr	r2, [pc, #420]	@ (8003768 <HAL_TIM_ConfigClockSource+0x21c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	f000 80b1 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x1de>
 80035c8:	4a67      	ldr	r2, [pc, #412]	@ (8003768 <HAL_TIM_ConfigClockSource+0x21c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	f200 80b6 	bhi.w	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 80035d0:	4a66      	ldr	r2, [pc, #408]	@ (800376c <HAL_TIM_ConfigClockSource+0x220>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	f000 80a9 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x1de>
 80035d8:	4a64      	ldr	r2, [pc, #400]	@ (800376c <HAL_TIM_ConfigClockSource+0x220>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	f200 80ae 	bhi.w	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 80035e0:	4a63      	ldr	r2, [pc, #396]	@ (8003770 <HAL_TIM_ConfigClockSource+0x224>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	f000 80a1 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x1de>
 80035e8:	4a61      	ldr	r2, [pc, #388]	@ (8003770 <HAL_TIM_ConfigClockSource+0x224>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	f200 80a6 	bhi.w	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 80035f0:	4a60      	ldr	r2, [pc, #384]	@ (8003774 <HAL_TIM_ConfigClockSource+0x228>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f000 8099 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x1de>
 80035f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003774 <HAL_TIM_ConfigClockSource+0x228>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	f200 809e 	bhi.w	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 8003600:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003604:	f000 8091 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x1de>
 8003608:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800360c:	f200 8096 	bhi.w	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 8003610:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003614:	f000 8089 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x1de>
 8003618:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800361c:	f200 808e 	bhi.w	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 8003620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003624:	d03e      	beq.n	80036a4 <HAL_TIM_ConfigClockSource+0x158>
 8003626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800362a:	f200 8087 	bhi.w	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 800362e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003632:	f000 8086 	beq.w	8003742 <HAL_TIM_ConfigClockSource+0x1f6>
 8003636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800363a:	d87f      	bhi.n	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 800363c:	2b70      	cmp	r3, #112	@ 0x70
 800363e:	d01a      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x12a>
 8003640:	2b70      	cmp	r3, #112	@ 0x70
 8003642:	d87b      	bhi.n	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 8003644:	2b60      	cmp	r3, #96	@ 0x60
 8003646:	d050      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x19e>
 8003648:	2b60      	cmp	r3, #96	@ 0x60
 800364a:	d877      	bhi.n	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 800364c:	2b50      	cmp	r3, #80	@ 0x50
 800364e:	d03c      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x17e>
 8003650:	2b50      	cmp	r3, #80	@ 0x50
 8003652:	d873      	bhi.n	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 8003654:	2b40      	cmp	r3, #64	@ 0x40
 8003656:	d058      	beq.n	800370a <HAL_TIM_ConfigClockSource+0x1be>
 8003658:	2b40      	cmp	r3, #64	@ 0x40
 800365a:	d86f      	bhi.n	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 800365c:	2b30      	cmp	r3, #48	@ 0x30
 800365e:	d064      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x1de>
 8003660:	2b30      	cmp	r3, #48	@ 0x30
 8003662:	d86b      	bhi.n	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 8003664:	2b20      	cmp	r3, #32
 8003666:	d060      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x1de>
 8003668:	2b20      	cmp	r3, #32
 800366a:	d867      	bhi.n	800373c <HAL_TIM_ConfigClockSource+0x1f0>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d05c      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x1de>
 8003670:	2b10      	cmp	r3, #16
 8003672:	d05a      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x1de>
 8003674:	e062      	b.n	800373c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003686:	f000 f9cf 	bl	8003a28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	609a      	str	r2, [r3, #8]
      break;
 80036a2:	e04f      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036b4:	f000 f9b8 	bl	8003a28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036c6:	609a      	str	r2, [r3, #8]
      break;
 80036c8:	e03c      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d6:	461a      	mov	r2, r3
 80036d8:	f000 f92a 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2150      	movs	r1, #80	@ 0x50
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f983 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 80036e8:	e02c      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f6:	461a      	mov	r2, r3
 80036f8:	f000 f949 	bl	800398e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2160      	movs	r1, #96	@ 0x60
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f973 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003708:	e01c      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003716:	461a      	mov	r2, r3
 8003718:	f000 f90a 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2140      	movs	r1, #64	@ 0x40
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f963 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003728:	e00c      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4619      	mov	r1, r3
 8003734:	4610      	mov	r0, r2
 8003736:	f000 f95a 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 800373a:	e003      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      break;
 8003740:	e000      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	00100070 	.word	0x00100070
 8003764:	00100060 	.word	0x00100060
 8003768:	00100050 	.word	0x00100050
 800376c:	00100040 	.word	0x00100040
 8003770:	00100030 	.word	0x00100030
 8003774:	00100020 	.word	0x00100020

08003778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a4c      	ldr	r2, [pc, #304]	@ (800390c <TIM_Base_SetConfig+0x144>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d017      	beq.n	8003810 <TIM_Base_SetConfig+0x48>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e6:	d013      	beq.n	8003810 <TIM_Base_SetConfig+0x48>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a49      	ldr	r2, [pc, #292]	@ (8003910 <TIM_Base_SetConfig+0x148>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00f      	beq.n	8003810 <TIM_Base_SetConfig+0x48>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a48      	ldr	r2, [pc, #288]	@ (8003914 <TIM_Base_SetConfig+0x14c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00b      	beq.n	8003810 <TIM_Base_SetConfig+0x48>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a47      	ldr	r2, [pc, #284]	@ (8003918 <TIM_Base_SetConfig+0x150>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <TIM_Base_SetConfig+0x48>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a46      	ldr	r2, [pc, #280]	@ (800391c <TIM_Base_SetConfig+0x154>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_Base_SetConfig+0x48>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a45      	ldr	r2, [pc, #276]	@ (8003920 <TIM_Base_SetConfig+0x158>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d108      	bne.n	8003822 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a39      	ldr	r2, [pc, #228]	@ (800390c <TIM_Base_SetConfig+0x144>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d023      	beq.n	8003872 <TIM_Base_SetConfig+0xaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003830:	d01f      	beq.n	8003872 <TIM_Base_SetConfig+0xaa>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a36      	ldr	r2, [pc, #216]	@ (8003910 <TIM_Base_SetConfig+0x148>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01b      	beq.n	8003872 <TIM_Base_SetConfig+0xaa>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a35      	ldr	r2, [pc, #212]	@ (8003914 <TIM_Base_SetConfig+0x14c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d017      	beq.n	8003872 <TIM_Base_SetConfig+0xaa>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a34      	ldr	r2, [pc, #208]	@ (8003918 <TIM_Base_SetConfig+0x150>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <TIM_Base_SetConfig+0xaa>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a33      	ldr	r2, [pc, #204]	@ (800391c <TIM_Base_SetConfig+0x154>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00f      	beq.n	8003872 <TIM_Base_SetConfig+0xaa>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a33      	ldr	r2, [pc, #204]	@ (8003924 <TIM_Base_SetConfig+0x15c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00b      	beq.n	8003872 <TIM_Base_SetConfig+0xaa>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a32      	ldr	r2, [pc, #200]	@ (8003928 <TIM_Base_SetConfig+0x160>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <TIM_Base_SetConfig+0xaa>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a31      	ldr	r2, [pc, #196]	@ (800392c <TIM_Base_SetConfig+0x164>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_Base_SetConfig+0xaa>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2c      	ldr	r2, [pc, #176]	@ (8003920 <TIM_Base_SetConfig+0x158>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a18      	ldr	r2, [pc, #96]	@ (800390c <TIM_Base_SetConfig+0x144>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d013      	beq.n	80038d8 <TIM_Base_SetConfig+0x110>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a1a      	ldr	r2, [pc, #104]	@ (800391c <TIM_Base_SetConfig+0x154>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00f      	beq.n	80038d8 <TIM_Base_SetConfig+0x110>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003924 <TIM_Base_SetConfig+0x15c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00b      	beq.n	80038d8 <TIM_Base_SetConfig+0x110>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a19      	ldr	r2, [pc, #100]	@ (8003928 <TIM_Base_SetConfig+0x160>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <TIM_Base_SetConfig+0x110>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a18      	ldr	r2, [pc, #96]	@ (800392c <TIM_Base_SetConfig+0x164>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0x110>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a13      	ldr	r2, [pc, #76]	@ (8003920 <TIM_Base_SetConfig+0x158>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d103      	bne.n	80038e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	611a      	str	r2, [r3, #16]
  }
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40000c00 	.word	0x40000c00
 800391c:	40013400 	.word	0x40013400
 8003920:	40015000 	.word	0x40015000
 8003924:	40014000 	.word	0x40014000
 8003928:	40014400 	.word	0x40014400
 800392c:	40014800 	.word	0x40014800

08003930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 030a 	bic.w	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f023 0210 	bic.w	r2, r3, #16
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f043 0307 	orr.w	r3, r3, #7
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	609a      	str	r2, [r3, #8]
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e074      	b.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a34      	ldr	r2, [pc, #208]	@ (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a33      	ldr	r2, [pc, #204]	@ (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a31      	ldr	r2, [pc, #196]	@ (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003ac4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a21      	ldr	r2, [pc, #132]	@ (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d022      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b00:	d01d      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1f      	ldr	r2, [pc, #124]	@ (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d018      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	@ (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00e      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a15      	ldr	r2, [pc, #84]	@ (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d10c      	bne.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40013400 	.word	0x40013400
 8003b80:	40015000 	.word	0x40015000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40014000 	.word	0x40014000

08003b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <memset>:
 8003c20:	4402      	add	r2, r0
 8003c22:	4603      	mov	r3, r0
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d100      	bne.n	8003c2a <memset+0xa>
 8003c28:	4770      	bx	lr
 8003c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2e:	e7f9      	b.n	8003c24 <memset+0x4>

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4d0d      	ldr	r5, [pc, #52]	@ (8003c68 <__libc_init_array+0x38>)
 8003c34:	4c0d      	ldr	r4, [pc, #52]	@ (8003c6c <__libc_init_array+0x3c>)
 8003c36:	1b64      	subs	r4, r4, r5
 8003c38:	10a4      	asrs	r4, r4, #2
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	4d0b      	ldr	r5, [pc, #44]	@ (8003c70 <__libc_init_array+0x40>)
 8003c42:	4c0c      	ldr	r4, [pc, #48]	@ (8003c74 <__libc_init_array+0x44>)
 8003c44:	f000 fd48 	bl	80046d8 <_init>
 8003c48:	1b64      	subs	r4, r4, r5
 8003c4a:	10a4      	asrs	r4, r4, #2
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	08004ae4 	.word	0x08004ae4
 8003c6c:	08004ae4 	.word	0x08004ae4
 8003c70:	08004ae4 	.word	0x08004ae4
 8003c74:	08004ae8 	.word	0x08004ae8

08003c78 <sinf>:
 8003c78:	ee10 3a10 	vmov	r3, s0
 8003c7c:	b507      	push	{r0, r1, r2, lr}
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cfc <sinf+0x84>)
 8003c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d807      	bhi.n	8003c98 <sinf+0x20>
 8003c88:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8003d00 <sinf+0x88>
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	b003      	add	sp, #12
 8003c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c94:	f000 b88e 	b.w	8003db4 <__kernel_sinf>
 8003c98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003c9c:	d304      	bcc.n	8003ca8 <sinf+0x30>
 8003c9e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003ca2:	b003      	add	sp, #12
 8003ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ca8:	4668      	mov	r0, sp
 8003caa:	f000 f8cb 	bl	8003e44 <__ieee754_rem_pio2f>
 8003cae:	f000 0003 	and.w	r0, r0, #3
 8003cb2:	2801      	cmp	r0, #1
 8003cb4:	d00a      	beq.n	8003ccc <sinf+0x54>
 8003cb6:	2802      	cmp	r0, #2
 8003cb8:	d00f      	beq.n	8003cda <sinf+0x62>
 8003cba:	b9c0      	cbnz	r0, 8003cee <sinf+0x76>
 8003cbc:	eddd 0a01 	vldr	s1, [sp, #4]
 8003cc0:	ed9d 0a00 	vldr	s0, [sp]
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f000 f875 	bl	8003db4 <__kernel_sinf>
 8003cca:	e7ea      	b.n	8003ca2 <sinf+0x2a>
 8003ccc:	eddd 0a01 	vldr	s1, [sp, #4]
 8003cd0:	ed9d 0a00 	vldr	s0, [sp]
 8003cd4:	f000 f816 	bl	8003d04 <__kernel_cosf>
 8003cd8:	e7e3      	b.n	8003ca2 <sinf+0x2a>
 8003cda:	eddd 0a01 	vldr	s1, [sp, #4]
 8003cde:	ed9d 0a00 	vldr	s0, [sp]
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f000 f866 	bl	8003db4 <__kernel_sinf>
 8003ce8:	eeb1 0a40 	vneg.f32	s0, s0
 8003cec:	e7d9      	b.n	8003ca2 <sinf+0x2a>
 8003cee:	eddd 0a01 	vldr	s1, [sp, #4]
 8003cf2:	ed9d 0a00 	vldr	s0, [sp]
 8003cf6:	f000 f805 	bl	8003d04 <__kernel_cosf>
 8003cfa:	e7f5      	b.n	8003ce8 <sinf+0x70>
 8003cfc:	3f490fd8 	.word	0x3f490fd8
 8003d00:	00000000 	.word	0x00000000

08003d04 <__kernel_cosf>:
 8003d04:	ee10 3a10 	vmov	r3, s0
 8003d08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d0c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003d10:	eef0 6a40 	vmov.f32	s13, s0
 8003d14:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003d18:	d204      	bcs.n	8003d24 <__kernel_cosf+0x20>
 8003d1a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8003d1e:	ee17 2a90 	vmov	r2, s15
 8003d22:	b342      	cbz	r2, 8003d76 <__kernel_cosf+0x72>
 8003d24:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8003d28:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003d94 <__kernel_cosf+0x90>
 8003d2c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003d98 <__kernel_cosf+0x94>
 8003d30:	4a1a      	ldr	r2, [pc, #104]	@ (8003d9c <__kernel_cosf+0x98>)
 8003d32:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003d36:	4293      	cmp	r3, r2
 8003d38:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003da0 <__kernel_cosf+0x9c>
 8003d3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003d40:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8003da4 <__kernel_cosf+0xa0>
 8003d44:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003d48:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003da8 <__kernel_cosf+0xa4>
 8003d4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003d50:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8003dac <__kernel_cosf+0xa8>
 8003d54:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003d58:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8003d5c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003d60:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003d64:	eee7 0a06 	vfma.f32	s1, s14, s12
 8003d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6c:	d804      	bhi.n	8003d78 <__kernel_cosf+0x74>
 8003d6e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003d72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003d76:	4770      	bx	lr
 8003d78:	4a0d      	ldr	r2, [pc, #52]	@ (8003db0 <__kernel_cosf+0xac>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	bf9a      	itte	ls
 8003d7e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8003d82:	ee07 3a10 	vmovls	s14, r3
 8003d86:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8003d8a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003d8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d92:	e7ec      	b.n	8003d6e <__kernel_cosf+0x6a>
 8003d94:	ad47d74e 	.word	0xad47d74e
 8003d98:	310f74f6 	.word	0x310f74f6
 8003d9c:	3e999999 	.word	0x3e999999
 8003da0:	b493f27c 	.word	0xb493f27c
 8003da4:	37d00d01 	.word	0x37d00d01
 8003da8:	bab60b61 	.word	0xbab60b61
 8003dac:	3d2aaaab 	.word	0x3d2aaaab
 8003db0:	3f480000 	.word	0x3f480000

08003db4 <__kernel_sinf>:
 8003db4:	ee10 3a10 	vmov	r3, s0
 8003db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dbc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003dc0:	d204      	bcs.n	8003dcc <__kernel_sinf+0x18>
 8003dc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003dc6:	ee17 3a90 	vmov	r3, s15
 8003dca:	b35b      	cbz	r3, 8003e24 <__kernel_sinf+0x70>
 8003dcc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003dd0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003e28 <__kernel_sinf+0x74>
 8003dd4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8003e2c <__kernel_sinf+0x78>
 8003dd8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003ddc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8003e30 <__kernel_sinf+0x7c>
 8003de0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003de4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8003e34 <__kernel_sinf+0x80>
 8003de8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003dec:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8003e38 <__kernel_sinf+0x84>
 8003df0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003df4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003df8:	b930      	cbnz	r0, 8003e08 <__kernel_sinf+0x54>
 8003dfa:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8003e3c <__kernel_sinf+0x88>
 8003dfe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003e02:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003e06:	4770      	bx	lr
 8003e08:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003e0c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003e10:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003e14:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003e18:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8003e40 <__kernel_sinf+0x8c>
 8003e1c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003e20:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	2f2ec9d3 	.word	0x2f2ec9d3
 8003e2c:	b2d72f34 	.word	0xb2d72f34
 8003e30:	3638ef1b 	.word	0x3638ef1b
 8003e34:	b9500d01 	.word	0xb9500d01
 8003e38:	3c088889 	.word	0x3c088889
 8003e3c:	be2aaaab 	.word	0xbe2aaaab
 8003e40:	3e2aaaab 	.word	0x3e2aaaab

08003e44 <__ieee754_rem_pio2f>:
 8003e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e46:	ee10 6a10 	vmov	r6, s0
 8003e4a:	4b88      	ldr	r3, [pc, #544]	@ (800406c <__ieee754_rem_pio2f+0x228>)
 8003e4c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8003e50:	429d      	cmp	r5, r3
 8003e52:	b087      	sub	sp, #28
 8003e54:	4604      	mov	r4, r0
 8003e56:	d805      	bhi.n	8003e64 <__ieee754_rem_pio2f+0x20>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	ed80 0a00 	vstr	s0, [r0]
 8003e5e:	6043      	str	r3, [r0, #4]
 8003e60:	2000      	movs	r0, #0
 8003e62:	e022      	b.n	8003eaa <__ieee754_rem_pio2f+0x66>
 8003e64:	4b82      	ldr	r3, [pc, #520]	@ (8004070 <__ieee754_rem_pio2f+0x22c>)
 8003e66:	429d      	cmp	r5, r3
 8003e68:	d83a      	bhi.n	8003ee0 <__ieee754_rem_pio2f+0x9c>
 8003e6a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003e6e:	2e00      	cmp	r6, #0
 8003e70:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004074 <__ieee754_rem_pio2f+0x230>
 8003e74:	4a80      	ldr	r2, [pc, #512]	@ (8004078 <__ieee754_rem_pio2f+0x234>)
 8003e76:	f023 030f 	bic.w	r3, r3, #15
 8003e7a:	dd18      	ble.n	8003eae <__ieee754_rem_pio2f+0x6a>
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003e82:	bf09      	itett	eq
 8003e84:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800407c <__ieee754_rem_pio2f+0x238>
 8003e88:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004080 <__ieee754_rem_pio2f+0x23c>
 8003e8c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004084 <__ieee754_rem_pio2f+0x240>
 8003e90:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003e94:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003e98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e9c:	ed80 7a00 	vstr	s14, [r0]
 8003ea0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003ea4:	edc0 7a01 	vstr	s15, [r0, #4]
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	b007      	add	sp, #28
 8003eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003eb4:	bf09      	itett	eq
 8003eb6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800407c <__ieee754_rem_pio2f+0x238>
 8003eba:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004080 <__ieee754_rem_pio2f+0x23c>
 8003ebe:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004084 <__ieee754_rem_pio2f+0x240>
 8003ec2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003ec6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003eca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ece:	ed80 7a00 	vstr	s14, [r0]
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	edc0 7a01 	vstr	s15, [r0, #4]
 8003eda:	f04f 30ff 	mov.w	r0, #4294967295
 8003ede:	e7e4      	b.n	8003eaa <__ieee754_rem_pio2f+0x66>
 8003ee0:	4b69      	ldr	r3, [pc, #420]	@ (8004088 <__ieee754_rem_pio2f+0x244>)
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	d873      	bhi.n	8003fce <__ieee754_rem_pio2f+0x18a>
 8003ee6:	f000 f8dd 	bl	80040a4 <fabsf>
 8003eea:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800408c <__ieee754_rem_pio2f+0x248>
 8003eee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003ef2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003efe:	ee17 0a90 	vmov	r0, s15
 8003f02:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004074 <__ieee754_rem_pio2f+0x230>
 8003f06:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003f0a:	281f      	cmp	r0, #31
 8003f0c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004080 <__ieee754_rem_pio2f+0x23c>
 8003f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f14:	eeb1 6a47 	vneg.f32	s12, s14
 8003f18:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003f1c:	ee16 1a90 	vmov	r1, s13
 8003f20:	dc09      	bgt.n	8003f36 <__ieee754_rem_pio2f+0xf2>
 8003f22:	4a5b      	ldr	r2, [pc, #364]	@ (8004090 <__ieee754_rem_pio2f+0x24c>)
 8003f24:	1e47      	subs	r7, r0, #1
 8003f26:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003f2a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8003f2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d107      	bne.n	8003f46 <__ieee754_rem_pio2f+0x102>
 8003f36:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8003f3a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8003f3e:	2a08      	cmp	r2, #8
 8003f40:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8003f44:	dc14      	bgt.n	8003f70 <__ieee754_rem_pio2f+0x12c>
 8003f46:	6021      	str	r1, [r4, #0]
 8003f48:	ed94 7a00 	vldr	s14, [r4]
 8003f4c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003f50:	2e00      	cmp	r6, #0
 8003f52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003f56:	ed84 0a01 	vstr	s0, [r4, #4]
 8003f5a:	daa6      	bge.n	8003eaa <__ieee754_rem_pio2f+0x66>
 8003f5c:	eeb1 7a47 	vneg.f32	s14, s14
 8003f60:	eeb1 0a40 	vneg.f32	s0, s0
 8003f64:	ed84 7a00 	vstr	s14, [r4]
 8003f68:	ed84 0a01 	vstr	s0, [r4, #4]
 8003f6c:	4240      	negs	r0, r0
 8003f6e:	e79c      	b.n	8003eaa <__ieee754_rem_pio2f+0x66>
 8003f70:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800407c <__ieee754_rem_pio2f+0x238>
 8003f74:	eef0 6a40 	vmov.f32	s13, s0
 8003f78:	eee6 6a25 	vfma.f32	s13, s12, s11
 8003f7c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8003f80:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003f84:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004084 <__ieee754_rem_pio2f+0x240>
 8003f88:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003f8c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003f90:	ee15 2a90 	vmov	r2, s11
 8003f94:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003f98:	1a5b      	subs	r3, r3, r1
 8003f9a:	2b19      	cmp	r3, #25
 8003f9c:	dc04      	bgt.n	8003fa8 <__ieee754_rem_pio2f+0x164>
 8003f9e:	edc4 5a00 	vstr	s11, [r4]
 8003fa2:	eeb0 0a66 	vmov.f32	s0, s13
 8003fa6:	e7cf      	b.n	8003f48 <__ieee754_rem_pio2f+0x104>
 8003fa8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004094 <__ieee754_rem_pio2f+0x250>
 8003fac:	eeb0 0a66 	vmov.f32	s0, s13
 8003fb0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8003fb4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003fb8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004098 <__ieee754_rem_pio2f+0x254>
 8003fbc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003fc0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8003fc4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003fc8:	ed84 7a00 	vstr	s14, [r4]
 8003fcc:	e7bc      	b.n	8003f48 <__ieee754_rem_pio2f+0x104>
 8003fce:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8003fd2:	d306      	bcc.n	8003fe2 <__ieee754_rem_pio2f+0x19e>
 8003fd4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003fd8:	edc0 7a01 	vstr	s15, [r0, #4]
 8003fdc:	edc0 7a00 	vstr	s15, [r0]
 8003fe0:	e73e      	b.n	8003e60 <__ieee754_rem_pio2f+0x1c>
 8003fe2:	15ea      	asrs	r2, r5, #23
 8003fe4:	3a86      	subs	r2, #134	@ 0x86
 8003fe6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003ff2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800409c <__ieee754_rem_pio2f+0x258>
 8003ff6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ffe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004002:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004006:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800400a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800400e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004012:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004016:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800401a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004022:	edcd 7a05 	vstr	s15, [sp, #20]
 8004026:	d11e      	bne.n	8004066 <__ieee754_rem_pio2f+0x222>
 8004028:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2302      	movne	r3, #2
 8004036:	491a      	ldr	r1, [pc, #104]	@ (80040a0 <__ieee754_rem_pio2f+0x25c>)
 8004038:	9101      	str	r1, [sp, #4]
 800403a:	2102      	movs	r1, #2
 800403c:	9100      	str	r1, [sp, #0]
 800403e:	a803      	add	r0, sp, #12
 8004040:	4621      	mov	r1, r4
 8004042:	f000 f837 	bl	80040b4 <__kernel_rem_pio2f>
 8004046:	2e00      	cmp	r6, #0
 8004048:	f6bf af2f 	bge.w	8003eaa <__ieee754_rem_pio2f+0x66>
 800404c:	edd4 7a00 	vldr	s15, [r4]
 8004050:	eef1 7a67 	vneg.f32	s15, s15
 8004054:	edc4 7a00 	vstr	s15, [r4]
 8004058:	edd4 7a01 	vldr	s15, [r4, #4]
 800405c:	eef1 7a67 	vneg.f32	s15, s15
 8004060:	edc4 7a01 	vstr	s15, [r4, #4]
 8004064:	e782      	b.n	8003f6c <__ieee754_rem_pio2f+0x128>
 8004066:	2303      	movs	r3, #3
 8004068:	e7e5      	b.n	8004036 <__ieee754_rem_pio2f+0x1f2>
 800406a:	bf00      	nop
 800406c:	3f490fd8 	.word	0x3f490fd8
 8004070:	4016cbe3 	.word	0x4016cbe3
 8004074:	3fc90f80 	.word	0x3fc90f80
 8004078:	3fc90fd0 	.word	0x3fc90fd0
 800407c:	37354400 	.word	0x37354400
 8004080:	37354443 	.word	0x37354443
 8004084:	2e85a308 	.word	0x2e85a308
 8004088:	43490f80 	.word	0x43490f80
 800408c:	3f22f984 	.word	0x3f22f984
 8004090:	0800470c 	.word	0x0800470c
 8004094:	2e85a300 	.word	0x2e85a300
 8004098:	248d3132 	.word	0x248d3132
 800409c:	43800000 	.word	0x43800000
 80040a0:	0800478c 	.word	0x0800478c

080040a4 <fabsf>:
 80040a4:	ee10 3a10 	vmov	r3, s0
 80040a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ac:	ee00 3a10 	vmov	s0, r3
 80040b0:	4770      	bx	lr
	...

080040b4 <__kernel_rem_pio2f>:
 80040b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b8:	ed2d 8b04 	vpush	{d8-d9}
 80040bc:	b0d9      	sub	sp, #356	@ 0x164
 80040be:	4690      	mov	r8, r2
 80040c0:	9001      	str	r0, [sp, #4]
 80040c2:	4ab6      	ldr	r2, [pc, #728]	@ (800439c <__kernel_rem_pio2f+0x2e8>)
 80040c4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80040c6:	f118 0f04 	cmn.w	r8, #4
 80040ca:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80040ce:	460f      	mov	r7, r1
 80040d0:	f103 3bff 	add.w	fp, r3, #4294967295
 80040d4:	db26      	blt.n	8004124 <__kernel_rem_pio2f+0x70>
 80040d6:	f1b8 0203 	subs.w	r2, r8, #3
 80040da:	bf48      	it	mi
 80040dc:	f108 0204 	addmi.w	r2, r8, #4
 80040e0:	10d2      	asrs	r2, r2, #3
 80040e2:	1c55      	adds	r5, r2, #1
 80040e4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80040e6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80043ac <__kernel_rem_pio2f+0x2f8>
 80040ea:	00e8      	lsls	r0, r5, #3
 80040ec:	eba2 060b 	sub.w	r6, r2, fp
 80040f0:	9002      	str	r0, [sp, #8]
 80040f2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80040f6:	eb0a 0c0b 	add.w	ip, sl, fp
 80040fa:	ac1c      	add	r4, sp, #112	@ 0x70
 80040fc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8004100:	2000      	movs	r0, #0
 8004102:	4560      	cmp	r0, ip
 8004104:	dd10      	ble.n	8004128 <__kernel_rem_pio2f+0x74>
 8004106:	a91c      	add	r1, sp, #112	@ 0x70
 8004108:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800410c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8004110:	2600      	movs	r6, #0
 8004112:	4556      	cmp	r6, sl
 8004114:	dc24      	bgt.n	8004160 <__kernel_rem_pio2f+0xac>
 8004116:	f8dd e004 	ldr.w	lr, [sp, #4]
 800411a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80043ac <__kernel_rem_pio2f+0x2f8>
 800411e:	4684      	mov	ip, r0
 8004120:	2400      	movs	r4, #0
 8004122:	e016      	b.n	8004152 <__kernel_rem_pio2f+0x9e>
 8004124:	2200      	movs	r2, #0
 8004126:	e7dc      	b.n	80040e2 <__kernel_rem_pio2f+0x2e>
 8004128:	42c6      	cmn	r6, r0
 800412a:	bf5d      	ittte	pl
 800412c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8004130:	ee07 1a90 	vmovpl	s15, r1
 8004134:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004138:	eef0 7a47 	vmovmi.f32	s15, s14
 800413c:	ece4 7a01 	vstmia	r4!, {s15}
 8004140:	3001      	adds	r0, #1
 8004142:	e7de      	b.n	8004102 <__kernel_rem_pio2f+0x4e>
 8004144:	ecfe 6a01 	vldmia	lr!, {s13}
 8004148:	ed3c 7a01 	vldmdb	ip!, {s14}
 800414c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004150:	3401      	adds	r4, #1
 8004152:	455c      	cmp	r4, fp
 8004154:	ddf6      	ble.n	8004144 <__kernel_rem_pio2f+0x90>
 8004156:	ece9 7a01 	vstmia	r9!, {s15}
 800415a:	3601      	adds	r6, #1
 800415c:	3004      	adds	r0, #4
 800415e:	e7d8      	b.n	8004112 <__kernel_rem_pio2f+0x5e>
 8004160:	a908      	add	r1, sp, #32
 8004162:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004166:	9104      	str	r1, [sp, #16]
 8004168:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800416a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80043a8 <__kernel_rem_pio2f+0x2f4>
 800416e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80043a4 <__kernel_rem_pio2f+0x2f0>
 8004172:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004176:	9203      	str	r2, [sp, #12]
 8004178:	4654      	mov	r4, sl
 800417a:	00a2      	lsls	r2, r4, #2
 800417c:	9205      	str	r2, [sp, #20]
 800417e:	aa58      	add	r2, sp, #352	@ 0x160
 8004180:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004184:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004188:	a944      	add	r1, sp, #272	@ 0x110
 800418a:	aa08      	add	r2, sp, #32
 800418c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004190:	4694      	mov	ip, r2
 8004192:	4626      	mov	r6, r4
 8004194:	2e00      	cmp	r6, #0
 8004196:	dc4c      	bgt.n	8004232 <__kernel_rem_pio2f+0x17e>
 8004198:	4628      	mov	r0, r5
 800419a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800419e:	f000 f9f1 	bl	8004584 <scalbnf>
 80041a2:	eeb0 8a40 	vmov.f32	s16, s0
 80041a6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80041aa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80041ae:	f000 fa4f 	bl	8004650 <floorf>
 80041b2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80041b6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041c0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80041c4:	ee17 9a90 	vmov	r9, s15
 80041c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041cc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80041d0:	dd41      	ble.n	8004256 <__kernel_rem_pio2f+0x1a2>
 80041d2:	f104 3cff 	add.w	ip, r4, #4294967295
 80041d6:	a908      	add	r1, sp, #32
 80041d8:	f1c5 0e08 	rsb	lr, r5, #8
 80041dc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80041e0:	fa46 f00e 	asr.w	r0, r6, lr
 80041e4:	4481      	add	r9, r0
 80041e6:	fa00 f00e 	lsl.w	r0, r0, lr
 80041ea:	1a36      	subs	r6, r6, r0
 80041ec:	f1c5 0007 	rsb	r0, r5, #7
 80041f0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80041f4:	4106      	asrs	r6, r0
 80041f6:	2e00      	cmp	r6, #0
 80041f8:	dd3c      	ble.n	8004274 <__kernel_rem_pio2f+0x1c0>
 80041fa:	f04f 0e00 	mov.w	lr, #0
 80041fe:	f109 0901 	add.w	r9, r9, #1
 8004202:	4670      	mov	r0, lr
 8004204:	4574      	cmp	r4, lr
 8004206:	dc68      	bgt.n	80042da <__kernel_rem_pio2f+0x226>
 8004208:	2d00      	cmp	r5, #0
 800420a:	dd03      	ble.n	8004214 <__kernel_rem_pio2f+0x160>
 800420c:	2d01      	cmp	r5, #1
 800420e:	d074      	beq.n	80042fa <__kernel_rem_pio2f+0x246>
 8004210:	2d02      	cmp	r5, #2
 8004212:	d07d      	beq.n	8004310 <__kernel_rem_pio2f+0x25c>
 8004214:	2e02      	cmp	r6, #2
 8004216:	d12d      	bne.n	8004274 <__kernel_rem_pio2f+0x1c0>
 8004218:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800421c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004220:	b340      	cbz	r0, 8004274 <__kernel_rem_pio2f+0x1c0>
 8004222:	4628      	mov	r0, r5
 8004224:	9306      	str	r3, [sp, #24]
 8004226:	f000 f9ad 	bl	8004584 <scalbnf>
 800422a:	9b06      	ldr	r3, [sp, #24]
 800422c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004230:	e020      	b.n	8004274 <__kernel_rem_pio2f+0x1c0>
 8004232:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004236:	3e01      	subs	r6, #1
 8004238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800423c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004240:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004244:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004248:	ecac 0a01 	vstmia	ip!, {s0}
 800424c:	ed30 0a01 	vldmdb	r0!, {s0}
 8004250:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004254:	e79e      	b.n	8004194 <__kernel_rem_pio2f+0xe0>
 8004256:	d105      	bne.n	8004264 <__kernel_rem_pio2f+0x1b0>
 8004258:	1e60      	subs	r0, r4, #1
 800425a:	a908      	add	r1, sp, #32
 800425c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004260:	11f6      	asrs	r6, r6, #7
 8004262:	e7c8      	b.n	80041f6 <__kernel_rem_pio2f+0x142>
 8004264:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004268:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004270:	da31      	bge.n	80042d6 <__kernel_rem_pio2f+0x222>
 8004272:	2600      	movs	r6, #0
 8004274:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427c:	f040 8098 	bne.w	80043b0 <__kernel_rem_pio2f+0x2fc>
 8004280:	1e60      	subs	r0, r4, #1
 8004282:	2200      	movs	r2, #0
 8004284:	4550      	cmp	r0, sl
 8004286:	da4b      	bge.n	8004320 <__kernel_rem_pio2f+0x26c>
 8004288:	2a00      	cmp	r2, #0
 800428a:	d065      	beq.n	8004358 <__kernel_rem_pio2f+0x2a4>
 800428c:	3c01      	subs	r4, #1
 800428e:	ab08      	add	r3, sp, #32
 8004290:	3d08      	subs	r5, #8
 8004292:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f8      	beq.n	800428c <__kernel_rem_pio2f+0x1d8>
 800429a:	4628      	mov	r0, r5
 800429c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80042a0:	f000 f970 	bl	8004584 <scalbnf>
 80042a4:	1c63      	adds	r3, r4, #1
 80042a6:	aa44      	add	r2, sp, #272	@ 0x110
 80042a8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80043a8 <__kernel_rem_pio2f+0x2f4>
 80042ac:	0099      	lsls	r1, r3, #2
 80042ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80042b2:	4623      	mov	r3, r4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f280 80a9 	bge.w	800440c <__kernel_rem_pio2f+0x358>
 80042ba:	4623      	mov	r3, r4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f2c0 80c7 	blt.w	8004450 <__kernel_rem_pio2f+0x39c>
 80042c2:	aa44      	add	r2, sp, #272	@ 0x110
 80042c4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80042c8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80043a0 <__kernel_rem_pio2f+0x2ec>
 80042cc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80043ac <__kernel_rem_pio2f+0x2f8>
 80042d0:	2000      	movs	r0, #0
 80042d2:	1ae2      	subs	r2, r4, r3
 80042d4:	e0b1      	b.n	800443a <__kernel_rem_pio2f+0x386>
 80042d6:	2602      	movs	r6, #2
 80042d8:	e78f      	b.n	80041fa <__kernel_rem_pio2f+0x146>
 80042da:	f852 1b04 	ldr.w	r1, [r2], #4
 80042de:	b948      	cbnz	r0, 80042f4 <__kernel_rem_pio2f+0x240>
 80042e0:	b121      	cbz	r1, 80042ec <__kernel_rem_pio2f+0x238>
 80042e2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80042e6:	f842 1c04 	str.w	r1, [r2, #-4]
 80042ea:	2101      	movs	r1, #1
 80042ec:	f10e 0e01 	add.w	lr, lr, #1
 80042f0:	4608      	mov	r0, r1
 80042f2:	e787      	b.n	8004204 <__kernel_rem_pio2f+0x150>
 80042f4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80042f8:	e7f5      	b.n	80042e6 <__kernel_rem_pio2f+0x232>
 80042fa:	f104 3cff 	add.w	ip, r4, #4294967295
 80042fe:	aa08      	add	r2, sp, #32
 8004300:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004304:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004308:	a908      	add	r1, sp, #32
 800430a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800430e:	e781      	b.n	8004214 <__kernel_rem_pio2f+0x160>
 8004310:	f104 3cff 	add.w	ip, r4, #4294967295
 8004314:	aa08      	add	r2, sp, #32
 8004316:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800431a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800431e:	e7f3      	b.n	8004308 <__kernel_rem_pio2f+0x254>
 8004320:	a908      	add	r1, sp, #32
 8004322:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004326:	3801      	subs	r0, #1
 8004328:	430a      	orrs	r2, r1
 800432a:	e7ab      	b.n	8004284 <__kernel_rem_pio2f+0x1d0>
 800432c:	3201      	adds	r2, #1
 800432e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8004332:	2e00      	cmp	r6, #0
 8004334:	d0fa      	beq.n	800432c <__kernel_rem_pio2f+0x278>
 8004336:	9905      	ldr	r1, [sp, #20]
 8004338:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800433c:	eb0d 0001 	add.w	r0, sp, r1
 8004340:	18e6      	adds	r6, r4, r3
 8004342:	a91c      	add	r1, sp, #112	@ 0x70
 8004344:	f104 0c01 	add.w	ip, r4, #1
 8004348:	384c      	subs	r0, #76	@ 0x4c
 800434a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800434e:	4422      	add	r2, r4
 8004350:	4562      	cmp	r2, ip
 8004352:	da04      	bge.n	800435e <__kernel_rem_pio2f+0x2aa>
 8004354:	4614      	mov	r4, r2
 8004356:	e710      	b.n	800417a <__kernel_rem_pio2f+0xc6>
 8004358:	9804      	ldr	r0, [sp, #16]
 800435a:	2201      	movs	r2, #1
 800435c:	e7e7      	b.n	800432e <__kernel_rem_pio2f+0x27a>
 800435e:	9903      	ldr	r1, [sp, #12]
 8004360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004364:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004368:	9105      	str	r1, [sp, #20]
 800436a:	ee07 1a90 	vmov	s15, r1
 800436e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004372:	2400      	movs	r4, #0
 8004374:	ece6 7a01 	vstmia	r6!, {s15}
 8004378:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80043ac <__kernel_rem_pio2f+0x2f8>
 800437c:	46b1      	mov	r9, r6
 800437e:	455c      	cmp	r4, fp
 8004380:	dd04      	ble.n	800438c <__kernel_rem_pio2f+0x2d8>
 8004382:	ece0 7a01 	vstmia	r0!, {s15}
 8004386:	f10c 0c01 	add.w	ip, ip, #1
 800438a:	e7e1      	b.n	8004350 <__kernel_rem_pio2f+0x29c>
 800438c:	ecfe 6a01 	vldmia	lr!, {s13}
 8004390:	ed39 7a01 	vldmdb	r9!, {s14}
 8004394:	3401      	adds	r4, #1
 8004396:	eee6 7a87 	vfma.f32	s15, s13, s14
 800439a:	e7f0      	b.n	800437e <__kernel_rem_pio2f+0x2ca>
 800439c:	08004ad0 	.word	0x08004ad0
 80043a0:	08004aa4 	.word	0x08004aa4
 80043a4:	43800000 	.word	0x43800000
 80043a8:	3b800000 	.word	0x3b800000
 80043ac:	00000000 	.word	0x00000000
 80043b0:	9b02      	ldr	r3, [sp, #8]
 80043b2:	eeb0 0a48 	vmov.f32	s0, s16
 80043b6:	eba3 0008 	sub.w	r0, r3, r8
 80043ba:	f000 f8e3 	bl	8004584 <scalbnf>
 80043be:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80043a4 <__kernel_rem_pio2f+0x2f0>
 80043c2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80043c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ca:	db19      	blt.n	8004400 <__kernel_rem_pio2f+0x34c>
 80043cc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80043a8 <__kernel_rem_pio2f+0x2f4>
 80043d0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80043d4:	aa08      	add	r2, sp, #32
 80043d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043da:	3508      	adds	r5, #8
 80043dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80043e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80043ec:	ee10 3a10 	vmov	r3, s0
 80043f0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80043f4:	ee17 3a90 	vmov	r3, s15
 80043f8:	3401      	adds	r4, #1
 80043fa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80043fe:	e74c      	b.n	800429a <__kernel_rem_pio2f+0x1e6>
 8004400:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004404:	aa08      	add	r2, sp, #32
 8004406:	ee10 3a10 	vmov	r3, s0
 800440a:	e7f6      	b.n	80043fa <__kernel_rem_pio2f+0x346>
 800440c:	a808      	add	r0, sp, #32
 800440e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004412:	9001      	str	r0, [sp, #4]
 8004414:	ee07 0a90 	vmov	s15, r0
 8004418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441c:	3b01      	subs	r3, #1
 800441e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004422:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004426:	ed62 7a01 	vstmdb	r2!, {s15}
 800442a:	e743      	b.n	80042b4 <__kernel_rem_pio2f+0x200>
 800442c:	ecfc 6a01 	vldmia	ip!, {s13}
 8004430:	ecb5 7a01 	vldmia	r5!, {s14}
 8004434:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004438:	3001      	adds	r0, #1
 800443a:	4550      	cmp	r0, sl
 800443c:	dc01      	bgt.n	8004442 <__kernel_rem_pio2f+0x38e>
 800443e:	4290      	cmp	r0, r2
 8004440:	ddf4      	ble.n	800442c <__kernel_rem_pio2f+0x378>
 8004442:	a858      	add	r0, sp, #352	@ 0x160
 8004444:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004448:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800444c:	3b01      	subs	r3, #1
 800444e:	e735      	b.n	80042bc <__kernel_rem_pio2f+0x208>
 8004450:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004452:	2b02      	cmp	r3, #2
 8004454:	dc09      	bgt.n	800446a <__kernel_rem_pio2f+0x3b6>
 8004456:	2b00      	cmp	r3, #0
 8004458:	dc27      	bgt.n	80044aa <__kernel_rem_pio2f+0x3f6>
 800445a:	d040      	beq.n	80044de <__kernel_rem_pio2f+0x42a>
 800445c:	f009 0007 	and.w	r0, r9, #7
 8004460:	b059      	add	sp, #356	@ 0x164
 8004462:	ecbd 8b04 	vpop	{d8-d9}
 8004466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800446c:	2b03      	cmp	r3, #3
 800446e:	d1f5      	bne.n	800445c <__kernel_rem_pio2f+0x3a8>
 8004470:	aa30      	add	r2, sp, #192	@ 0xc0
 8004472:	1f0b      	subs	r3, r1, #4
 8004474:	4413      	add	r3, r2
 8004476:	461a      	mov	r2, r3
 8004478:	4620      	mov	r0, r4
 800447a:	2800      	cmp	r0, #0
 800447c:	dc50      	bgt.n	8004520 <__kernel_rem_pio2f+0x46c>
 800447e:	4622      	mov	r2, r4
 8004480:	2a01      	cmp	r2, #1
 8004482:	dc5d      	bgt.n	8004540 <__kernel_rem_pio2f+0x48c>
 8004484:	ab30      	add	r3, sp, #192	@ 0xc0
 8004486:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80043ac <__kernel_rem_pio2f+0x2f8>
 800448a:	440b      	add	r3, r1
 800448c:	2c01      	cmp	r4, #1
 800448e:	dc67      	bgt.n	8004560 <__kernel_rem_pio2f+0x4ac>
 8004490:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004494:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004498:	2e00      	cmp	r6, #0
 800449a:	d167      	bne.n	800456c <__kernel_rem_pio2f+0x4b8>
 800449c:	edc7 6a00 	vstr	s13, [r7]
 80044a0:	ed87 7a01 	vstr	s14, [r7, #4]
 80044a4:	edc7 7a02 	vstr	s15, [r7, #8]
 80044a8:	e7d8      	b.n	800445c <__kernel_rem_pio2f+0x3a8>
 80044aa:	ab30      	add	r3, sp, #192	@ 0xc0
 80044ac:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80043ac <__kernel_rem_pio2f+0x2f8>
 80044b0:	440b      	add	r3, r1
 80044b2:	4622      	mov	r2, r4
 80044b4:	2a00      	cmp	r2, #0
 80044b6:	da24      	bge.n	8004502 <__kernel_rem_pio2f+0x44e>
 80044b8:	b34e      	cbz	r6, 800450e <__kernel_rem_pio2f+0x45a>
 80044ba:	eef1 7a47 	vneg.f32	s15, s14
 80044be:	edc7 7a00 	vstr	s15, [r7]
 80044c2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80044c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044ca:	aa31      	add	r2, sp, #196	@ 0xc4
 80044cc:	2301      	movs	r3, #1
 80044ce:	429c      	cmp	r4, r3
 80044d0:	da20      	bge.n	8004514 <__kernel_rem_pio2f+0x460>
 80044d2:	b10e      	cbz	r6, 80044d8 <__kernel_rem_pio2f+0x424>
 80044d4:	eef1 7a67 	vneg.f32	s15, s15
 80044d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80044dc:	e7be      	b.n	800445c <__kernel_rem_pio2f+0x3a8>
 80044de:	ab30      	add	r3, sp, #192	@ 0xc0
 80044e0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80043ac <__kernel_rem_pio2f+0x2f8>
 80044e4:	440b      	add	r3, r1
 80044e6:	2c00      	cmp	r4, #0
 80044e8:	da05      	bge.n	80044f6 <__kernel_rem_pio2f+0x442>
 80044ea:	b10e      	cbz	r6, 80044f0 <__kernel_rem_pio2f+0x43c>
 80044ec:	eef1 7a67 	vneg.f32	s15, s15
 80044f0:	edc7 7a00 	vstr	s15, [r7]
 80044f4:	e7b2      	b.n	800445c <__kernel_rem_pio2f+0x3a8>
 80044f6:	ed33 7a01 	vldmdb	r3!, {s14}
 80044fa:	3c01      	subs	r4, #1
 80044fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004500:	e7f1      	b.n	80044e6 <__kernel_rem_pio2f+0x432>
 8004502:	ed73 7a01 	vldmdb	r3!, {s15}
 8004506:	3a01      	subs	r2, #1
 8004508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800450c:	e7d2      	b.n	80044b4 <__kernel_rem_pio2f+0x400>
 800450e:	eef0 7a47 	vmov.f32	s15, s14
 8004512:	e7d4      	b.n	80044be <__kernel_rem_pio2f+0x40a>
 8004514:	ecb2 7a01 	vldmia	r2!, {s14}
 8004518:	3301      	adds	r3, #1
 800451a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800451e:	e7d6      	b.n	80044ce <__kernel_rem_pio2f+0x41a>
 8004520:	ed72 7a01 	vldmdb	r2!, {s15}
 8004524:	edd2 6a01 	vldr	s13, [r2, #4]
 8004528:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800452c:	3801      	subs	r0, #1
 800452e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004532:	ed82 7a00 	vstr	s14, [r2]
 8004536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453a:	edc2 7a01 	vstr	s15, [r2, #4]
 800453e:	e79c      	b.n	800447a <__kernel_rem_pio2f+0x3c6>
 8004540:	ed73 7a01 	vldmdb	r3!, {s15}
 8004544:	edd3 6a01 	vldr	s13, [r3, #4]
 8004548:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800454c:	3a01      	subs	r2, #1
 800454e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004552:	ed83 7a00 	vstr	s14, [r3]
 8004556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455a:	edc3 7a01 	vstr	s15, [r3, #4]
 800455e:	e78f      	b.n	8004480 <__kernel_rem_pio2f+0x3cc>
 8004560:	ed33 7a01 	vldmdb	r3!, {s14}
 8004564:	3c01      	subs	r4, #1
 8004566:	ee77 7a87 	vadd.f32	s15, s15, s14
 800456a:	e78f      	b.n	800448c <__kernel_rem_pio2f+0x3d8>
 800456c:	eef1 6a66 	vneg.f32	s13, s13
 8004570:	eeb1 7a47 	vneg.f32	s14, s14
 8004574:	edc7 6a00 	vstr	s13, [r7]
 8004578:	ed87 7a01 	vstr	s14, [r7, #4]
 800457c:	eef1 7a67 	vneg.f32	s15, s15
 8004580:	e790      	b.n	80044a4 <__kernel_rem_pio2f+0x3f0>
 8004582:	bf00      	nop

08004584 <scalbnf>:
 8004584:	ee10 3a10 	vmov	r3, s0
 8004588:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800458c:	d02b      	beq.n	80045e6 <scalbnf+0x62>
 800458e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004592:	d302      	bcc.n	800459a <scalbnf+0x16>
 8004594:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004598:	4770      	bx	lr
 800459a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800459e:	d123      	bne.n	80045e8 <scalbnf+0x64>
 80045a0:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <scalbnf+0xb0>)
 80045a2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8004638 <scalbnf+0xb4>
 80045a6:	4298      	cmp	r0, r3
 80045a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80045ac:	db17      	blt.n	80045de <scalbnf+0x5a>
 80045ae:	ee10 3a10 	vmov	r3, s0
 80045b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80045b6:	3a19      	subs	r2, #25
 80045b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80045bc:	4288      	cmp	r0, r1
 80045be:	dd15      	ble.n	80045ec <scalbnf+0x68>
 80045c0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800463c <scalbnf+0xb8>
 80045c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8004640 <scalbnf+0xbc>
 80045c8:	ee10 3a10 	vmov	r3, s0
 80045cc:	eeb0 7a67 	vmov.f32	s14, s15
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bfb8      	it	lt
 80045d4:	eef0 7a66 	vmovlt.f32	s15, s13
 80045d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80045dc:	4770      	bx	lr
 80045de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004644 <scalbnf+0xc0>
 80045e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80045e6:	4770      	bx	lr
 80045e8:	0dd2      	lsrs	r2, r2, #23
 80045ea:	e7e5      	b.n	80045b8 <scalbnf+0x34>
 80045ec:	4410      	add	r0, r2
 80045ee:	28fe      	cmp	r0, #254	@ 0xfe
 80045f0:	dce6      	bgt.n	80045c0 <scalbnf+0x3c>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	dd06      	ble.n	8004604 <scalbnf+0x80>
 80045f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80045fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80045fe:	ee00 3a10 	vmov	s0, r3
 8004602:	4770      	bx	lr
 8004604:	f110 0f16 	cmn.w	r0, #22
 8004608:	da09      	bge.n	800461e <scalbnf+0x9a>
 800460a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004644 <scalbnf+0xc0>
 800460e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8004648 <scalbnf+0xc4>
 8004612:	ee10 3a10 	vmov	r3, s0
 8004616:	eeb0 7a67 	vmov.f32	s14, s15
 800461a:	2b00      	cmp	r3, #0
 800461c:	e7d9      	b.n	80045d2 <scalbnf+0x4e>
 800461e:	3019      	adds	r0, #25
 8004620:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004624:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004628:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800464c <scalbnf+0xc8>
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	e7d7      	b.n	80045e2 <scalbnf+0x5e>
 8004632:	bf00      	nop
 8004634:	ffff3cb0 	.word	0xffff3cb0
 8004638:	4c000000 	.word	0x4c000000
 800463c:	7149f2ca 	.word	0x7149f2ca
 8004640:	f149f2ca 	.word	0xf149f2ca
 8004644:	0da24260 	.word	0x0da24260
 8004648:	8da24260 	.word	0x8da24260
 800464c:	33000000 	.word	0x33000000

08004650 <floorf>:
 8004650:	ee10 3a10 	vmov	r3, s0
 8004654:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004658:	3a7f      	subs	r2, #127	@ 0x7f
 800465a:	2a16      	cmp	r2, #22
 800465c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004660:	dc2b      	bgt.n	80046ba <floorf+0x6a>
 8004662:	2a00      	cmp	r2, #0
 8004664:	da12      	bge.n	800468c <floorf+0x3c>
 8004666:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80046cc <floorf+0x7c>
 800466a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800466e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	dd06      	ble.n	8004686 <floorf+0x36>
 8004678:	2b00      	cmp	r3, #0
 800467a:	da24      	bge.n	80046c6 <floorf+0x76>
 800467c:	2900      	cmp	r1, #0
 800467e:	4b14      	ldr	r3, [pc, #80]	@ (80046d0 <floorf+0x80>)
 8004680:	bf08      	it	eq
 8004682:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8004686:	ee00 3a10 	vmov	s0, r3
 800468a:	4770      	bx	lr
 800468c:	4911      	ldr	r1, [pc, #68]	@ (80046d4 <floorf+0x84>)
 800468e:	4111      	asrs	r1, r2
 8004690:	420b      	tst	r3, r1
 8004692:	d0fa      	beq.n	800468a <floorf+0x3a>
 8004694:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80046cc <floorf+0x7c>
 8004698:	ee30 0a27 	vadd.f32	s0, s0, s15
 800469c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80046a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a4:	ddef      	ble.n	8004686 <floorf+0x36>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfbe      	ittt	lt
 80046aa:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80046ae:	fa40 f202 	asrlt.w	r2, r0, r2
 80046b2:	189b      	addlt	r3, r3, r2
 80046b4:	ea23 0301 	bic.w	r3, r3, r1
 80046b8:	e7e5      	b.n	8004686 <floorf+0x36>
 80046ba:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80046be:	d3e4      	bcc.n	800468a <floorf+0x3a>
 80046c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80046c4:	4770      	bx	lr
 80046c6:	2300      	movs	r3, #0
 80046c8:	e7dd      	b.n	8004686 <floorf+0x36>
 80046ca:	bf00      	nop
 80046cc:	7149f2ca 	.word	0x7149f2ca
 80046d0:	bf800000 	.word	0xbf800000
 80046d4:	007fffff 	.word	0x007fffff

080046d8 <_init>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

080046e4 <_fini>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr
